
#Область ПроцедурыИФункцииОпределенияРазрезовПоказателейИБюджетов

Функция ПолучитьСписокРазрезовБюджета(Бюджет) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РазрезыУчета.Измерение,
		|	РазрезыУчета.Разрез,
		|	РазрезыУчета.Разрез.ПредставлениеДополнительногоРеквизита КАК Представление,
		|	РазрезыУчета.НомерСтроки КАК Порядок
		|ИЗ
		|	Справочник.фин_Бюджеты.РазрезыУчета КАК РазрезыУчета
		|ГДЕ
		|	РазрезыУчета.Ссылка = &Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";

	Запрос.УстановитьПараметр("Владелец", Бюджет);
	СписокРазрезов = Новый СписокЗначений;
	СписокРазрезов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Измерение"));
	Возврат СписокРазрезов;
КонецФункции

Функция ПолучитьСписокРазрезовСтатьи(Статья) Экспорт
	ОбъектТипа = ?(ТипЗнч(Статья)=Тип("Массив") И Статья.Количество()>0,Статья[0],Статья);
	ИмяСправочника = ?(ТипЗнч(ОбъектТипа)=Тип("СправочникСсылка.фин_ФинансовыеПоказатели"),"фин_ФинансовыеПоказатели","фин_АгрегатыФинансовыхПоказателей");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФП.Измерение,
		|	ФП.Разрез
		|ИЗ
		|	Справочник."+ИмяСправочника+".РазрезыУчета КАК ФП
		|ГДЕ
		|	ФП.Ссылка "+?(ТипЗнч(Статья)=Тип("Массив"),"В (&Статья)","= &Статья");

	Запрос.УстановитьПараметр("Статья", Статья);
	СписокРазрезов = Новый СписокЗначений;
	СписокРазрезов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Измерение"));
	Для Каждого ЭлементСписка Из СписокРазрезов Цикл
		ЭлементСписка.Представление = ПредставлениеРазреза(ЭлементСписка.Значение);
	КонецЦикла;
	Возврат СписокРазрезов;
КонецФункции

Функция ПолучитьСписокИменРазрезовПоказателя(Показатель) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФП.Измерение,
		|	ФП.Разрез
		|ИЗ
		|	Справочник."+?(ТипЗнч(Показатель)=Тип("СправочникСсылка.фин_ФинансовыеПоказатели"),"фин_ФинансовыеПоказатели","фин_АгрегатыФинансовыхПоказателей")+".РазрезыУчета КАК ФП
		|ГДЕ
		|	ФП.Ссылка "+?(ТипЗнч(Показатель)=Тип("Массив"),"В (&Статья)","= &Статья");

	Запрос.УстановитьПараметр("Статья", Показатель);
	СписокРазрезов = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Измерение") Цикл
		СписокРазрезов.Добавить(ИмяРазреза(ЭлементСписка));
	КонецЦикла;
	Возврат СписокРазрезов;
КонецФункции

//Функция УчетПоСтатьеПоРазрезу(ФинансовыйПоказатель,Измерение,КЭШ=Неопределено) Экспорт
//	
//	Если КЭШ<>Неопределено Тогда
//		Если ТипЗнч(КЭШ)=Тип("Соответствие") Тогда
//			ФП = КЭШ.Получить(ФинансовыйПоказатель);
//			Если ФП<>Неопределено Тогда
//				С_И = ФП.Получить(Измерение);
//				Если С_И<>Неопределено Тогда
//					Возврат С_И;
//				КонецЕсли;
//			КонецЕсли;
//		Иначе
//			СтрокиКЭШ = КЭШ.НайтиСтроки(Новый Структура("ФинансовыйПоказатель,Измерение",ФинансовыйПоказатель,Измерение));
//			Если СтрокиКЭШ.Количество()>0 Тогда
//				Возврат СтрокиКЭШ[0].Признак;	
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ФинансовыеПоказателиРазрезыУчета.Ссылка
//		|ИЗ
//		|	Справочник."+?(ТипЗнч(ФинансовыйПоказатель)=Тип("СправочникСсылка.фин_ФинансовыеПоказатели"),"фин_ФинансовыеПоказатели","фин_АгрегатыФинансовыхПоказателей")+".РазрезыУчета КАК ФинансовыеПоказателиРазрезыУчета
//		|ГДЕ
//		|	ФинансовыеПоказателиРазрезыУчета.Ссылка = &Статья
//		|	И ФинансовыеПоказателиРазрезыУчета.Измерение = &Измерение";

//	Запрос.УстановитьПараметр("Измерение", Измерение);
//	Запрос.УстановитьПараметр("Статья", ФинансовыйПоказатель);

//	Результат = Запрос.Выполнить();

//	Ответ = НЕ Результат.Пустой();
//	
//	Если КЭШ<>Неопределено Тогда
//		Если ТипЗнч(КЭШ)=Тип("Соответствие") Тогда
//			ФП = КЭШ.Получить(ФинансовыйПоказатель);
//			Если ФП=Неопределено Тогда
//				ФП=Новый Соответствие;
//			КонецЕсли;
//			ФП.Вставить(Измерение,Ответ);
//			КЭШ.Вставить(ФинансовыйПоказатель,ФП);
//		Иначе
//			НоваяСтрока = КЭШ.Добавить();
//			НоваяСтрока.ФинансовыйПоказатель 	= ФинансовыйПоказатель;
//			НоваяСтрока.Измерение 				= Измерение;
//			НоваяСтрока.Признак 				= Ответ;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат Ответ;

//КонецФункции

Функция УчетПоСтатьеПоРазрезу(ФинансовыйПоказатель,Измерение,КЭШ=Неопределено) Экспорт
	
	Если КЭШ<>Неопределено Тогда
		Если ТипЗнч(КЭШ)=Тип("Соответствие") Тогда
			ФП = КЭШ.Получить(ФинансовыйПоказатель);
			Если ФП<>Неопределено Тогда
				С_И = ФП.Получить(Измерение);
				Если С_И<>Неопределено Тогда
					Возврат С_И;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокиКЭШ = КЭШ.НайтиСтроки(Новый Структура("ФинансовыйПоказатель,Измерение",ФинансовыйПоказатель,Измерение));
			Если СтрокиКЭШ.Количество()>0 Тогда
				Возврат СтрокиКЭШ[0].Признак;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Ответ = фин_ОбщегоНазначенияВызовСервераПовтИсп.ОпределитьНаличиеРазрезаВФинансовомПоказателе(ФинансовыйПоказатель,Измерение);
	
	Если КЭШ<>Неопределено Тогда
		Если ТипЗнч(КЭШ)=Тип("Соответствие") Тогда
			ФП = КЭШ.Получить(ФинансовыйПоказатель);
			Если ФП=Неопределено Тогда
				ФП=Новый Соответствие;
			КонецЕсли;
			ФП.Вставить(Измерение,Ответ);
			КЭШ.Вставить(ФинансовыйПоказатель,ФП);
		Иначе
			НоваяСтрока = КЭШ.Добавить();
			НоваяСтрока.ФинансовыйПоказатель 	= ФинансовыйПоказатель;
			НоваяСтрока.Измерение 				= Измерение;
			НоваяСтрока.Признак 				= Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

//Функция НаличиеРазрезаБюджета
//
Функция НаличиеРазрезаБюджета(Бюджет,Разрез) Экспорт
	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("Бюджет",Бюджет);
	 Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                |	ФинансовыеПоказатели.Ссылка
	                |ИЗ
	                |	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК ФинансовыеПоказатели
	                |		ПО СтатьиБюджета.ФинансовыйПоказатель = ФинансовыеПоказатели.Ссылка
	                |ГДЕ
	                |	НЕ СтатьиБюджета.ПометкаУдаления
	                |	И СтатьиБюджета.Владелец = &Бюджет
	                |	И ФинансовыеПоказатели."+?(Разрез="Количество","УчетПоКоличеству",?(Разрез="Сумма","УчетПоСумме",?(Разрез="Номенклатура","РазделениеПоНоменклатуре",?(Разрез="Контрагент","РазделениеПоКонтрагентам",?(Разрез="Цена","УчетПоКоличеству И ФинансовыеПоказатели.УчетПоСумме",Разрез)))));
	  Возврат Не Запрос.Выполнить().Пустой();
КонецФункции //НаличиеРазрезаБюджета

Функция ПолучитьТаблицуРазрезовБюджета(Бюджет) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Разрезы.Измерение,
		|	Разрезы.Разрез
		|ПОМЕСТИТЬ ВТ_Разрезы
		|ИЗ
		|	Справочник.фин_Бюджеты.РазрезыУчета КАК Разрезы
		|ГДЕ
		|	Разрезы.Ссылка = &Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Разрезы.Измерение,
		|	ВТ_Разрезы.Разрез,
		|	ВТ_Разрезы.Разрез.ПредставлениеДополнительногоРеквизита КАК Представление,
		|	ЕСТЬNULL(РазрезыУчета.НомерСтроки, 100) КАК Порядок
		|ИЗ
		|	ВТ_Разрезы КАК ВТ_Разрезы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_Бюджеты.РазрезыУчета КАК РазрезыУчета
		|		ПО ВТ_Разрезы.Измерение = РазрезыУчета.Измерение
		|			И (РазрезыУчета.Ссылка = &Владелец)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";

	Запрос.УстановитьПараметр("Владелец", Бюджет);
	СписокРазрезов = Новый СписокЗначений;
	СписокРазрезов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Измерение"));
	Возврат СписокРазрезов;
КонецФункции

Функция НаличиеДополнительныхРазрезов(ФинансовыйПоказатель) Экспорт
    Измерения = Новый СписокЗначений;
	Для Каждого Значение Из Метаданные.Перечисления.фин_ФактическиеПоказателиБюджетирования.ЗначенияПеречисления Цикл
		Если Найти(Значение.Имя,"Разрез")<>0 Тогда
			Измерения.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования[Значение.Имя]);
		КонецЕсли;
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФинансовыеПоказателиРазрезыУчета.Ссылка
		|ИЗ
		|	Справочник.фин_ФинансовыеПоказатели.РазрезыУчета КАК ФинансовыеПоказателиРазрезыУчета
		|ГДЕ
		|	ФинансовыеПоказателиРазрезыУчета.Ссылка = &Статья
		|	И ФинансовыеПоказателиРазрезыУчета.Измерение В (&Измерения)";

	Запрос.УстановитьПараметр("Измерения", Измерения);
	Запрос.УстановитьПараметр("Статья", ФинансовыйПоказатель);

	Результат = Запрос.Выполнить();

	Возврат НЕ Результат.Пустой();

КонецФункции
	
Функция ОписаниеТиповНоменклатурногоПеречня(ФинансовыйПоказатель,Сценарий=Неопределено,УчетПоПлановойНоменклатуре=Неопределено,мИспользуемыйНоменклатурныйПеречень=Неопределено) Экспорт
	МассивТипов = Новый Массив;
	Если Сценарий <> Неопределено Тогда
		Если Сценарий.ДетализацияПланирования=фин_ОбщегоНазначенияВызовСервераПовтИсп.ДетализацияПланированияНоменклатурныеГруппы() Тогда
			МассивТипов.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипНоменклатурныеГруппыСсылка());
			Возврат Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
	КонецЕсли;
	Если УчетПоПлановойНоменклатуре=Неопределено Тогда
		УчетПоПлановойНоменклатуре = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВестиУчетПоПлановойНоменклатуре");
	КонецЕсли;
	Если УчетПоПлановойНоменклатуре И (ТипЗнч(ФинансовыйПоказатель)=Тип("СправочникСсылка.фин_ФинансовыеПоказатели") ИЛИ ТипЗнч(ФинансовыйПоказатель)=Тип("СправочникСсылка.фин_АгрегатыФинансовыхПоказателей")) Тогда
		ИспользуемыйНоменклатурныйПеречень = ?(мИспользуемыйНоменклатурныйПеречень=Неопределено,фин_ОбщегоНазначенияВызовСервераПовтИсп.ИспользуемыйНоменклатурныйПеречень(ФинансовыйПоказатель),мИспользуемыйНоменклатурныйПеречень);
		Если ИспользуемыйНоменклатурныйПеречень=Перечисления.узп_ИспользуемыеНоменклатурныеПеречни.ПлановаяНоменклатура ИЛИ ИспользуемыйНоменклатурныйПеречень=Перечисления.узп_ИспользуемыеНоменклатурныеПеречни.РегламентированнаяИПлановаяНоменклатура Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка.фин_ПлановаяНоменклатура"));
		КонецЕсли;
		Если ИспользуемыйНоменклатурныйПеречень=Перечисления.узп_ИспользуемыеНоменклатурныеПеречни.РегламентированнаяНоменклатура ИЛИ ИспользуемыйНоменклатурныйПеречень=Перечисления.узп_ИспользуемыеНоменклатурныеПеречни.РегламентированнаяИПлановаяНоменклатура Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
		КонецЕсли;
	Иначе
		МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
	КонецЕсли;
	Возврат Новый ОписаниеТипов(МассивТипов);
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбработкиДокументовИЗначений

Процедура ОбработатьРазрезыДокумента(ДокументСсылка) Экспорт
	Документ = ДокументСсылка.ПолучитьОбъект();
	Если ТипЗнч(Документ)=Тип("ДокументОбъект.фин_Бюджет") Тогда
		СписокРазрезов = ПолучитьСписокРазрезовБюджета(Документ.ФормируемыйБюджет);
		СписокТЧ = Новый Массив;
		СписокТЧ.Добавить("ОборотыПоСтатьям");
		СписокТЧ.Добавить("ЗависимыеОбороты");
		СписокТЧ.Добавить("РасчетыПоМоделям");
	ИначеЕсли ТипЗнч(Документ)=Тип("ДокументОбъект.фин_НастройкаЗависимостейМеждуФинансовымиПоказателями") Тогда
		СписокРазрезов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов");
		СписокТЧ = Новый Массив;
		СписокТЧ.Добавить("ЗависимостиОборотовПоСтатьям");
	ИначеЕсли ТипЗнч(Документ)=Тип("ДокументОбъект.фин_УстановкаЛимитовИЦелевыхЗначений") Тогда
		СписокРазрезов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов");
		СписокТЧ = Новый Массив;
		СписокТЧ.Добавить("ГраницыЗначений");
	ИначеЕсли ТипЗнч(Документ)=Тип("ДокументОбъект.фин_УчетФактическихДанныхПоБюджетам") Тогда
		СписокРазрезов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов");
		СписокТЧ = Новый Массив;
		СписокТЧ.Добавить("БюджетныеОперации");
	КонецЕсли;
	ОбработанныеРазрезы=Новый Массив;
	Для Каждого Разрез Из СписокРазрезов Цикл
		ИмяРазреза = ИмяРазреза(Разрез.Значение);
		Если Найти(ИмяРазреза,"Разрез")=0 Тогда
			Продолжить;
		КонецЕсли;
		НомерРазреза = Сред(ИмяРазреза,СтрДлина("Разрез")+1);
		ЭлементПВХ = РазрезПоИзмерению(Разрез.Значение);
		Для Каждого ТЧ Из СписокТЧ Цикл
			Для Каждого СтрокаТЧ Из Документ[ТЧ] Цикл
				СтрокаТЧ["Разрез"+НомерРазреза] = ?(СтрокаТЧ["Разрез"+НомерРазреза]=Неопределено,ЭлементПВХ.ТипЗначения.ПривестиЗначение(Неопределено),СтрокаТЧ["Разрез"+НомерРазреза]);
			КонецЦикла;
		КонецЦикла;
		ОбработанныеРазрезы.Добавить(ИмяРазреза);
	КонецЦикла;
	Для Инд=1 По 10 Цикл
		имяЭлемента = "Разрез"+Строка(Инд);
		Если ОбработанныеРазрезы.Найти(ИмяЭлемента)=Неопределено Тогда
			Для Каждого ТЧ Из СписокТЧ Цикл
				Для Каждого СтрокаТЧ Из Документ[ТЧ] Цикл
					СтрокаТЧ[ИмяЭлемента] = Неопределено;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Документ.ДополнительныеСвойства.Вставить("ВнешняяОбработка");
	Попытка
		Документ.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Сообщить("Не обработан документ "+ДокументСсылка);
	КонецПопытки;
КонецПроцедуры //ОбработатьРазрезыДокумента

Процедура БюджетированиеПередЗаписьюДокументаОбновлениеРазрезовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если Отказ ИЛИ Источник.ПометкаУдаления ИЛИ НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИспользоватьУниверсальнуюАналитику") Тогда
		Возврат;
	КонецЕсли;
	МассивТабличныхЧастей = Новый Массив;
	Если ТипЗнч(Источник)=Тип("ДокументОбъект.фин_Бюджет") Тогда         
		МассивТабличныхЧастей.Добавить("ЗависимыеОбороты");
		МассивТабличныхЧастей.Добавить("ОборотыПоСтатьям");
		МассивТабличныхЧастей.Добавить("РасчетыПоМоделям");
		
		мСтруктураРазрезовБюджета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьМассивДополнительныхРазрезов");//ПолучитьСписокРазрезовБюджета(Источник.ФормируемыйБюджет);
		Для Каждого Разрез Из мСтруктураРазрезовБюджета Цикл
			ИмяРазреза = ИмяРазреза(Разрез);
			Если Найти(ИмяРазреза,"Разрез")=0 Тогда
				Продолжить;
			КонецЕсли;
			ЭлементПВХ = РазрезПоИзмерению(Разрез);
			ОписаниеТиповРазреза = ЭлементПВХ.ТипЗначения;
			Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
				Если ОписаниеТиповРазреза.Типы().Количество()=1 Тогда
					СтрокиОбновить = Источник[ТабличнаяЧасть].НайтиСтроки(Новый Структура(ИмяРазреза,Неопределено));	
					Для Каждого СтрокаТЧ Из СтрокиОбновить Цикл
						СтрокаТЧ[ИмяРазреза] = ОписаниеТиповРазреза.ПривестиЗначение(СтрокаТЧ[ИмяРазреза]);
					КонецЦикла;
				Иначе
					Для Каждого ТипОписания Из ОписаниеТиповРазреза.Типы() Цикл
						МассивТип = Новый Массив;
						МассивТип.Добавить(ТипОписания);
						ВложенноеОписаниеТипа = Новый ОписаниеТипов(МассивТип);
						СтрокиОбновить = Источник[ТабличнаяЧасть].НайтиСтроки(Новый Структура(ИмяРазреза,ВложенноеОписаниеТипа.ПривестиЗначение(Неопределено)));	
						Для Каждого СтрокаТЧ Из СтрокиОбновить Цикл
							СтрокаТЧ[ИмяРазреза] = Неопределено;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Источник)=Тип("ДокументОбъект.фин_НастройкаЗависимостейМеждуФинансовымиПоказателями") Тогда
		МассивТабличныхЧастей.Добавить("ЗависимостиОборотовПоСтатьям");
	ИначеЕсли ТипЗнч(Источник)=Тип("ДокументОбъект.фин_УстановкаЛимитовИЦелевыхЗначений") Тогда
		МассивТабличныхЧастей.Добавить("ГраницыЗначений");
	ИначеЕсли ТипЗнч(Источник)=Тип("ДокументОбъект.фин_УчетФактическихДанныхПоБюджетам") ИЛИ ТипЗнч(Источник)=Тип("ДокументОбъект.фин_РегистрацияПрогнозныхДанныхПоИсполнениюБюджетов") ИЛИ ТипЗнч(Источник)=Тип("ДокументОбъект.фин_РассмотрениеОтклоненийФактическихДанных") Тогда
		МассивТабличныхЧастей.Добавить("БюджетныеОперации");
		мСтруктураРазрезовБюджета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьМассивДополнительныхРазрезов");//ПолучитьСписокРазрезовБюджета(Источник.ФормируемыйБюджет);
		Для Каждого Разрез Из мСтруктураРазрезовБюджета Цикл
			ИмяРазреза = ИмяРазреза(Разрез);
			Если Найти(ИмяРазреза,"Разрез")=0 Тогда
				Продолжить;
			КонецЕсли;
			ЭлементПВХ = РазрезПоИзмерению(Разрез);
			ОписаниеТиповРазреза = ЭлементПВХ.ТипЗначения;
			Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
				Если ОписаниеТиповРазреза.Типы().Количество()=1 Тогда
					СтрокиОбновить = Источник[ТабличнаяЧасть].НайтиСтроки(Новый Структура(ИмяРазреза,Неопределено));	
					Для Каждого СтрокаТЧ Из СтрокиОбновить Цикл
						СтрокаТЧ[ИмяРазреза] = ОписаниеТиповРазреза.ПривестиЗначение(СтрокаТЧ[ИмяРазреза]);
					КонецЦикла;
				Иначе
					Для Каждого ТипОписания Из ОписаниеТиповРазреза.Типы() Цикл
						МассивТип = Новый Массив;
						МассивТип.Добавить(ТипОписания);
						ВложенноеОписаниеТипа = Новый ОписаниеТипов(МассивТип);
						СтрокиОбновить = Источник[ТабличнаяЧасть].НайтиСтроки(Новый Структура(ИмяРазреза,ВложенноеОписаниеТипа.ПривестиЗначение(Неопределено)));	
						Для Каждого СтрокаТЧ Из СтрокиОбновить Цикл
							СтрокаТЧ[ИмяРазреза] = Неопределено;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		//обработка номенклатуры
		Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
			СтрокиОбновить = Источник[ТабличнаяЧасть].НайтиСтроки(Новый Структура("Номенклатура",Неопределено));	
			Для Каждого СтрокаТЧ Из СтрокиОбновить Цикл
				УчетПоНоменклатуре = фин_ОбщегоНазначенияВызовСервераПовтИсп.СтруктураРазрезовФинансовогоПоказателя(СтрокаТЧ.ФинансовыйПоказатель).Свойство("Номенклатура");
				Если УчетПоНоменклатуре Тогда
					ОписаниеТипов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ОписаниеТиповНоменклатурногоПеречня(СтрокаТЧ.ФинансовыйПоказатель);
				    СтрокаТЧ.Номенклатура = ОписаниеТипов.ПривестиЗначение(СтрокаТЧ.Номенклатура);
				Иначе
				    СтрокаТЧ.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Источник)=Тип("ДокументОбъект.фин_ВводЗначенийРасчетныхПоказателей") Тогда
		МассивТабличныхЧастей.Добавить("ЗначенияПоказателей");
		мСтруктураРазрезовБюджета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьМассивДополнительныхРазрезов");//ПолучитьСписокРазрезовБюджета(Источник.ФормируемыйБюджет);
		Для Каждого Разрез Из мСтруктураРазрезовБюджета Цикл
			ИмяРазреза = ИмяРазреза(Разрез);
			Если Найти(ИмяРазреза,"Разрез")=0 Тогда
				Продолжить;
			КонецЕсли;
			ЭлементПВХ = РазрезПоИзмерению(Разрез);
			ОписаниеТиповРазреза = ЭлементПВХ.ТипЗначения;
			Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
				Если ОписаниеТиповРазреза.Типы().Количество()=1 Тогда
					СтрокиОбновить = Источник[ТабличнаяЧасть].НайтиСтроки(Новый Структура(ИмяРазреза,Неопределено));	
					Для Каждого СтрокаТЧ Из СтрокиОбновить Цикл
						СтрокаТЧ[ИмяРазреза] = ОписаниеТиповРазреза.ПривестиЗначение(СтрокаТЧ[ИмяРазреза]);
					КонецЦикла;
				Иначе
					Для Каждого ТипОписания Из ОписаниеТиповРазреза.Типы() Цикл
						МассивТип = Новый Массив;
						МассивТип.Добавить(ТипОписания);
						ВложенноеОписаниеТипа = Новый ОписаниеТипов(МассивТип);
						СтрокиОбновить = Источник[ТабличнаяЧасть].НайтиСтроки(Новый Структура(ИмяРазреза,ВложенноеОписаниеТипа.ПривестиЗначение(Неопределено)));	
						Для Каждого СтрокаТЧ Из СтрокиОбновить Цикл
							СтрокаТЧ[ИмяРазреза] = Неопределено;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
	СтруктураПоискаИдентичныхСтрок = Новый Структура();
	СтруктураРазрезовБюджета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьМассивДополнительныхРазрезов");
	Для Каждого Разрез Из СтруктураРазрезовБюджета Цикл
		ИмяРазреза = ИмяРазреза(Разрез);
		Если Найти(ИмяРазреза,"Разрез")=0 Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПоискаИдентичныхСтрок.Вставить(ИмяРазреза);
	КонецЦикла;
	СписокРазрезов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьМассивДополнительныхРазрезов");
	ТекстУсловия = "";
	ТекстИндекса = "";
	Если СписокРазрезов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	СписокИменДопРазрезов = Новый Массив;
	СоответствиеИмениТипов = Новый Соответствие;
	Для Каждого ЭлементСписка Из СписокРазрезов Цикл
		ИмяРазреза 			= ИмяРазреза(ЭлементСписка);
		СписокИменДопРазрезов.Добавить(ИмяРазреза);
		НомерРазреза 		= Сред(ИмяРазреза,СтрДлина("Разрез")+1);
		Типы 				= РазрезПоИзмерению(ЭлементСписка).ТипЗначения.Типы();
		ВложенноеУсловие 	= "";
		ТекстИндекса = ТекстИндекса+?(ТекстИндекса="","",",")+"
		|	"+ИмяРазреза;
		Для Каждого Тип Из Типы Цикл
			Если Тип=Тип("Булево") Тогда
				ВложенноеУсловие = "ЛОЖЬ";
			ИначеЕсли Тип=Тип("Дата") Тогда
				ВложенноеУсловие = "ДАТАВРЕМЯ(1,1,1,0,0,0)";
			ИначеЕсли Тип=Тип("Число") Тогда
				ВложенноеУсловие = "0";
			ИначеЕсли Тип=Тип("Строка") Тогда
				ВложенноеУсловие = """";
			Иначе 
				ИмяТаблицы = ОпределитьТаблицуПоТипу(Тип);
				ВложенноеУсловие = "ЗНАЧЕНИЕ("+ИмяТаблицы+".ПустаяСсылка)";
				НОписание = Новый ОписаниеТипов(СтрЗаменить(ИмяТаблицы,".","Ссылка."));
			КонецЕсли;
		КонецЦикла;
		СоответствиеИмениТипов.Вставить(ИмяРазреза,?(Типы.Количество()=1,ВложенноеУсловие,"Неопределено"));
		ТекстУсловия 	= ТекстУсловия+"
		|	"+?(ТекстУсловия="",""," И ")+" ВТ_Строки.Разрез"+НомерРазреза+" = КлассификаторНаборовДополнительныхРазрезов.Разрез"+НомерРазреза;
		
	КонецЦикла;
	Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
		Если Источник[ТабличнаяЧасть].Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ РАЗЛИЧНЫЕ";
		Для Каждого Разрез Из СписокИменДопРазрезов Цикл
			Запрос.Текст=Запрос.Текст+"
			| ВЫБОР	КОГДА Таблица."+Разрез+"=НЕОПРЕДЕЛЕНО ТОГДА "+СоответствиеИмениТипов.Получить(Разрез)+" ИНАЧЕ Таблица."+Разрез+" КОНЕЦ КАК "+Разрез+?(СписокИменДопРазрезов.Найти(Разрез)<>СписокИменДопРазрезов.Количество()-1,",","")
		КонецЦикла;
		Запрос.Текст=Запрос.Текст+"
		    |ПОМЕСТИТЬ ВТ_Строки
		    |ИЗ
		    |	&ТЧ КАК Таблица
			|ИНДЕКСИРОВАТЬ ПО
			|	"+ТекстИндекса+"
		    |;
		    |
		    |////////////////////////////////////////////////////////////////////////////////
		    |ВЫБРАТЬ
		    |	МИНИМУМ(ВТ_Строки.Ссылка) КАК Ссылка,";
			Для Каждого Разрез Из СписокИменДопРазрезов Цикл
				Запрос.Текст=Запрос.Текст+"
				| ВТ_Строки."+Разрез+?(СписокИменДопРазрезов.Найти(Разрез)<>СписокИменДопРазрезов.Количество()-1,",","")
			КонецЦикла;
		    Запрос.Текст=Запрос.Текст+"
			|ПОМЕСТИТЬ ВТ_Справочник
		    |ИЗ
		    |	Справочник.фин_КлассификаторНаборовДополнительныхРазрезов КАК ВТ_Строки
		    |ГДЕ
		    |	НЕ ВТ_Строки.ПометкаУдаления
		    |
		    |СГРУППИРОВАТЬ ПО";
			Для Каждого Разрез Из СписокИменДопРазрезов Цикл
				Запрос.Текст=Запрос.Текст+"
				| ВТ_Строки."+Разрез+?(СписокИменДопРазрезов.Найти(Разрез)<>СписокИменДопРазрезов.Количество()-1,",","")
			КонецЦикла;
			Запрос.Текст=Запрос.Текст+"
			|ИНДЕКСИРОВАТЬ ПО
			|	"+ТекстИндекса+"
		    |;
		    |
		    |////////////////////////////////////////////////////////////////////////////////
		    |ВЫБРАТЬ
		    |	МИНИМУМ(КлассификаторНаборовДополнительныхРазрезов.Ссылка) КАК Ссылка,";
			Для Каждого Разрез Из СписокИменДопРазрезов Цикл
				Запрос.Текст=Запрос.Текст+"
				| ВТ_Строки."+Разрез+?(СписокИменДопРазрезов.Найти(Разрез)<>СписокИменДопРазрезов.Количество()-1,",","")
			КонецЦикла;
			Запрос.Текст=Запрос.Текст+"
		    |ИЗ
		    |	ВТ_Строки КАК ВТ_Строки
		    |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Справочник КАК КлассификаторНаборовДополнительныхРазрезов
		    |		ПО "+ТекстУсловия+"
		    |
		    |СГРУППИРОВАТЬ ПО";
			Для Каждого Разрез Из СписокИменДопРазрезов Цикл
				Запрос.Текст=Запрос.Текст+"
				| ВТ_Строки."+Разрез+?(СписокИменДопРазрезов.Найти(Разрез)<>СписокИменДопРазрезов.Количество()-1,",","")
			КонецЦикла;
		Запрос.УстановитьПараметр("ТЧ",Источник[ТабличнаяЧасть]);
		Выборка = Запрос.Выполнить().Выбрать();
		ОбработанныеНомераСтрок = Новый ТаблицаЗначений;
		ОбработанныеНомераСтрок.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число"));
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоискаИдентичныхСтрок,Выборка);
			Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
				ДополнительныеРазрезы = Выборка.Ссылка;
			Иначе
				СтруктураЗначенийРазрезов = Новый Структура;
				Для Каждого Разрез Из СписокИменДопРазрезов Цикл
                    СтруктураЗначенийРазрезов.Вставить(Разрез,Выборка[Разрез]);
				КонецЦикла;
				ДополнительныеРазрезы = ОпределитьПозициюКлассификатораПоСтруктуре(СтруктураЗначенийРазрезов);
			КонецЕсли;
			ИдентичныеСтроки = Источник[ТабличнаяЧасть].НайтиСтроки(СтруктураПоискаИдентичныхСтрок);
			Для Каждого СтрокаИдентичная Из ИдентичныеСтроки Цикл
				СтрокаТЧ = Источник[ТабличнаяЧасть][СтрокаИдентичная.НомерСтроки-1];
				СтрокаТЧ.ДополнительныеРазрезы = ДополнительныеРазрезы;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьКорректныеЗначенияРазрезовВСтроке(СтрокаДокумента,СтруктураРазрезовИТипов = Неопределено,ВключаяБазовыеРазрезы = Ложь) Экспорт
	Если СтруктураРазрезовИТипов = Неопределено Тогда
		СтруктураРазрезовИТипов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("СтруктураРазрезовИТипов");	
	КонецЕсли;
	Для Каждого ЭлементСтруктуры Из СтруктураРазрезовИТипов Цикл
		СтрокаДокумента[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение.ПривестиЗначение(СтрокаДокумента[ЭлементСтруктуры.Ключ]);	
	КонецЦикла;
	Если ВключаяБазовыеРазрезы Тогда
		ОписаниеТипов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ОписаниеТиповУправленческоеПодразделение();
		СтрокаДокумента.УправленческоеПодразделение = ОписаниеТипов.ПривестиЗначение(СтрокаДокумента.УправленческоеПодразделение);	
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов());
		СтрокаДокумента.Проект = ОписаниеТипов.ПривестиЗначение(СтрокаДокумента.Проект);	
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		СтрокаДокумента.Контрагент = ОписаниеТипов.ПривестиЗначение(СтрокаДокумента.Контрагент);
		//МассивТипов = Новый Массив;
		//Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПлановойНоменклатуре") Тогда
		//	Перечень = СтрокаДокумента.ФинансовыйПоказатель.ИспользуемыйНоменклатурныйПеречень;
		//	Если Перечень = Перечисления.узп_ИспользуемыеНоменклатурныеПеречни.ПлановаяНоменклатура Тогда
		//		МассивТипов.Добавить(Тип("СправочникСсылка.фин_ПлановаяНоменклатура"));
		//	ИначеЕсли Перечень = Перечисления.узп_ИспользуемыеНоменклатурныеПеречни.РегламентированнаяИПлановаяНоменклатура Тогда
		//		МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
		//		МассивТипов.Добавить(Тип("СправочникСсылка.фин_ПлановаяНоменклатура"));
		//	Иначе
		//		МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
		//	КонецЕсли;
		//Иначе
		//	МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
		//КонецЕсли;
		//ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		//СтрокаДокумента.Номенклатура = ОписаниеТипов.ПривестиЗначение(СтрокаДокумента.Номенклатура);	
		УчетПоНоменклатуре = фин_ОбщегоНазначенияВызовСервераПовтИсп.СтруктураРазрезовФинансовогоПоказателя(СтрокаДокумента.ФинансовыйПоказатель).Свойство("Номенклатура");
		Если УчетПоНоменклатуре Тогда
			ОписаниеТипов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ОписаниеТиповНоменклатурногоПеречня(СтрокаДокумента.ФинансовыйПоказатель);
			СтрокаДокумента.Номенклатура = ОписаниеТипов.ПривестиЗначение(СтрокаДокумента.Номенклатура);
		Иначе
		    СтрокаДокумента.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьКорректныеЗначенияРазрезовВСтроках(ТабличнаяЧасть,ВключаяБазовыеРазрезы = Ложь) Экспорт
	СтруктураРазрезовИТипов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("СтруктураРазрезовИТипов");	
	Для Каждого СтрокаДокумента Из ТабличнаяЧасть Цикл
		УстановитьКорректныеЗначенияРазрезовВСтроке(СтрокаДокумента,СтруктураРазрезовИТипов,ВключаяБазовыеРазрезы);	
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьДоступностьЯчеекПоПризнакамУчета(СписокСтатей,ОформленияСтрок,СписокСуммовыхРеквизитов,СписокКоличественныхРеквизитов,ПолеСтатьи,Агрегаты=Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Проект) КАК Измерение
		|ПОМЕСТИТЬ ВТ_ИмеющиесяРазрезы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Контрагент)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Номенклатура)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкаДополнительныхРазрезовБюджетирования.Измерение
		|ИЗ
		|	РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК НастройкаДополнительныхРазрезовБюджетирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФинансовыеПоказатели.Ссылка,
		|	ФинансовыеПоказатели.УчетПоКоличеству,
		|	ФинансовыеПоказатели.УчетПоСумме,
		|	ВТ_ИмеющиесяРазрезы.Измерение
		|ПОМЕСТИТЬ ВТ_КортежПоиска
		|ИЗ
		|	Справочник."+?(Агрегаты,"фин_АгрегатыФинансовыхПоказателей","фин_ФинансовыеПоказатели")+" КАК ФинансовыеПоказатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИмеющиесяРазрезы КАК ВТ_ИмеющиесяРазрезы
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ФинансовыеПоказатели.Ссылка В(&СписокСтатей)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_КортежПоиска.Ссылка КАК Ссылка,
		|	ВТ_КортежПоиска.УчетПоКоличеству КАК УчетПоКоличеству,
		|	ВТ_КортежПоиска.УчетПоСумме КАК УчетПоСумме,
		|	ВТ_КортежПоиска.Измерение,
		|	ВЫБОР
		|		КОГДА РазрезыУчета.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Доступность
		|ИЗ
		|	ВТ_КортежПоиска КАК ВТ_КортежПоиска
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник."+?(Агрегаты,"фин_АгрегатыФинансовыхПоказателей","фин_ФинансовыеПоказатели")+".РазрезыУчета КАК РазрезыУчета
		|		ПО ВТ_КортежПоиска.Ссылка = РазрезыУчета.Ссылка
		|			И ВТ_КортежПоиска.Измерение = РазрезыУчета.Измерение
		|			И (РазрезыУчета.Ссылка В (&СписокСтатей))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|ИТОГИ
		|	МАКСИМУМ(УчетПоКоличеству),
		|	МАКСИМУМ(УчетПоСумме)
		|ПО
		|	Ссылка";
	Запрос.УстановитьПараметр("СписокСтатей",СписокСтатей);

	Результат = Запрос.Выполнить();

	ВыборкаСсылка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Для Каждого ЭлементОформления  ИЗ ОформленияСтрок Цикл
		ВыборкаСсылка.Сбросить();
		Если ВыборкаСсылка.НайтиСледующий(Новый Структура("Ссылка",ЭлементОформления.ДанныеСтроки[ПолеСтатьи])) Тогда
			Для Каждого СуммовойРеквизит Из СписокСуммовыхРеквизитов Цикл
				ЭлементОформления.Ячейки[СуммовойРеквизит].ТолькоПросмотр = НЕ ВыборкаСсылка.УчетПоСумме;
			КонецЦикла;
			Для Каждого СуммовойРеквизит Из СписокКоличественныхРеквизитов Цикл
				ЭлементОформления.Ячейки[СуммовойРеквизит].ТолькоПросмотр = НЕ ВыборкаСсылка.УчетПоКоличеству;
			КонецЦикла;
			ВыборкаВложенная = ВыборкаСсылка.Выбрать();
			Пока ВыборкаВложенная.Следующий() Цикл
				ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ВыборкаВложенная.Измерение);
				//Если ИмяРазреза = "Проект" ИЛИ ИмяРазреза="УправленческоеПодразделение" Тогда
				//	Продолжить;	
				//КонецЕсли;
				ЭлементОформления.Ячейки[ИмяРазреза].ТолькоПросмотр = НЕ ВыборкаВложенная.Доступность;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура НастроитьПредставлениеРазрезов(Форма,СписокЗапрещенныхКРедактированиюРазрезов=Неопределено,ИмяПоля="РазрезыУчета",Очищать=Истина,ТаблицаЗначений=Ложь,ИмяКолонки="Измерение") Экспорт
	УсловноеОформление = Форма.УсловноеОформление;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаДополнительныхРазрезовБюджетирования.Измерение,
		|	НастройкаДополнительныхРазрезовБюджетирования.Разрез
		|ИЗ
		|	РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК НастройкаДополнительныхРазрезовБюджетирования";

	Результат = Запрос.Выполнить().Выбрать();
	Если Очищать Тогда
		УсловноеОформление.Элементы.Очистить();
	КонецЕсли;
	Пока Результат.Следующий() Цикл
		НовыйЭлементОформления 		= фин_ОбщегоНазначенияСервер.ДобавитьЭлементУсловногоОформленияСЗаполнением(УсловноеОформление,?(ТаблицаЗначений=Ложь,"Объект.","")+ИмяПоля+"."+ИмяКолонки,,Результат.Измерение,ИмяПоля+ИмяКолонки,Новый Структура("Текст",фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Результат.Измерение)));
		Если СписокЗапрещенныхКРедактированиюРазрезов<>Неопределено И СписокЗапрещенныхКРедактированиюРазрезов.НайтиПоЗначению(Результат.Измерение)<>Неопределено Тогда
			фин_ОбщегоНазначенияСервер.ДобавитьПараметрыОформленияВЭлементУсловногоОформления(НовыйЭлементОформления,Новый Структура("ТолькоПросмотр,ЦветФона",Истина,Новый Цвет(230,230,250)));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура НастроитьПредставлениеРазрезовВПолеФормы(Форма,ИмяПоля="ОсновнаяГруппировка",ПолеОбъекта="ОсновнаяГруппировка") Экспорт
	УсловноеОформление = Форма.УсловноеОформление;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаДополнительныхРазрезовБюджетирования.Измерение,
		|	НастройкаДополнительныхРазрезовБюджетирования.Разрез
		|ИЗ
		|	РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК НастройкаДополнительныхРазрезовБюджетирования";

	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		НовыйЭлементОформления 		= фин_ОбщегоНазначенияСервер.ДобавитьЭлементУсловногоОформленияСЗаполнением(УсловноеОформление,ПолеОбъекта,,Результат.Измерение,ИмяПоля,Новый Структура("Текст",фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Результат.Измерение)));
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСРазрезами

Функция ИмяРазреза(Разрез) Экспорт
	Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяРазреза(Разрез);
КонецФункции

Функция ИмяРазрезаБезКэширования(Разрез) Экспорт
	Для Каждого Значение Из Метаданные.Перечисления.фин_ФактическиеПоказателиБюджетирования.ЗначенияПеречисления Цикл
		Если Перечисления.фин_ФактическиеПоказателиБюджетирования[Значение.Имя]=Разрез Тогда
			Возврат Значение.Имя;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Значение Из Метаданные.Перечисления.фин_КорреспондирующиеПоказателиБюджетирования.ЗначенияПеречисления Цикл
		Если Перечисления.фин_КорреспондирующиеПоказателиБюджетирования[Значение.Имя]=Разрез Тогда
			Возврат Значение.Имя;
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция РазрезПоИзмерению(Разрез,КЭШ=Неопределено) Экспорт
	Если НЕ ТипЗнч(Разрез)=Тип("ПеречислениеСсылка.фин_ФактическиеПоказателиБюджетирования") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если КЭШ=Неопределено Тогда
		КЭШ = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("РазрезыПоИзмерениям");
	КонецЕсли;
	Если КЭШ <> Неопределено Тогда
		Результат = КЭШ.Получить(Разрез);
		Если Результат<>Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	Если Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта Тогда
		Возврат Новый Структура("ТипЗначения",Новый ОписаниеТипов("СправочникСсылка.Валюты"));	
	КонецЕсли;
	Если Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация Тогда
		Возврат Новый Структура("ТипЗначения",Новый ОписаниеТипов("СправочникСсылка.Организации"));	
	КонецЕсли;
	СписокРазрезов = Новый Соответствие;
	СписокРазрезов.Вставить("УправленческоеПодразделение",ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.ЦФО);
	СписокРазрезов.Вставить("Проект",ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Проекты);
	СписокРазрезов.Вставить("Контрагент",ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Контрагенты);
	СписокРазрезов.Вставить("Номенклатура",ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Номенклатура);
	ПредопределенныйРазрез = СписокРазрезов.Получить(ИмяРазреза(Разрез));
	Если ПредопределенныйРазрез=Неопределено Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкаДополнительныхРазрезовБюджетирования.Разрез
			|ИЗ
			|	РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК НастройкаДополнительныхРазрезовБюджетирования
			|ГДЕ
			|	НастройкаДополнительныхРазрезовБюджетирования.Измерение = &Измерение";

		Запрос.УстановитьПараметр("Измерение", ?(ТипЗнч(Разрез)=Тип("ПеречислениеСсылка.фин_ФактическиеПоказателиБюджетирования"),Разрез,?(ТипЗнч(Разрез)=Тип("Строка"),Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез],Разрез.Значение)));

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			РезультатФункции= ВыборкаДетальныеЗаписи.Разрез;
		Иначе
			РезультатФункции= Неопределено;
		КонецЕсли;

	Иначе
		РезультатФункции= ПредопределенныйРазрез;
	КонецЕсли;
	Если КЭШ <> Неопределено Тогда
		КЭШ.Вставить(Разрез,РезультатФункции);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

Функция ИзмерениеПоРазрезу(Разрез) Экспорт
	СписокРазрезов = Новый Соответствие;
	Если Разрез = ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.ЦФО Тогда
		Возврат Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение;
	ИначеЕсли Разрез = ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Проекты Тогда
		Возврат Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект; 
	ИначеЕсли Разрез = ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Контрагенты Тогда
		Возврат Перечисления.фин_ФактическиеПоказателиБюджетирования.Контрагент; 
	ИначеЕсли Разрез = ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Номенклатура Тогда
		Возврат Перечисления.фин_ФактическиеПоказателиБюджетирования.Номенклатура;
	Иначе

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкаДополнительныхРазрезовБюджетирования.Измерение
			|ИЗ
			|	РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК НастройкаДополнительныхРазрезовБюджетирования
			|ГДЕ
			|	НастройкаДополнительныхРазрезовБюджетирования.Разрез = &Разрез";

		Запрос.УстановитьПараметр("Разрез", Разрез);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Измерение;
		КонецЕсли;

		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьСписокДополнительныхРазрезов() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаДополнительныхРазрезовБюджетирования.Измерение,
		|	НастройкаДополнительныхРазрезовБюджетирования.Разрез
		|ПОМЕСТИТЬ ВТ_Разрезы
		|ИЗ
		|	РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК НастройкаДополнительныхРазрезовБюджетирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Разрезы.Измерение,
		|	ВТ_Разрезы.Разрез,
		|	ВТ_Разрезы.Разрез.ПредставлениеДополнительногоРеквизита КАК Представление
		|ИЗ
		|	ВТ_Разрезы КАК ВТ_Разрезы
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Разрезы.Измерение.Порядок";

	мСписокРазрезов = Новый СписокЗначений;
	мСписокРазрезов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Измерение"));
	Возврат мСписокРазрезов;
КонецФункции

Функция БазовыеРазрезы() Экспорт
	БазовыеРазрезы = Новый СписокЗначений;
	БазовыеРазрезы.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Контрагент);
	БазовыеРазрезы.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Номенклатура);
	БазовыеРазрезы.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект);
	БазовыеРазрезы.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение);
	Возврат БазовыеРазрезы;
КонецФункции

Функция ПолучитьПолныйСписокРазрезов(БезПредставления=Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БазовыеРазрезы",БазовыеРазрезы());
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатьиОборотовРазрезы.Измерение
		|ПОМЕСТИТЬ ВТ_Разрезы
		|ИЗ
		|	Справочник.фин_ФинансовыеПоказатели.РазрезыУчета КАК СтатьиОборотовРазрезы
		|ГДЕ
		|	НЕ СтатьиОборотовРазрезы.Ссылка.ПометкаУдаления
		|	И СтатьиОборотовРазрезы.Измерение <> ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Разрезы.Измерение
		|ИЗ
		|	ВТ_Разрезы КАК ВТ_Разрезы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК фин_НастройкаДополнительныхРазрезовБюджетирования
		|		ПО ВТ_Разрезы.Измерение = фин_НастройкаДополнительныхРазрезовБюджетирования.Измерение
		|ГДЕ ВТ_Разрезы.Измерение В (&БазовыеРазрезы) ИЛИ НЕ фин_НастройкаДополнительныхРазрезовБюджетирования.Измерение ЕСТЬ NULL
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Разрезы.Измерение.Порядок";

	СписокРазрезов = Новый СписокЗначений;
	СписокРазрезов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Измерение"));
	Если НЕ БезПредставления Тогда
		Для Каждого Элемент Из СписокРазрезов Цикл
			Элемент.Представление = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	Возврат СписокРазрезов;
КонецФункции

Функция ПредставлениеРазреза(Разрез) Экспорт
	Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ПредставлениеРазреза(Разрез);
КонецФункции

Функция ПредставлениеРазрезаБезКэширования(Разрез) Экспорт
	СписокРазрезов = Новый СписокЗначений;
	СписокРазрезов.Добавить("УправленческоеПодразделение",	"Подразделение (упр.)");
	СписокРазрезов.Добавить("Проект",						"Проект");
	СписокРазрезов.Добавить("Контрагент",					"Контрагент");
	СписокРазрезов.Добавить("Номенклатура",					"Номенклатура");
	СписокРазрезов.Добавить("Сценарий",						"Сценарий");
	СписокРазрезов.Добавить("Валюта",						"Валюта");
	СписокРазрезов.Добавить("Организация",					"Организация");
	СписокРазрезов.Добавить("ФинансовыйПоказатель",			"Финансовый показатель");
	СписокРазрезов.Добавить("Сумма",						"Сумма");
	СписокРазрезов.Добавить("Количество",					"Количество");
	СписокРазрезов.Добавить("Период",						"Период");
	ПредопределенныйРазрез = СписокРазрезов.НайтиПоЗначению(ИмяРазреза(Разрез));
	Если ПредопределенныйРазрез=Неопределено Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НастройкаДополнительныхРазрезовБюджетирования.Разрез
			|ИЗ
			|	РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК НастройкаДополнительныхРазрезовБюджетирования
			|ГДЕ
			|	НастройкаДополнительныхРазрезовБюджетирования.Измерение = &Измерение";

		Запрос.УстановитьПараметр("Измерение", Разрез);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ?(СокрЛП(ВыборкаДетальныеЗаписи.Разрез.ПредставлениеДополнительногоРеквизита)="",Строка(ВыборкаДетальныеЗаписи.Разрез),СокрЛП(ВыборкаДетальныеЗаписи.Разрез.ПредставлениеДополнительногоРеквизита));
		Иначе
			Возврат Строка(Разрез);
		КонецЕсли;

	Иначе
		Возврат ПредопределенныйРазрез.Представление;
	КонецЕсли;
КонецФункции

//Функция РеквизитСодержитТип
//
Функция РеквизитСодержитТип(РеквизитТип,НадлежащийТип) Экспорт
	Если НадлежащийТип="Любой" Тогда
		Возврат Истина;
	КонецЕсли;
	ТипНайден = Ложь;
	Для Каждого мТип Из ?(ТипЗнч(НадлежащийТип)=Тип("ОписаниеТипов"),НадлежащийТип.Типы(),НадлежащийТип) Цикл
		Если РеквизитТип.СодержитТип(мТип) Тогда
			ТипНайден = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ТипНайден;
КонецФункции //РеквизитСодержитТип

//Функция ОпределитьТаблицуПоТипу
//
Функция ОпределитьТаблицуПоТипу(Тип) Экспорт
	СоответствиеТТ = фин_ОбщегоНазначенияВызовСервераПовтИсп.СоответствиеТиповИТаблиц();
	Возврат СоответствиеТТ.Получить(Тип);
КонецФункции //ОпределитьТаблицуПоТипу

Функция СоответствиеТиповИТаблиц() Экспорт
	СоответствиеТТ = Новый Соответствие;
	ГруппаМетаданных = Новый СписокЗначений;
	ГруппаМетаданных.Добавить("Справочники",				"Справочник");
	ГруппаМетаданных.Добавить("ПланыСчетов",				"ПланСчетов");
	ГруппаМетаданных.Добавить("Перечисления",				"Перечисление");
	ГруппаМетаданных.Добавить("ПланыВидовРасчета",			"ПланВидовРасчета");
	ГруппаМетаданных.Добавить("Документы",					"Документ");
	ГруппаМетаданных.Добавить("ПланыВидовХарактеристик",	"ПланВидовХарактеристик");
	Для Каждого Группа Из ГруппаМетаданных Цикл
		Если Группа.Значение="Справочники" Тогда
			Менеджер = Справочники;
		ИначеЕсли Группа.Значение="ПланыСчетов" Тогда
			Менеджер = ПланыСчетов;
		ИначеЕсли Группа.Значение="Перечисления" Тогда
			Менеджер = Перечисления;
		ИначеЕсли Группа.Значение="ПланыВидовРасчета" Тогда
			Менеджер = ПланыВидовРасчета;
		ИначеЕсли Группа.Значение="Документы" Тогда
			Менеджер = Документы;
		ИначеЕсли Группа.Значение="ПланыВидовХарактеристик" Тогда
			Менеджер = ПланыВидовХарактеристик;
		КонецЕсли;
		Для Каждого Объект Из Метаданные[Группа.Значение] Цикл
			СоответствиеТТ.Вставить(Тип(Группа.Представление+"Ссылка."+Объект.Имя),Группа.Представление+"."+Объект.Имя);
		КонецЦикла;
	КонецЦикла;
	Возврат СоответствиеТТ;
КонецФункции

//Функция ОпределитьГруппуМенеджеровПоТаблице(ИмяТаблицы)
//
Функция ОпределитьГруппуМенеджеровПоТаблице(ИмяТаблицы) Экспорт
	ГруппаМетаданных = Новый Соответствие;
	ГруппаМетаданных.Вставить("Справочник",				Справочники);
	ГруппаМетаданных.Вставить("ПланСчетов",				ПланыСчетов);
	ГруппаМетаданных.Вставить("Перечисление",			Перечисления);
	ГруппаМетаданных.Вставить("ПланВидовРасчета",		ПланыВидовРасчета);
	ГруппаМетаданных.Вставить("Документ",				Документы);
	ГруппаМетаданных.Вставить("ПланВидовХарактеристик",	ПланыВидовХарактеристик);
	Возврат ГруппаМетаданных.Получить(Лев(ИмяТаблицы,Найти(ИмяТаблицы,".")-1));
КонецФункции //ОпределитьГруппуМенеджеровПоТаблице
	
Функция ПолучитьСписокИменДополнительныхРазрезов() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаДополнительныхРазрезовБюджетирования.Измерение,
		|	НастройкаДополнительныхРазрезовБюджетирования.Разрез
		|ПОМЕСТИТЬ ВТ_Разрезы
		|ИЗ
		|	РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК НастройкаДополнительныхРазрезовБюджетирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Разрезы.Измерение,
		|	ВТ_Разрезы.Разрез,
		|	ВТ_Разрезы.Разрез.ПредставлениеДополнительногоРеквизита КАК Представление
		|ИЗ
		|	ВТ_Разрезы КАК ВТ_Разрезы
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Разрезы.Измерение.Порядок";
	Выборка = Запрос.Выполнить().Выбрать();

	СписокРазрезов = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокРазрезов.Добавить(ИмяРазреза(Выборка.Измерение));
	КонецЦикла;
	Возврат СписокРазрезов;
КонецФункции
	
Функция ПолучитьПолныйСписокИменРазрезов() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатьиОборотовРазрезы.Измерение
		|ПОМЕСТИТЬ ВТ_Разрезы
		|ИЗ
		|	Справочник.фин_ФинансовыеПоказатели.РазрезыУчета КАК СтатьиОборотовРазрезы
		|ГДЕ
		|	НЕ СтатьиОборотовРазрезы.Ссылка.ПометкаУдаления
		|	И СтатьиОборотовРазрезы.Измерение <> ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Разрезы.Измерение
		|ИЗ
		|	ВТ_Разрезы КАК ВТ_Разрезы
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Разрезы.Измерение.Порядок";

	СписокРазрезов = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокРазрезов.Добавить(ИмяРазреза(Выборка.Измерение));
	КонецЦикла;
	Возврат СписокРазрезов;
КонецФункции

Функция МаксимальноеКоличествоСубконто() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(БюджетированиеВидыСубконто.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	ПланСчетов.фин_Бюджетирование.ВидыСубконто КАК БюджетированиеВидыСубконто";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если ВыборкаДетальныеЗаписи.НомерСтроки =Null Тогда
			Возврат 0;
		Иначе
			Возврат ВыборкаДетальныеЗаписи.НомерСтроки;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции

Функция ПолучитьСоответствиеРазрезовИИмен() Экспорт
	Соответствие = Новый Соответствие;
	Список = ПолучитьПолныйСписокРазрезов(Истина);
	Для Каждого Элемент Из Список Цикл
		Имя = "";
		Для Каждого ЭлементПеречисления Из Метаданные.Перечисления.фин_ФактическиеПоказателиБюджетирования.ЗначенияПеречисления Цикл
			Если Элемент.Значение = Перечисления.фин_ФактическиеПоказателиБюджетирования[ЭлементПеречисления.Имя] Тогда
				Имя = ЭлементПеречисления.Имя;
			КонецЕсли;
		КонецЦикла;
		Соответствие.Вставить(Элемент.Значение,Имя);
	КонецЦикла;
	Возврат Соответствие;
КонецФункции

Функция РазрезыПоИзмерениям() Экспорт
	Список = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов");
	Соответствие = Новый Соответствие;
	Для Каждого Элемент Из Список Цикл
		СписокРазрезов = Новый Соответствие;
		СписокРазрезов.Вставить("УправленческоеПодразделение",ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.ЦФО);
		СписокРазрезов.Вставить("Проект",ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Проекты);
		СписокРазрезов.Вставить("Контрагент",ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Контрагенты);
		СписокРазрезов.Вставить("Номенклатура",ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Номенклатура);
		ПредопределенныйРазрез = СписокРазрезов.Получить(ИмяРазреза(Элемент.Значение));
		Если ПредопределенныйРазрез=Неопределено Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	НастройкаДополнительныхРазрезовБюджетирования.Разрез
				|ИЗ
				|	РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК НастройкаДополнительныхРазрезовБюджетирования
				|ГДЕ
				|	НастройкаДополнительныхРазрезовБюджетирования.Измерение = &Измерение";

			Запрос.УстановитьПараметр("Измерение", ?(ТипЗнч(Элемент.Значение)=Тип("ПеречислениеСсылка.фин_ФактическиеПоказателиБюджетирования"),Элемент.Значение,?(ТипЗнч(Элемент.Значение)=Тип("Строка"),Перечисления.фин_ФактическиеПоказателиБюджетирования[Элемент.Значение],Элемент.Значение)));

			Результат = Запрос.Выполнить();

			ВыборкаДетальныеЗаписи = Результат.Выбрать();

			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				РезультатФункции= ВыборкаДетальныеЗаписи.Разрез;
			Иначе
				РезультатФункции= Неопределено;
			КонецЕсли;

		Иначе
			РезультатФункции= ПредопределенныйРазрез;
		КонецЕсли;
		Соответствие.Вставить(Элемент.Значение,РезультатФункции);
	КонецЦикла;
	Возврат Соответствие;
КонецФункции

Функция ВсеРазрезы() Экспорт
	ПолныйСписокРазрезов = Новый Массив;
	ПолныйСписокРазрезов.Добавить("УправленческоеПодразделение");
	ПолныйСписокРазрезов.Добавить("Проект");
	ПолныйСписокРазрезов.Добавить("Контрагент");
	ПолныйСписокРазрезов.Добавить("Номенклатура");
	ПолныйСписокРазрезов.Добавить("Разрез1");
	ПолныйСписокРазрезов.Добавить("Разрез2");
	ПолныйСписокРазрезов.Добавить("Разрез3");
	ПолныйСписокРазрезов.Добавить("Разрез4");
	ПолныйСписокРазрезов.Добавить("Разрез5");
	ПолныйСписокРазрезов.Добавить("Разрез6");
	ПолныйСписокРазрезов.Добавить("Разрез7");
	ПолныйСписокРазрезов.Добавить("Разрез8");
	ПолныйСписокРазрезов.Добавить("Разрез9");
	ПолныйСписокРазрезов.Добавить("Разрез10");
	Возврат ПолныйСписокРазрезов;
КонецФункции

Процедура ЗаполнитьСписокРазрезовУчета(СписокВыбораРазрезыУчета) Экспорт
	Если ТипЗнч(СписокВыбораРазрезыУчета)<>Тип("СписокЗначений") Тогда
		СписокВыбораРазрезыУчета = Новый СписокЗначений;
	КонецЕсли;
	СписокВыбораРазрезыУчета.Очистить();
	СписокВыбораРазрезыУчета.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение,"Управленческое подразделение");
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПроектам") Тогда
		СписокВыбораРазрезыУчета.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Проект,"Проект");
	КонецЕсли;
	СписокВыбораРазрезыУчета.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Номенклатура,"Номенклатура");
	СписокВыбораРазрезыУчета.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Контрагент,"Контрагенты");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаДополнительныхРазрезовБюджетирования.Измерение,
		|	НастройкаДополнительныхРазрезовБюджетирования.Разрез
		|ИЗ
		|	РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК НастройкаДополнительныхРазрезовБюджетирования";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокВыбораРазрезыУчета.Добавить(ВыборкаДетальныеЗаписи.Измерение,фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(ВыборкаДетальныеЗаписи.Измерение));
	КонецЦикла;
КонецПроцедуры

Функция РассчитатьЗначениеРазрезаПоПравилуАвтоРасчета(Измерение,Правило,ЗначениеИсходногоРазреза) Экспорт
	Результат = Неопределено;
	Если Правило.ВариантРасчета = Перечисления.фин_ВариантыАвтоматическогоРасчетаРазрезовБюджетирования.КопированиеЗначения Тогда
		Результат = ЗначениеИсходногоРазреза;
	ИначеЕсли Правило.ВариантРасчета = Перечисления.фин_ВариантыАвтоматическогоРасчетаРазрезовБюджетирования.Владелец Тогда
		Попытка
			Результат = ЗначениеИсходногоРазреза.Владелец;
		Исключение
			Результат = Неопределено;
		КонецПопытки;
	ИначеЕсли Правило.ВариантРасчета = Перечисления.фин_ВариантыАвтоматическогоРасчетаРазрезовБюджетирования.НоменклатурнаяГруппа Тогда
		Попытка
			Результат = ЗначениеИсходногоРазреза.НоменклатурнаяГруппа;
		Исключение
			Результат = Неопределено;
		КонецПопытки;
	ИначеЕсли Правило.ВариантРасчета = Перечисления.фин_ВариантыАвтоматическогоРасчетаРазрезовБюджетирования.УказанноеПоле Тогда
		Попытка
			Результат = ЗначениеИсходногоРазреза[Правило.ПолеИсходногоРазреза];
		Исключение
			Результат = Неопределено;
		КонецПопытки;
	ИначеЕсли Правило.ВариантРасчета = Перечисления.фин_ВариантыАвтоматическогоРасчетаРазрезовБюджетирования.Соответствие Тогда
		Строки = Правило.Соответствия.НайтиСтроки(Новый Структура("ИсходноеЗначение",ЗначениеИсходногоРазреза));
		Если Строки.Количество()>0 Тогда
			Результат = Строки[0].РезультирующееЗначение;
		Иначе
			Результат = Неопределено;
		КонецЕсли;
	КонецЕсли;
	Разрез = РазрезПоИзмерению(Измерение);
	Возврат Разрез.ТипЗначения.ПривестиЗначение(Результат);
КонецФункции

Функция РассчитатьРазрезАвтоматически(Измерение,ПериодПланирования,Сценарий,СтрокаДанных) Экспорт
 	//правила автоматического расчета разрезов

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрименениеПравил.Период,
		|	ПрименениеПравил.Измерение,
		|	ПрименениеПравил.Сценарий,
		|	ПрименениеПравил.ПрименятьПравило,
		|	ПрименениеПравил.Правило,
		|	фин_ПравилаАвтоматическогоРасчетаРазрезовБюджетирования.ИсходныйРазрез  КАК ИсходныйРазрез
		|ИЗ
		|	РегистрСведений.фин_ПрименениеПравилАвтоматическогоРасчетаРазрезов.СрезПоследних(
		|			&ПериодПланирования,
		|			Сценарий = &Сценарий
		|				
		|				И Измерение = &Измерение) КАК ПрименениеПравил
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ПравилаАвтоматическогоРасчетаРазрезовБюджетирования КАК фин_ПравилаАвтоматическогоРасчетаРазрезовБюджетирования
		|		ПО ПрименениеПравил.Правило = фин_ПравилаАвтоматическогоРасчетаРазрезовБюджетирования.Ссылка
		|ГДЕ
		|	ПрименениеПравил.ПрименятьПравило
 		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ПрименениеПравил.Период,
		|	ПрименениеПравил.Измерение,
		|	ПрименениеПравил.Сценарий,
		|	ПрименениеПравил.ПрименятьПравило,
		|	ПрименениеПравил.Правило,
		|	фин_ПравилаАвтоматическогоРасчетаРазрезовБюджетирования.ИсходныйРазрез  КАК ИсходныйРазрез
		|ИЗ
		|	РегистрСведений.фин_ПрименениеПравилАвтоматическогоРасчетаРазрезов.СрезПоследних(
		|			&ПериодПланирования,
		|			Сценарий = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка)
		|				И Измерение = &Измерение) КАК ПрименениеПравил
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_ПравилаАвтоматическогоРасчетаРазрезовБюджетирования КАК фин_ПравилаАвтоматическогоРасчетаРазрезовБюджетирования
		|		ПО ПрименениеПравил.Правило = фин_ПравилаАвтоматическогоРасчетаРазрезовБюджетирования.Ссылка
		|ГДЕ
		|	ПрименениеПравил.ПрименятьПравило";


	Запрос.УстановитьПараметр("ПериодПланирования", ПериодПланирования);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("Измерение", Измерение);
	Результат = Запрос.Выполнить();

	ТаблицаПравилРасчетаРазрезов = Результат.Выгрузить();

	Если ТаблицаПравилРасчетаРазрезов.Количество()>0 Тогда
		Возврат РассчитатьЗначениеРазрезаПоПравилуАвтоРасчета(Измерение,ТаблицаПравилРасчетаРазрезов[0].Правило,СтрокаДанных[фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ТаблицаПравилРасчетаРазрезов[0].ИсходныйРазрез)]);	
	Иначе
		Разрез = РазрезПоИзмерению(Измерение);
		Возврат Разрез.ТипЗначения.ПривестиЗначение(Неопределено);
	КонецЕсли;
КонецФункции

Функция СтруктураРазрезовИТипов() Экспорт
	СтруктураРазрезовБюджета 	= фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьПолныйСписокИменРазрезов();
	СтруктураРазрезовИТипов 	= Новый Структура;
	Для Каждого Разрез Из СтруктураРазрезовБюджета Цикл
		ИмяРазреза 			= Разрез.Значение;
		Если Найти(ИмяРазреза,"Разрез")=0 Тогда
			Продолжить;
		КонецЕсли;
		ЭлементРазреза 		= фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Перечисления.фин_ФактическиеПоказателиБюджетирования[ИмяРазреза]);
		ТипЗначенияРазреза 	= ЭлементРазреза.ТипЗначения;
		СтруктураРазрезовИТипов.Вставить(ИмяРазреза,ТипЗначенияРазреза);
	КонецЦикла;
	Возврат СтруктураРазрезовИТипов;
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСКлассификатором


Функция ОпределитьПозициюКлассификатора(Разрез1,Разрез2,Разрез3,Разрез4,Разрез5,Разрез6,Разрез7,Разрез8,Разрез9,Разрез10) Экспорт
	ТекстУсловия = "";
	СписокРазрезов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьМассивДополнительныхРазрезов");
	СтруктураПустыхЗначений = Новый Структура;
	Для Каждого ЭлементСписка Из СписокРазрезов Цикл
		ИмяРазреза 			= ИмяРазреза(ЭлементСписка);
		НомерРазреза 		= Сред(ИмяРазреза,СтрДлина("Разрез")+1);
		Типы 				= РазрезПоИзмерению(ЭлементСписка).ТипЗначения.Типы();
		ВложенноеУсловие 	= "";
		Для Каждого Тип Из Типы Цикл
			Если Тип=Тип("Булево") Тогда
				ВложенноеУсловие = "КлассификаторНаборовДополнительныхРазрезов.Разрез"+НомерРазреза+"=ЛОЖЬ";
				СтруктураПустыхЗначений.Вставить(ИмяРазреза,Ложь);
			ИначеЕсли Тип=Тип("Дата") Тогда
				ВложенноеУсловие = "КлассификаторНаборовДополнительныхРазрезов.Разрез"+НомерРазреза+"=ДАТАВРЕМЯ(1,1,1,0,0,0)";
				СтруктураПустыхЗначений.Вставить(ИмяРазреза,'00010101');
			ИначеЕсли Тип=Тип("Число") Тогда
				ВложенноеУсловие = "КлассификаторНаборовДополнительныхРазрезов.Разрез"+НомерРазреза+"=0";
				СтруктураПустыхЗначений.Вставить(ИмяРазреза,0);
			ИначеЕсли Тип=Тип("Строка") Тогда
				ВложенноеУсловие = "КлассификаторНаборовДополнительныхРазрезов.Разрез"+НомерРазреза+"=""";
				СтруктураПустыхЗначений.Вставить(ИмяРазреза,"");
			Иначе 
				ИмяТаблицы = ОпределитьТаблицуПоТипу(Тип);
				ВложенноеУсловие = "КлассификаторНаборовДополнительныхРазрезов.Разрез"+НомерРазреза+" ССЫЛКА "+ИмяТаблицы+" И КлассификаторНаборовДополнительныхРазрезов.Разрез"+НомерРазреза+"=ЗНАЧЕНИЕ("+ИмяТаблицы+".ПустаяСсылка)";
				НОписание = Новый ОписаниеТипов(СтрЗаменить(ИмяТаблицы,".","Ссылка."));
				СтруктураПустыхЗначений.Вставить(ИмяРазреза,?(Типы.Количество()=1,НОписание.ПривестиЗначение(Неопределено),Неопределено));
			КонецЕсли;
		КонецЦикла;
		ТекстУсловия 	= ТекстУсловия+"
		|	И (КлассификаторНаборовДополнительныхРазрезов.Разрез"+НомерРазреза+" = &Разрез"+НомерРазреза+"
		|			ИЛИ (&Разрез"+НомерРазреза+" = НЕОПРЕДЕЛЕНО И ("+ВложенноеУсловие+")))";
		
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КлассификаторНаборовДополнительныхРазрезов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.фин_КлассификаторНаборовДополнительныхРазрезов КАК КлассификаторНаборовДополнительныхРазрезов
		|ГДЕ
		|	(НЕ КлассификаторНаборовДополнительныхРазрезов.ПометкаУдаления)"+ТекстУсловия+"
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";

	Запрос.УстановитьПараметр("Разрез1", Разрез1);
	Запрос.УстановитьПараметр("Разрез10", Разрез10);
	Запрос.УстановитьПараметр("Разрез2", Разрез2);
	Запрос.УстановитьПараметр("Разрез3", Разрез3);
	Запрос.УстановитьПараметр("Разрез4", Разрез4);
	Запрос.УстановитьПараметр("Разрез5", Разрез5);
	Запрос.УстановитьПараметр("Разрез6", Разрез6);
	Запрос.УстановитьПараметр("Разрез7", Разрез7);
	Запрос.УстановитьПараметр("Разрез8", Разрез8);
	Запрос.УстановитьПараметр("Разрез9", Разрез9);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе	
		НовыйЭлемент = Справочники.фин_КлассификаторНаборовДополнительныхРазрезов.СоздатьЭлемент();
		НовыйЭлемент.Разрез1 = Разрез1;
		НовыйЭлемент.Разрез2 = Разрез2;
		НовыйЭлемент.Разрез3 = Разрез3;
		НовыйЭлемент.Разрез4 = Разрез4;
		НовыйЭлемент.Разрез5 = Разрез5;
		НовыйЭлемент.Разрез6 = Разрез6;
		НовыйЭлемент.Разрез7 = Разрез7;
		НовыйЭлемент.Разрез8 = Разрез8;
		НовыйЭлемент.Разрез9 = Разрез9;
		НовыйЭлемент.Разрез10 = Разрез10;
		Для Каждого ЭлементПустыхЗначений Из СтруктураПустыхЗначений Цикл
			Если НовыйЭлемент[ЭлементПустыхЗначений.Ключ]=Неопределено Тогда
				НовыйЭлемент[ЭлементПустыхЗначений.Ключ] = ЭлементПустыхЗначений.Значение;
			КонецЕсли;
		КонецЦикла;
		Попытка
			НовыйЭлемент.Записать();
			Возврат НовыйЭлемент.Ссылка;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;

КонецФункции

Функция ОпределитьПозициюКлассификатораПоСтруктуре(СтруктураРазрезов) Экспорт
	Разрез1 = Неопределено;
	Разрез2 = Неопределено;
	Разрез3 = Неопределено;
	Разрез4 = Неопределено;
	Разрез5 = Неопределено;
	Разрез6 = Неопределено;
	Разрез7 = Неопределено;
	Разрез8 = Неопределено;
	Разрез9 = Неопределено;
	Разрез10 = Неопределено;
	СтруктураРазрезов.Свойство("Разрез1",Разрез1);
 	СтруктураРазрезов.Свойство("Разрез2",Разрез2);
	СтруктураРазрезов.Свойство("Разрез3",Разрез3);
	СтруктураРазрезов.Свойство("Разрез4",Разрез4);
	СтруктураРазрезов.Свойство("Разрез5",Разрез5);
	СтруктураРазрезов.Свойство("Разрез6",Разрез6);
	СтруктураРазрезов.Свойство("Разрез7",Разрез7);
	СтруктураРазрезов.Свойство("Разрез8",Разрез8);
	СтруктураРазрезов.Свойство("Разрез9",Разрез9);
	СтруктураРазрезов.Свойство("Разрез10",Разрез10);
   Возврат ОпределитьПозициюКлассификатора(Разрез1,Разрез2,Разрез3,Разрез4,Разрез5,Разрез6,Разрез7,Разрез8,Разрез9,Разрез10);
КонецФункции	

Функция ПолучитьРазрез(СтруктураРазрезов,ТолькоСуществующие=Ложь) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторНаборовДополнительныхРазрезов.Ссылка
		|ИЗ
		|	Справочник.фин_КлассификаторНаборовДополнительныхРазрезов КАК КлассификаторНаборовДополнительныхРазрезов
		|ГДЕ
		|	КлассификаторНаборовДополнительныхРазрезов.Разрез1 = &Разрез1
		|	И КлассификаторНаборовДополнительныхРазрезов.Разрез2 = &Разрез2
		|	И КлассификаторНаборовДополнительныхРазрезов.Разрез3 = &Разрез3
		|	И КлассификаторНаборовДополнительныхРазрезов.Разрез4 = &Разрез4
		|	И КлассификаторНаборовДополнительныхРазрезов.Разрез5 = &Разрез5
		|	И КлассификаторНаборовДополнительныхРазрезов.Разрез6 = &Разрез6
		|	И КлассификаторНаборовДополнительныхРазрезов.Разрез7 = &Разрез7
		|	И КлассификаторНаборовДополнительныхРазрезов.Разрез8 = &Разрез8
		|	И КлассификаторНаборовДополнительныхРазрезов.Разрез9 = &Разрез9
		|	И КлассификаторНаборовДополнительныхРазрезов.Разрез10 = &Разрез10
		|	И (НЕ КлассификаторНаборовДополнительныхРазрезов.ПометкаУдаления)";

	Запрос.УстановитьПараметр("Разрез1", Неопределено);
	Запрос.УстановитьПараметр("Разрез10",Неопределено);
	Запрос.УстановитьПараметр("Разрез2", Неопределено);
	Запрос.УстановитьПараметр("Разрез3", Неопределено);
	Запрос.УстановитьПараметр("Разрез4", Неопределено);
	Запрос.УстановитьПараметр("Разрез5", Неопределено);
	Запрос.УстановитьПараметр("Разрез6", Неопределено);
	Запрос.УстановитьПараметр("Разрез7", Неопределено);
	Запрос.УстановитьПараметр("Разрез8", Неопределено);
	Запрос.УстановитьПараметр("Разрез9", Неопределено);
	
	Для Каждого Разрез из СтруктураРазрезов Цикл
		Запрос.Параметры.Вставить(Разрез.Ключ,Разрез.Значение);
	КонецЦикла;

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	ИначеЕсли ТолькоСуществующие Тогда
		Возврат Справочники.фин_КлассификаторНаборовДополнительныхРазрезов.ПустаяСсылка();
	Иначе
		НовыйЭлемент = Справочники.фин_КлассификаторНаборовДополнительныхРазрезов.СоздатьЭлемент();
		Для Каждого Разрез из СтруктураРазрезов Цикл
			Если Найти(Строка(Разрез.Ключ),"Разрез")=0 Тогда
				Продолжить
			КонецЕсли;
			НовыйЭлемент[Разрез.Ключ]=Разрез.Значение;
		КонецЦикла;
		НовыйЭлемент.Записать();
		Возврат НовыйЭлемент.Ссылка;
	КонецЕсли;
	
КонецФункции //ПолучитьРазрез

Функция ОпределитьНаличиеРазрезаВФинансовомПоказателе(ФинансовыйПоказатель,Измерение) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФинансовыеПоказателиРазрезыУчета.Ссылка
		|ИЗ
		|	Справочник."+?(ТипЗнч(ФинансовыйПоказатель)=Тип("СправочникСсылка.фин_ФинансовыеПоказатели"),"фин_ФинансовыеПоказатели","фин_АгрегатыФинансовыхПоказателей")+".РазрезыУчета КАК ФинансовыеПоказателиРазрезыУчета
		|ГДЕ
		|	ФинансовыеПоказателиРазрезыУчета.Ссылка = &Статья
		|	И ФинансовыеПоказателиРазрезыУчета.Измерение = &Измерение";

	Запрос.УстановитьПараметр("Измерение", Измерение);
	Запрос.УстановитьПараметр("Статья", ФинансовыйПоказатель);

	Результат = Запрос.Выполнить();

	Ответ = НЕ Результат.Пустой();
	
	Возврат Ответ;

КонецФункции

#КонецОбласти
