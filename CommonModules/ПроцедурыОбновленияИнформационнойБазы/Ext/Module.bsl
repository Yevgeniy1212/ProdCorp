
// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		СтрСообщения1 = "Создан";
	Иначе
		СтрСообщения1 = "Обработан";
	КонецЕсли;

	Если СправочникОбъект.ЭтоГруппа Тогда
		СтрСообщения2 = "а группа";
	Иначе
		СтрСообщения2 = " элемент";
	КонецЕсли;

	СтрСообщения2 = СтрСообщения2 + " справочника """ + СправочникОбъект.Метаданные().Синоним + """: ";
	СтрСообщения3 = "наименование """ + СправочникОбъект.Наименование + """";

	Попытка
		СправочникОбъект.Записать();
		Сообщить(СтрСообщения1 + СтрСообщения2 + "код """ + СправочникОбъект.ПолныйКод() + """, " + СтрСообщения3, СтатусСообщения.Обычное);
	Исключение
		Сообщить("Не записан"  + СтрСообщения2 + СтрСообщения3 +
		         Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;

КонецПроцедуры

Функция ДополнитьСтрокуВнутр(Знач Стр, Длина, Чем=" ", Режим = 0)
	
	СимволовДополнить = Длина -  СтрДлина(Стр);
	Добавок = "";
	Для Н=1 по СимволовДополнить Цикл
		Добавок =	Добавок + Чем;
	КонецЦикла;
	Возврат ?(Режим=0, Добавок + Стр, Стр + Добавок);
	
КонецФункции 

// Процедура устанавливает длины кодов элементов справочников в соответствии с длиной кода,
// заданной в метаданных
Процедура ДополнитьКодыЭлементовСправочников() Экспорт
	
	// Список справочников, которые не надо обрабатывать
	СписокИсключаемых = Новый СписокЗначений;
	СписокИсключаемых.Добавить("Пользователи");
	
	ТекстЗапроса = "";
	
	Для Каждого ЭлементСправочника Из Метаданные.Справочники Цикл
		ИмяСправочника 	= ЭлементСправочника.Имя;
		ДлинаКода		= ЭлементСправочника.ДлинаКода;
		
		Если ДлинаКода = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СписокИсключаемых.НайтиПоЗначению(ИмяСправочника) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементСправочника.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
			
			Если ТекстЗапроса <> "" Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
			КонецЕсли;
		
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	""" + ИмяСправочника + """ КАК ИмяСправочника,
			|	" + ДлинаКода + " КАК ДлинаКода,
			|	Спр.Код КАК Код,
			|	Спр.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник." + ИмяСправочника + " КАК Спр
			|";
		КонецЕсли;
		
	КонецЦикла;

	Если ТекстЗапроса <> "" Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	ИмяСправочника
		|";
	
		
		Выборка = Запрос.Выполнить().Выбрать();
		ТекущийСправочник = "";
		ЕстьДанные = Выборка.Следующий();
		
		Пока ЕстьДанные Цикл
			ТекущийСправочник = Выборка.ИмяСправочника;
			
			Сообщить("Обновляется справочник: " + ТекущийСправочник);
			
			Пока ЕстьДанные	
				 И Выборка.ИмяСправочника = ТекущийСправочник Цикл
				
				Если СтрДлина(СокрЛП(Выборка.Код)) <> Выборка.ДлинаКода Тогда
					НовыйКод = ДополнитьСтрокуВнутр(СокрЛП(Выборка.Код), Выборка.ДлинаКода, "0", 0);
					Попытка
						ЭлементОбъект = Выборка.Ссылка.ПолучитьОбъект();					
						ЭлементОбъект.Код = НовыйКод;
						ЭлементОбъект.Записать();
					Исключение
						Сообщить("При записи элемента справочника " + ТекущийСправочник + " с кодом "+ СокрЛП(Выборка.Код) + " произошла ошибка:");
						Сообщить("		при попытке установить код " + НовыйКод + " " + ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
				 
				ЕстьДанные = Выборка.Следующий();
			КонецЦикла; 
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Процедура изменяет ставшие неуникальными коды предопределенных элементов
//
Процедура УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов) Экспорт
	
	МассивЭлементов = Новый Массив;
	
	Пока СписокПредопределенныхЭлементов.Количество()>0 Цикл
		
		МассивЭлементов.Очистить();
		КолвоЭлементовВСписке = СписокПредопределенныхЭлементов.Количество();
		ТекушийТипЗначения = ТипЗнч(СписокПредопределенныхЭлементов [КолвоЭлементовВСписке-1].Значение);
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекушийТипЗначения);		
		Если Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = Справочники[МетаданныеТипа.Имя];
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = ПланыВидовХарактеристик[МетаданныеТипа.Имя];
		ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = ПланыСчетов[МетаданныеТипа.Имя];	
		ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеТипа) Тогда
			МенеджерТекущегоТипа = ПланыВидовРасчета[МетаданныеТипа.Имя];
		Иначе
			МенеджерТекущегоТипа = Неопределено;
		КонецЕсли;
		
		Для ОбратныйИндекс = 1 По КолвоЭлементовВСписке Цикл
			ЭлементСписка = СписокПредопределенныхЭлементов [КолвоЭлементовВСписке - ОбратныйИндекс];
			
			Если ТипЗнч(ЭлементСписка.Значение) = ТекушийТипЗначения Тогда				
				ЕСли МетаданныеТипа.ДлинаКода <> 0 И МенеджерТекущегоТипа <> Неопределено Тогда
					МассивЭлементов.Добавить(ЭлементСписка.Значение);
				КонецЕсли;				
				СписокПредопределенныхЭлементов.Удалить(ЭлементСписка);				
			КонецЕсли;			
		КонецЦикла;
		
		Если МассивЭлементов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Предопределенные.Ссылка
		|ИЗ
		|	" + МетаданныеТипа.ПолноеИмя() + " КАК Предопределенные
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + МетаданныеТипа.ПолноеИмя() + " КАК Пользовательские
		|		ПО Предопределенные.Код = Пользовательские.Код
		|
		|ГДЕ
		|	Предопределенные.Ссылка В(&СписокЭлементов)
		|    И Пользовательские.Ссылка НЕ В(&СписокЭлементов)";
		
		Запрос.УстановитьПараметр("СписокЭлементов", МассивЭлементов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();			
			Объект.УстановитьНовыйКод();			
			Если МенеджерТекущегоТипа.НайтиПоКоду(Объект.Код).Пустая() Тогда
				
				// Поскольку меняем только код элемента, проверку корректности заполнения
				// дополнительных реквизитов объекта не выполняем.
				Объект.ОбменДанными.Загрузка = Истина;
				
				Объект.Записать();
			КонецЕсли;			
		КонецЦикла;	
		
	КонецЦикла;


КонецПроцедуры

// Процедура изменяет ставшие неуникальными коды непредопределенных элементов
//
Процедура УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника(ИмяСправочника) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Пользовательские.Ссылка,
	|	Представление(Пользовательские.Ссылка) КАК ПредставлениеЭлемента
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Предопределенные
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Пользовательские
	|		ПО Предопределенные.Код = Пользовательские.Код
	|
	|ГДЕ
	|	Предопределенные.Предопределенный И
	|   Не Пользовательские.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.УстановитьНовыйКод();
		Попытка
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
		Исключение
			Сообщить(" при записи элемента справочника "+ ИмяСправочника+": " + СокрЛП(Выборка.ПредставлениеЭлемента) + " произошла ошибка:" + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
	КонецЦикла;	 
	
КонецПроцедуры

// Процедура добавляет нули в номера документов для расширения до максимального размера
//
Процедура РасширитьНомерДокументов() Экспорт

	МетаданныеДокументы = Метаданные.Документы;
	
	Для Каждого ТекДокумент Из МетаданныеДокументы Цикл
		ДлинаНомера = ТекДокумент.ДлинаНомера;
	    Если ДлинаНомера > 0 Тогда
	    	
	    	Сообщить("Расширяется длина номера для документов """ + ТекДокумент.Синоним + """");
	    
	    	Выборка = Документы[ТекДокумент.Имя].Выбрать();
	    	Пока Выборка.Следующий() Цикл
	    		Если СтрДлина(СокрЛП(Выборка.Номер)) < ДлинаНомера Тогда
	    			ДокументОбъект = Выборка.ПолучитьОбъект();
	    			Попытка 
	    				НомерДок = СокрЛП(ДокументОбъект.Номер);
	    				Если СтрДлина(НомерДок) > 0 Тогда
		    				ПрефиксДок =  "";
		    				Пока СтрДлина(НомерДок) > 0 И Найти("0123456789", Лев(НомерДок, 1)) = 0 Цикл
		    					ПрефиксДок = ПрефиксДок + Лев(НомерДок, 1);
		    					НомерДок = Сред(НомерДок, 2);
		    				КонецЦикла;
		    				НомерДок = ПрефиксДок + ДополнитьСтрокуВнутр(НомерДок, ДлинаНомера - СтрДлина(ПрефиксДок), "0", 0);
		    				
		    				ДокументОбъект.Номер = НомерДок;
		    				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		    				
	    				КонецЕсли;	    				
	    			Исключение
	    				Сообщить("   при записи документа "+Выборка.Ссылка + ": " + ОписаниеОшибки());
	    			КонецПопытки;	    			
	    		КонецЕсли;
	    	КонецЦикла;
	    	
	    КонецЕсли;		 
	КонецЦикла;

КонецПроцедуры // РасширитьНомерДокументов

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском) Экспорт

	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.БуквенныйКод              = Наименование;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;

		// установим курс и кратность = 1 на 1 января 1980
		ОбщегоНазначения.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);

	КонецЕсли;

	Возврат Ссылка;

КонецФункции // НайтиСоздатьВалюту()

// Заполняет доп. реквизиты справочника НалогиСборыОтчисления и регистр
// сведений СведенияОСтавкахНалоговСборовОтчислений
Процедура ЗаполнитьНалогиСборыОтчисления()Экспорт

	// установка счета учета для предопределенных элементов справочника
	СправочникОбъект = Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог.ПолучитьОбъект();
	СправочникОбъект.КодБК 							= "101201";
	СправочникОбъект.КодНазначенияПлатежа 			= "911";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог;
	СправочникОбъект.НазначениеПлатежа 				= "Индивидуальный подоходный налог за ";
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалогИностранныеГраждане.ПолучитьОбъект();
	СправочникОбъект.КодБК 							= "101204";
	СправочникОбъект.КодНазначенияПлатежа 			= "911";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог;
	СправочникОбъект.НазначениеПлатежа 				= "Индивидуальный подоходный налог за иностранных граждан за ";
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.НалогиСборыОтчисления.СоциальныйНалог.ПолучитьОбъект();
	СправочникОбъект.КодБК 							= "103101";
	СправочникОбъект.КодНазначенияПлатежа 			= "911";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.СоциальныйНалог;
	СправочникОбъект.НазначениеПлатежа 				= "Социальный налог за ";
	СправочникОбъект.Записать();

	СправочникОбъект = Справочники.НалогиСборыОтчисления.СоциальныйНалогИностранныеСпециалисты.ПолучитьОбъект();
	СправочникОбъект.КодБК 							= "103101";
	СправочникОбъект.КодНазначенияПлатежа 			= "911";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.СоциальныйНалог;
	СправочникОбъект.НазначениеПлатежа 				= "Социальный налог за ";
	СправочникОбъект.Записать();

	СправочникОбъект = Справочники.НалогиСборыОтчисления.СоциальныйНалогИнвалиды.ПолучитьОбъект();
	СправочникОбъект.КодБК 							= "103101";
	СправочникОбъект.КодНазначенияПлатежа 			= "911";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.СоциальныйНалог;
	СправочникОбъект.НазначениеПлатежа 				= "Социальный налог за ";
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы.ПолучитьОбъект();
	СправочникОбъект.КодБК 							= "";
	СправочникОбъект.КодНазначенияПлатежа 			= "010";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям;
	СправочникОбъект.НазначениеПлатежа 				= "Обязательные пенсионные взносы за ";
	СправочникОбъект.Записать();

	СправочникОбъект = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы.ПолучитьОбъект();
	СправочникОбъект.КодБК 							= "";
	СправочникОбъект.КодНазначенияПлатежа 			= "015";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям;
	СправочникОбъект.НазначениеПлатежа 				= "Обязательные профессиональные пенсионные взносы за ";
	СправочникОбъект.Записать();

	СправочникОбъект = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления.ПолучитьОбъект();
	СправочникОбъект.КодБК 							= "";
	СправочникОбъект.КодНазначенияПлатежа 			= "012";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию;
	СправочникОбъект.НазначениеПлатежа 				= "Обязательные социальные отчисления за ";
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.ПолучитьОбъект();
	СправочникОбъект.КодБК 							= "";
	СправочникОбъект.КодНазначенияПлатежа 			= "122";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС;
	СправочникОбъект.НазначениеПлатежа 				= "Взносы на обязательное социальное медицинское страхование ";
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.ПолучитьОбъект();
	СправочникОбъект.КодБК 							= "";
	СправочникОбъект.КодНазначенияПлатежа 			= "121";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС;
	СправочникОбъект.НазначениеПлатежа 				= "Отчисления на обязательное социальное медицинское страхование ";
	СправочникОбъект.Записать();
	
	СправочникОбъект = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя.ПолучитьОбъект();
	СправочникОбъект.КодБК 							= "";
	СправочникОбъект.КодНазначенияПлатежа 			= "089";
	СправочникОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям;
	СправочникОбъект.НазначениеПлатежа 				= "Обязательные пенсионные взносы работодателя за ";
	СправочникОбъект.Записать();
	
    // ставки 
    НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
 	//++КУФИБ	
	НаборЗаписей.Прочитать();
	//--КУФИБ
    ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
    
    // ОПВ
    ВидОПВ = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '19980101', ПустаяОрганизация, ВидОПВ, 10);
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20200601', ПустаяОрганизация, ВидОПВ, 5, Справочники.ВидыДоходов.ДоходыОтНалоговогоАгента);
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20210101', ПустаяОрганизация, ВидОПВ, 10);
    
    // ОППВ
    ВидОППВ = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20140101', ПустаяОрганизация, ВидОППВ, 5);
	
	// СО
    ВидСО = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20050101', ПустаяОрганизация, ВидСО, 1.5);
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20060101', ПустаяОрганизация, ВидСО, 2);
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20070101', ПустаяОрганизация, ВидСО, 3);
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20090101', ПустаяОрганизация, ВидСО, 4);
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20100101', ПустаяОрганизация, ВидСО, 5);
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20180101', ПустаяОрганизация, ВидСО, 3.5);
	 
    // СН с 2009 года
    ВидСН = Справочники.НалогиСборыОтчисления.СоциальныйНалог;
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20090101', ПустаяОрганизация, ВидСН, 11);
    ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20180101', ПустаяОрганизация, ВидСН, 9.5);
	
	// ОПВР с 2024 года
	ВидОПВР = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;
	ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20240101', ПустаяОрганизация, ВидОПВР, 1.5);
	 
    НаборЗаписей.Записать();
	
	// ИПН с 2009 года
	НаборЗаписейИПН = РегистрыСведений.СведенияОСтавкахИПН.СоздатьНаборЗаписей();
	ВидыДоходов = Справочники.ВидыДоходов;
	ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20090101', ПустаяОрганизация, ВидыДоходов.ДоходыОтРаботодателя, 10, 15);
	ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20110101', ПустаяОрганизация, ВидыДоходов.ДоходыОтРаботодателя, 10, 20);
	ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20120101', ПустаяОрганизация, ВидыДоходов.ДоходыОтРаботодателя, 10, 10);
 	ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20090101', ПустаяОрганизация, ВидыДоходов.Дивиденды, 			5, 	15);
   	ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20090101', ПустаяОрганизация, ВидыДоходов.Выигрыши, 			10, 15);
 	ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20110101', ПустаяОрганизация, ВидыДоходов.Выигрыши, 			10, 20);
  	ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20090101', ПустаяОрганизация, ВидыДоходов.Вознаграждения, 		10, 15);
   	ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20090101', ПустаяОрганизация, ВидыДоходов.ПрочиеДоходы, 		10, 15);
 	ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20110101', ПустаяОрганизация, ВидыДоходов.ПрочиеДоходы, 		10, 20);
   	ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20090101', ПустаяОрганизация, ВидыДоходов.ДоходыОтНалоговогоАгента, 		10, 15);
	ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20110101', ПустаяОрганизация, ВидыДоходов.ДоходыОтНалоговогоАгента, 		10, 20);
	ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20230101', ПустаяОрганизация, ВидыДоходов.Дивиденды, 		    10, 15);
	
	НаборЗаписейИПН.Записать();
	
	//ОСМС с 2017 года
	// ДоходыОтРаботодателя
	НаборЗаписейОСМС = РегистрыСведений.СведенияОСтавкахОСМС.СоздатьНаборЗаписей();
    ДобавитьСведенияОСтавкахОСМС(НаборЗаписейОСМС, '20170701', ВидыДоходов.ДоходыОтРаботодателя,     0, 1);
    ДобавитьСведенияОСтавкахОСМС(НаборЗаписейОСМС, '20180101', ВидыДоходов.ДоходыОтРаботодателя,     0, 1.5);
    ДобавитьСведенияОСтавкахОСМС(НаборЗаписейОСМС, '20200101', ВидыДоходов.ДоходыОтРаботодателя,     1, 2);
	ДобавитьСведенияОСтавкахОСМС(НаборЗаписейОСМС, '20210101', ВидыДоходов.ДоходыОтРаботодателя,     2, 2);
	ДобавитьСведенияОСтавкахОСМС(НаборЗаписейОСМС, '20220101', ВидыДоходов.ДоходыОтРаботодателя, 	 2, 3);
    
    // ДоходыОтНалоговогоАгента
    ДобавитьСведенияОСтавкахОСМС(НаборЗаписейОСМС, '20170701', ВидыДоходов.ДоходыОтНалоговогоАгента, 5, 0);
	ДобавитьСведенияОСтавкахОСМС(НаборЗаписейОСМС, '20180101', ВидыДоходов.ДоходыОтНалоговогоАгента, 0, 0);
	ДобавитьСведенияОСтавкахОСМС(НаборЗаписейОСМС, '20200101', ВидыДоходов.ДоходыОтНалоговогоАгента, 1, 0);
	ДобавитьСведенияОСтавкахОСМС(НаборЗаписейОСМС, '20210101', ВидыДоходов.ДоходыОтНалоговогоАгента, 2, 0);
	
	НаборЗаписейОСМС.Записать();

КонецПроцедуры // ЗаполнитьНалогиСборыОтчисления

// Добавляет в регистр СведенияОСтавкахНалоговВзносовОтчислений новую строку
//
Процедура ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, 
														 Период, 
														 Налогоплательщик,
														 Вид,
														 Ставка,
														 ВидДохода = Неопределено) Экспорт
	НоваяЗапись = НаборЗаписей.Добавить();
	// Свойства
	НоваяЗапись.Период 				= Период;
	// Измерения
	НоваяЗапись.Налогоплательщик 	= Налогоплательщик;
	НоваяЗапись.ВидНалога 			= Вид;
    
    Если ЗначениеЗаполнено(ВидДохода) Тогда
		НоваяЗапись.ВидДохода = ВидДохода;
    КонецЕсли;
    
    // Ресурсы
	НоваяЗапись.Ставка				= Ставка;

КонецПроцедуры // ДобавитьЗначенияСтавокНалоговВзносовОтчислений

// Добавляет в регистр СведенияОСтавкахИПН новую строку
//
Процедура ДобавитьЗначенияСтавокИПН(НаборЗаписей, 
									Период, 
									Налогоплательщик,
									ВидДохода,
									Ставка,
									СтавкаНерезиденты) Экспорт
	НоваяЗапись = НаборЗаписей.Добавить();
	// Свойства
	НоваяЗапись.Период 				= Период;
	// Измерения
	НоваяЗапись.Налогоплательщик 	= Налогоплательщик;
	НоваяЗапись.ВидДохода 			= ВидДохода;
	// Ресурсы
	НоваяЗапись.Ставка				= Ставка;
	НоваяЗапись.СтавкаНерезиденты	= СтавкаНерезиденты;

КонецПроцедуры // ДобавитьЗначенияСтавокНалоговВзносовОтчислений

// Добавляет в регистр СведенияОСтавкахОСМС новую строку
//
Процедура ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, 
									Период, 
									ВидДохода,
									СтавкаВзносы,
									СтавкаОтчисления) Экспорт
	НоваяЗапись = НаборЗаписей.Добавить();
	// Свойства
	НоваяЗапись.Период 				= Период;
	// Измерения
	НоваяЗапись.ВидДохода 			= ВидДохода;
	// Ресурсы
	НоваяЗапись.СтавкаВзносы		= СтавкаВзносы;
	НоваяЗапись.СтавкаОтчисления	= СтавкаОтчисления;

КонецПроцедуры // ДобавитьСведенияОСтавкахОСМС

// Заполнение реквизитов справочника "Виды доходов"
//
Процедура ЗаполнитьВидыДоходов() Экспорт 
	
	// Справочник "Виды доходов"
	ВидыДоходов = Справочники.ВидыДоходов;
	
	// 000000001
	ДоходыОтРаботодателя = ВидыДоходов.ДоходыОтРаботодателя.ПолучитьОбъект();
	ДоходыОтРаботодателя.Описание = "Доходы, полученные от работодателя, облагаемые у источника выплаты";
	ДоходыОтРаботодателя.Записать();
	
	// 000000002
	Дивиденды = ВидыДоходов.Дивиденды.ПолучитьОбъект();
	Дивиденды.Описание = "Доходы, подлежащие выплате по акциям, части выплаты чистого дохода, распределяемые юридическим лицом между его учредителями";
	Дивиденды.Записать();

	// 000000003
	Выигрыши = ВидыДоходов.Выигрыши.ПолучитьОбъект();
	Выигрыши.Описание = "Доходы в натуральном и денежном выражении, получаемые на конкурсах, соревнованиях (олимпиадах), фестивалях, по лотереям, розыгрышам";
	Выигрыши.Записать();

	// 000000004
	Вознаграждения = ВидыДоходов.Вознаграждения.ПолучитьОбъект();
	Вознаграждения.Описание = "Доходы, полученные в связи с кредитом (займом, микрокредитом, долговыми ценными бумагами)";
	Вознаграждения.Записать();

	// 000000005
	ПрочиеДоходы = ВидыДоходов.ПрочиеДоходы.ПолучитьОбъект();
	ПрочиеДоходы.Описание = "Прочие доходы, облагаемые у источника выплаты";
	ПрочиеДоходы.Записать();
	
	// 000000006
	ДоходыОтНалоговогоАгента = ВидыДоходов.ДоходыОтНалоговогоАгента.ПолучитьОбъект();
	ДоходыОтНалоговогоАгента.Описание = "Доходы от налогового агента";
	ДоходыОтНалоговогоАгента.Записать();
	
	// Регистр сведений "Учет налогообложения по видавм доходов"
	НаборЗаписей = РегистрыСведений.УчетНалогообложенияПоВидамДоходов.СоздатьНаборЗаписей();

    ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "19000101", ДоходыОтРаботодателя.Ссылка, Истина, Истина, Истина, Истина, Истина);
    ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "19000101", Дивиденды.Ссылка);
    ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "19000101", Выигрыши.Ссылка);
    ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "19000101", Вознаграждения.Ссылка);
    ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "19000101", ПрочиеДоходы.Ссылка);
	ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "19000101", ДоходыОтНалоговогоАгента.Ссылка, Истина);
    ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "20170701", ДоходыОтРаботодателя.Ссылка, Истина, Истина, Истина, Истина, Истина,Истина);
	ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "20170701", ДоходыОтНалоговогоАгента.Ссылка, Истина,,,,,,Истина);
    ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "20190101", ДоходыОтРаботодателя.Ссылка, Истина, Истина, Истина, Истина, Истина,Истина,Истина);
	ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "20240101", ДоходыОтРаботодателя.Ссылка, Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Добавляет в регистр УчетНалогообложенияПоВидамДоходов новую строку
//
Процедура ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, 
												  Период,
												  ВидДохода,
												  УчитыватьИПН = Истина,
												  УчитыватьСН = Ложь,
												  УчитыватьОПВ = Ложь,
												  УчитыватьСО = Ложь,
												  УчитыватьОППВ = Ложь,
												  УчитыватьООСМС = Ложь,
												  УчитыватьВОСМС = Ложь,
												  УчитыватьОПВР = Ложь) Экспорт 
	
	
	НоваяЗапись = НаборЗаписей.Добавить();
	// Свойства
	НоваяЗапись.Период 			= Период;
	// Измерения
	НоваяЗапись.ВидДохода 		= ВидДохода;
	// Ресурсы                  
	НоваяЗапись.УчитыватьИПН	= УчитыватьИПН;
	НоваяЗапись.УчитыватьСН		= УчитыватьСН;
	НоваяЗапись.УчитыватьОПВ	= УчитыватьОПВ;
	НоваяЗапись.УчитыватьСО		= УчитыватьСО;
	НоваяЗапись.УчитыватьОППВ	= УчитыватьОППВ;
	НоваяЗапись.УчитыватьООСМС	= УчитыватьООСМС;
	НоваяЗапись.УчитыватьВОСМС	= УчитыватьВОСМС;
	НоваяЗапись.УчитыватьОПВР	= УчитыватьОПВР;

КонецПроцедуры
	
// Процедура заполняет регистр сведений КоэффициентыСтавкиРефинансированияНБДляРасчетаПени
// данными для расчета пени
//
Процедура ЗаполнитьКоэффициентыСтавкиРефинансированияНБДляРасчетаПени() Экспорт

	НаборЗаписей = РегистрыСведений.КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Организация.Использование	= Истина;
	НаборЗаписей.Отбор.Организация.ВидСравнения	 	= ВидСравнения.Равно;
	НаборЗаписей.Отбор.Организация.Значение	 		= Справочники.Организации.ПустаяСсылка();
	
	// ОПВ
	НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
	НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
	НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;

	Движение 				= НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 		= '19990315'; // Постановление Правительства РК от 15.03.1999 № 245
	// Измерения
	Движение.Организация	= Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
	// Ресурсы
	Движение.Коэффициент	= 1.5;
	
	Движение 				= НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 		= '20050706'; // первое официальное опубликование Постановления Правительства РК от 30.06.2005 № 659
	// Измерения
	Движение.Организация	= Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
	// Ресурсы
	Движение.Коэффициент	= 2.5;
	
	Движение 				= НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 		= '20180101'; // 01.01.2018
	// Измерения
	Движение.Организация	= Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
	// Ресурсы
	Движение.Коэффициент	= 1.25;

	НаборЗаписей.Записать();
    НаборЗаписей.Очистить();

	// СО
 	НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
	НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
	НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;

	Движение 				= НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 		= '20050101'; // 01.01.2005 Закон РК об обяз социальном страховании
	// Измерения
	Движение.Организация	= Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;
	// Ресурсы
	Движение.Коэффициент	= 2.5;
	
	Движение 				= НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 		= '20180101'; // 01.01.2018
	// Измерения
	Движение.Организация	= Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;
	// Ресурсы
	Движение.Коэффициент	= 1.25;

	НаборЗаписей.Записать();
    НаборЗаписей.Очистить();

	// ОППВ
 	НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
	НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
	НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;

	Движение 				= НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 		= '20140101'; // 01.01.2014 Закон "О пенсионном обеспечении в РК"
	// Измерения
	Движение.Организация	= Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;
	// Ресурсы
	Движение.Коэффициент	= 2.5;
	
	Движение 				= НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 		= '20180101'; // 01.01.2018 
	// Измерения
	Движение.Организация	= Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;
	// Ресурсы
	Движение.Коэффициент	= 1.25;

	НаборЗаписей.Записать();
    НаборЗаписей.Очистить();
	
	// ООСМС
 	НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
	НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
	НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;

	Движение 				= НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 		= '20170701'; // 01.07.2017 Закон об обяз медицинском страховании
	// Измерения
	Движение.Организация	= Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
	// Ресурсы
	Движение.Коэффициент	= 2.5;

	Движение 				= НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 		= '20180101'; // 01.01.2018 
	// Измерения
	Движение.Организация	= Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
	// Ресурсы
	Движение.Коэффициент	= 1.25;

	НаборЗаписей.Записать();
    НаборЗаписей.Очистить();

	// ВОСМС
 	НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
	НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
	НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;

	Движение 				= НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 		= '20170701'; // 01.07.2017 Закон об обяз медицинском страховании
	// Измерения
	Движение.Организация	= Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
	// Ресурсы
	Движение.Коэффициент	= 2.5;
	
	Движение 				= НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 		= '20180101'; // 01.01.2018 Закон об обяз медицинском страховании
	// Измерения
	Движение.Организация	= Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
	// Ресурсы
	Движение.Коэффициент	= 1.25;

	НаборЗаписей.Записать();
    НаборЗаписей.Очистить();

	// Компенсация
 	НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
	НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
	НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ПустаяСсылка();

	Движение 				= НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 		= '20100101'; 
	// Измерения
	Движение.Организация	= Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ПустаяСсылка();
	// Ресурсы
	Движение.Коэффициент	= 1;

	Движение 				= НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 		= '20200501'; 
	// Измерения
	Движение.Организация	= Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ПустаяСсылка();
	// Ресурсы
	Движение.Коэффициент	= 1.25;

	НаборЗаписей.Записать();
    НаборЗаписей.Очистить();
	
	// ОПВР
 	НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
	НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
	НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;
	
	Движение 				= НаборЗаписей.Добавить();
	// Свойства
	Движение.Период 		= '20240101'; // 01.01.2024 
	// Измерения
	Движение.Организация	= Справочники.Организации.ПустаяСсылка();
	Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;
	// Ресурсы
	Движение.Коэффициент	= 1.25;

	НаборЗаписей.Записать();
    НаборЗаписей.Очистить();

КонецПроцедуры // ЗаполнитьКоэффициентыСтавкиРефинансированияНБДляРасчетаПени

// Процедура заполняет регистр сведений СрокиПеречисленияНалоговСборовОтчислений
// данными для расчета пени
//
Процедура ЗаполнитьСрокиПеречисленияНалоговСборовОтчислений() Экспорт

	НаборЗаписей = РегистрыСведений.СрокиПеречисленияНалоговСборовОтчислений.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Организация.Использование	= Истина;
	НаборЗаписей.Отбор.Организация.ВидСравнения	 	= ВидСравнения.Равно;
	НаборЗаписей.Отбор.Организация.Значение	 		= Справочники.Организации.ПустаяСсылка();

	ДлинаСуток = 86400;
	ТекМесяц = '20030701';	
	ДатаОкончания = НачалоМесяца(КонецГода(ОбщегоНазначения.ПолучитьРабочуюДату()));
	
	Пока ТекМесяц <= ДатаОкончания Цикл
		
		// ОПВ
		Если ТекМесяц < '20050701' Тогда // до первого официального опубликования Постановления Правительства РК от 30.06.2005 № 659
			// до 5 числа месяца, следующего за месяцем выплаты доходов
			Движение = НаборЗаписей.Добавить();
			// Измерения
			Движение.Месяц 			= ТекМесяц;
			Движение.Организация 	= Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога	 	= Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
			// Ресурсы
			Движение.ПорядокОпределенияСрокаПеречисления	= Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуВыплатыДоходов;
			Движение.СрокПеречисления						= ДобавитьМесяц(ТекМесяц, 1) + (5-1) * ДлинаСуток;
		ИначеЕсли ТекМесяц < '20070701' Тогда // до изменения сроков постановлением от 20.07.2007
			// до 15 числа месяца, следующего за месяцем выплаты доходов
			Движение = НаборЗаписей.Добавить();
			// Измерения
			Движение.Месяц 			= ТекМесяц;
			Движение.Организация 	= Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога	 	= Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
			// Ресурсы
			Движение.ПорядокОпределенияСрокаПеречисления	= Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуВыплатыДоходов;
			Движение.СрокПеречисления						= ДобавитьМесяц(ТекМесяц, 1) + (15-1) * ДлинаСуток;
		Иначе // с июля 2007 года - до 20 числа месяца, следующего за месяцем выплаты доходов
			Движение = НаборЗаписей.Добавить();
			// Измерения
			Движение.Месяц 			= ТекМесяц;
			Движение.Организация 	= Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога	 	= Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
			// Ресурсы
			Движение.ПорядокОпределенияСрокаПеречисления	= Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуВыплатыДоходов;
			Движение.СрокПеречисления						= ДобавитьМесяц(ТекМесяц, 1) + (20-1) * ДлинаСуток;
		КонецЕсли;

		Если ТекМесяц >= '20050101' Тогда
			// до 15 числа месяца, следующего за месяцем исчисления
			Движение = НаборЗаписей.Добавить();
			// Измерения
			Движение.Месяц 			= ТекМесяц;
			Движение.Организация 	= Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога	 	= Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;
			// Ресурсы
			Движение.ПорядокОпределенияСрокаПеречисления	= Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода;
			Движение.СрокПеречисления						= ДобавитьМесяц(ТекМесяц, 1) + (15-1) * ДлинаСуток;
			//Иначе - до января 2005 СО вообще не исчислялись
		КонецЕсли;	
		
		Если ТекМесяц >= '20140101' Тогда
			// до 25 числа месяца, следующего за месяцем исчисления
			Движение = НаборЗаписей.Добавить();
			// Измерения
			Движение.Месяц 			= ТекМесяц;
			Движение.Организация 	= Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога	 	= Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;
			// Ресурсы
			Движение.ПорядокОпределенияСрокаПеречисления	= Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода;
			Движение.СрокПеречисления						= ДобавитьМесяц(ТекМесяц, 1) + (25-1) * ДлинаСуток;
			//Иначе - до января 2014 ОППВ вообще не исчислялись
		КонецЕсли;	
		
		Если ТекМесяц >= '20170701' Тогда
			// до 25 числа месяца, следующего за месяцем исчисления
			Движение = НаборЗаписей.Добавить();
			// Измерения
			Движение.Месяц 			= ТекМесяц;
			Движение.Организация 	= Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога	 	= Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
			// Ресурсы
			Движение.ПорядокОпределенияСрокаПеречисления	= Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода;
			Движение.СрокПеречисления						= ДобавитьМесяц(ТекМесяц, 1) + (25-1) * ДлинаСуток;
			//Иначе - до июля 2017 ВОСМС вообще не исчислялись
			
			// до 25 числа месяца, следующего за месяцем исчисления
			Движение = НаборЗаписей.Добавить();
			// Измерения
			Движение.Месяц 			= ТекМесяц;
			Движение.Организация 	= Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога	 	= Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
			// Ресурсы
			Движение.ПорядокОпределенияСрокаПеречисления	= Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода;
			Движение.СрокПеречисления						= ДобавитьМесяц(ТекМесяц, 1) + (25-1) * ДлинаСуток;
			//Иначе - до июля 2017 ООСМС вообще не исчислялись
		КонецЕсли;
		
		Если ТекМесяц >= '20240101' Тогда
			// до 25 числа месяца, следующего за месяцем исчисления
			Движение = НаборЗаписей.Добавить();
			// Измерения
			Движение.Месяц 			= ТекМесяц;
			Движение.Организация 	= Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога	 	= Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;
			// Ресурсы
			Движение.ПорядокОпределенияСрокаПеречисления	= Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода;
			Движение.СрокПеречисления						= ДобавитьМесяц(ТекМесяц, 1) + (25-1) * ДлинаСуток;
			//Иначе - до января 2024 ОПВР вообще не исчислялись
		КонецЕсли;
		
		ТекМесяц = ДобавитьМесяц(ТекМесяц, 1);
	КонецЦикла;

	НаборЗаписей.Записать();

КонецПроцедуры // ЗаполнитьСрокиПеречисленияНалоговСборовОтчислений

// Добавляет запись в набор записей регистра "СведенияОСтавкахИПНиСН" 
//
Процедура ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, ВидСтавокИПНиСН, НомерСтрокиСтавок, СуммаДоходаС, СуммаДоходаПо, 
	                                Ставка = 0)

	НоваяЗапись = НаборЗаписей.Добавить();

	НоваяЗапись.Период			  = Период;
	НоваяЗапись.ВидСтавокИПНиСН   = ВидСтавокИПНиСН;
	НоваяЗапись.НомерСтрокиСтавок = НомерСтрокиСтавок;
	НоваяЗапись.СуммаДоходаС      = СуммаДоходаС;
	НоваяЗапись.СуммаДоходаПо     = СуммаДоходаПо;
	НоваяЗапись.Ставка 		   	  = Ставка;

КонецПроцедуры

// Выполняет заполнение регистра сведений "СведенияОСтавкахИПНиСН" на 2006 год
//
Процедура ЗаполнитьСведенияОСтавкахИПНиСН2006() Экспорт 
	
	// ----------------------------------------------------------------------------
	// 2006 год

	НаборЗаписей = РегистрыСведений.СведенияОСтавкахИПНиСН.СоздатьНаборЗаписей();
	НаборЗаписей.ЗаписьИзФормыНабораЗаписей = Истина;
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Использование = Истина;
	НаборЗаписей.Отбор.Период.Использование = Истина;
	
	Период = Дата(2006, 1, 1);
	НаборЗаписей.Отбор.Период.Значение = Период;
	
	// ИПН
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН;
	
	// до 185400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 1, 
														0,	185400, 5);

	// до 494400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 2, 
														185400, 494400,  8);

	// до 2472000
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 3, 
														494400, 2472000,  13);
														
	// до 7416000
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 4, 
														2472000, 7416000,  15);
														
	// свыше 6991200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 5, 
														7416000, 9999999999,  20);

	НаборЗаписей.Записать();

	// СН за работников
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК;
	НаборЗаписей.Очистить();
	
	// до 185400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 1, 
														0,	185400, 20);

	// до 494400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 2, 
														185400, 494400,  15);

	// до 2472000
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 3, 
														494400, 2472000,  12);
														
	// до 7416000
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 4, 
														2472000, 7416000,  9);
														
	// свыше 6991200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 5, 
														7416000, 9999999999,  7);

	НаборЗаписей.Записать();

	// СН за иностранных специалистов
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов;
	НаборЗаписей.Очистить();
	
	// до 494400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 1, 
														0, 494400,  11);

	// до 2330400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 2, 
														494400, 2472000,  9);
														
	// до 6991200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 3, 
														2472000, 7416000,  7);
														
	// свыше 6991200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 4, 
														7416000, 9999999999,  5);

	НаборЗаписей.Записать();
	
КонецПроцедуры 

// Выполняет заполнение регистра сведений "СведенияОСтавкахИПНиСН" на 2007 год
//
Процедура ЗаполнитьСведенияОСтавкахИПНиСН2007() Экспорт
	
	// ----------------------------------------------------------------------------
	// 2007 год

	НаборЗаписей = РегистрыСведений.СведенияОСтавкахИПНиСН.СоздатьНаборЗаписей();
	НаборЗаписей.ЗаписьИзФормыНабораЗаписей = Истина;
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Использование = Истина;
	НаборЗаписей.Отбор.Период.Использование = Истина;
	
	Период = Дата(2007, 1, 1);
	НаборЗаписей.Отбор.Период.Значение = Период;
	
	// ИПН
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН;
	
	// 10% все
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 1, 
														0,	9999999999, 10);

	НаборЗаписей.Записать();

	// СН за работников
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК;
	НаборЗаписей.Очистить();
	
	// до 196560
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 1, 
														0,	196560, 20);

	// до 524160
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 2, 
														196560, 524160,  15);

	// до 2620800
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 3, 
														524160, 2620800,  12);
														
	// до 7862400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 4, 
														2620800, 7862400,  9);
														
	// свыше 7862400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 5, 
														7862400, 9999999999,  7);

	НаборЗаписей.Записать();

	// СН за иностранных специалистов
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов;
	НаборЗаписей.Очистить();
	
	// до 524160
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 1, 
														0, 524160,  11);

	// до 2620800
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 2, 
														524160, 2620800,  9);
														
	// до 7862400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 3, 
														2620800, 7862400,  7);
														
	// свыше 7862400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 4, 
														7862400, 9999999999,  5);
	
	НаборЗаписей.Записать();														
														
КонецПроцедуры 

// Выполняет заполнение регистра сведений "СведенияОСтавкахИПНиСН" на 2008 год
//
Процедура ЗаполнитьСведенияОСтавкахИПНиСН2008() Экспорт
	
	// ----------------------------------------------------------------------------
	// 2008 год

	НаборЗаписей = РегистрыСведений.СведенияОСтавкахИПНиСН.СоздатьНаборЗаписей();
	НаборЗаписей.ЗаписьИзФормыНабораЗаписей = Истина;
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Использование = Истина;
	НаборЗаписей.Отбор.Период.Использование = Истина;
	
	Период = Дата(2008, 1, 1);
	НаборЗаписей.Отбор.Период.Значение = Период;

	// ИПН - 10% не менялся с 2007


	// СН за работников и иностранных специалистов с 2008 года одинаковая шкала
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК;
	НаборЗаписей.Очистить();
	
	// до 210240
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 1, 
														0,	210240, 13);

	// до 560640
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 2, 
														210240, 560640,  11);

	// до 2803200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 3, 
														560640, 2803200,  9);
														
	// до 8409600
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 4, 
														2803200, 8409600,  7);
														
	// свыше 8409600
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 5, 
														8409600, 9999999999,  5);

	НаборЗаписей.Записать();

	// СН за иностранных специалистов
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов;
	НаборЗаписей.Очистить();

	// до 210240
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 1, 
														0,	210240, 13);

	// до 560640
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 2, 
														210240, 560640,  11);

	// до 2803200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 3, 
														560640, 2803200,  9);
														
	// до 8409600
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 4, 
														2803200, 8409600,  7);
														
	// свыше 8409600
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 5, 
														8409600, 9999999999,  5);
	
	НаборЗаписей.Записать();														
														
КонецПроцедуры 

// Выполняет заполнение регистра сведений "СведенияОСтавкахИПНиСН"
//
Процедура ЗаполнитьСведенияОСтавкахИПНиСН() Экспорт

	// ----------------------------------------------------------------------------
	// 2005 год

	НаборЗаписей = РегистрыСведений.СведенияОСтавкахИПНиСН.СоздатьНаборЗаписей();
	НаборЗаписей.ЗаписьИзФормыНабораЗаписей = Истина;
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Использование = Истина;
	НаборЗаписей.Отбор.Период.Использование = Истина;
	
	Период = Дата(2005, 1, 1);
	НаборЗаписей.Отбор.Период.Значение = Период;
	
	// ИПН
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН;
	
	// до 174780
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 1, 
														0,	174780, 5);

	// до 466080
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 2, 
														174780, 466080,  8);

	// до 2330400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 3, 
														466080, 2330400,  13);
														
	// до 6991200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 4, 
														2330400, 6991200,  15);
														
	// свыше 6991200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 5, 
														6991200, 9999999999,  20);

	НаборЗаписей.Записать();

	// СН за работников
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК;
	НаборЗаписей.Очистить();
	
	// до 174780
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 1, 
														0,	174780, 20);

	// до 466080
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 2, 
														174780, 466080,  15);

	// до 2330400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 3, 
														466080, 2330400,  12);
														
	// до 6991200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 4, 
														2330400, 6991200,  9);
														
	// свыше 6991200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 5, 
														6991200, 9999999999,  7);

	НаборЗаписей.Записать();

	// СН за иностранных специалистов
	НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов;
	НаборЗаписей.Очистить();
	
	// до 466080
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 1, 
														0, 466080,  11);

	// до 2330400
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 2, 
														466080, 2330400,  9);
														
	// до 6991200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 3, 
														2330400, 6991200,  7);
														
	// свыше 6991200
	ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 4, 
														6991200, 9999999999,  5);

	НаборЗаписей.Записать();


	// 2006 год
    ЗаполнитьСведенияОСтавкахИПНиСН2006();

	// 2007 год
    ЗаполнитьСведенияОСтавкахИПНиСН2007();
    
    // 2008 год
    ЗаполнитьСведенияОСтавкахИПНиСН2008();
	
КонецПроцедуры

// Выполняет заполнение регистра сведений "РегламентированныеРасчетныеПоказатели"
//
Процедура ЗаполнитьСведенияОРегламентированныхРасчетныхПоказателях() Экспорт

	НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();

	// До 2007 года у инвалидов 3-ей группы необлагаемый ИПН доход составлял 240 МРП, 
	// после 2007 года - 27 МЗП.
	// Для инвалидов I или II группы - до 2005 года 480 МРП, с 2005 по 2008 - без ограничения,
	// с 2009 года - 45 МЗП
	// Для инвалидов I, II и III групп с 2010 года 55 МЗП
	// Для инвалидов I, II и III групп с 2017 года 75 МЗП
	
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20020101"), 4181, 823, 823*480, 823*240);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20030101"), 5000, 872, 872*480, 872*240);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20040101"), 6600, 919, 919*480, 919*240);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20050101"), 7000, 971, 999999999999.99, 971*240);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20050701"), 9200, 971, 999999999999.99, 971*240);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20060101"), 9200, 1030, 999999999999.99, 1030*240);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20070101"), 9752, 1092, 999999999999.99, 9752*27);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20080101"), 10515, 1168, 999999999999.99, 10515*27);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20080701"), 12025, 1168, 999999999999.99, 12025*27);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20090101"), 13470, 1273, 45*13470, 27*13470);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20090701"), 13717, 1296, 45*13717, 27*13717);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20090801"), 13717, 1296, 45*13470, 27*13470, 13470, 1273);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20100101"), 14952, 1413, 55*14952, 55*14952, 14952, 1413);
    ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20110101"), 15999, 1512, 55*15999, 55*15999, 15999, 1512);
    ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20120101"), 17439, 1618, 55*17439, 55*17439, 17439, 1618);
    ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20130101"), 18660, 1731, 55*18660, 55*18660, 18660, 1731);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20140101"), 19966, 1852, 55*19966, 55*19966, 19966, 1852);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20150101"), 21364, 1982, 55*21364, 55*21364, 21364, 1982);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20160101"), 22859, 2121, 55*22859, 55*22859, 22859, 2121);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20170101"), 24459, 2269, 75*24459, 75*24459, 24459, 2269);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20180101"), 28284, 2405, 75*28284, 75*28284, 28284, 2405);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20190101"), 42500, 2525, 882*2525, 882*2525, 42500, 2525);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20200101"), 42500, 2651, 882*2651, 882*2651, 42500, 2651);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20200401"), 42500, 2778, 882*2651, 882*2651, 42500, 2651);
	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20210101"), 42500, 2917, 882*2917, 882*2917, 42500, 2917);
  	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20220101"), 60000, 3063, 882*3063, 882*3063, 60000, 3063);
  	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20220401"), 60000, 3063, 882*3063, 882*3063, 60000, 3063, 3180);
  	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20230101"), 70000, 3450, 882*3450, 882*3450, 70000, 3450, 3450);
  	ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20240101"), 85000, 3692, 882*3692, 882*3692, 85000, 3692, 3692);
	
	НаборЗаписей.Записать();

КонецПроцедуры

// Добавляет запись в набор записей регистра "РегламентированныеРасчетныеПоказатели"
//
Процедура ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, ДатаСведений, РазмерМЗП, РазмерМРП, 
														РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы = 0,
														РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы = 0, 
														РазмерМЗПДляЦелейНалогообложения = 0, 
														РазмерМРПДляЦелейНалогообложения = 0,
														РазмерМРПДляПособийИныхСоциальныхВыплат = 0) Экспорт

	НоваяЗапись = НаборЗаписей.Добавить();

	НоваяЗапись.Период    = ДатаСведений;
	НоваяЗапись.РазмерМЗП = РазмерМЗП;
	НоваяЗапись.РазмерМРП = РазмерМРП;
	НоваяЗапись.РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы = РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы;
	НоваяЗапись.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы   = РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы;
	НоваяЗапись.РазмерМЗПДляЦелейНалогообложения = ?(РазмерМЗПДляЦелейНалогообложения = 0, РазмерМЗП, РазмерМЗПДляЦелейНалогообложения);
	НоваяЗапись.РазмерМРПДляЦелейНалогообложения = ?(РазмерМРПДляЦелейНалогообложения = 0, РазмерМРП, РазмерМРПДляЦелейНалогообложения);
	НоваяЗапись.РазмерМРПДляПособийИныхСоциальныхВыплат = РазмерМРПДляПособийИныхСоциальныхВыплат;

КонецПроцедуры

// Выполняет заполнение регистра сведений "СтавкаРефинансированияНБ"
//
Процедура ЗаполнитьСведенияОСтавкеРефинансированияНБ() Экспорт

 	СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();

 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20030707';
 	СтрокаНабора.Размер = 7;
 	
 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20050201';
 	СтрокаНабора.Размер = 7.5;
 	
 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20060101';
 	СтрокаНабора.Размер = 8;

 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20060401';
 	СтрокаНабора.Размер = 8.5;

 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20060701';
 	СтрокаНабора.Размер = 9;
 	
 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20071201';
 	СтрокаНабора.Размер = 11;
 	
 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20080701';
 	СтрокаНабора.Размер = 10.5;
 	
 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20090101';
 	СтрокаНабора.Размер = 10;
 	
 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20090205';
 	СтрокаНабора.Размер = 9.5;
 	
 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20090512';
 	СтрокаНабора.Размер = 9;

 	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20090610';
 	СтрокаНабора.Размер = 8.5;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20090710';
 	СтрокаНабора.Размер = 8;

	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20090810';
 	СтрокаНабора.Размер = 7.5;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20090904';
 	СтрокаНабора.Размер = 7;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20110309';
 	СтрокаНабора.Размер = 7.5;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20120214';
 	СтрокаНабора.Размер = 7;

	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20120402';
 	СтрокаНабора.Размер = 6.5;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20120604';
 	СтрокаНабора.Размер = 6;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20120806';
 	СтрокаНабора.Размер = 5.5;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20170401';
 	СтрокаНабора.Размер = 11.0;
		
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20170606';
 	СтрокаНабора.Размер = 10.5;

	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20180116';
 	СтрокаНабора.Размер = 9.75;

	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20180306';
 	СтрокаНабора.Размер = 9.5;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20180417';
 	СтрокаНабора.Размер = 9.25;

	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20180605';
 	СтрокаНабора.Размер = 9.0;

	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20181016';
 	СтрокаНабора.Размер = 9.25;

	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20190416';
 	СтрокаНабора.Размер = 9.00;
	
	СтрокаНабора = СтавкаНБ.Добавить();
	СтрокаНабора.Период = '20190910';
	СтрокаНабора.Размер = 9.25;

	СтрокаНабора = СтавкаНБ.Добавить();
	СтрокаНабора.Период = '20200310';
	СтрокаНабора.Размер = 12;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20200406';
 	СтрокаНабора.Размер = 9.5;  

	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20200721';
 	СтрокаНабора.Размер = 9;  

	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20210727';
 	СтрокаНабора.Размер = 9.25;  

	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20210914';
 	СтрокаНабора.Размер = 9.5;  

	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20211026';
 	СтрокаНабора.Размер = 9.75;  

	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20220125';
 	СтрокаНабора.Размер = 10.25;  

	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20220224';
 	СтрокаНабора.Размер = 13.5;  

	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20220426';
 	СтрокаНабора.Размер = 14;  

	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20220726';
 	СтрокаНабора.Размер = 14.5;  
    
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20221027';
 	СтрокаНабора.Размер = 16;  
    
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20221206';
 	СтрокаНабора.Размер = 16.75;  
    
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20230828';
 	СтрокаНабора.Размер = 16.5;  
    
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20231009';
 	СтрокаНабора.Размер = 16;  
    
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20231127';
 	СтрокаНабора.Размер = 15.75;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20240122';
 	СтрокаНабора.Размер = 15.25;
	
    СтавкаНБ.Записать();

КонецПроцедуры

// Заполняет справочник воинских званий предопределенными реквизитами
//
Процедура ЗаполнитьСправочникВоинскихЗваний() Экспорт

	ВоинскиеЗвания = Справочники.ВоинскиеЗвания;

	ОбъектЗвание = ВоинскиеЗвания.ГенералАрмии.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.ГенералАрмии;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.ГенералЛейтенант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.ГенералЛейтенант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.ГенералМайор.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.ГенералМайор;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.ГенералПолковник.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.ГенералПолковник;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Ефрейтор.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Ефрейтор;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Капитан.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Капитан;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Лейтенант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Лейтенант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Майор.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Майор;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.МаршалРеспубликиКазахстан.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.МаршалРеспубликиКазахстан;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.МастерСержант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.МастерСержант;
	ОбъектЗвание.Записать();
	
	ОбъектЗвание = ВоинскиеЗвания.МладшийЛейтенант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.МладшийЛейтенант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.МладшийСержант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.МладшийСержант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Подполковник.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Подполковник;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Полковник.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Полковник;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Прапорщик.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Прапорщик;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Рядовой.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Рядовой;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Сержант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Сержант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Сержант1Класса.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Сержант1Класса;
	ОбъектЗвание.Записать();
	
	ОбъектЗвание = ВоинскиеЗвания.Сержант2Класса.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Сержант2Класса;
	ОбъектЗвание.Записать();
	
	ОбъектЗвание = ВоинскиеЗвания.Сержант3Класса.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Сержант3Класса;
	ОбъектЗвание.Записать();
	
	ОбъектЗвание = ВоинскиеЗвания.СтаршийЛейтенант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.СтаршийЛейтенант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.СтаршийПрапорщик.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.СтаршийПрапорщик;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.СтаршийСержант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.СтаршийСержант;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.Старшина.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.Старшина;
	ОбъектЗвание.Записать();

	ОбъектЗвание = ВоинскиеЗвания.ШтабСержант.ПолучитьОбъект();
	ОбъектЗвание.ОбщевойсковоеЗвание = ВоинскиеЗвания.ШтабСержант;
	ОбъектЗвание.Записать();
	
КонецПроцедуры

// Выполняет начальное заполнение справочника "ОснованияУвольнения"
// данными по умолчанию
Процедура ЗаполнитьОснованияУвольнения() Экспорт
	
	ОснованияУвольнения = Справочники.ОснованияУвольненияИзОрганизации;
	ЭлементСпр = ОснованияУвольнения.НайтиПоКоду("000000001");
	Если ЭлементСпр.Пустая() Тогда
		ЭлементСпр = ОснованияУвольнения.СоздатьЭлемент();
		ЭлементСпр.Код = "000000001";
		ЭлементСпр.Наименование = "пп. 1) ст. 49 Трудового Кодекса РК. Расторжение трудового договора по соглашению сторон.";
		ЭлементСпр.ПричинаУвольненияИзОрганизации = Перечисления.ПричиныУвольненияИзОрганизации.ПоСобственномуЖеланию;
		ЭлементСпр.Записать();
	КонецЕсли;
	ЭлементСпр = ОснованияУвольнения.НайтиПоКоду("000000002");
	Если ЭлементСпр.Пустая() Тогда
		ЭлементСпр = ОснованияУвольнения.СоздатьЭлемент();
		ЭлементСпр.Код = "000000002";
		ЭлементСпр.Наименование = "пп. 2) ст. 49 Трудового Кодекса РК. Истечение срока трудового договора.";
		ЭлементСпр.ПричинаУвольненияИзОрганизации = Перечисления.ПричиныУвольненияИзОрганизации.ПоСобственномуЖеланию;
		ЭлементСпр.Записать();
	КонецЕсли;
	ЭлементСпр = ОснованияУвольнения.НайтиПоКоду("000000004");
	Если ЭлементСпр.Пустая() Тогда
		ЭлементСпр = ОснованияУвольнения.СоздатьЭлемент();
		ЭлементСпр.Код = "000000004";
		ЭлементСпр.Наименование = "пп. 5) ст. 49 Трудового Кодекса РК. Расторжение трудового договора по инициативе работника.";
		ЭлементСпр.ПричинаУвольненияИзОрганизации = Перечисления.ПричиныУвольненияИзОрганизации.ПоСобственномуЖеланию;
		ЭлементСпр.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Выполняет заполнение регистра сведений "ВычетыПоДоходам"
//
Процедура ЗаполнитьСведенияОВычетахПоДоходам() Экспорт

	НаборЗаписей = РегистрыСведений.ВычетыПоДоходам.СоздатьНаборЗаписей();

	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20050101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 7000, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20050701"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 9200, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20050101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 67970);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20060101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 70*1030);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20070101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 9752, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20070101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*9752);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20080101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 10515, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20080101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*10515);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20080701"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 12025, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20080701"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*12025);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20090101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 13470, 0);
    ДобавитьВычетКДодохам(НаборЗаписей, Дата("20090101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*13470);
    ДобавитьВычетКДодохам(НаборЗаписей, Дата("20090101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*13471, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20100101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 14952, 0);
    ДобавитьВычетКДодохам(НаборЗаписей, Дата("20100101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*14952);
    ДобавитьВычетКДодохам(НаборЗаписей, Дата("20100101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*14952, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20110101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 15999, 0);
    ДобавитьВычетКДодохам(НаборЗаписей, Дата("20110101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*15999);
    ДобавитьВычетКДодохам(НаборЗаписей, Дата("20110101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*15999, );
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20120101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 17439, 0);
    ДобавитьВычетКДодохам(НаборЗаписей, Дата("20120101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*17439);
    ДобавитьВычетКДодохам(НаборЗаписей, Дата("20120101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*17439, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20130101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 18660, 0);
    ДобавитьВычетКДодохам(НаборЗаписей, Дата("20130101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*18660);
    ДобавитьВычетКДодохам(НаборЗаписей, Дата("20130101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*18660, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20140101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 19966, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20140101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*19966);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20140101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*19966, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20150101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 21364, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20150101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*21364);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20150101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*21364, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20160101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 22859, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20160101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*22859);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20160101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*22859, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20170101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 24459, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20170101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*24459);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20170101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*24459, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20180101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 28284, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20180101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*28284);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20180101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*28284, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20190101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 12*2525, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20190101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 94*2525);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20190101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 6*2525, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20190101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341Погребение, 0, 94*2525);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20190101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341РождениеРебенка, 0, 94*2525);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20200101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 12*2651, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20200101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 94*2651);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20200101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 6*2651, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20200101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341Погребение, 0, 94*2651);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20200101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341РождениеРебенка, 0, 94*2651);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20200401"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 12*2778, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20200401"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 6*2778, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20210101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 12*2917, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20210101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 94*2917);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20210101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 6*2917, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20210101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341Погребение, 0, 94*2917);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20210101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341РождениеРебенка, 0, 94*2917);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20220101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 12*3063, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20220101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 94*3063);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20220101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 6*3063, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20220101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341Погребение, 0, 94*3063);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20220101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341РождениеРебенка, 0, 94*3063);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20230101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 12*3450, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20230101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 94*3450);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20230101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 6*3450, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20230101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341Погребение, 0, 94*3450);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20230101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341РождениеРебенка, 0, 94*3450);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20230101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст341Дивиденды, 0, 30000*3450);
    ДобавитьВычетКДодохам(НаборЗаписей, Дата("20240101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 12*3692, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20240101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 94*3692);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20240101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 6*3692, 0);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20240101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341Погребение, 0, 94*3692);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20240101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341РождениеРебенка, 0, 94*3692);
	ДобавитьВычетКДодохам(НаборЗаписей, Дата("20240101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст341Дивиденды, 0, 30000*3692);

	НаборЗаписей.Записать();

КонецПроцедуры

// Добавляет запись в набор записей регистра "ВычетыПоДоходам"
//
Процедура ДобавитьВычетКДодохам(НаборЗаписей, ДатаСведений, СпособНалогообложения, МесячныйВычет, ГодовойВычет) Экспорт

	НоваяЗапись = НаборЗаписей.Добавить();

	НоваяЗапись.Период        		  = ДатаСведений;
	НоваяЗапись.СпособНалогообложения = СпособНалогообложения;
	НоваяЗапись.МесячныйВычет 		  = МесячныйВычет;
	НоваяЗапись.ГодовойВычет  		  = ГодовойВычет;

КонецПроцедуры

// Выполняет первоначальное заполнение справочника РегламентированныеОтчеты
// списком регламентированных отчетов. 
//  Процедура должна вызываться при первоначальном заполнении пустой 
// информационной базы. Предполагается, что перед запуском процедуры справочник
// РегламентированныеОтчеты - пустой.
//
Процедура ЗаполнитьСписокРегламентированныхОтчетов(ПервоеЗаполнение = Истина) Экспорт

	Перем ДеревоОтчетов;
	Перем ОбработкаОбновлениеОтчетов;

	// Заполнением списка отчетов выполняется путем вызова экспортных процедур
	// основной формы обработки ОбновлениеРегламентированнойОтчетности.
	ОбработкаОбновлениеОтчетов = Обработки.ОбновлениеРегламентированнойОтчетности.Создать().ПолучитьФорму("ОсновнаяФорма");
	
	// Получаем список регламентированных отчетов в виде дерева.
	ДеревоОтчетов = ОбработкаОбновлениеОтчетов.ПолучитьСписокОтчетов();

	Если ДеревоОтчетов.Строки.Количество() = 0 Тогда
		// нет обновлений
		Возврат;
	КонецЕсли;
	
	// Заполняем списко отчетов.
	ОбработкаОбновлениеОтчетов.ЗаполнитьСписокОтчетов(ДеревоОтчетов, ПервоеЗаполнение);

КонецПроцедуры // ЗаполнитьСписокРегламентированныхОтчетов()

// Выполняет все регламентные операции для регламентированных отчетов
// при каждом обновлении ИБ
Процедура ОбновитьРегламентированныеОтчеты() Экспорт
	
	Сообщить("-----------------------");
	Сообщить("Обновление регламентированных отчетов.");		
	ПроцедурыОбновленияИнформационнойБазы.ЗаполнитьСписокРегламентированныхОтчетов(Ложь);
	Сообщить("-----------------------");
	
	// перенумерация элементов справочника РегламентированныеОтчеты
	Сообщить("-----------------------");
	Сообщить("Перенумерация элементов справочника ""Регламентированные отчеты""");
	ПеренумероватьСписокРегламентированныхОтчетов();
	Сообщить("-----------------------");
	
	// замена внешних регламентированных отчетов на внутренние
	Сообщить("-----------------------");
	Сообщить("Замена внешних отчетов на внутренние в справочнике ""Регламентированные отчеты""");
	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
						  |	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета,
						  |	РегламентированныеОтчеты.Наименование КАК Наименование
						  |ИЗ
						  |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
						  |ГДЕ
						  |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать = &ПризнакИспользованияВнешнегоОтчета");
	Запрос.УстановитьПараметр("ПризнакИспользованияВнешнегоОтчета", Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Метаданные.Отчеты.Найти(Выборка.ИсточникОтчета) <> Неопределено Тогда
			Попытка
				ОбъектРеглОтчет = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектРеглОтчет.ВнешнийОтчетИспользовать = Ложь;
				ОбъектРеглОтчет.Записать();
			Исключение
				Сообщить("  при записи отчета " + Выборка.Наименование + " произошла ошибка: " + ОписаниеОшибки(),  СтатусСообщения.Важное);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	Сообщить("-----------------------");
	
КонецПроцедуры

// Перенумеровывает элементы справочника РегламентированныеОтчеты
//
Процедура ПеренумероватьСписокРегламентированныхОтчетов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегламентированныеОтчеты.Ссылка,
	               |	РегламентированныеОтчеты.Родитель,
	               |	РегламентированныеОтчеты.Код,
	               |	РегламентированныеОтчеты.ЭтоГруппа КАК ЭтоГруппа,
	               |	РегламентированныеОтчеты.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЭтоГруппа ИЕРАРХИЯ,
	               |	Наименование";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	ТекКодГруппы = 0;
	ТекКод = 1;
	ТекущаяГруппа = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа = Истина ИЛИ Выборка.Родитель.Ссылка = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
			Попытка
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				Объект.Код = Формат(ТекКодГруппы, "ЧЦ=3; ЧВН=; ЧГ=") + "000";
				Объект.ГенерироватьНовыйКод();
				Объект.Записать();  			
				ТекКодГруппы = ТекКодГруппы + 1;
			Исключение
				Сообщить(" ошибка при перенумерации " + Выборка.Ссылка + ": " + ОписаниеОшибки());
			КонецПопытки;
		Иначе
			Если ТекущаяГруппа <> Выборка.Родитель.Ссылка Тогда
				ТекКод = 1;
			КонецЕсли;
			Попытка
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				Объект.Код = Формат(ТекКод, "ЧЦ=6; ЧВН=; ЧГ=");
				Объект.ГенерироватьНовыйКод();
				Объект.Записать();			
				ТекКод = ТекКод + 1;
			Исключение
				Сообщить(" ошибка при перенумерации " + Выборка.Ссылка + ": " + ОписаниеОшибки());
			КонецПопытки;
			ТекущаяГруппа = Выборка.Родитель.Ссылка;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет по умолчанию формы обучения
//
Процедура ЗаполнитьФормыОбучения() Экспорт
	
	ФормыОбучения = Справочники.ФормыОбучения;
	СсылкаНаЭлемент = ФормыОбучения.НайтиПоНаименованию("Лекция");
	Если  СсылкаНаЭлемент.Пустая() Тогда
		ЭлементФормыОбучения = ФормыОбучения.СоздатьЭлемент();
		ЭлементФормыОбучения.Наименование = "Лекция";		
		ЭлементФормыОбучения.Записать();
	Иначе
		ЭлементФормыОбучения = СсылкаНаЭлемент.ПолучитьОбъект();
		ЭлементФормыОбучения.ПометкаУдаления = Ложь;
	КонецЕсли;	
	ЗаписатьСправочникОбъект(ЭлементФормыОбучения);		
	
	СсылкаНаЭлемент = ФормыОбучения.НайтиПоНаименованию("Тренинг");
	Если  СсылкаНаЭлемент.Пустая() Тогда
		ЭлементФормыОбучения = ФормыОбучения.СоздатьЭлемент();
		ЭлементФормыОбучения.Наименование = "Тренинг";		
	Иначе
		ЭлементФормыОбучения = СсылкаНаЭлемент.ПолучитьОбъект();
		ЭлементФормыОбучения.ПометкаУдаления = Ложь;
	КонецЕсли;
	ЗаписатьСправочникОбъект(ЭлементФормыОбучения);	
	
	СсылкаНаЭлемент = ФормыОбучения.НайтиПоНаименованию("Семинар");
	Если  СсылкаНаЭлемент.Пустая() Тогда
		ЭлементФормыОбучения = ФормыОбучения.СоздатьЭлемент();
		ЭлементФормыОбучения.Наименование = "Семинар";		
	Иначе
		ЭлементФормыОбучения = СсылкаНаЭлемент.ПолучитьОбъект();
		ЭлементФормыОбучения.ПометкаУдаления = Ложь;
	КонецЕсли;
	ЗаписатьСправочникОбъект(ЭлементФормыОбучения);	
	
	СсылкаНаЭлемент = ФормыОбучения.НайтиПоНаименованию("Деловая игра");
	Если  СсылкаНаЭлемент.Пустая() Тогда		
		ЭлементФормыОбучения = ФормыОбучения.СоздатьЭлемент();
		ЭлементФормыОбучения.Наименование = "Деловая игра";		
	Иначе
		ЭлементФормыОбучения = СсылкаНаЭлемент.ПолучитьОбъект();
		ЭлементФормыОбучения.ПометкаУдаления = Ложь;
	КонецЕсли;
	ЗаписатьСправочникОбъект(ЭлементФормыОбучения);	
	
	СсылкаНаЭлемент = ФормыОбучения.НайтиПоНаименованию("Решение кейсов");
	Если  СсылкаНаЭлемент.Пустая() Тогда		
		ЭлементФормыОбучения = ФормыОбучения.СоздатьЭлемент();
		ЭлементФормыОбучения.Наименование = "Решение кейсов";		
	Иначе
		ЭлементФормыОбучения = СсылкаНаЭлемент.ПолучитьОбъект();
		ЭлементФормыОбучения.ПометкаУдаления = Ложь;
	КонецЕсли;
	ЗаписатьСправочникОбъект(ЭлементФормыОбучения);	
	
	СсылкаНаЭлемент = ФормыОбучения.НайтиПоНаименованию("Экскурсия");
	Если  СсылкаНаЭлемент.Пустая() Тогда		
		ЭлементФормыОбучения = ФормыОбучения.СоздатьЭлемент();
		ЭлементФормыОбучения.Наименование = "Экскурсия";		
	Иначе
		ЭлементФормыОбучения = СсылкаНаЭлемент.ПолучитьОбъект();
		ЭлементФормыОбучения.ПометкаУдаления = Ложь;		
	КонецЕсли;
	ЗаписатьСправочникОбъект(ЭлементФормыОбучения);	
	
КонецПроцедуры  // ЗаполнитьФормыОбучения

// Процедура заполняет по умолчанию ВидыТрудовыхОтпусков
//
Процедура ЗаполнитьВидыТрудовыхОтпусков() Экспорт
	
	// устанавливаем реквизиты для предопределенного элемента ОтпускЕжегодный
	ВРОбъект = Справочники.ВидыТрудовыхОтпусков.ОтпускЕжегодный.ПолучитьОбъект();
	
	ВРОбъект.ВидНачисления = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтп;
	ВРОбъект.ОчередностьПредоставленияОтпуска = 1;
	
	// список исключаемых из стажа состояний
	МассивСостояний = Новый Массив();
	МассивСостояний.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый);
	МассивСостояний.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты);
	МассивСостояний.Добавить(Перечисления.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком);
	МассивСостояний.Добавить(Перечисления.СостоянияРаботникаОрганизации.Прогулы);
	
	Для Каждого ЭлементМассива Из МассивСостояний Цикл
		НоваяСтрока = ВРОбъект.ИсключаемыеИзСтажаСостояния.Добавить();
		НоваяСтрока.Состояние = ЭлементМассива;
	КонецЦикла;
	
	ВРОбъект.Записать();

КонецПроцедуры // ЗаполнитьВидыТрудовыхОтпусков

// Заполнение элементов и реквизитов справочников "Шкалы оценк"
//
Процедура ЗаполнитьСправочникШкалОценок() Экспорт
	
	СправочникШкал = Справочники.ШкалыОценокКомпетенций;
	ШкальныйОценки = Справочники.СоставОценочныхШкалКомпетенций;
	
	// Двух Бальная шкала
	Если Справочники.ШкалыОценокКомпетенций.НайтиПоНаименованию("Двух бальная").Пустая() Тогда
		Справочник = СправочникШкал.СоздатьЭлемент();
		Справочник.Наименование = "Двух бальная";
		Справочник.Записать();
		
		// Заполнение шкал
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "НЕ зачет";
		Оценка.ПриоритетОценки = 1;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "Зачет";
		Оценка.ПриоритетОценки = 2;
		Оценка.Записать();
	КонецЕсли;

	// Трех Бальная шкала
	Если Справочники.ШкалыОценокКомпетенций.НайтиПоНаименованию("Трех бальная").Пустая()  Тогда

		Справочник = СправочникШкал.СоздатьЭлемент();
		Справочник.Наименование = "Трех бальная";
		Справочник.Записать();
		
		// Заполнение шкал
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "Ниже ожидаемого уровня";
		Оценка.ПриоритетОценки = 1;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "На ожидаемом уровне";
		Оценка.ПриоритетОценки = 2;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "Выше ожидаемого уровня";
		Оценка.ПриоритетОценки = 3;
		Оценка.Записать();
    КонецЕсли;
			
	// Четырех Бальная шкала
	Если Справочники.ШкалыОценокКомпетенций.НайтиПоНаименованию("Четырех бальная").Пустая() Тогда
	
		Справочник = СправочникШкал.СоздатьЭлемент();
		Справочник.Наименование = "Четырех бальная";
		Справочник.Записать();
		
		// Заполнение шкал
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "НЕ удовлетворительно";
		Оценка.ПриоритетОценки = 1;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "Удовлетворительно";
		Оценка.ПриоритетОценки = 2;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "Хорошо";
		Оценка.ПриоритетОценки = 3;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник.Ссылка;
		Оценка.Наименование = "Отлично";
		Оценка.ПриоритетОценки = 4;
		Оценка.Записать();
    КонецЕсли;

	// Пяти Бальная шкала
	Справочник = СправочникШкал.Пятибалльная;
	
	Если ШкальныйОценки.НайтиПоНаименованию("E [-2]",Истина,,Справочник).Пустая() Тогда
		// Заполнение шкал
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник;
		Оценка.Наименование = "E [-2]";
		Оценка.ПриоритетОценки = 1;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник;
		Оценка.Наименование = "D [-1]";
		Оценка.ПриоритетОценки = 2;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник;
		Оценка.Наименование = "С [ 0]";
		Оценка.ПриоритетОценки = 3;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник;
		Оценка.Наименование = "В [+1]";
		Оценка.ПриоритетОценки = 4;
		Оценка.Записать();
		
		Оценка = ШкальныйОценки.СоздатьЭлемент();
		Оценка.Владелец = Справочник;
		Оценка.Наименование = "А [+2]";
		Оценка.ПриоритетОценки = 5;
		Оценка.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет константу шаблонов телефонов.
// 
Процедура ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию() Экспорт

	ТаблицаСоответствий = Новый Соответствие;
	ТаблицаСоответствий.Вставить(7,"999-99-99");
	ТаблицаСоответствий.Вставить(6,"99-99-99");
	ТаблицаСоответствий.Вставить(5,"9-99-99");
	ТаблицаСоответствий.Вставить(4,"99-99");

	ХранилищеШаблоновТелефонов = Новый ХранилищеЗначения(ТаблицаСоответствий);

	Константы.ШаблоныТелефонныхНомеров.Установить(ХранилищеШаблоновТелефонов);

КонецПроцедуры // укЗаполнитьДанныеПоУмолчаниюДляКонтактнойИнформации()

// Заполнение реквизитов справочника "Виды контактной информации"
//
Процедура ЗаполнитьСправочникВидыКонтактнойИнформации() Экспорт

	// Физ.лица
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();

	// Организации
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();

	// Контрагенты
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();

	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();

	// Пользователи
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи;
	ОбъектВидКонтактнойИнформации.Записать();

	// Кандидаты
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.КонтактныйТелефонКандидата.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбъектВидКонтактнойИнформации.Записать();
	
КонецПроцедуры

// Процедура устанавливает указанное значение указанной константы и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  ИмяКонстанты      - имя константы, которую требуется установить.
//  ЗначениеКонстанты - значение константы.
//
Процедура УстановитьКонстанту(ИмяКонстанты, ЗначениеКонстанты) Экспорт

	Если Константы[ИмяКонстанты].Получить() = ЗначениеКонстанты Тогда
		Возврат;
	КонецЕсли;

	Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);

	СтрСообщения = "Константе """ + Метаданные.Константы[ИмяКонстанты].Синоним + """ "
	             + "назначено значение """ + ЗначениеКонстанты + """";
	Сообщить(СтрСообщения, СтатусСообщения.Обычное);

КонецПроцедуры

// Процедура заполняет по умолчанию необходимые данные
// для отправки сообщений в службу технической поддержки.
//
Процедура ЗаполнитьПараметрыКонстантыОбращенияВОтделТехническойПоддержки() Экспорт

	Перем СтруктураЗначения;

	Если ТипЗнч(Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить()) <> Тип("Структура") Тогда

		ОбщегоНазначения.ЗаполнитьСтруктуруДанныхНастройкиОбращенияВОтделТехподдержкиПоУмолчанию(СтруктураЗначения);

		СтрокаПараметровОтправки = СтруктураЗначения.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела");

		Если СтрокаПараметровОтправки <> Неопределено Тогда

			СтрокаПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1] = "hotline@1c.kz";
			
			Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Установить(Новый ХранилищеЗначения(СтруктураЗначения, Новый СжатиеДанных));

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура заполняет предопределенную смену
//
Процедура ЗаполнитьПредопределенныеСмены() Экспорт
	
	Смена = Справочники.Смены.Смена24Часа.ПолучитьОбъект();
	Смена.ПериодыСмены.Очистить();
	ПериодСмены = Смена.ПериодыСмены.Добавить();
	ПериодСмены.ВремяНачала = Дата(1,1,1, 0, 0, 0);
	ПериодСмены.ВремяОкончания = Дата(1,1,1, 23, 59, 59);
	Смена.Записать();
	
КонецПроцедуры // ЗаполнитьПредопределенныеСмены()

// Процедура заполняет сведения о предоставляемых отпусках
//
Процедура ЗаполнитьСведенияОПредостаавляемыхОтпусках(Организация) Экспорт
	
	НаборЗаписей = РегистрыСведений.ПредоставляемыеОтпускаОрганизаций.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Организация.Значение = Организация.Ссылка;
	НаборЗаписей.Отбор.Организация.Использование = Истина;
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = '20070601';
	Запись.Организация = Организация.Ссылка;
	Запись.ВидТрудовогоОтпуска = Справочники.ВидыТрудовыхОтпусков.ОтпускЕжегодный;
	Запись.РазмерОтпуска = 24;
	Запись.Действие = Перечисления.ВидыДействияСНачислением.Начать;
	
	НаборЗаписей.Записать();

КонецПроцедуры

// Начальное заполнение справочника "КлассификаторСтранМира".
//
Процедура НачальноеЗаполнениеСправочникаКлассификаторСтранМира() Экспорт

	Казахстан = Справочники.КлассификаторСтранМира.Казахстан;

	// Заполнение полного наименования предопределенного элемента.
	КазахстанОбъект                    = Казахстан.ПолучитьОбъект();
	КазахстанОбъект.Наименование	   = "КАЗАХСТАН";
	КазахстанОбъект.НаименованиеПолное = "Республика Казахстан";
	КазахстанОбъект.КодАльфа2		   = "KZ";
	КазахстанОбъект.КодАльфа3		   = "KAZ";
	КазахстанОбъект.Записать();

КонецПроцедуры // НачальноеЗаполнениеСправочникаКлассификаторСтранМира()

// Выполняет заполнение регистра сведений "КоэффициентыОплатыСверхнормативныхРабот"
//
Процедура ЗаполнитьСведенияОКоэффициентахОплатыСверхнормативныхРабот() Экспорт 

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации");
		
	НаборЗаписей = РегистрыСведений.КоэффициентыОплатыСверхнормативныхРабот.СоздатьНаборЗаписей();

	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОрганизаций.Следующий() Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = Дата(2005, 1, 1);
		НоваяЗапись.Организация = ВыборкаОрганизаций.Организация;
		НоваяЗапись.КоэффициентНочные				= 1.5;
		НоваяЗапись.КоэффициентПраздничныеИВыходные = 2;
		НоваяЗапись.КоэффициентСверхурочные			= 1.5;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = Дата(2016, 1, 1);
		НоваяЗапись.Организация = ВыборкаОрганизаций.Организация;
		НоваяЗапись.КоэффициентНочные				= 1.5;
		НоваяЗапись.КоэффициентПраздничныеИВыходные = 1.5;
		НоваяЗапись.КоэффициентСверхурочные			= 1.5;
	КонецЦикла;

	НаборЗаписей.Записать();

КонецПроцедуры

//Процедура устанавливает новые коды и полное наименование элементам справочника
//"Виды деятельности"
Процедура УстановитьПолноеНаименованиеВидыДеятельности() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыДеятельности.Ссылка
	               |ИЗ
	               |	Справочник.ВидыДеятельности КАК ВидыДеятельности
	               |ГДЕ
	               |	ВидыДеятельности.Предопределенный = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидыДеятельности.Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.Ссылка = Справочники.ВидыДеятельности.РастениеводствоИЖивотноводствоОхота Тогда
			Объект.ПолноеНаименование	= "В сельском, лесном и рыбном хозяйстве (растениеводство и животноводство, охота и предоставление услуг в этих областях) (раздел 2.1 форма № 2-Т (ПРОФ))";	
			Объект.КодОКЭД 				= "01300"; //Растениеводство в сочетании с животноводством (смешанное сельское хозяйство)
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.РыболовствоИАквакультура Тогда
			Объект.ПолноеНаименование	= "В сельском, лесном и рыбном хозяйстве (рыболовство и аквакультура) (раздел 2.2 форма № 2-Т (ПРОФ)";
			Объект.КодОКЭД 				= "05010"; //Рыболовство
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ДобычаУгляИЛигнита Тогда
			Объект.ПолноеНаименование	= "В горнодобывающей промышленности и разработке карьеров (добыча угля и лигнита) (раздел 2.3 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "10101"; // Добыча каменного угля открытым способом
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ДобычаСыройНефтиИПриродногоГаза Тогда
			Объект.ПолноеНаименование	= "В горнодобывающей промышленности и разработке карьеров (добыча сырой нефти и природного газа) (раздел 2.4 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "11101"; //Добыча сырой нефти и попутного газа
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ПереработкаМясаИПроизводствоМясныхИзделий Тогда
			Объект.ПолноеНаименование	= "В обрабатывающей промышленности (переработка и консервирование мяса и производство мясных изделий) (раздел 2.5 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "15130"; //Производство мясных продуктов
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ПроизводствоРастительныхИЖивотныхМаселИЖиров Тогда
			Объект.ПолноеНаименование	= "В обрабатывающей промышленности (производство растительных и животных масел и жиров) (раздел 2.6 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "15420"; //Производство рафинированных масел и жиров 
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ПроизводствоМолочныхПродуктов Тогда
			Объект.ПолноеНаименование	= "В обрабатывающей промышленности (производство молочных продуктов) (раздел 2.7 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "15511"; //Переработка молока, кроме консервирования, и производство сыров
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ПроизводствоХлебобулочныхИМучныхИзделий Тогда
			Объект.ПолноеНаименование	= "В обрабатывающей промышленности (производство хлебобулочных и мучных изделий) (раздел 2.8 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "15810"; //Производство хлеба и свежих кондитерских изделий
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ПроизводствоТекстильныхИзделий Тогда
			Объект.ПолноеНаименование	= "В обрабатывающей промышленности (производство текстильных изделий) (раздел 2.9 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "17549"; //Производство прочих текстильных изделий
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ПроизводствоПродуктовНефтепереработки Тогда
			Объект.ПолноеНаименование	= "В обрабатывающей промышленности (производство продуктов нефтепереработки) (раздел 2.10 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "23200"; // Производство нефтепродуктов
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ПроизводствоПродуктовХимическойПромышленности Тогда
			Объект.ПолноеНаименование	= "В обрабатывающей промышленности (производство продуктов химической промышленности) раздел 2.11 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "24669"; // Производство других химических продуктов
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.МеталлургическаяПромышленность Тогда
			Объект.ПолноеНаименование	= "В обрабатывающей промышленности (металлургическая промышленность) (раздел 2.12 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "27454"; // Обработка цветных металлов и сплавов
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ПроизводствоМашинИОборудования Тогда
			Объект.ПолноеНаименование	= "В обрабатывающей промышленности (производство машин и оборудования, не включенных в другие категории; производство автотранспортных средств, трейлеров и полуприцепов; производство прочих транспортных средств) (раздел 2.13 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "34101"; //Производство автомобилей и других моторных транспортных средств
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ПроизводствоМебели Тогда
			Объект.ПолноеНаименование	= "В обрабатывающей промышленности (производство мебели) (раздел 2.14 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "36120"; //Производство мебели для офисов и предприятий торговли
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ПроизводствоПередачаИРаспределениеЭлектроэнергии Тогда
			Объект.ПолноеНаименование	= "В электроснабжении, подаче газа, пара и воздушном кондиционировании (производство, передача и распределение электроэнергии) (раздел 2.15 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "40105"; //Сбор, передача и распределение электроэнергии электросетями
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ВСтроительстве Тогда
			Объект.ПолноеНаименование	= "В строительстве (раздел 2.16 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "45212"; //Строительство гражданских инженерных сооружений
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ВОптовойИРозничнойТорговле Тогда
			Объект.ПолноеНаименование 	= "В оптовой и розничной торговле; ремонте автомобилей и мотоциклов (раздел 2.17 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "51909"; //Оптовая торговля широким ассортиментом товаров без какой-либо конкретизации
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ВУслугахПоПроживаниюИПитанию Тогда
			Объект.ПолноеНаименование	= "В услугах по проживанию и питанию (раздел 2.18 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "55230"; //Предоставление услуг прочими местами для проживания
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ПассажирскийЖелезнодорожныйТранспорт Тогда
			Объект.ПолноеНаименование	= "В транспорте и складировании (пассажирский железнодорожный транспорт, междугородний и грузовой железнодорожный транспорт) (раздел 2.19 форма № 2-Т (ПРОФ))";			
			Объект.КодОКЭД				= "60100"; //Деятельность железнодорожного транспорта
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ПрочийПассажирскийСухопутныйТранспорт Тогда
			Объект.ПолноеНаименование	= "Транспорт и складирование (прочий пассажирский сухопутный транспорт; грузовые перевозки автомобильным транспортом) (раздел 2.20 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "61201"; //Пассажирские и грузовые перевозки
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ВоздушныйТранспорт Тогда
			Объект.ПолноеНаименование	= "В транспорте и складировании (воздушный транспорт) (раздел 2.21 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "62100"; //Деятельность воздушного транспорта, подчиняющегося расписанию
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ПочтоваяИКурьерскаяДеятельность Тогда
			Объект.ПолноеНаименование	= "В транспорте и складировании (почтовая и курьерская деятельность) (раздел 2.22 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "64120"; //Курьерская деятельность
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.Связь Тогда
			Объект.ПолноеНаименование	= "В информации и связи (связь) (раздел 2.23 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "64200"; //Электросвязь 
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ФинансоваяИСтраховаяДеятельности Тогда
			Объект.ПолноеНаименование	= "В финансовой и страховой деятельности (раздел 2.24 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "65129"; //Денежное посредничество прочих финансовых учреждений
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ВГосударственномУправленииИОборонеСоциальномОбеспечении Тогда
			Объект.ПолноеНаименование	= "В государственном управлении и обороне; обязательном социальном обеспечении (раздел 2.25 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "75111"; //Деятельность республиканских органов управления
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ВОбразовании Тогда
			Объект.ПолноеНаименование	= "В образовании (раздел 2.26 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "80300"; //Высшее образование
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыДеятельности.ДеятельностьВОбластиЗдравоохранения Тогда
			Объект.ПолноеНаименование	= "В здравоохранении и социальных услугах (деятельность в области здравоохранения) (раздел 2.27 форма № 2-Т (ПРОФ))";
			Объект.КодОКЭД				= "85111"; //Деятельность больниц широкого профиля и специализированных больниц
		КонецЕсли;
		
		Попытка
			Объект.Записать();
		Исключение
			Сообщить(" при записи полного наименования элемента справочника ""Виды деятельности"" """ + СокрЛП(Объект.Наименование) + """ произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет сведения предопределенных элементов справочника
// "Сохраненные настройки"
Процедура ЗагрузитьНастройкиОтчетов() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	ТаблицаНастроек = ТиповыеОтчеты.ПолучитьТаблицуПредопределенныхНастроек();
	
	Для Каждого СтрокаНастройки Из ТаблицаНастроек Цикл
		
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента(СтрокаНастройки.Макет, СтрокаНастройки.Отчет);
		
	КонецЦикла
	#КонецЕсли	
	
КонецПроцедуры

