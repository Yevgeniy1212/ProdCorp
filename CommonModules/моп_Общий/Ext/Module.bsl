////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьДатуПоГодуИКварталу(Год, Квартал) Экспорт
	
	Если ЗначениеЗаполнено(Год) и ЗначениеЗаполнено(Квартал) Тогда
		Попытка
			Возврат Дата(Год, (Число(Квартал)*3) - 2, 1);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьТекстРасшифровкиКодаТНВЭД(КодТНВЭДСсылка) Экспорт
	
	HTMLКодЗаголовка = "<HTML>
	|<HEAD></HEAD>
	|<BODY scroll=auto rightMargin=0 style=""background: #FFFBF0;""><FONT face=""Courier New"" size=2>
	|<LINK href=""v8help://service_book/service_style"" type=text/css rel=stylesheet>
	|<p style=""font-size: 13px; padding-left: 7px; padding-top: 2px;"">
	|";
	
	HTMLКодРасшифровки = ?(КодТНВЭДСсылка.ДополнятьРасшифровкуРодительскими, ПолучитьНаименованиеИзТНВЭД(КодТНВЭДСсылка.Родитель), "");
	HTMLКодРасшифровки = HTMLКодРасшифровки + ?(ЗначениеЗаполнено(HTMLКодРасшифровки), "<STRONG> " + Строка(КодТНВЭДСсылка.Расшифровка) + "</STRONG>", Строка(КодТНВЭДСсылка.Расшифровка));
	Возврат HTMLКодЗаголовка + HTMLКодРасшифровки + "</FONT></BODY></HTML>";	
	
КонецФункции

// Функция возвращает полную расшифровку элемента из справочника "КлассификаторКодовТНВЭД"
// с учетом иерархии (т.е. в расшифровку последовательно включаются расшифровки родительских элементов)
//
Функция ПолучитьНаименованиеИзТНВЭД(ТНВЭД, Наименование = "") Экспорт
	
	Если ТНВЭД = Неопределено или ТипЗнч(ТНВЭД) = Тип("Строка") Тогда
		Возврат Наименование;
	КонецЕсли;
	
	Если ТНВЭД.ДополнятьРасшифровкуРодительскими Тогда
		Родитель = ТНВЭД.Родитель;
		Если ЗначениеЗаполнено(ТНВЭД.Родитель) Тогда
			Возврат ПолучитьНаименованиеИзТНВЭД(ТНВЭД.Родитель,  СокрЛП(СокрЛП(ТНВЭД.Расшифровка) + " " + Наименование));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат  ТНВЭД.Расшифровка + ?(ЗначениеЗаполнено(Наименование), " " + Наименование, "");   
	
КонецФункции// ПолучитьНаименованиеИзТНВЭД

// Определение каталога "Application Data" текущего пользователя Windows
//
Функция ПолучитьПутьККаталогуДанныхПриложений() Экспорт 
	
	// Создаем COM объект "Shell.Application" (Для Windows 98 и  Windows NT 4.0 требуется установка
    // Windows Script Host 5.1 и Internet Explorer 4.0)	
	App = Новый COMОбъект("Shell.Application");
	Folder = App.Namespace(26);
	Путь = СокрЛП(Folder.Self.Path);
	Возврат ?(Прав(Путь, 1) = "\", Путь, Путь + "\");
	
КонецФункции 

// Функция возвращает массив возможных путей к каталогу шаблонов конфигураций
//
Функция ПолучитьПутиККаталогуШаблонов() Экспорт
   
    Перем ПутиККаталогуШаблонов;
   
    ПутиККаталогуШаблонов = Новый Массив();
   // Добавляем в массив сначала стандартный путь 
    ПутиККаталогуШаблонов.Добавить(СтрЗаменить(КаталогПрограммы(),"bin","tmplts"));
   
    // Определяем версию платформы
    СистемнаяИнформация = Новый СистемнаяИнформация;
    ТекущаяВерсия = Лев(СистемнаяИнформация.ВерсияПриложения, 3);
   
    // если это 8.2
	Если ТекущаяВерсия = "8.2" Тогда
		   
        ПутьКФайлуНастроек = "";
        КаталогДанныхПриложений = "";
		Попытка
			// Получаем путь к каталогу  "Application Data" для текущего пользователя Windows
			КаталогДанныхПриложений = ПолучитьПутьККаталогуДанныхПриложений();
			// Добавлям путь к файлу, в котором храняться настройки пути к каталогу шалонов для 8.2			
			ПутьКФайлуНастроек = КаталогДанныхПриложений + "1C\1CEStart\1CEStart.cfg";
        Исключение
            Возврат ПутиККаталогуШаблонов;
        КонецПопытки;
               
        Файл = Новый Файл(ПутьКФайлуНастроек);
        Если Не Файл.Существует() Тогда
            Возврат ПутиККаталогуШаблонов;   
        КонецЕсли;
       
        // Считываем файл настроек в текстовый документ
        // и ищем в нем строку начинающуюся с "ConfigurationTemplatesLocation"
		ТекстДок = Новый ТекстовыйДокумент;
        ТекстДок.Прочитать(ПутьКФайлуНастроек);
        КоличествоСтрок = ТекстДок.КоличествоСтрок();
        Для Счетчик = 1 по КоличествоСтрок  Цикл
            Строка = СокрЛП(ТекстДок.ПолучитьСтроку(Счетчик));
            НомерСимволаНачалаПути = Найти(Строка, "ConfigurationTemplatesLocation=");
            // Если искомая строка найдена, получаем из нее путь к каталогу шаблонов
            Если НомерСимволаНачалаПути > 0 Тогда
                Путь = СокрЛП(Прав(Строка, СтрДлина(Строка) - (НомерСимволаНачалаПути + 30)));
                Если Прав(Путь, 1) <> "\" Тогда
                Путь = Путь + "\";
                КонецЕсли;
                Если ПутиККаталогуШаблонов.Найти(Путь) = Неопределено Тогда
                    ПутиККаталогуШаблонов.Добавить(Путь);                       
                КонецЕсли;
            КонецЕсли;
           
        КонецЦикла;
       
        // Добавим стандартный для 8.2 путь к папке шалонов
        СтандартныйПуть = КаталогДанныхПриложений + "1C\1Cv82\tmplts\";
        Если ПутиККаталогуШаблонов.Найти(СтандартныйПуть) = Неопределено Тогда
            ПутиККаталогуШаблонов.Добавить(СтандартныйПуть);                       
        КонецЕсли;
		
 // если это не 8.2   
 Иначе
        ПутьКФайлуНастроек = "";   
		Попытка
			// Получаем путь к каталогу  "Application Data" для текущего пользователя Windows
			// и добавлям путь к файлу, в котором храняться настройки пути к каталогу шалонов для 8.2						
              ПутьКФайлуНастроек = ПолучитьПутьККаталогуДанныхПриложений() + "1C\1Cv81\v8cscadr.lst";
        Исключение
            Возврат ПутиККаталогуШаблонов;
        КонецПопытки;
       
        Файл = Новый Файл(ПутьКФайлуНастроек);
        Если Не Файл.Существует() Тогда
            Возврат ПутиККаталогуШаблонов;   
        КонецЕсли;
       
        // Считываем файл настроек в текстовый документ
        // и ищем в нем строку начинающуюся с "file://"  типа "file://C:\Program Files\1cv81\tmplts"
        ТекстДок = Новый ТекстовыйДокумент;
        ТекстДок.Прочитать(ПутьКФайлуНастроек);
        КоличествоСтрок = ТекстДок.КоличествоСтрок();
        Для Счетчик = 1 по КоличествоСтрок  Цикл
            Строка = СокрЛП(ТекстДок.ПолучитьСтроку(Счетчик));
            НомерСимволаНачалаПути = Найти(Строка, "file://");
            // Если искомая строка найдена, получаем из нее путь к каталогу шаблонов
            Если НомерСимволаНачалаПути > 0 Тогда
                Путь = СокрЛП(Прав(Строка, СтрДлина(Строка) - (НомерСимволаНачалаПути + 6)));
                Если Прав(Путь, 1) <> "\" Тогда
                Путь = Путь + "\";
                КонецЕсли;
                Если ПутиККаталогуШаблонов.Найти(Путь) = Неопределено Тогда
                    ПутиККаталогуШаблонов.Добавить(Путь);                       
                КонецЕсли;
                Возврат ПутиККаталогуШаблонов;
            КонецЕсли;
           
        КонецЦикла;
	        
    КонецЕсли;
   
    Возврат ПутиККаталогуШаблонов;
   
КонецФункции

// Возвращает номер версии конфигурации
//
Функция ТекущаяВерсияКонфигурации() Экспорт
	Возврат "3.2.16.1";	
КонецФункции

// Функция исключает нецифровые символы из строки
// и возращает строку без символов
Функция ИсключитьНецифровыеСимволы(Строка) Экспорт
	
	Если НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Строка) Тогда
		НовСтрока = "";
		Для Н=1 По СтрДлина(Строка) Цикл
			ПервСимвол = Сред(Строка,Н,1);
			КодСимвола = КодСимвола(ПервСимвол);
			Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
				ПервСимвол = "";
			КонецЕсли;
			НовСтрока = Строка(НовСтрока) + Строка(ПервСимвол);
		КонецЦикла;              							 
		Возврат НовСтрока;
	КонецЕсли;						
	
	Возврат Строка;
	
КонецФункции

// Функция возвращает номер документа по ссылке
// при этом, если установлен флаг ИсключитьНецифровыеСимволы в значение "Истина",
// то из номера будут удалены нецифровые символы
//
Функция ПолучитьНомерДокумента(Ссылка, ИсключитьНецифровыеСимволы = Ложь) Экспорт
		
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат "";
	ИначеЕсли ИсключитьНецифровыеСимволы Тогда
		Возврат ИсключитьНецифровыеСимволы(Ссылка.Номер);
	Иначе
		Возврат Ссылка.Номер;		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

//Возвращает описание отчета
Функция ПолучитьОписаниеОтчета(Объект, Форма = Неопределено, Знач НомерВерсииКлиента = "", Знач ДатаВерсииКлиента = "", Знач НазваниеФормы = "") Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	НазваниеФормы = ?(СокрЛП(НазваниеФормы) = "", МетаданныеОбъекта.Комментарий, СокрЛП(НазваниеФормы));
	
	Если Форма = Неопределено или Найти(Форма.ФормаОтчета, "2008") > 0 Тогда
		
		Если Найти(МетаданныеОбъекта.Имя, "_НП") > 0 Тогда
			НомерВерсииКлиента = ?(СокрЛП(НомерВерсииКлиента) = "", "1.6.1.23", СокрЛП(НомерВерсииКлиента));
			ДатаВерсииКлиента = ?(СокрЛП(ДатаВерсииКлиента) = "", "24.02.2010", СокрЛП(ДатаВерсииКлиента));
		КонецЕсли;
		
		НомерВерсииКлиента = ?(СокрЛП(НомерВерсииКлиента) = "", "1.6.1.20", СокрЛП(НомерВерсииКлиента));
		ДатаВерсииКлиента = ?(СокрЛП(ДатаВерсииКлиента) = "", "29.09.2008", СокрЛП(ДатаВерсииКлиента));
		
		Возврат НазваниеФормы + ". Форма адаптирована к версии ИС МОП "
		+ НомерВерсииКлиента + " от " + ДатаВерсииКлиента + "г.";
		
	Иначе
		НомерВерсииКлиента = ?(ПустаяСтрока(НомерВерсииКлиента), "3.119.68", СокрЛП(НомерВерсииКлиента));
		ДатаВерсииРепозитория = ?(СокрЛП(ДатаВерсииРепозитория) = "", "13.04.2010", СокрЛП(ДатаВерсииРепозитория));
		//Возврат НазваниеФормы + ". Форма адаптирована к версии СОНО"
		//+ НомерВерсииКлиента + ", версия репозитория от " + ДатаВерсииРепозитория + "г.";
		Возврат НазваниеФормы;
	КонецЕсли;

КонецФункции

//Возвращает наименование единицы измерения для номенклатуры, пустую строку для ОС, НМА, ном. групп
Функция ПолучитьЕдиницуИзмерения(Объект, ЕдиницаИзмерения = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		возврат СокрЛП(ЕдиницаИзмерения);
	КонецЕсли;
	
	Если Объект.Метаданные().Реквизиты.Найти("БазоваяЕдиницаИзмерения") <> Неопределено Тогда		
		Возврат СокрЛП(Объект.БазоваяЕдиницаИзмерения);		
	КонецЕсли;	 
	
	Возврат "";
	
КонецФункции

// Получает основную конфигурацию.
//
// Возвращаемое значение:
//   Перечисление.моп_ОсновныеКонфигурации
//
Функция ПолучитьОсновнуюКонфигурацию() Экспорт;
	
	возврат Константы.моп_ОсновнаяКонфигурация.Получить();
		
КонецФункции

// номер версии продукта
Функция ПолучитьНомерВерсииМониторинга() Экспорт;
		
	Возврат Константы.моп_НомерВерсииКонфигурации.Получить();
	
КонецФункции

// Возвращает элемент иерархической сущности по номеру уровня
// и элементу в иерархии
//
Функция ПолучитьЭлементПоУровню(Элемент, Уровень)
	
	Если Уровень = 0 Тогда
		возврат Элемент.Пустая();	
	КонецЕсли; 	
	
	ТекущийУровень = Элемент.Уровень();	
	Если  (ТекущийУровень = Уровень) или (ТекущийУровень = 0) Тогда
		возврат Элемент.Родитель;
	КонецЕсли;
	возврат ПолучитьЭлементПоУровню(Элемент.Родитель, Уровень);
	
КонецФункции

// Возвращает таблицу элементов на которые имеются ссылки
//
Функция ПолучитьИспользуемыеЭлементы(Выборка)
	
	Ссылки = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Ссылки.Добавить(Выборка.Ссылка);	
	КонецЦикла; 
	
	возврат НайтиПоСсылкам(Ссылки);
	
КонецФункции

// Заполнение классификатора из внутреннего макета
//
Функция ЗаполнитьКлассификаторКодовТНВЭД(Макет, ВнешнийТабличныйДокумент = Неопределено)Экспорт
		
	#Если Не Клиент и Не ВнешнееСоединение Тогда	
		Сообщить("Заполнение/обновление классификатора кодов ТН ВЭД...");		
	#КонецЕсли
		
	НачатьТранзакцию();	
	Попытка
		СправочникКлассификаторКодовТНВЭД = Справочники.моп_КлассификаторКодовТНВЭД;
		
		#Если Клиент Тогда
			Состояние("Поиск ссылок на используемые элементы справочника...");															
		#КонецЕсли
		
		Выборка = СправочникКлассификаторКодовТНВЭД.Выбрать();				
		ИспользуемыеЭлементы = ПолучитьИспользуемыеЭлементы(Выборка);		
		ИспользуемыеЭлементы.Свернуть("Ссылка");		
		ИспользуемыеЭлементы.Индексы.Добавить("Ссылка");
		
		#Если Клиент Тогда
			Состояние("Создание вспомогательных элементов справочника...");													
		#КонецЕсли
		
		СозданаГруппаАрхив = Ложь;	
		ГруппаАрхив = СправочникКлассификаторКодовТНВЭД.НайтиПоНаименованию("__Архив");	
		Если (Не ЗначениеЗаполнено(ГруппаАрхив)) Тогда
			ГруппаАрхивОбъект = СправочникКлассификаторКодовТНВЭД.СоздатьЭлемент();
			ГруппаАрхивОбъект.Наименование = "__Архив";
			ГруппаАрхивОбъект.Записать();
			ГруппаАрхив = ГруппаАрхивОбъект.Ссылка;
			СозданаГруппаАрхив = Истина;
		КонецЕсли;  
		
		СозданаГруппаДатаОбновления = Ложь;	
		ГруппаДатаОбновления = СправочникКлассификаторКодовТНВЭД.НайтиПоНаименованию(Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy"));
		Если (Не ЗначениеЗаполнено(ГруппаДатаОбновления)) Тогда
			ГруппаДатаОбновленияОбъект = СправочникКлассификаторКодовТНВЭД.СоздатьЭлемент();
			ГруппаДатаОбновленияОбъект.Наименование = Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
			ГруппаДатаОбновленияОбъект.Родитель = ГруппаАрхив.Ссылка;
			ГруппаДатаОбновленияОбъект.Записать();
			ГруппаДатаОбновления = ГруппаДатаОбновленияОбъект.Ссылка;
			СозданаГруппаДатаОбновления = Истина;
		КонецЕсли;  
		
		//Запишем в таблицу значений элементы уже перенесенные ранее в архив
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	моп_КлассификаторКодовТНВЭД.Ссылка
		|ИЗ
		|	Справочник.моп_КлассификаторКодовТНВЭД КАК моп_КлассификаторКодовТНВЭД
		|ГДЕ
		|	моп_КлассификаторКодовТНВЭД.Родитель.Ссылка = &ГруппаДатаОбновления";
		
		Запрос.УстановитьПараметр("ГруппаДатаОбновления", ГруппаДатаОбновления);
		
		ЭлементыВАрхиве = Запрос.Выполнить().Выгрузить();
		ЭлементыВАрхиве.Индексы.Добавить("Ссылка");
				
		#Если Клиент Тогда
			Состояние("Перемещение элементов справочника...");											
		#КонецЕсли
		
		Выборка = СправочникКлассификаторКодовТНВЭД.Выбрать();
		
		Пока Выборка.Следующий() = 1 Цикл
			ЭлементСсылка = Выборка.Ссылка;
			РодительСсылка = ЭлементСсылка.Родитель.Ссылка;
			Если (РодительСсылка = ГруппаДатаОбновления) 
				или (РодительСсылка.Родитель.Ссылка = ГруппаАрхив)
				или (ЭлементСсылка = ГруппаДатаОбновления)
				или (ЭлементСсылка = ГруппаАрхив)
				или (РодительСсылка = ГруппаАрхив) Тогда
				продолжить;
			КонецЕсли; 
			ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();
			ЭлементОбъект.Родитель = ГруппаДатаОбновления;
			ЭлементОбъект.Записать();
			
		#Если Клиент Тогда
			// возможность прерывания загрузки для пользователя
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
						
		КонецЦикла;
		
		#Если Клиент Тогда
			Состояние("Добавление новых элементов справочника...");									
		#КонецЕсли
				
		УдаленныеЭлементы   = Новый ТаблицаЗначений;
		УдаленныеЭлементы.Колонки.Добавить("КодТНВЭД");
		УдаленныеЭлементы.Колонки.Добавить("Наименование");	
		ДобавленныеЭлементы = Новый ТаблицаЗначений;
		ДобавленныеЭлементы.Колонки.Добавить("КодТНВЭД");
		ДобавленныеЭлементы.Колонки.Добавить("Наименование");		
		ПеремещенныеВАрхивЭлементы  = Новый ТаблицаЗначений;
		ПеремещенныеВАрхивЭлементы.Колонки.Добавить("КодТНВЭД");
		ПеремещенныеВАрхивЭлементы.Колонки.Добавить("Наименование");	
		
		НомерСтроки = 1;
						
		ОбластьОсновная = Макет.Область("Данные");
		//пройдем по макету и заполним справочник
		Для НомерСтроки = ОбластьОсновная.Верх по ОбластьОсновная.Низ Цикл		
			
			КодТНВЭД		= СокрЛП(Макет.Область(НомерСтроки, 1).Текст);
			Наименование	= СокрЛП(Макет.Область(НомерСтроки, 2).Текст);
			КодРодителя		= СокрЛП(Макет.Область(НомерСтроки, 3).Текст);		
			ДополнятьРасшифровкуРодительскими = ?(СокрЛП(Макет.Область(НомерСтроки, 4).Текст) = "1", Истина, Ложь);		
						
			//Проверим есть ли уже такой элемент справочника
			ЭлементСсылка = СправочникКлассификаторКодовТНВЭД.НайтиПоНаименованию(КодТНВЭД, Истина , ГруппаДатаОбновления.Ссылка);
			Если Не ЭлементСсылка.Пустая() Тогда
				ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();
			иначе
				ЭлементОбъект = СправочникКлассификаторКодовТНВЭД.СоздатьЭлемент();
				Строка = ДобавленныеЭлементы.Добавить();		
				Строка.КодТНВЭД = КодТНВЭД;
				Строка.Наименование = Наименование;			
			КонецЕсли;
			
			Родитель = Справочники.моп_КлассификаторКодовТНВЭД.ПустаяСсылка();
			
			Если Не ПустаяСтрока(КодРодителя) И СтрДлина(КодТНВЭД) > 2 Тогда
			Родитель = СправочникКлассификаторКодовТНВЭД.НайтиПоНаименованию(КодРодителя, Истина);
			Если Не ЗначениеЗаполнено(Родитель) Тогда
				РодительОбъект = СправочникКлассификаторКодовТНВЭД.СоздатьЭлемент();
				Строка = ДобавленныеЭлементы.Добавить();		
				Строка.КодТНВЭД = КодРодителя;
				Строка.Наименование = "";
				РодительОбъект.Наименование = КодРодителя;			
			    РодительОбъект.Расшифровка = "";
				РодительОбъект.Записать();
				Родитель = РодительОбъект.Ссылка;
			КонецЕсли; 			
			КонецЕсли;
			
			ЭлементОбъект.Родитель = Родитель;
		
			//Установим значения реквизитов
			ЭлементОбъект.Наименование = КодТНВЭД;		
			ЭлементОбъект.Расшифровка = Наименование;
			ЭлементОбъект.ДополнятьРасшифровкуРодительскими = ДополнятьРасшифровкуРодительскими;
			
			ЭлементОбъект.Записать();
									
			#Если Клиент Тогда
			// возможность прерывания загрузки для пользователя
			ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
		КонецЦикла;
		
		#Если Клиент Тогда
			Состояние("Удаление исключенных элементов справочника...");						
		#КонецЕсли
		
		//Удалим исключенные элементы из архива
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	моп_КлассификаторКодовТНВЭД.Ссылка
		|ИЗ
		|	Справочник.моп_КлассификаторКодовТНВЭД КАК моп_КлассификаторКодовТНВЭД
		|ГДЕ
		|	моп_КлассификаторКодовТНВЭД.Родитель.Ссылка = &ГруппаДатаОбновления";
		
		Запрос.УстановитьПараметр("ГруппаДатаОбновления", ГруппаДатаОбновления);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() = 1 Цикл
			ЭлементСсылка = Выборка.Ссылка;
			
			Если ИспользуемыеЭлементы.Найти(ЭлементСсылка, "Ссылка") = Неопределено Тогда
				Строка = УдаленныеЭлементы.Добавить();		
				Строка.КодТНВЭД = ЭлементСсылка.Наименование;
				Строка.Наименование = ЭлементСсылка.Расшифровка;
				ЭлементСсылка.ПолучитьОбъект().Удалить();
			Иначе
			ЭлементСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина, Ложь);				
			КонецЕсли; 
			#Если Клиент Тогда
			// возможность прерывания загрузки для пользователя
			ОбработкаПрерыванияПользователя();
			#КонецЕсли											
		КонецЦикла; 
		
		//Удалим элементы на которые нет больше ссылок после очистки архивной группы
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ИспользуемыеЭлементы = ПолучитьИспользуемыеЭлементы(Выборка);

		Выборка.Сбросить();
		
		Пока Выборка.Следующий() = 1 Цикл
			ЭлементСсылка = Выборка.Ссылка;
			
			Если ИспользуемыеЭлементы.Найти(ЭлементСсылка, "Ссылка") = Неопределено Тогда
				Строка = УдаленныеЭлементы.Добавить();		
				Строка.КодТНВЭД = ЭлементСсылка.Наименование;
				Строка.Наименование = ЭлементСсылка.Расшифровка;
				ЭлементСсылка.ПолучитьОбъект().Удалить();
			Иначе
				Если ЭлементыВАрхиве.Найти(ЭлементСсылка) = Неопределено Тогда
					Строка = ПеремещенныеВАрхивЭлементы.Добавить();		
					Строка.КодТНВЭД = ЭлементСсылка.Наименование;
					Строка.Наименование = ЭлементСсылка.Расшифровка;								
				КонецЕсли;
			ЭлементСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина, Ложь);				
			КонецЕсли; 
			#Если Клиент Тогда
			// возможность прерывания загрузки для пользователя
			ОбработкаПрерыванияПользователя();	
			#КонецЕсли
		КонецЦикла; 

		#Если Клиент Тогда
			Состояние("Удаление вспомогательных элементов справочника...");			
		#КонецЕсли
		
		//Удалим служебные группы в случае если они пустые
				
		Если СозданаГруппаДатаОбновления Тогда
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Количество()=0 Тогда
				ГруппаДатаОбновления.ПолучитьОбъект().Удалить();
			КонецЕсли; 
		КонецЕсли; 
		
		Если СозданаГруппаАрхив Тогда
			
			Запрос.Текст = "ВЫБРАТЬ
			|	моп_КлассификаторКодовТНВЭД.Ссылка
			|ИЗ
			|	Справочник.моп_КлассификаторКодовТНВЭД КАК моп_КлассификаторКодовТНВЭД
			|ГДЕ
			|	моп_КлассификаторКодовТНВЭД.Родитель.Ссылка = &ГруппаАрхив";
			
			Запрос.УстановитьПараметр("ГруппаАрхив", ГруппаАрхив);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Количество()=0 Тогда
				ГруппаАрхив.ПолучитьОбъект().Удалить();
			КонецЕсли; 
		КонецЕсли; 
				
	Исключение
		#Если Не ВнешнееСоединение Тогда		
			Сообщить("Ошибка при заполнении классификатора кодов ТН ВЭД:" + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
		#КонецЕсли		
		ОтменитьТранзакцию();
		возврат Ложь;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	#Если Клиент Тогда	
		
		ПоказатьОтчетОЗаполнении = Ложь;
		
		//Формирование отчета о заполнении справочника
		Если (УдаленныеЭлементы.Количество() > 0)
			или (ПеремещенныеВАрхивЭлементы.Количество() > 0)
			или (ДобавленныеЭлементы.Количество() > 0) Тогда				
			
			Состояние("Формирование отчета о заполнении справочника...");
			
			Макет = СправочникКлассификаторКодовТНВЭД.ПолучитьМакет("ОтчетОЗаполненииСправочника");
			
			
			Если ВнешнийТабличныйДокумент = Неопределено Тогда
				ОтчетОЗаполненииСправочника = Новый ТабличныйДокумент;
			Иначе
				ОтчетОЗаполненииСправочника = ВнешнийТабличныйДокумент;
			КонецЕсли;
			
			СекцияЗаголовок = Макет.ПолучитьОбласть("Заголовок");
			
			СекцияЗаголовок.Параметры.ДатаФормирования = "Дата формирования: " + Формат(ТекущаяДата(), "ДЛФ=DDT");
			
			ОтчетОЗаполненииСправочника.Вывести(СекцияЗаголовок);
			ОтчетОЗаполненииСправочника.Вывести(Макет.ПолучитьОбласть("Шапка"));
			
			СекцияСтрока = Макет.ПолучитьОбласть("Строка");			
			СекцияИтог = Макет.ПолучитьОбласть("Итог");
			
			Если ДобавленныеЭлементы.Количество() > 0 Тогда
				ДобавленныеЭлементы.Сортировать("КодТНВЭД");
				ОтчетОЗаполненииСправочника.Вывести(Макет.ПолучитьОбласть("Добавлены"));	
				Для каждого Элемент Из ДобавленныеЭлементы Цикл		
					СекцияСтрока.Параметры.КодТНВЭД = Элемент.КодТНВЭД;
					СекцияСтрока.Параметры.Наименование = Элемент.Наименование;
					СекцияСтрока.Параметры.СостояниеЭлемента = "Добавлен";				
					ОтчетОЗаполненииСправочника.Вывести(СекцияСтрока);				
				КонецЦикла;
				СекцияИтог.Параметры.Итог = "Всего добавлено: " + ДобавленныеЭлементы.Количество() + " элементов";
				ОтчетОЗаполненииСправочника.Вывести(СекцияИтог);		
			КонецЕсли;
			
			Если УдаленныеЭлементы.Количество() > 0 Тогда
				УдаленныеЭлементы.Сортировать("КодТНВЭД");
				ОтчетОЗаполненииСправочника.Вывести(Макет.ПолучитьОбласть("Удалены"));
				Для каждого Элемент Из УдаленныеЭлементы Цикл		
					СекцияСтрока.Параметры.КодТНВЭД = Элемент.КодТНВЭД;
					СекцияСтрока.Параметры.Наименование = Элемент.Наименование;
					СекцияСтрока.Параметры.СостояниеЭлемента = "Удален";				
					ОтчетОЗаполненииСправочника.Вывести(СекцияСтрока);				
				КонецЦикла;
				СекцияИтог.Параметры.Итог = "Всего удалено: " + УдаленныеЭлементы.Количество() + " элементов";
				ОтчетОЗаполненииСправочника.Вывести(СекцияИтог);
			КонецЕсли;
			
			Если ПеремещенныеВАрхивЭлементы.Количество() > 0 Тогда
				ПеремещенныеВАрхивЭлементы.Сортировать("КодТНВЭД");
				ОтчетОЗаполненииСправочника.Вывести(Макет.ПолучитьОбласть("ПеремещеныВАрхив"));
				Для каждого Элемент Из ПеремещенныеВАрхивЭлементы Цикл	
					СекцияСтрока.Параметры.КодТНВЭД = Элемент.КодТНВЭД;
					СекцияСтрока.Параметры.Наименование = Элемент.Наименование;
					СекцияСтрока.Параметры.СостояниеЭлемента = "Перемещен в архив";
					ОтчетОЗаполненииСправочника.Вывести(СекцияСтрока);				
				КонецЦикла;
				СекцияИтог.Параметры.Итог = "Всего перемещено в архив: " + ПеремещенныеВАрхивЭлементы.Количество() + " элементов";
				ОтчетОЗаполненииСправочника.Вывести(СекцияИтог);
			КонецЕсли;			
			ОтчетОЗаполненииСправочника.ОтображатьСетку = Ложь;
			ПоказатьОтчетОЗаполнении = Истина;
		иначе
			ВнешнийТабличныйДокумент = Неопределено;
		КонецЕсли;
		
		Если ПеремещенныеВАрхивЭлементы.Количество() > 0 Тогда
			Предупреждение("Заполнение/обновление классификатора кодов ТН ВЭД завершено успешно."
			+ Символы.ПС + "При обновлении некоторые элементы справочника были перемещены в папку ""__Архив/" + Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy") + """ и помечены на удаление."
			+ Символы.ПС + "Данные элементы отсутствуют в составе классификатора кодов ТН ВЭД, поставляемого с конфигурацией."
			+ Символы.ПС
			+ Символы.ПС + "Рекомендуется для объектов мониторинга, связанных с перемещенными в архив элементами, задать актуальные соответствия"
			+ Символы.ПС + "кодов ТН ВЭД в регистре сведений ""Объекты мониторинга"", затем удалить перемещенные в архив элементы."
			+ Символы.ПС
			+ Символы.ПС + "Полный перечень элементов, перемещенных в архив, представлен в сформированном отчете о заполнении справочника.");
		Иначе
			Предупреждение("Заполнение/обновление классификатора кодов ТН ВЭД завершено успешно.");						  
		КонецЕсли;
		
		Если ПоказатьОтчетОЗаполнении и ВнешнийТабличныйДокумент = Неопределено Тогда
			ОтчетОЗаполненииСправочника.Показать("Отчет о заполнении справочника ""Классификатор кодов ТНВЭД""");
		КонецЕсли;
		
	#КонецЕсли
		
	#Если Не Клиент и Не ВнешнееСоединение Тогда			
		Сообщить("Заполнение/обновление классификатора кодов ТН ВЭД: завершено успешно.");
	#КонецЕсли
	
	возврат Истина;
	
КонецФункции

// Добавление элемента справочника из макета
// 
Функция  ДобавитьЭлементВСправочник(КодТНВЭД)
	СправочникКлассификаторКодовТНВЭД = Справочники.моп_КлассификаторКодовТНВЭД;
	
	Макет = ПолучитьОбщийМакет("КодыТНВЭД");
	
	ГруппаКода = Лев(КодТНВЭД,2);
	 
	ИмяСекции = "Область"+ГруппаКода;
	
	Область = Макет.Области.Найти(ИмяСекции);
	
	Если Область<>Неопределено Тогда
	
		Тз = Новый ТаблицаЗначений;
		Тз.Колонки.Добавить("Группа");
		Тз.Колонки.Добавить("КодРодителя");
		Тз.Колонки.Добавить("КодТНВЭД");
		Тз.Колонки.Добавить("Расшивровка");
		ТакогоКодаНет = Истина;
		Для Ном = Область.Верх по Область.Низ Цикл		
			Если НЕ СокрЛП(Макет.Область(Ном, 5).Текст) = "" Тогда 
				Если НЕ СокрЛП(Макет.Область(Ном, 4).Текст) = "" Тогда 
					Если  СокрЛП(Макет.Область(Ном, 4).Текст) = СокрЛП(КодТНВЭД) Тогда
						ТакогоКодаНет = Ложь;
						Прервать;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если не ТакогоКодаНет Тогда
			Для Ном = Область.Верх по Область.Низ Цикл		
				Если НЕ СокрЛП(Макет.Область(Ном, 5).Текст) = "" Тогда 
					Если НЕ СокрЛП(Макет.Область(Ном, 1).Текст) = "" Тогда
						Строки = Тз.Добавить();
						Строки.Группа = 1;
						Строки.Расшивровка	= СокрЛП(Макет.Область(Ном, 5).Текст);
						Строки.КодРодителя		= "";
						Строки.КодТНВЭД		= СокрЛП(Макет.Область(Ном, 1).Текст);
						РодительКод = СокрЛП(Макет.Область(Ном, 1).Текст);
					ИначеЕсли НЕ СокрЛП(Макет.Область(Ном, 2).Текст) = "" Тогда 
						Если  СокрЛП(Макет.Область(Ном, 2).Текст) <> лев(КодТНВЭД,4) Тогда
							Продолжить;
						КонецЕсли;
						
						Строки = Тз.Добавить();
						Строки.Группа = 1;
						Строки.Расшивровка	= СокрЛП(Макет.Область(Ном, 5).Текст);
						Строки.КодРодителя		= РодительКод;	
						Строки.КодТНВЭД		= СокрЛП(Макет.Область(Ном, 2).Текст);
						РодительКод = СокрЛП(Макет.Область(Ном, 2).Текст);

					ИначеЕсли НЕ СокрЛП(Макет.Область(Ном, 3).Текст) = "" Тогда 
						Если  СокрЛП(Макет.Область(Ном, 3).Текст) <> лев(КодТНВЭД,6) Тогда
							Продолжить;
						КонецЕсли;
						Строки = Тз.Добавить();
						Строки.Группа = 1;
						Строки.Расшивровка	= СокрЛП(Макет.Область(Ном, 5).Текст);
						Строки.КодРодителя		= РодительКод;
						Строки.КодТНВЭД		= СокрЛП(Макет.Область(Ном, 3).Текст);
		                РодительКод = СокрЛП(Макет.Область(Ном, 3).Текст);
					ИначеЕсли НЕ СокрЛП(Макет.Область(Ном, 4).Текст) = "" Тогда 
						Если  СокрЛП(Макет.Область(Ном, 4).Текст) <> лев(КодТНВЭД,10) Тогда
							Продолжить;
						КонецЕсли;
						Строки = Тз.Добавить();
						Строки.Группа = 0;
						Строки.Расшивровка	= СокрЛП(Макет.Область(Ном, 5).Текст);
						Строки.КодРодителя		= РодительКод;		
						Строки.КодТНВЭД		= СокрЛП(Макет.Область(Ном, 4).Текст);
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		
			Тз.Свернуть("Группа,КодРодителя,КодТНВЭД,Расшивровка");
			Для каждого НомСтроки Из Тз Цикл
					
				ЭлементСсылка = СправочникКлассификаторКодовТНВЭД.НайтиПоНаименованию(НомСтроки.КодТНВЭД, Истина);
				Если Не ЭлементСсылка.Пустая() Тогда
					ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();
				иначе
					ЭлементОбъект = СправочникКлассификаторКодовТНВЭД.СоздатьЭлемент();
					//Установим значения реквизитов
					ЭлементОбъект.Наименование = НомСтроки.КодТНВЭД;		
					ЭлементОбъект.Расшифровка = НомСтроки.Расшивровка;
				КонецЕсли;
				
				Родитель = Справочники.моп_КлассификаторКодовТНВЭД.ПустаяСсылка();
				Если Не ПустаяСтрока(НомСтроки.КодРодителя) И СтрДлина(НомСтроки.КодТНВЭД) > 2 Тогда
					Родитель = СправочникКлассификаторКодовТНВЭД.НайтиПоНаименованию(НомСтроки.КодРодителя, Истина);
					Если Не ЗначениеЗаполнено(Родитель) Тогда
						РодительОбъект = СправочникКлассификаторКодовТНВЭД.СоздатьЭлемент();
						РодительОбъект.Наименование = НомСтроки.КодРодителя;			
						РодительОбъект.Расшифровка = "";
						РодительОбъект.Записать();
						Родитель = РодительОбъект.Ссылка;
					КонецЕсли; 			
				КонецЕсли;
				
				ЭлементОбъект.Родитель = Родитель;
				ЭлементОбъект.Записать();
			КонецЦикла;
		Иначе
			ЭлементОбъект = СправочникКлассификаторКодовТНВЭД.СоздатьЭлемент();
	        ЭлементОбъект.Наименование = КодТНВЭД;
			ЭлементОбъект.Записать();
		КонецЕсли;
	Иначе
		ЭлементОбъект = СправочникКлассификаторКодовТНВЭД.СоздатьЭлемент();
        ЭлементОбъект.Наименование = КодТНВЭД;
		ЭлементОбъект.Записать();
	КонецЕсли;
	Возврат ЭлементОбъект.Ссылка;
	
КонецФункции

// Поиск кодаТНВЭД в справочнике моп_КлассификаторКодовТНВЭД
// 
Функция НайтиКодТНВЭД(КодТНВЭД) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	моп_КлассификаторКодовТНВЭД.Ссылка как КодТНВЭД
	               |ИЗ
	               |	Справочник.моп_КлассификаторКодовТНВЭД КАК моп_КлассификаторКодовТНВЭД
	               |ГДЕ
	               |	ПОДСТРОКА(моп_КлассификаторКодовТНВЭД.Наименование, 1, 10) = &КодТНВЭД";
				   
	Запрос.УстановитьПараметр("КодТНВЭД",КодТНВЭД);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.КодТНВЭД;
	Иначе
		спр = ДобавитьЭлементВСправочник(КодТНВЭД);
		Возврат спр;
	КонецЕсли;
КонецФункции

// Проверка существующих данных 
// 
Функция  ПроверитьСуществующиеЗаписи(Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	моп_ОбъектыМониторинга.КодТНВЭД.Наименование КАК КодТНВЭД
	               |ИЗ
	               |	РегистрСведений.моп_ОбъектыМониторинга КАК моп_ОбъектыМониторинга
	               |ГДЕ
	               |	моп_ОбъектыМониторинга.ОбъектМОП = &ОбъектМОП";
	Запрос.УстановитьПараметр("ОбъектМОП",Ссылка);
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

// Добавление номенклатуры в регистр сведений 
// 
Процедура  ДобавитьНоменклатуруВРегистрСведений(ОбъектМОП,КодТНВЭД)
	НаборЗаписей = РегистрыСведений.моп_ОбъектыМониторинга.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектМОП.ВидСравнения = ВидСравнения.Равно;
	НаборЗаписей.Отбор.ОбъектМОП.Значение = ОбъектМОП.Ссылка;
	НаборЗаписей.Отбор.ОбъектМОП.Использование = Истина;	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() <> 0 Тогда
		Если СокрЛП(КодТНВЭД) ="" Тогда
			Если Не ЗначениеЗаполнено(НаборЗаписей[0].ПинКод) Тогда 
				НаборЗаписей.Удалить(0);
				НаборЗаписей.Записать();
			Иначе
				НаборЗаписей[0].КодТНВЭД  = "";
				НаборЗаписей.Записать();
			КонецЕсли;
		Иначе	
			НаборЗаписей[0].КодТНВЭД  = НайтиКодТНВЭД(СокрЛП(КодТНВЭД));
			НаборЗаписей.Записать();
		КонецЕсли;
	Иначе
		Запись = НаборЗаписей.Добавить();
		Запись.ОбъектМОП = ОбъектМОП.Ссылка;
		Запись.КодТНВЭД  = НайтиКодТНВЭД(СокрЛП(КодТНВЭД));
		НаборЗаписей.Записать();
	КонецЕсли;
КонецПроцедуры

// Процедура при записи справочника
// 
Процедура моп_ПриЗаписиСправочникаПриЗаписи(Источник, Отказ) Экспорт
	Если Константы.моп_ЗаполнятьКодыТНВЭДИзНоменклатуры.Получить() Тогда
		Результат = ПроверитьСуществующиеЗаписи(Источник.Ссылка);
		Результат.Следующий();
		Если СокрЛП(Результат.КодТНВЭД) <> СокрЛП(Источник.КодТНВЭД) ТОгда
			ДобавитьНоменклатуруВРегистрСведений(Источник,Источник.КодТНВЭД);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТРУКТУРОЙ ОТЧЕТА

#Если Клиент Тогда
	
// Открывает форму расшифровки ячейки с пин-кодом товара
// или заполняет введенное текстовое значение пин-кода в текущей области
//
Процедура РасшифровкаПоляПинКод(Форма,Ячейка, ИмяЯчейки, ИмяЯчейкиПинКода, ИмяЛиста
	, ТаблицаРасшифровки, ТекущаяОбласть, ОсновнаяКонфигурация) Экспорт
	
	Если ОсновнаяКонфигурация = Перечисления.моп_Конфигурации.Нефтебаза Тогда
		
		ОбъектМОП = Неопределено;
		
		НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));
		СтруктураПоиска =  Новый Структура;
		СтруктураПоиска.Вставить("ИмяЯчейки",ИмяЯчейки);
		СтруктураПоиска.Вставить("НомерСтроки", НомерЯчейки );
		Строка = ТаблицаРасшифровки.НайтиСтроки(СтруктураПоиска);
		Если Строка.Количество() > 0 Тогда
			ОбъектМОП = Строка[0].ПолеПоиска;
		КонецЕсли;
		Если ТипЗнч(ОбъектМОП) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ФормаВыбора = Справочники.гсм_ПинКоды.ПолучитьФормуВыбора(, Форма);						
			ФормаВыбора.Отбор.Владелец.ВидСравнения = ВидСравнения.Равно;
			ФормаВыбора.Отбор.Владелец.Значение = ОбъектМОП;
			ФормаВыбора.Отбор.Владелец.Использование = Истина;	
			ИмяЯчейки = ИмяЯчейкиПинКода;
			ЗначениеВыбора = ФормаВыбора.ОткрытьМодально();
			
			Если ЗначениеВыбора <> Неопределено Тогда				
				СтруктураПоиска =  Новый Структура;
				СтруктураПоиска.Вставить("ИмяЯчейки",ИмяЯчейки);
				СтруктураПоиска.Вставить("НомерСтроки", НомерЯчейки );
				Строка = ТаблицаРасшифровки.НайтиСтроки(СтруктураПоиска);				
				Если Строка.Количество() <> 0 Тогда
					Строка[0].ПолеПоиска = ЗначениеВыбора;
				Иначе	
					НоваяСтрока = ТаблицаРасшифровки.Добавить();
					НоваяСтрока.Имягруппы   = ИмяЛиста;
					НоваяСтрока.ИмяЯчейки   = ИмяЯчейки;
					НоваяСтрока.ПолеПоиска  = ЗначениеВыбора;
					НоваяСтрока.НомерСтроки = НомерЯчейки;
				КонецЕсли;				
			КонецЕсли;
			Возврат;
		ИначеЕсли ЗначениеЗаполнено(ОбъектМОП) Тогда
			ФормаВыбора = РегистрыСведений.моп_ОбъектыМониторинга.ПолучитьФормуСписка(, Форма);
			ФормаВыбора.Отбор.ОбъектМОП.ВидСравнения = ВидСравнения.Равно;
			ФормаВыбора.Отбор.ОбъектМОП.Значение = ОбъектМОП;
			ФормаВыбора.Отбор.ОбъектМОП.Использование = Истина;	
			ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.ТекущаяКолонка = ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.ПинКод;			
			ЗначениеВыбора = ФормаВыбора.ОткрытьМодально();
			Если ЗначениеВыбора <> Неопределено Тогда
				Если  Строка.Количество() <> 0 Тогда
					Строка[0].ПолеПоиска = ЗначениеВыбора;
				Иначе	
					НоваяСтрока = ТаблицаРасшифровки.Добавить();
					НоваяСтрока.Имягруппы   = ИмяЛиста;
					НоваяСтрока.ИмяЯчейки   = ИмяЯчейки;
					НоваяСтрока.ПолеПоиска  = ЗначениеВыбора;
					НоваяСтрока.НомерСтроки = НомерЯчейки;
				КонецЕсли;				
			КонецЕсли;
			Возврат;
		Иначе
			ПинКод = ТекущаяОбласть.Значение;
			Если ВвестиСтроку(ПинКод, "Введите пин-код", 11) Тогда
				ТекущаяОбласть.Значение = ПинКод;	
				Форма.ОбновитьМногострочнуюСтруктуру(ИмяЛиста,Ячейка, ПинКод); 				
				Возврат;
			КонецЕсли;			
		КонецЕсли;
	Иначе
		НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));
		СтруктураПоиска =  Новый Структура;
		СтруктураПоиска.Вставить("ИмяЯчейки",ИмяЯчейки);
		СтруктураПоиска.Вставить("НомерСтроки", НомерЯчейки );
		Строка = ТаблицаРасшифровки.НайтиСтроки(СтруктураПоиска);
		Если Строка.Количество() > 0 Тогда
			ОбъектМОП = Строка[0].ПолеПоиска;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектМОП) Тогда 
			ФормаВыбора = РегистрыСведений.моп_ОбъектыМониторинга.ПолучитьФормуСписка(, Форма);
			ФормаВыбора.Отбор.ОбъектМОП.ВидСравнения = ВидСравнения.Равно;
			ФормаВыбора.Отбор.ОбъектМОП.Значение = ОбъектМОП;
			ФормаВыбора.Отбор.ОбъектМОП.Использование = Истина;	
			ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.ТекущаяКолонка = ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.ПинКод;						
			ЗначениеВыбора = ФормаВыбора.ОткрытьМодально();
			Если ЗначениеВыбора <> Неопределено Тогда
				Если Строка.Количество() <> 0 Тогда
					Строка[0].ПолеПоиска = ЗначениеВыбора;
				Иначе	
					НоваяСтрока = ТаблицаРасшифровки.Добавить();
					НоваяСтрока.Имягруппы   = ИмяЛиста;
					НоваяСтрока.ИмяЯчейки   = ИмяЯчейки;
					НоваяСтрока.ПолеПоиска  = ЗначениеВыбора;
					НоваяСтрока.НомерСтроки = НомерЯчейки;
				КонецЕсли;				
			КонецЕсли;
			Возврат;			
		Иначе
			ПинКод = ТекущаяОбласть.Значение;
			Если ВвестиСтроку(ПинКод, "Введите пин-код", 11) Тогда
				ТекущаяОбласть.Значение = ПинКод;
				Форма.ОбновитьМногострочнуюСтруктуру(ИмяЛиста,Ячейка, ПинКод); 				
				Возврат;				
			КонецЕсли;			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РасшифровкаПоляКодТНВЭД(Форма,Ячейка, ИмяЯчейки, ИмяЛиста, ТаблицаРасшифровки) Экспорт
	
	НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));
	СтруктураПоиска =  Новый Структура;
	СтруктураПоиска.Вставить("ИмяЯчейки",ИмяЯчейки);
	СтруктураПоиска.Вставить("НомерСтроки", НомерЯчейки );
	Строка = ТаблицаРасшифровки.НайтиСтроки(СтруктураПоиска);
	Если Строка.Количество() > 0 Тогда
		ОбъектМОП = Строка[0].ПолеПоиска;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектМОП) Тогда 
		КодТНВЭДДоОткрытия = Справочники.моп_КлассификаторКодовТНВЭД.ПустаяСсылка();
		КодТНВЭДПослеОткрытия = Справочники.моп_КлассификаторКодовТНВЭД.ПустаяСсылка();
		СтруктураОтбора = РегистрыСведений.моп_ОбъектыМониторинга.Выбрать(Новый Структура("ОбъектМОП", ОбъектМОП));			
		Если СтруктураОтбора.Следующий() = Истина Тогда		
			КодТНВЭДДоОткрытия = СтруктураОтбора.КодТНВЭД;	
		КонецЕсли;
		ФормаВыбора = РегистрыСведений.моп_ОбъектыМониторинга.ПолучитьФормуСписка(, Форма);
		ФормаВыбора.Отбор.ОбъектМОП.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.Отбор.ОбъектМОП.Значение = ОбъектМОП;
		ФормаВыбора.Отбор.ОбъектМОП.Использование = Истина;	
		ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.ТекущаяКолонка = ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.КодТНВЭД;						
		ФормаВыбора.ОткрытьМодально();
		СтруктураОтбора = РегистрыСведений.моп_ОбъектыМониторинга.Выбрать(Новый Структура("ОбъектМОП", ОбъектМОП));			
		Если СтруктураОтбора.Следующий() = Истина Тогда		
			КодТНВЭДПослеОткрытия = СтруктураОтбора.КодТНВЭД;	
		КонецЕсли;		
		Если КодТНВЭДПослеОткрытия <> КодТНВЭДДоОткрытия Тогда
			Возврат Истина;
		КонецЕсли;
	Иначе
		ФормаВыбора = ПолучитьФормуВыбораТовара(Форма);
		Если ФормаВыбора = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		ФормаВыбора.ПараметрВыборГруппИЭлементов =  ИспользованиеГруппИЭлементов.Элементы;
		Результат = ФормаВыбора.ОткрытьМодально();
		Если Результат <> Неопределено Тогда
			Если Строка.Количество() <> 0 Тогда
				Строка[0].ПолеПоиска = Результат;
			Иначе	
				НоваяСтрока = ТаблицаРасшифровки.Добавить();
				НоваяСтрока.Имягруппы   = ИмяЛиста;
				НоваяСтрока.ИмяЯчейки   = ИмяЯчейки;
				НоваяСтрока.ПолеПоиска  = Результат;
				НоваяСтрока.НомерСтроки = НомерЯчейки;
			КонецЕсли;	
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

Функция ОбновитьПинКод(НомерЯчейки, ИмяЯчейки, ТаблицаРасшифровки, ОбъектМОП)
	
	СтруктураПоиска =  Новый Структура;
	СтруктураПоиска.Вставить("ИмяЯчейки",ИмяЯчейки);
	СтруктураПоиска.Вставить("НомерСтроки", НомерЯчейки );
	Строка = ТаблицаРасшифровки.НайтиСтроки(СтруктураПоиска);
	Если Строка.Количество() > 0 Тогда
		Расшифровка = Строка[0].ПолеПоиска;
		Если ЗначениеЗаполнено(Расшифровка) и Расшифровка.Владелец <> ОбъектМОП Тогда
			ТаблицаРасшифровки.Удалить(Строка[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция РасшифровкаПоляТовар(Форма,Ячейка, ИмяЯчейки, ИмяЛиста, ТаблицаРасшифровки, ИмяЯчейкиПинКода = Неопределено, ОсновнаяКонфигурация = Неопределено) Экспорт
	
	НомерЯчейки = Число(Сред(Ячейка, Найти(Ячейка, "__")+ 2));
	СтруктураПоиска =  Новый Структура;
	СтруктураПоиска.Вставить("ИмяЯчейки",ИмяЯчейки);
	СтруктураПоиска.Вставить("НомерСтроки", НомерЯчейки );
	Строка = ТаблицаРасшифровки.НайтиСтроки(СтруктураПоиска);
	Если Строка.Количество() > 0 Тогда
		ОбъектМОП = Строка[0].ПолеПоиска;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектМОП) Тогда 
		ФормаВыбора = ПолучитьФормуВыбораТовара(Форма, ОбъектМОП);
		Если ФормаВыбора = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
		ФормаВыбора.НачальноеЗначениеВыбора = ОбъектМОП;
		Результат = ФормаВыбора.ОткрытьМодально();
		Если Результат <> Неопределено Тогда
			Строка[0].ПолеПоиска = Результат;
			Если ИмяЯчейкиПинКода <> Неопределено и ОсновнаяКонфигурация <> Неопределено и ОсновнаяКонфигурация = Перечисления.моп_Конфигурации.Нефтебаза Тогда
				ОбновитьПинКод(НомерЯчейки, ИмяЯчейкиПинКода, ТаблицаРасшифровки, Результат)		
			КонецЕсли;			
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ФормаВыбора = ПолучитьФормуВыбораТовара(Форма);
		Если ФормаВыбора = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		ФормаВыбора.ПараметрВыборГруппИЭлементов =  ИспользованиеГруппИЭлементов.Элементы;
		Результат = ФормаВыбора.ОткрытьМодально();
		Если Результат <> Неопределено Тогда
			Если Строка.Количество() <> 0 Тогда
				Строка[0].ПолеПоиска = Результат;
			Иначе	
				НоваяСтрока = ТаблицаРасшифровки.Добавить();
				НоваяСтрока.Имягруппы   = ИмяЛиста;
				НоваяСтрока.ИмяЯчейки   = ИмяЯчейки;
				НоваяСтрока.ПолеПоиска  = Результат;
				НоваяСтрока.НомерСтроки = НомерЯчейки;
			КонецЕсли;	
			Если ИмяЯчейкиПинКода <> Неопределено и ОсновнаяКонфигурация <> Неопределено и ОсновнаяКонфигурация = Перечисления.моп_Конфигурации.Нефтебаза Тогда
				ОбновитьПинКод(НомерЯчейки, ИмяЯчейкиПинКода, ТаблицаРасшифровки, Результат)		
			КонецЕсли;						
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

// Вставляет новую страницу
//
Процедура ВставитьНовуюСтраницу(ТекТабличноеПоле, СтруктураГруппы, НомИсходнойСтроки, НомНовойСтроки)
	 
	 // переопределяем имена вставленной области
	 
	 ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "__" + НомИсходнойСтроки;
	 ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки]; 
	 НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	 НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + 1;
	 СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	 
	 Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
		 
		 ИмяКолонки          = Колонка.Имя;
		 ИмяОбластиЯчейки    = ИмяКолонки + "__" + НомИсходнойСтроки;
		 ИмяНовОбластиЯчейки = ИмяКолонки + "__" + НомНовойСтроки;
		 
		 ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		 ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
		 
		 // определяем границы ячейки исходной области
		 НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		 НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		 НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		 НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
		 
		 // Назначаем имя ячейки исходной области,
		 // (т.к. в результате вставки новой области оно было очищено)
		 ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		 ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
		 
		 Если ОбластьЯчейки.СодержитЗначение Тогда
			 ОбластьЯчейки.Очистить();					
		 КонецЕсли; 		
	 КонецЦикла;
	 
 КонецПроцедуры // ВставитьНовуюСтраницу()

//Процедура  заполняет итоговые данные  табличного документа
//
//Параметры:
//  ТаблицаСтрокГруппы - Тип: ТаблицаЗначений, по данным которой
//                    вычисляются итоговые данные
//  ОбщиеЭлементыГруппы - Тип: ТаблицаЗначений, куда записываются итоговые данные
//                        в строки, где в колонке "Итог" значение строки равно Истина
//
Процедура ЗаполнитьДанныеИтоговВСтруктуре(ТаблицаСтрокГруппы, ОбщиеЭлементыГруппы) 
	
	Отбор = Новый Структура();
	Отбор.Вставить("Итог",Истина);
	СтрокиИтоговыхЯчеек = ОбщиеЭлементыГруппы.НайтиСтроки(Отбор);
	Для Каждого Строка Из СтрокиИтоговыхЯчеек Цикл
		ТекЗначение = Строка.ИмяОбласти;
		Если ТаблицаСтрокГруппы.Колонки.Найти(ТекЗначение) <> Неопределено Тогда
		    Строка.Значение = ТаблицаСтрокГруппы.Итог(ТекЗначение);
		КонецЕсли;                                		
	КонецЦикла;
	 
КонецПроцедуры //ЗаполнитьДанныеИтоговВСтруктуре()

//Процедура выводит в табличные документы области макета
//
//Параметры:
// ИмяГруппы       - Имя текущего табличного документа
// СтруктураГруппы - Тип: ТаблицаЗначений, содержит данные для текущего листа
// Страница        - Номер страницы
//
//Возврат
//   ТабличныйДокумент.
//
Функция ВывестиОбластиВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы, Страница, ВыводитьСтроки = Истина, ТекущееИмяФормы) 
	
	ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал;
	ТаблицаСтрокГруппы  = СтруктураГруппы.Строки;          
												  
	//вычисляем количество страниц
	КоличествоЗаписей = ТаблицаСтрокГруппы.Количество();
	
	мКоличествоНаЛисте = РегламентированнаяОтчетность.ПолучитьКоличествоНаЛисте(ТекущееИмяФормы,Форма.мСписокФормБезИерархии);
	 
	Стр =  Цел(КоличествоЗаписей/мКоличествоНаЛисте);
	Если Стр = КоличествоЗаписей/мКоличествоНаЛисте  Тогда
		Форма.ВсегоСтраниц = Стр;
	Иначе
		Форма.ВсегоСтраниц = Стр + 1;
	КонецЕсли;
	 
	Если Страница > Форма.ВсегоСтраниц И Форма.ВсегоСтраниц <> 0 Тогда
		Страница = Форма.ВсегоСтраниц;		 
	КонецЕсли;

	//заполняем области из макета в табличные документы	
	Поле = ТекущееИмяФормы + "ПолеТабличногоДокумента" + ИмяГруппы;
	ТекТабличноеПоле = Форма.ЭлементыФормы[Поле];
 	ТекТабличноеПоле.Очистить();     
	
	ОбластьШапка  = Неопределено;
	ОбластьИтог   = Неопределено;
	ОбластьСтрока = Неопределено;
	ОбластьПодвал = Неопределено;
		
	Макет = Форма.мМакет;
	
	Если Макет = Неопределено Тогда
			Макет = Форма.ЭтотОбъект.ПолучитьМакет("Макет" + Форма.мВыбраннаяФорма);
	КонецЕсли;
	
	Если Макет.Области.Найти("Шапка" + ТекущееИмяФормы + ИмяГруппы) <> Неопределено Тогда
		ОбластьШапка  = Макет.ПолучитьОбласть("Шапка"  + ТекущееИмяФормы + ИмяГруппы);	 
	КонецЕсли;
	Если Макет.Области.Найти("Итог" + ТекущееИмяФормы + ИмяГруппы) <> Неопределено Тогда
		ОбластьИтог   = Макет.ПолучитьОбласть("Итог"   + ТекущееИмяФормы + ИмяГруппы);	
	КонецЕсли;
	Если Макет.Области.Найти("Строка" + ТекущееИмяФормы + ИмяГруппы) <> Неопределено Тогда
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка" + ТекущееИмяФормы + ИмяГруппы);
	КонецЕсли;
	Если Макет.Области.Найти("Подвал" + ТекущееИмяФормы + ИмяГруппы) <> Неопределено Тогда
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал" + ТекущееИмяФормы + ИмяГруппы);
	КонецЕсли;
	
	Если ОбластьШапка <> Неопределено Тогда
		СписокПараметровШапки = Новый СписокЗначений;
		Для Каждого Область Из ОбластьШапка.Области Цикл			 
		   	Если Область.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
				СписокПараметровШапки.Добавить(Область.Параметр);
			КонецЕсли;
		КонецЦикла;
		Если Найти(СписокПараметровШапки,"Стр")<>0 Тогда
			ОбластьШапка.Параметры.Стр = Страница;
		КонецЕсли;
			 
		ТекТабличноеПоле.Вывести(ОбластьШапка);
	КонецЕсли;
	
	Если ОбластьИтог <> Неопределено Тогда
		 // итог выводиться только на первой странице
		Если Страница = 1 И ВыводитьСтроки Тогда		 
			ТекТабличноеПоле.Вывести(ОбластьИтог);
			ЗаполнитьДанныеИтоговВСтруктуре(ТаблицаСтрокГруппы, ОбщиеЭлементыГруппы);
		КонецЕсли;
	КонецЕсли;
	
	// Попробуем сначала получить номер первой строки из реквизита формы "НачПозДляНумерации"
	ЭлементНачПозДляНумерации = Форма.ЭлементыФормы.Найти("НачПозДляНумерации");
	НомерПервойЗаписи = Неопределено;
	Если ЭлементНачПозДляНумерации <> Неопределено Тогда
		НомерПервойЗаписи = ЭлементНачПозДляНумерации.Значение;
	КонецЕсли;
	
	Если ОбластьСтрока <> Неопределено Тогда
		Если ВыводитьСтроки Тогда		 		 
			//вставляем порядковый номер для строки			
			Для Каждого Область Из ОбластьСтрока.Области Цикл			 
				Если Область.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
					Если Область.Параметр = "НомерСтроки" Тогда
						Если НомерПервойЗаписи = Неопределено Тогда
							НачальноеЗначение = Область.ПараметрРасшифровки;	                	
							Если ЗначениеЗаполнено(НачальноеЗначение) Тогда
								НомерПервойЗаписи = Число(Прав(НачальноеЗначение,1));
							Иначе
								НомерПервойЗаписи = 2;
							КонецЕсли;
						КонецЕсли;
						ИмяКолонки = ТаблицаСтрокГруппы.Колонки[0].Имя; 
						НовыйПорядковыйНомер = КоличествоЗаписей + НомерПервойЗаписи - 1;
						ТаблицаСтрокГруппы[КоличествоЗаписей - 1][ИмяКолонки] = Формат(НовыйПорядковыйНомер,Форма.мФорматНомераСтроки);						
						Прервать;
					КонецЕсли;					
				КонецЕсли;
			КонецЦикла;   			 				
			
			ТекТабличноеПоле.Вывести(ОбластьСтрока);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбластьПодвал <> Неопределено Тогда
	
		ТекТабличноеПоле.Вывести(ОбластьПодвал);
		
	КонецЕсли;
	 
	// выводим сохраненные значения шапки, итога и подвала из ТЗ в поле табличного документа
	Для Каждого Элемент Из ОбщиеЭлементыГруппы Цикл
		Если ТекТабличноеПоле.Области.Найти(Элемент.ИмяОбласти) <> Неопределено И Элемент.Значение <> Неопределено Тогда 
			ТекОбласть = ТекТабличноеПоле.Области[Элемент.ИмяОбласти];
			Если ТекОбласть.СодержитЗначение Тогда
				ТекОбласть.Значение = Элемент.Значение;
			Иначе
				ТекОбласть.Текст = Элемент.Значение;
			КонецЕсли;
		КонецЕсли;                                                                  		 
	КонецЦикла;
	        	 
	Возврат ТекТабличноеПоле;
	 
КонецФункции // ВывестиОбластиВТабличныйДокумент()

 // Создает новую строку многострочной формы.
//
Процедура ДобавитьСтрокуМногострочнойФормы(Форма) Экспорт
	 
	 Перем СтруктураГруппы;
	 
	 ТекущееИмяФормы = Форма.ИмяФормы;
	 
	 СтраницыПанели = Форма.ЭлементыФормы["Панель" + ТекущееИмяФормы].Страницы;	
	 Для Каждого Страница Из СтраницыПанели Цикл
		 
		 ИмяГруппы = Страница.Имя;
		 мМногострочнаяСтруктура = РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ТекущееИмяФормы,Форма.мСписокФормБезИерархии);
		 мМногострочнаяСтруктура.Свойство(ИмяГруппы, СтруктураГруппы);
		 ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал;
		 ТаблицаСтрокГруппы  = СтруктураГруппы.Строки;
		 Строка = ТаблицаСтрокГруппы.Добавить();
				 
		 //если мы добавили первую строку и в шапке не содержится данных
		 // Заполним шапку и подвал текущего листа
		 	Форма.ЗаполнитьПараметры(ТекущееИмяФормы);
			 // перенесем итоговые данные в ТЗ
			 ЗаполнитьДанныеИтоговВСтруктуре(ТаблицаСтрокГруппы,ОбщиеЭлементыГруппы); 			 
		 //КонецЕсли;
		 
		 ВывестиРазделВТабличныйДокументФормы(Форма, Форма.ВсегоСтраниц, ИмяГруппы, СтруктураГруппы, ТекущееИмяФормы);
		 
	 КонецЦикла; 	
	 Форма.ТекущаяСтраница = Форма.ВсегоСтраниц;
	 РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(Форма);
	 Форма.Модифицированность = Истина;	
	 
КонецПроцедуры  //ВставитьСтроку()

// Процедура удаляет строку из многострочной части
//
Процедура УдалитьСтрокуМногострочнойФормы(Форма) Экспорт
	
	Перем СтруктураГруппы;
	
	ИмяФормы = Форма.ИмяФормы;
	мСписокФормБезИерархии = Форма.мСписокФормБезИерархии;
	ТекущаяПанель 	= Форма.ЭлементыФормы["Панель" + ИмяФормы];	
	ТекСтраница  	= ТекущаяПанель.ТекущаяСтраница;
	 	 	 
	мКоличествоНаЛисте = РегламентированнаяОтчетность.ПолучитьКоличествоНаЛисте(ИмяФормы, мСписокФормБезИерархии);  
	мМногострочнаяСтруктура =  РегламентированнаяОтчетность.ПолучитьМногострочнуюСтруктуру(ИмяФормы, мСписокФормБезИерархии);
	ТаблицаРасшифровки =  РегламентированнаяОтчетность.ПолучитьТаблицуРасшифровки(ИмяФормы, мСписокФормБезИерархии); 
	мМногострочнаяСтруктура.Свойство(ТекущаяПанель.Страницы[0].Имя, СтруктураГруппы);
	ТаблицаСтрокГруппы  = СтруктураГруппы.Строки;
	
	ЭлементНачПозДляНумерации = Форма.ЭлементыФормы.Найти("НачПозДляНумерации");
	НачПозДляНумерации = Неопределено;
	Если ЭлементНачПозДляНумерации <> Неопределено Тогда
		НачПозДляНумерации = ЭлементНачПозДляНумерации.Значение;
	КонецЕсли;
	
	Если мКоличествоНаЛисте > 1 Тогда
		ИмяПоля = ИмяФормы + "ПолеТабличногоДокумента" + ТекСтраница.Имя;
	 	ТекОбласть = Форма.ЭлементыФормы[ИмяПоля].ТекущаяОбласть;
		 
		Если Найти(ТекОбласть.Имя, "__") <> 0 Тогда
			 
			НомерСтроки = Сред(ТекОбласть.Имя, Найти(ТекОбласть.Имя, "__") + 2);
			Номер = Формат(Число(НомерСтроки),  Форма.мФорматНомераСтроки);
			
			Если НачПозДляНумерации <> Неопределено Тогда
				Номер = Формат(Число(НомерСтроки) + НачПозДляНумерации - 1,  Форма.мФорматНомераСтроки);
			Иначе		
				Номер = Формат(Число(НомерСтроки),  Форма.мФорматНомераСтроки);
			КонецЕсли;
			
			Строка = ТаблицаСтрокГруппы.Найти(Номер);
			Если Строка <> Неопределено Тогда
				ИндексСтроки = ТаблицаСтрокГруппы.Индекс(Строка) ; 
			Иначе
				Возврат;
			КонецЕсли;
			
			//перезаполним таблицу расшифровки
			РегламентированнаяОтчетность.ПерезаполнитьТаблицуРасшифровкиФормы(ТаблицаРасшифровки, НомерСтроки);
			 			
			Для Каждого Страница Из ТекущаяПанель.Страницы Цикл                 		 
				ИмяГруппы = Страница.Имя;
				мМногострочнаяСтруктура.Свойство(ИмяГруппы, СтруктураГруппы);
				ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал;
	 			ТаблицаСтрокГруппы  = СтруктураГруппы.Строки;
				СтрокаГруппы = ТаблицаСтрокГруппы.Получить(ИндексСтроки);
				ТаблицаСтрокГруппы.Удалить(СтрокаГруппы); 
				Если НачПозДляНумерации = Неопределено Тогда
					НомерСтроки = 1;
				Иначе
					НомерСтроки = НачПозДляНумерации;
				КонецЕсли;
				Если Страница = ТекущаяПанель.Страницы[0] Тогда
					Для Каждого Элемент Из ТаблицаСтрокГруппы Цикл
						Элемент[0] = Формат(НомерСтроки, Форма.мФорматНомераСтроки);
						НомерСтроки = НомерСтроки + 1;				  
					КонецЦикла;
				КонецЕсли;
				//если удалены все данные с листа
				//то продолжаем выполнение процедуры
				Если ТаблицаСтрокГруппы.Количество() = 0 Тогда
					 // очистим значения шапки (подвала) в Таблице значений
					 Для Каждого Элемент Из ОбщиеЭлементыГруппы Цикл
						 Элемент.Значение = Неопределено;						 
					 КонецЦикла;
					 Форма.ТекущаяСтраница = 0;
				 	 Форма.ВсегоСтраниц = 0;
				КонецЕсли; 			  
				 моп_Общий.ВывестиРазделВТабличныйДокументФормы(Форма, Форма.ТекущаяСтраница, ИмяГруппы, СтруктураГруппы, ИмяФормы);
			КонецЦикла; 	
		Иначе
			Сообщить("Удаление невозможно, не выбрана строка многострочной части формы!", СтатусСообщения.Важное);
		КонецЕсли;
		 
		Если Форма.ТекущаяСтраница > Форма.ВсегоСтраниц И Форма.ВсегоСтраниц <> 0 Тогда
		 	Форма.ТекущаяСтраница = Форма.ВсегоСтраниц;
	  	КонецЕсли;
	  
	Иначе // если на листе 1 страница, то удаляем страницу
		 
		НомерСтроки = Форма.ТекущаяСтраница -1;
		Если ТаблицаСтрокГруппы.Количество() < Форма.ТекущаяСтраница Тогда
			Возврат;
		КонецЕсли;
		
		Если ТаблицаСтрокГруппы.Количество() = 0 Тогда
		 	Возврат;
		КонецЕсли;
		
		Строка = ТаблицаСтрокГруппы[НомерСтроки];
		Если Строка <> Неопределено Тогда
			 ИндексСтроки = ТаблицаСтрокГруппы.Индекс(Строка) ; 
		Иначе
			 Возврат;
		КонецЕсли;
		 
		//перезаполним таблицу расшифровки
		 РегламентированнаяОтчетность.ПерезаполнитьТаблицуРасшифровкиФормы(ТаблицаРасшифровки, НомерСтроки + 1);
		 
		Для Каждого Страница Из ТекущаяПанель.Страницы Цикл                 		 
			 ИмяГруппы = Страница.Имя;
			 мМногострочнаяСтруктура.Свойство(ИмяГруппы, СтруктураГруппы);
			 ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал;
	 		 ТаблицаСтрокГруппы  = СтруктураГруппы.Строки;
 			
			 СтрокаГруппы = ТаблицаСтрокГруппы.Получить(ИндексСтроки);
			 ТаблицаСтрокГруппы.Удалить(СтрокаГруппы); 
				 
			 //если удалены все данные с листа
			 //то продолжаем выполнение процедуры
			 Если ТаблицаСтрокГруппы.Количество() = 0 Тогда
				  // очистим значения шапки (подвала) в Таблице значений
				  Для Каждого Элемент Из ОбщиеЭлементыГруппы Цикл
					 Элемент.Значение = Неопределено;						 
				  КонецЦикла;
				  Форма.ТекущаяСтраница = 0;
				  Форма.ВсегоСтраниц = 0;				  
			  КонецЕсли; 
			   моп_Общий.ВывестиРазделВТабличныйДокументФормы(Форма, Форма.ТекущаяСтраница, ИмяГруппы, СтруктураГруппы, ИмяФормы);
		 КонецЦикла;
	  
	КонецЕсли;
	      	 	
	 РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(Форма);
	Форма.Модифицированность = Истина;   

КонецПроцедуры // УдалитьСтрокуМногострочнойФормы()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
Процедура ВывестиРазделВТабличныйДокументФормы(Форма, Страница, ИмяГруппы, СтруктураГруппы, ТекИмяФормы) Экспорт     
	                                                                                                 
	 ОбщиеЭлементыГруппы = СтруктураГруппы.ШапкаИПодвал;
	 ТаблицаСтрокГруппы  = СтруктураГруппы.Строки;
	 
	 мКоличествоНаЛисте = РегламентированнаяОтчетность.ПолучитьКоличествоНаЛисте(ТекИмяФормы,Форма.мСписокФормБезИерархии);
		
	 ТекущееКоличество = ТаблицаСтрокГруппы.Количество();                                        
	 Если ТекущееКоличество = 0 Тогда
		  Поле = ТекИмяФормы + "ПолеТабличногоДокумента" + ИмяГруппы;
	 	  ТекТабличноеПоле = Форма.ЭлементыФормы[Поле];
 	 	  ТекТабличноеПоле.Очистить();
		  Возврат;		
	 КонецЕсли;
	 
	 ТекТабличноеПоле = ВывестиОбластиВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы,Страница,,ТекИмяФормы);
	 
	 НомерСтроки       = 1;
	 
	 Если Форма.ВсегоСтраниц = 1  Тогда	//если всего одна страница	
		 ТекущееКоличествоСтрокГруппы = ТаблицаСтрокГруппы.Количество();
		 ИсходноеКоличествоСтрокГруппы = 1;
	 ИначеЕсли Страница = 1 Тогда     //если первая страница из множества
		 ТекущееКоличествоСтрокГруппы = мКоличествоНаЛисте;
		 ИсходноеКоличествоСтрокГруппы = 1;
	 Иначе //все другие страницы, кроме первой			
		 ИсходноеКоличествоСтрокГруппы = Цел((Страница) * мКоличествоНаЛисте) - мКоличествоНаЛисте;
		 КоличествоНаЛисте = Страница * мКоличествоНаЛисте;
		 Если КоличествоНаЛисте < ТекущееКоличество Тогда
			 ТекущееКоличествоСтрокГруппы = КоличествоНаЛисте;
		 Иначе
			 ТекущееКоличествоСтрокГруппы = ТекущееКоличество;
		 КонецЕсли;
	 КонецЕсли;	
	 
	 //если всего строк = 1 на странице, то вставлять новые области не надо
	 //нужно только переименовать их соответственно со страницей
	 Если мКоличествоНаЛисте = 1 Тогда
		 НомНовойСтроки = Страница;
		 // переопределяем имена вставленной области
		 Для Каждого Колонка Из ТаблицаСтрокГруппы.Колонки Цикл
			 
			 ИмяКолонки          = Колонка.Имя;
			 ИмяОбластиЯчейки    = ИмяКолонки + "__" + 1;
			 ИмяНовОбластиЯчейки = ИмяКолонки + "__" + НомНовойСтроки;
			 
			 ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			 ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			 
			 // очищаем значения ячеек вставленной области
			 Если ОбластьЯчейки.СодержитЗначение Тогда
				 ОбластьЯчейки.Очистить();
			 КонецЕсли;
		 КонецЦикла; 
	 Иначе
		 // Выводим данные, относящиеся к данной странице		
		 Для  НомСтроки = ИсходноеКоличествоСтрокГруппы + 1  По ТекущееКоличествоСтрокГруппы  Цикл
			 
			 НомИсходнойСтроки = НомСтроки - 1;
			 НомНовойСтроки    = НомСтроки;
			 
			 // определяем имя первой ячейки последней из исходных строк
			 ИмяПервойЯчейкиПоследнейСтроки = ТаблицаСтрокГруппы.Колонки[0].Имя + "__" + НомИсходнойСтроки;
			 
			 // область первой ячейки последней из исходных строк
			 Если ТекТабличноеПоле.Области.Найти(ИмяПервойЯчейкиПоследнейСтроки) = Неопределено Тогда
				 ВставитьНовуюСтраницу(ТекТабличноеПоле,ТаблицаСтрокГруппы,1, НомНовойСтроки);
			 Иначе
				 
				 ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
				 // номера строк исходной области
				 НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				 НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + 1;
				 
				 СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
				 
				 // Строки многострочного раздела должны входят в именованную секцию
				 // для предотвращения вывода на печать пустых строк.
				 // Определим именованную секцию, куда входит добавляемая строка.
				 ИмяПервойЯчейкиПервойСтроки = ТаблицаСтрокГруппы.Колонки[0].Имя + "__" + 1;
				 // область первой ячейки первой строки многострочного раздела
				 ОбластьЯчейки               = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПервойСтроки];
				 // номер первой строки именованной секции
				 НомерВерхЯчейкиСекции       = ОбластьЯчейки.Верх;
				 // область именованной секции
				 ОбластьИменованСекции       = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиОбласти, );
				 ИмяСекции                   = ОбластьИменованСекции.Имя;
				 // предварительно очищаем прежнюю секцию, так как она смещается вниз вместе с добавляемой строкой
				 ОбластьИменованСекции.Имя   = "";
				 
				 // номера строк вставляемой области
				 НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
				 НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
				 
				 // определяем вставляемую область
				 ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
				 //ВставляемаяОбласть.Защита = Защита;
				 // добавляем в таблицу новую строку
				 ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть, ,ТипСмещенияТабличногоДокумента.ПоВертикали);
				 // переопределяем имена вставленной области
				 Для Каждого Колонка Из ТаблицаСтрокГруппы.Колонки Цикл
					 
					 ИмяКолонки          = Колонка.Имя;
					 ИмяОбластиЯчейки    = ИмяКолонки + "__" + НомИсходнойСтроки;
					 ИмяНовОбластиЯчейки = ИмяКолонки + "__" + НомНовойСтроки;
					                                      
					 ОбластьЯчейки     = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
					 ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
					 
					 // определяем границы ячейки исходной области
					 НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
					 НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
					 НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
					 НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
					 
					 // Назначаем имя ячейки исходной области,
					 // (т.к. в результате вставки новой области оно было очищено)
					 ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
					 ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
					 
					 // очищаем значения ячеек вставленной области
					 Если ОбластьЯчейки.СодержитЗначение Тогда
						 ОбластьЯчейки.Очистить();
					 КонецЕсли;
				 КонецЦикла;
				 
				 НомерСтроки = НомерСтроки + 1;
			 КонецЕсли;
			 
		 КонецЦикла;
	 КонецЕсли;
	 
	 ИндексПоследнейСтрокиНаСтранице = Страница * мКоличествоНаЛисте - 1;
	 ИндексПервойСтрокиНаСтранице = ИндексПоследнейСтрокиНаСтранице - мКоличествоНаЛисте + 1;
	 
	 Если ИндексПоследнейСтрокиНаСтранице > ТаблицаСтрокГруппы.Количество() - 1 Тогда
		   ИндексПоследнейСтрокиНаСтранице = ТаблицаСтрокГруппы.Количество() - 1;
	 КонецЕсли;
	 Для ИндексТекущейСтроки = ИндексПервойСтрокиНаСтранице По ИндексПоследнейСтрокиНаСтранице Цикл
		 СтрокаТаблицы = ТаблицаСтрокГруппы[ИндексТекущейСтроки];
		 Для Каждого КолонкаТаблицы Из ТаблицаСтрокГруппы.Колонки Цикл
			 
			 НомерСтрокиВТаблице      = ТаблицаСтрокГруппы.Индекс(СтрокаТаблицы);
			 НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1 ;
			 ИмяЯчейки                = КолонкаТаблицы.Имя + "__" + НомерСтрокиВФормеТаблицы;
			 Если  ТекТабличноеПоле.Области.Найти(ИмяЯчейки) <> Неопределено Тогда
				 ОбластьЯчейкиТаблицы = ТекТабличноеПоле.Области[ИмяЯчейки];
			 Иначе
				 Продолжить;
			 КонецЕсли;
			 
			 ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];
			 
			 Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				 // задаем значение ячейки
				 ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
			 Иначе
				 // задаем текст для ячейки
				 ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
			 КонецЕсли;
			 
			 ОбластьЯчейкиТаблицы.Защита = Истина;
			
		 КонецЦикла;
	 КонецЦикла;
	 
 КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

 //Процедура инициализирует текущую страницу
//Параметры:
//     Порядок - управляет порядком обхода страница
//     может принимать значения "+1" - вверх по страницам
//                              "-1" - вниз по страницам
//
Процедура ВывестиСтраницуМногострочнойФормы(Форма) Экспорт
	
	Если Форма.ПризнакМногострочности Тогда
			
		ПередатьДанныеИзСтруктурыВТабличноеПоле(Форма);
		РегламентированнаяОтчетность.ПоказатьСтраницыМногострочнойФормы(Форма); 
		
	КонецЕсли;
	                      		
КонецПроцедуры   //ВывестиСтраницуМногострочнойФормы()

// Процедура обеспечивает передачу данных из структуры хранения данных
// в поле табличного документа для форм
//
Процедура ПередатьДанныеИзСтруктурыВТабличноеПоле(Форма)  Экспорт 
	                                                       
    Перем СтруктураГруппы;
	
	НайденнаяСтрока = Форма.мСписокФормБезИерархии.Строки.Найти(Форма.ИмяФормы,"КодФормы");
	ТаблицаДанных = НайденнаяСтрока.Значение;
	
	Если НайденнаяСтрока.Многострочность = 1 Тогда
		
		мМногострочнаяСтруктура = ТаблицаДанных[0].Данные;		
		Для Каждого Страница Из Форма.ЭлементыФормы["Панель" + Форма.ИмяФормы].Страницы Цикл  		 
	 		ИмяГруппы = Страница.Имя;
			мМногострочнаяСтруктура.Свойство(ИмяГруппы, СтруктураГруппы);
            //уже выводим записанные значения в табличный документ
			
	 		ВывестиРазделВТабличныйДокументФормы(Форма, Форма.ТекущаяСтраница, ИмяГруппы, СтруктураГруппы, Форма.ИмяФормы);
	 	КонецЦикла; 
		  		
	Иначе
		
		Для Каждого Страница Из Форма.ЭлементыФормы["Панель" + Форма.ИмяФормы].Страницы Цикл
			ТекПоле = Форма.ЭлементыФормы[Форма.ИмяФормы + "ПолеТабличногоДокумента" + Страница.Имя];
		
			Для Каждого Строка Из ТаблицаДанных Цикл
				ТекОбласть = ТекПоле.Области.Найти(Строка.ИмяОбласти);
				Если ТекОбласть <> Неопределено Тогда 
					Если ТекОбласть.СодержитЗначение Тогда
						ТекОбласть.Значение = Строка.Значение;
					Иначе
						ТекОбласть.Текст = Строка.Значение;
					КонецЕсли;
				КонецЕсли;									      
			КонецЦикла;
		КонецЦикла;   
	КонецЕсли;
	
	Форма.ИзменитьОтображениеДанныхФормы();
	
КонецПроцедуры
	
// Вызывает диалог выбора файла для выбора файла данных
 //
 Функция моп_ВыборФайла(ИмяФайла, Знач Расширение = Неопределено) Экспорт
	 
	 Расширение = ?(Расширение = Неопределено, "xml", Расширение);
	 
	 ВыбранноеИмяФайла = "";
	 Режим                 = РежимДиалогаВыбораФайла.Сохранение;
	 Диалог                = Новый ДиалогВыбораФайла(Режим);
	 Диалог.Заголовок      = "Выберите файл";
	 Диалог.Фильтр         = "*." + Расширение + "|*." + Расширение + "|Все файлы(*.*)|*.*";
	 Диалог.ПолноеИмяФайла = ИмяФайла;
	 Диалог.Расширение     = Расширение;
	 
	 Если Диалог.Выбрать() Тогда
		 ВыбранноеИмяФайла = Диалог.ПолноеИмяФайла;
	 КонецЕсли;	
	 
	 Возврат ВыбранноеИмяФайла;
	 
 КонецФункции
 
 Функция ПолучитьФормуВыбораТовара(Владелец = Неопределено, ОбъектМОП = Неопределено)
	 
	 Если ЗначениеЗаполнено(ОбъектМОП) Тогда
		 Тип = ТипЗнч(ОбъектМОП);
	 Иначе
		 
		 СписокТипов = Новый СписокЗначений;
		 СписокТипов.Добавить(Тип("СправочникСсылка.Номенклатура"), "Номенклатура");
		 СписокТипов.Добавить(Тип("СправочникСсылка.ОсновныеСредства"), "Основные средства");
		 СписокТипов.Добавить(Тип("СправочникСсылка.НематериальныеАктивы"), "Нематериальные активы");
		 
		 ВыбранныйЭлемент = СписокТипов.ВыбратьЭлемент("Выбор справочника товаров", СписокТипов[0]); 
		 Если ВыбранныйЭлемент = Неопределено Тогда
			 Возврат Неопределено;
		 Иначе
			 Тип = ВыбранныйЭлемент.Значение;
		 КонецЕсли;
		 
	 КонецЕсли;
	 
	 Если Тип = Тип("СправочникСсылка.Номенклатура") Тогда
		 Если Владелец = Неопределено Тогда
			 Возврат Справочники.Номенклатура.ПолучитьФормуВыбора(, Владелец);
		 Иначе
			 Возврат Справочники.Номенклатура.ПолучитьФормуВыбора();
		 КонецЕсли;
	 ИначеЕсли Тип = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		 Если Владелец = Неопределено Тогда
			 Возврат Справочники.ОсновныеСредства.ПолучитьФормуВыбора(, Владелец);
		 Иначе
			 Возврат Справочники.ОсновныеСредства.ПолучитьФормуВыбора();
		 КонецЕсли;
	 Иначе
		 Если Владелец = Неопределено Тогда
			 Возврат Справочники.НематериальныеАктивы.ПолучитьФормуВыбора(, Владелец);
		 Иначе
			 Возврат Справочники.НематериальныеАктивы.ПолучитьФормуВыбора();
		 КонецЕсли;
		 
	 КонецЕсли;
	 
	 Возврат Неопределено;
	 
 КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДВИЖЕНИЯМИ ДОКУМЕНТОВ

// Открывает ОсновнуюФорму ручной корректировки
//
Процедура РучнаяКорректировкаОсновнаяФорма(ЭтоНовый,Ссылка,РазрешитьРедактированиеДвижений = Ложь)  Экспорт
	
	Если НЕ ЭтоНовый Тогда
		ФормаНастройки = Обработки.моп_КорректировкаДвижений.ПолучитьФорму("ОсновнаяФормаСписок", , Строка(Ссылка));
		ФормаНастройки.ДокументСсылка = Ссылка;
		ФормаНастройки.РазрешитьРедактированиеДвижений = РазрешитьРедактированиеДвижений;
		ФормаНастройки.Открыть();
	КонецЕсли;
 	
КонецПроцедуры // РучнаяКорректировкаОсновнаяФорма()

// Открывает ОсновнуюФорму ручной корректировки после записи
//
Процедура РучнаяКорректировкаОсновнаяФормаПослеЗаписи(Проведен,ОткрыватьНастройкуДвижений,Ссылка)  Экспорт
	
	Если Проведен И ОткрыватьНастройкуДвижений Тогда
		ФормаНастройки = Обработки.моп_КорректировкаДвижений.ПолучитьФорму("ОсновнаяФормаСписок", , Строка(Ссылка));
		ФормаНастройки.ДокументСсылка = Ссылка;
		ФормаНастройки.РазрешитьРедактированиеДвижений = Ложь;
		ФормаНастройки.Открыть();
	КонецЕсли;
 	
КонецПроцедуры // РучнаяКорректировкаОсновнаяФормаПослеЗаписи()

#КонецЕсли

// Возвращает значение настройки "ИспользоватьДанныеИзДополнительныхСчетовФактур" из
// регистра сведений "моп_ПравилаЗаполненияФорм" на дату
//
Функция ИспользоватьДанныеИзДополнительныхСчетовФактур(Дата) Экспорт
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	моп_ПравилаЗаполненияФормСрезПоследних.Значение
	 |ИЗ
	 |	РегистрСведений.моп_ПравилаЗаполненияФорм.СрезПоследних(&Дата, Правило = ЗНАЧЕНИЕ(Перечисление.моп_ПравилаЗаполненияФорм.ИспользоватьДанныеИзДополнительныхСчетовФактур)) КАК моп_ПравилаЗаполненияФормСрезПоследних";
	 Запрос.УстановитьПараметр("Дата", Дата);
	 Выборка = Запрос.Выполнить().Выбрать();
	 Если Выборка.Следующий() Тогда
		 Возврат Выборка.Значение.Получить();
	 КонецЕсли;
	 Возврат Неопределено;
	 
 КонецФункции
 