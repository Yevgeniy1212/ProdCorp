// Функция возвращает цену компании для требуемой номенклатуры в указанном типе цен , 
// на заданную дату, за заданную единицу измерения, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры: 
//  Номенклатура         - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ТипЦен               - ссылка на элемент справочника "Типы цен", опредедяет цену какого типа надо получить,
//  Дата                 - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата
//  ЕдиницаИзмерения     - ссылка на элемент справочника "Единицы измерения", определяет для какой единицы надо получить 
//                         цену, если не заполнен, то заполняется единицей цены
//  Валюта               - ссылка на элемент справочника "Валюты", определяет валюту. в которой надо вернуть цену,
//                         если не заполнен, то заполняется валютой цены
//  Курс                 - число, курс требуемой валюты, если не заполнен, берется курс из регистра 
//                         сведений "Курсы валют",
//  Кратность            - число, кратность требуемой валюты, если не заполнена, берется курс из регистра 
//                         сведений "Курсы валют",
//
// Возвращаемое значение:
//  Число, рассчитанное значение цены.
//
Функция ПолучитьЦенуНоменклатуры(Номенклатура, ТипЦен, Дата, 
								 Валюта = Неопределено, Курс = 0, Кратность = 1, Организация) Экспорт

	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат 0;
	КонецЕсли;
								 
	ПолученнаяЦена = 0;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",         Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТипЦен",       ТипЦен);
	Запрос.УстановитьПараметр("Организация",  Организация);
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатуры.Цена,
	|	ЦеныНоменклатуры.Валюта
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура И ТипЦен = &ТипЦен И Организация = &Организация) КАК ЦеныНоменклатуры";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПолученнаяЦена = Выборка.Цена;
		ВалютаЦены     = Выборка.Валюта;
	КонецЕсли;

	Если НЕ (ВалютаЦены = Валюта) И НЕ (Валюта = Неопределено) И НЕ (ВалютаЦены = Неопределено) Тогда

		СтруктураКурсаЦены = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаЦены, Дата);
		ПолученнаяЦена     = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(ПолученнаяЦена, ВалютаЦены, Валюта, 
													   СтруктураКурсаЦены.Курс, СтруктураКурсаЦены.Кратность,
													   Курс, Кратность);

	ИначеЕсли Валюта = Неопределено Тогда
		Валюта = ВалютаЦены;
	КонецЕсли;

	Возврат ПолученнаяЦена;

КонецФункции // ПолучитьЦенуНоменклатуры()

// Пересчитывает цену в другую валюту
//
//  Цена            - число, значение цены, которое надо пересчитать,
//  ВалютаЦены      - ссылка на справочник "Валюты", определяет валюту, в которой назначена Цена
//  НоваяВалюта     - ссылка на справочник "Валюты", определяет валюту, в которой надо получить
//                    новое значение цены. Если не заполнено, то устанавливается равной ВалютаЦены без пересчета,
//  КурсНовойВалюты - курс новой валюты, по которому надо пересчитать цену, если не задан, то берем курс по справочнику
//  КратностьНовойВалюты - кратность новой валюты, по которой надо пересчитать цену, если не задана, то берем курс по справочнику
//  Дата            - дата, на которую надо пересчитать цену.
//
// Возвращаемое значение:
//  Новое значение цены.
//
Функция ПересчитатьЦенуПриИзмененииВалюты(	Цена, ВалютаЦены, НоваяВалюта, КурсНовойВалюты = 0, 
											КратностьНовойВалюты = 1, Дата = Неопределено ) Экспорт

	НовоеЗначениеЦены = Цена;

	Если НЕ ЗначениеЗаполнено(НоваяВалюта) Тогда // параметр валюты не задан, значить надо возвращать в валюте цены
		НоваяВалюта = ВалютаЦены;
	Иначе

		Если НоваяВалюта <> ВалютаЦены Тогда // если валюта цены не совпадает с параметром, то надо пересчитать

			Если НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда // если не задана валюта цены, то будем счатать цену нулевой
				НовоеЗначениеЦены = 0;
			Иначе // валюты заданы и не совпадают, надо пересчитывать

				СтруктураКурсЦены = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаЦены, Дата);
				КурсЦены          = СтруктураКурсЦены.Курс;
				КратностьЦены     = СтруктураКурсЦены.Кратность;

				Если НЕ ЗначениеЗаполнено(КурсНовойВалюты) Тогда 
					// если не задан курс, то курс берем по справочнику
					СтруктураКурсНовойВалюты = ОбщегоНазначения.ПолучитьКурсВалюты(НоваяВалюта, Дата);
					КурсНовойВалюты          = СтруктураКурсНовойВалюты.Курс;
					КратностьНовойВалюты     = СтруктураКурсНовойВалюты.Кратность;
				КонецЕсли; 

				НовоеЗначениеЦены = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(НовоеЗначениеЦены, ВалютаЦены, НоваяВалюта, 
												КурсЦены, КурсНовойВалюты,КратностьЦены,КратностьНовойВалюты);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат НовоеЗначениеЦены;

КонецФункции // ПересчитатьЦенуПриИзмененииВалюты()

// Формирует запрос, возвращающий цены для заданных позиций номенклатуры.
// Используется для получения цен по ТЧ редактирумого документа для последующего пересчета ТЧ
//
// Параметры: 
//  СтруктураЗначений   - структура, соответствующая возвращаемой формой "Цены и валюта" (значения реквизитов 
//						  документа до и после их изменеия в общей форме),
//  СпособЗаполненияЦен - значение перечисления "Способы заполнения цен", определяет по какому из регистров
//						  ("Цены компании" или "Цены контрагентов") будет строиться запрос.
//  МассивНоменклатуры - массив, содержащий ссылки на элементы номенклатуры, по которым надо узнать цены.
//  ДатаДокумента	   - дата, на которую надо узнать цены 
//  Контрагент		   - ссылка на справочник контрагентов, определяет для какого когнтрагента надо узнать цены.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоЦенам(	СтруктураЗначений, СпособЗаполненияЦен, МассивНоменклатуры, 
									ДатаДокумента, Контрагент, Организация) Экспорт

	// Дастанем нужные цены запросом
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры",	МассивНоменклатуры);
	Запрос.УстановитьПараметр("Дата",				КонецДня(ДатаДокумента));
	Запрос.УстановитьПараметр("ТипЦен",				СтруктураЗначений.НовыйТипЦен);
	Запрос.УстановитьПараметр("Организация",		Организация);
	
	// - КУФИБ - начало
	Если СпособЗаполненияЦен=Перечисления.СпособыЗаполненияЦен.ПоПлановымЦенамПоставщиков Тогда
		Запрос.УстановитьПараметр("Поставщик",		Контрагент);
		Запрос.УстановитьПараметр("Сценарий",		ОбщегоНазначения.ПолучитьЗначениеПеременной("ОсновнойСценарийПланированияЗакупок"));
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЕСТЬNULL(ПереченьЦенПоставщиковСрезПоследних.Номенклатура, ПрогнозныеЦеныНоменклатурыСрезПоследних.Номенклатура) КАК Номенклатура,
		               |	ЕСТЬNULL(ПереченьЦенПоставщиковСрезПоследних.ТипЦен, ПрогнозныеЦеныНоменклатурыСрезПоследних.ТипЦен) КАК ТипЦен,
		               |	ЕСТЬNULL(ПереченьЦенПоставщиковСрезПоследних.Валюта, ПрогнозныеЦеныНоменклатурыСрезПоследних.Валюта) КАК Валюта,
		               |	ЕСТЬNULL(ПереченьЦенПоставщиковСрезПоследних.Цена, ПрогнозныеЦеныНоменклатурыСрезПоследних.Цена) КАК Цена
		               |ПОМЕСТИТЬ ВТ_Цены
		               |ИЗ
		               |	РегистрСведений.узп_ПереченьЦенПоставщиков.СрезПоследних(
		               |			&Дата,
		               |			Номенклатура В (&МассивНоменклатуры)
		               |				И ТипЦен = &ТипЦен
		               |				И Поставщик = &Поставщик) КАК ПереченьЦенПоставщиковСрезПоследних
		               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.фин_ПрогнозныеЦеныНоменклатуры.СрезПоследних(
		               |				&Дата,
		               |				Номенклатура В (&МассивНоменклатуры)
		               |					И ТипЦен = &ТипЦен
		               |					И Сценарий = &Сценарий) КАК ПрогнозныеЦеныНоменклатурыСрезПоследних
		               |		ПО ПереченьЦенПоставщиковСрезПоследних.Номенклатура = ПрогнозныеЦеныНоменклатурыСрезПоследних.Номенклатура
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		               |	ЦеныНоменклатурыСрезПоследних.ТипЦен КАК ТипЦен,
		               |	ЦеныНоменклатурыСрезПоследних.Валюта КАК ВалютаЦены,
		               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		               |	КурсыВалютСрезПоследних.Курс КАК КурсВалютыЦены,
		               |	КурсыВалютСрезПоследних.Кратность КАК КратностьВалютыЦены,
		               |	ЦеныНоменклатурыСрезПоследних.ТипЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		               |	ЦеныНоменклатурыСрезПоследних.ТипЦен.ПорядокОкругления КАК ПорядокОкругления,
		               |	ЦеныНоменклатурыСрезПоследних.ТипЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону
		               |ИЗ
		               |	ВТ_Цены КАК ЦеныНоменклатурыСрезПоследних
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
		               |		ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта";
	Иначе
    // - КУФИБ - конец
	Запрос.Текст = "ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен       КАК ТипЦен,
	|	ЦеныНоменклатурыСрезПоследних.Валюта       КАК ВалютаЦены,
	|	ЦеныНоменклатурыСрезПоследних.Цена         КАК Цена,
	|	КурсыВалютСрезПоследних.Курс               КАК КурсВалютыЦены,
	|	КурсыВалютСрезПоследних.Кратность          КАК КратностьВалютыЦены,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ЦенаВключаетНДС          КАК ЦенаВключаетНДС,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ПорядокОкругления        КАК ПорядокОкругления,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры) И ТипЦен = &ТипЦен И Организация = &Организация) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
	|		ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта";
	// - КУФИБ - начало
	КонецЕсли;
    // - КУФИБ - конец
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоЦенам()

// Позволяет получить список реквизитов документа, необходимых для дальнейшей
// передачи в обработку заполнения цен и валют.
//
// Параметры: 
//  ДокументОбъект      - объект документа, для реквизитов будет производится заполнение
//  СтруктураИсключений - структура, в которую передаются те исключения, которые или невозможно
//                        определить по метаданным, или, несмотря ни на что, нельзя включать в
//                        возвращаемую структуру.
//                        В структуре - ключ = имя реквизита, значение = истина (необходимо добавить
//                        в структуру) или ложь (нельзя добавлять в структуру)
//
// Возвращаемое значене:
//  Сформированная структура реквизитов документа.
//
Функция ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ДокументОбъект, СтруктураИсключений = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Зададим, какие реквизиты вообще нам могут быть нужны.
	СтруктураВозможныхВариантовРеквизитов = Новый Структура;
	СтруктураВозможныхВариантовРеквизитов.Вставить("ТипЦен");
	СтруктураВозможныхВариантовРеквизитов.Вставить("ВалютаДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КурсДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КратностьДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КурсВзаиморасчетов");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КратностьВзаиморасчетов");
	СтруктураВозможныхВариантовРеквизитов.Вставить("УчитыватьНДС");
	СтруктураВозможныхВариантовРеквизитов.Вставить("СуммаВключаетНДС");
	СтруктураВозможныхВариантовРеквизитов.Вставить("УчитыватьАкциз");
	СтруктураВозможныхВариантовРеквизитов.Вставить("СуммаВключаетАкциз");
	СтруктураВозможныхВариантовРеквизитов.Вставить("ИспользоватьПлановуюСебестоимость");
	СтруктураВозможныхВариантовРеквизитов.Вставить("РегистрироватьЦеныПоставщика");
	СтруктураВозможныхВариантовРеквизитов.Вставить("УсловиеПродаж");
	
	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Новый Структура();
	Для Каждого ТекущийЭлементСтруктуры Из СтруктураВозможныхВариантовРеквизитов Цикл
		НужныйРеквизитДокумента = ТекущийЭлементСтруктуры.Ключ;
		Если ОбщегоНазначения.ЕстьРеквизитДокумента(НужныйРеквизитДокумента, МетаданныеДокумента) Тогда
			СтруктураРеквизитовДокумента.Вставить(НужныйРеквизитДокумента);
		КонецЕсли;
	КонецЦикла;

	// Теперь проверим исключения
	Если СтруктураИсключений<>Неопределено Тогда
		Для Каждого ТекущийЭлементСтруктуры Из СтруктураИсключений Цикл
			Если ТекущийЭлементСтруктуры.Значение Тогда
				// надо добавить реквизит, если его еще нет
				СтруктураРеквизитовДокумента.Вставить(ТекущийЭлементСтруктуры.Ключ);
			Иначе
				// надо удалить реквизит, если он есть
				СтруктураРеквизитовДокумента.Удалить(ТекущийЭлементСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СтруктураРеквизитовДокумента;

КонецФункции // ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования()

// Рассчитываем сумму НДС документа
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//
// Возвращаемое значение:
//  НДС документа
//
Функция ПолучитьНДСДокумента(ДокументОбъект, ИмяТабличнойЧасти = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаНДС = 0;

	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаНДС = СуммаНДС + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
				СуммаНДС = СуммаНДС + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СуммаНДС;

КонецФункции // ПолучитьНДСДокумента()

// Выполняем пересчет документа после изменений в форме "Цены и валюта".
//
// Параметры: 
//  ДокументОбъект                 - документ; 
//  СпособЗаполненияЦен            - ссылка на перечисление СпособыЗаполненияЦен, определяет способ расчета,
//                                  "при продаже" или "при покупке".
//  СтруктураРеквизитовДокумента   - структура, задает список обрабатываемых реквизитов документа,
//                                   если реквизит надо обрабатывать, то для него есть ключ в этой структуре.
//  ИмяТабличнойЧасти              - строка, имя табличной части, которую надо пересчитать.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СкидкаУстановлена              - переменная мСкидкаУстановлена модуля формы документа.
//  СтруктураЗначений              - структура, соответствующая возвращаемой формой "Цены и валюта" (значения реквизитов 
//                                   документа до и после их изменеия в общей форме).
//  Автозаполнение                 - признак автозаполнения
//
Процедура ОбработатьИзмененияПоКнопкеЦеныВалюта( ДокументОбъект, СпособЗаполненияЦен,
	                                             СтруктураРеквизитовДокумента,
	                                             ИмяТабличнойЧасти, ВалютаРегламентированногоУчета,
	                                             СкидкаУстановлена, СтруктураЗначений, Автозаполнение) Экспорт
                                                                 
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Заполним нужные реквизиты документа
	УстановитьРеквизитыДокументаПоЗначениямФормыЦеныВалюта(	СтруктураЗначений, ДокументОбъект, 
															СтруктураРеквизитовДокумента);

	// если в табличной части есть хотя бы одна строка, надо пересчитывать
	НадоПересчитывать = Ложь;
	Если ДокументОбъект[ИмяТабличнойЧасти].Количество() > 0 Тогда
		НадоПересчитывать = Истина;
	КонецЕсли;

	СтруктураПоиска = Новый Структура; // Для поиска в результате запроса
	ПересчитатьЦенуПоФлагамНалогов = Ложь; // Инициализация переменной

	ЕстьЦена               = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Цена",               МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСумма              = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма",              МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьЦенаПередачи       = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаПередачи",       МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаПередачи      = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаПередачи",      МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьЦенаПоступления    = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаПоступления",    МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаПоступления   = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаПоступления",   МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьЦенаСтарая         = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаСтарая", 	     	МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаСтарая        = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаСтарая", 	     	МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьФактурнаяСтоимость = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ФактурнаяСтоимость", 	МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьОборотПоРеализации = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ОборотПоРеализации", 	МетаданныеДокумента, ИмяТабличнойЧасти);

	// Если задано пользователем, то надо перезаполнить табличную часть по новому типу цен
	Если СтруктураЗначений.ПерезаполнитьЦеныПоТипу и ЕстьЦена Тогда

		// Получить нужные цены запросом
		РезультатЗапросаЦен = СформироватьЗапросПоЦенам(СтруктураЗначений, 
														СпособЗаполненияЦен, 
														ДокументОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонку("Номенклатура"),
														ДокументОбъект.Дата, 
														?(ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента),
														  ДокументОбъект.Контрагент, Неопределено),
														ДокументОбъект.Организация);
		ВыборкаРезультатЗапросаЦен = РезультатЗапросаЦен.Выгрузить();

		СтруктураПоиска = Новый Структура(); // стркутура для поиска в результате запроса

		// В цикле по ТЧ перезаполняем цены, приводя их к текущим скидкам, валюте и режиму налогообложения
		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

			// Если у нас способ заполнения цен "по розничным ценам", то перезаполнять по типу можно
			// только для услуг, для Товаров на розничном складе цена является измерением регистра остатков.
			Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам 
			   И Не СтрокаТабличнойЧасти.Номенклатура.Услуга Тогда
				Продолжить;
			КонецЕсли; 

			СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			СтарыйКоэффициент = 0;
			
			Если Автозаполнение И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Коэффициент", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СтарыйКоэффициент = СтрокаТабличнойЧасти.Коэффициент;
			КонецЕсли;
			
			ЗаполнитьЦенуВСтрокеТабличнойЧасти(ДокументОбъект,
											   СтрокаТабличнойЧасти,
											   СтруктураПоиска,
											   ВыборкаРезультатЗапросаЦен,
											   СтруктураЗначений,
											   СпособЗаполненияЦен);

			Если Автозаполнение И СтарыйКоэффициент > 0 Тогда
				Если СтрокаТабличнойЧасти.Коэффициент > 0 Тогда
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество*СтарыйКоэффициент
													  /СтрокаТабличнойЧасти.Коэффициент;
				КонецЕсли;
			КонецЕсли;

			Если СтруктураЗначений.ПересчитатьЦеныПоВалюте Тогда
				Если ЕстьЦенаПередачи Тогда
					СтрокаТабличнойЧасти.ЦенаПередачи = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПередачи,
														 СтруктураЗначений.ТекущийВалютаДокумента, 
														 СтруктураЗначений.НовыйВалютаДокумента,
														 СтруктураЗначений.ТекущийКурсДокумента, 
														 СтруктураЗначений.НовыйКурсДокумента,
														 СтруктураЗначений.ТекущийКратностьДокумента, 
														 СтруктураЗначений.НовыйКратностьДокумента);
					Если ЕстьСуммаПередачи Тогда
						СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;
				КонецЕсли;
				Если ЕстьЦенаПоступления Тогда
					СтрокаТабличнойЧасти.ЦенаПоступления = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПоступления,
														 СтруктураЗначений.ТекущийВалютаДокумента, 
														 СтруктураЗначений.НовыйВалютаДокумента,
														 СтруктураЗначений.ТекущийКурсДокумента, 
														 СтруктураЗначений.НовыйКурсДокумента,
														 СтруктураЗначений.ТекущийКратностьДокумента, 
														 СтруктураЗначений.НовыйКратностьДокумента);
					Если ЕстьСуммаПоступления Тогда
						СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.ЦенаПоступления * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;
				КонецЕсли;
				Если ЕстьЦенаСтарая Тогда
					СтрокаТабличнойЧасти.ЦенаСтарая = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаСтарая,
														 СтруктураЗначений.ТекущийВалютаДокумента, 
														 СтруктураЗначений.НовыйВалютаДокумента,
														 СтруктураЗначений.ТекущийКурсДокумента, 
														 СтруктураЗначений.НовыйКурсДокумента,
														 СтруктураЗначений.ТекущийКратностьДокумента, 
														 СтруктураЗначений.НовыйКратностьДокумента);
					Если ЕстьСуммаСтарая Тогда
						СтрокаТабличнойЧасти.СуммаСтарая = СтрокаТабличнойЧасти.ЦенаСтарая * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;
				ИначеЕсли ЕстьСуммаСтарая Тогда
					СтрокаТабличнойЧасти.СуммаСтарая = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаСтарая,
														 СтруктураЗначений.ТекущийВалютаДокумента, 
														 СтруктураЗначений.НовыйВалютаДокумента,
														 СтруктураЗначений.ТекущийКурсДокумента, 
														 СтруктураЗначений.НовыйКурсДокумента,
														 СтруктураЗначений.ТекущийКратностьДокумента, 
														 СтруктураЗначений.НовыйКратностьДокумента);
				КонецЕсли;
				Если ЕстьФактурнаяСтоимость Тогда
					СтрокаТабличнойЧасти.ЕстьФактурнаяСтоимость = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ФактурнаяСтоимость,
																 СтруктураЗначений.ТекущийВалютаДокумента, 
																 СтруктураЗначений.НовыйВалютаДокумента,
																 СтруктураЗначений.ТекущийКурсДокумента, 
																 СтруктураЗначений.НовыйКурсДокумента,
																 СтруктураЗначений.ТекущийКратностьДокумента, 
																 СтруктураЗначений.НовыйКратностьДокумента);
				КонецЕсли;
			КонецЕсли; 

			// Выполним действия при изменении цены

			#Если Клиент Тогда
				
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			УчетНДСИАкциза.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;
			
			#КонецЕсли

		КонецЦикла; // Цикл по ТЧ для заполнения цен при изменении типа цен

	Иначе

		// Определим необходимость перерасчета цены
		ПересчитатьЦенуПоФлагамНалогов = ОпределитьНеобходимостьПерерасчетаЦены(СтруктураЗначений);

		Если СтруктураЗначений.ПересчитатьЦеныПоВалюте ИЛИ ПересчитатьЦенуПоФлагамНалогов Тогда


			// В цикле по табличной части перезаполняем цены, приводя их к текущим скидкам, валюте и режиму налогообложения
			Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
				
				//Получим Сумму акциза на единицу товаров, т.к. акциз может быть рассчитан по коэффициенту
				СуммаАкциза = 0;
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					Количество 	 = ?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти),СтрокаТабличнойЧасти.Количество, 0); 
					СуммаАкциза  = СтрокаТабличнойЧасти.СуммаАкциза/?(Количество = 0, 1, Количество); 
				КонецЕсли;	
				
				// В случае, если поменялась валюта
				Если СтруктураЗначений.ПересчитатьЦеныПоВалюте Тогда
					//пересчитываем Акциз, т.к. он всегда идет в ставках в валюте рег. учета
					Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							ОбработкаТабличныхЧастей.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
					КонецЕсли;
					
					Если ЕстьЦена Тогда
						СтрокаТабличнойЧасти.Цена = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена,
															 СтруктураЗначений.ТекущийВалютаДокумента, 
															 СтруктураЗначений.НовыйВалютаДокумента,
															 СтруктураЗначений.ТекущийКурсДокумента, 
															 СтруктураЗначений.НовыйКурсДокумента,
															 СтруктураЗначений.ТекущийКратностьДокумента, 
															 СтруктураЗначений.НовыйКратностьДокумента);

						// Если надо пересчитать цены при изменении флагов налогообложения
						Если ПересчитатьЦенуПоФлагамНалогов
						   И (ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаАкциза", МетаданныеДокумента, ИмяТабличнойЧасти))Тогда
							СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастей.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена, 
																								 Неопределено,
																								 СтруктураЗначений.ТекущийСуммаВключаетНДС,
																								 СтруктураЗначений.НовыйУчитыватьНДС,
																								 СтруктураЗначений.НовыйСуммаВключаетНДС, 
																								 УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),
																								 СтруктураЗначений.ТекущийСуммаВключаетАкциз,
																								 СтруктураЗначений.НовыйУчитыватьАкциз,
																								 СтруктураЗначений.НовыйСуммаВключаетАкциз,
																								 СуммаАкциза);
						КонецЕсли;
						
						//проверить на рекциз СтавкаАкциза
						
						#Если Клиент Тогда
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						УчетНДСИАкциза.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						
						Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						КонецЕсли;
						#КонецЕсли

					Иначе
						Если ЕстьСумма Тогда
							СтрокаТабличнойЧасти.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма,
																 СтруктураЗначений.ТекущийВалютаДокумента, 
																 СтруктураЗначений.НовыйВалютаДокумента,
																 СтруктураЗначений.ТекущийКурсДокумента, 
																 СтруктураЗначений.НовыйКурсДокумента,
																 СтруктураЗначений.ТекущийКратностьДокумента, 
																 СтруктураЗначений.НовыйКратностьДокумента);
						КонецЕсли;

						#Если Клиент Тогда
							УчетНДСИАкциза.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						КонецЕсли;
						#КонецЕсли

					КонецЕсли;

					Если ЕстьЦенаПередачи Тогда
						СтрокаТабличнойЧасти.ЦенаПередачи = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПередачи,
															 СтруктураЗначений.ТекущийВалютаДокумента, 
															 СтруктураЗначений.НовыйВалютаДокумента,
															 СтруктураЗначений.ТекущийКурсДокумента, 
															 СтруктураЗначений.НовыйКурсДокумента,
															 СтруктураЗначений.ТекущийКратностьДокумента, 
															 СтруктураЗначений.НовыйКратностьДокумента);
						Если ЕстьСуммаПередачи Тогда
							СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
						КонецЕсли;
					КонецЕсли;

					Если ЕстьЦенаПоступления Тогда
						СтрокаТабличнойЧасти.ЦенаПоступления = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПоступления,
															 СтруктураЗначений.ТекущийВалютаДокумента, 
															 СтруктураЗначений.НовыйВалютаДокумента,
															 СтруктураЗначений.ТекущийКурсДокумента, 
															 СтруктураЗначений.НовыйКурсДокумента,
															 СтруктураЗначений.ТекущийКратностьДокумента, 
															 СтруктураЗначений.НовыйКратностьДокумента);
						Если ЕстьСуммаПоступления Тогда
							СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.ЦенаПоступления * СтрокаТабличнойЧасти.Количество;
						КонецЕсли;
					КонецЕсли;

					Если ЕстьЦенаСтарая Тогда
						СтрокаТабличнойЧасти.ЦенаСтарая = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаСтарая,
															 СтруктураЗначений.ТекущийВалютаДокумента, 
															 СтруктураЗначений.НовыйВалютаДокумента,
															 СтруктураЗначений.ТекущийКурсДокумента, 
															 СтруктураЗначений.НовыйКурсДокумента,
															 СтруктураЗначений.ТекущийКратностьДокумента, 
															 СтруктураЗначений.НовыйКратностьДокумента);
						Если ЕстьСуммаСтарая Тогда
							СтрокаТабличнойЧасти.СуммаСтарая = СтрокаТабличнойЧасти.ЦенаСтарая * СтрокаТабличнойЧасти.Количество;
						КонецЕсли;
					ИначеЕсли ЕстьСуммаСтарая Тогда
						СтрокаТабличнойЧасти.СуммаСтарая = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаСтарая,
															 СтруктураЗначений.ТекущийВалютаДокумента, 
															 СтруктураЗначений.НовыйВалютаДокумента,
															 СтруктураЗначений.ТекущийКурсДокумента, 
															 СтруктураЗначений.НовыйКурсДокумента,
															 СтруктураЗначений.ТекущийКратностьДокумента, 
															 СтруктураЗначений.НовыйКратностьДокумента);
					КонецЕсли;

					Если ЕстьФактурнаяСтоимость Тогда
						СтрокаТабличнойЧасти.ФактурнаяСтоимость = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ФактурнаяСтоимость,
																	 СтруктураЗначений.ТекущийВалютаДокумента, 
																	 СтруктураЗначений.НовыйВалютаДокумента,
																	 СтруктураЗначений.ТекущийКурсДокумента, 
																	 СтруктураЗначений.НовыйКурсДокумента,
																	 СтруктураЗначений.ТекущийКратностьДокумента, 
																	 СтруктураЗначений.НовыйКратностьДокумента);
					КонецЕсли;

				Иначе
					Если ЕстьЦена Тогда

						// Если надо пересчитать цены при изменении флагов налогообложения
						Если ПересчитатьЦенуПоФлагамНалогов
						   И (ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) ИЛИ  ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаАкциза", МетаданныеДокумента, ИмяТабличнойЧасти))Тогда
							СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастей.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена, 
																								 Неопределено,
																								 СтруктураЗначений.ТекущийСуммаВключаетНДС,
																								 СтруктураЗначений.НовыйУчитыватьНДС,
																								 СтруктураЗначений.НовыйСуммаВключаетНДС, 
																								 УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),
																								 СтруктураЗначений.ТекущийСуммаВключаетАкциз,
																								 СтруктураЗначений.НовыйУчитыватьАкциз,
																								 СтруктураЗначений.НовыйСуммаВключаетАкциз,
																								 СуммаАкциза);
						КонецЕсли;

						#Если Клиент Тогда
							ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
							УчетНДСИАкциза.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
							Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
								ОбработкаТабличныхЧастей.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
							КонецЕсли;
							Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
								ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
							КонецЕсли;
						#КонецЕсли
						
					// Если нет колонки "Цена", но есть колонка "Сумма", пересчитывается непосредственно сумма	
					ИначеЕсли ЕстьСумма Тогда

						// Если надо пересчитать цены при изменении флагов налогообложения
						Если ПересчитатьЦенуПоФлагамНалогов
						   И (ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти)  ИЛИ  ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаАкциза", МетаданныеДокумента, ИмяТабличнойЧасти))Тогда
							СтрокаТабличнойЧасти.Сумма = ОбработкаТабличныхЧастей.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Сумма, 
																								 Неопределено,
																								 СтруктураЗначений.ТекущийСуммаВключаетНДС,
																								 СтруктураЗначений.НовыйУчитыватьНДС,
																								 СтруктураЗначений.НовыйСуммаВключаетНДС, 
																								 УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),
																								 СтруктураЗначений.ТекущийСуммаВключаетАкциз,
																								 СтруктураЗначений.НовыйУчитыватьАкциз,
																								 СтруктураЗначений.НовыйСуммаВключаетАкциз,
																								 СуммаАкциза);
						КонецЕсли;

						#Если Клиент Тогда
							Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
								ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
							КонецЕсли;
						#КонецЕсли


					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;
	Если ЕстьОборотПоРеализации И (СтруктураЗначений.ТекущийКурсДокумента <> СтруктураЗначений.НовыйКурсДокумента ИЛИ  СтруктураЗначений.ТекущийКратностьДокумента <> СтруктураЗначений.НовыйКратностьДокумента) Тогда
		   // Оборо по реализации указывается в тенге, при изменении курса или кратности документа необходимо пересчитать сумму оборота по реализации
		   Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
			   УчетНДСИАкциза.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);				
			   Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				   ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			   КонецЕсли;			   
		   КонецЦикла;
	КонецЕсли;	

КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныВалюта()

// Заполняет цену в строке ТЧ документа по реквизитам документа и текущим ценам в регистре сведений.
//
// Параметры: 
//  СтрокаТабличнойЧасти         - строка табличной части редактируемого документа, 
//  СтруктураПоиска            - структра, содержит значение Номенклатуры для поиска в результате запроса, 
//  ВыборкаИзРезультатаЗапроса - результат запроса по текущим ценам, 
//  СтруктураЗначений          - структура, соответствующая возвращаемой формой "Цены и валюта" (значения реквизитов 
//						         документа до и после их изменеия в общей форме),
//  СпособЗаполненияЦен        - значение перечисления "Способы заполнения цен", влияет на расчет цен
//						         (см. описание в ПересчитатьЦенуПриИзмененииФлаговНалогов)
//
Процедура ЗаполнитьЦенуВСтрокеТабличнойЧасти(	ДокументОбъект, СтрокаТабличнойЧасти, СтруктураПоиска, ВыборкаИзРезультатаЗапроса, 
												СтруктураЗначений, СпособЗаполненияЦен) Экспорт

	Перем НДСВСтроке;

	// получим имя табличной части и имя документа
	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Родитель();

	Если Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Реквизиты.Найти("Цена") = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Найдем товар из текущей строки документа в выборке из результата запроса.
	Если НЕ ЗначениеЗаполнено(СтруктураПоиска.Номенклатура) Тогда
		Возврат; // Искать нечего.
	КонецЕсли; 

	РезультатПоиска = ВыборкаИзРезультатаЗапроса.Найти(СтруктураПоиска.Номенклатура, "Номенклатура");
	Если НЕ (РезультатПоиска = Неопределено) Тогда // Нашли запись

		// Если для данного товара есть цена данного типа
		// Единицу устанавливаем в единицу цены, если она не задана, то в основную единицу товара
		Если НЕ ЗначениеЗаполнено(РезультатПоиска.Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе

			СтрокаТабличнойЧасти.Цена = РезультатПоиска.Цена;

			// Пересчитываем цену в ваюту документа
			Если СтруктураЗначений.НовыйВалютаДокумента <> РезультатПоиска.ВалютаЦены Тогда
				СтрокаТабличнойЧасти.Цена = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(	СтрокаТабличнойЧасти.Цена, 
																		РезультатПоиска.ВалютаЦены, 
																		СтруктураЗначений.НовыйВалютаДокумента, 
																		РезультатПоиска.КурсВалютыЦены,
																		СтруктураЗначений.НовыйКурсДокумента, 
																		РезультатПоиска.КратностьВалютыЦены,
																		СтруктураЗначений.НовыйКратностьДокумента);
			КонецЕсли;

			// Пересчитываем цену по параметрам налогообложения.
			// Ставку определяем исходя из переданных параметров
			СтруктураЗначений.Свойство("ЕстьСтавкаНДСВТабличнойЧасти", НДСВСтроке);

			СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастей.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена, 
										СпособЗаполненияЦен, РезультатПоиска.ЦенаВключаетНДС, 
										СтруктураЗначений.НовыйУчитыватьНДС, СтруктураЗначений.НовыйСуммаВключаетНДС, 
										?(СтруктураЗначений.НовыйУчитыватьНДС, ?(НДСВСтроке = Истина, УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС), УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС)),0));

		КонецЕсли;

	Иначе // информации по этому товару нет в запросе 

		// Такого быть не может, это ошибка алгоритма
		ОбщегоНазначения.СообщитьОбОшибке("Для номенклатуры """ + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + """ не найдена цена! Пересчет невозможен.");
		СтрокаТабличнойЧасти.Цена = 0;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЦенуВСтрокеТабличнойЧасти()

// Получает контекст общей формы "Цены и Валюта", устанавливает в ней значения и доступность реквизитов 
// по значениям, заданным в документе, и открывает форму. 
//
// Параметры: 
//  ДокументОбъект                     - обьъект редактируемого документа; 
//  СтруктураРеквизитовДокумента       - структура, задает список обрабатываемых реквизитов документа;
//                                       если реквизит надо обрабатывать, то для него есть ключ в этой структуре;
//  ВалютаРегламентированногоУчета     - валюта регламентированного учета
//  СтруктураНеРедактируемыхРеквизитов - структура, задает список реквизитов, которые надо показывать, 
//                                       но не надо давать изменять, необязательный параметр.
//  ИмяТабличнойЧасти                  - строка, имя табличной части, которую надо пересчитать, 
//                                       по умолчанию - "Товары".
//  НовыйТипЦенДляУстановки            - тип цен, который по возможности нужно установить как новый в форме;
//
// Возвращаемое значение:
//  Структура, содержащая значения текущих и устанавливаемых значений для реквизитов документа.
//
Функция ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, ВалютаРегламентированногоУчета,
								СтруктураНеРедактируемыхРеквизитов = Неопределено, ИмяТабличнойЧасти,
								НовыйТипЦенДляУстановки = Неопределено) Экспорт

	ФормаЦеныВалюты = ПолучитьОбщуюФорму("ФормаЦеныИВалюта"); 

	// Установим текущие реквизиты.
	УстановитьТекущиеРеквизитыФормаЦеныВалюты(ФормаЦеныВалюты, ДокументОбъект, 
	                                          СтруктураРеквизитовДокумента, ИмяТабличнойЧасти, 
	                                          ВалютаРегламентированногоУчета, НовыйТипЦенДляУстановки);

	// Доступность реквизитов формы.
	УстановитьДоступностьРеквизитовФормаЦеныВалюты(	ФормаЦеныВалюты, СтруктураРеквизитовДокумента, 
													СтруктураНеРедактируемыхРеквизитов);

	// Теперь можно и открывать форму, она вернет результат своей работы.
	Возврат ФормаЦеныВалюты.ОткрытьМодально();

КонецФункции // ОткрытьФормуЦеныИВалюта()

// По реквизитам редактируемого документа устанавливает реквизиты общей формы "Цены и Валюта".
//
// Параметры: 
//  ФормаЦеныВалюты                - форма, соответствует общей контекст общей форме "Цены и Валюта", 
//  ДокументОбъект                 - объект редактируемого документа
//  СтруктураРеквизитовДокумента   - структура, задает список обрабатываемых реквизитов документа,
//                                   если реквизит надо обрабатывать, то для него есть ключ в этой структуре.
//                                   Множество возможных ключей: (ТипЦен, ТипСкидкиНаценки, ВалютаДокумента, КурсДокумента, 
//								     КратностьДокумента, УчитыватьНДС, СуммаВключаетНДС);
//  ИмяТабличнойЧасти              - строка, имя табличной части, которую надо пересчитать, 
//                                   по умолчанию - "Товары".
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  НовыйТипЦенДляУстановки        - тип цен, который по возможности нужно установить как новый в форме;
//
Процедура УстановитьТекущиеРеквизитыФормаЦеныВалюты(ФормаЦеныВалюты, ДокументОбъект,
	                                                СтруктураРеквизитовДокумента, ИмяТабличнойЧасти,
	                                                ВалютаРегламентированногоУчета,
	                                                НовыйТипЦенДляУстановки = Неопределено) Экспорт

	// если хоть в одной табличной части есть хотя бы одна строка, надо пересчитывать
	НадоПересчитывать = Ложь;
	Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
		Если ДокументОбъект[ТЧОбъекта.Имя].Количество() > 0 Тогда
			НадоПересчитывать = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ НадоПересчитывать И НЕ(ДокументОбъект.Метаданные().Реквизиты.Найти("Сумма") = Неопределено) Тогда
		//Все таки надо пересчитать если есть реквизит "Сумма" в шапке.
		НадоПересчитывать = Истина;
	КонецЕсли;
	
	ФормаЦеныВалюты.ТабличнаяЧастьПуста = НЕ НадоПересчитывать;

	// Для получения курса на дату
	ФормаЦеныВалюты.ДатаКурса = ДокументОбъект.Дата;
	
	// определим текущую валюту взиморасчетов
	ТекущийВалютаВзаиморасчетов = "";
	Контрагент                  = "";
	
	Если СтруктураРеквизитовДокумента.Свойство("БезКонтроляВалютыВзаиморасчетов") Тогда
		ТекущийВалютаВзаиморасчетов                 = СтруктураРеквизитовДокумента.БезКонтроляВалютыВзаиморасчетов;
		ФормаЦеныВалюты.ТекущийВалютаВзаиморасчетов = ТекущийВалютаВзаиморасчетов;
		ФормаЦеныВалюты.ПересчитатьЦеныПоВалюте     = Истина;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Валюты.Ссылка КАК Валюта
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|УПОРЯДОЧИТЬ ПО
		|	Валюта";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.СписокВыбора.Добавить(Выборка.Валюта);
		КонецЕсли;
		
		ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.КнопкаОчистки = Ложь;
	Иначе
		
		Если ДокументОбъект.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
			Если СтруктураРеквизитовДокумента.Свойство("ДоговорКонтрагента") Тогда
				ТекущийВалютаВзаиморасчетов = СтруктураРеквизитовДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			ИначеЕсли ДокументОбъект.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
				ТекущийВалютаВзаиморасчетов = ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;			
			Иначе
				// Если в документе и в переданной структуре нет реквизита Договор
				// Проверяем есть ли реквизит валюта взаиморасчетов
				Если ДокументОбъект.Метаданные().Реквизиты.Найти("ВалютаВзаиморасчетов") <> Неопределено Тогда
					ТекущийВалютаВзаиморасчетов = ДокументОбъект.ВалютаВзаиморасчетов;
					
					// в документе ГТД импорт заполнение Валюты взаиморасчетов не обязательно
					// поэтому установим ее равно валюте документа, чтобы пользователь мог установить
					// флаги расчета сумм.
					Если НЕ ЗначениеЗаполнено(ТекущийВалютаВзаиморасчетов) и СтруктураРеквизитовДокумента.Свойство("ВалютаДокумента") Тогда
						ТекущийВалютаВзаиморасчетов = ДокументОбъект.ВалютаДокумента;
					КонецЕсли;
				Иначе
					ТекущийВалютаВзаиморасчетов = ОбщегоНазначения.ДоступныйДоговорКонтрагента(ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента).ВалютаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
			ФормаЦеныВалюты.ТекущийВалютаВзаиморасчетов = ТекущийВалютаВзаиморасчетов;
		КонецЕсли;
	КонецЕсли;
	
	// может быть, надо ограничить список доступных валют для документа?
	// сделаем это, если, во-первых, существует валюта документа, во-вторых, существует валюта взаиморасчетов
	// (т.е. передается курс взаиморасчетов)
	Если СтруктураРеквизитовДокумента.Свойство("КурсВзаиморасчетов")
	   И НЕ СтруктураРеквизитовДокумента.Свойство("КурсДокумента")
	   И СтруктураРеквизитовДокумента.Свойство("ВалютаДокумента") Тогда
		ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.РежимВыбораИзСписка = Истина;
		ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.СписокВыбора.Добавить(ТекущийВалютаВзаиморасчетов);
		
		Если ВалютаРегламентированногоУчета <> ТекущийВалютаВзаиморасчетов Тогда
			ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.СписокВыбора.Добавить(ВалютаРегламентированногоУчета);
		КонецЕсли;
		
		ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.КнопкаВыбора  = Ложь;
		ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.КнопкаОчистки = Ложь;
	КонецЕсли;

	Для каждого ЭлементСтруктуры Из СтруктураРеквизитовДокумента Цикл
		Если ФормаЦеныВалюты.ЭлементыФормы.Найти("Текущий" + ЭлементСтруктуры.Ключ) <> Неопределено
		 ИЛИ ЭлементСтруктуры.Ключ = "КратностьВзаиморасчетов"
		 ИЛИ ЭлементСтруктуры.Ключ = "КратностьДокумента" Тогда
			ФормаЦеныВалюты["Текущий" + ЭлементСтруктуры.Ключ] = ДокументОбъект[ЭлементСтруктуры.Ключ];

			Если ЭлементСтруктуры.Значение = Неопределено Тогда
				ФормаЦеныВалюты["Новый" + ЭлементСтруктуры.Ключ] = ФормаЦеныВалюты["Текущий" + ЭлементСтруктуры.Ключ];
			Иначе
				ФормаЦеныВалюты["Новый" + ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// если уже при открытии новый тип цен отличается от текущего, надо обработать изменения реквизитов формы
	Если ФормаЦеныВалюты.НовыйТипЦен <> ФормаЦеныВалюты.ТекущийТипЦен 
	   И ЗначениеЗаполнено(ФормаЦеныВалюты.НовыйТипЦен) Тогда
		// надо установить флаг СуммаВключаемНДС из типа цены
		ФормаЦеныВалюты.НовыйСуммаВключаетНДС = ФормаЦеныВалюты.НовыйТипЦен.ЦенаВключаетНДС;
	КонецЕсли;
	
	// если мы используем режим выбора из списка для новой валюты документа
	// и в списке нет нужной валюты, установим новую валюту в валюту взаиморасчетов
	Если ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.РежимВыбораИзСписка = Истина
	   И ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.СписокВыбора.НайтиПоЗначению(ФормаЦеныВалюты.НовыйВалютаДокумента) = Неопределено Тогда
		ФормаЦеныВалюты.НовыйВалютаДокумента = ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.СписокВыбора[0].Значение;
	КонецЕсли;

	// Если передан НовыйТипЦенДляУстановки и он подходит по параметрам, установим его в форме
	Если НовыйТипЦенДляУстановки <> Неопределено
	   И СтруктураРеквизитовДокумента.Свойство("ТипЦен") 
	   И Метаданные.НайтиПоТипу(ТипЗнч(ДокументОбъект.ТипЦен)).Имя = НовыйТипЦенДляУстановки.Метаданные().Имя Тогда
		ФормаЦеныВалюты.НовыйТипЦен = НовыйТипЦенДляУстановки;
	КонецЕсли;

		// Вызов при изменении значения договора
	Если СтруктураРеквизитовДокумента.Свойство("ВызовПриИзмененииЗначенияДоговора") Тогда
		ФормаЦеныВалюты.НовыйВалютаДокумента    = ТекущийВалютаВзаиморасчетов;
		ФормаЦеныВалюты.ПересчитатьЦеныПоВалюте = Истина;
	КонецЕсли;

КонецПроцедуры // УстановитьТекущиеРеквизитыФормаЦеныВалюты()

// Устанавливает доступность реквизитов общей формы "Цены и Валюта" согласно переданной структуре.
//
// Параметры: 
//  ФормаЦеныВалюты                    - форма, соответствует общей контекст общей форме "Цены и Валюта", 
//  ДокументОбъект                     - обьъект редактируемого документа; 
//  СтруктураРеквизитовДокумента       - структура, задает список обрабатываемых реквизитов документа;
//                                       если реквизит надо обрабатывать, то для него есть ключ в этой структуре;
//  СтруктураНеРедактируемыхРеквизитов - структура, задает список реквизитов, которые надо показывать, 
//                                       но не надо давать изменять, необязательный параметр.
//
Процедура УстановитьДоступностьРеквизитовФормаЦеныВалюты(	ФормаЦеныВалюты, СтруктураРеквизитовДокумента,
	      													СтруктураНеРедактируемыхРеквизитов = Неопределено)

	ФормаЦеныВалюты.ЭлементыФормы.НовыйТипЦен.Доступность                     = СтруктураРеквизитовДокумента.Свойство("ТипЦен");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.Доступность            = СтруктураРеквизитовДокумента.Свойство("ВалютаДокумента");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйКурсДокумента.Доступность              = СтруктураРеквизитовДокумента.Свойство("КурсДокумента");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйКурсВзаиморасчетов.Доступность         = СтруктураРеквизитовДокумента.Свойство("КурсВзаиморасчетов");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйУчитыватьНДС.Доступность               = СтруктураРеквизитовДокумента.Свойство("УчитыватьНДС");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйСуммаВключаетНДС.Доступность           = СтруктураРеквизитовДокумента.Свойство("СуммаВключаетНДС");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйНДСВключенВСтоимость.Доступность       = СтруктураРеквизитовДокумента.Свойство("НДСВключенВСтоимость");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйУчитыватьАкциз.Доступность             = СтруктураРеквизитовДокумента.Свойство("УчитыватьАкциз");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйСуммаВключаетАкциз.Доступность         = СтруктураРеквизитовДокумента.Свойство("СуммаВключаетАкциз");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйОтложитьПринятиеНДСКЗачету.Доступность = СтруктураРеквизитовДокумента.Свойство("ОтложитьПринятиеНДСКЗачету");
	
	// Если задана структура исключений, то сделаем недоступными соответствующие реквизиты.
	Если СтруктураНеРедактируемыхРеквизитов <> Неопределено Тогда

		Для Каждого ЭлементСтруктуры Из СтруктураНеРедактируемыхРеквизитов Цикл
			ФормаЦеныВалюты.ЭлементыФормы["Новый" + ЭлементСтруктуры.Ключ].Доступность = Ложь;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьРеквизитовФормаЦеныВалюты()

// Устанавливает новые значения реквизитов документа по значениям, выбранным в общей форме "Цены и Валюта"
//
// Параметры: 
//  СтруктураРезультирующихЗначений	- структура, содержащая значения реквизитов документа до и после их 
//									  изменеия в форме "Цены и валюта",
//  ДокументОбъект					- объект редактируемого документа,
//  СтруктураРеквизитовДокумента	- структура, задает список обрабатываемых реквизитов документа,
// 									  если реквизит надо обрабатывать, то для него есть ключ в этой структуре
//
Процедура УстановитьРеквизитыДокументаПоЗначениямФормыЦеныВалюта(СтруктураРезультирующихЗначений, ДокументОбъект, 
	                                                             СтруктураРеквизитовДокумента) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Для каждого ЭлементСтруктуры Из СтруктураРеквизитовДокумента Цикл
		Если СтруктураРезультирующихЗначений.Свойство("Новый" + ЭлементСтруктуры.Ключ)
		   И ОбщегоНазначения.ЕстьРеквизитДокумента(ЭлементСтруктуры.Ключ, МетаданныеДокумента) Тогда
			НовоеЗначениеРеквизита = СтруктураРезультирующихЗначений["Новый" + ЭлементСтруктуры.Ключ];

			Если ДокументОбъект[ЭлементСтруктуры.Ключ] <> НовоеЗначениеРеквизита Тогда
				ДокументОбъект[ЭлементСтруктуры.Ключ] = НовоеЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры // УстановитьРеквизитыДокументаПоЗначениямФормыЦеныВалюта()

// Определяет необходимость пересчета табличной части документа при изменении флагов налогообложения 
// в форме "Цены и валюты".
//
// Параметры: 
//  СтруктураЗначений	- структура, содержащая значения реквизитов документа до и после их 
//						  изменеия в форме "Цены и валюта".
//
Функция ОпределитьНеобходимостьПерерасчетаЦены(СтруктураЗначений) Экспорт

		Возврат (СтруктураЗначений.НовыйУчитыватьНДС     <> СтруктураЗначений.ТекущийУчитыватьНДС) ИЛИ
		        (СтруктураЗначений.НовыйСуммаВключаетНДС <> СтруктураЗначений.ТекущийСуммаВключаетНДС) ИЛИ
				(СтруктураЗначений.НовыйУчитыватьАкциз   <> СтруктураЗначений.ТекущийУчитыватьАкциз) ИЛИ
				(СтруктураЗначений.НовыйСуммаВключаетАкциз <> СтруктураЗначений.ТекущийСуммаВключаетАкциз) ;

КонецФункции // ОпределитьНеобходимостьПерерасчетаЦены()

Функция СформироватьТекстНадписиЦенаИВалюта(СуммаВключаетНДС, ОтложитьПринятиеНДСКЗачету = Ложь) Экспорт
	
	ТекстНадписи = "";
	Если ОтложитьПринятиеНДСКЗачету Тогда
		ТекстОтложенногоНДС = НСтр("ru = ',отложен'");				
	Иначе	
		ТекстОтложенногоНДС = "";
	КонецЕсли;
		
	Если СуммаВключаетНДС Тогда
		ТекстНадписи = "НДС (в т. ч." + ТекстОтложенногоНДС + "):";
	Иначе
		ТекстНадписи = "НДС (сверху" + ТекстОтложенногоНДС + "):";
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции
			
                   