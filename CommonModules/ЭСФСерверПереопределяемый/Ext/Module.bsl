
// См. ЭСФСервер.СинхронизацияСИСЭСФПриЗапуске()
Функция СинхронизацияСИСЭСФПриЗапуске() Экспорт
	
	СинхронизацияСИСЭСФПриЗапуске = Ложь;
	
	//Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
	//	Возврат СинхронизацияСИСЭСФПриЗапуске;
	//КонецЕсли;
	                                        
	Попытка
		
		СинхронизацияСИСЭСФПриЗапуске = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
			ЭСФКлиентСерверПереопределяемый.ТекущийПользователь(), "СинхронизацияСИСЭСФПриЗапуске");
			
		Если ТипЗнч(СинхронизацияСИСЭСФПриЗапуске) <> Тип("Булево") Тогда
			СинхронизацияСИСЭСФПриЗапуске = Ложь;
		КонецЕсли;
		
		Если НЕ ПравоДоступа("Просмотр", Метаданные.Обработки.ОбменЭСФ) Тогда
			СинхронизацияСИСЭСФПриЗапуске = Ложь;
		КонецЕсли;
		
	Исключение
		
		СинхронизацияСИСЭСФПриЗапуске = Ложь;
		
	КонецПопытки;
	
	Возврат СинхронизацияСИСЭСФПриЗапуске;
	
КонецФункции

// Возвращает номер документа на печать.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.<Имя> - Ссылка на документ, для которого необходимо получить номер на печать.
//
// Возвращаемое значение:
//  Строка - Номер документа, который может использоваться для печати.
//
Функция ПолучитьНомерНаПечать(ДокументСсылка) Экспорт
	
	Возврат ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументСсылка, ЭСФСерверПовтИсп.СписокПрефиксовУзлов());
	
КонецФункции

// См. ЭСФСервер.СтруктурныеЕдиницыДляСозданияПрофилейИСЭСФ()
Функция СтруктурныеЕдиницыДляСозданияПрофилейИСЭСФ() Экспорт
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("СтруктурнаяЕдиница");
	ТаблицаРезультат.Колонки.Добавить("Представление");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК СтруктурнаяЕдиница,
	|	Организации.Представление КАК Представление,
	|	"""" КАК ПредставлениеГоловнойОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка,
	|	ПодразделенияОрганизаций.Представление,
	|	ПодразделенияОрганизаций.Владелец.Представление
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением = ИСТИНА";

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаРезультат.Добавить();
		
		НоваяСтрока.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;

		Если ПустаяСтрока(Выборка.ПредставлениеГоловнойОрганизация) Тогда 
			НоваяСтрока.Представление = Выборка.Представление;	
		Иначе
			Представление = "%СтруктурнаяЕдиница% (%ГоловнаяОрганизация%)";
			Представление = СтрЗаменить(Представление, "%СтруктурнаяЕдиница%",  Выборка.Представление);
			Представление = СтрЗаменить(Представление, "%ГоловнаяОрганизация%", Выборка.ПредставлениеГоловнойОрганизация);
			НоваяСтрока.Представление = Представление;	
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ПолучитьОрганизациюпоУмолчанию() Экспорт
	
	Возврат УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
		ЭСФКлиентСерверПереопределяемый.ТекущийПользователь(), "ОсновнаяОрганизация");
	
КонецФункции

Функция ИнформационнаяБазаФайловая() Экспорт
	
	Возврат ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
КонецФункции

// См. ЭСФСерверПовтИсп.СписокПрефиксовУзлов()
Функция СписокПрефиксовУзлов() Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеСпискаПрефиксовУзлов(Неопределено);
	
КонецФункции

// См. ЭСФСерверПовтИсп.НовоеСоответствиеАкцизы()
Функция НовоеСоответствиеАкцизы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтавкиАкциза.Ставка КАК Ставка,
	|	СтавкиАкциза.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтавкиАкциза КАК СтавкиАкциза
	|ГДЕ
	|	НЕ СтавкиАкциза.ПометкаУдаления";	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеАкцизы = Новый Соответствие;	
	Пока Выборка.Следующий() Цикл
		СоответствиеАкцизы.Вставить(Выборка.Ставка, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СоответствиеАкцизы;
	
КонецФункции

// Обработчик события ПриСозданииНаСервере в форме документа ЭСФ.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма документа ЭСФ.
//
Процедура ЭСФПриСозданииНаСервере(Форма) Экспорт
	
	ОбъектЭСФ = Форма.РеквизитФормыВЗначение("Объект");
	НастройкаПравДоступа.УстановитьДоступностьФормыДляРедактирования(ОбъектЭСФ, Форма);
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПредставлениеЭДВС", "Видимость", Ложь);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПредставлениеСНТ", "Видимость", Ложь);
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТоварыГруппа10", "Видимость", Ложь);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТоварыИсточникПроисхождения", "Видимость", Ложь);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТоварыГруппаВС", "Видимость", Ложь);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаДокументЭСФПолучитьИдентификаторыТоваров", "Видимость", Ложь);
	
КонецПроцедуры

// Обработчик события ПриСозданииНаСервере в форме документа ЭСФ.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма документа ЭСФ.
//
Процедура ЭСФФормаСпискаИВыбораПриСозданииНаСервере(Форма) Экспорт
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаПолучитьИдентификаторыТоваров", "Видимость", Ложь);

	УстановитьОтборПоОсновнойОрганизации(Форма);
	
КонецПроцедуры

Функция УстановитьОтборПоОсновнойОрганизации(Форма, ИмяСписка = "Список", ИмяРеквизита = "Организация", ЗначениеОтбора = Неопределено) Экспорт
	
	//Если Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
	//	
	//	УчетПоВсемОрганизациям = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ПользователиКлиентСервер.АвторизованныйПользователь(), "УчетПоВсемОрганизациям");
	//	ОсновнаяОрганизация = Справочники.Организации.ОрганизацияПоУмолчанию(ЗначениеОтбора);
	//	
	//	Если Форма.ИмяФормы = "Документ.ЭСФ.Форма.ФормаСпискаВходящих" ИЛИ Форма.ИмяФормы = "Документ.ЭСФ.Форма.ФормаСпискаИсходящих" Тогда
	//		Форма.Организация = ОсновнаяОрганизация;
	//	КонецЕсли;
	//	
	//	ЭСФКлиентСерверПереопределяемый.ИзменитьЭлементОтбораСписка(Форма.Список, "Организация", ОсновнаяОрганизация, ЗначениеЗаполнено(ОсновнаяОрганизация));
	//	
	//КонецЕсли;
	//
	//Возврат ОсновнаяОрганизация;
	
КонецФункции

// Обработчик события ПриЧтенииНаСервере в форме документа ЭСФ.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма документа ЭСФ.
//
Процедура ЭСФПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма) Экспорт
	
КонецПроцедуры

Процедура УстановитьСпособОбменаСчетаФактуры(СсылкаСчетФактура, СпособВыставленияПолучения = "Электронно") Экспорт
	
	ТипСчетФактураВыданный 	 = ТипЗнч(СсылкаСчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный");
	ТипСчетФактураПолученный = ТипЗнч(СсылкаСчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный");
	
	СпособОбменаДокументами = Неопределено;
	
	Если ТипСчетФактураВыданный Тогда 
		СпособОбменаДокументами = СсылкаСчетФактура.СпособВыставления;
	ИначеЕсли ТипСчетФактураПолученный Тогда
		СпособОбменаДокументами = СсылкаСчетФактура.СпособПолучения;
	КонецЕсли;		
		
	Если ЗначениеЗаполнено(СпособОбменаДокументами) И СпособОбменаДокументами = Перечисления.СпособыОбменаДокументами[СпособВыставленияПолучения] Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектСчетФактура = СсылкаСчетФактура.ПолучитьОбъект();
	Если ТипСчетФактураВыданный Тогда
		ОбъектСчетФактура.СпособВыставления = Перечисления.СпособыОбменаДокументами[СпособВыставленияПолучения];
	ИначеЕсли ТипСчетФактураПолученный Тогда
		ОбъектСчетФактура.СпособПолучения = Перечисления.СпособыОбменаДокументами[СпособВыставленияПолучения];
	КонецЕсли;
	
	Если ОбъектСчетФактура.Проведен Тогда
		ОбъектСчетФактура.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		ОбъектСчетФактура.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина, если СЕ является ИП, иначе возвращает Ложь.
//
// Параметры:
//  СтруктурнаяЕдиница - См. Справочники.ПрофилиИСЭСФ.СтруктурнаяЕдиница.
//
// Возвращаемое значение:
//  Булево - Истина, если структурная единица является индивидуальным предпринимателем, иначе Ложь.
//
Функция ЭтоИндивидуальныйПредприниматель(Знач СтруктурнаяЕдиница) Экспорт
	
	ЭтоИП = Ложь;
	
	Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.Организации") Тогда
		
		Если СтруктурнаяЕдиница.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			
			ЭтоИП = Истина;	
			
		Иначе
			
			ЭтоИП = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		ЭтоИП = Ложь;
		
	КонецЕсли;
	
	Возврат ЭтоИП;
	
КонецФункции

Функция ВалютаРегламентированногоУчета() Экспорт
	
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
	
КонецФункции

Функция ВыполнитьВФоне(Знач ИмяЭкспортнойПроцедуры, Знач ПараметрыПроцедуры, Знач ПараметрыВыполнения) Экспорт
	
	// Код вынесен в переопределяемый модуль, процедуры запуска фонового задания должна передавать КлючЗадания - ПараметрыВыполнения.УникальныйИдентификатор
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ПараметрыВыполнения.ИдентификаторФормы);
	НаименованиеЗадания = ПараметрыВыполнения.НаименованиеФоновогоЗадания;
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыПроцедуры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ПараметрыЗадания.Добавить(Неопределено);
	Задание = ФоновыеЗадания.Выполнить(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, ПараметрыВыполнения.КлючФоновогоЗадания, НаименованиеЗадания);
	Попытка
		Задание.ОжидатьЗавершения(ПараметрыВыполнения.ОжидатьЗавершение);
	Исключение		
		// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
	КонецПопытки;
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор));
	Результат.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
	
	Возврат Результат;
	
КонецФункции

Функция ФоновоеЗаданиеЗапущено(Знач ИмяПроцедуры) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЗаданиеАктивно", Ложь);
	
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние", ИмяПроцедуры, СостояниеФоновогоЗадания.Активно));
		
	Если МассивФоновыхЗаданий.Количество() > 0 Тогда
		СтруктураВозврата.Вставить("ЗаданиеАктивно", Истина);
		СтруктураВозврата.Вставить("Расположение", МассивФоновыхЗаданий[0].Расположение);
		СтруктураВозврата.Вставить("Начало",  МассивФоновыхЗаданий[0].Начало);
	КонецЕсли;		
	
	Возврат СтруктураВозврата;

КонецФункции

Функция ПолучитьСписокНоменклатурыДляАктуализации(знач ДополнительныеПараметры = Неопределено, знач АдресХранилища = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СведенияОНоменклатуреГСВС.Период КАК Период,
	|	СведенияОНоменклатуреГСВС.НоменклатураГСВС КАК НоменклатураГСВС,
	|	СведенияОНоменклатуреГСВС.ПолныйКодГСВС КАК ПолныйКодГСВС
	|ПОМЕСТИТЬ ВТ_АктивныеЗаписи
	|ИЗ
	|	РегистрСведений.СведенияОНоменклатуреГСВС КАК СведенияОНоменклатуреГСВС
	|ГДЕ
	|	СведенияОНоменклатуреГСВС.ПризнакАктивности
	|	И СведенияОНоменклатуреГСВС.НоменклатураГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.ТНВЭД)
	|	И СведенияОНоменклатуреГСВС.ДействиеЗаписиНачальнаяДата <= &ДатаАктуальности
	|	И (СведенияОНоменклатуреГСВС.ДействиеЗаписиКонечнаяДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ СведенияОНоменклатуреГСВС.ДействиеЗаписиКонечнаяДата >= &ДатаАктуальности)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	НоменклатураГСВС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_АктивныеЗаписи.Период) КАК Период,
	|	ВТ_АктивныеЗаписи.НоменклатураГСВС КАК НоменклатураГСВС
	|ПОМЕСТИТЬ ВТ_ВерхнийСрезАктивныхЗаписей
	|ИЗ
	|	ВТ_АктивныеЗаписи КАК ВТ_АктивныеЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_АктивныеЗаписи.НоменклатураГСВС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	НоменклатураГСВС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Срез.НоменклатураГСВС КАК НоменклатураГСВС,
	|	АктивныеЗаписи.ПолныйКодГСВС КАК ПолныйКодГСВС
	|ПОМЕСТИТЬ ВТ_ПоследниеАктивныеКоды
	|ИЗ
	|	ВТ_ВерхнийСрезАктивныхЗаписей КАК Срез
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АктивныеЗаписи КАК АктивныеЗаписи
	|		ПО (АктивныеЗаписи.Период = Срез.Период)
	|			И (АктивныеЗаписи.НоменклатураГСВС = Срез.НоменклатураГСВС)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатураГСВС,
	|	ПолныйКодГСВС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_АктивныеЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВерхнийСрезАктивныхЗаписей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.КодТНВЭД КАК КодТНВЭД,
	|	Номенклатура.Родитель КАК Родитель,
	|	СведенияОНоменклатуреГСВС.ПолныйКодГСВС КАК ПолныйКодГСВС,
	|	СведенияОНоменклатуреГСВС.НоменклатураГСВС КАК НоменклатураГСВС
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	РегистрСведений.СведенияОНоменклатуреГСВС КАК СведенияОНоменклатуреГСВС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО (Номенклатура.КодТНВЭД <> """")
	|			И (СведенияОНоменклатуреГСВС.ПолныйКодГСВС ПОДОБНО ""%-"" + Номенклатура.КодТНВЭД)
	|ГДЕ
	|	СведенияОНоменклатуреГСВС.НоменклатураГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.ТНВЭД)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатураГСВС,
	|	ПолныйКодГСВС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.КодТНВЭД КАК ТекущийКодТНВЭД,
	|	ЕСТЬNULL(АктивныеКоды.ПолныйКодГСВС, """") КАК НовыйКодТНВЭД,
	|	Номенклатура.НоменклатураГСВС КАК НоменклатураГСВС,
	|	ИСТИНА КАК Пометка,
	|	Номенклатура.Родитель КАК Родитель
	|ИЗ
	|	ВТ_Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследниеАктивныеКоды КАК АктивныеКоды
	|		ПО Номенклатура.НоменклатураГСВС = АктивныеКоды.НоменклатураГСВС
	|ГДЕ
	|	Номенклатура.ПолныйКодГСВС <> ЕСТЬNULL(АктивныеКоды.ПолныйКодГСВС, """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура");
	
	Запрос.УстановитьПараметр("ДатаАктуальности", ДополнительныеПараметры.ДатаАктуальности);
	
	ТаблицаАктуализацииТНВЭД = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из ТаблицаАктуализацииТНВЭД Цикл
		
		//ПозицияЗнака = СтрНайти(ТекСтрока.НовыйКодТНВЭД, "-", НаправлениеПоиска.СКонца);
		//БК 2
		ПозицияЗнака = Найти(ТекСтрока.НовыйКодТНВЭД, "-");
		//БК 2
		Если ПозицияЗнака <> 0 Тогда 
			ТекСтрока.НовыйКодТНВЭД = Сред(ТекСтрока.НовыйКодТНВЭД, ПозицияЗнака + 1, 10);
		КонецЕсли;
		
	КонецЦикла;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ТаблицаАктуализацииТНВЭД);
	
	Возврат АдресХранилища;
	
КонецФункции

Функция ЗагрузитьСправочникГСВСИзФайлаВФоне(знач ДополнительныеПараметры, знач АдресХранилища) Экспорт
	
	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
	Возврат ОбработкаОбменЭСФ.ЗагрузитьГСВСИзСтроки(ДополнительныеПараметры);
	
КонецФункции	

Функция АктуализироватьКодыТНВЭДВФоне(знач ДополнительныеПараметры, знач АдресХранилища = Неопределено) Экспорт
	
	Возврат Обработки.АктуализацияКодовТНВЭДПоГСВС.Создать().АктуализироватьКодыТНВЭД(ДополнительныеПараметры, АдресХранилища);
	
КонецФункции		

///////////////////////////////////////////////////////////////////////////////
// Работа с файлами

Функция ДобавитьФайл(
	Знач ВладелецФайла,
	Знач ИмяБезРасширения,
	Знач РасширениеБезТочки = Неопределено,
	Знач ВремяИзменения = Неопределено,
	Знач ВремяИзмененияУниверсальное = Неопределено,
	Знач АдресФайлаВоВременномХранилище,
	Знач АдресВременногоХранилищаТекста = "",
	Знач Описание = "") Экспорт
					 
	Возврат ПрисоединенныеФайлы.ДобавитьФайл(
		ВладелецФайла,
		ИмяБезРасширения,
		РасширениеБезТочки,
		ВремяИзменения,
		ВремяИзмененияУниверсальное,
		АдресФайлаВоВременномХранилище,
		АдресВременногоХранилищаТекста,
		Описание);
	
КонецФункции

Процедура ОбновитьПрисоединенныйФайл(Знач ПрисоединенныйФайл, Знач ИнформацияОФайле) Экспорт
	
	ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ПрисоединенныйФайл, ИнформацияОФайле);
	
КонецПроцедуры

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",") Экспорт
	
	Возврат Новый Массив;	
	
КонецФункции

// Обработчик подписки владельца присоединенного файла на событие "Перед записью".
// Помечает на удаление связанные файлы.
//
// Параметры:
//  Источник - Объект - владелец присоединенного файла, кроме ДокументОбъект.
//  Отказ    - Булево - признак отказа от записи.
// 
Процедура УстановитьПометкуУдаленияПрисоединенныхФайловДокументов(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Или Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеПрисоединенныеФайлы(Источник);
	
КонецПроцедуры

Процедура ПометитьНаУдалениеПрисоединенныеФайлы(Знач Источник, ИмяСправочника = Неопределено)
		
	УстановитьПривилегированныйРежим(Истина);
		
	Если Источник.ПометкаУдаления = Источник.Ссылка.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФПрисоединенныеФайлы.Ссылка,
	|	ЭСФПрисоединенныеФайлы.Редактирует
	|ИЗ
	|	Справочник.ЭСФПрисоединенныеФайлы КАК ЭСФПрисоединенныеФайлы
	|ГДЕ
	|	ЭСФПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла", Источник.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		
		Если Источник.ПометкаУдаления И Не РезультатЗапроса.Редактирует.Пустая() Тогда
						
			ТекстИсключения = НСтр(
				"ru = '""%Источник%"" не может быть удален,
				|т.к. содержит присоединенный файл ""%ИмяФайла%"",
				|занятый для редактирования.'"); 
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%Источник%", Строка(Источник.Ссылка));
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяФайла%", Строка(РезультатЗапроса.Ссылка));
			
			ВызватьИсключение ТекстИсключения; 
			
		КонецЕсли;
		
		ФайлОбъект = РезультатЗапроса.Ссылка.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		ФайлОбъект.УстановитьПометкуУдаления(Источник.ПометкаУдаления);
		
	КонецЦикла; 
		
КонецПроцедуры  

////////////////////////////////////////////////////////////////////////////////
// Получение внешней или встроенной обработки "ОбменЭСФ"

// См. ЭСФСерверПовтИсп.ИспользоватьВнешнююОбработку()
Функция ИспользоватьВнешнююОбработку() Экспорт
	
	Если Справочники.ВнешниеОбработки.ОбработкаОбменЭСФ.ВнешнийОбъектИспользовать Тогда
		Возврат Истина;	
	Иначе
		Возврат Ложь;
    КонецЕсли;
	
КонецФункции

Функция ПодключитьВнешнююОбработку() Экспорт
		
	Имя = ЭСФКлиентСервер.ИмяВнешнейОбработкиОбменЭСФ();
	Путь = ПолучитьНавигационнуюСсылку(Справочники.ВнешниеОбработки.ОбработкаОбменЭСФ, "ХранилищеВнешнейОбработки");
	
	ИмяПодключеннойОбработки = ВнешниеОбработки.Подключить(Путь, Имя, Ложь);
	
	Возврат ИмяПодключеннойОбработки;
	
КонецФункции

Функция СоздатьВнешнююОбработкуИзФайла() Экспорт

// Сохранить обработку из ИБ во временный файл.
	ХранилищеЗначения = Справочники.ВнешниеОбработки.ОбработкаОбменЭСФ.ХранилищеВнешнейОбработки;	
	ДвоичныеДанные = ХранилищеЗначения.Получить();
	ИмяФайла = ПолучитьИмяВременногоФайла("epf");
	ДвоичныеДанные.Записать(ИмяФайла);
	
	// Обработка должна быть создана именно из файла,
	// т.к. это единственный способ создания обработки
	// для режима обычное приложение в файловой базе.
	Обработка = ВнешниеОбработки.Создать(ИмяФайла, Ложь);
	
	// Файл больше не нужен, т.к. он прочитан и обработка создана.
	ЭСФКлиентСервер.УдалитьВременныеФайлы(ИмяФайла);
	
	Возврат Обработка;
	
КонецФункции

// См. ЭСФСерверПовтИсп.ОбработкаОбменЭСФ()
Функция ОбработкаОбменЭСФ() Экспорт
	
	Если ИспользоватьВнешнююОбработку() Тогда
		Возврат НовыйЭкземплярВнешнейОбработкиОбменЭСФ();	
	Иначе
		Возврат Обработки.ОбменЭСФ.Создать();	
	КонецЕсли;
	
КонецФункции


// См. ЭСФСерверПовтИсп.НовыйЭкземплярВнешнейОбработкиОбменЭСФ()
Функция НовыйЭкземплярВнешнейОбработкиОбменЭСФ() Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
	ДвоичныеДанные = Справочники.ВнешниеОбработки.ОбработкаОбменЭСФ.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	ВнешняяОбработкаОбменЭСФ = ВнешниеОбработки.Создать(ИмяВременногоФайла, Ложь);
	
	Возврат ВнешняяОбработкаОбменЭСФ;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Запрет изменения реквизитов счетов-фактур для которых есть ЭСФ

// Задает какие реквизиты, табличные части, реквизиты табличных частей, счета-фактуры могут изменяться.
//
// Если на основании счета-фактуры создан и отправлен ЭСФ, 
// то изменяться могут не все данные счета-фактуры, 
// чтобы не произошло рассинхронизации между счетом-фактурой и ЭСФ.
//
// Параметры:
//  МассивИзменяемыхРеквизитов - Массив - Массив имен объектов, которые можно изменять.
//                                       
Процедура ЗаполнитьМассивИзменяемыхРеквизитовДокументаСчетФактураВыданный(МассивИзменяемыхРеквизитов) Экспорт
	
	// // Например:
	// 
	// // Значение реквизита Комментарий может изменяться.
	// МассивИзменяемыхРеквизитов.Добавить("Комментарий");  
	// 
	// // Все параметры табличной части Товары могут изменяться,
	// // например: количество строк, порядок строк, значения реквизитов строк.
	// МассивИзменяемыхРеквизитов.Добавить("Товары.*");  
	//
	// // В табличной части Товары могут изменяться только реквизиты Наименование и Количество.
	// // Порядок строк, количество строк и остальные реквизиты должны остаться неизменными.
	// МассивИзменяемыхРеквизитов.Добавить("Товары.Наименование");
	// МассивИзменяемыхРеквизитов.Добавить("Товары.Количество");
	
	МассивИзменяемыхРеквизитов.Добавить("СуммаВключаетАкциз");
	МассивИзменяемыхРеквизитов.Добавить("СуммаВключаетНДС");
	МассивИзменяемыхРеквизитов.Добавить("СчетКонтрагента");
	МассивИзменяемыхРеквизитов.Добавить("УчитыватьАкциз");	
	МассивИзменяемыхРеквизитов.Добавить("УчитыватьНДС");	
	МассивИзменяемыхРеквизитов.Добавить("ДоверенностьВыдана");
	МассивИзменяемыхРеквизитов.Добавить("ДоверенностьЛицо");
	МассивИзменяемыхРеквизитов.Добавить("ДокументОснование");
	МассивИзменяемыхРеквизитов.Добавить("Комментарий");
	МассивИзменяемыхРеквизитов.Добавить("ПодтвержденДокументамиОтгрузки");	
	МассивИзменяемыхРеквизитов.Добавить("ТипЦен");	
	МассивИзменяемыхРеквизитов.Добавить("СтранаНазначения");
	МассивИзменяемыхРеквизитов.Добавить("РучнаяКорректировка");
	МассивИзменяемыхРеквизитов.Добавить("СпособВыставления");
	МассивИзменяемыхРеквизитов.Добавить("ДокументыОснования.*");
	МассивИзменяемыхРеквизитов.Добавить("Товары.КлючСвязи");
	МассивИзменяемыхРеквизитов.Добавить("НомераГТД.КлючСвязи");
	МассивИзменяемыхРеквизитов.Добавить("НомераГТД.УдалитьНоменклатура");
	МассивИзменяемыхРеквизитов.Добавить("НомераГТД.УдалитьКоэффициент");
	
КонецПроцедуры

// Задает какие реквизиты, табличные части, реквизиты табличных частей, счета-фактуры могут изменяться.
//
// Если счет-фактура создан на основании ЭСФ, 
// то изменяться могут не все данные счета-фактуры, 
// чтобы не произошло рассинхронизации между счетом-фактурой и ЭСФ.
//
// Параметры:
//  МассивИзменяемыхРеквизитов - Массив - Массив имен объектов, которые можно изменять.
//                                       
Процедура ЗаполнитьМассивИзменяемыхРеквизитовДокументаСчетФактураПолученный(МассивИзменяемыхРеквизитов) Экспорт
	
	// // Например:
	// 
	// // Значение реквизита Комментарий может изменяться.
	// МассивИзменяемыхРеквизитов.Добавить("Комментарий");  
	// 
	// // Все параметры табличной части Товары могут изменяться,
	// // например: количество строк, порядок строк, значения реквизитов строк.
	// МассивИзменяемыхРеквизитов.Добавить("Товары.*");  
	//
	// // В табличной части Товары могут изменяться только реквизиты Наименование и Количество.
	// // Порядок строк, количество строк и остальные реквизиты должны остаться неизменными.
	// МассивИзменяемыхРеквизитов.Добавить("Товары.Наименование");
	// МассивИзменяемыхРеквизитов.Добавить("Товары.Количество");
	
	МассивИзменяемыхРеквизитов.Добавить("ДокументОснование");	
	МассивИзменяемыхРеквизитов.Добавить("Комментарий");
	МассивИзменяемыхРеквизитов.Добавить("ПодтвержденДокументамиОтгрузки");
	МассивИзменяемыхРеквизитов.Добавить("ТипЦен");
	МассивИзменяемыхРеквизитов.Добавить("РучнаяКорректировка");
	МассивИзменяемыхРеквизитов.Добавить("СпособПолучения");
	МассивИзменяемыхРеквизитов.Добавить("ДокументыОснования.*");
	МассивИзменяемыхРеквизитов.Добавить("Услуги.Содержание");
	МассивИзменяемыхРеквизитов.Добавить("ДоговорКонтрагента");
	
КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////
// Сторнирование счетов-фактур

// Возвращает данные документов, сторнирующих счет-фактуру.
//
// Параметры:
//  СчетФактура - ДокументСсылка.СчетФактураВыданный, ДокументСсылка.СчетФактураПолученный - 
//   Счет-фактура, для которого необходимо получить данные сторнирующих документов.
//
// Возвращаемое значение:
//  Массив - Данные сторнирующих документов. Каждый элемент массива:
//   Структура - Данные сторнирующего документа.
//    |- Ссылка - Ссылка на сторнирующий документ.
//  Если сторниурующие документы не найдены, то возвращает пустой массив.
//
Функция ДокументыСторнирующиеСчетФактуру(Знач СчетФактура) Экспорт
	
	МассивСторнирований = Новый Массив;
	
	Если НЕ СчетФактура.Пустая() Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сторнирование.Ссылка
		|ИЗ
		|	Документ.Сторнирование КАК Сторнирование
		|ГДЕ
		|	Сторнирование.ДокументОснование = &СчетФактура";
		
		Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Сторнирование = Новый Структура;
				Сторнирование.Вставить("Ссылка", Выборка.Ссылка);
				МассивСторнирований.Добавить(Сторнирование);
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат МассивСторнирований;
	
КонецФункции

// Синхронизирует сторнирующий документ со счетом-фактурой.
//
// Параметры:
//  СчетФактураОбъект - ДокументОбъект.СчетФактураВыданный, ДокументОбъект.СчетФактураПолученный -
//   Счет-фактура, на основании которого необходимо обновить сторнирующий документ.
//  ОбъектСторно - ДокументОбъект.<ИмяСторно> - Сторнирующий документ, который необходимо обновить.
//
Процедура ОбновитьСторнирующийДокумент(Знач СчетФактураОбъект, ОбъектСторно) Экспорт
	
	ОбъектСторно.ПометкаУдаления = СчетФактураОбъект.ПометкаУдаления;	
	ОбъектСторно.Проведен = СчетФактураОбъект.Проведен;
	
КонецПроцедуры

// Обновляет движения сторнирующего документа на основании движений счета-фактуры.
//
// Параметры:
//  ДвиженияСчетаФактуры - КоллекцияДвижений - Коллекция движений счета-фактуры полученного или выданного.
//  ОбъектСторно - ДокументОбъект.<ИмяСторно> - Сторнирующий документ, 
//   движения которого необходимо обновить на основании движений счета-фактуры.
// 
Процедура ОбновитьДвиженияСторнирующегоДокумента(Знач ДвиженияСчетаФактуры, ОбъектСторно) Экспорт
	
	ОбъектСторно.Движения.СведенияСчетовФактурПолученных.Очистить();
	ОбъектСторно.Движения.СведенияСчетовФактурВыданных.Очистить();
	
	// Создать сторнирующие движения по регистру СведенияСчетовФактурПолученных.
	Если ДвиженияСчетаФактуры.Найти("СведенияСчетовФактурПолученных") <> Неопределено Тогда
		КоллецияДвиженийСчетаФактуры = ДвиженияСчетаФактуры.СведенияСчетовФактурПолученных;	
		Для Каждого ДвижениеСчетаФактуры Из КоллецияДвиженийСчетаФактуры Цикл
			ДвиженияСторно = ОбъектСторно.Движения.СведенияСчетовФактурПолученных.Добавить();
			ЗаполнитьЗначенияСвойств(ДвиженияСторно, ДвижениеСчетаФактуры, , "ВидДвижения");
			ДвиженияСторно.СуммаВВалютеДоговора = -ДвиженияСторно.СуммаВВалютеДоговора;
			ДвиженияСторно.СуммаНДСВВалютеДоговора = -ДвиженияСторно.СуммаНДСВВалютеДоговора;
			ДвиженияСторно.СуммаРегл = -ДвиженияСторно.СуммаРегл;
			ДвиженияСторно.СуммаНДСРегл = -ДвиженияСторно.СуммаНДСРегл;
			ДвиженияСторно.ОборотПоРеализацииВВалютеДоговора = -ДвиженияСторно.ОборотПоРеализацииВВалютеДоговора;
			ДвиженияСторно.ОборотПоРеализацииРегл = -ДвиженияСторно.ОборотПоРеализацииРегл;			
		КонецЦикла;
	КонецЕсли;
	
	// Создать сторнирующие движения по регистру СведенияСчетовФактурВыданных.
	Если ДвиженияСчетаФактуры.Найти("СведенияСчетовФактурВыданных") <> Неопределено Тогда
		КоллецияДвиженийСчетаФактуры = ДвиженияСчетаФактуры.СведенияСчетовФактурВыданных;	
		Для Каждого ДвижениеСчетаФактуры Из КоллецияДвиженийСчетаФактуры Цикл
			ДвиженияСторно = ОбъектСторно.Движения.СведенияСчетовФактурВыданных.Добавить();
			ЗаполнитьЗначенияСвойств(ДвиженияСторно, ДвижениеСчетаФактуры, , "ВидДвижения");
			ДвиженияСторно.СуммаВВалютеДоговора = -ДвиженияСторно.СуммаВВалютеДоговора;
			ДвиженияСторно.СуммаНДСВВалютеДоговора = -ДвиженияСторно.СуммаНДСВВалютеДоговора;
			ДвиженияСторно.СуммаАкцизаВВалютеДоговора = -ДвиженияСторно.СуммаАкцизаВВалютеДоговора;
			ДвиженияСторно.СуммаРегл = -ДвиженияСторно.СуммаРегл;
			ДвиженияСторно.СуммаНДСРегл = -ДвиженияСторно.СуммаНДСРегл;
			ДвиженияСторно.ОборотПоРеализацииРегл = -ДвиженияСторно.ОборотПоРеализацииРегл;
			ДвиженияСторно.СуммаАкцизаРегл = -ДвиженияСторно.СуммаАкцизаРегл;
			ДвиженияСторно.ОборотПоРеализацииВВалютеДоговора = -ДвиженияСторно.ОборотПоРеализацииВВалютеДоговора;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочие

// Возвращает сокращенный уникальный идентификатор текущей конфигурации
//
Функция ИДКонфигурации() Экспорт
	МетаданныеИмя = Метаданные.Имя;
		
	Если МетаданныеИмя = "БухгалтерияДляКазахстана" ИЛИ МетаданныеИмя = "БухгалтерияДляКазахстанаБазовая" Тогда
		Возврат "БухгалтерияДляКазахстана";
	ИначеЕсли МетаданныеИмя = "ЗарплатаИУправлениеПерсоналомДляКазахстана" Тогда
		Возврат "ЗарплатаИУправлениеПерсоналомДляКазахстана";
	ИначеЕсли МетаданныеИмя = "УправлениеТорговлейДляКазахстана" ИЛИ МетаданныеИмя = "УправлениеТорговлейДляКазахстанаБазовая" Тогда
		Возврат "УправлениеТорговлейДляКазахстана";
	ИначеЕсли МетаданныеИмя = "УправлениеТорговымПредприятиемДляКазахстана" Тогда
		Возврат "УправлениеТорговымПредприятиемДляКазахстана";
	ИначеЕсли МетаданныеИмя = "УправлениеПроизводственнымПредприятиемДляКазахстана" Тогда
		Возврат "УправлениеПроизводственнымПредприятиемДляКазахстана";
	Иначе
		Возврат МетаданныеИмя;
	КонецЕсли;
	
КонецФункции

Функция РеквизитыПользователя(Пользователь) Экспорт
	РеквизитыПользователя = Новый Структура("ИдентификационныйНомер, Фамилия, Имя, Отчество, Должность");
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ФИОФизЛицСрезПоследних.Фамилия,
	                      |	ФИОФизЛицСрезПоследних.Имя,
	                      |	ФИОФизЛицСрезПоследних.Отчество,
	                      |	ФИОФизЛицСрезПоследних.ФизЛицо.ИдентификационныйКодЛичности КАК ИдентификационныйНомер
	                      |ИЗ
	                      |	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних");
	Запрос.УстановитьПараметр("ФизЛицо", Пользователь.Физлицо);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка  = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(РеквизитыПользователя, Выборка);
	КонецЕсли;
	
	Возврат РеквизитыПользователя
КонецФункции	

Функция РеквизитыОрганизации(Организация) Экспорт
	РеквизитыОрганизации = Новый Структура("ИдентификационныйНомер, Наименование, Адрес");
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Организации.Ссылка,
	                      |	Организации.ИдентификационныйНомер КАК ИдентификационныйНомер,
	                      |	ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(400)) КАК Наименование
	                      |ПОМЕСТИТЬ Организации
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
						  |	ГДЕ Организации.Ссылка = &Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Организации.Ссылка КАК Объект,
	                      |	Организации.ИдентификационныйНомер КАК ИдентификационныйНомер,
	                      |	Организации.Наименование,
						  |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(400)) КАК Адрес
	                      |ИЗ
	                      |	Организации КАК Организации
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                      |		ПО (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	                      |			И Организации.Ссылка = КонтактнаяИнформация.Объект
	                      |			И (КонтактнаяИнформация.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица)))");
						  
	Запрос.УстановитьПараметр("Ссылка", Организация);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка  = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(РеквизитыОрганизации, Выборка);
	КонецЕсли;	
	Возврат РеквизитыОрганизации;
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = ЭСФКлиентСервер.МассивИмен(Реквизиты);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"), Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	Если Ссылка = Неопределено Тогда
		Результат = Новый Структура;
		Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
			Результат.Вставить(КлючИЗначение.Ключ, Неопределено);
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
	
КонецФункции 

// Возвращает роль, с помощью которой пользователь при открытии программы может видеть
// проблемные ЭСФ других пользователей
Функция ДоступнаРольБезусловногоРедактированияЭСФ() Экспорт
	Возврат РольДоступна("ПолныеПрава");
КонецФункции

// Возвращает роль, для которой доступно открытие формы очереди
Функция ДоступнаРольРедактированияОчередиОтправкиЭСФ() Экспорт
	Возврат РольДоступна("ПолныеПрава")
			ИЛИ РольДоступна("Бухгалтер");
КонецФункции

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Булево: Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

// Заполняет реквизит КодЭСФ существующих записей справочника КлассификаторЕдиницИзмерения
Процедура ЗаполнитьКодыЭСФЕдиницИзмерения() Экспорт
		
	МакетСправочника 				= Справочники.КлассификаторЕдиницИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
	ОбластьКодЭСФ 					= МакетСправочника.Области.КодЭСФ;
	КомментарийОтсутствияКодаЭСФ	= НСтр("ru='Не удалось определить ""Код по классификатору ИС ЭСФ"" для единицы измерения с кодом %Код%'");
	КомментарийОтсутствияКода 		= НСтр("ru='Не заполнен Код единицы измерения ""%Наименование%""'");
	
	Запрос = Новый Запрос;                    
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторЕдиницИзмерения.Ссылка,
		|	КлассификаторЕдиницИзмерения.Код,
		|	КлассификаторЕдиницИзмерения.КодЭСФ
		|ИЗ
		|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
		|ГДЕ
		|	КлассификаторЕдиницИзмерения.КодЭСФ = """" ";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСправочник = РезультатЗапроса.Выбрать();

	
	Пока ВыборкаСправочник.Следующий() цикл
		Код = СокрЛП(ВыборкаСправочник.Код);
		Если ЗначениеЗаполнено(Код) Тогда
			НайденнаяОбласть = МакетСправочника.НайтиТекст(Код,,МакетСправочника.Области.КодЧисловой, Истина, Истина);
			Если НайденнаяОбласть <> Неопределено Тогда
				КодЭСФ = МакетСправочника.Область(НайденнаяОбласть.Верх, ОбластьКодЭСФ.Лево, НайденнаяОбласть.Низ, ОбластьКодЭСФ.Право).Текст;
				Если КодЭСФ <> "" Тогда
					
					СправочникОбъект = ВыборкаСправочник.Ссылка.ПолучитьОбъект();
					СправочникОбъект.КодЭСФ = КодЭСФ;
					Попытка
						СправочникОбъект.Записать();
					Исключение
						ТекстСообщения = НСтр("ru='Операция не выполнена'");
						ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
					
				Иначе
					ТекстОшибки = СтрЗаменить(КомментарийОтсутствияКодаЭСФ,"%Код%", Код);
					ЗаписьЖурналаРегистрации("ЭСФСерверПереопределяемый.ЗаполнитьКодыЭСФЕдиницИзмерения", УровеньЖурналаРегистрации.Предупреждение,, ВыборкаСправочник, ТекстОшибки);
				КонецЕсли;
			Иначе
			КонецЕсли;
		Иначе
			ТекстОшибки = СтрЗаменить(КомментарийОтсутствияКода,"%Наименование%", ВыборкаСправочник.Ссылка); 
			ЗаписьЖурналаРегистрации("ЭСФСерверПереопределяемый.ЗаполнитьКодыЭСФЕдиницИзмерения", УровеньЖурналаРегистрации.Предупреждение,,ВыборкаСправочник, ТекстОшибки + Код);	
		КонецЕсли;
	КонецЦикла
КонецПроцедуры

Функция ЭтоУслуга(Номенклатура) Экспорт
	
	Услуга = Ложь;
	
	Если ЗначениеЗаполнено(Номенклатура) И ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Услуга = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Номенклатура, "Услуга");
	КонецЕсли;
	
	Возврат Услуга;	
	
КонецФункции

Процедура ПолучательРозничныйПокупатель(ЭСФ, ПолучателиСтрока, ВерсияЭСФ) Экспорт 
	
КонецПроцедуры

Функция ЭтоЭСФПоРознице(ОбъектЭСФ) Экспорт 
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьБИНФилиалаПокупателя(ПолучателиСтрока, ВыборкаРеквизитыПолучателя) Экспорт
	
	Если ВыборкаРеквизитыПолучателя.Грузополучатель <> ВыборкаРеквизитыПолучателя.Получатель_Получатель Тогда
		РеквизитыГрузополучателя = ЗначенияРеквизитовОбъекта(ВыборкаРеквизитыПолучателя.Грузополучатель, "УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуре, ИдентификационныйКодЛичности, ГоловнойКонтрагент");
		Если РеквизитыГрузополучателя.УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуре <> Неопределено
			И РеквизитыГрузополучателя.УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуре
			И ВыборкаРеквизитыПолучателя.Получатель_Получатель = РеквизитыГрузополучателя.ГоловнойКонтрагент Тогда
			ПолучателиСтрока.БИНФилиала = РеквизитыГрузополучателя.ИдентификационныйКодЛичности;
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры	

Функция ПолучитьПризнакЯвляетсяСтруктурнымПодразделениемНерезидента(ПоставщикОрганизация) Экспорт
	
	ЯвляетсяСтруктурнымПодразделениемНерезидента = Ложь;
	
	Если ТипЗнч(ПоставщикОрганизация) = Тип("СправочникСсылка.Организации") Тогда
		
		Если ЗначениеЗаполнено(ПоставщикОрганизация.ГоловнаяОрганизация) И 
			ПоставщикОрганизация.ГоловнаяОрганизация <> ПоставщикОрганизация Тогда
			
			Если Лев(ПоставщикОрганизация.ГоловнаяОрганизация.КБЕ, 1) = "2" Тогда
				ЯвляетсяСтруктурнымПодразделениемНерезидента = Истина;
			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПоставщикОрганизация) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		
		Если ЗначениеЗаполнено(ПоставщикОрганизация.Владелец)
			И ЗначениеЗаполнено(ПоставщикОрганизация.Владелец.КБЕ) Тогда		
			
			Если Лев(ПоставщикОрганизация.Владелец.КБЕ, 1) = "2" Тогда
				ЯвляетсяСтруктурнымПодразделениемНерезидента = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЯвляетсяСтруктурнымПодразделениемНерезидента;
	
КонецФункции

// Получает данные о единице измерения для заполнения ТЧ в ЭСФ.
//
Функция ПолучитьДанныеЕдиницыИзмерения(Ссылка) Экспорт
	
	Наименование = "";
	Код = "";
	
	Если Не Ссылка = Неопределено Тогда
		Наименование = Ссылка.Наименование;
		Код = Ссылка.КодЭСФ;
	КонецЕсли;
		
	ДанныеЕдиницы = Новый Структура("Наименование, Код", Наименование, Код);
	
	Возврат ДанныеЕдиницы;
	
КонецФункции

Процедура ДокументыИмпортаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	КомандаДетализацияИмпорта  = Форма.Элементы.Найти("ДетализацияИмпорта");
	
	Если КомандаДетализацияИмпорта <> Неопределено Тогда
		КомандаДетализацияИмпорта.Видимость = ЭСФСервер.ИспользоватьНДССчет();
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьНомерДатуДокументаПоставки(ДокументПоставки, ДатаДокументаПоставки = Неопределено) Экспорт
	
	СтруктураРеквизитов = Новый Структура("ДокументПодтверждающийПоставкуНомер, ДокументПодтверждающийПоставкуДата");
	СтруктураРеквизитов.ДокументПодтверждающийПоставкуНомер = "";
	СтруктураРеквизитов.ДокументПодтверждающийПоставкуДата = ?(ЗначениеЗаполнено(ДатаДокументаПоставки), ДатаДокументаПоставки, Дата(1, 1, 1, 0, 0, 0));
	
	Если ЗначениеЗаполнено(ДокументПоставки) Тогда
		Если ЭСФСерверПереопределяемый.ЕстьРеквизитДокумента("НомерДокументаГЗ", ДокументПоставки.Метаданные()) 
			И ЭСФСерверПереопределяемый.ЕстьРеквизитДокумента("ДатаДокументаГЗ", ДокументПоставки.Метаданные()) Тогда
			
			
			НомерДокументаГЗ = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ДокументПоставки, "НомерДокументаГЗ");
			ДатаДокументаГЗ  = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ДокументПоставки, "ДатаДокументаГЗ");
			
			Если ЗначениеЗаполнено(НомерДокументаГЗ) И ЗначениеЗаполнено(ДатаДокументаГЗ) Тогда
				СтруктураРеквизитов.ДокументПодтверждающийПоставкуНомер = НомерДокументаГЗ;
				СтруктураРеквизитов.ДокументПодтверждающийПоставкуДата = ДатаДокументаГЗ;
			Иначе
				СтруктураРеквизитов.ДокументПодтверждающийПоставкуНомер = ЭСФСерверПереопределяемый.ПолучитьНомерНаПечать(ДокументПоставки);
			КонецЕсли;
		Иначе
			СтруктураРеквизитов.ДокументПодтверждающийПоставкуНомер = ЭСФСерверПереопределяемый.ПолучитьНомерНаПечать(ДокументПоставки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

//Возвращает текст запроса для получения кода ТНВЭД для ОС и НМА
Функция ТекстЗапросаКодТНВЭДОСИНМА() Экспорт

	ТекстЗапроса = " ИЛИ Товары.Товар ССЫЛКА Справочник.ОсновныеСредства 
		 |ИЛИ Товары.Товар ССЫЛКА Справочник.НематериальныеАктивы ";
	
	Возврат ТекстЗапроса;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Фоновые задания

Функция СообщенияФоновогоЗадания(ИдентификаторЗадания) Экспорт

	// не переопределять на серверный модуль, тк возникает ошибка передачи мутабельного значения
	СообщенияПользователю = Новый Массив;
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю();
	КонецЕсли;
	
	Возврат СообщенияПользователю;
	
КонецФункции
 
Функция ЗаданиеВыполнено(ИдентификаторЗадания) Экспорт
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#Область РегламентноеЗадание

// Определяет следующие свойств регламентных заданий:
//  - зависимость от функциональных опций.
//  - возможность выполнения в различных режимах работы программы.
//  - прочие параметры.
//
// Параметры:
//  Настройки - ТаблицаЗначений - таблица значений с колонками:
//    * РегламентноеЗадание - ОбъектМетаданных:РегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданных:ФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ      - Булево - если регламентное задание зависит более, чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево, Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - неопределено.
//    * ДоступноВМоделиСервиса      - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в модели сервиса.
//        По умолчанию - неопределено.
//    * РаботаетСВнешнимиРесурсами  - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.). Не следует устанавливать
//        значение Истина, для регламентных заданий, не модифицирующих данные во внешних источниках.
//        Например, регламентное задание ЗагрузкаКурсовВалют. Регламентные задания, работающие с внешними ресурсами,
//        автоматически отключаются в копии информационной базы. По умолчанию - Ложь.
//    * Параметризуется             - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
// Пример:
//	Настройка = Настройки.Добавить();
//	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСтатусовДоставкиSMS;
//	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьПочтовыйКлиент;
//	Настройка.ДоступноВМоделиСервиса = Ложь;
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ПриНачалеВыполненияРегламентногоЗадания() Экспорт
	
	Возврат;
	
КонецПроцедуры	

// Проверяет наличие текущего пользователя при выполнении рег.задания по синхронизации ЭСФ
Функция ПроверитьНаличиеТекущегоПользователя(ТекущийПользователь) Экспорт
	
	//СсылкаНеуказанногоПользователя = Пользователи.СсылкаНеуказанногоПользователя();
	//Если ТекущийПользователь = СсылкаНеуказанногоПользователя Тогда
	//	// Если текущий пользователь это неуказанный пользователь, значит задание выполняется на сервере
	//	Возврат Истина;
	//Иначе	
	//	// В этом случае для задания берем активного пользователя
	//	Возврат Ложь;
	//КонецЕсли;
	
	
	// Содержание функции для БК 2:
	//
	Если ТекущийПользователь.Пустая() Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

#КонецОбласти

#Область ОбработкаПроведения

Процедура УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
КонецПроцедуры

Процедура ДокументЭСФ_ОбработкаПроверкиЗаполнения(ОбъектЭСФ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
КонецПроцедуры

Процедура ДокументЭСФ_ПроверитьЗаполнениеТабличнойЧастиПострочно(ОбъектЭСФ, ПроверяемаяТабличнаячасть, ИмяТабличнойЧасти, Отказ, ЕстьТовары = Ложь, ЕстьТоварыВС = Ложь)
КонецПроцедуры

Функция ПроверитьВозможностьЗаписиСчетаФактуры(Знач Объект, МассивСообщений) Экспорт
	
	РазрешитьЗапись = Истина;
	
	// Не должно быть более одного счета-фактуры с видом Обычный или Дополнительный, 
	// подчиненных конкретному документу реализации или поступления. Исключение: Авансовый отчет.	
	Если Объект.ВидСчетаФактуры <> Перечисления.ВидыСчетовФактур.Исправленный Тогда				
		Запрос = Новый Запрос;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетФактураВыданныйДокументыОснования.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(СчетФактураВыданныйДокументыОснования.Ссылка) КАК СсылкаПредставление,
		|	СчетФактураВыданныйДокументыОснования.ДокументОснование,
		|	ПРЕДСТАВЛЕНИЕ(СчетФактураВыданныйДокументыОснования.ДокументОснование) КАК ДокументОснованиеПредставление,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры КАК ВидСчетаФактуры
		|ПОМЕСТИТЬ ВТ_ПодчиненныеДокументы
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|ГДЕ
		|	СчетФактураВыданныйДокументыОснования.ДокументОснование В(&ДокументыОснования)
		|	И СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры <> ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Исправленный)";
							   
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ВТ_ПодчиненныеДокументы", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Выданный", "Полученный");
			
			ДопУсловиеВходящихСФ = " И (НЕ СчетФактураПолученныйДокументыОснования.ДокументОснование ССЫЛКА Документ.АвансовыйОтчет)";
			Запрос.Текст = Запрос.Текст + ДопУсловиеВходящихСФ; 
		Иначе 
			Запрос.Текст = Запрос.Текст + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПодчиненныеДокументы.Ссылка,
			|	ПодчиненныеДокументы.СсылкаПредставление,
			|	ПодчиненныеДокументы.ДокументОснование,
			|	ПодчиненныеДокументы.ДокументОснованиеПредставление,
			|	ПодчиненныеДокументы.ВидСчетаФактуры
			|ИЗ
			|	ВТ_ПодчиненныеДокументы КАК ПодчиненныеДокументы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаФактурыПрекратившиеДействие.СрезПоследних(
			|				,
			|				СчетФактура В
			|					(ВЫБРАТЬ
			|						ВТ_ПодчиненныеДокументы.Ссылка
			|					ИЗ
			|						ВТ_ПодчиненныеДокументы КАК ВТ_ПодчиненныеДокументы)) КАК СчетаФактурыПрекратившиеДействие
			|		ПО ПодчиненныеДокументы.Ссылка = СчетаФактурыПрекратившиеДействие.СчетФактура
			|ГДЕ
			|	СчетаФактурыПрекратившиеДействие.СчетФактура ЕСТЬ NULL ";
		КонецЕсли;
		
		
		Запрос.УстановитьПараметр("ДокументыОснования", Объект.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
		Результат  = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда			
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Ссылка <> Объект.Ссылка Тогда
					
					РазрешитьЗапись = Ложь; // Уже есть СФ выписанный на основании документа отгрузки/реализации.
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Для документа %Документ% уже введен счет-фактура %СчетФактура%.'");
					Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Документ%", Выборка.ДокументОснованиеПредставление);
					Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%СчетФактура%", Выборка.СсылкаПредставление);
					Сообщение.УстановитьДанные(Объект);
					Сообщение.Поле = "ДокументыОснования";
					МассивСообщений.Добавить(Сообщение);
					
				КонецЕсли
				
			КонецЦикла;
			
		КонецЕсли;		
		
	КонецЕсли;	
	
	// Не должно быть более одного исправленного счета-фактуры, исправляющего конкретный счет-фактуру,
	// но один счет-фактура может иметь множество дополнительных счетов-фактур.
	Если Объект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Исправленный Тогда		
		
		// Запрос 1. В таблицу ВТ_ИсправленныеСФ добавляются исправленные СФ,
		// которые имеют ссылки на основной СФ, указанный в текущем исправленном СФ.
		// Если исправленный СФ помечен на удаление, то он не учитывается.
		//
		// Запрос 2. В таблицу ВТ_СторнированныеИсправленныеСФ добавляются сторнированные СФ,
		// эти сторнированные СФ не нужно учитывать, т.к. сторнирование вводится при отзыве и отклонении.
		//
		// Запрос 3. Выбираются не сторнированные исправленные СФ,
		// которые имеют ссылку на на основной СФ, указанный в текущем исправленном СФ.
		
		Запрос  = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка
		|ПОМЕСТИТЬ ВТ_ИсправленныеСФ
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ОсновнойСчетФактура = &ОсновнойСчетФактура
		|	И СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Исправленный)
		|	И НЕ СчетФактураВыданный.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ИсправленныеСФ.Ссылка
		|ПОМЕСТИТЬ ВТ_СторнированныеИсправленныеСФ
		|ИЗ
		|	ВТ_ИсправленныеСФ КАК ВТ_ИсправленныеСФ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Сторнирование КАК Сторнирование
		|		ПО ВТ_ИсправленныеСФ.Ссылка = Сторнирование.ДокументОснование
		|			И (НЕ Сторнирование.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ИсправленныеСФ.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_ИсправленныеСФ.Ссылка) КАК СсылкаПредставление,
		|	ВТ_ИсправленныеСФ.Ссылка.ОсновнойСчетФактура,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_ИсправленныеСФ.Ссылка.ОсновнойСчетФактура) КАК ОсновнойСчетФактураПредставление,
		|	ВТ_ИсправленныеСФ.Ссылка.ВидСчетаФактуры
		|ИЗ
		|	ВТ_ИсправленныеСФ КАК ВТ_ИсправленныеСФ
		|ГДЕ
		|	НЕ ВТ_ИсправленныеСФ.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_СторнированныеИсправленныеСФ.Ссылка
		|				ИЗ
		|					ВТ_СторнированныеИсправленныеСФ КАК ВТ_СторнированныеИсправленныеСФ)";
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Выданный", "Полученный");			
		КонецЕсли;	   
		
		Запрос.УстановитьПараметр("ОсновнойСчетФактура", Объект.ОсновнойСчетФактура);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда			
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Ссылка <> Объект.Ссылка Тогда
					
					РазрешитьЗапись = Ложь; // Уже есть счет-фактура выписанный на основании исправляемого документа.					
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Для счета-фактуры ""%ОсновнойСФ%"" уже введен исправленный счет-фактура ""%ИсправленныйСФ%"".'");
					Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%ОсновнойСФ%", Выборка.ОсновнойСчетФактураПредставление);
					Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%ИсправленныйСФ%", Выборка.СсылкаПредставление);
					Сообщение.УстановитьДанные(Объект);
					Сообщение.Поле = "ОсновнойСчетФактура";
					МассивСообщений.Добавить(Сообщение);
					
				КонецЕсли	
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РазрешитьЗапись;
	
КонецФункции

#КонецОбласти

#Область ДлительныеОперации

Функция ОперацияВыполнена(Знач ИдентификаторЗадания, Знач ИсключениеПриОшибке = Ложь, Знач ВыводитьПрогрессВыполнения = Ложь, 
	Знач ВыводитьСообщения = Ложь) Экспорт
	
	Возврат ДлительныеОперации.ОперацияВыполнена(ИдентификаторЗадания, ИсключениеПриОшибке, ВыводитьПрогрессВыполнения, ВыводитьСообщения);
	
КонецФункции

// Отменяет выполнение фонового задания по переданному идентификатору.
// 
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания. 
// 
Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания) Экспорт 
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

#КонецОбласти 

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура ПечатьЭСФ(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

#КонецОбласти 

#Область НомераГТД

Функция ВедетсяУчетПоТоварамОрганизаций(ДатаДокумента) Экспорт
	
	Возврат НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(ДатаДокумента);
КонецФункции

Функция ПолучитьИсточникиИзНомераГТД(НомерГТД) Экспорт
	
	СтруктураИсточника = Новый Структура("НомерПозицииВДекларацииИлиЗаявлении, НомерЗаявленияВРамкахТС, КодТНВЭД, ТоварНаименованиеВРамкахТС, ПризнакПроисхождения");
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИсточникиПроисхождения.НомерСтрокиГТД КАК НомерПозицииВДекларацииИлиЗаявлении,
	|	ИсточникиПроисхождения.Код КАК НомерЗаявленияВРамкахТС,
	|	ИсточникиПроисхождения.КодТНВЭД,
	|	ИсточникиПроисхождения.НаименованиеТовара КАК ТоварНаименованиеВРамкахТС,
	|	ИсточникиПроисхождения.ПризнакПроисхождения КАК ПризнакПроисхождения
	|ИЗ
	|	Справочник.НомераГТД КАК ИсточникиПроисхождения
	|ГДЕ
	|	ИсточникиПроисхождения.Ссылка = &ИсточникПроисхождения";
	
	Запрос.Текст = ТекстЗапроса;	
	Запрос.УстановитьПараметр("ИсточникПроисхождения", НомерГТД);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураИсточника, ВыборкаДетальныеЗаписи);
				
	КонецЕсли;
	
	Возврат СтруктураИсточника;

КонецФункции

#КонецОбласти 

#Область ОбщегоНазначения

Функция ИспользоватьОбменВС() Экспорт
	Возврат Ложь;
КонецФункции	

Функция ПолучитьСтруктурнуюЕдиницу(Организация, СтруктурноеПодразделение, КадровыйДокумент = Ложь) Экспорт
	
	Возврат ОбщегоНазначения.ПолучитьСтруктурнуюЕдиницу(Организация, СтруктурноеПодразделение, КадровыйДокумент);	
		
КонецФункции // ПолучитьСтруктурнуюЕдиницу()

Функция ПолучитьПлательщикаНДСВСчетеФактуре(ОрганизацияКонтрагент) Экспорт
	
	Возврат УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(ОрганизацияКонтрагент);
	
КонецФункции // ПолучитьПлательщикаНДСВСчетеФактуре(ОрганизацияКонтрагент)

// Функция предназначена для заполнения табличных частей документов "Участники совместной деятельности".
// Возвращает измененную табличную часть.
//
// Параметры:
//  ДоговорКонтрагента  - договор с контрагентом, по которому должна быть заполнена таб часть,
//  ТабЧастьУчастникиСовместнойДеятельности - табличная часть документа
//
Функция ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(ДоговорКонтрагента, ТабЧастьУчастникиСовместнойДеятельности) Экспорт

	Возврат ЗаполнениеДокументов.ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(ДоговорКонтрагента, ТабЧастьУчастникиСовместнойДеятельности);
							
КонецФункции


Процедура ЗаполнитьНаименованияЕдиницИзмерений(ТаблицаСоответствий) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСоответствий.Контрагент,
	|	ТаблицаСоответствий.ЕдиницаИзмеренияКод,
	|	ТаблицаСоответствий.ТоварНаименование,
	|	ТаблицаСоответствий.Товар,
	|	ТаблицаСоответствий.ЕдиницаИзмерения,
	|	ТаблицаСоответствий.КоэффициентПересчета
	|ПОМЕСТИТЬ ТаблицаСоответствий
	|ИЗ
	|	&ТаблицаСоответствий КАК ТаблицаСоответствий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствий.Контрагент,
	|	ТаблицаСоответствий.ЕдиницаИзмеренияКод,
	|	ТаблицаСоответствий.ТоварНаименование,
	|	ТаблицаСоответствий.Товар,
	|	ТаблицаСоответствий.ЕдиницаИзмерения,
	|	ТаблицаСоответствий.КоэффициентПересчета,
	|	КлассификаторЕдиницИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование
	|ИЗ
	|	ТаблицаСоответствий КАК ТаблицаСоответствий
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|		ПО КлассификаторЕдиницИзмерения.Ссылка = ТаблицаСоответствий.ЕдиницаИзмерения";
	
	Запрос.Параметры.Вставить("ТаблицаСоответствий", ТаблицаСоответствий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаСоответствий = РезультатЗапроса.Выгрузить();
		
КонецПроцедуры

Функция ПроверитьВозможностьСозданияДокументовЭСФ(Знач МассивСчетовФактур, Знач ПоказыватьСообщения = Истина, ТекстыСообщений = Неопределено) Экспорт
	
	ВозможноСоздатьВсеЭСФ = Истина;
	
	Для Каждого СчетФактура Из МассивСчетовФактур Цикл
		Если СчетФактура.СпособВыставления = Перечисления.СпособыОбменаДокументами.Бумажно Тогда
			ТекстСообщения = НСтр("ru = 'Невозможно создать электронный счет-фактуру для ""%СчетФактура%"" т.к. он выставлен ""На бумажном носителе"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетФактура%", СчетФактура);
			Сообщить(ТекстСообщения);
			ВозможноСоздатьВсеЭСФ = Ложь;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ВозможноСоздатьВсеЭСФ;
	
КонецФункции

Функция ДокументВыписанНаБумажномНосителе(Форма, ИмяРеквизитаСпособОбмена) Экспорт
	
	СпособОбмена = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма[ИмяРеквизитаСпособОбмена], Форма.Объект[ИмяРеквизитаСпособОбмена]);
	
	Возврат СпособОбмена <> ПредопределенноеЗначение("Перечисление.СпособыОбменаДокументами.Электронно");
	
КонецФункции

Функция НоваяПечатнаяФормаЭСФ(Знач СчетФактура) Экспорт
	
	ПечатнаяФормаЭСФ = Неопределено;
	
	СпособВыставленияПолучения = ?(ТипЗнч(СчетФактура) = ЭСФКлиентСерверПереопределяемый.ТипДокументСсылкаСчетФактураВыданный(), СчетФактура["СпособВыставления"], СчетФактура["СпособПолучения"]);
	
	Если СпособВыставленияПолучения = Перечисления.СпособыОбменаДокументами.Электронно Тогда
		
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СчетФактура);
		
		СуществующиеЭСФ = ЭСФСервер.НайтиАктуальныеЭСФПоСчетамФактурам(МассивСсылок);
		ДанныеЭСФ = СуществующиеЭСФ.Получить(СчетФактура);
		ЭСФ = ?(ДанныеЭСФ = Неопределено, Неопределено, ДанныеЭСФ.ЭСФ);
		
		Если ЗначениеЗаполнено(ЭСФ) Тогда
			МассивЭСФ = Новый Массив;
			МассивЭСФ.Добавить(ЭСФ);
			ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
			ПечатнаяФормаЭСФ = ОбработкаОбменЭСФ.ПечатьЭСФ(МассивЭСФ);
		Иначе
			Сообщить(НСтр("ru = 'Невозможно напечатать электронный счет-фактуру, т.к. электронный счет-фактура не зарегистрирован для текущего документа.'"));
		КонецЕсли; 
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Невозможно напечатать электронный счет-фактуру, т.к. способ %ВыставленияПолучения% счета-фактуры ""На бумажном носителе"".'"); 
		Если ТипЗнч(СчетФактура) = ЭСФКлиентСерверПереопределяемый.ТипДокументСсылкаСчетФактураВыданный() Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВыставленияПолучения%", "выставления");
		Иначе
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВыставленияПолучения%", "получения");	
		КонецЕсли;
		Сообщить(ТекстСообщения);
		
	КонецЕсли; 
	
	Возврат ПечатнаяФормаЭСФ;
	
КонецФункции

Процедура ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитовПолейЗапросов) Экспорт
	
	Для Каждого ЭлементСоответсвия Из СоответсвиеИменРеквизитовПолейЗапросов Цикл
		Значение = "";
		Если ЭлементСоответсвия.Ключ = "%СчетФактураДата" Тогда
			Значение = "Дата"
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ТекстПоляУслуга"	Тогда
			Значение = "ВЫБОР 
											|		КОГДА ОстаткиГТД.Номенклатура ССЫЛКА Справочник.Номенклатура
											|			ТОГДА ОстаткиГТД.Номенклатура.Услуга
											|		ИНАЧЕ ЛОЖЬ
											|	КОНЕЦ КАК Услуга";
											
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ТекстПоляУслугаСпрНоменклатура" Тогда
			Значение = "ЕСТЬNULL(СпрНоменклатура.Услуга, Ложь) КАК Услуга";
											
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ТекстПоляТипИзмеряемойВеличины"	Тогда	
			Значение = "ТаблицаТовары.ЕдиницаИзмерения";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ДанныеДокументаЕдиницаИзмерения" Тогда	
			Значение = "вт_ДанныеДокумента.ЕдиницаИзмерения";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЭСФТекстПоляТипИзмеряемойВеличины"	Тогда	
			Значение = "ЭСФТовары.ЕдиницаИзмерения";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЭДВСТекстПоляЕдиницаИзмеренияИсходныеТовары" Тогда	
			Значение = "ЭДВСИсходныеТовары.ЕдиницаИзмерения";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЭДВСТекстПоляЕдиницаИзмеренияТовары" Тогда	
			Значение = "ЭДВСТовары.ЕдиницаИзмерения";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%СтруктурнаяЕдиницаИдентификационныйНомер"	Тогда	
			Значение = "ИдентификационныйНомер";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%КонтрагентИНН"	Тогда	
			Значение = "ИдентификационныйКодЛичности";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ОрганизацияИНН"	Тогда	
			Значение = "ИдентификационныйНомер";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%БуквенныйКодВалюты"	Тогда	
			Значение = "БуквенныйКод";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ИмяРеквизитаВладелецДоговора"	Тогда	
			Значение = "Владелец";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ИмяРеквизитаОрганизацияДоговора"	Тогда	
			Значение = "Организация";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ДоговорНомер"	Тогда	
			Значение = "НомерДоговора";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ДоговорДата"	Тогда	
			Значение = "ДатаДоговора";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЭСФДоговорПоставкиУчастникСРП"	Тогда	
			Значение = "ЛОЖЬ ";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%УсловиеДоговорыКонтрагентовУчастникСРП"	Тогда	
			Значение = "";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%Получатель_УчастникСРП"	Тогда	
			Значение = "ЛОЖЬ ";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЭСФДоговорКонтрагентаУчастникСРП"	Тогда	
			Значение = " ЛОЖЬ";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЭСФПоверенныйОператор"	Тогда	
			Значение = "Значение(Справочник.Контрагенты.ПустаяСсылка)";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЭСФПоверенныйПокупателяБИН"	Тогда	
			Значение = """"""; 
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЭСФПоверенныйПокупателяНаименование"	Тогда	
			Значение = """""";
			
		ИначеЕСли ЭлементСоответсвия.Ключ = "%ЭСФТоварыКоэффициент"	Тогда
			Значение = "1";
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЕдиницаИзмерения"	Тогда
			Значение = "БазоваяЕдиницаИзмерения";
		ИначеЕсли ЭлементСоответсвия.Ключ = "%КодТНВЭД"	Тогда
			Значение = "ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).КодТНВЭД"
		//-=-=
		ИначеЕсли ЭлементСоответсвия.Ключ = "%КлассификаторСтранМира" Тогда
			Значение = "Справочник.КлассификаторСтранМира"
		//-=-=
		КонецЕсли;
		
		СоответсвиеИменРеквизитовПолейЗапросов.Вставить(ЭлементСоответсвия.Ключ, Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПредопределенноеЗначениеСтавкиНДС(СтавкаБезНДС) Экспорт
	
	Если СтавкаБезНДС Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.ДляОсвобожденногоОборота = ИСТИНА";
		
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		Если ВыборкаЗапроса.Следующий() Тогда
			Возврат ВыборкаЗапроса.СтавкаНДС;
		Иначе
			Возврат ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка");	
		КонецЕсли;
	Иначе
		Возврат ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка");
	КонецЕсли;	

КонецФункции

Функция ЗначениеИзСтрокиXML(СтрокаXML) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаXML);
	
КонецФункции

Функция ИспользуетсяРазделениеДанных() Экспорт
	
	ИспользуетсяРазделениеДанных = Ложь;
	
	Возврат ИспользуетсяРазделениеДанных;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики, ЗавершениеОбновления = Ложь) Экспорт
	

	
КонецПроцедуры

#КонецОбласти

#Область СверкаДанныхЭСФ
//Сравнивает суммовые значения между СФ и ЭСФ
Процедура СверитьЧисловыеДанныеСФиЭСФ(ОбъектЭСФ, РезультатПроверки) Экспорт
	
	Если ОбъектЭСФ.СчетФактура <> Неопределено Тогда
		СсылкаЭСФ = ОбъектЭСФ.Ссылка;
		СсылкаСФ = ОбъектЭСФ.СчетФактура.Ссылка;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка,
		|	СчетФактураВыданный.СуммаВключаетАкциз,
		|	СчетФактураВыданный.СуммаВключаетНДС
		|ПОМЕСТИТЬ СчетФактуры
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.Ссылка = &СсылкаСФ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетФактураВыданныйТовары.СуммаНДС КАК СуммаНДС,
		|	СчетФактураВыданныйТовары.Сумма КАК СуммаДляРасчетаБезНалогов,
		|	СчетФактураВыданныйТовары.ОборотПоРеализации КАК ОборотПоРеализации,
		|	СчетФактураВыданныйТовары.СуммаАкциза КАК СуммаАкциза,
		|	СчетФактураВыданныйТовары.Количество КАК Количество,
		|	СчетФактураВыданныйТовары.Сумма КАК СуммаДляРасчетаСНалогами,
		|	СчетФактураВыданныйТовары.Ссылка
		|ПОМЕСТИТЬ ТоварыУслугиСФ
		|ИЗ
		|	Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
		|ГДЕ
		|	СчетФактураВыданныйТовары.Ссылка = &СсылкаСФ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетФактураВыданныйУслуги.СуммаНДС,
		|	СчетФактураВыданныйУслуги.Сумма,
		|	СчетФактураВыданныйУслуги.ОборотПоРеализации,
		|	0,
		|	СчетФактураВыданныйУслуги.Количество,
		|	СчетФактураВыданныйУслуги.Сумма,
		|	СчетФактураВыданныйУслуги.Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный.Услуги КАК СчетФактураВыданныйУслуги
		|ГДЕ
		|	СчетФактураВыданныйУслуги.Ссылка = &СсылкаСФ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетФактураВыданныйОС.СуммаНДС,
		|	СчетФактураВыданныйОС.Сумма,
		|	СчетФактураВыданныйОС.ОборотПоРеализации,
		|	0,
		|	1,
		|	СчетФактураВыданныйОС.Сумма,
		|	СчетФактураВыданныйОС.Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный.ОС КАК СчетФактураВыданныйОС
		|ГДЕ
		|	СчетФактураВыданныйОС.Ссылка = &СсылкаСФ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетФактураВыданныйНМА.СуммаНДС,
		|	СчетФактураВыданныйНМА.Сумма,
		|	СчетФактураВыданныйНМА.ОборотПоРеализации,
		|	0,
		|	1,
		|	СчетФактураВыданныйНМА.Сумма,
		|	СчетФактураВыданныйНМА.Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный.НМА КАК СчетФактураВыданныйНМА
		|ГДЕ
		|	СчетФактураВыданныйНМА.Ссылка = &СсылкаСФ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ТоварыУслугиСФ.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ТоварыУслугиСФ.СуммаДляРасчетаБезНалогов - ВЫБОР
		|			КОГДА СчетФактуры.СуммаВключаетНДС
		|				ТОГДА ТоварыУслугиСФ.СуммаНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ - ВЫБОР
		|			КОГДА СчетФактуры.СуммаВключаетАкциз
		|				ТОГДА ТоварыУслугиСФ.СуммаАкциза
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНалогов,
		|	СУММА(ТоварыУслугиСФ.ОборотПоРеализации) КАК ОборотПоРеализации,
		|	СУММА(ТоварыУслугиСФ.СуммаАкциза) КАК СуммаАкциза,
		|	СУММА(ТоварыУслугиСФ.Количество) КАК Количество,
		|	СУММА(ТоварыУслугиСФ.СуммаДляРасчетаСНалогами + ВЫБОР
		|			КОГДА НЕ СчетФактуры.СуммаВключаетНДС
		|				ТОГДА ТоварыУслугиСФ.СуммаНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ + ВЫБОР
		|			КОГДА НЕ СчетФактуры.СуммаВключаетАкциз
		|				ТОГДА ТоварыУслугиСФ.СуммаАкциза
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаСНалогами
		|ПОМЕСТИТЬ ТоварыУслугиСФСгруппированные
		|ИЗ
		|	ТоварыУслугиСФ КАК ТоварыУслугиСФ
		|		ЛЕВОЕ СОЕДИНЕНИЕ СчетФактуры КАК СчетФактуры
		|		ПО ТоварыУслугиСФ.Ссылка = СчетФактуры.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ЭСФТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ЭСФТовары.Сумма) КАК Сумма,
		|	СУММА(ЭСФТовары.ОборотПоРеализации) КАК ОборотПоРеализации,
		|	СУММА(ЭСФТовары.СуммаАкциза) КАК СуммаАкциза,
		|	СУММА(ЭСФТовары.Количество) КАК Количество,
		|	СУММА(ЭСФТовары.СуммаБезНалогов) КАК СуммаБезНалогов
		|ПОМЕСТИТЬ ТоварыУслугиЭСФ
		|ИЗ
		|	Документ.ЭСФ.Товары КАК ЭСФТовары
		|ГДЕ
		|	ЭСФТовары.Ссылка = &СсылкаЭСФ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТоварыУслугиСФСгруппированные.СуммаНДС = ТоварыУслугиЭСФ.СуммаНДС
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СуммаНДСРавна,
		|	ВЫБОР
		|		КОГДА ТоварыУслугиСФСгруппированные.СуммаБезНалогов = ТоварыУслугиЭСФ.СуммаБезНалогов
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СуммаБезНалоговРавна,
		|	ВЫБОР
		|		КОГДА ТоварыУслугиСФСгруппированные.ОборотПоРеализации = ТоварыУслугиЭСФ.ОборотПоРеализации
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОборотПоРеализацииРавен,
		|	ВЫБОР
		|		КОГДА ТоварыУслугиСФСгруппированные.СуммаАкциза = ТоварыУслугиЭСФ.СуммаАкциза
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СуммаАкцизаРавна,
		|	ВЫБОР
		|		КОГДА ТоварыУслугиСФСгруппированные.Количество = ТоварыУслугиЭСФ.Количество
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КоличествоРавно,
		|	ВЫБОР
		|		КОГДА ТоварыУслугиСФСгруппированные.СуммаСНалогами = ТоварыУслугиЭСФ.Сумма
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СуммаСНалогамиРавна
		|ИЗ
		|	ТоварыУслугиСФСгруппированные КАК ТоварыУслугиСФСгруппированные,
		|	ТоварыУслугиЭСФ КАК ТоварыУслугиЭСФ";
		
		Запрос.УстановитьПараметр("СсылкаСФ", СсылкаСФ);
		Запрос.УстановитьПараметр("СсылкаЭСФ", СсылкаЭСФ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			
			Если Не ВыборкаДетальныеЗаписи.КоличествоРавно Тогда
				
				ТекстСообщения = НСтр("ru = 'Отличаются итоговые данные по колонке ""Количество"" между счетом-фактурой и ЭСФ'"); 
								
				РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
				
			КонецЕсли;
			
			Если Не ВыборкаДетальныеЗаписи.ОборотПоРеализацииРавен Тогда
				
				ТекстСообщения = НСтр("ru = 'Отличаются итоговые данные по колонке ""Оборот по реализации"" между счетом-фактурой и ЭСФ'"); 
								
				РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
				
			КонецЕсли;
			
			Если Не ВыборкаДетальныеЗаписи.СуммаАкцизаРавна Тогда
				
				ТекстСообщения = НСтр("ru = 'Отличаются итоговые данные по колонке ""Сумма акциза"" между счетом-фактурой и ЭСФ'"); 
							
				РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
				
			КонецЕсли;
			
			Если Не ВыборкаДетальныеЗаписи.СуммаБезНалоговРавна Тогда
				
				ТекстСообщения = НСтр("ru = 'Отличаются итоговые данные по колонке ""Сумма Без Налогов"" между счетом-фактурой и ЭСФ'"); 
								
				РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
				
			КонецЕсли;
			
			Если Не ВыборкаДетальныеЗаписи.СуммаНДСРавна Тогда
				
				ТекстСообщения = НСтр("ru = 'Отличаются итоговые данные по колонке ""Сумма НДС"" между счетом-фактурой и ЭСФ'"); 
								
				РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
				
			КонецЕсли;
			
			Если Не ВыборкаДетальныеЗаписи.СуммаСНалогамиРавна Тогда
				
				ТекстСообщения = НСтр("ru = 'Отличаются итоговые данные по колонке ""Сумма с налогами"" между счетом-фактурой и ЭСФ'"); 
								
				РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаРаботыВАвтономномРабочемМесте
Функция ПроверкаПоддержкиМеханизмаВАвтономномРабочемМесте() Экспорт
	
	Возврат Истина;
	
КонецФункции  
#КонецОбласти

#Область ГСВС

Функция ПолучитьГСВС(Идентификатор = "", КодТНВЭД = "") Экспорт
	
	Возврат ЭСФСервер.ПолучитьГСВС(Идентификатор, КодТНВЭД );
	
КонецФункции

#КонецОбласти