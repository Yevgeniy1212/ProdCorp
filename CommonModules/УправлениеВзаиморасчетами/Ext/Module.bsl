// Проверяет возможность проведения в БУ и НУ в зависимости от договора взаиморасчетов.
//
Функция ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, ДоговорКонтрагента,
	                                         Отказ = Ложь, Заголовок,ДополнениеКСообщению = "") Экспорт

	ЭтоДокументОплаты = НЕ(УправлениеДенежнымиСредствами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтруктураШапкиДокумента.ВидДокумента).Направление = Неопределено);

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат Истина;
	КонецЕсли;

	ВалютаВзаиморасчетов     = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	Если ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаДокумента 
	   И СтруктураШапкиДокумента.ВалютаРегламентированногоУчета <> СтруктураШапкиДокумента.ВалютаДокумента Тогда

		// Документ выписан в валюте отличной от валюты регламентированного учета и валюты расчетов. 
		// Возможно только в документах оплаты.
		// Не отражается в б.у.
		ОбщегоНазначения.СообщитьОбОшибке(ДополнениеКСообщению + " Валюта документа (" + СтруктураШапкиДокумента.ВалютаДокумента + ") 
		                 |отличается от валюты регламентированного учета (" + СтруктураШапкиДокумента.ВалютаРегламентированногоУчета + 
		                 ") и валюты расчетов по договору """ + ДоговорКонтрагента + """ (" + ВалютаВзаиморасчетов + ")."+Символы.ПС+"
		                 |Документ не может быть проведен по бухгалтерскому или налоговому учету.",Отказ,Заголовок);

		Возврат Ложь;               

	ИначеЕсли СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда

		Если НЕ (ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета) Тогда

			//Документ выписан в валюте регламентированного учета. Валюта расчетов иная. Договор не в у.е. 
			//Не отражается в б.у.
			ОбщегоНазначения.СообщитьОбОшибке(ДополнениеКСообщению+" Валюта расчетов по договору """ + ДоговорКонтрагента + """ ("+ ВалютаВзаиморасчетов+
			                ") отличается от валюты регламентированного учета (" + СтруктураШапкиДокумента.ВалютаРегламентированногоУчета + ")."+Символы.ПС+"
			                |В этом случае документы могут быть выписаны в валюте регламентированного учета только при расчетах в условных единицах."+Символы.ПС+"
			                |Документ не может быть проведен по бухгалтерскому или налоговому учету.", Отказ,Заголовок);

			Возврат Ложь;

		КонецЕсли;

	КонецЕсли;

	Возврат Истина;

КонецФункции // ПроверкаВозможностиПроведенияВ_БУ_НУ()

// Процедура подготовки таблицы значений для целей приобретения и реализации
//
Процедура ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(	ТаблицаЗначений, СтруктураШапкиДокумента, 
																	ВключитьНалогиВОсновнуюСумму, 
																	ВалютаРегламентированногоУчета = "") Экспорт

	Перем СуммаВключаетНДС, СуммаВключаетАкциз;

	ВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	ЕстьНДС    = Не(ТаблицаЗначений.Колонки.Найти("НДС") = Неопределено);
	ЕстьАкциз  = Не(ТаблицаЗначений.Колонки.Найти("Акциз") = Неопределено);
	ЕстьВалюта = СтруктураШапкиДокумента.Свойство("ВалютаДокумента");
	
	// в счетах-фактура в процедуру передается общая таблица из всех ТЧ, в том числе ТЧ ОС и НМА (в таких строках получить коэффициент из справочника нельзя)
	ЕстьКоэффициентРасчетаОблагаемойБазыАкциза  = Не(ТаблицаЗначений.Колонки.Найти("КоэффициентРасчетаОблагаемойБазыАкциза") = Неопределено);;
	
	ЕстьОборотПоРеализации = ТаблицаЗначений.Колонки.Найти("ОборотПоРеализации") <> Неопределено;  // реквизит присутствует в счетах-фактурах 

	СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС", СуммаВключаетНДС);
	СтруктураШапкиДокумента.Свойство("СуммаВключаетАкциз", СуммаВключаетАкциз);
	СуммаВключаетНДС = (СуммаВключаетНДС = Истина);
	СуммаВключаетАкциз = (СуммаВключаетАкциз = Истина);
    	
	//Дополним колонки ТЗ при необходимости
	СтруктураОбязательныхКолонок = Новый Структура(	"Сумма" +
													?(ЕстьНДС,",НДС,СуммаБезНДС","") +
													?(ЕстьАкциз,",Акциз,СуммаБезАкциза","") +
													?(ЕстьВалюта,",СуммаВал" + ?(ЕстьНДС,",НДСВал,СуммаБезНДСВал","")+?(ЕстьАкциз,",АкцизВал,СуммаБезАкцизаВал","") + ?(ЕстьОборотПоРеализации, ",ОборотПоРеализацииВал", ""),""));

	// Колонки используемые в механизме зачета валютных авансов
	СтруктураОбязательныхКолонок.Вставить("СуммаБУ");
	Если ЕстьНДС Тогда
		СтруктураОбязательныхКолонок.Вставить("СуммаБУБезНДС");
	КонецЕсли;

	Для каждого Колонка Из СтруктураОбязательныхКолонок Цикл

		Если ТаблицаЗначений.Колонки.Найти(Колонка.Ключ) = Неопределено Тогда
			ТаблицаЗначений.Колонки.Добавить(Колонка.Ключ, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		КонецЕсли;

	КонецЦикла;

	//Дополним колонки ТЗ при необходимости нечисловыми полями
	Если ТаблицаЗначений.Колонки.Найти("СчетУчетаЦенности") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("СчетУчетаЦенности");
	КонецЕсли;

	Если ТаблицаЗначений.Колонки.Найти("ВидЦенности") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("ВидЦенности");
	КонецЕсли;

	Если ТаблицаЗначений.Колонки.Найти("Ценность") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Ценность");
	КонецЕсли;

	//Определим суммы по документу (Сумму без НДС и акциза и корректную основную сумму)
	Если ЕстьНДС и ЕстьАкциз тогда

		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма       - ?(СуммаВключаетНДС, СтрокаТаблицы.НДС, 0) - ?(СуммаВключаетАкциз, СтрокаТаблицы.Акциз, 0);
			СтрокаТаблицы.Сумма       = СтрокаТаблицы.СуммаБезНДС + ?(ВключитьНалогиВОсновнуюСумму, СтрокаТаблицы.НДС+СтрокаТаблицы.Акциз, 0);
		КонецЦикла;
		
	ИначеЕсли ЕстьНДС Тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма       - ?(СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
			СтрокаТаблицы.Сумма       = СтрокаТаблицы.СуммаБезНДС + ?(ВключитьНалогиВОсновнуюСумму, СтрокаТаблицы.НДС, 0);
		КонецЦикла;
		
	ИначеЕсли ЕстьАкциз Тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма       - ?(СуммаВключаетАкциз, СтрокаТаблицы.Акциз, 0);
			СтрокаТаблицы.Сумма       = СтрокаТаблицы.СуммаБезНДС + ?(ВключитьНалогиВОсновнуюСумму, СтрокаТаблицы.Акциз, 0);
		КонецЦикла;
		
	КонецЕсли;

	Если ЕстьВалюта Тогда
		
		// Заполним валютные колонки суммами документа
		Для каждого Колонка Из СтруктураОбязательныхКолонок Цикл 			
			Если Прав(Колонка.Ключ, 3) = "Вал" Тогда
				ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку(Лев(Колонка.Ключ, СтрДлина(Колонка.Ключ) - 3)), Колонка.Ключ);
			КонецЕсли;			
		КонецЦикла;
		
		Если Не(СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРегламентированногоУчета) Тогда			
			
			Если Число(СтруктураШапкиДокумента.КурсДокумента) = 0 или Число(СтруктураШапкиДокумента.КратностьДокумента)=0 тогда
				КоэффициентПересчета=1;
			Иначе
				КоэффициентПересчета = СтруктураШапкиДокумента.КурсДокумента/СтруктураШапкиДокумента.КратностьДокумента;
			КонецЕсли;			
			
			СуммаРег = Окр(ТаблицаЗначений.Итог("СуммаВал")* КоэффициентПересчета,2);
			
			//Распределение суммы по таблице
			РаспределениеРег = ОбщегоНазначения.РаспределитьПропорционально(СуммаРег,ТаблицаЗначений.ВыгрузитьКолонку("Сумма"));
			
			Если Не РаспределениеРег = Неопределено Тогда
				ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеРег,"Сумма");
			КонецЕсли;		
			
			Если ЕстьОборотПоРеализации Тогда
				
				Если СтруктураШапкиДокумента.ВидДокумента = "РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС" Тогда
					
					// В документе РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС оборот по реализации указывается в валюте.
					ОборотПоРеализацииВВалюте = Истина;
					
				ИначеЕсли СтруктураШапкиДокумента.Дата >= Дата(2014,7,1)
					И (СтруктураШапкиДокумента.ВидДокумента = "СчетФактураПолученный" 
					ИЛИ СтруктураШапкиДокумента.ВидДокумента = "СчетФактураВыданный") Тогда
					
					// С 01.07.2014 в ЭСФ разрешен валютный оборот по реалиазации.
					ОборотПоРеализацииВВалюте = Истина;
					
				Иначе
					
					ОборотПоРеализацииВВалюте = Ложь;
					
				КонецЕсли;
				
				Если ОборотПоРеализацииВВалюте Тогда
					// рассчитываем оборот в рег. валюте
					ОборотПоРеализацииРег = Окр(ТаблицаЗначений.Итог("ОборотПоРеализацииВал")* КоэффициентПересчета,2);				
					//Распределение суммы по таблице
					РаспределениеРег = ОбщегоНазначения.РаспределитьПропорционально(ОборотПоРеализацииРег,ТаблицаЗначений.ВыгрузитьКолонку("ОборотПоРеализации"));
				
					Если Не РаспределениеРег = Неопределено Тогда
						ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеРег,"ОборотПоРеализации");
					КонецЕсли;	
				Иначе
					// определяем валютную сумму, исходя из оборота в тенге
					Если Число(СтруктураШапкиДокумента.КурсДокумента) = 0 или Число(СтруктураШапкиДокумента.КратностьДокумента)=0 тогда
						КоэффициентПересчетаВВалюту =1;
					Иначе
						КоэффициентПересчетаВВалюту = СтруктураШапкиДокумента.КратностьДокумента/СтруктураШапкиДокумента.КурсДокумента;
					КонецЕсли;			
					
					ОборотПоРеализацииВал = Окр(ТаблицаЗначений.Итог("ОборотПоРеализацииВал")* КоэффициентПересчетаВВалюту,2);				
					
					//Распределение суммы по таблице
					РаспределениеВал = ОбщегоНазначения.РаспределитьПропорционально(ОборотПоРеализацииВал,ТаблицаЗначений.ВыгрузитьКолонку("ОборотПоРеализации"));
				
					Если Не РаспределениеВал = Неопределено Тогда
						ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеВал, "ОборотПоРеализацииВал");
					КонецЕсли;	
				КонецЕсли; 	
			КонецЕсли;
			
			Если ЕстьНДС И ЕстьАкциз Тогда
				
				Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
					Если ЕстьКоэффициентРасчетаОблагаемойБазыАкциза Тогда
						КоэффициентРасчетаОблагаемойБазыАкциза = СтрокаТаблицы.КоэффициентРасчетаОблагаемойБазыАкциза;
					Иначе
						КоэффициентРасчетаОблагаемойБазыАкциза = СтрокаТаблицы.Номенклатура.КоэффициентРасчетаОблагаемойБазыАкциза;
					КонецЕсли;
					
					СтрокаТаблицы.Акциз = УчетНДСИАкциза.РассчитатьСуммуАкциза(?(СтруктураШапкиДокумента.ВидДокумента =  "ВозвратТоваровОтПокупателя" И ТаблицаЗначений.Колонки.Найти("КоличествоДок")<>Неопределено, СтрокаТаблицы.КоличествоДок, СтрокаТаблицы.Количество), ?(КоэффициентРасчетаОблагаемойБазыАкциза = 0, 1, КоэффициентРасчетаОблагаемойБазыАкциза), УчетНДСИАкциза.ПолучитьСтавкуАкциза(СтрокаТаблицы.СтавкаАкциза), ВалютаРегламентированногоУчета, 1, 1);
				
				КонецЦикла; 
				
				НДСРег = Окр(ТаблицаЗначений.Итог("НДСВал") * КоэффициентПересчета,2);
				
				//Распределение суммы по таблице
				РаспределениеНДСРег = ОбщегоНазначения.РаспределитьПропорционально(НДСРег,ТаблицаЗначений.ВыгрузитьКолонку("НДС"));
				
				Если НЕ РаспределениеНДСРег = Неопределено Тогда
					ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеНДСРег,"НДС");
				КонецЕсли;
				
				//Расчет суммы без НДС
				Для каждого СтрокаТаблицы из ТаблицаЗначений Цикл
					СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(ВключитьНалогиВОсновнуюСумму, СтрокаТаблицы.НДС, 0) - ?(ВключитьНалогиВОсновнуюСумму, СтрокаТаблицы.Акциз, 0);
				КонецЦикла;
				
			ИначеЕсли ЕстьНДС ТОгда
				
				НДСРег = Окр(ТаблицаЗначений.Итог("НДСВал") * КоэффициентПересчета,2);
				
				//Распределение суммы по таблице
				РаспределениеРег = ОбщегоНазначения.РаспределитьПропорционально(НДСРег,ТаблицаЗначений.ВыгрузитьКолонку("НДС"));
				
				Если НЕ РаспределениеРег = Неопределено Тогда
					ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеРег,"НДС");
				КонецЕсли;
				
				//Расчет суммы без НДС
				Для каждого СтрокаТаблицы из ТаблицаЗначений Цикл
					СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(ВключитьНалогиВОсновнуюСумму, СтрокаТаблицы.НДС, 0);
				КонецЦикла;
				
			ИначеЕсли ЕстьАкциз Тогда
				
				Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
				    Если ЕстьКоэффициентРасчетаОблагаемойБазыАкциза Тогда
						КоэффициентРасчетаОблагаемойБазыАкциза = СтрокаТаблицы.КоэффициентРасчетаОблагаемойБазыАкциза;
					Иначе
						КоэффициентРасчетаОблагаемойБазыАкциза = СтрокаТаблицы.Номенклатура.КоэффициентРасчетаОблагаемойБазыАкциза;
					КонецЕсли;

					СтрокаТаблицы.Акциз = УчетНДСИАкциза.РассчитатьСуммуАкциза(СтрокаТаблицы.Количество, ?(КоэффициентРасчетаОблагаемойБазыАкциза = 0, 1, КоэффициентРасчетаОблагаемойБазыАкциза), УчетНДСИАкциза.ПолучитьСтавкуАкциза(СтрокаТаблицы.СтавкаАкциза), ВалютаРегламентированногоУчета, 1, 1);
				
				КонецЦикла; 
				
				//Расчет суммы без НДС
				Для каждого СтрокаТаблицы из ТаблицаЗначений Цикл
					СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(ВключитьНалогиВОсновнуюСумму, СтрокаТаблицы.Акциз, 0);
				КонецЦикла;
				
			КонецЕсли;
			
			// Уберем расхождения из-за округления
			Если ЕстьВалюта И ЕстьОборотПоРеализации Тогда 
				Если ТаблицаЗначений.Итог("СуммаБезНДСВал") = ТаблицаЗначений.Итог("ОборотПоРеализацииВал") Тогда 
					КолонкаСуммаБезНДС = ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДС"); 	
					ТаблицаЗначений.ЗагрузитьКолонку(КолонкаСуммаБезНДС, "ОборотПоРеализации"); 
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	// На этапе подготовки таблицы суммы для БУ совпадают с суммами для остальных видов учета (НУ, НДС...).
	// При зачете авансов в иностранной валюте суммы БУ будут корректироваться с учетом курсов зачтенных авансов,
	// а суммы для других видов учета остаются прежними
	
	ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("Сумма"),       "СуммаБУ");
	Если ЕстьНДС Тогда
		ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДС"), "СуммаБУБезНДС");
	КонецЕсли;
	
КонецПроцедуры // ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации()

                         
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ПРИ ПРОВЕДЕНИИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ ДОКУМЕНТОВ

//Функция возвращает вид расчетов по договору
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтраентов
//		ВалютаРегламентированногоУчета 	- СправочникСсылка.Валюты
//
// Возвращаемое значение
//      ПеречилениеСсылка.ВидыРасчетовПоДоговорам
//
Функция ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента, ВалютаРегламентированногоУчета) Экспорт

	Если ДоговорКонтрагента.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета 
	 ИЛИ НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;

	Иначе
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;

	КонецЕсли;

	Возврат ВидРасчетовПоДоговору;

КонецФункции // ОпределениеВидаРасчетовПоПараметрамДоговора()

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаРасчетовСКонтрагентом(	Организация, Контрагент, Договор, 
											ВалютаРегламентированногоУчета = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;

	Результат = Новый Структура("
	|СчетРасчетов, СчетАвансов,СчетВозвратов,
	|СчетРасчетовПокупателя, СчетАвансовПокупателя,СчетВозвратовПокупателя");
	
	Если ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Результат;
	КонецЕсли;

	ВидРасчетовПоДоговору = ОпределениеВидаРасчетовПоПараметрамДоговора(Договор,ВалютаРегламентированногоУчета);

	Запрос    = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("Контрагент",        Контрагент);
	Запрос.УстановитьПараметр("Договор",           Договор);
	Запрос.УстановитьПараметр("ВидРасчетов",       ВидРасчетовПоДоговору);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",     Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидРасчетов", Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка());
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Приоритет,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаРасчетовСПоставщиком,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаАвансовВыданных,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаРасчетовСПокупателем,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаАвансовПолученных,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаРасчетовСПоставщикомПоВозвратам,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетРасчетовСПокупателемПоВозвратам
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Договор = &Договор И НЕ СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
	|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ВидРасчетов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
    |	2,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаРасчетовСПоставщиком,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаАвансовВыданных,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаРасчетовСПокупателем,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаАвансовПолученных,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаРасчетовСПоставщикомПоВозвратам,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетРасчетовСПокупателемПоВозвратам
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Договор = &Договор И НЕ СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
	|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ПустойВидРасчетов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	3,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаРасчетовСПоставщиком,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаАвансовВыданных,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаРасчетовСПокупателем,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаАвансовПолученных,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетУчетаРасчетовСПоставщикомПоВозвратам,
	|	СчетаУчетаРасчетовСКонтрагентами.СчетРасчетовСПокупателемПоВозвратам
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Организация = &Организация
	|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &Контрагент
	|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ВидРасчетов
	|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор";
	Индекс = 3;
	СписокГрупп = ОбщегоНазначения.ПолучитьСписокВышестоящихГрупп(Контрагент);
	Для Каждого Элемент из СписокГрупп Цикл
		
		Индекс = Индекс + 1;
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, Элемент);
		Запрос.Текст = Запрос.Текст+"
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ  
		|	"+Индекс+",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
		|	СчетРасчетовСПокупателемПоВозвратам
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
		|ГДЕ
		|	СчетаУчетаРасчетовСКонтрагентами.Организация = &Организация
		|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ВидРасчетов
		|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &ГруппаКонтрагентов"+Индекс+"
		|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
		|";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст+"
	|
    |ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ  
    |	"+(Индекс+1)+",
    |	СчетУчетаРасчетовСПоставщиком,
    |	СчетУчетаАвансовВыданных,
    |	СчетУчетаРасчетовСПокупателем,
    |	СчетУчетаАвансовПолученных,
    |	СчетУчетаРасчетовСПоставщикомПоВозвратам,
    |	СчетРасчетовСПокупателемПоВозвратам
    |ИЗ
    |	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
    |ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Организация = &Организация
    |	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &Контрагент
	|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ПустойВидРасчетов
	|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
    |";
	Индекс = Индекс+1;
	Запрос.Текст = Запрос.Текст+"
	|
    |ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ  
    |	"+(Индекс+1)+",
    |	СчетУчетаРасчетовСПоставщиком,
    |	СчетУчетаАвансовВыданных,
    |	СчетУчетаРасчетовСПокупателем,
    |	СчетУчетаАвансовПолученных,
    |	СчетУчетаРасчетовСПоставщикомПоВозвратам,
    |	СчетРасчетовСПокупателемПоВозвратам
    |ИЗ
    |	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
    |ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Организация = &ПустаяОрганизация
    |	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &Контрагент
	|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ВидРасчетов
	|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
    |";
	Индекс = Индекс+1;

	
	Для Каждого Элемент из СписокГрупп Цикл
		
		Индекс = Индекс + 1;
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, Элемент);
		Запрос.Текст = Запрос.Текст+"
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ  
		|	"+Индекс+",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
		|	СчетРасчетовСПокупателемПоВозвратам
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
		|ГДЕ
		|	СчетаУчетаРасчетовСКонтрагентами.Организация = &ПустаяОрганизация
		|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &ГруппаКонтрагентов"+Индекс+"
		|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ВидРасчетов
		|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор";
		
		
		Индекс = Индекс + 1;
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, Элемент);
		
		Запрос.Текст = Запрос.Текст+"
		
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	"+Индекс+",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
		|	СчетРасчетовСПокупателемПоВозвратам
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
		|ГДЕ
		|	СчетаУчетаРасчетовСКонтрагентами.Организация = &ПустаяОрганизация
		|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ПустойВидРасчетов
		|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &ГруппаКонтрагентов"+Индекс+"
		|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор";
		
	КонецЦикла;
	Запрос.Текст = Запрос.Текст+"
    |ОБЪЕДИНИТЬ
    |
    |ВЫБРАТЬ 
    |	"+(Индекс+1)+",
    |	СчетУчетаРасчетовСПоставщиком,
    |	СчетУчетаАвансовВыданных,
    |	СчетУчетаРасчетовСПокупателем,
    |	СчетУчетаАвансовПолученных,
    |	СчетУчетаРасчетовСПоставщикомПоВозвратам,
    |	СчетРасчетовСПокупателемПоВозвратам
    |ИЗ
    |	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
    |ГДЕ
    |	СчетаУчетаРасчетовСКонтрагентами.Организация = &Организация
	|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ВидРасчетов
    |	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &ПустойКонтрагент
	|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
    |
    |ОБЪЕДИНИТЬ
    |
    |
    |ВЫБРАТЬ 
    |	"+(Индекс+2)+",
    |	СчетУчетаРасчетовСПоставщиком,
    |	СчетУчетаАвансовВыданных,
    |	СчетУчетаРасчетовСПокупателем,
    |	СчетУчетаАвансовПолученных,
    |	СчетУчетаРасчетовСПоставщикомПоВозвратам,
    |	СчетРасчетовСПокупателемПоВозвратам
    |ИЗ
    |	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
    |ГДЕ
    |	СчетаУчетаРасчетовСКонтрагентами.Организация = &Организация
    |	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &ПустойКонтрагент
    |	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
	|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ПустойВидРасчетов
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	"+(Индекс+3)+",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
	|	СчетРасчетовСПокупателемПоВозвратам
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Организация = &ПустаяОрганизация
	|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &ПустойКонтрагент
	|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
	|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ВидРасчетов
	|ОБЪЕДИНИТЬ
	|
	|
	|ВЫБРАТЬ 
	|	"+(Индекс+4)+",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовСПоставщикомПоВозвратам,
	|	СчетРасчетовСПокупателемПоВозвратам
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаУчетаРасчетовСКонтрагентами
	|ГДЕ
	|	СчетаУчетаРасчетовСКонтрагентами.Организация = &ПустаяОрганизация
	|	И СчетаУчетаРасчетовСКонтрагентами.Контрагент = &ПустойКонтрагент
	|	И СчетаУчетаРасчетовСКонтрагентами.Договор = &ПустойДоговор
	|	И СчетаУчетаРасчетовСКонтрагентами.ВидРасчетовПоДоговору = &ПустойВидРасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат.СчетРасчетов              = Выборка.СчетУчетаРасчетовСПоставщиком;
		Результат.СчетАвансов               = Выборка.СчетУчетаАвансовВыданных;
		Результат.СчетВозвратов             = Выборка.СчетУчетаРасчетовСПоставщикомПоВозвратам;
		Результат.СчетРасчетовПокупателя    = Выборка.СчетУчетаРасчетовСПокупателем;
		Результат.СчетАвансовПокупателя     = Выборка.СчетУчетаАвансовПолученных;
		Результат.СчетВозвратовПокупателя   = Выборка.СчетРасчетовСПокупателемПоВозвратам;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

// Возаращает вид договора с контрагентом по виду операции
//
Функция ОпределитьВидДоговораСКонтрагентом(ВидОперации=Неопределено) Экспорт
	
	СПоставщиком  	= Новый СписокЗначений;
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	Если Метаданные.Перечисления.ВидыДоговоровКонтрагентов.ЗначенияПеречисления.Найти("СКомитентом") <> Неопределено Тогда
		// в УТ поддерживается комиссионная торговля
		СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	КонецЕсли;
	
	СПокупателем  	= Новый СписокЗначений;
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	Если Метаданные.Перечисления.ВидыДоговоровКонтрагентов.ЗначенияПеречисления.Найти("СКомитентом") <> Неопределено Тогда
		// в УТ поддерживается комиссионная торговля
		СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	КонецЕсли;
	
	Займа  		= Новый СписокЗначений;
	Займа.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Займа);
	
	Прочее  		= Новый СписокЗначений;
	Прочее.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Если ЗначениеЗаполнено(ВидОперации) тогда

		//Определение вида операции

		ВидДоговораПоВидуОпераций = Новый Соответствие();

		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаСтруктурномуПодразделению,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Займа);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю,СПокупателем);		
		Если Метаданные.Перечисления.ВидыОперацийРКО.ЗначенияПеречисления.Найти("ПрочиеРасчетыСКонтрагентами") <> Неопределено Тогда
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами,Прочее);
		КонецЕсли;
					
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаСтруктурногоПодразделения,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами,Займа);
        ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
        Если Метаданные.Перечисления.ВидыОперацийПКО.ЗначенияПеречисления.Найти("ПрочиеРасчетыСКонтрагентами") <> Неопределено Тогда
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами,Прочее);
		КонецЕсли;
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Займа);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);
		
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаСтруктурногоПодразделения,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам,Займа);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);
		Если Метаданные.Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ЗначенияПеречисления.Найти("ПоступлениеОплатыПоБанковскимКредитам") <> Неопределено Тогда
			// в УТ поддерживается оплата платежными картами и предоставление банковских кредитов
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоБанковскимКредитам,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам,Прочее);
		КонецЕсли;
				
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаСтруктурномуПодразделению,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами,Займа);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами, СПоставщиком);
				
		Если Метаданные.Перечисления.Найти("ВидыОперацийЗаявкиНаРасходование") <> Неопределено Тогда
			// в УТ поддерживается механизм заявок
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ВидыОперацийЗаявкиНаРасходование"].ОплатаПоставщику,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ВидыОперацийЗаявкиНаРасходование"].ОплатаСтруктурномуПодразделению,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ВидыОперацийЗаявкиНаРасходование"].РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ВидыОперацийЗаявкиНаРасходование"].РасчетыПоКредитамИЗаймамСКонтрагентами,Займа);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ВидыОперацийЗаявкиНаРасходование"].ПрочиеРасчетыСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ВидыОперацийЗаявкиНаРасходование"].ВозвратДенежныхСредствПокупателю,СПокупателем);
		КонецЕсли;
		
		Если Метаданные.Перечисления.Найти("ВидыОперацийПланируемоеПоступлениеДС") <> Неопределено Тогда
			// в УТ поддерживается плановые поступления денежных средств
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ВидыОперацийПланируемоеПоступлениеДС"].ОплатаПокупателя,СПокупателем);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ВидыОперацийПланируемоеПоступлениеДС"].ОплатаСтруктурногоПодразделения,СПокупателем);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ВидыОперацийПланируемоеПоступлениеДС"].РасчетыПоКредитамИЗаймам,Займа);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ВидыОперацийПланируемоеПоступлениеДС"].ПрочиеРасчетыСКонтрагентами,Прочее);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ВидыОперацийПланируемоеПоступлениеДС"].ВозвратДенежныхСредствПоставщиком,СПоставщиком);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ВидыОперацийПланируемоеПоступлениеДС"].ПрочееПоступлениеДенежныхСредств,Прочее);
		КонецЕсли;
				
		Если Метаданные.Перечисления.Найти("ВидыОперацийОплатаОтПокупателяПлатежнойКартой") <> Неопределено Тогда
			// в УТ поддерживаются оплаты платежными картами
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ВидыОперацийОплатаОтПокупателяПлатежнойКартой"].ОплатаПокупателя,СПокупателем);
			ВидДоговораПоВидуОпераций.Вставить(Перечисления["ВидыОперацийОплатаОтПокупателяПлатежнойКартой"].ВозвратДенежныхСредствПокупателю,СПокупателем);
		КонецЕсли;
		
		ВидДоговора=ВидДоговораПоВидуОпераций[ВидОперации];
		
		Если НЕ ВидДоговора = Неопределено Тогда
			
			Возврат ВидДоговора;
			
		Иначе
			
			Возврат Новый СписокЗначений;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Новый СписокЗначений;
		
	Конецесли;
	
КонецФункции // ОпределитьВидДоговораСКонтрагентом()

// Для документов, у которых договор контрагента находится в табличной части проверяет
// что организация в документе совпадает с организацией, указанной в договоре взаиморасчетов.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части,
//  Отказ             - флаг отказа в проведении,
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, 
																	ТаблицаЗначений, Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
									   """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		// Если не заполнен договор или организация, то не ругаемся.
		Если ЗначениеЗаполнено(ДокументОбъект.Организация) 
		   И ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента)
		   И ДокументОбъект.Организация <> СтрокаТаблицы.ДоговорОрганизация Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке 
							 + " выбран договор контрагента, не соответстветствующий организации, указанной в документе!", Отказ, Заголовок);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАЧЕТА АВАНСА, ЗАКРЫТИЯ ЗАДОЛЖЕННОСТИ

// Процедура упорядочивает таблицу значений по документу
//
Процедура УпорядочитьТаблицуПоДокументу(ТаблицаЗначений, КолонкаДокумента) Экспорт

	СписокКолонок = "ДатаДокументаДляУпорядочивания,ДокументДляУпорядочивания";

	Для каждого Колонка из ТаблицаЗначений.Колонки Цикл
		СписокКолонок = СписокКолонок + ","+Колонка.Имя;
	КонецЦикла;

	ТаблицаЗначений.Колонки.Добавить("ДокументДляУпорядочивания",Документы.ТипВсеСсылки());
	ТаблицаЗначений.Колонки.Добавить("ДатаДокументаДляУпорядочивания",);

	Для каждого СтрокаТаблицы из ТаблицаЗначений Цикл 

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[КолонкаДокумента]) тогда 
			Продолжить;
		КонецЕсли;

		Если Документы.ТипВсеСсылки().СодержитТип( ТипЗнч(СтрокаТаблицы[КолонкаДокумента]))  тогда
			СтрокаТаблицы.ДокументДляУпорядочивания = СтрокаТаблицы[КолонкаДокумента];
			СтрокаТаблицы.ДатаДокументаДляУпорядочивания = СтрокаТаблицы.ДокументДляУпорядочивания.Дата;
		КонецЕсли;

	КонецЦикла;

	ТаблицаЗначений.Сортировать(СписокКолонок);

	ТаблицаЗначений.Колонки.Удалить(ТаблицаЗначений.Колонки["ДатаДокументаДляУпорядочивания"]);
	ТаблицаЗначений.Колонки.Удалить(ТаблицаЗначений.Колонки["ДокументДляУпорядочивания"]);

КонецПроцедуры // УпорядочитьТаблицуПоДокументу()

Функция ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента, ВидОперации = Неопределено) Экспорт

	ВидДействийДокумента = Новый Структура("Направление, РасчетыВозврат");
	ВидыДокументов       = Новый Соответствие();

	ВидыДокументов.Вставить("ПоступлениеТоваровУслуг",     "Поступление");
	ВидыДокументов.Вставить("ПоступлениеДопРасходов",      "Поступление");
	ВидыДокументов.Вставить("ПоступлениеНМА",              "Поступление");
	ВидыДокументов.Вставить("ВозвратТоваровОтПокупателя",  "Поступление");
	ВидыДокументов.Вставить("ПолучениеУслугПоПереработке", "Поступление");
	ВидыДокументов.Вставить("ПоступлениеИзПереработки",    "Поступление");
	
	ВидыДокументов.Вставить("РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС", "Поступление");	
	
    ВидыДокументов.Вставить("РеализацияТоваровУслуг",				"Выбытие");
	ВидыДокументов.Вставить("РеализацияУслугПоПереработке",			"Выбытие");
	ВидыДокументов.Вставить("АктОбОказанииПроизводственныхУслуг",	"Выбытие");
	ВидыДокументов.Вставить("ПередачаНМА",							"Выбытие");
	ВидыДокументов.Вставить("ПередачаОС",							"Выбытие");
	ВидыДокументов.Вставить("ВозвратТоваровПоставщику",				"Выбытие");
	
	ВидыДокументов.Вставить("РасчетНалоговПриПоступленииАктивовУслуг",     				"Выбытие");	
	ВидыДокументов.Вставить("РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС", "Выбытие");	
	

	ВидДействийДокумента.Вставить("Направление",ВидыДокументов[ВидДокумента]);

	ВидОперацииРасчет  = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
    
	Если (ВидДокумента = "ВозвратТоваровОтПокупателя")
	 ИЛИ (ВидДокумента = "ВозвраттоваровПоставщику") тогда

		ВидДействийДокумента.Вставить("РасчетыВозврат",ВидОперацииВозврат);
		
	Иначе
		
		ВидДействийДокумента.Вставить("РасчетыВозврат",ВидОперацииРасчет);
	
	КонецЕсли;

	Возврат ВидДействийДокумента;

КонецФункции // ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации()

// Процедура выполняет корректировку кор. движений при расчетах в валюте.
// В частности это необходимо в случае, если поступление ТМЗ проводится по курсу авансов
//
Процедура РаспределитьКорректировкуПриРасчетахВВалюте(СуммаКорректировки, ТаблицыДокумента, СуммаВключаетНДС, Отказ, Заголовок)

	Если СуммаКорректировки = 0 Тогда
		Возврат;
	КонецЕсли;

	//Определим суммы по каждой из переданных таблиц значений
	
	СуммыПоТаблицамДокумента = Новый ТаблицаЗначений();
	СуммыПоТаблицамДокумента.Колонки.Добавить("ИмяТаблицы");
	СуммыПоТаблицамДокумента.Колонки.Добавить("СуммаБУсНДС",     ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	СуммыПоТаблицамДокумента.Колонки.Добавить("СуммаБУбезНДС",   ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	СуммыПоТаблицамДокумента.Колонки.Добавить("НДС",             ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	Для каждого ТекущаяТаблица Из ТаблицыДокумента Цикл

		СтрокаТаблицы = СуммыПоТаблицамДокумента.Добавить();

		СтрокаТаблицы.ИмяТаблицы  = ТекущаяТаблица.Ключ;
		СтрокаТаблицы.СуммаБУсНДС = ТекущаяТаблица.Значение.Итог("СуммаБУ");
		
		Если НЕ ТекущаяТаблица.Значение.Колонки.Найти("НДС") = Неопределено Тогда

			СтрокаТаблицы.СуммаБУбезНДС = ТекущаяТаблица.Значение.Итог("СуммаБУБезНДС");
			СтрокаТаблицы.НДС           = ТекущаяТаблица.Значение.Итог("НДС");

			Если НЕ СуммаВключаетНДС Тогда
				СтрокаТаблицы.СуммаБУсНДС = СтрокаТаблицы.СуммаБУсНДС+ТекущаяТаблица.Значение.Итог("НДС");
			КонецЕслИ;

		Иначе
			
			СтрокаТаблицы.СуммаБУбезНДС = СтрокаТаблицы.СуммаБУсНДС;

		КонецЕсли;

	КонецЦикла;

	//Распределим общую сумму корректировку на части, соответствующие каждой из переданных таблиц значений
	
	СуммаСНДСкРаспределению = СуммаКорректировки + СуммыПоТаблицамДокумента.Итог("СуммаБУсНДС");

	Если СуммаСНДСкРаспределению = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка в распределении корректировок при зачете аванса по расчетам в валюте.", Отказ, Заголовок);
		Возврат;
	КонецЕсли;

	БезНДСкРаспределению = СуммаСНДСкРаспределению - СуммыПоТаблицамДокумента.Итог("НДС");

	НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(БезНДСкРаспределению,СуммыПоТаблицамДокумента.ВыгрузитьКолонку("СуммаБУбезНДС"));
	СуммыПоТаблицамДокумента.ЗагрузитьКолонку(НовыеСуммы, "СуммаБУбезНДС");

	Для каждого СтрокаТаблицы Из СуммыПоТаблицамДокумента Цикл
		СтрокаТаблицы.СуммаБУсНДС = СтрокаТаблицы.СуммаБУбезНДС + СтрокаТаблицы.НДС;
	КонецЦикла;

	//Распределим каждую часть суммы корректировки по строкам соответствующей таблицы значений
	
	Для каждого СтрокаКРаспределению из СуммыПоТаблицамДокумента Цикл

		ТаблицаЗначений = ТаблицыДокумента[СтрокаКРаспределению.ИмяТаблицы];
		
		Если СуммаВключаетНДС Тогда
			СуммаКРаспределению = СтрокаКРаспределению.СуммаБУсНДС;
		Иначе
			СуммаКРаспределению = СтрокаКРаспределению.СуммаБУбезНДС;
		КонецЕсли;
		Если СуммаКРаспределению = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ТекущаяТаблица.Значение.Колонки.Найти("НДС") = Неопределено Тогда
			
			Если СтрокаКРаспределению.СуммаБУбезНДС <> 0 Тогда
				НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(СтрокаКРаспределению.СуммаБУбезНДС, ТаблицаЗначений.ВыгрузитьКолонку("СуммаБУбезНДС"));
				ТаблицаЗначений.ЗагрузитьКолонку(НовыеСуммы, "СуммаБУбезНДС");
			КонецЕсли;
			
			Если СуммаВключаетНДС Тогда
				Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
					СтрокаТаблицы.СуммаБУ = СтрокаТаблицы.СуммаБУбезНДС + СтрокаТаблицы.НДС;
				КонецЦикла;
			Иначе
				ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБУбезНДС"), "СуммаБУ");
			КонецЕсли;
			
		Иначе
			
			Если СтрокаКРаспределению.СуммаБУбезНДС <> 0 Тогда
				НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(СтрокаКРаспределению.СуммаБУбезНДС, ТаблицаЗначений.ВыгрузитьКолонку("СуммаБУ"));
				ТаблицаЗначений.ЗагрузитьКолонку(НовыеСуммы, "СуммаБУ");
			КонецЕсли;
			
		КонецЕсли;
        // Колонку "Сумма", которая используется в дальнейшем заполняем значением расчетной суммы БУ
		// Считая, что в налоговом учете суммы признаются по оценке полученной в БУ.
		ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБУ"), "Сумма");		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьКорректировкуПриРасчетахВВалюте

// Выполняет зачет аванса по указанному документу
//
Функция ЗачетАванса(ДокументОбъект, СтруктураШапкиДокумента, СуммаВключаетНДС, ВалютаРегламентированногоУчета, 
					ТаблицыДокумента, Отказ, Заголовок, НомерЖурнала = "", УчетнаяПолитикаБУ = Неопределено, ИмяРеквизитаСуммы = "Сумма") Экспорт

	Перем ВидОперации,Сделка;
	
	Если УчетнаяПолитикаБУ = Неопределено Тогда
		УчетнаяПолитикаБУ	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Бух");	
	КонецЕсли;

	СтруктураШапкиДокумента.Свойство("ВидОперации", ВидОперации);
	СтруктураШапкиДокумента.Свойство("Сделка",      Сделка);
	
	НаправлениеДвижения = ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ДокументОбъект.Метаданные().Имя,ВидОперации).Направление;
	ЭтоВозврат          = (ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ДокументОбъект.Метаданные().Имя,ВидОперации).РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат);

	Организация         	 = СтруктураШапкиДокумента.Организация;
	СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
	ДатаДока            	 = СтруктураШапкиДокумента.Дата;
	МоментДокумента     	 = Новый МоментВремени(ДокументОбъект.Дата,ДокументОбъект.Ссылка);
	КурсДокумента       	 = СтруктураШапкиДокумента.КурсДокумента;
	КратностьДокумента  	 = СтруктураШапкиДокумента.КратностьДокумента;
	Контрагент          	 = СтруктураШапкиДокумента.Контрагент;
	ДоговорКонтрагента  	 = СтруктураШапкиДокумента.ДоговорКонтрагента;
	СтруктурноеПодразделение = СтруктураШапкиДокумента.СтруктурноеПодразделение;
	
	Если (НЕ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам
		  И НЕ ЭтоВозврат) ИЛИ НЕ ЗначениеЗаполнено(Сделка) Тогда
		Сделка = Неопределено;
	КонецЕсли;
	
	СчетРасчетов        = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
	СчетАвансов         = СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам;
	ВалютаДокумента     = СтруктураШапкиДокумента.ВалютаДокумента;
	РасчетыВВалюте      = НЕ (ВалютаДокумента = ВалютаРегламентированногоУчета);

	СуммаДокументаСНДСРегл            = 0;
	СуммаДокументаСНДСВВалютеРасчетов = 0;

	// при зачете валютного аванса для немонетарного счета используем средний курс аванса
	// иначе на счете зависнут суммы тенгового покрытия
	ЗачетПоКурсуАванса = (ПроцедурыБухгалтерскогоУчета.ОсобыйПорядокПереоценкиСчета(СчетАвансов) = Перечисления.СпособыПризнанияКурсовойРазницы.НеРассчитывать);
	Если УчетнаяПолитикаБУ.Свойство("ОпределятьСтоимостьПриобретенияПоКурсуАванса") ТОгда
		ПоступлениеАктивовПоКурсуАванса = УчетнаяПолитикаБУ.ОпределятьСтоимостьПриобретенияПоКурсуАванса;
	Иначе
		ПоступлениеАктивовПоКурсуАванса = Ложь;
	КонецЕсли;
	
	СпособПереоценкиСчетаРасчетов = ПроцедурыБухгалтерскогоУчета.ОсобыйПорядокПереоценкиСчета(СчетРасчетов);	
	ПереоцениватьСчетРасчетов = РасчетыВВалюте И НЕ (СпособПереоценкиСчетаРасчетов = Перечисления.СпособыПризнанияКурсовойРазницы.НеРассчитывать ИЛИ СпособПереоценкиСчетаРасчетов = Перечисления.СпособыПризнанияКурсовойРазницы.Регламентно);
		
	//Формирование таблицы для возврата сумм зачтенных авансов (по документам)
	ЗачетаАвансаРегл = Новый ТаблицаЗначений();
	ЗачетаАвансаРегл.Колонки.Добавить("ДокументОплаты", Документы.ТипВсеСсылки());
	ЗачетаАвансаРегл.Колонки.Добавить("Сделка",         Документы.ТипВсеСсылки());
	ЗачетаАвансаРегл.Колонки.Добавить("Сумма",          ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ЗачетаАвансаРегл.Колонки.Добавить("СуммаВал",       ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ЗачетаАвансаРегл.Колонки.Добавить("Контрагент",				Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ЗачетаАвансаРегл.Колонки.Добавить("ДоговорКонтрагента",		Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ЗачетаАвансаРегл.Колонки.Добавить("ВалютаВзаиморасчетов",	Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	Если НЕ ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, 
											Перечисления.РазделыУчета.РасчетыСКонтрагентами, 
											СтруктураШапкиДокумента.Дата) Тогда
		//Оперативное определение состояния расчетов не требуется.
		Возврат ЗачетаАвансаРегл;
	КонецЕсли; 
		
	Для каждого ТекущаяТаблица Из ТаблицыДокумента Цикл

		Если ТекущаяТаблица.Значение.Колонки.Найти("Сумма") = Неопределено Тогда
			ОбщегоНазначения.ОшибкаПриПроведении("Ошибка при "+?(ЭтоВозврат,"выделении", "зачете")+" аванса.",Отказ,Заголовок);
			Возврат Неопределено;
        КонецЕсли;

		СуммаДокументаСНДСРегл = СуммаДокументаСНДСРегл + ТекущаяТаблица.Значение.Итог(ИмяРеквизитаСуммы);
		
		Если РасчетыВВалюте тогда
			СуммаДокументаСНДСВВалютеРасчетов = СуммаДокументаСНДСВВалютеРасчетов + ТекущаяТаблица.Значение.Итог(ИмяРеквизитаСуммы + "Вал");
		КонецЕсли;
		
		Если Не (ТекущаяТаблица.Значение.Колонки.Найти("НДС") = Неопределено) тогда
			Если НЕ СуммаВключаетНДС тогда

				СуммаДокументаСНДСРегл = СуммаДокументаСНДСРегл + ТекущаяТаблица.Значение.Итог("НДС");

				Если РасчетыВВалюте тогда
					СуммаДокументаСНДСВВалютеРасчетов = СуммаДокументаСНДСВВалютеРасчетов + ТекущаяТаблица.Значение.Итог("НДСВал");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
    
	Если СуммаДокументаСНДСВВалютеРасчетов = 0 тогда
		 СуммаДокументаСНДСВВалютеРасчетов = СуммаДокументаСНДСРегл;
	КонецЕсли;
	

	Если СуммаДокументаСНДСРегл = 0 тогда 
		//Документ не требует обработки
		Возврат ЗачетаАвансаРегл; // Возвращена пустая таблица
	КонецЕсли;

	Если ЭтоВозврат тогда
		Если НаправлениеДвижения="Поступление" тогда
			СодержаниеОперации = "Выделение аванса (оплаченная часть при возвр.)";
		Иначе
			СодержаниеОперации = "Возврат поставщику. Неоплаченная часть.";
		КонецЕсли;
	Иначе
		Если НаправлениеДвижения="Поступление" тогда
			СодержаниеОперации = "Зачет аванса поставщику";
		Иначе
			СодержаниеОперации = "Зачет аванса покупателя";
		КонецЕсли;
	КонецЕсли;
	
	СуфиксСчетаРасчетов = ?(НаправлениеДвижения = "Поступление", "Дт", "Кт");
	СуфиксСчетаАвансов  = ?(НаправлениеДвижения = "Поступление", "Кт", "Дт");

	//Если счет оплаты совпадает со счетом аванса
	Если НЕ ЗначениеЗаполнено(СчетАвансов) тогда
		//Проводка по бух. учету по зачету аванса не формируется
		Возврат ЗачетаАвансаРегл; // Возвращена пустая таблица
	КонецЕсли;
	
	Если РасчетыВВалюте Тогда
		УсловиеВалюта = ВалютаДокумента;
	Иначе
		УсловиеВалюта = Справочники.Валюты.ПустаяСсылка();

	КонецЕсли;

	ЗнакФильтрПоОстаткам = ?(НаправлениеДвижения = "Поступление" , 1, -1);
	ТаблицаАвансов       = ПроцедурыБухгалтерскогоУчета.ПолучитьОстатокПоСчету(Организация, СтруктурноеПодразделение, МоментДокумента,?(НаправлениеДвижения = "Поступление" и ЭтоВозврат,СчетРасчетов,СчетАвансов),УсловиеВалюта ,Контрагент, ДоговорКонтрагента,Сделка,ЗнакФильтрПоОстаткам);
	
	НомерСубконтоРасчетныеДокументы = 0;
	Если НЕ СчетАвансов.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами,"ВидСубконто") = Неопределено тогда
		НомерСубконтоРасчетныеДокументы = СчетАвансов.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами,"ВидСубконто").НомерСтроки;
	КонецЕсли;
	Если НЕ НомерСубконтоРасчетныеДокументы = 0 тогда
		УпорядочитьТаблицуПоДокументу(ТаблицаАвансов,"Субконто"+НомерСубконтоРасчетныеДокументы);
	КонецЕсли;

	СуммаЗачетаАвансаРегл            = 0;
	СуммаЗачетаАвансаВВалютеРасчетов = 0;
	КорректировкиПриРасчетахВВалюте  = 0;

	Если ТаблицаАвансов.Количество()=0 тогда
		Возврат ЗачетаАвансаРегл; // Возвращена пустая таблица
	КонецЕсли;
	
	ПроводкиБУ = ДокументОбъект.Движения.Типовой;	
	ПроводкиНУ = ДокументОбъект.Движения.Налоговый;
	
	Для каждого СтрокаАванса из ТаблицаАвансов Цикл

		//Расчет суммы перекрытия задолженности на счете, определение суммовых разниц
		ТекущийАванс = Макс(0, Мин(СуммаДокументаСНДСВВалютеРасчетов,СтрокаАванса[?(РасчетыВВалюте,"ВалютнаяСуммаОстаток","СуммаОстаток")]));
		
		
		Если ТекущийАванс = 0 тогда 
			Продолжить;
		КонецЕсли;
		
		Если РасчетыВВалюте Тогда
            // Для немонетарного счета аванса 
			// сумму покрытия в тенге определяем исходя из курса аванса
			Если ЗачетПоКурсуАванса Тогда
				Если ТекущийАванс = СтрокаАванса.ВалютнаяСуммаОстаток Тогда
					// закрываем остаток - расчет не нужен, чтобы избежать ошибок округления
					ТекущийАвансРегл = СтрокаАванса.СуммаОстаток;
				Иначе	
					ТекущийАвансРегл    = Окр(ТекущийАванс * СтрокаАванса.СуммаОстаток / СтрокаАванса.ВалютнаяСуммаОстаток, 2);
				КонецЕсли;
				
				СуммаАвансаПоКурсуДокументаРегл = Окр(ТекущийАванс * СуммаДокументаСНДСРегл / СуммаДокументаСНДСВВалютеРасчетов, 2);
				
				КорректировкиПриРасчетахВВалюте = КорректировкиПриРасчетахВВалюте + ТекущийАвансРегл - СуммаАвансаПоКурсуДокументаРегл;
				СуммаДокументаСНДСРегл          = СуммаДокументаСНДСРегл - СуммаАвансаПоКурсуДокументаРегл;
			Иначе	
				ТекущийАвансРегл = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(	ТекущийАванс, ВалютаДокумента, 
															ВалютаРегламентированногоУчета, КурсДокумента, 1,
															КратностьДокумента, 1);
			КонецЕсли;														
			
														
		Иначе

			ТекущийАвансРегл = ТекущийАванс;

		КонецЕсли;
		
		СуммаДокументаСНДСВВалютеРасчетов		= СуммаДокументаСНДСВВалютеРасчетов - ТекущийАванс;
		СуммаЗачетаАвансаВВалютеРасчетов		= СуммаЗачетаАвансаВВалютеРасчетов + ТекущийАванс;
		СуммаЗачетаАвансаРегл					= СуммаЗачетаАвансаРегл + ТекущийАвансРегл;

		СтрокаЗачетаАванса						= ЗачетаАвансаРегл.Добавить();
		СтрокаЗачетаАванса.Сумма				= ТекущийАвансРегл;
		СтрокаЗачетаАванса.Сделка				= СтруктураШапкиДокумента.Ссылка;
        СтрокаЗачетаАванса.СуммаВал				= ТекущийАванс;
		
		СтрокаЗачетаАванса.Контрагент			= Контрагент;
        СтрокаЗачетаАванса.ДоговорКонтрагента	= ДоговорКонтрагента;
		
		Если СтруктураШапкиДокумента.Свойство("ВалютаВзаиморасчетов") Тогда
			СтрокаЗачетаАванса.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
		Иначе
	        СтрокаЗачетаАванса.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли; 
		
		Если НЕ НомерСубконтоРасчетныеДокументы = 0 Тогда
			СтрокаЗачетаАванса.ДокументОплаты = СтрокаАванса["Субконто"+НомерСубконтоРасчетныеДокументы];
		КонецЕсли;

		//Формирование проводки для стандартного режима зачета аванса
		Если НЕ (ЭтоВозврат И НаправлениеДвижения="Поступление") тогда
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период			= ДатаДока;
			Проводка.Организация	= Организация;
			Проводка.НомерЖурнала	= НомерЖурнала;
			Проводка.Содержание		= СодержаниеОперации;

			Проводка["Счет" + СуфиксСчетаРасчетов]= СчетРасчетов;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + СуфиксСчетаРасчетов], Проводка["Субконто" + СуфиксСчетаРасчетов], "Контрагенты",        Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + СуфиксСчетаРасчетов], Проводка["Субконто" + СуфиксСчетаРасчетов], "Договоры",           ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + СуфиксСчетаРасчетов], Проводка["Субконто" + СуфиксСчетаРасчетов], "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

			Проводка["Счет" + СуфиксСчетаАвансов]= СчетАвансов;
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, СтруктурноеПодразделение, СтруктурноеПодразделение);

			Для НомерСубконто = 1 По 3 Цикл
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка["Счет" + СуфиксСчетаАвансов], Проводка["Субконто" + СуфиксСчетаАвансов], НомерСубконто,СтрокаАванса["Субконто" + НомерСубконто]);
			КонецЦикла;

			Проводка.Сумма = ТекущийАвансРегл;

			Если СчетРасчетов.Валютный Тогда
				Проводка["Валюта" + СуфиксСчетаРасчетов]        = ДоговорКонтрагента.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + СуфиксСчетаРасчетов] = ТекущийАванс;
			КонецЕсли;

			Если СчетАвансов.Валютный Тогда
				Проводка["Валюта" + СуфиксСчетаАвансов]        = ДоговорКонтрагента.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + СуфиксСчетаАвансов] = ТекущийАванс;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
	Если КорректировкиПриРасчетахВВалюте <> 0 Тогда
		// Сумма корректировки по поступлению ТМЗ   	
		Если НЕ ЭтоВозврат И НаправлениеДвижения = "Поступление" И ПоступлениеАктивовПоКурсуАванса Тогда
			РаспределитьКорректировкуПриРасчетахВВалюте(КорректировкиПриРасчетахВВалюте, ТаблицыДокумента, СуммаВключаетНДС, Отказ, Заголовок);
		ИначеЕсли ПереоцениватьСчетРасчетов Тогда
			// в случае, если для счета установлена переоценка и она не только регламентая
			// признаем курсовую разницу на счете расчетов
			// возникающую в результате зачета по курсу аванса
			
			// Подготовка структуры СтруктураСчетаПереоценки			
			СчетДляПереоценки 	= Новый Структура("Счет, Субконто1, Субконто2, Субконто3",СчетРасчетов, Контрагент, ДоговорКонтрагента, ДокументОбъект.Ссылка);
				
			СчетДляПереоценки.Вставить("ПризнакОборотногоСубконто", Ложь);
			СчетДляПереоценки.Вставить("Сумма", 0);
			СчетДляПереоценки.Вставить("ТаблицаОборотногоСубконто", Неопределено); 						

			Если НаправлениеДвижения = "Поступление" Тогда
				СуммаКурсовойРазницы = - КорректировкиПриРасчетахВВалюте;
			Иначе
				СуммаКурсовойРазницы = КорректировкиПриРасчетахВВалюте;
			КонецЕсли;
			
			// Для возвратов еще раз меняем знак
			Если ЭтоВозврат Тогда
				СуммаКурсовойРазницы = - СуммаКурсовойРазницы;
			КонецЕсли;
			
			// Отражение курсовой разницы
			ПроцедурыБухгалтерскогоУчета.СформироватьКорреспонденцииПоКурсовойРазнице(СтруктураШапкиДокумента,ПроводкиБУ, ПроводкиНУ, Неопределено, СчетДляПереоценки, СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ, СчетРасчетов, ДоговорКонтрагента.ВалютаВзаиморасчетов, Истина, СуммаКурсовойРазницы);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗачетаАвансаРегл;    
КонецФункции // ЗачетАванса()

// Процедура для распределения записей из одной таблицы значений 
//  по базису (таблица значений или набору записей)
//    Источник 		: ТаблицаЗначений
//    Базис 		: ТаблицаЗначений или НаборЗаписей
//    Распределение : ключ - поля базиса, значение - поля источника
//    Фильтр 		: ключ - поля базиса, значение - поля источника (если не укзан - по совпадающим колонкам)
//    Игнорировать  : ключ - поля базиса, значение - поля источника
//    Дополнить		: ключ - имя нового поля базиса, значение - значение для заполнения
Функция СформироватьКорректирующиеЗаписи(	Источник, Базис, Распределение, Фильтр = Неопределено, 
											Игнорировать = Неопределено, Дополнить = Неопределено) Экспорт

	Если ТипЗнч(Базис) = Тип("ТаблицаЗначений") Тогда
		Временный_Базис = Базис.Скопировать();
	Иначе
		Временный_Базис = Базис.Выгрузить();
	КонецЕсли;

	КолонкиИсточника = Новый Структура();

	Для Каждого Колонка Из Источник.Колонки Цикл
		КолонкиИсточника.Вставить(Колонка.Имя);
	КонецЦикла;

	КолонкиБазиса = Новый Структура();

	Для Каждого Колонка Из Временный_Базис.Колонки Цикл

		Если Не(НЕ ЗначениеЗаполнено(Колонка.Имя)) Тогда
			КолонкиБазиса.Вставить(Колонка.Имя);
		КонецЕсли;

	КонецЦикла;

	Если НЕ ЗначениеЗаполнено(Игнорировать) Тогда
		Игнорировать = Новый Структура();

	Иначе

		//Зачистим колонки источника и базиса на игнорируемые колонки
		Для Каждого Колонка Из Игнорировать Цикл

			Если КолонкиИсточника.Свойство(?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)) тогда
				КолонкиИсточника.Удалить(?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение));
			КонецЕсли;

			Если КолонкиБазиса.Свойство(Колонка.Ключ) Тогда
				КолонкиБазиса.Удалить(Колонка.Ключ);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	//Зачистим колонки источника на распределяемые колонки. Они учитываются отдельно.
	Для Каждого Колонка Из Распределение Цикл
		
		Если КолонкиИсточника.Свойство(?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)) Тогда
			 КолонкиИсточника.Удалить(?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение));
		Иначе
			 Если Источник.Колонки.Найти(?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)) = Неопределено тогда
				 //Не хватает колонок к распределению
				 //Но одну и ту же колонку можно распределить дважды
				 Возврат Ложь;
			 КонецЕсли;
		КонецЕсли;
		
		Если КолонкиБазиса.Свойство(Колонка.Ключ) тогда
			 КолонкиБазиса.Удалить(Колонка.Ключ);
		Иначе
			  //Не хватает колонок базиса распределения
			 Возврат ложь;
		 КонецЕсли;
		 
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Дополнить) Тогда
		//Проверим на отсутствие дополняемых колонок!
		Для Каждого Колонка Из Дополнить Цикл
			Если КолонкиБазиса.Свойство(Колонка.Ключ) Тогда
				//Такая колонка уже есть, нельзя добавить новую
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
 	КонецЕсли;
	
	//Если фильтр не задан - по всем совпадающим колонкам
	Если Фильтр = Неопределено Тогда
		Фильтр = Новый Структура();
		Для каждого Колонка из КолонкиБазиса Цикл
			Если КолонкиИсточника.Свойство(Колонка.Ключ) И НЕ (Игнорировать.Свойство(Колонка.Ключ)) Тогда
				Фильтр.Вставить(Колонка.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Фильтр) Тогда
		//Должно быть хоть одно объединяющее поле!
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Колонка Из Фильтр Цикл
		Если НЕ КолонкиБазиса.Свойство(Колонка.Ключ) Тогда
			  //Не хватает колонок базиса распределения
			 Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	//Подготовить сворачивание для источника
	СтрокаСверткиИсточник = ОбщегоНазначения.ВыгрузитьСтруктуруВСтроку(Фильтр, Истина, КолонкиИсточника);
	
	Если СтрокаСверткиИсточник = Ложь Тогда
		//попытка фильтровать по полю, отсутствующему в источнике!
		Возврат Ложь;
	КонецЕсли;
	
	КолонкиКРаспределениюИсточник = ОбщегоНазначения.ВыгрузитьСтруктуруВСтроку(Распределение, Истина);
	
	Если КолонкиКРаспределениюИсточник = Ложь Тогда
		//попытка распределить поле, отсутствующее в источнике!
		Возврат Ложь;
	КонецЕсли;
	
	//Подготовить сворачивание для базиса
	СтрокаСверткиБазис = ОбщегоНазначения.ВыгрузитьСтруктуруВСтроку(КолонкиБазиса, Ложь);
	
	Если СтрокаСверткиБазис = Ложь Тогда
		//попытка фильтровать по полю, отсутствующему в базисе!
		Возврат Ложь;
	КонецЕсли;
	
	КолонкиКРаспределениюБазис = ОбщегоНазначения.ВыгрузитьСтруктуруВСтроку(Распределение,Ложь);
	
	Если КолонкиКРаспределениюБазис = Ложь Тогда
		//попытка распределить поле, отсутствующее в базисе!
		Возврат Ложь;
	КонецЕсли;
	
	Временный_Источник = Источник.Скопировать();
	
	ИмяСуммаСписания = ",СуммаСписания";
	Если Найти(СтрокаСверткиБазис,",СуммаСписания") <> 0 Тогда
		СтрокаСверткиБазис 			= СтрЗаменить(СтрокаСверткиБазис, ",СуммаСписания", "");
		КолонкиКРаспределениюБазис 	= КолонкиКРаспределениюБазис + ",СуммаСписания";
	КонецЕсли;
	
	Временный_Базис.Свернуть(СтрокаСверткиБазис, КолонкиКРаспределениюБазис);
	Временный_Источник.Свернуть(СтрокаСверткиИсточник, КолонкиКРаспределениюИсточник);
	
	НоваяТаблица = Новый ТаблицаЗначений();
	Для каждого Колонка Из Временный_Базис.Колонки Цикл
		НоваяТаблица.Колонки.Добавить(Колонка.Имя,,,10);
	КонецЦикла;
	
	ТаблицаБазисовРаспределения = Новый ТаблицаЗначений();
	Для каждого Колонка Из Распределение Цикл
		ТаблицаБазисовРаспределения.Колонки.Добавить(Колонка.Ключ);
	КонецЦикла;
	
	Для каждого СтрокаИсточника Из Временный_Источник Цикл
		
		Отбор = Новый структура();
		
		Для каждого Колонка Из Фильтр Цикл
			Отбор.Вставить(Колонка.Ключ,СтрокаИсточника[?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)]);
		КонецЦикла;
		
		СтрокиБазиса = Временный_Базис.НайтиСтроки(Отбор);
		ТаблицаБазисовРаспределения.Очистить();
		Для каждого Строка Из СтрокиБазиса Цикл
			
			СтрокаТБР = ТаблицаБазисовРаспределения.Добавить();
			
			Для каждого Колонка Из ТаблицаБазисовРаспределения.Колонки Цикл
				СтрокаТБР[Колонка.Имя] = Строка[Колонка.Имя];
			КонецЦикла;
			
		КонецЦикла;
		
		Для каждого Колонка Из Распределение Цикл
			
			РаспределяемаяСумма		= СтрокаИсточника[?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)];
			МассивДляРаспределения	= ТаблицаБазисовРаспределения.ВыгрузитьКолонку(Колонка.Ключ);
			МассивРезультата		= ОбщегоНазначения.РаспределитьПропорционально(РаспределяемаяСумма, МассивДляРаспределения);
			
			Если МассивРезультата = Неопределено Тогда
				ТаблицаБазисовРаспределения.ЗаполнитьЗначения(0, Колонка.Ключ);
			Иначе	
				ТаблицаБазисовРаспределения.ЗагрузитьКолонку(МассивРезультата, Колонка.Ключ);
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаРезультата = 0;
		Для каждого Строка Из СтрокиБазиса Цикл
			
			СтрокаНовая						= НоваяТаблица.Добавить();
			СрокаРекультатаРаспределения	= ТаблицаБазисовРаспределения[СтрокаРезультата];
			СтрокаРезультата				= СтрокаРезультата + 1;
			
			Для каждого Колонка Из Временный_Базис.Колонки Цикл
				Если Распределение.Свойство(Колонка.Имя) Тогда
					СтрокаНовая[Колонка.Имя] = СрокаРекультатаРаспределения[Колонка.Имя];
				Иначе
					СтрокаНовая[Колонка.Имя] = Строка[Колонка.Имя];
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Дополнить) Тогда
		Для каждого Колонка Из Дополнить Цикл
			НоваяТаблица.Колонки.Добавить(Колонка.Ключ, , , 10);
			НоваяТаблица.ЗаполнитьЗначения(Колонка.Значение, Колонка.Ключ);
		КонецЦикла;
	КонецЕсли;

	СтрокиС0Распределением = Новый Массив();

	Для каждого Строка Из НоваяТаблица Цикл

		СуммаРаспределений0 = Истина;

		Для каждого Колонка Из распределение Цикл
			Если ЗначениеЗаполнено(Строка[Колонка.Ключ]) Тогда
				СуммаРаспределений0 = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если СуммаРаспределений0 Тогда
			СтрокиС0Распределением.Добавить(Строка);
		КонецЕсли;

	КонецЦикла;

	Для каждого ПустаяСтрока из СтрокиС0Распределением Цикл 
		НоваяТаблица.Удалить(ПустаяСтрока);
	КонецЦикла;
	
	Возврат НоваяТаблица;

КонецФункции // СформироватьКорректирующиеЗаписи()

#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДИАЛОГОВ РАСЧЕТНЫХ ДОКУМЕНТОВ

// Процедура вызывает сервисный механизм для изменения общих для
// всей табличной части Товары реквизитов, таких, например, как
// тип цен, валюта и т. д.
//
// Параметры:
//  ДокументОбъект                     - обьъект редактируемого документа; 
//  СпособЗаполненияЦен                - значение перечисления "Способы заполнения цен", определяет по какому из 
//                                       регистров ("Цены компании" или "Цены контрагентов") будет строиться запрос.
//  СтруктураРеквизитовДокумента       - структура, задает список обрабатываемых реквизитов документа;
//                                       если реквизит надо обрабатывать, то для него есть ключ в этой структуре;
//  СтруктураНеРедактируемыхРеквизитов - структура, задает список реквизитов, которые надо показывать, 
//                                       но не надо давать изменять, необязательный параметр;
//  ИмяТабличнойЧасти                  - строка, имя табличной части, которую надо пересчитать;
//  ВалютаРегламентированногоУчета     - валюта регламентированного учета
//  СтруктураЗначений                  - для эмуляции ввода пользователем валюты, типа цен и пр. Применяется при
//                                       автоматическом заполнении документов.
//  НовыйТипЦенДляУстановки            - тип цен, который по возможности нужно установить как новый в форме;
//  СтруктураНеобрабатываемыхТабличныхЧастей - структура, содержащая имена табличных частей, которые не надо 
//                                       обрабатывать при изменении цен/валюты;
//
Процедура ИзменитьЦеныВалюту(ДокументОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, 
							   СтруктураНеРедактируемыхРеквизитов = Неопределено, ИмяТабличнойЧасти,
							   ВалютаРегламентированногоУчета,
							   СкидкаУстановлена = Ложь,
							   СтруктураЗначений = Неопределено,
							   НовыйТипЦенДляУстановки = Неопределено,
							   СтруктураНеобрабатываемыхТабличныхЧастей = Неопределено) Экспорт

	// Откроем модально форму "Цены и Налоги" и получим структуру старых и новых значений реквизитов документа
	Автозаполнение = Ложь;
	Если СтруктураЗначений = Неопределено Тогда

		СтруктураЗначений = УправлениеЦенообразованием.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, ВалютаРегламентированногоУчета,
									  СтруктураНеРедактируемыхРеквизитов, ИмяТабличнойЧасти, НовыйТипЦенДляУстановки);

	Иначе
		Автозаполнение = Истина;

	КонецЕсли;

	// Если в форме отказались от изменений, то необходимо прекратить обработку
	Если СтруктураЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	// Заполним нужные реквизиты документа
	УправлениеЦенообразованием.УстановитьРеквизитыДокументаПоЗначениямФормыЦеныВалюта(СтруктураЗначений, ДокументОбъект, СтруктураРеквизитовДокумента);

	//обрабатываем изменения Товаров, Услуг, ВозворатнойТары и Оборудования
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Для каждого ТЧОбъекта Из МетаданныеДокумента.ТабличныеЧасти Цикл

		ТекущееИмяТабличнойЧасти = ТЧОбъекта.Имя;

		Если (СтруктураНеобрабатываемыхТабличныхЧастей = Неопределено
			  ИЛИ НЕ СтруктураНеобрабатываемыхТабличныхЧастей.Свойство(ТекущееИмяТабличнойЧасти))
			И (   ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Цена",               МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма",              МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ФактурнаяСтоимость", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаПоступления",    МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаПоступления",   МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаПередачи",       МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаПередачи",      МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаСтарая",         МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаСтарая",        МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС",           МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			  ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза",        МетаданныеДокумента, ТекущееИмяТабличнойЧасти)) Тогда

			УправлениеЦенообразованием.ОбработатьИзмененияПоКнопкеЦеныВалюта(ДокументОбъект,
												  СпособЗаполненияЦен,
												  СтруктураРеквизитовДокумента,
												  ТекущееИмяТабличнойЧасти,
												  ВалютаРегламентированногоУчета,
												  СкидкаУстановлена,
												  СтруктураЗначений,
												  Автозаполнение);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ИзменитьЦеныВалюту()

// Процедура выполняет общие действия при изменнении контрагента
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//
Процедура ПриИзмененииЗначенияКонтрагента(	ДокументОбъект, Знач СтруктураПараметровДляПолученияДоговора = Неопределено) Экспорт

	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		// для совместимости с прежней версией процедуры проверим тип параметра - раньше был список с видами договоров
		Если ТипЗнч(СтруктураПараметровДляПолученияДоговора) = Тип("СписокЗначений") Тогда
			ВрмСписок = СтруктураПараметровДляПолученияДоговора;
			СтруктураПараметровДляПолученияДоговора = Новый Структура("СписокДопустимыхВидовДоговоров", ВрмСписок);
		КонецЕсли;
	КонецЕсли;

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	ЕстьДоговорКонтрагента        = ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента);
	ЕстьКонтактноеЛицоКонтрагента = ОбщегоНазначения.ЕстьРеквизитДокумента("КонтактноеЛицоКонтрагента", МетаданныеДокумента);

	Если ДокументОбъект.Контрагент = Неопределено Тогда
		ДокументОбъект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли; 

	Если ТипЗнч(ДокументОбъект.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Если ТипЗнч(ДокументОбъект.Контрагент) = Тип("Строка") Тогда
				КонтактноеЛицоКонтрагента = "";
			Иначе
				КонтактноеЛицоКонтрагента = Справочники["КонтактныеЛицаКонтрагентов"].ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;

	Иначе

		// Если в документе уже выбран "правильный" договор, то не будем его менять.
		Если ЕстьДоговорКонтрагента Тогда
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда 
				ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			Иначе
				Если ЗаполнениеДокументов.МожноИспользоватьДоговорДляДокумента(ДокументОбъект.ДоговорКонтрагента, ДокументОбъект.Контрагент, ДокументОбъект.Организация, СтруктураПараметровДляПолученияДоговора) Тогда
					ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
				Иначе
					ДоговорКонтрагента = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(ДокументОбъект.Организация, ДокументОбъект.Контрагент, СтруктураПараметровДляПолученияДоговора);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ЕстьКонтактноеЛицоКонтрагента Тогда
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.КонтактноеЛицоКонтрагента)
			 ИЛИ ТипЗнч(ДокументОбъект.КонтактноеЛицоКонтрагента) <> Вычислить("Тип(""СправочникСсылка.КонтактныеЛицаКонтрагентов"")") Тогда
				КонтактноеЛицоКонтрагента = ДокументОбъект.Контрагент.ОсновноеКонтактноеЛицо;
			Иначе
				Если ДокументОбъект.КонтактноеЛицоКонтрагента.Владелец <> ДокументОбъект.Контрагент Тогда
					КонтактноеЛицоКонтрагента = ДокументОбъект.Контрагент.ОсновноеКонтактноеЛицо;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 

	КонецЕсли;

	Если ЕстьДоговорКонтрагента Тогда
		ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
		   И ДоговорКонтрагента <> Неопределено 
		   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
			ДокументОбъект.Организация        = ДоговорКонтрагента.Организация;
		КонецЕсли;
	КонецЕсли;

	Если ЕстьКонтактноеЛицоКонтрагента 
	    И КонтактноеЛицоКонтрагента <> Неопределено Тогда
		ДокументОбъект.КонтактноеЛицоКонтрагента = КонтактноеЛицоКонтрагента;
	КонецЕсли; 

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента) Тогда
		ДокументОбъект.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
	   И ЗначениеЗаполнено(ДокументОбъект.ТипЦен)
	   И ДокументОбъект.ТипЦен.Метаданные().Имя = "ТипыЦенНоменклатурыКонтрагентов"
	   И НЕ ДокументОбъект.ТипЦен.Владелец = ДокументОбъект.Контрагент Тогда
		// очистим тип цен
		ДокументОбъект.ТипЦен =  Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("БанковскийСчетКонтрагента", МетаданныеДокумента) Тогда
		ДокументОбъект.БанковскийСчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииЗначенияКонтрагента()

// Процедура выполняет общие действия при изменнении договора взаиморасчетов
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа,
//  СпособЗаполненияЦен            - значение перечисления "Способы заполнения цен", определяет по какому из 
//                                   регистров ("Цены номенклатуры" или "Цены номенклатуры контрагентов") будет строиться запрос;
//  СтараяВалютаВзаиморасчетов     - ссылка на справочник валют, определяет валюту взаиморасчетов 
//                                   до изменения договора;
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СтруктураРеквизитовДокумента   - структура, задает список обрабатываемых реквизитов документа;
//                                   если реквизит надо обрабатывать, то для него есть ключ в этой структуре
//  ТипОперации                    - необязаетельный, строка вида операции ("Покупка" или "Продажа");
//                                   если не передан, то реквизиты, зависящие от вида операции, не заполняются
//  ИмяТабличнойЧасти	           - имя табличной части
//  СтарыйДоговорКонтрагента       - старый договор контрагента, который был до изменения
//  СтруктураЗначений              - структура, в эту переменную возвращаются значения элементов диалога выбора валюты.
//
Процедура ПриИзмененииЗначенияДоговора( ДокументОбъект, СтараяВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
	                             		СпособЗаполненияЦен, СтруктураРеквизитовДокумента, ТипОперации = "", 
	                             		ИмяТабличнойЧасти, СтарыйДоговорКонтрагента = Неопределено,
	                             		СтруктураЗначений = Неопределено) Экспорт

	Перем Договор, ТипЦенВДоговоре;

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Договор = ДокументОбъект.ДоговорКонтрагента;
	// отработка не инициализированного значения догов
	Если СтарыйДоговорКонтрагента = Неопределено Тогда
		СтарыйДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, ДокументОбъект.Дата);

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
			ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
			ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;

		Возврат;

	Иначе

		// Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов
		// и догоров взаиморасчетов имеет тип не договор поставщика, то это неправильно и надо вернуть старый договор
		// Аналогично если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры
		// и догоров взаиморасчетов имеет тип не договор покупателя

		МожноПродолжать = Истина;
		
		Если (СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов
			И (Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем ИЛИ 
			   (Метаданные.Перечисления.ВидыДоговоровКонтрагентов.ЗначенияПеречисления.Найти("СКомиссионером")<>Неопределено И Договор.ВидДоговора = Вычислить("Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером"))))
			ИЛИ (СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры
			И (Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком ИЛИ 
			   (Метаданные.Перечисления.ВидыДоговоровКонтрагентов.ЗначенияПеречисления.Найти("СКомитентом")<>Неопределено И Договор.ВидДоговора = Вычислить("Перечисления.ВидыДоговоровКонтрагентов.СКомитентом")))) Тогда
			
			МожноПродолжать = Ложь;
			СтрокаВозможныхВыборов = ?(СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
			    				     ?(Метаданные.Перечисления.ВидыДоговоровКонтрагентов.ЗначенияПеречисления.Найти("СКомиссионером")<>Неопределено, "покупателями, комиссионерами или прочее", "покупателями или прочее"),
									 ?(Метаданные.Перечисления.ВидыДоговоровКонтрагентов.ЗначенияПеречисления.Найти("Скомитентом")<>Неопределено, "поставщиками, комитентами или прочее", "поставщиками или прочее"));
			
		КонецЕсли;
		
		Если НЕ МожноПродолжать Тогда
			
			ТекстПредупреждения = "В документе можно выбирать только договора с "
				                    + СтрокаВозможныхВыборов + "!" + Символы.ПС;

			Если ЗначениеЗаполнено(СтарыйДоговорКонтрагента) 
			   И СтарыйДоговорКонтрагента.Владелец = ДокументОбъект.Контрагент Тогда
				ТекстПредупреждения = ТекстПредупреждения + "Будет восстановлен старый договор.";
				ДокументОбъект.ДоговорКонтрагента = СтарыйДоговорКонтрагента;
			Иначе
				ТекстПредупреждения = ТекстПредупреждения + "Договор будет очищен.";
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
			КонецЕсли;
			
			Предупреждение(ТекстПредупреждения);
			// дальше ничего пересчитывать не надо
			Возврат;

		КонецЕсли;
		
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента)Тогда
		ДокументОбъект.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
	КонецЕсли; 

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда

		ДокументОбъект.Контрагент = Договор.Владелец;

	ИначеЕсли ЗначениеЗаполнено(Договор)
	        И ДокументОбъект.Контрагент <> Договор.Владелец Тогда //Владелец нового договора должен совпадать с контрагентом документа.
	        
			Предупреждение("Выбранный договор принадлежит другому контрагенту. 
			               |Будет восстановлен старый договор.");
			Договор = СтарыйДоговорКонтрагента;

	КонецЕсли;

	//Владелец нового договора должен совпадать с контрагентом документа.
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
		 И НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.Организация = Договор.Организация;
		Если Не ПустаяСтрока(ДокументОбъект.Номер) Тогда
			ДокументОбъект.Номер = "";
		КонецЕсли;
	КонецЕсли;

	// если хоть в одной табличной части есть хотя бы одна строка, надо пересчитывать
	НадоПересчитывать = Ложь;
	Для Каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
		Если ДокументОбъект[ТЧОбъекта.Имя].Количество() > 0 Тогда
			НадоПересчитывать = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если НадоПересчитывать = Ложь Тогда

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
		
			ДокументОбъект.ВалютаДокумента  = Договор.ВалютаВзаиморасчетов;
			СтруктураКурсаДокумента 	    = ОбщегоНазначения.ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);

			// В некоторых документах курс и кратность документа отсутствуют.
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КурсДокумента           = СтруктураКурсаДокумента.Курс;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
				ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
			
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(Договор.ТипЦен) Тогда
			
				ДокументОбъект.ТипЦен = Договор.ТипЦен;
				
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) 
				   И ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
				   И ДокументОбъект.УчитыватьНДС Тогда
					ДокументОбъект.СуммаВключаетНДС= Договор.ТипЦен.ЦенаВключаетНДС;
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокумента) 
				   И ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьАкциз", МетаданныеДокумента) 
				   И ДокументОбъект.УчитыватьАкциз Тогда
					ДокументОбъект.СуммаВключаетАкциз= Договор.ТипЦен.ЦенаВключаетАкциз;
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;

	Иначе // ДокументОбъект.[ИмяТабличнойЧасти].Количество() > 0

		// Если заполнен и по другим параметрам, то предварительно спрашиваем
		НеобходимоПересчитать = Ложь;
		ТекстВопроса = "Договор с контрагентом предусматривает параметры взаиморасчетов,
		               |отличные от установленных в документе:";

		// Валюта документа
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
		   И (ЗначениеЗаполнено(Договор.ВалютаВзаиморасчетов)) Тогда
		   
			НовыйВалютаДокумента    = Договор.ВалютаВзаиморасчетов;
			СтруктураКурсаДокумента = ОбщегоНазначения.ПолучитьКурсВалюты(НовыйВалютаДокумента, ДокументОбъект.Дата);
			
			Если СтруктураРеквизитовДокумента.Свойство("КурсВзаиморасчетов") Тогда
				СтруктураРеквизитовДокумента.Вставить("КурсВзаиморасчетов", СтруктураКурсаДокумента.Курс);
			КонецЕсли;
			
			Если СтруктураРеквизитовДокумента.Свойство("КратностьВзаиморасчетов") Тогда
				СтруктураРеквизитовДокумента.Вставить("КратностьВзаиморасчетов", СтруктураКурсаДокумента.Кратность);
			КонецЕсли;

			Если  ДокументОбъект.ВалютаДокумента <> НовыйВалютаДокумента Тогда
				НеобходимоПересчитать = Истина;
				ТекстВопроса = ТекстВопроса + Символы.ПС + 
				                 "Валюта документа: """ +
				                ?(НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента), "Не задана",СокрЛП(ДокументОбъект.ВалютаДокумента)) +
				                  """, договора: """ +  СокрЛП(НовыйВалютаДокумента) + """.";
			КонецЕсли;
		КонецЕсли;

		// Тип цен
		НадоПередаватьНовыйТипЦен = Ложь;
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента) Тогда
		
			НовыйТипЦен = ДокументОбъект.ТипЦен;
			
			Если ЗначениеЗаполнено(Договор.ТипЦен) Тогда
				НовыйТипЦен = Договор.ТипЦен;
			КонецЕсли;

			Если ДокументОбъект.ТипЦен <> НовыйТипЦен Тогда
				НеобходимоПересчитать 		= Истина;
				НадоПередаватьНовыйТипЦен 	= Истина;
				ТекстВопроса 				= ТекстВопроса + Символы.ПС +
				                 				"Тип цен документа: """ +
				                 				?(НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен), "Не задан",СокрЛП(ДокументОбъект.ТипЦен)) +
				                   				""", договора: """ + СокрЛП(НовыйТипЦен) + """.";
			КонецЕсли;
		КонецЕсли;

		Если НеобходимоПересчитать Тогда
		
			ТекстВопроса 	= ТекстВопроса + Символы.ПС + "Пересчитать документ в соответствии с договором?";
			Ответ 			= Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда

				// Вызов общей формы "Цены и валюта" и пересчеты по результата выбора в этой форме
				СтруктураРеквизитовДокумента.Вставить("ВызовПриИзмененииЗначенияДоговора");
				ИзменитьЦеныВалюту(ДокументОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента,, ИмяТабличнойЧасти, ВалютаРегламентированногоУчета,, СтруктураЗначений, ?(НадоПередаватьНовыйТипЦен, НовыйТипЦен, Неопределено));

				// Если в форме "Цены и валюта" бала нажата кнопка отмена то проверим реквизиты
				// КурсВзаиморасчетов и КратностьВзаиморасчетов на заполнение
				ЕстьКурсВзаиморасчетов      = ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента);
				ЕстьКратностьВзаиморасчетов = ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента);
				Если ЕстьКурсВзаиморасчетов ИЛИ ЕстьКратностьВзаиморасчетов Тогда

					СтруктураКурсаВзаиморасчетов = ОбщегоНазначения.ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
					Если ЕстьКурсВзаиморасчетов И НЕ ЗначениеЗаполнено(ДокументОбъект.КурсВзаиморасчетов)Тогда
						ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
					КонецЕсли;
					Если ЕстьКратностьВзаиморасчетов И НЕ ЗначениеЗаполнено(ДокументОбъект.КратностьВзаиморасчетов) Тогда
						ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;
			
		Иначе

			// Установим курс и кратность взаиморасчетов
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) 
			   И (ЗначениеЗаполнено(Договор.ВалютаВзаиморасчетов)) Тогда
			   
				СтруктураКурсаВзаиморасчетов = ОбщегоНазначения.ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
				
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
					ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
					ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; // ДокументОбъект.[ИмяТЧ].Количество() = 0

	// если валюта документа после выбора договора не совпадала с валютой договора или с регламентированной, 
	// очистим договор
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) 
	   И ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета
	   И ДокументОбъект.ВалютаДокумента <> ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда

	    ТекстПредупреждения = "Валюта документа не совпадает ни с валютой договора, ни с валютой регламентированного учета!"+Символы.ПС;
		Если ЗначениеЗаполнено(СтарыйДоговорКонтрагента) 
		   И СтарыйДоговорКонтрагента.Владелец = ДокументОбъект.Контрагент Тогда
			ТекстПредупреждения = ТекстПредупреждения + "Будет восстановлен старый договор.";
			ДокументОбъект.ДоговорКонтрагента = СтарыйДоговорКонтрагента;
		Иначе
			ТекстПредупреждения = ТекстПредупреждения + "Договор будет очищен.";
			ДокументОбъект.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
		
        Предупреждение(ТекстПредупреждения);
		// дальше ничего пересчитывать не надо
		Возврат;
		
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияДоговора()

// Устанавливает текст надписи заголовка суммы взаиморасчетов на форме документа
//
// Параметры:
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьНадписьСуммыВзаиморасчетов(ДокументОбъект, ФормаДокумента) Экспорт

	ВалютаВзаиморасчетовПоДоговору = ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
		ФормаДокумента.ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма <нет валюты>:";
	Иначе	
		ФормаДокумента.ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
	КонецЕсли;	

КонецПроцедуры // УстановитьНадписьСуммыВзаиморасчетов()

#КонецЕсли

// Определяется ведутся или нет взаиморасчеты по расчетным документам
//
// Возвращаемое значение:
//   Булево - истина - взаиморасчеты по документам учет ведется,
//			  ложь   - взаиморасчеты по документам учет не ведтся.
//
Функция ВедутсяВзаиморасчетыПоДокументам() Экспорт
	
	ЗапросКСчетамВзаиморасчетов = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
    |	Типовой.Ссылка
    |ИЗ
    |	ПланСчетов.Типовой КАК Типовой
    |ГДЕ
	|	Типовой.ВидыСубконто.ВидСубконто = (&ВидСубконтоДокументыРасчетов)");
	
	ЗапросКСчетамВзаиморасчетов.УстановитьПараметр("ВидСубконтоДокументыРасчетов",ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами);
	
	Возврат НЕ ЗапросКСчетамВзаиморасчетов.Выполнить().Пустой();
	
КонецФункции // ВедутсяВзаиморасчетыПоДокументам()

// Получает список счетов взаиморасчетов
// для которых может быть установлено субконто "ДокументРасчетовСКонтрагентом"
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   СписокЗначений   – список, содержащий исключаемые счета
//
Функция ПолучитьСписокСчетовВзаиморасчетов() Экспорт

	ЗапросКСчетамВзаиморасчетов = Новый Запрос("ВЫБРАТЬ
    |	Типовой.Ссылка КАК Ссылка
    |ИЗ
    |	ПланСчетов.Типовой КАК Типовой
    |ГДЕ
	|	Типовой.ВидыСубконто.ВидСубконто = (&ВидСубконтоКонтрагенты)
	|	И Типовой.ВидыСубконто.ВидСубконто = (&ВидСубконтоДоговоры)");
	
	ЗапросКСчетамВзаиморасчетов.УстановитьПараметр("ВидСубконтоКонтрагенты",ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ЗапросКСчетамВзаиморасчетов.УстановитьПараметр("ВидСубконтоДоговоры",	ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	
	Возврат ЗапросКСчетамВзаиморасчетов.Выполнить().Выгрузить();

КонецФункции // ПолучитьСписокСчетовВзаиморасчетов()
