
Функция ПолучитьТекстОрганизация(ОтчетОбъект = Неопределено, Организация = Неопределено, ВключатьОбособленныеПодразделения = Ложь) Экспорт
	
	Если ОтчетОбъект <> Неопределено Тогда
		Организации                       = ОтчетОбъект.мСписокСтруктурныхЕдиниц;
	КонецЕсли;
	
	ТекстОрганизации = "";
	Если ЗначениеЗаполнено(Организации) Тогда
		
		Для Каждого Организация Из Организации Цикл 
			
			Текст = "";
			Если ПустаяСтрока(Текст) Тогда
				Текст = Организация.Значение.Наименование;
			КонецЕсли;
			
			ТекстОрганизации = ТекстОрганизации + Текст + ";"; 
			
		КонецЦикла;                                   		
		
	КонецЕсли;
	
	Возврат Лев(ТекстОрганизации, СтрДлина(ТекстОрганизации) - 1);
	
КонецФункции

Процедура СохранитьНастройку(ОтчетОбъект, ДополнительныеПоля = Неопределено, ВыбранныеНастройки = Неопределено,Отчет=Истина) Экспорт
	
	Если Отчет Тогда
		СтруктураНастроек = ПолучитьСтруктуруПараметровТиповогоОтчета(ОтчетОбъект);
	Иначе
		СтруктураНастроек = Новый Структура;
	КонецЕсли;
	//Дополним структуру сохраняемых настрек значением списка организаций
	Если ДополнительныеПоля <> Неопределено Тогда 
		Для Каждого СтрокаСписка Из ДополнительныеПоля Цикл
			Если ТипЗнч(ДополнительныеПоля)=тип("СписокЗначений") Тогда
				СтруктураНастроек.Вставить(СтрокаСписка.Представление, СтрокаСписка.Значение);
			Иначе
				СтруктураНастроек.Вставить(СтрокаСписка.Ключ, СтрокаСписка.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТипНастройки = ?(Отчет,Перечисления.ТипыНастроек.НастройкиОтчета,Перечисления.ТипыНастроек.ПроизвольныеНастройки);
	
	// Если массив ВыбранныеНастройки заполнен,
	// то оставим в СтруктураНастроек только выбранные для сохранения настройки
	Если ВыбранныеНастройки <> Неопределено
		 И ВыбранныеНастройки.Количество() > 0 Тогда
		МассивЭлементовСтруктуры = Новый Массив;
		Для Каждого Элемент Из СтруктураНастроек Цикл
			МассивЭлементовСтруктуры.Добавить(Элемент.Ключ);
		КонецЦикла;
		Для Каждого Элемент Из МассивЭлементовСтруктуры Цикл
			Если ВыбранныеНастройки.Найти(Элемент) = Неопределено Тогда
				СтруктураНастроек.Удалить(Элемент);
			КонецЕсли;
		КонецЦикла;
		ТипНастройки = Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета;
	КонецЕсли;
	
	СсылкаНаОбъект = ?(ТипЗнч(ОтчетОбъект)=Тип("Структура"),ОтчетОбъект.Представление,"ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя);
	
	СохраненнаяНастройка = ОтчетОбъект.СохраненнаяНастройка;
	Если СохраненнаяНастройка = Неопределено
		 ИЛИ СохраненнаяНастройка.Пустая() Тогда
		ПользователиДляОтбора = Новый Массив;
		ПользователиДляОтбора.Добавить(ПараметрыСеанса.ТекущийПользователь);
		Если Метаданные.Справочники.Найти("ГруппыПользователей")<>Неопределено Тогда
			ПользователиДляОтбора.Добавить(Справочники.ГруппыПользователей.ВсеПользователи);
		КонецЕсли;	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	СохраненныеНастройки.Ссылка КАК СохраненнаяНастройка
		|ИЗ
		|	Справочник.общ_СохраненныеНастройки.Пользователи КАК СохраненныеНастройкиПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.общ_СохраненныеНастройки КАК СохраненныеНастройки
		|		ПО СохраненныеНастройкиПользователи.Ссылка = СохраненныеНастройки.Ссылка
		|ГДЕ
		|	СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
		|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
		|	И СохраненныеНастройкиПользователи.Пользователь В(&Пользователи)
		|	И СохраненныеНастройки.ТипНастройки = &ТипНастройки
		|	И (НЕ СохраненныеНастройки.ПометкаУдаления)";
		
		Запрос.УстановитьПараметр("Пользователи", ПользователиДляОтбора);
		Запрос.УстановитьПараметр("НастраиваемыйОбъект", СсылкаНаОбъект);
		Запрос.УстановитьПараметр("ТипНастройки", ТипНастройки);
		ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаРезультата.Количество() > 0 Тогда
			СохраненнаяНастройка = ТаблицаРезультата[0].СохраненнаяНастройка;
		Иначе
			Настройка = Справочники.общ_СохраненныеНастройки.СоздатьЭлемент();
			Настройка.НастраиваемыйОбъект = СсылкаНаОбъект;
			Настройка.ТипНастройки = Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета;
			Настройка.Наименование = "НастройкиПользователяНастройкиОтчета";
			Настройка.ИспользоватьПриОткрытии = Истина;
//			Настройка.Владелец = ПользователиКлиентСервер.АвторизованныйПользователь();
			НовыйПользователь = Настройка.Пользователи.Добавить();
			НовыйПользователь.Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
			Настройка.Записать();
			
			СохраненнаяНастройка = Настройка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Процедура сохраняет настройки формы.
//
// Параметры:
//  СохраненнаяНастройка       - СправочникСсылка.общ_СохраненныеНастройки - сохраняемая настройка.
//  СохраняемыеНастройки - параметры настройки формы.
//
Процедура СохранитьНастройкуОбъекта(СохраненнаяНастройка, СохраняемыеНастройки) Экспорт

	ОбъектСохраненнаяНастройка = СохраненнаяНастройка.ПолучитьОбъект();
	
	Если СохраняемыеНастройки.Свойство("УниверсальныйОтчет") Тогда
		СохраняемыеНастройки.Удалить("УниверсальныйОтчет");
	КонецЕсли;
	
	ОбъектСохраненнаяНастройка.ХранилищеНастроек = Новый ХранилищеЗначения(СохраняемыеНастройки);
	
	Попытка
		ОбъектСохраненнаяНастройка.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Настройка формы не записана:" + Символы.ПС + "- " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры


// Возвращает структуру параметров отчета для сохранения
Функция ПолучитьСтруктуруПараметровТиповогоОтчета(ОтчетОбъект) Экспорт
	
	СтруктураПараметров = Новый Структура;
	Для Каждого Реквизит Из ОтчетОбъект.Метаданные().Реквизиты Цикл
		Если Реквизит.Имя = "СхемаКомпоновкиДанных" 
		 ИЛИ Реквизит.Имя = "ДатаВерсииИсточникаДанных"
		 ИЛИ Реквизит.Имя = "ИсточникДанныхОтчета"
		 ИЛИ Реквизит.Имя = "Описание"
		 ИЛИ Реквизит.Имя = "ПодлежитПередачеВПодчиненныеУзлыПриОбменеПоОрганизации" Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПараметров.Вставить(Реквизит.Имя, ОтчетОбъект[Реквизит.Имя])
	КонецЦикла;
	
	Попытка
		СтруктураПараметров.Вставить("НастройкиКомпоновщика", ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки());
	Исключение
		СтруктураПараметров.Вставить("НастройкиКомпоновщика", ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки());
	КонецПопытки;
	
	Если СтруктураПараметров.Свойство("Версия") тогда
		СтруктураПараметров.Версия = РабочаяВерсияНастройкиОтчетов();
	Иначе
		СтруктураПараметров.Вставить("Версия", РабочаяВерсияНастройкиОтчетов());
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

 
Функция РабочаяВерсияНастройкиОтчетов() Экспорт
	
	Возврат "1.0";
	
КонецФункции 

// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
// 
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Разрядность,РазрядностьДробнойЧасти=0) Экспорт

	Массив = Новый Массив;

	Массив.Добавить(Тип("Число"));
	КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность,РазрядностьДробнойЧасти);

	Возврат Новый ОписаниеТипов(Массив, КвалификаторЧисла);

КонецФункции // ПолучитьОписаниеТиповЧисла() 

Функция СформироватьДеревоСЕ(СтруктурныеЕдиницы = Неопределено, СписокСтруктурныхЕдиниц = Неопределено) Экспорт
	
	Если СтруктурныеЕдиницы = Неопределено Тогда 
		СтруктурныеЕдиницы = Новый ДеревоЗначений;
		СтруктурныеЕдиницы.Колонки.Добавить("Пометка", ПолучитьОписаниеТиповЧисла(1, 0));
		СтруктурныеЕдиницы.Колонки.Добавить("Организация" );
		СтруктурныеЕдиницы.Колонки.Добавить("СтруктурнаяЕдиница");
		СтруктурныеЕдиницы.Колонки.Добавить("ЭтоГруппа" );
	КонецЕсли;
	
	//составим список структурных единиц
	Запрос = Новый Запрос;
	Если Метаданные.Справочники.Организации.Реквизиты.Найти("ГоловнаяОрганизация")<>Неопределено Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	1 КАК ВидСтроки,
	               |	Организации.Ссылка КАК СтруктурнаяЕдиница,
	               |	NULL КАК ВладелецСтруктурнойЕдиницы,
	               |	Организации.ГоловнаяОрганизация КАК РодительСтруктурнойЕдиницы,
	               |	Организации.Наименование КАК ПолеДляСортировки
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВЫБОР
	               |		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |				ИЛИ Организации.Ссылка = Организации.ГоловнаяОрганизация
	               |			ТОГДА 1
	               |		ИНАЧЕ 2
	               |	КОНЕЦ,
	               |	ПолеДляСортировки";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	1 КАК ВидСтроки,
	               |	Организации.Ссылка КАК СтруктурнаяЕдиница,
	               |	NULL КАК ВладелецСтруктурнойЕдиницы,
	               |	Организации.Ссылка КАК РодительСтруктурнойЕдиницы,
	               |	Организации.Наименование КАК ПолеДляСортировки
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПолеДляСортировки";
	КонецЕсли;
	
	
	// соответствие для хранения ссылок на родительские уровни
	СоответствиеРодительскиеСтроки = Новый Соответствие();
	
	// заполняем дерево структурных единиц
	// при этом для того, чтобы точно понимать действие пользователя при выборе головных структурных подразделений
	// для таких структурных единиц создаем ветку-группу, внутри которой ветку-элемент (по образцу работы платформы
	// в режиме ИТОГИ ПО ИЕРАРХИИ)
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РодительскаяСтрока = СтруктурныеЕдиницы; // по умолчанию считаем, что добавляем на самый верхний уровень
	
		Если ЗначениеЗаполнено(Выборка.ВладелецСтруктурнойЕдиницы) Тогда
			
			РодительскаяСтрока = СоответствиеРодительскиеСтроки[Выборка.ВладелецСтруктурнойЕдиницы];

			Если РодительскаяСтрока = Неопределено Тогда
				// добавляем организацию - владельца
				СтрокаДерева = СтруктурныеЕдиницы.Строки.Добавить();
				
				СтрокаДерева.СтруктурнаяЕдиница = Выборка.ВладелецСтруктурнойЕдиницы;
				СтрокаДерева.ЭтоГруппа 		= Истина;
				СтрокаДерева.Организация 	= Истина;
				
				СоответствиеРодительскиеСтроки.Вставить(Выборка.ВладелецСтруктурнойЕдиницы, СтрокаДерева);
				РодительскаяСтрока = СтрокаДерева;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.РодительСтруктурнойЕдиницы) Тогда
		
			Если СоответствиеРодительскиеСтроки[Выборка.РодительСтруктурнойЕдиницы] = Неопределено Тогда
				// добавим подразделение - родителя
				СтрокаДерева = РодительскаяСтрока.Строки.Добавить();
				
				СтрокаДерева.СтруктурнаяЕдиница = Выборка.РодительСтруктурнойЕдиницы;
				СтрокаДерева.ЭтоГруппа 		= Истина;
				СтрокаДерева.Организация 	= Истина;
				
				СоответствиеРодительскиеСтроки.Вставить(Выборка.РодительСтруктурнойЕдиницы, СтрокаДерева);
				РодительскаяСтрока = СтрокаДерева;
			Иначе
				РодительскаяСтрока = СоответствиеРодительскиеСтроки[Выборка.РодительСтруктурнойЕдиницы];
			КонецЕсли;
		
		КонецЕсли;
	
		// добавляем саму структурную единицу, причем если уровень-группа с такой структурной единицей
		// уже есть в дереве, то добавляем именно в этот уровень
		СоздаватьДваУровня = Истина;
		Если СоответствиеРодительскиеСтроки[Выборка.СтруктурнаяЕдиница] <> Неопределено Тогда
			РодительскаяСтрока = СоответствиеРодительскиеСтроки[Выборка.СтруктурнаяЕдиница];
			СоздаватьДваУровня = Ложь;
		КонецЕсли;
		
		СтрокаДерева = РодительскаяСтрока.Строки.Добавить();
		
		СтрокаДерева.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		СтрокаДерева.ЭтоГруппа = ?(СоздаватьДваУровня, Истина, Ложь);
		СтрокаДерева.Организация = Истина;
		
		Если СоответствиеРодительскиеСтроки[Выборка.СтруктурнаяЕдиница] = Неопределено Тогда
			СоответствиеРодительскиеСтроки.Вставить(Выборка.СтруктурнаяЕдиница, СтрокаДерева);
		КонецЕсли;
		
		Если СоздаватьДваУровня Тогда
			СтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			СтрокаДерева.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
			СтрокаДерева.ЭтоГруппа 		= Ложь;
			СтрокаДерева.Организация 	= Истина;
		КонецЕсли;
		
	КонецЦикла;

	// для тех структурных единиц, которые не имеют различных подчиненных, оставим только один уровень
	Стек = Новый Массив();
	Стек.Добавить(СтруктурныеЕдиницы);	
	ПервыйШагЦикла = Истина;
	Пока Стек.Количество() > 0 Цикл
		ИндексЭлемента = Стек.Количество() - 1;
		РодительскаяСтрока = Стек[ИндексЭлемента];
		Стек.Удалить(ИндексЭлемента);
		Если Не ПервыйШагЦикла 
				И РодительскаяСтрока.Строки.Количество() = 1 
				И РодительскаяСтрока.СтруктурнаяЕдиница = РодительскаяСтрока.Строки[0].СтруктурнаяЕдиница Тогда
			// удалим лишную дочерную строку, т.к. она полностью соответствует родительской
			РодительскаяСтрока.ЭтоГруппа = Ложь;
			РодительскаяСтрока.Строки.Удалить(0);
		Иначе
			Для Каждого СтрокаДерева Из РодительскаяСтрока.Строки Цикл
				Стек.Добавить(СтрокаДерева);
			КонецЦикла;
		КонецЕсли;
		ПервыйШагЦикла = Ложь;
	КонецЦикла;
	
	//Добавим если нужно дерево подразделений
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда 
		ДобавитьВДеревоСтруктурныеПодразделения(СтруктурныеЕдиницы)
	КонецЕсли;	
	
	Если СписокСтруктурныхЕдиниц <> Неопределено Тогда 
		// установим отметки возле структурных подразделений, сохраненных в СохраненныйСписок
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("СтруктурнаяЕдиница");
		СтруктураПоиска.Вставить("ЭтоГруппа", Ложь);
		
		Для Каждого ЭлементСписка Из СписокСтруктурныхЕдиниц Цикл
			СтруктураПоиска.СтруктурнаяЕдиница = ЭлементСписка.Значение;
			НайденныеСтроки = СтруктурныеЕдиницы.Строки.НайтиСтроки(СтруктураПоиска, Истина);
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаДерева = НайденныеСтроки[0];
				СтрокаДерева.Пометка = 1;
				УстановитьПометкиРодителей(СтрокаДерева);
			КонецЕсли;
		КонецЦикла; 		
	КонецЕсли;
	
	Возврат СтруктурныеЕдиницы;

КонецФункции

//Процедура преднозначена для добавления к дереву подразделений
//уровней подразделений
Процедура ДобавитьВДеревоСтруктурныеПодразделения(СтруктурныеЕдиницы) Экспорт
	
	//Построим дерево подразделений
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПодразделенияОрганизаций.Ссылка КАК Подразделение,
	               |	ПодразделенияОрганизаций.Владелец КАК Организация,
	               |	ПодразделенияОрганизаций.Родитель КАК ПодразделениеВладелец
	               |ИЗ
	               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	               |ГДЕ
	               |	ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением = ИСТИНА";
				   
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	ДеревоПодразделений = СтруктурныеЕдиницы.Скопировать();
	ДеревоПодразделений.Строки.Очистить();
	ДеревоПодразделений.Колонки.Добавить("ОрагнизацяиВладелец");
	
	ДоступнаГоловноеПодразделение = Истина;
	
	Если ДобавитьОграничениеПоПодразделениям() Тогда 
		ДоступныеПодразделения = ПолучитьСписокДоступныхПодразделений();
		ДоступнаГоловноеПодразделение = ?(ДоступныеПодразделения.Найти(Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), "Подразделение") = Неопределено, Ложь, Истина);
		РеструктуризироватьДанныеПодразделений(Выборка, ДоступныеПодразделения);
	КонецЕсли;
		
	Для Каждого СтрокаТЗ Из Выборка Цикл
		Если ДеревоПодразделений.Строки.Найти(СтрокаТЗ.Подразделение, , Истина) = Неопределено Тогда 
			ДобавитьСтрокуВДерево(ДеревоПодразделений, ДеревоПодразделений.Строки, СтрокаТЗ, Выборка);	
		КонецЕсли;			
	КонецЦикла;		
	
	//Добавим дерево подразделений к дереву организаций
	Для Каждого СтрокаВерхнегоУровня Из ДеревоПодразделений.Строки Цикл 
		
		ПараметрыДляОтбора = Новый Структура;
		ПараметрыДляОтбора.Вставить("СтруктурнаяЕдиница", СтрокаВерхнегоУровня.ОрагнизацяиВладелец);
		ПараметрыДляОтбора.Вставить("ЭтоГруппа", Ложь);
				
		СтрокаОрганизации = СтруктурныеЕдиницы.Строки.НайтиСтроки(ПараметрыДляОтбора, Истина);
		
		//Вставим подразделение являющееся головным
		Если СтрокаОрганизации.Количество() > 0 Тогда 
			
			Если СтрокаОрганизации[0].Строки.Количество() = 0
				И ДоступнаГоловноеПодразделение Тогда
				НоваяСтрока = СтрокаОрганизации[0].Строки.Добавить();
				НоваяСтрока.СтруктурнаяЕдиница = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				НоваяСтрока.ЭтоГруппа 	= Ложь;
				НоваяСтрока.Организация = Ложь;
			КонецЕсли;			
			
			ОбъединитьСтрокиДеревьев(СтрокаОрганизации[0], СтрокаВерхнегоУровня);
			
		КонецЕсли;
		
	КонецЦикла;  	
	
КонецПроцедуры //ДобавитьВДеревоСтруктурныеПодразделения

Процедура РеструктуризироватьДанныеПодразделений(ДанныеПоПодразделениям, ДоступныеПодразделения) Экспорт
	
	МассивНаУдаление = Новый Массив;
	
	Для Каждого СтрокаТЗ Из ДанныеПоПодразделениям Цикл 
		Если ДоступныеПодразделения.Найти(СтрокаТЗ.Подразделение, "Подразделение") = Неопределено Тогда 
			ОтборПодр = Новый Структура();
			ОтборПодр.Вставить("ПодразделениеВладелец", СтрокаТЗ.Подразделение);
			Строки = ДанныеПоПодразделениям.НайтиСтроки(ОтборПодр);
			Для Каждого Строка Из Строки Цикл 
				Строка.ПодразделениеВладелец = СтрокаТЗ.ПодразделениеВладелец;
			КонецЦикла;			
			МассивНаУдаление.Добавить(СтрокаТЗ); 						
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЗначениеНаУдаление Из МассивНаУдаление Цикл 
		ДанныеПоПодразделениям.Удалить(ЗначениеНаУдаление);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает состояние пометки у родительских строк строки дерева значений
// в зависимости от пометки текущей строки
//
// Параметры:
//  ТекСтрока      - Строка дерева значений
// 
Процедура УстановитьПометкиРодителей(ТекСтрока)

	Родитель = ТекСтрока.Родитель;
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ТекСостояние		= Родитель.Пометка;

	НайденыВключенные	= Ложь;
	НайденыВыключенные	= Ложь;

	Для каждого Строка из Родитель.Строки Цикл
		
		Если Строка.Пометка = 0 Тогда
			НайденыВыключенные	= Истина;
		ИначеЕсли Строка.Пометка = 1 Тогда
			НайденыВключенные	= Истина;
		ИначеЕсли Строка.Пометка = 2 Тогда
			НайденыВыключенные	= Истина;
			НайденыВключенные	= Истина;						
		КонецЕсли; 
		
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	Если НайденыВключенные И (Не НайденыВыключенные) И Родитель.Организация Тогда
		Пометка = 1;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Пометка = 2;
	ИначеЕсли НайденыВключенные И Родитель.Организация Тогда 
		Пометка = 1;
	КонецЕсли;

	Если (Пометка = ТекСостояние) Или (Пометка = Неопределено) Тогда
		Возврат;
	Иначе
		Родитель.Пометка = Пометка;
		УстановитьПометкиРодителей(Родитель);
	КонецЕсли; 
	
КонецПроцедуры // УстановитьПометкиРодителей()

//Процедура преднозначена для добавления строки в дерево значений
//которое формируется по подразделениям
Функция ДобавитьСтрокуВДерево(ДеревоПодразделений, Уровень, ДобавляемоеЗначение, ПереченьЗначений)
	
	//Проверяем есть ли у данного подразделения родитель
	Если ЗначениеЗаполнено(ДобавляемоеЗначение.ПодразделениеВладелец) Тогда
		
		Если ДеревоПодразделений.Строки.Найти(ДобавляемоеЗначение.ПодразделениеВладелец, , Истина) = Неопределено Тогда 
			//Подразделение родитель не найдено в дереве сначала добавим его.
			Если ПереченьЗначений.Найти(ДобавляемоеЗначение.ПодразделениеВладелец, "Подразделение") <> Неопределено Тогда 
				НайденныйУровень = ДобавитьСтрокуВДерево(ДеревоПодразделений, Уровень, ПереченьЗначений.Найти(ДобавляемоеЗначение.ПодразделениеВладелец, "Подразделение"), ПереченьЗначений);
			Иначе 
				НайденныйУровень = Уровень;
			КонецЕсли;
			
			Если ТипЗнч(НайденныйУровень) = Тип("СтрокаДереваЗначений") Тогда
                НоваяСтрока = НайденныйУровень.Строки.Добавить();       
			Иначе
				НоваяСтрока = НайденныйУровень.Добавить();       
			КонецЕсли;			
			
			НоваяСтрока.СтруктурнаяЕдиница 	= ДобавляемоеЗначение.Подразделение;
			НоваяСтрока.ОрагнизацяиВладелец = ДобавляемоеЗначение.Организация;	
			НоваяСтрока.ЭтоГруппа = Ложь;
			НоваяСтрока.Организация = Ложь;
		Иначе 
			//Подразделение родитель найдено, добавим к нему текущее подразделение.
			НоваяСтрока = ДеревоПодразделений.Строки.Найти(ДобавляемоеЗначение.ПодразделениеВладелец, , Истина).Строки.Добавить();
			НоваяСтрока.СтруктурнаяЕдиница 	= ДобавляемоеЗначение.Подразделение;
			НоваяСтрока.ОрагнизацяиВладелец = ДобавляемоеЗначение.Организация;	
			НоваяСтрока.ЭтоГруппа = Ложь;
			НоваяСтрока.Организация = Ложь;
		КонецЕсли;
		
	Иначе
		//У подразделения нет родителя, просто добавим его в дерево.
		НоваяСтрока = Уровень.Добавить();
		НоваяСтрока.СтруктурнаяЕдиница 	= ДобавляемоеЗначение.Подразделение;
		НоваяСтрока.ОрагнизацяиВладелец = ДобавляемоеЗначение.Организация;	
		НоваяСтрока.ЭтоГруппа = Ложь;
		НоваяСтрока.Организация = Ложь;
		
	КонецЕсли;
	
	Возврат НоваяСтрока;		
	
КонецФункции //ДобавитьСтрокуВДерево

//Процедура предназначена для объединения деревьев, организаций и подразделений
//
Функция ОбъединитьСтрокиДеревьев(УровеньПриемник, СтрокаПодстановки)
	
	НоваяСтрока = УровеньПриемник.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодстановки);
	
	Для Каждого Подуровень Из СтрокаПодстановки.Строки Цикл 
		ОбъединитьСтрокиДеревьев(НоваяСтрока, Подуровень);
	КонецЦикла;		
	
КонецФункции //ОбъединитьСтрокиДеревьев

Функция ДобавитьОтборПоОрганизациямИПодразделениям(ЭлементСтруктуры, ДеревоСтруктурныхЕдиниц, Использование = Истина, ДтКт = Ложь, ИмяПоляПодразделения = "Подразделение") Экспорт
	
	ПолеОрганизация 	= Новый ПолеКомпоновкиДанных("Организация");
	ПолеПодразделение 	= Новый ПолеКомпоновкиДанных(ИмяПоляПодразделения);
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	НоваяГруппаИли = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	НоваяГруппаИли.Использование  	= Использование;
	НоваяГруппаИли.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	НоваяГруппаИли.Представление 	= "###ОтборПоОрганизации###";
	//НоваяГруппаИли.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	СписокОтмеченныхОрганизаций = Новый СписокЗначений;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Пометка", 1);
	СтруктураПоиска.Вставить("ЭтоГруппа", Ложь);
	СтруктураПоиска.Вставить("Организация", Истина);
	
	ИспользованиеОграничения = Ложь;
	
	Если ДеревоСтруктурныхЕдиниц.Строки.Количество() > 0 Тогда 
		НайденныеСтроки = ДеревоСтруктурныхЕдиниц.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
			СписокОтмеченныхОрганизаций.Добавить(СтрокаДерева);
		КонецЦикла;
		
		СтруктураПоиска.Пометка = 2;
		
		НайденныеСтроки = ДеревоСтруктурныхЕдиниц.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
			СписокОтмеченныхОрганизаций.Добавить(СтрокаДерева);
		КонецЦикла;	
	КонецЕсли;
		
	//В случае если в отборе нет ни одного подразделения и включен РЛС по подразделениям
	//добавим в отбор все доступные пользователю подразделения
	Если СписокОтмеченныхОрганизаций.Количество() = 0 Тогда
		Если ДобавитьОграничениеПоПодразделениям() Тогда
			ТаблицаДоступныхОрганизаций = ПолучитьСписокДоступныхОрганизаций();
			ИспользованиеОграничения = Истина;
			Для Каждого СтрокаТЗ Из ТаблицаДоступныхОрганизаций Цикл 
				СписокОтмеченныхОрганизаций.Добавить(СтрокаТЗ.Организация);
			КонецЦикла;						
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТекОрганизация Из СписокОтмеченныхОрганизаций Цикл 
		
		НоваяГруппаИ = НоваяГруппаИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НоваяГруппаИ.Использование  = Использование;
		НоваяГруппаИ.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		НовыйЭлемент = НоваяГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлемент.Использование  = Использование;
		НовыйЭлемент.ЛевоеЗначение 	= ПолеОрганизация;
		НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлемент.ПравоеЗначение = ?(ИспользованиеОграничения, ТекОрганизация.Значение, ТекОрганизация.Значение.СтруктурнаяЕдиница);
		
		СписокПодразделений = Новый СписокЗначений;
		
		Если Не ИспользованиеОграничения Тогда 
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Пометка", 1);
			СтруктураПоиска.Вставить("Организация", Ложь);
			
			НайденныеСтроки = ТекОрганизация.Значение.Строки.НайтиСтроки(СтруктураПоиска, Истина);
			Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
				СписокПодразделений.Добавить(СтрокаДерева.СтруктурнаяЕдиница);
			КонецЦикла;
			
			СтруктураПоиска.Пометка = 2;
			
			НайденныеСтроки = ТекОрганизация.Значение.Строки.НайтиСтроки(СтруктураПоиска, Истина);
			Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
				СписокПодразделений.Добавить(СтрокаДерева.СтруктурнаяЕдиница);
			КонецЦикла; 
		КонецЕсли;
		
		//В случае если в отборе нет ни одного подразделения и включен РЛС по подразделениям
		//добавим в отбор все доступные пользователю подразделения
		Если СписокПодразделений.Количество() = 0 Тогда
			Если ДобавитьОграничениеПоПодразделениям() Тогда
				ТаблицаДоступныхПодразделений = ПолучитьСписокДоступныхПодразделений(ТекОрганизация);
				Для Каждого СтрокаТЗ Из ТаблицаДоступныхПодразделений Цикл 
					СписокПодразделений.Добавить(СтрокаТЗ.Подразделение);
				КонецЦикла;						
			КонецЕсли;
		КонецЕсли;
		
		Если СписокПодразделений.Количество() > 0 Тогда 
			Если Не ДтКт Тогда 
				НовыйЭлемент = НоваяГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.Использование  = Использование;
				НовыйЭлемент.ЛевоеЗначение 	= ПолеПодразделение;
				НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
				НовыйЭлемент.ПравоеЗначение = СписокПодразделений;
			Иначе
				
				ГруппаПодразделений = НоваяГруппаИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаПодразделений.Использование  	= Использование;
				ГруппаПодразделений.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;				
				
				НовыйЭлемент = ГруппаПодразделений.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.Использование  = Использование;
				НовыйЭлемент.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПодразделениеДт");
				НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
				НовыйЭлемент.ПравоеЗначение = СписокПодразделений;				
				
				НовыйЭлемент = ГруппаПодразделений.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлемент.Использование  = Использование;
				НовыйЭлемент.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПодразделениеКт");
				НовыйЭлемент.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
				НовыйЭлемент.ПравоеЗначение = СписокПодразделений;				
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат НовыйЭлемент;	
		
КонецФункции

//Функция вернёт все доступные пользователю подразделения организации
//
Функция ПолучитьСписокДоступныхОрганизаций() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

Функция ПолучитьСписокДоступныхПодразделений(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыПользователейПользователиГруппы.Ссылка КАК ГруппаПользователей
	               |ПОМЕСТИТЬ ГруппыПользователя
	               |ИЗ
	               |	Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователейПользователиГруппы
	               |ГДЕ
	               |	ГруппыПользователейПользователиГруппы.Пользователь = &ТекущийПользователь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	НастройкиПравДоступаПользователей.ОбъектДоступа КАК Подразделение
	               |ИЗ
	               |	РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
	               |ГДЕ
	               |	НастройкиПравДоступаПользователей.ОбъектДоступа ССЫЛКА Справочник.ПодразделенияОрганизаций
	               |	И НастройкиПравДоступаПользователей.Пользователь В
	               |			(ВЫБРАТЬ
	               |				Группыпользователя.ГруппаПользователей
	               |			ИЗ
	               |				ГруппыПользователя КАК Группыпользователя)";
	
	Если ТипЗнч(Организация) = Тип("СписокЗначений") Тогда 
		Запрос.Текст = запрос.Текст + "		
		|	И НастройкиПравДоступаПользователей.ОбъектДоступа.Владелец В (&Организация)";
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		Запрос.Текст = запрос.Текст + "				   
		|	И НастройкиПравДоступаПользователей.ОбъектДоступа.Владелец = &Организация";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.АвторизованныйПользователь());
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции
	
Функция ДобавитьОграничениеПоПодразделениям() Экспорт
	
	Если Метаданные.ПараметрыСеанса.Найти("ИспользоватьОграничениеПоСтруктурныеПодразделения")<>Неопределено
		И ПараметрыСеанса.ИспользоватьОграничениеПоСтруктурныеПодразделения
		И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПоддержкаРаботыСоСтруктурнымиПодразделениями") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ГруппыПользователейПользователиГруппы.Ссылка КАК ГруппаПользователей
		               |ПОМЕСТИТЬ ГруппыПользователя
		               |ИЗ
		               |	Справочник.ГруппыПользователей."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяТабличнойЧастиСоставаГруппыПользователей()+" КАК ГруппыПользователейПользователиГруппы
		               |ГДЕ
		               |	ГруппыПользователейПользователиГруппы.Пользователь = &ТекущийПользователь
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа
		               |ИЗ
		               |	РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа
		               |ГДЕ
		               |	НазначениеВидовОбъектовДоступа.ГруппаПользователей В
		               |			(ВЫБРАТЬ
		               |				Группыпользователя.ГруппаПользователей
		               |			ИЗ
		               |				ГруппыПользователя КАК Группыпользователя)
		               |	И НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.СтруктурныеПодразделения)";
					   
		Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.АвторизованныйПользователь());
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда 
			Возврат Ложь;
		Иначе 
			Возврат Истина;
		КонецЕсли;
	Иначе 
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции 

Процедура ПодпискаНаСобытие1ОбработкаПолученияФормы(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	Если ВидФормы = "ФормаОбъекта" И Ложь Тогда
//		СтандартнаяОбработка = Ложь;
////		Параметры.Вставить("Отчет",Отчеты[Сред(Строка(Источник),Найти(Строка(Источник),".")+1)].Создать().КомпоновщикНастроек);
////		Параметры.Вставить("ИмяОтчета",Сред(Строка(Источник),Найти(Строка(Источник),".")+1));
//////		ВыбраннаяФорма = "ОбщаяФорма.общ_ФормаОтчетов";
////		Форма = ПолучитьФорму("ОбщаяФорма.куфиб_ОбщаяФормаОтчетов",Параметры);
////		ВыбраннаяФорма = Форма;
//		//
//		Параметры.Вставить("ИмяОтчета",Сред(Строка(Источник),Найти(Строка(Источник),".")+1));
//		НовыйОтчет = Отчеты.УниверсальныйОтчет_УправляемоеПриложение.Создать();
//		//
//		//НовыйОтчет = Отчеты[Сред(Строка(Источник),Найти(Строка(Источник),".")+1)].Создать();
//		Форма=ПолучитьФорму("Отчет.УниверсальныйОтчет_УправляемоеПриложение.ФормаОбъекта",Параметры,,Сред(Строка(Источник),Найти(Строка(Источник),".")+1));
//		ВыбраннаяФорма = Форма;
	КонецЕсли;
КонецПроцедуры

// Заполняет отбор компоновщика по отбору построителя
Функция ПолучитьТаблицуДоступныхВариантов(НастраиваемыйОбъект, Пользователь = Неопределено, СПомеченнымиНаУдаление = Ложь, ТипНастройки = Неопределено, СписокДоступныхНастроек = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	КонецЕсли;
	
	Если ТипНастройки = Неопределено тогда
		ТипНастройки = Перечисления.ТипыНастроек.ПроизвольныеНастройки;
	КонецЕсли;
	
	Это_БК_2_0 = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана
					ИЛИ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СохраненныеНастройкиПользователи.Ссылка,
	|	СохраненныеНастройкиПользователи.Ссылка.Наименование КАК Наименование,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СохраненныеНастройкиПользователи.ПравоИзменения
	|					ИЛИ &ПолныеПрава
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ПравоИзменения,
	|	СохраненныеНастройкиПользователи.Ссылка.Описание
	|ИЗ
	|	Справочник.общ_СохраненныеНастройки.Пользователи КАК СохраненныеНастройкиПользователи
	|ГДЕ
	|	СохраненныеНастройкиПользователи.Ссылка.НастраиваемыйОбъект = &НастраиваемыйОбъект
	|	И (СохраненныеНастройкиПользователи.Пользователь.Ссылка = &Пользователь
	|			ИЛИ СохраненныеНастройкиПользователи.Пользователь.Ссылка В
	|				(ВЫБРАТЬ
	|					ГруппыПользователейПользователиГруппы.Ссылка
	|				ИЗ
	|					Справочник.ГруппыПользователей."+?(Это_БК_2_0,"ПользователиГруппы","Состав")+" КАК ГруппыПользователейПользователиГруппы
	|				ГДЕ
	|					ГруппыПользователейПользователиГруппы.Пользователь.Ссылка = &Пользователь)
	|			ИЛИ СохраненныеНастройкиПользователи.Пользователь.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	|				И СохраненныеНастройкиПользователи.Ссылка В (&СписокДоступныхНастроек)
	|				И СохраненныеНастройкиПользователи.Ссылка.Предопределенный
	|			ИЛИ СохраненныеНастройкиПользователи.Пользователь.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	|				И &СписокДоступныхНастроекНеопределен
	|				И СохраненныеНастройкиПользователи.Ссылка.Предопределенный
	|			ИЛИ СохраненныеНастройкиПользователи.Пользователь.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	|				И (НЕ СохраненныеНастройкиПользователи.Ссылка.Предопределенный))
	|	И (&СПомеченнымиНаУдаление
	|			ИЛИ (НЕ СохраненныеНастройкиПользователи.Ссылка.ПометкаУдаления))
	|	И СохраненныеНастройкиПользователи.Ссылка.ТипНастройки = &ТипНастройки
	|
	|СГРУППИРОВАТЬ ПО
	|	СохраненныеНастройкиПользователи.Ссылка,
	|	СохраненныеНастройкиПользователи.Ссылка.Наименование,
	|	СохраненныеНастройкиПользователи.Ссылка.Описание
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Пользователь",                       Пользователь);
	Запрос.УстановитьПараметр("НастраиваемыйОбъект",                НастраиваемыйОбъект);
	Запрос.УстановитьПараметр("СписокДоступныхНастроек",            СписокДоступныхНастроек);
	Запрос.УстановитьПараметр("СписокДоступныхНастроекНеопределен", СписокДоступныхНастроек = Неопределено);
	Если Найти(НастраиваемыйОбъект, "ОтчетОбъект") > 0 Тогда									
		Запрос.УстановитьПараметр("ТипНастройки", Перечисления.ТипыНастроек.НастройкиОтчета);
	Иначе
		Запрос.УстановитьПараметр("ТипНастройки", ТипНастройки);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПолныеПрава", РольДоступна("ПолныеПрава"));
	Запрос.УстановитьПараметр("СПомеченнымиНаУдаление", СПомеченнымиНаУдаление);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьСписокДоступныхВариантов(НастраиваемыйОбъект, Пользователь = Неопределено, СПомеченнымиНаУдаление = Ложь) Экспорт
	
	СписокНастроек = Новый СписокЗначений;
	
	ТаблицаДоступныхНастроек = ПолучитьТаблицуДоступныхВариантов(НастраиваемыйОбъект, Пользователь, СПомеченнымиНаУдаление);
	Для каждого Строка Из ТаблицаДоступныхНастроек Цикл
		СписокНастроек.Добавить(Строка.Ссылка, Строка.Наименование, Строка.ПравоИзменения);
	КонецЦикла;
	
	Возврат СписокНастроек;
	
КонецФункции

// Функция возвращает представление всех элементов списка в виде строки для вывода в текстовые поля
// 
// Параметры
//	Список - объект список значений
//	МаксЧислоСимволовНаЭлемент - предельное число символов, выводимых для одного элемента, если больше, то окончание заменяется "..."
//	РазделительЭлеменов - строка, используемая для разделения элементов друг от друга
//
Функция ВыгрузитьСписокВСтроку(Список, МаксЧислоСимволовНаЭлемент = 50, РазделительЭлементов = "; ", ВыгружатьПолныеНаименованияОрганизаций=Ложь, ПредставлениеПустойСсылки = "") Экспорт

	Результат = "";
	Для Каждого ЭлементСписка Из Список Цикл
		Если НЕ ВыгружатьПолныеНаименованияОрганизаций Тогда
			Если Не ПустаяСтрока(ЭлементСписка.Представление) Тогда
				ПредставлениеЭлемента = ЭлементСписка.Представление;
			Иначе
				ПредставлениеЭлемента = Строка(ЭлементСписка.Значение);
			КонецЕсли;
			ПредставлениеЭлемента = СокрЛП(ПредставлениеЭлемента);
			Если Не ПустаяСтрока(ПредставлениеЭлемента) Тогда
				
				Если МаксЧислоСимволовНаЭлемент > 0 И Список.Количество() > 1 Тогда
					Если СтрДлина(ПредставлениеЭлемента) > МаксЧислоСимволовНаЭлемент Тогда
						ПредставлениеЭлемента = Лев(ПредставлениеЭлемента, МаксЧислоСимволовНаЭлемент) + "...";
					КонецЕсли;
				КонецЕсли;
			
				Если Не ПустаяСтрока(Результат) Тогда
					Результат = Результат + РазделительЭлементов;
				КонецЕсли;
			
				Результат = Результат + ПредставлениеЭлемента;
				
			КонецЕсли;
		Иначе
			Попытка 
				ПредставлениеЭлемента = ЭлементСписка.Значение.НаименованиеПолное;
			Исключение
				ПредставлениеЭлемента = "";
			КонецПопытки;
			Если Не ПустаяСтрока(Результат) Тогда
				Результат = Результат + РазделительЭлементов;
			КонецЕсли;
		
			Результат = Результат + ПредставлениеЭлемента;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // ВыгрузитьСписокВСтроку()

	
Функция ПолучитьТекстЗаголовка(Форма, ЗаголовокТекст = "", ОрганизацияВНачале = Истина) Экспорт
	
	ТекстОрганизации = "";
	//Попытка
	//	Если ЗначениеЗаполнено(Форма.мСписокСтруктурныхЕдиниц) Тогда
	//		ТекстОрганизации = ВыгрузитьСписокВСтроку(Форма.мСписокСтруктурныхЕдиниц,,,Истина);//Организация.НаименованиеПолное;
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;
	
	Если Форма.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период") <> Неопределено И Форма.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период").Использование Тогда
		ЗначениеПараметра = Форма.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
		Если ЗначениеПараметра<>Неопределено И ЗначениеПараметра<>'00010101' Тогда 
			ТекстПериод = " на " + Формат(ЗначениеПараметра.Значение, "ДФ=dd.MM.yyyy");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли Форма.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода") <> Неопределено Тогда
		Попытка
			ЗначениеПараметраН = Форма.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода").Значение;
			ЗначениеПараметраК = Форма.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода").Значение;
			Если  ЗначениеПараметраН<>'00010101' И ЗначениеПараметраК<>'00010101' Тогда
				ТекстПериод = " за " + ПредставлениеПериода(НачалоДня(ЗначениеПараметраН), КонецДня(ЗначениеПараметраК), "ФП");
			Иначе
				ТекстПериод = "";
			КонецЕсли;
		Исключение
			ТекстПериод = "";
		КонецПопытки;
	Иначе
			ТекстПериод = "";
	КонецЕсли;
	
	ЗаголовокОтчета = "" + ЗаголовокТекст;
	
	Если ЗначениеЗаполнено(ТекстПериод) Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + ТекстПериод;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОрганизации) Тогда
		Если ОрганизацияВНачале Тогда
			ЗаголовокОтчета = ТекстОрганизации + ". " + ЗаголовокОтчета;
		Иначе
			ЗаголовокОтчета = ЗаголовокОтчета + " " + ТекстОрганизации;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаголовокОтчета;
	
КонецФункции

Процедура НастроитьФиксацию(ТабличныйДокумент,НастройкиКомпоновщика) Экспорт
	ШиринаСпециальныхРеквизитов = 0;
	ФиксируемыеКолонки = ПолучитьКоличествоФиксируемыхКолонок(НастройкиКомпоновщика,,ШиринаСпециальныхРеквизитов);
	ТабличныйДокумент.ФиксацияСлева = ФиксируемыеКолонки+ШиринаСпециальныхРеквизитов;
КонецПроцедуры

Функция ПолучитьКоличествоФиксируемыхКолонок(ЭлементСтруктуры,НаследуемыйОтступ=0,ШиринаСпециальныхРеквизитов =0,ШиринаПредыдущегоУровня = 0)
	ФиксируемыеКолонки = 0;
	Для Каждого мЭлементСтруктуры Из ЭлементСтруктуры.Структура Цикл
		Если мЭлементСтруктуры.Использование И ТипЗнч(мЭлементСтруктуры)=Тип("ГруппировкаКомпоновкиДанных") Тогда
			Ширина = мЭлементСтруктуры.ПоляГруппировки.Элементы.Количество();
			ДополнительнаяШирина = 0;
			Для Каждого ВыбранноеПоле Из мЭлементСтруктуры.Выбор.Элементы Цикл
				Если ТипЗнч(ВыбранноеПоле)<>Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
					ЭтоПолеГруппировки = Ложь;
					Для Каждого ПолеГруппировки Из мЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
						Если ВыбранноеПоле.Поле=ПолеГруппировки.Поле Тогда
							ЭтоПолеГруппировки =Истина;
						КонецЕсли;
					КонецЦикла;
					Если НЕ ЭтоПолеГруппировки Тогда
						ДополнительнаяШирина = ДополнительнаяШирина + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ДополнительнаяШирина>0 Тогда
				ПараметрРасположения = мЭлементСтруктуры.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("РасположениеРеквизитов"));
				Если ПараметрРасположения.Использование И ПараметрРасположения.Значение=РасположениеРеквизитовКомпоновкиДанных.ВместеСВладельцем Тогда
					ДополнительнаяШирина = 0; 
				ИначеЕсли ПараметрРасположения.Использование И ПараметрРасположения.Значение=РасположениеРеквизитовКомпоновкиДанных.Вместе Тогда
					ДополнительнаяШирина = 1;
				ИначеЕсли ПараметрРасположения.Использование И ПараметрРасположения.Значение=РасположениеРеквизитовКомпоновкиДанных.ВСпециальнойПозиции Тогда
					ШиринаСпециальныхРеквизитов = Макс(ШиринаСпециальныхРеквизитов,ДополнительнаяШирина);
					ДополнительнаяШирина = 0;
				КонецЕсли;
			КонецЕсли;
			ПараметрРасположения = мЭлементСтруктуры.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("РасположениеПолейГруппировки"));
			Если ПараметрРасположения.Использование И ПараметрРасположения.Значение<>РасположениеПолейГруппировкиКомпоновкиДанных.Вместе Тогда
				НаследуемыйОтступ = НаследуемыйОтступ + ШиринаПредыдущегоУровня; 
			КонецЕсли;
			ФиксируемыеКолонки = Макс(ФиксируемыеКолонки,Ширина+ДополнительнаяШирина+НаследуемыйОтступ);
			Если мЭлементСтруктуры.Структура.Количество()>0 Тогда
				ФиксируемыеКолонки = Макс(ФиксируемыеКолонки,ПолучитьКоличествоФиксируемыхКолонок(мЭлементСтруктуры,НаследуемыйОтступ,ШиринаСпециальныхРеквизитов,Ширина+ДополнительнаяШирина));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат ФиксируемыеКолонки;
КонецФункции

