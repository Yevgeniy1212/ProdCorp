
//
//
Процедура КорректировкаОстатков(Реквизиты,ТаблицаКорректировок,Движения,Отказ)  Экспорт
	БюджетированиеПоОрганизациям = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");

	Для Каждого КорректировкаОстатков Из ТаблицаКорректировок Цикл
		
		Движение = Движения.фин_Бюджетирование.Добавить();
		
		// Дебетовая сторона проводки
		Если КорректировкаОстатков.ВидСчета = ВидСчета.Пассивный Тогда
			Если НЕ КорректировкаОстатков.Забалансовый Тогда
				Движение.СчетДт		= ПланыСчетов.фин_Бюджетирование.Служебный;
			КонецЕсли;
			Движение.СчетКт			= КорректировкаОстатков.Счет;
		Иначе
			Движение.СчетДт			= КорректировкаОстатков.Счет;
			Если НЕ КорректировкаОстатков.Забалансовый Тогда
				Движение.СчетКт		= ПланыСчетов.фин_Бюджетирование.Служебный;
			КонецЕсли;
		КонецЕсли;
		ВидыСубконто				= Движение.СчетДт.ВидыСубконто;
		Для Индекс=1 По ВидыСубконто.Количество() Цикл
			Движение.СубконтоДт[ВидыСубконто[Индекс-1].ВидСубконто]=КорректировкаОстатков["Субконто"+Индекс];
		КонецЦикла; 		
		Если Движение.СчетДт.Валютный Тогда
			Движение.ВалютаДт		= КорректировкаОстатков.Валюта;
			Движение.ВалютнаяСуммаДт= КорректировкаОстатков.КорректировкаВалютнаяСумма;
		КонецЕсли;
		Если Движение.СчетДт.Количественный Тогда
			Движение.КоличествоДт	= КорректировкаОстатков.КорректировкаКоличество;
		КонецЕсли;		
		ВидыСубконто=Движение.СчетКт.ВидыСубконто;
		Для Индекс=1 По ВидыСубконто.Количество() Цикл
			Движение.СубконтоКт[ВидыСубконто[Индекс-1].ВидСубконто]	= КорректировкаОстатков["Субконто"+Индекс];
		КонецЦикла; 	
		Если Движение.СчетКт.Валютный Тогда
			Движение.ВалютаКт		= КорректировкаОстатков.Валюта;
			Движение.ВалютнаяСуммаКт= КорректировкаОстатков.КорректировкаВалютнаяСумма;
		КонецЕсли;
		Если Движение.СчетКт.Количественный Тогда
			Движение.КоличествоКт	= КорректировкаОстатков.КорректировкаКоличество;
		КонецЕсли;
		// Общие реквизиты проводки
		Движение.Период				= Реквизиты.ДатаНачала;
		Движение.Сценарий			= Реквизиты.Сценарий;
		Движение.СуммаУпр			= КорректировкаОстатков.КорректировкаСуммаУпр;
		Движение.СуммаСценария		= КорректировкаОстатков.КорректировкаСуммаСценария;
		Если БюджетированиеПоОрганизациям Тогда
			Движение.Организация 	= Реквизиты.Организация;
		КонецЕсли;
	КонецЦикла;
	Движения.фин_Бюджетирование.Записывать = Истина;
			
КонецПроцедуры //КорректировкаОстатков

 // Выполняет движения по регистрам бюджетирования.
 //
 Процедура СформироватьДвиженияПоПереоценкеВалютныхСтатей(ТаблицаОстатков,Движения,Реквизиты)  Экспорт
	 
	 Сценарий 						= Реквизиты.Сценарий;
	 СчетОтнесенияКурсовыхРазниц 	= Реквизиты.СчетОтнесенияКурсовыхРазниц;
	 Сценарий 						= Реквизиты.Сценарий;
	 Организация 					= Реквизиты.Организация;
	 ДатаПереоценки 				= Реквизиты.ДатаПереоценки;
	 ФинансовыйПоказатель 			= Реквизиты.ФинансовыйПоказатель;
	 
	БюджетированиеПоОрганизациям = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
	 
	ВалютаУпрУчета			= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	ВалютаСценария			= Сценарий.Валюта;
	 
	ВидыСубконтоСчет 		= СчетОтнесенияКурсовыхРазниц.ВидыСубконто;
	ВалютныйСчетОтнесения	= СчетОтнесенияКурсовыхРазниц.Валютный;

	
	Обороты		= Движения.фин_ОборотыБюджетов;
	ТабОбороты	= Обороты.Выгрузить();
	ТабОбороты.Очистить();
	
	Для Каждого Выборка Из ТаблицаОстатков Цикл
		
		СуммаУпрРазница=0;
		СуммаСценарияРазница=0;
		
		Если Не ЗначениеЗаполнено(Выборка.Валюта) ИЛИ (Выборка.Валюта=ВалютаСценария И Выборка.Валюта=ВалютаУпрУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		ВалютнаяСуммаТек = Выборка.ВалютнаяСуммаОстатокДт-Выборка.ВалютнаяСуммаОстатокКт;
		
		Если Не (Выборка.Валюта = ВалютаСценария ИЛИ Не ЗначениеЗаполнено(Сценарий)) Тогда
			
			Если Выборка.КурсСценария = 0 ИЛИ Выборка.КратностьОстатка = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При пересчете из валюты в валюту обнаружен нулевой курс.");
				Продолжить;
			Иначе
				
				СуммаСценарияТек	= Выборка.СуммаСценарияОстатокДт-Выборка.СуммаСценарияОстатокКт;
				СуммаСценарияНов	= Окр((ВалютнаяСуммаТек * Выборка.КурсОстатка * Выборка.КратностьСценария) / (Выборка.КурсСценария * Выборка.КратностьОстатка), 2);
			КонецЕсли;	
			
			СуммаСценарияРазница	= СуммаСценарияНов - СуммаСценарияТек;
			
		КонецЕсли;
		
		Если Не Выборка.Валюта=ВалютаУпрУчета Тогда
			
			Если Выборка.КурсУпрУчета=0 ИЛИ Выборка.КратностьОстатка=0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При пересчете из валюты в валюту обнаружен нулевой курс.");
				Продолжить;
			Иначе	
				СуммаУпрТек=Выборка.СуммаУпрОстатокДт-Выборка.СуммаУпрОстатокКт;
				СуммаУпрНов=Окр((ВалютнаяСуммаТек * Выборка.КурсОстатка * Выборка.КратностьУпрУчета) / (Выборка.КурсУпрУчета * Выборка.КратностьОстатка), 2);
			КонецЕсли;	
			
			СуммаУпрРазница=СуммаУпрНов-СуммаУпрТек;
			
		КонецЕсли;
		
		Если НЕ (СуммаУпрРазница=0 И СуммаСценарияРазница=0) Тогда
			
			// регистр Бюджетирование 
			
			Движение = Движения.фин_Бюджетирование.Добавить();
			Движение.Период 	= ДатаПереоценки;
			Движение.Сценарий	= Сценарий;
			
			Если Выборка.ВидСчета=ВидСчета.Активный 
				ИЛИ Выборка.ВидСчета=ВидСчета.АктивноПассивный Тогда
				
				Движение.СчетДт = Выборка.Счет;
				Для Ном = 1 по Движение.СчетДт.ВидыСубконто.Количество() Цикл
					Движение.СубконтоДт[Движение.СчетДт.ВидыСубконто[Ном-1].ВидСубконто] = Выборка["Субконто" + Ном];
				КонецЦикла;
				
				Движение.СчетКт=СчетОтнесенияКурсовыхРазниц;
				Если ВалютныйСчетОтнесения Тогда
					Движение.ВалютаКт=Выборка.Валюта;
				КонецЕсли;
				
				Для Ном=1 по ВидыСубконтоСчет.Количество() Цикл
					Если ВидыСубконтоСчет[Ном-1].ВидСубконто.Наименование=Выборка.НаименованиеСубконто1 Тогда
						Движение.СубконтоДт[ВидыСубконтоСчет[Ном-1].ВидСубконто]=Выборка.Субконто1;
					ИначеЕсли ВидыСубконтоСчет[Ном-1].ВидСубконто.Наименование=Выборка.НаименованиеСубконто2 Тогда
						Движение.СубконтоДт[ВидыСубконтоСчет[Ном-1].ВидСубконто]=Выборка.Субконто2;
					ИначеЕсли ВидыСубконтоСчет[Ном-1].ВидСубконто.Наименование=Выборка.НаименованиеСубконто3 Тогда
						Движение.СубконтоДт[ВидыСубконтоСчет[Ном-1].ВидСубконто]=Выборка.Субконто3;
					КонецЕсли;
				КонецЦикла;
				
				Движение.СуммаУпр 		= СуммаУпрРазница;
				Движение.СуммаСценария 	= СуммаСценарияРазница;
				Если Выборка.Валютный Тогда
					Движение.ВалютаДт=Выборка.Валюта;
				КонецЕсли;
			Иначе
				
				Движение.СчетКт = Выборка.Счет;
				
				Для Ном = 1 по Движение.СчетКт.ВидыСубконто.Количество() Цикл
					Движение.СубконтоКт[Движение.СчетКт.ВидыСубконто[Ном-1].ВидСубконто] = Выборка["Субконто" + Ном];
				КонецЦикла;
				
				Движение.СчетДт		= СчетОтнесенияКурсовыхРазниц;
				
				Если ВалютныйСчетОтнесения Тогда
					Движение.ВалютаДт = Выборка.Валюта;
				КонецЕсли;
				
				Для Ном=1 по ВидыСубконтоСчет.Количество() Цикл
					
					Если ВидыСубконтоСчет[Ном-1].ВидСубконто.Наименование=Выборка.НаименованиеСубконто1 Тогда
						Движение.СубконтоДт[ВидыСубконтоСчет[Ном-1].ВидСубконто]=Выборка.Субконто1;
					ИначеЕсли ВидыСубконтоСчет[Ном-1].ВидСубконто.Наименование=Выборка.НаименованиеСубконто2 Тогда
						Движение.СубконтоДт[ВидыСубконтоСчет[Ном-1].ВидСубконто]=Выборка.Субконто2;
					ИначеЕсли ВидыСубконтоСчет[Ном-1].ВидСубконто.Наименование=Выборка.НаименованиеСубконто3 Тогда
						Движение.СубконтоДт[ВидыСубконтоСчет[Ном-1].ВидСубконто]=Выборка.Субконто3;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Движение.СуммаУпр = СуммаУпрРазница*(-1);
				Движение.СуммаСценария = СуммаСценарияРазница*(-1);
				
				Если Выборка.Валютный Тогда
					Движение.ВалютаКт=Выборка.Валюта;
				КонецЕсли;
				
			КонецЕсли;	
			
			Движение.ФинансовыйПоказатель=ФинансовыйПоказатель;
			Если БюджетированиеПоОрганизациям Тогда
				Движение.Организация = Организация;
			КонецЕсли;
			
			// По регистру "Обороты бюджетов";
			
			СтрокаОборот						= Движения.фин_ОборотыБюджетов.Добавить();
			СтрокаОборот.Сценарий				= Сценарий;
			СтрокаОборот.ФинансовыйПоказатель	= ФинансовыйПоказатель;
			
			Для Ном=1 по 3 цикл
				
				Если Выборка["НаименованиеСубконто"+Ном]="ЦФО" Тогда
					СтрокаОборот.ЦФО=Выборка["Субконто" + Ном];
				ИначеЕсли Выборка["НаименованиеСубконто"+Ном]="Проекты" Тогда
					СтрокаОборот.Проект=Выборка["Субконто" + Ном];
				ИначеЕсли Выборка["НаименованиеСубконто"+Ном]="Контрагенты" Тогда
					СтрокаОборот.Контрагент=Выборка["Субконто" + Ном];
				ИначеЕсли Выборка["НаименованиеСубконто"+Ном]="Номенклатура" Тогда
					СтрокаОборот.Номенклатура=Выборка["Субконто" + Ном];
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаОборот.СуммаУпр		= СуммаУпрРазница;
			СтрокаОборот.СуммаСценария	= СуммаСценарияРазница;
			
			СтрокаОборот.Валюта			= ВалютаУпрУчета;
			СтрокаОборот.ВалютнаяСумма	= СуммаУпрРазница;
			
			СтрокаОборот.Период			= ДатаПереоценки;
			СтрокаОборот.Активность		= Истина;
			
			Если БюджетированиеПоОрганизациям Тогда
				СтрокаОборот.Организация = Организация;
			КонецЕсли;
							
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.фин_Бюджетирование.Записывать=Истина;
	Движения.фин_ОборотыБюджетов.Записывать=Истина;
	 
КонецПроцедуры //ДвиженияПоРегистрам

Процедура ЗарегистрироватьПроводкиДокумента(ТабПроводокДокумента, Движения, Отказ) Экспорт
	НаборДвижений=Движения.фин_Бюджетирование;
	ЗаполнитьНаборЗаписейРегистраБухгалтерииБюджетирование(НаборДвижений,ТабПроводокДокумента); 
	Движения.фин_Бюджетирование.Записывать = Истина;
КонецПроцедуры

// Возвращает таблицу значений для использования в движениях
// регистра бухгалтерии "Бюджетирование"
//
Функция СформироватьПроводкиПоДаннымДокумента(Объект,Реквизиты)
	ТолькоУтвержденные = Реквизиты.БюджетыСНеУтвержденнымиСтроками=Перечисления.фин_СпособыРаботыСНеУтвержденнымиСтрокамиБюджета.НеОтражатьНеУтвержденныеСтрокиВУчете;
	
	ТекстЗапроса="ВЫБРАТЬ
	|	БюджетнаяОперацияОбороты.Ссылка.Сценарий,
	|	ЗНАЧЕНИЕ(Справочник.фин_ШаблоныПроводокПоСчетамБюджетирования.ПустаяСсылка) КАК ШаблонПроводок,
	|	БюджетнаяОперацияОбороты.ПериодПланирования КАК Период,
	|	БюджетнаяОперацияОбороты.ВалютаОперации КАК ВалютаОперации,
	|	БюджетнаяОперацияОбороты.ФинансовыйПоказатель,
	|	БюджетнаяОперацияОбороты.УправленческоеПодразделение,
	|	БюджетнаяОперацияОбороты.Проект,
	|	БюджетнаяОперацияОбороты.Контрагент,
	|	БюджетнаяОперацияОбороты.Номенклатура,
	|	БюджетнаяОперацияОбороты.ДополнительныеРазрезы,
	|	БюджетнаяОперацияОбороты.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	БюджетнаяОперацияОбороты.Количество,
	|	БюджетнаяОперацияОбороты.Сумма
	|ИЗ
	|	Документ.фин_Бюджет.ОборотыПоСтатьям КАК БюджетнаяОперацияОбороты
	|
	|ГДЕ
	|	БюджетнаяОперацияОбороты.Ссылка = &Ссылка
	|       "+?(ТолькоУтвержденные," И БюджетнаяОперацияОбороты.Состояние = ЗНАЧЕНИЕ(Перечисление."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СостоянияОбъектов.Утвержден)","")+"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БюджетнаяОперацияЗависимыеОбороты.Ссылка.Сценарий,
	|	ЗНАЧЕНИЕ(Справочник.фин_ШаблоныПроводокПоСчетамБюджетирования.ПустаяСсылка),
	|	БюджетнаяОперацияЗависимыеОбороты.ПериодПланирования,
	|	БюджетнаяОперацияЗависимыеОбороты.ВалютаОперации,
	|	БюджетнаяОперацияЗависимыеОбороты.ФинансовыйПоказатель,
	|	БюджетнаяОперацияЗависимыеОбороты.УправленческоеПодразделение,
	|	БюджетнаяОперацияЗависимыеОбороты.Проект,
	|	БюджетнаяОперацияЗависимыеОбороты.Контрагент,
	|	БюджетнаяОперацияЗависимыеОбороты.Номенклатура,
	|	БюджетнаяОперацияЗависимыеОбороты.ДополнительныеРазрезы,
	|	БюджетнаяОперацияЗависимыеОбороты.Ссылка.ВалютаДокумента,
	|	БюджетнаяОперацияЗависимыеОбороты.Количество,
	|	БюджетнаяОперацияЗависимыеОбороты.Сумма
	|ИЗ
	|	Документ.фин_Бюджет.ЗависимыеОбороты КАК БюджетнаяОперацияЗависимыеОбороты
	|
	|ГДЕ
	|	БюджетнаяОперацияЗависимыеОбороты.Ссылка = &Ссылка
	|       "+?(ТолькоУтвержденные," И БюджетнаяОперацияЗависимыеОбороты.Состояние = ЗНАЧЕНИЕ(Перечисление."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СостоянияОбъектов.Утвержден)","")+"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БюджетнаяОперацияРасчеты.Ссылка.Сценарий,
	|	ЗНАЧЕНИЕ(Справочник.фин_ШаблоныПроводокПоСчетамБюджетирования.ПустаяСсылка),
	|	БюджетнаяОперацияРасчеты.ПериодПланирования,
	|	БюджетнаяОперацияРасчеты.ВалютаОперации,
	|	БюджетнаяОперацияРасчеты.ФинансовыйПоказатель,
	|	БюджетнаяОперацияРасчеты.УправленческоеПодразделение,
	|	БюджетнаяОперацияРасчеты.Проект,
	|	БюджетнаяОперацияРасчеты.Контрагент,
	|	БюджетнаяОперацияРасчеты.Номенклатура,
	|	БюджетнаяОперацияРасчеты.ДополнительныеРазрезы,
	|	БюджетнаяОперацияРасчеты.Ссылка.ВалютаДокумента,
	|	БюджетнаяОперацияРасчеты.Количество,
	|	БюджетнаяОперацияРасчеты.Сумма
	|ИЗ
	|	Документ.фин_Бюджет.РасчетыПоМоделям КАК БюджетнаяОперацияРасчеты
	|
	|ГДЕ
	|	БюджетнаяОперацияРасчеты.Ссылка = &Ссылка";
	
	ТекстДляКурсовОперации ="ВЫБРАТЬ РАЗЛИЧНЫЕ
	                        |	ОборотыПоСтатьям.ПериодПланирования КАК Дата,
	                        |	ОборотыПоСтатьям.ВалютаОперации КАК ВалютаДок
	                        |ИЗ
	                        |	Документ.фин_Бюджет.ОборотыПоСтатьям КАК ОборотыПоСтатьям
	                        |ГДЕ
	                        |	ОборотыПоСтатьям.Ссылка = &Ссылка
	                        |
	                        |ОБЪЕДИНИТЬ ВСЕ
	                        |
	                        |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                        |	ОборотыПоСтатьям.ПериодПланирования,
	                        |	ОборотыПоСтатьям.ВалютаОперации
	                        |ИЗ
	                        |	Документ.фин_Бюджет.ЗависимыеОбороты КАК ОборотыПоСтатьям
	                        |ГДЕ
	                        |	ОборотыПоСтатьям.Ссылка = &Ссылка
	                        |
	                        |ОБЪЕДИНИТЬ ВСЕ
	                        |
	                        |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                        |	РасчетыПоМоделям.ПериодПланирования,
	                        |	РасчетыПоМоделям.ВалютаОперации
	                        |ИЗ
	                        |	Документ.фин_Бюджет.РасчетыПоМоделям КАК РасчетыПоМоделям
	                        |ГДЕ
	                        |	РасчетыПоМоделям.Ссылка = &Ссылка";
	ТекстДляКурсовУпрУчета ="ВЫБРАТЬ РАЗЛИЧНЫЕ
	                        |	ОборотыПоСтатьям.ПериодПланирования КАК Дата
	                        |ИЗ
	                        |	Документ.фин_Бюджет.ОборотыПоСтатьям КАК ОборотыПоСтатьям
	                        |ГДЕ
	                        |	ОборотыПоСтатьям.Ссылка = &Ссылка
	                        |
	                        |ОБЪЕДИНИТЬ ВСЕ
	                        |
	                        |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                        |	ОборотыПоСтатьям.ПериодПланирования
	                        |ИЗ
	                        |	Документ.фин_Бюджет.ЗависимыеОбороты КАК ОборотыПоСтатьям
	                        |ГДЕ
	                        |	ОборотыПоСтатьям.Ссылка = &Ссылка
	                        |
	                        |ОБЪЕДИНИТЬ ВСЕ
	                        |
	                        |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                        |	РасчетыПоМоделям.ПериодПланирования
	                        |ИЗ
	                        |	Документ.фин_Бюджет.РасчетыПоМоделям КАК РасчетыПоМоделям
	                        |ГДЕ
	                        |	РасчетыПоМоделям.Ссылка = &Ссылка";
							
	ИспользоватьКурсыСценария = Реквизиты.Сценарий.ИспользоватьКурсыСценария;
	ТабПроводокДокумента=фин_ПроцедурыМеханизмовБюджетирования.ПолучитьТаблицуПроводокПоПлануСчетовБюджетирования(Объект.Ссылка,ТекстЗапроса,,ТекстДляКурсовОперации,ТекстДляКурсовУпрУчета,?(ИспользоватьКурсыСценария,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"КурсыВалютПоСценариям","КурсыВалют"),ИспользоватьКурсыСценария ,,Реквизиты.ВалютаДокумента,Реквизиты.Сценарий,Реквизиты.Сценарий.Валюта);
	
	Если Объект.РасчетыПоМоделям.НайтиСтроки(Новый Структура("ФормироватьПроводки",Истина)).Количество()>0 Тогда
		ТекстЗапроса="ВЫБРАТЬ
		             |	БюджетнаяОперацияРасчеты.Ссылка.Сценарий,
		             |	БюджетнаяОперацияРасчеты.ПериодПланирования КАК Период,
		             |	БюджетнаяОперацияРасчеты.ВалютаОперации,
		             |	БюджетнаяОперацияРасчеты.ФинансовыйПоказатель,
		             |	БюджетнаяОперацияРасчеты.УправленческоеПодразделение,
		             |	БюджетнаяОперацияРасчеты.Проект,
		             |	БюджетнаяОперацияРасчеты.Контрагент,
		             |	БюджетнаяОперацияРасчеты.Номенклатура,
		             |	БюджетнаяОперацияРасчеты.ДополнительныеРазрезы,
		             |	БюджетнаяОперацияРасчеты.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
		             |	БюджетнаяОперацияРасчеты.Количество,
		             |	БюджетнаяОперацияРасчеты.Сумма,
		             |	БюджетнаяОперацияРасчеты.СчетДт,
		             |	БюджетнаяОперацияРасчеты.СчетКт,
		             |	БюджетнаяОперацияРасчеты.СторонаПроводкиКор,
		             |	БюджетнаяОперацияРасчеты.АналитикаКор
		             |ИЗ
		             |	Документ.фин_Бюджет.РасчетыПоМоделям КАК БюджетнаяОперацияРасчеты
		             |ГДЕ
		             |	БюджетнаяОперацияРасчеты.Ссылка = &Ссылка
		             |	И БюджетнаяОперацияРасчеты.ФормироватьПроводки";
		
		ТекстДляКурсовОперации ="ВЫБРАТЬ РАЗЛИЧНЫЕ
		                        |	РасчетыПоМоделям.ПериодПланирования КАК Дата,
		                        |	РасчетыПоМоделям.ВалютаОперации КАК ВалютаДок
		                        |ИЗ
		                        |	Документ.фин_Бюджет.РасчетыПоМоделям КАК РасчетыПоМоделям
		                        |ГДЕ
		                        |	РасчетыПоМоделям.Ссылка = &Ссылка
		                        |	И РасчетыПоМоделям.ФормироватьПроводки";
		ТекстДляКурсовУпрУчета ="ВЫБРАТЬ РАЗЛИЧНЫЕ
		                        |	РасчетыПоМоделям.ПериодПланирования КАК Дата
		                        |ИЗ
		                        |	Документ.фин_Бюджет.РасчетыПоМоделям КАК РасчетыПоМоделям
		                        |ГДЕ
		                        |	РасчетыПоМоделям.Ссылка = &Ссылка
		                        |	И РасчетыПоМоделям.ФормироватьПроводки";
		ТабДополнительныхПроводокДокумента=фин_ПроцедурыМеханизмовБюджетирования.ПолучитьТаблицуДополнительныхПроводокПоПлануСчетовБюджетирования(Объект.Ссылка,ТекстЗапроса,ТекстДляКурсовОперации,ТекстДляКурсовУпрУчета,?(ИспользоватьКурсыСценария,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"КурсыВалютПоСценариям","КурсыВалют"),ИспользоватьКурсыСценария,,Реквизиты.ВалютаДокумента,Реквизиты.Сценарий,Реквизиты.Сценарий.Валюта);
		фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(ТабДополнительныхПроводокДокумента,ТабПроводокДокумента);
	КонецЕсли;
	
	СтрокиУдалить = ТабПроводокДокумента.НайтиСтроки(Новый Структура("СуммаУпр,СуммаСценария,ВалютнаяСуммаДт,ВалютнаяСуммаКт,КоличествоДт,КоличествоКт",0,0,0,0,0,0));
	Для Каждого Строка Из СтрокиУдалить Цикл
		ТабПроводокДокумента.Удалить(Строка);
	КонецЦикла;
	СтрокиУдалить = ТабПроводокДокумента.НайтиСтроки(Новый Структура("СуммаУпр,СуммаСценария,ВалютнаяСуммаДт,ВалютнаяСуммаКт,КоличествоДт,КоличествоКт",0,0,0,0,NULL,NULL));
	Для Каждого Строка Из СтрокиУдалить Цикл
		ТабПроводокДокумента.Удалить(Строка);
	КонецЦикла;
	СтрокиУдалить = ТабПроводокДокумента.НайтиСтроки(Новый Структура("СуммаУпр,СуммаСценария,ВалютнаяСуммаДт,ВалютнаяСуммаКт,КоличествоДт,КоличествоКт",0,0,0,0,NULL,0));
	Для Каждого Строка Из СтрокиУдалить Цикл
		ТабПроводокДокумента.Удалить(Строка);
	КонецЦикла;
	СтрокиУдалить = ТабПроводокДокумента.НайтиСтроки(Новый Структура("СуммаУпр,СуммаСценария,ВалютнаяСуммаДт,ВалютнаяСуммаКт,КоличествоДт,КоличествоКт",0,0,0,0,0,NULL));
	Для Каждого Строка Из СтрокиУдалить Цикл
		ТабПроводокДокумента.Удалить(Строка);
	КонецЦикла;
	
	Возврат ТабПроводокДокумента;
	
КонецФункции // СформироватьПроводкиПоДаннымДокумента()

Процедура ЗарегистрироватьДвиженияПоРегиструБухгалтерииБюджетирование(Объект,ТаблицаРеквизиты, Движения, Отказ) Экспорт
	Реквизиты = ТаблицаРеквизиты[0];
	ТабПроводокДокумента	=	СформироватьПроводкиПоДаннымДокумента(Объект,Реквизиты);
	ТабПроводокДокумента.Колонки.Добавить("Сценарий");
	ТабПроводокДокумента.ЗаполнитьЗначения(Реквизиты.Сценарий,"Сценарий");
	
	НаборДвижений=Движения.фин_Бюджетирование;
	СписокРесурсов = Новый Массив;
	СписокРесурсов.Добавить("ВалютнаяСуммаДт");
	СписокРесурсов.Добавить("ВалютнаяСуммаКт");
	СписокРесурсов.Добавить("КоличествоДт");
	СписокРесурсов.Добавить("КоличествоКт");
	СписокРесурсов.Добавить("СуммаСценария");
	СписокРесурсов.Добавить("СуммаУпр");
	Для Каждого Строка Из  ТабПроводокДокумента Цикл
		Для Каждого Ресурс из СписокРесурсов Цикл
			Если Строка[Ресурс] = Неопределено ИЛИ Строка[Ресурс] = NULL Тогда
				Строка[Ресурс] = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СтрокиУдалить = ТабПроводокДокумента.НайтиСтроки(Новый Структура("ВалютнаяСуммаДт,ВалютнаяСуммаКт,СуммаУпр,СуммаСценария,КоличествоДт,КоличествоКт",0,0,0,0,0,0));
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
			ТабПроводокДокумента.Удалить(СтрокаУдалить);
	КонецЦикла;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям") Тогда
		ТабПроводокДокумента.Колонки.Добавить("Организация");
		ТабПроводокДокумента.ЗаполнитьЗначения(Реквизиты.Организация,"Организация");
	КонецЕсли;
	ЗаполнитьНаборЗаписейРегистраБухгалтерииБюджетирование(НаборДвижений,ТабПроводокДокумента); 
	Движения.фин_Бюджетирование.Записывать = Истина;
КонецПроцедуры

Процедура ЗаполнитьНаборЗаписейРегистраБухгалтерииБюджетирование(НаборЗаписей,ТаблицаДвижений)  Экспорт
    мПоОрганизациям = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
	
		Движение=НаборЗаписей.Добавить();
		
		// Дебетовая сторона проводки
		Движение.СчетДт=СтрокаДвижения.СчетДт;
		ВидыСубконто=Движение.СчетДт.ВидыСубконто;
		
		Для Индекс=1 По ВидыСубконто.Количество() Цикл
				
				Движение.СубконтоДт[ВидыСубконто[Индекс-1].ВидСубконто]=СтрокаДвижения["СубконтоДт"+Индекс];
						
		КонецЦикла; 		
		
		Если Движение.СчетДт.Валютный Тогда
			
			Движение.ВалютаДт=СтрокаДвижения.ВалютаДт;
			Движение.ВалютнаяСуммаДт=СтрокаДвижения.ВалютнаяСуммаДт;
			
		КонецЕсли;
		
		Если Движение.СчетДт.Количественный Тогда
			
			Движение.КоличествоДт=СтрокаДвижения.КоличествоДт;
			
		КонецЕсли;		
				
		//Кредитовая сторона проводки
		Движение.СчетКт=СтрокаДвижения.СчетКт;
		
		ВидыСубконто=Движение.СчетКт.ВидыСубконто;
		
		Для Индекс=1 По ВидыСубконто.Количество() Цикл
				
				Движение.СубконтоКт[ВидыСубконто[Индекс-1].ВидСубконто]=СтрокаДвижения["СубконтоКт"+Индекс];
						
		КонецЦикла; 	

		Если Движение.СчетКт.Валютный Тогда
			
			Движение.ВалютаКт=СтрокаДвижения.ВалютаКт;
			Движение.ВалютнаяСуммаКт=СтрокаДвижения.ВалютнаяСуммаКт;
			
		КонецЕсли;
		
		Если Движение.СчетКт.Количественный Тогда
			
			Движение.КоличествоКт=СтрокаДвижения.КоличествоКт;
			
		КонецЕсли;

		// Общие реквизиты проводки
		Движение.Период=СтрокаДвижения.Период;
		Движение.Сценарий=СтрокаДвижения.Сценарий;
		Движение.ФинансовыйПоказатель=СтрокаДвижения.ФинансовыйПоказатель;	
		Движение.СуммаУпр=СтрокаДвижения.СуммаУпр;
		Движение.СуммаСценария=СтрокаДвижения.СуммаСценария;
		Если мПоОрганизациям Тогда
			Движение.Организация=СтрокаДвижения.Организация;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Функция ПодготовитьТаблицуПроводокДокументаУчетФактическихДанных(Реквизиты) Экспорт
	
 	ТекстЗапроса="ВЫБРАТЬ
 	             |	БюджетныеОперации.Период,
 	             |	БюджетныеОперации.ФинансовыйПоказатель,
 	             |	БюджетныеОперации.УправленческоеПодразделение,
 	             |	БюджетныеОперации.Проект,
 	             |	БюджетныеОперации.Контрагент,
 	             |	БюджетныеОперации.Номенклатура,
 	             |	БюджетныеОперации.Валюта КАК ВалютаОперации,
 	             |	БюджетныеОперации.Количество,
 	             |	БюджетныеОперации.Сумма,
 	             |	БюджетныеОперации.ДополнительныеРазрезы,
 	             |	ЗНАЧЕНИЕ(Справочник.фин_ШаблоныПроводокПоСчетамБюджетирования.ПустаяСсылка) КАК ШаблонПроводок
 	             |ИЗ
 	             |	Документ.фин_УчетФактическихДанныхПоБюджетам.БюджетныеОперации КАК БюджетныеОперации
 	             |ГДЕ
 	             |	БюджетныеОперации.Ссылка = &Ссылка";
	ТекстДляКурсовОперации = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                         |	БюджетныеОперации.Период КАК Дата,
	                         |	БюджетныеОперации.Валюта КАК ВалютаДок
	                         |ИЗ
	                         |	Документ.фин_УчетФактическихДанныхПоБюджетам.БюджетныеОперации КАК БюджетныеОперации
	                         |ГДЕ
	                         |	БюджетныеОперации.Ссылка = &Ссылка";			 
	ТекстДляКурсовУпрУчета = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                         |	БюджетныеОперации.Период КАК Дата
	                         |ИЗ
	                         |	Документ.фин_УчетФактическихДанныхПоБюджетам.БюджетныеОперации КАК БюджетныеОперации
	                         |ГДЕ
	                         |	БюджетныеОперации.Ссылка = &Ссылка";			 
	
	ТабПроводокДокумента=фин_ПроцедурыМеханизмовБюджетирования.ПолучитьТаблицуПроводокПоПлануСчетовБюджетирования(Реквизиты.Ссылка,ТекстЗапроса,,ТекстДляКурсовОперации,ТекстДляКурсовУпрУчета,,,Истина,,,,Истина);
	
	ТабПроводокДокумента.Колонки.Добавить("Сценарий");
	ТабПроводокДокумента.ЗаполнитьЗначения(Новый(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования()),"Сценарий");
	
	ТабПроводокДокумента.Колонки.Добавить("СуммаСценария");
	ТабПроводокДокумента.ЗаполнитьЗначения(0,"СуммаСценария");
	
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям") Тогда
		ТабПроводокДокумента.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТабПроводокДокумента.ЗаполнитьЗначения(Реквизиты.Организация,"Организация");
	КонецЕсли;
	
	Возврат ТабПроводокДокумента;
КонецФункции

Функция ПодготовитьТаблицуПроводокДокументаРегистрацииПрогнозныхДанных(Реквизиты) Экспорт
	
 	ТекстЗапроса="ВЫБРАТЬ
 	             |	БюджетныеОперации.Период,
 	             |	БюджетныеОперации.ФинансовыйПоказатель,
 	             |	БюджетныеОперации.УправленческоеПодразделение,
 	             |	БюджетныеОперации.Проект,
 	             |	БюджетныеОперации.Контрагент,
 	             |	БюджетныеОперации.Номенклатура,
 	             |	БюджетныеОперации.Валюта КАК ВалютаОперации,
 	             |	БюджетныеОперации.Количество,
 	             |	БюджетныеОперации.Сумма,
 	             |	БюджетныеОперации.ДополнительныеРазрезы,
 	             |	ЗНАЧЕНИЕ(Справочник.фин_ШаблоныПроводокПоСчетамБюджетирования.ПустаяСсылка) КАК ШаблонПроводок
 	             |ИЗ
 	             |	Документ.фин_РегистрацияПрогнозныхДанныхПоИсполнениюБюджетов.БюджетныеОперации КАК БюджетныеОперации
 	             |ГДЕ
 	             |	БюджетныеОперации.Ссылка = &Ссылка";
	ТекстДляКурсовОперации = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                         |	БюджетныеОперации.Период КАК Дата,
	                         |	БюджетныеОперации.Валюта КАК ВалютаДок
	                         |ИЗ
	                         |	Документ.фин_РегистрацияПрогнозныхДанныхПоИсполнениюБюджетов.БюджетныеОперации КАК БюджетныеОперации
	                         |ГДЕ
	                         |	БюджетныеОперации.Ссылка = &Ссылка";			 
	ТекстДляКурсовУпрУчета = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                         |	БюджетныеОперации.Период КАК Дата
	                         |ИЗ
	                         |	Документ.фин_РегистрацияПрогнозныхДанныхПоИсполнениюБюджетов.БюджетныеОперации КАК БюджетныеОперации
	                         |ГДЕ
	                         |	БюджетныеОперации.Ссылка = &Ссылка";			 
	
	ТабПроводокДокумента=фин_ПроцедурыМеханизмовБюджетирования.ПолучитьТаблицуПроводокПоПлануСчетовБюджетирования(Реквизиты.Ссылка,ТекстЗапроса,,ТекстДляКурсовОперации,ТекстДляКурсовУпрУчета,,,Истина,,,,Истина);
	
	ТабПроводокДокумента.Колонки.Добавить("Сценарий");
	ТабПроводокДокумента.ЗаполнитьЗначения(Новый(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования()),"Сценарий");
	
	ТабПроводокДокумента.Колонки.Добавить("СуммаСценария");
	ТабПроводокДокумента.ЗаполнитьЗначения(0,"СуммаСценария");
	
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям") Тогда
		ТабПроводокДокумента.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТабПроводокДокумента.ЗаполнитьЗначения(Реквизиты.Организация,"Организация");
	КонецЕсли;
	
	Возврат ТабПроводокДокумента;
КонецФункции

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоВнутреннемуПеремещениюСредств(Реквизиты,Движения, ТаблицаПроводок,ПараметрыИсточника,ПараметрыПриемника, Отказ)  Экспорт
	
	// По регистру бухгалтерии "Бюджетирование"
	
	Сценарий 			= Реквизиты.Сценарий;
	ПериодПланирования 	= Реквизиты.ПериодПланирования;
	Организация 		= Реквизиты.Организация;
	ВалютаИсточник 		= Реквизиты.ВалютаИсточник;
	ВалютаПриемник 		= Реквизиты.ВалютаПриемник;
	КурсИсточник 		= Реквизиты.КурсИсточник;
	КурсПриемник 		= Реквизиты.КурсПриемник;
	КратностьИсточник 	= Реквизиты.КратностьИсточник;
	КратностьПриемник	= Реквизиты.КратностьПриемник;
	
	ТабПроводокДокумента = ТаблицаПроводок;
	
	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаУпрУчета",фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета").Код);
	СтруктураГруппаВалют.Вставить("ВалютаСценария",Реквизиты.Сценарий.Валюта.Код);
	
	СтруктураКурсыВалют=фин_УправлениеБюджетированием.ПолучитьКурсыСценарияДляГруппыВалют(СтруктураГруппаВалют,ПериодПланирования,Сценарий);
	
	ТабПроводокДокумента.Колонки.Добавить("СуммаУпр");
	ТабПроводокДокумента.Колонки.Добавить("СуммаСценария");
	ТабПроводокДокумента.Колонки.Добавить("ВалютнаяСуммаДт");
	
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям") Тогда
		ТабПроводокДокумента.Колонки.Добавить("Организация");
		ТабПроводокДокумента.ЗаполнитьЗначения(Организация,"Организация");
	КонецЕсли;
	
	Для Каждого Проводка Из ТабПроводокДокумента Цикл
		Проводка.СуммаУпр			= фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(Проводка.ВалютнаяСуммаКт, ВалютаИсточник, СтруктураКурсыВалют.ВалютаУпрУчета, КурсИсточник, СтруктураКурсыВалют.ВалютаУпрУчетаКурс, КратностьИсточник, СтруктураКурсыВалют.ВалютаУпрУчетаКратность);
		Проводка.СуммаСценария		= фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(Проводка.ВалютнаяСуммаКт, ВалютаИсточник, СтруктураКурсыВалют.ВалютаСценария, КурсИсточник, СтруктураКурсыВалют.ВалютаСценарияКурс, КратностьИсточник, СтруктураКурсыВалют.ВалютаСценарияКратность);
		Проводка.ВалютнаяСуммаДт	= фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(Проводка.ВалютнаяСуммаКт, ВалютаИсточник, ВалютаПриемник, КурсИсточник, КурсПриемник, КратностьИсточник, КратностьПриемник);
	КонецЦикла;
	
	ЗаполнитьНаборЗаписейРегистраБухгалтерииБюджетирование(Движения.фин_Бюджетирование,ТабПроводокДокумента);
	
	Для Каждого Проводка Из Движения.фин_Бюджетирование Цикл
		ВидыСубконтоКт = Проводка.СчетКт.ВидыСубконто;
		Для Каждого СтрокаСубконто Из ВидыСубконтоКт Цикл
			ВидСубконто = СтрокаСубконто.ВидСубконто;
			Строки = ПараметрыИсточника.НайтиСтроки(Новый Структура("Разрез",ВидСубконто));
			Если Строки.Количество()=0 Тогда
				Продолжить;
			КонецЕсли;
			Проводка.СубконтоКт.Вставить(ВидСубконто,Строки[0].Значение);
		КонецЦикла;
		ВидыСубконтоДт = Проводка.СчетДт.ВидыСубконто;
		Для Каждого СтрокаСубконто Из ВидыСубконтоДт Цикл
			ВидСубконто = СтрокаСубконто.ВидСубконто;
			Строки = ПараметрыПриемника.НайтиСтроки(Новый Структура("Разрез",ВидСубконто));
			Если Строки.Количество()=0 Тогда
				Продолжить;
			КонецЕсли;
			Проводка.СубконтоДт.Вставить(ВидСубконто,Строки[0].Значение);
		КонецЦикла;
	КонецЦикла;
	Движения.фин_Бюджетирование.Записывать = Истина;
		
КонецПроцедуры //ДвиженияПоРегистрам
