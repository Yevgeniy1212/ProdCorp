Функция ПолучитьСтруктуруОтборовНабораЗаписей(НаборЗаписейДоступаПользователей) Экспорт
	
	СтруктураОтбора = Новый Структура;
	
	Для Каждого ЭлементОтбора Из НаборЗаписейДоступаПользователей.Отбор Цикл
		Если ЭлементОтбора.Использование Тогда
			СтруктураОтбора.Вставить(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураОтбора;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАНИЯ МЕХАНИЗМА НАСТРОЙКИ ПРАВ ДОСТУПА

Процедура ПрочитатьПраваДоступаКОбъекту(НаборЗаписейДоступаПользователей, Ссылка) Экспорт

	// Снимем все отборы
	Для Каждого Отбор Из НаборЗаписейДоступаПользователей.Отбор Цикл
		Отбор.Использование = Ложь;
	КонецЦикла;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		НаборЗаписейДоступаПользователей.Отбор.Пользователь.Значение = Ссылка;
		НаборЗаписейДоступаПользователей.Отбор.Пользователь.Использование = Истина;
	Иначе
		НаборЗаписейДоступаПользователей.Отбор.ОбъектДоступа.Значение = Ссылка;
		НаборЗаписейДоступаПользователей.Отбор.ОбъектДоступа.Использование = Истина;
		
		НаборЗаписейДоступаПользователей.Отбор.НаследованаОтВсеПользователи.Значение = Ложь;
		НаборЗаписейДоступаПользователей.Отбор.НаследованаОтВсеПользователи.Использование = Истина;
	КонецЕсли;
	
	НаборЗаписейДоступаПользователей.Прочитать();
	
КонецПроцедуры

Процедура ПрочитатьПраваДоступаКДокументамДругихПользователей(ПраваДоступаКДокументамДругихПользователей, Ссылка) Экспорт
	// Снимем все отборы
	Для каждого Отбор Из ПраваДоступаКДокументамДругихПользователей.Отбор Цикл
		Отбор.Использование = Ложь;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли; 
	
	ПраваДоступаКДокументамДругихПользователей.Отбор.Пользователь.Значение = Ссылка;
	ПраваДоступаКДокументамДругихПользователей.Отбор.Пользователь.Использование = Истина;
	ПраваДоступаКДокументамДругихПользователей.Прочитать();
	
КонецПРоцедуры

Процедура ЗаписатьПраваДоступаПользователяКДокументамДругихПользователей(ПраваДоступаКДокументамДругихПользователей, Ссылка, Отказ) Экспорт
	Если НЕ Отказ Тогда
	
		// Сравним наборы записей
		ЭталонныйНабор = РегистрыСведений.ПраваДоступаКДокументамДругихПользователей.СоздатьНаборЗаписей();
		ЭталонныйНабор.Отбор.Пользователь.Значение = Ссылка;
		ЭталонныйНабор.Отбор.Пользователь.Использование = Истина;
		ЭталонныйНабор.Прочитать();
		
		Для каждого ЗаписьНабора Из ПраваДоступаКДокументамДругихПользователей Цикл
			ЗаписьНабора.Пользователь = Ссылка;
		КонецЦикла; 
			
 	 	Если НЕ ОбщегоНазначения.СравнитьТаблицыНаборовЗаписей(ЭталонныйНабор.Выгрузить(), ПраваДоступаКДокументамДругихПользователей.Выгрузить()) Тогда
  	
 			ПраваДоступаКДокументамДругихПользователей.Отбор.Пользователь.Значение      = Ссылка;
  			ПраваДоступаКДокументамДругихПользователей.Отбор.Пользователь.Использование = Истина;
  		
  			ПолныеПрава.ЗаписатьПраваДоступаКДокументамДругихПользователей(ПраваДоступаКДокументамДругихПользователей.Выгрузить(), ПолучитьСтруктуруОтборовНабораЗаписей(ПраваДоступаКДокументамДругихПользователей), Отказ, ("Элемент """ + СокрЛП(Ссылка) + """ не записан"));
  		
			Если НЕ Отказ Тогда
				ПрочитатьПраваДоступаКДокументамДругихПользователей(ПраваДоступаКДокументамДругихПользователей, Ссылка);
			КонецЕсли; 

		КонецЕсли;
	
	КонецЕсли; 
КонецПроцедуры

// Проверка необходимости наследуемые права только группами справочника
Функция ЗаполнениеДочернихТолькоГруппами(ОбластьДанных) Экспорт
	
	Возврат Ложь;
	
КонецФункции	

// Процедура, вызываемая из форм документов из процедуры ПриОткрытии(), проверяет
// доступен ли документ для редактирования, если нет, то устанавливает свойство
// формы ТолькоПросмотр в значеине Истина
Процедура УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма) Экспорт
	//цс
	//Если РольДоступна("ПолныеПрава") тогда
	//	Возврат;
	//КонецЕсли;
	//Конеццс

	// Для зерновых расписок
	Если ТипЗнч(ЭтотОбъект) = тип("ДокументОбъект.Ур_ЗерноваяРасписка") И (РольДоступна("ПравоПодписиЗерновыхРасписок") = Истина) И (ЭтаФорма.Подписан = Ложь) тогда
		Сообщить("Отладка");
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	РежимПросмотра = Ложь;
	ТекстСообщения = "";
	ПроверкаПериодаДокумента(ЭтотОбъект, РежимПросмотра);
	Если РежимПросмотра Тогда
		ТекстСообщения = "Редактирование данных этого периода запрещено. Документ открыт в режиме просмотра...";
	КонецЕсли;
	ЗапрещеноРедактироватьДокумент = Ложь;
	АвторДокументаТекст = "";
	ПроверкаРазрешенияРедактированияЧужихДокументов(ЭтотОбъект, ЗапрещеноРедактироватьДокумент, АвторДокументаТекст);
	Если ЗапрещеноРедактироватьДокумент Тогда
		РежимПросмотра = Истина;
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС;
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + "Редактирование документов пользователя """ + АвторДокументаТекст + """ запрещено. Документ открыт в режиме просмотра...";
	КонецЕсли;
	Если РежимПросмотра Тогда
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьВидОбъектаДоступа(ОбъектДоступа) Экспорт

	Если ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.Организации") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.Организации;	
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.СтруктурныеПодразделения
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.Склады") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.Склады;
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.ГруппыДоступаФизическихЛиц") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.ФизическиеЛица;		
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.ВнешниеОбработки;
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.Кассы") Тогда
		Возврат Перечисления.ВидыОбъектовДоступа.Кассы;
	Иначе
		Возврат Перечисления.ВидыОбъектовДоступа.ПустаяСсылка();
	КонецЕсли; 

КонецФункции

// Функция проверяет наличие ограничения прав доступа на уровне записей по физлицам
// Возвращаемое значение:
//   Истина - если есть ограничение
//
Функция ЕстьОграничениеПравДоступаНаУровнеЗаписейПоФизлицам() Экспорт

	Если ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа.Ссылка
		|ИЗ
		|	РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа
		|ГДЕ
		|	НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.ФизическиеЛица)";
		Выборка = Запрос.Выполнить().Выбрать();
		Возврат Выборка.Следующий();
	Иначе
		Возврат Ложь;
	КонецЕсли;	

КонецФункции // ЕстьОграничениеПравДоступаНаУровнеЗаписейПоФизлицам()

/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАЮЩИЕ НАСЛЕДСТВЕННОСТЬ ПРАВ ДОСТУПА ПОЛЬЗОВАТЕЛЕЙ К ОБЪЕКТАМ 

Функция ПолучитьМассивРодительскихЭлементов(Ссылка, МассивРодительскихЭлементов = Неопределено, СтруктурноеПодразделение = Ложь) Экспорт
	
	ИмяРеквизитаРодителя = ПолучитьИмяРеквизитаРодителяОбъектаДоступа(Ссылка);
	Если МассивРодительскихЭлементов = Неопределено Тогда
		МассивРодительскихЭлементов = Новый Массив;
	КонецЕсли;
	
	Если НЕ СтруктурноеПодразделение И (НЕ ИмяРеквизитаРодителя = "Родитель" ИЛИ Ссылка.Метаданные().Иерархический) Тогда
		ПредыдущееЗначение = Ссылка;
		ТекущийРодитель = Ссылка[ИмяРеквизитаРодителя];
		Пока ЗначениеЗаполнено(ТекущийРодитель)
				И ТекущийРодитель <> ПредыдущееЗначение Цикл
			МассивРодительскихЭлементов.Добавить(ТекущийРодитель);
			ПредыдущееЗначение = ТекущийРодитель;
			ТекущийРодитель = ТекущийРодитель[ИмяРеквизитаРодителя];
		КонецЦикла; 
	КонецЕсли;
	
	Возврат МассивРодительскихЭлементов;
	
КонецФункции

Функция ПолучитьМассивДочернихЭлементов(Родитель, МассивЭлементов = Неопределено, ТолькоГруппы = Ложь, СтруктурноеПодразделение = Ложь) Экспорт
	
	Если МассивЭлементов = Неопределено Тогда
		МассивЭлементов = Новый Массив;
	КонецЕсли;
	
	ИмяРеквизитаРодителя = ПолучитьИмяРеквизитаРодителяОбъектаДоступа(Родитель, СтруктурноеПодразделение);
	
	МетаданныеРодителя = ?(СтруктурноеПодразделение, Метаданные.Справочники.ПодразделенияОрганизаций, Родитель.Метаданные());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	_Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + МетаданныеРодителя.Имя + " КАК _Таблица";
	
	Если ЗначениеЗаполнено(Родитель) Тогда
		Если ИмяРеквизитаРодителя = "Родитель" Тогда
			Если НЕ МетаданныеРодителя.Иерархический ИЛИ МетаданныеРодителя.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов и Не Родитель.ЭтоГруппа Тогда
				Возврат МассивЭлементов;
			КонецЕсли;
			
			Если СтруктурноеПодразделение Тогда
				Запрос.Текст = Запрос.Текст + " ГДЕ _Таблица.Владелец = &Родитель ";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|ГДЕ
				|	_Таблица.Ссылка В ИЕРАРХИИ (&Родитель)
				|	И _Таблица.Ссылка <> &Родитель";
			КонецЕсли;
				
			Если МетаданныеРодителя.Имя = "ПодразделенияОрганизаций" Тогда
				Запрос.Текст = Запрос.Текст + "
				|И _Таблица.Ссылка.ЯвляетсяСтруктурнымПодразделением = ИСТИНА";
			КонецЕсли;
			
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	_Таблица.Ссылка." + ИмяРеквизитаРодителя + " = &Родитель";
			Если МетаданныеРодителя.Имя = "ПодразделенияОрганизаций" Тогда
				Запрос.Текст = Запрос.Текст + "
				|И _Таблица.Ссылка.ЯвляетсяСтруктурнымПодразделением = ИСТИНА";
			КонецЕсли;
		КонецЕсли;
		Запрос.УстановитьПараметр("Родитель", Родитель);
	КонецЕсли;
	
	Если ТолькоГруппы Тогда
		Если ЗначениеЗаполнено(Родитель) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И _Таблица.Ссылка.ЭтоГруппа";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	_Таблица.Ссылка.ЭтоГруппа";
			Если МетаданныеРодителя.Имя = "ПодразделенияОрганизаций" Тогда
				Запрос.Текст = Запрос.Текст + "
				|И _Таблица.Ссылка.ЯвляетсяСтруктурнымПодразделением = ИСТИНА";
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	Если МетаданныеРодителя.Имя = "ПодразделенияОрганизаций" И НЕ ТолькоГруппы И НЕ ЗначениеЗаполнено(Родитель) Тогда
		Запрос.Текст = Запрос.Текст + "
		| ГДЕ
		|    _Таблица.Ссылка.ЯвляетсяСтруктурнымПодразделением = ИСТИНА";
	КонецЕсли;
	
	ДобавлятьРекурсивно = НЕ ИмяРеквизитаРодителя = "Родитель" И ЗначениеЗаполнено(Родитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> Родитель Тогда
			МассивЭлементов.Добавить(Выборка.Ссылка);
			
			Если ДобавлятьРекурсивно Тогда
				ПолучитьМассивДочернихЭлементов(Выборка.Ссылка, МассивЭлементов, ТолькоГруппы, СтруктурноеПодразделение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов;
	
КонецФункции // () 

Процедура ДополнитьНаборПравДоступаУнаследованнымиЗаписями(НаборЗаписейДоступаПользователей, ОбъектДоступа, Родитель) Экспорт
	
	ОбъектДоступаМетаданные = ОбъектДоступа.Метаданные();
	
	// Добавим записи, унаследованные от родителей
	Родители = Новый Массив;
	ТекущийРодитель = Родитель;
	Пока ЗначениеЗаполнено(ТекущийРодитель) Цикл
		Родители.Добавить(ТекущийРодитель);
		ТекущийРодитель = ТекущийРодитель.Родитель;
	КонецЦикла;
	Родители.Добавить(ТекущийРодитель);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
	|ГДЕ
	|	НастройкиПравДоступаПользователей.ОбъектДоступа В(&Родители)
	|	И НастройкиПравДоступаПользователей.ВидНаследованияПравДоступаИерархическихСправочников = &РаспространитьНаПодчиненных";
		
	Если НаборЗаписейДоступаПользователей.Отбор.ОбластьДанных.Использование Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И НастройкиПравДоступаПользователей.ОбластьДанных = &ОбластьДанных";
		Запрос.УстановитьПараметр("ОбластьДанных", НаборЗаписейДоступаПользователей.Отбор.ОбластьДанных.Значение);
	КонецЕсли;

	Если НаборЗаписейДоступаПользователей.Отбор.Пользователь.Использование Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И НастройкиПравДоступаПользователей.Пользователь = &Пользователь";
		Запрос.УстановитьПараметр("Пользователь", НаборЗаписейДоступаПользователей.Отбор.Пользователь.Значение);
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Родители", Родители);
	Запрос.УстановитьПараметр("РаспространитьНаПодчиненных", Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = НаборЗаписейДоступаПользователей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка,,"ОбъектДоступа, ВидНаследованияПравДоступаИерархическихСправочников");
		Запись.ОбъектДоступа = ОбъектДоступа;
		Запись.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя;
	КонецЦикла;
	
КонецПроцедуры // () 

Функция ПолучитьИмяРеквизитаРодителяОбъектаДоступа(Ссылка, СтруктурноеПодразделение = Ложь) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Организации") И НЕ СтруктурноеПодразделение Тогда
		Возврат "ГоловнаяОрганизация"
	Иначе
		Возврат "Родитель"
	КонецЕсли;
	
КонецФункции // () 

Процедура ДополнитьНаборПравДоступаНаследуемымиЗаписями(НаборПрав, ОбновляемыйОбъект = Неопределено) Экспорт
	
	ИсходнаяТаблица = ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(НаборПрав);
	Если ОбновляемыйОбъект <> Неопределено Тогда
		НаборПрав.Очистить();
	КонецЕсли;
	
	СоответствиеМассивовДочернихЭлементов     = Новый Соответствие;
	СоответствиеМассивовРодительскихЭлементов = Новый Соответствие;
	СоответствиеМассивовДочернихЭлементовСтруктурныеПодразделения = Новый Соответствие;
	
	Для Каждого СтрокаНабора Из ИсходнаяТаблица Цикл
		
		Если ТипЗнч(СтрокаНабора.ОбъектДоступа) = Тип("СправочникСсылка.Организации") И (СтрокаНабора.ВидОбъектаДоступа = Перечисления.ВидыОбъектовДоступа.СтруктурныеПодразделения) Тогда
			СтруктурноеПодразделение = Истина;
		Иначе
			СтруктурноеПодразделение = Ложь;
		КонецЕсли;

		Если СтрокаНабора.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных Тогда
			
			Если ТипЗнч(СтрокаНабора.ОбъектДоступа) = Тип("СправочникСсылка.Организации") И (СтрокаНабора.ВидОбъектаДоступа = Перечисления.ВидыОбъектовДоступа.СтруктурныеПодразделения) Тогда
				МассивЭлементов = СоответствиеМассивовДочернихЭлементовСтруктурныеПодразделения[СтрокаНабора.ОбъектДоступа];
			Иначе
				МассивЭлементов = СоответствиеМассивовДочернихЭлементов[СтрокаНабора.ОбъектДоступа];
			КонецЕсли;
			
			Если МассивЭлементов = Неопределено Тогда
				Если ОбновляемыйОбъект = Неопределено Тогда
					МассивЭлементов = ПолучитьМассивДочернихЭлементов(СтрокаНабора.ОбъектДоступа, , ЗаполнениеДочернихТолькоГруппами(СтрокаНабора.ОбластьДанных), СтруктурноеПодразделение);
				Иначе
					МассивЭлементов = ПолучитьМассивДочернихЭлементов(ОбновляемыйОбъект, , ЗаполнениеДочернихТолькоГруппами(СтрокаНабора.ОбластьДанных), СтруктурноеПодразделение);
					МассивЭлементов.Добавить(ОбновляемыйОбъект);
				КонецЕсли;
				
				Если СтруктурноеПодразделение Тогда
					СоответствиеМассивовДочернихЭлементовСтруктурныеПодразделения.Вставить(СтрокаНабора.ОбъектДоступа,МассивЭлементов);
				Иначе
					СоответствиеМассивовДочернихЭлементов.Вставить(СтрокаНабора.ОбъектДоступа,МассивЭлементов);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого Ссылка Из МассивЭлементов Цикл
				Запись = НаборПрав.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаНабора,,"ОбъектДоступа,ВидНаследованияПравДоступаИерархическихСправочников");
				Запись.ОбъектДоступа = Ссылка;
				Запись.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПолучитьИмяРеквизитаРодителяОбъектаДоступа(СтрокаНабора.ОбъектДоступа, СтруктурноеПодразделение) = "Родитель" И ОбновляемыйОбъект = Неопределено Тогда
			//Дополним набор записями для родительских элементов
			МассивЭлементов = СоответствиеМассивовРодительскихЭлементов[СтрокаНабора.ОбъектДоступа];
			Если МассивЭлементов = Неопределено Тогда
				МассивЭлементов = ПолучитьМассивРодительскихЭлементов(СтрокаНабора.ОбъектДоступа, , СтруктурноеПодразделение);
				СоответствиеМассивовРодительскихЭлементов.Вставить(СтрокаНабора.ОбъектДоступа, МассивЭлементов);
			КонецЕсли;
				
			Для каждого Ссылка Из МассивЭлементов Цикл
				
				Запись = НаборПрав.Добавить();
				
				Запись.ВладелецПравДоступа 	= СтрокаНабора.ВладелецПравДоступа;
				Запись.ОбластьДанных       	= СтрокаНабора.ОбластьДанных;
				Запись.ОбъектДоступа       	= Ссылка;
				Запись.Пользователь 		= СтрокаНабора.Пользователь;
				Запись.ВидОбъектаДоступа 	= СтрокаНабора.ВидОбъектаДоступа;
				Запись.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.УнаследованоОтДочернего;
				
			КонецЦикла;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // () 

Функция ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(НаборЗаписейДоступаПользователей) Экспорт
	
	ТаблицаПравДоступа = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей().Выгрузить();
	
	Для Каждого СтрокаТаблицыНабора Из НаборЗаписейДоступаПользователей Цикл
		
		Если (СтрокаТаблицыНабора.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава 
			ИЛИ СтрокаТаблицыНабора.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных)
			И НЕ СтрокаТаблицыНабора.НаследованаОтВсеПользователи Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаПравДоступа.Добавить(), СтрокаТаблицыНабора);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПравДоступа; 
	
КонецФункции

Процедура ПередЗаписьюНовогоОбъектаСПравамиДоступаПользователей(ЭтотОбъект, Отказ, Родитель, СсылкаНового = Неопределено) Экспорт

	Если ЭтотОбъект.ЭтоНовый() Тогда
		
		СсылкаНового = ЭтотОбъект.ПолучитьСсылкуНового();
		Если НЕ ЗначениеЗаполнено(СсылкаНового) Тогда
			СсылкаНового = Справочники[ЭтотОбъект.Метаданные().Имя].ПолучитьСсылку();
		КонецЕсли;
		
		ПолныеПрава.ЗарегистрироватьПраваДоступаПользователяКОбъекту(СсылкаНового, Родитель, Отказ);

		Если НЕ Отказ И НЕ ЗначениеЗаполнено(ЭтотОбъект.ПолучитьСсылкуНового()) Тогда
			ЭтотОбъект.УстановитьСсылкуНового(СсылкаНового);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьНаборПравДоступаГруппамиПользователей(НаборПрав) Экспорт
	
	РезультатЗапросаВсеГруппы = ПолучитьРезультатЗапросаКоВсемГруппамПользователей();
	Если РезультатЗапросаВсеГруппы.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаВсеГруппы = РезультатЗапросаВсеГруппы.Выбрать();
	ИсходноеКолвоЗаписейВНаборе = НаборПрав.Количество();
	
	Для индекс = 0 по ИсходноеКолвоЗаписейВНаборе - 1 Цикл		
		СтрокаНабора = НаборПрав[индекс];
		Если Не ЗначениеЗаполнено(СтрокаНабора.Пользователь) Тогда //И ЗначениеЗаполнено(СтрокаНабора.ОбъектДоступа) Тогда
			ВыборкаВсеГруппы.Сбросить();
			Пока ВыборкаВсеГруппы.Следующий() Цикл
				Запись = НаборПрав.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаНабора,,"Пользователь");
				Запись.Пользователь = ВыборкаВсеГруппы.Ссылка;
				Запись.НаследованаОтВсеПользователи = Истина;
			КонецЦикла;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьРезультатЗапросаКоВсемГруппамПользователей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыПользователей.Ссылка
	|ИЗ
	|	Справочник.ГруппыПользователей КАК ГруппыПользователей
	|ГДЕ
	|	ГруппыПользователей.Ссылка <> ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ОбновитьПраваДоступаКИерархическимОбъектамПриНеобходимости(Ссылка, ПрошлыйИзмененныйРодительОбъектаДоступа, Отказ) Экспорт
	
	//В объекте не был изменен родитель. Обновлять права доступа нет необходимости
	Если ПрошлыйИзмененныйРодительОбъектаДоступа = Неопределено ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбновляемыеОбъекты = Новый Массив;
	ОбновляемыеОбъекты.Добавить(Ссылка);
	
	ПолучитьМассивРодительскихЭлементов(Ссылка, ОбновляемыеОбъекты);
	
	
	Если ЗначениеЗаполнено(ПрошлыйИзмененныйРодительОбъектаДоступа) Тогда
		ПолныеПрава.ОбновитьПраваДоступаКПрошлымРодителям(Ссылка, ПрошлыйИзмененныйРодительОбъектаДоступа, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ШапкаОшибки = "Права " + Ссылка + " не записан!";
		
	ОбновляемыеОбъекты = ПолныеПрава.ПолучитьСписокОбновляемыхОбъектовПриПереносеВГруппу(Ссылка, ОбновляемыеОбъекты);
	
	Для Каждого ОбновляемыйОбъект Из ОбновляемыеОбъекты Цикл
		
		Отказ = НЕ ПолныеПрава.ОбновитьПраваДоступаПользователейПоВладельцуДоступа(ОбновляемыйОбъект, ?(ОбновляемыйОбъект = Ссылка ИЛИ ОбновляемыйОбъект.ПринадлежитЭлементу(Ссылка), Неопределено, Ссылка));
		
		Если Отказ Тогда
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки()+Символы.ПС+ " .Не записаны права доступа к объекту: " + Ссылка);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	#Если Клиент Тогда
		Оповестить("ЗаписаныПраваДоступаПользователейКОбъекту");
	#КонецЕсли

КонецПроцедуры // () 

Процедура ЗаписатьПраваДоступаПользователейКОбъекту(НаборЗаписейДоступаПользователей, Ссылка, Отказ, ПрошлыйИзмененныйРодительОбъектаДоступа = Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоПользователю = ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей");
		
	Если ОтборПоПользователю Тогда
		НаборЗаписейДоступаПользователей.Отбор.Пользователь.Установить(Ссылка);
	Иначе
		НаборЗаписейДоступаПользователей.Отбор.ОбъектДоступа.Установить(Ссылка);
	КонецЕсли;
	
	ТаблицаПравДоступа = ПолучитьТаблицуПравДоступаБезУнаследуемыхЗаписей(НаборЗаписейДоступаПользователей);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПравДоступа Цикл
		Если ОтборПоПользователю Тогда
			СтрокаТаблицы.Пользователь  = Ссылка; 
		Иначе
			СтрокаТаблицы.ОбъектДоступа = Ссылка;
		КонецЕсли;
		СтрокаТаблицы.ВладелецПравДоступа = СтрокаТаблицы.ОбъектДоступа;
	КонецЦикла;
	
	СтруктураОтбора = ПолучитьСтруктуруОтборовНабораЗаписей(НаборЗаписейДоступаПользователей);
	
	ПолныеПрава.ЗаписатьПраваДоступаПользователей(ТаблицаПравДоступа, СтруктураОтбора, Отказ, "Не записаны права доступа к объекту """+ Ссылка + """!");
	
	Если НЕ Отказ Тогда
		ПрочитатьПраваДоступаКОбъекту(НаборЗаписейДоступаПользователей, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАНИЯ МЕХАНИЗМА ДАТЫ ЗАПРЕТА РЕДАКТИРОВАНИЯ
// И МЕХАНИЗМА ЗАПРЕТА РЕДАКТИРОВАНИЯ ЧУЖИХ ДОКУМЕНТОВ

Функция РазрешеноРедактированиеДокументовПользователя(ПользовательДокумента)
	Если ПользовательДокумента = ПараметрыСеанса.ТекущийПользователь Тогда
		Возврат Истина;
	КонецЕсли;
	РазрешеноРедактирование = Ложь;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПраваДоступаКДокументамДругихПользователей.ОбъектДоступа КАК ОбъектДоступа
	|ИЗ
	|	РегистрСведений.ПраваДоступаКДокументамДругихПользователей КАК ПраваДоступаКДокументамДругихПользователей
	|ГДЕ
	|	ПраваДоступаКДокументамДругихПользователей.Пользователь = &Пользователь";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ВыборкаРезультатов = Результат.Выбрать();
		Пока ВыборкаРезультатов.Следующий() Цикл
			ОбъектДоступа = ВыборкаРезультатов.ОбъектДоступа;
			Если ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.Пользователи") Тогда
				Если ОбъектДоступа = ПользовательДокумента Тогда
					РазрешеноРедактирование = Истина;
					Прервать;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				Если ОбъектДоступа = Справочники.ГруппыПользователей.ВсеПользователи Тогда
					РазрешеноРедактирование = Истина;
					Прервать;
				Иначе
					Если ОбъектДоступа.ПользователиГруппы.Найти(ПользовательДокумента, "Пользователь") <> Неопределено Тогда
						РазрешеноРедактирование = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат РазрешеноРедактирование;
КонецФункции

// Процедура выполняет проверку возможности записи документов
// с учетом автора документа (ответственного)
//
Процедура ПроверкаРазрешенияРедактированияЧужихДокументов(Источник, ЗапрещеноРедактироватьДокумент, АвторДокументаТекст) Экспорт
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат;
	КонецЕсли;
	
	Если (РольДоступна("ЗакупСельскохозяйственнойПродукции") или РольДоступна("ПолныеПрава")) и (ТипЗнч(Источник) = тип("ДокументОбъект.цс_ЗаявкаНаФинасирование") ИЛИ ТипЗнч(Источник) = тип("ДокументОбъект.ЗаявкаНаПрямойЗакупЗерна")) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Метаданные().Реквизиты.Найти("Автор") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// - усд - разрешения, предоставленные маршрутами
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИспользоватьПодсистемуЭлектронногоДокументооборота") И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_РазрешитьРедактированиеСогласуемыхДокументовДругихПользователей") Тогда
		Если Источник.ДополнительныеСвойства.Свойство("ОперацияСогласования") Тогда
			Возврат;
		КонецЕсли;
		Если РольДоступна("усд_УправлениеСогласованиемИУтверждениемДокументов") ИЛИ РольДоступна("усд_УчастникПроцессаСогласованияИУтвержденияДокументов") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			| усд_АктивныеЭтапыРассмотренияДокументовСрезПоследних.Этап,
			| усд_АктивныеЭтапыРассмотренияДокументовСрезПоследних.Маршрут,
			| усд_АктивныеЭтапыРассмотренияДокументовСрезПоследних.ВидДокументов,
			| усд_АктивныеЭтапыРассмотренияДокументовСрезПоследних.ОтветственноеЛицо
			|ИЗ
			| РегистрСведений.усд_АктивныеЭтапыРассмотренияДокументов.СрезПоследних(, Документ = &Документ) КАК усд_АктивныеЭтапыРассмотренияДокументовСрезПоследних
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			| усд_АктивныеЭтапыРассмотренияДокументовСрезПоследних.Этап,
			| усд_АктивныеЭтапыРассмотренияДокументовСрезПоследних.Маршрут,
			| усд_АктивныеЭтапыРассмотренияДокументовСрезПоследних.ВидДокументов,
			| усд_АктивныеЭтапыРассмотренияДокументовСрезПоследних.ОтветственноеЛицо
			|ИЗ
			| РегистрСведений.усд_ДвижениеДокументовПоМаршрутам.СрезПоследних(, Документ = &Документ) КАК усд_АктивныеЭтапыРассмотренияДокументовСрезПоследних";
			Запрос.УстановитьПараметр("Документ", Источник.Ссылка);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				Если Выборка.ОтветственноеЛицо=фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("глТекущийПользователь") ИЛИ усд_ПроцедурыСогласованияДокументов.ПользовательВходитВГруппуОтветственности(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("глТекущийПользователь"),Выборка.Этап,Выборка.Маршрут,Выборка.ВидДокументов,Источник.Ссылка) Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// - усд – конец
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	" + Источник.Метаданные().Имя + ".Автор КАК Пользователь
	|ИЗ
	|	Документ." + Источник.Метаданные().Имя + " КАК " + Источник.Метаданные().Имя + "
	|ГДЕ
	|	" + Источник.Метаданные().Имя + ".Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ВыборкаРезультатов = Результат.Выбрать();
		ВыборкаРезультатов.Следующий();
		ПользовательДокумента = ВыборкаРезультатов.Пользователь;
		АвторДокументаТекст = СокрЛП(ПользовательДокумента);
		Если Не ПользовательДокумента.Пустая() Тогда
			Если Не РазрешеноРедактированиеДокументовПользователя(ПользовательДокумента) Тогда 
				ЗапрещеноРедактироватьДокумент = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура выполняет проверку возможности записи документов
// с учетом даты запрета изменения данных (даты запрета редактирования)
//
Процедура ПроверкаПериодаДокумента(ДокументОбъект, Отказ, РежимЗаписи=Неопределено) Экспорт
	
	СоответствиеГраницЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
	
	// Для пользователя с полными правами проверок выполнять не нужно
	Если СоответствиеГраницЗапрета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();		
	
	// Если для документа проведение запрещено, проверка на дату запрета редактирования
	//проверяется без учета проведенности
	ПроверятьПроведениеДокумента = (МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить);
	
	Если ПроверятьПроведениеДокумента и Не ДокументОбъект.Проведен Тогда
		Если Не РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	ЕстьОрганизация = (МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено);
	
	
	Если ЕстьОрганизация Тогда	
		ГраницаПоОрганизации = СоответствиеГраницЗапрета[ДокументОбъект.Организация];
		Если (ГраницаПоОрганизации = Неопределено) Или
			 (ГраницаПоОрганизации = Дата (01,01,01,23,59,59)) Тогда
            ГраницаПоОрганизации = СоответствиеГраницЗапрета[Справочники.Организации.ПустаяСсылка()];    
        КонецЕсли;
		Если ГраницаПоОрганизации <> Неопределено 
			И ГраницаПоОрганизации <> Null
			И ДокументОбъект.Дата <= ГраницаПоОрганизации Тогда
			
			Отказ = Истина;			
		КонецЕсли;		
	Иначе
		ГраницаПериода = СоответствиеГраницЗапрета[Справочники.Организации.ПустаяСсылка()];
		Если ГраницаПериода <> Неопределено
			И ГраницаПоОрганизации <> Null Тогда
			
			ЕСли ДокументОбъект.Дата <= ГраницаПериода Тогда
				Отказ = Истина;				
			КонецЕсли;         			
		КонецЕсли;
	КонецЕсли;		

КонецПроцедуры // ПроверкаПериодаДокумента

// Процедура выполняет проверку возможности записи регистров сведений и регистров накопления
// с учетом даты запрета изменения данных (даты запрета редактирования)
//
Процедура ПроверкаПериодаЗаписейРегистров(НаборЗаписей, Отказ, ВидРегистра = "РегистрНакопления")
	
	//цс
	Если РольДоступна("ПолныеПрава") тогда
		Возврат;
	КонецЕсли;
	//Конеццс

	СоответствиеГраницЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
	
	// Для пользователя с полными правами проверок выполнять не нужно
	Если СоответствиеГраницЗапрета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеНабора = НаборЗаписей.Метаданные();		
	ЕстьОрганизация = (МетаданныеНабора.Измерения.Найти("Организация")<>Неопределено);
	
	
	// Проверку сущестствующих записей выолняем только для регистров сведений, подчиненных регистратору,
	// регистрам накопления и регистрам бухгалтерии.
	// Проверка необходима, так как удаление записей прошлого периода (в результате перезаписи набора)
	// тоже допускать нельзя.
	
	Если ВидРегистра = "РегистрСведений" Тогда
		ПроверятьСуществующиеЗаписиПоРегистратору = (МетаданныеНабора.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору);
	Иначе
		// Регистр накопления
		ПроверятьСуществующиеЗаписиПоРегистратору = Истина;
	КонецЕсли;	

	// В регистре расчета проверяется системное поле ПериодРасчета
	// в остальных регистрах проверяется поле "Период"
	
	ПолеПериод = "Период";
	Если ВидРегистра = "РегистрРасчета" Тогда
		ПолеПериод = "ПериодРегистрации";	
	КонецЕсли;	
		
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СоответствиеГраницЗапрета", 	СоответствиеГраницЗапрета);
	СтруктураПараметров.Вставить("МетаданныеНабора", 			МетаданныеНабора);
	СтруктураПараметров.Вставить("ЕстьОрганизация", 			ЕстьОрганизация);
	СтруктураПараметров.Вставить("ПолеПериод", 					ПолеПериод);
			
	Если ПроверятьСуществующиеЗаписиПоРегистратору Тогда
		ПроверкаСуществующихЗаписейРегистра(НаборЗаписей, СтруктураПараметров, Отказ);
	Иначе
		ПроверкаСуществующихЗаписейРегистраСведений(НаборЗаписей, СтруктураПараметров, Отказ)
	КонецЕсли;
				  		
	Если НаборЗаписей.Количество() > 0 И НЕ Отказ Тогда				
		Отказ = Ложь;
		Если ЕстьОрганизация Тогда
			Для Каждого Запись ИЗ НаборЗаписей Цикл
				ГраницаПоОрганизации = СоответствиеГраницЗапрета[Запись.Организация];
				Если ГраницаПоОрганизации = Неопределено Тогда
					ГраницаПериода = СоответствиеГраницЗапрета[Справочники.Организации.ПустаяСсылка()];
				КонецЕсли;
				Если ГраницаПоОрганизации <> Неопределено
					 И ГраницаПоОрганизации <> Null
					 И Запись[ПолеПериод] <= ГраницаПоОрганизации Тогда
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ГраницаПериода = СоответствиеГраницЗапрета[Справочники.Организации.ПустаяСсылка()];
			Если ГраницаПериода <> Неопределено 
				 И ГраницаПоОрганизации <> Null Тогда
				Для Каждого Запись ИЗ НаборЗаписей Цикл
					ЕСли Запись[ПолеПериод] <= ГраницаПериода Тогда
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры // ПроверкаПериодаЗаписейРегистров

Процедура ПроверкаСуществующихЗаписейРегистра(НаборЗаписей, СтруктураПараметров, Отказ)
	
	Перем ИмяПоляПериода;

	ИмяРегистра = СтруктураПараметров.МетаданныеНабора.ПолноеИмя();
	
	СтруктураПараметров.Свойство("ПолеПериод", 	ИмяПоляПериода);
	
	Запрос = Новый Запрос;
	ВложенныйЗапрос = "";
	ЕСли СтруктураПараметров.ЕстьОрганизация Тогда
		индекс = 1;
		ИмяПоляОрганизации = "Организация";
		Для Каждого КлючИЗначение ИЗ СтруктураПараметров.СоответствиеГраницЗапрета Цикл
			ВложенныйЗапрос = ВложенныйЗапрос + ?(ВложенныйЗапрос = "", "", "
			|ОБЪЕДИНИТЬ") +"
			|ВЫБРАТЬ &Организация"+индекс+" КАК Организация, &ДатаЗапрета" + Формат(индекс, "ЧГ=0") + " КАК ДатаЗапрета";
			Запрос.УстановитьПараметр("Организация"+индекс, КлючИЗначение.Ключ);
			ГраницаПериода = КлючИЗначение.Значение;
			Запрос.УстановитьПараметр("ДатаЗапрета"+индекс, ?(ГраницаПериода=Неопределено, Null, ГраницаПериода));
			индекс = индекс + 1;
		КонецЦикла;
	Иначе
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		ИмяПоляОрганизации = "&ПустаяОрганизация";
		ВложенныйЗапрос = "ВЫБРАТЬ &ПустаяОрганизация КАК Организация, &ДатаЗапрета КАК ДатаЗапрета";
		Запрос.УстановитьПараметр("ПустаяОрганизация", ПустаяОрганизация);
		ГраницаПериода = СтруктураПараметров.СоответствиеГраницЗапрета[ПустаяОрганизация];
		Запрос.УстановитьПараметр("ДатаЗапрета", ?(ГраницаПериода=Неопределено, Null, ГраницаПериода));			
	КонецЕсли;			
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ НаборЗаписей.Организация, НаборЗаписей.Период, ДатыЗапрета.Организация, ДатыЗапрета.ДатаЗапрета
	|ИЗ
	|(
	|ВЫБРАТЬ " + ИмяПоляОрганизации + " КАК Организация, МИНИМУМ(" + ИмяПоляПериода + ") КАК Период  ИЗ " + ИмяРегистра + " КАК Набор
	|ГДЕ Регистратор = &Регистратор
	|СГРУППИРОВАТЬ ПО " + ИмяПоляОрганизации + "
	|) КАК НаборЗаписей
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(" + ВложенныйЗапрос + "		
	|) КАК ДатыЗапрета
	|ПО НаборЗаписей.Организация = ДатыЗапрета.Организация
	|ГДЕ НаборЗаписей.Период <= ДатыЗапрета.ДатаЗапрета ИЛИ ДатыЗапрета.ДатаЗапрета ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);				
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Отказ = Истина;
	Иначе
		Отказ = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаСуществующихЗаписейРегистраСведений(НаборЗаписей, СтруктураПараметров, Отказ)
	
	ИмяРегистра = СтруктураПараметров.МетаданныеНабора.ПолноеИмя();
	
	// Формируем текст условия блока ГДЕ основного запроса,
	// в соответствии с установленным отбором для набора записей
	
	Запрос = Новый Запрос;
	   
	СписокПолейУсловияОтбораТекст = "";
	Итерация = 0;
	Для каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл                
		Если не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;                
		
		Если НЕ Итерация = 0  Тогда            
			СписокПолейУсловияОтбораТекст = СписокПолейУсловияОтбораТекст  + " И ";
		КонецЕсли;        
		
		СписокПолейУсловияОтбораТекст = СписокПолейУсловияОтбораТекст +" Набор." + ЭлементОтбора.Имя + " = &" + ЭлементОтбора.Имя;                       
		Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);        
		
		Итерация = 1;
	КонецЦикла; 
	
	Если Итерация = 1 Тогда
		СписокПолейУсловияОтбораТекст = " ГДЕ " + СписокПолейУсловияОтбораТекст;    	            
	КонецЕсли;                   
	
	ВложенныйЗапрос = "";
	Если СтруктураПараметров.ЕстьОрганизация Тогда
		индекс = 1;
		ИмяПоляОрганизации = "Организация";
		Для Каждого КлючИЗначение ИЗ СтруктураПараметров.СоответствиеГраницЗапрета Цикл
			ВложенныйЗапрос = ВложенныйЗапрос + ?(ВложенныйЗапрос = "", "", "
			|ОБЪЕДИНИТЬ") +"
			|ВЫБРАТЬ &Организация"+индекс+" КАК Организация, &ДатаЗапрета" + Формат(индекс, "ЧГ=0") + " КАК ДатаЗапрета";
			Запрос.УстановитьПараметр("Организация"+индекс, КлючИЗначение.Ключ);
			ГраницаПериода = КлючИЗначение.Значение;
			Запрос.УстановитьПараметр("ДатаЗапрета"+индекс, ?(ГраницаПериода=Неопределено, Null, ГраницаПериода));
			индекс = индекс + 1;
		КонецЦикла;
	Иначе
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		ИмяПоляОрганизации = "&ПустаяОрганизация";
		ВложенныйЗапрос = "ВЫБРАТЬ &ПустаяОрганизация КАК Организация, &ДатаЗапрета КАК ДатаЗапрета";
		Запрос.УстановитьПараметр("ПустаяОрганизация", ПустаяОрганизация);
		ГраницаПериода = СтруктураПараметров.СоответствиеГраницЗапрета[ПустаяОрганизация];
		Запрос.УстановитьПараметр("ДатаЗапрета", ?(ГраницаПериода=Неопределено, Null, ГраницаПериода));			
	КонецЕсли;			    
	
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ НаборЗаписей.Организация, НаборЗаписей.Период,ДатыЗапрета.Организация, ДатыЗапрета.ДатаЗапрета
	|ИЗ
	|(
	|ВЫБРАТЬ " + ИмяПоляОрганизации + " КАК Организация, МИНИМУМ(Период) КАК Период  ИЗ " + ИмяРегистра + " КАК Набор
	| "+ СписокПолейУсловияОтбораТекст + "
	|СГРУППИРОВАТЬ ПО " + ИмяПоляОрганизации + "
	|) КАК НаборЗаписей
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(" + ВложенныйЗапрос + "		
	|) КАК ДатыЗапрета
	|ПО НаборЗаписей.Организация = ДатыЗапрета.Организация
	|ГДЕ НаборЗаписей.Период <= ДатыЗапрета.ДатаЗапрета ИЛИ ДатыЗапрета.ДатаЗапрета ЕСТЬ NULL";
	
	  
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Отказ = Истина;
	Иначе
		Отказ = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает первую доступную для изменений дату
//
Функция ПолучитьПервуюДатуДоступногоПериода(Организация = Неопределено) Экспорт

	СоответствиеГраницЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
	
	// Для пользователя с полными правами проверок выполнять не нужно
	Если СоответствиеГраницЗапрета = Неопределено Тогда
		Возврат '00010101';
	КонецЕсли;

	ГраницаПериода = Неопределено;	
	Если Организация <> Неопределено Тогда
		ГраницаПериода = СоответствиеГраницЗапрета[Организация];
	КонецЕсли;
	
	Если ГраницаПериода = Неопределено Тогда
		ГраницаПериода = СоответствиеГраницЗапрета[Справочники.Организации.ПустаяСсылка()];
	КонецЕсли;
	
	Если ГраницаПериода <> Неопределено Тогда
		Если НачалоДня(ГраницаПериода) = '00010101' Тогда
			Возврат '00010101';
		Иначе
			Возврат КонецДня(ГраницаПериода) + 1;
		КонецЕсли;
	Иначе
		Возврат '00010101';
	КонецЕсли;
	
КонецФункции // ПолучитьПервуюДатуДоступногоПериода()
    
Функция ПолучитьОбъектыДоступаДокумента(ИмяДокумента) Экспорт
	
	Результат = Новый Соответствие;
	
	Если ИмяДокумента = "ВводНачальныхОстатковПоЗарплате" Тогда
		Результат.Вставить("ЗарплатаИНалоги.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ВзносыИОтчисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ОПВПодлежитПеречислению.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций" Тогда
		Результат.Вставить("Удержания.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций" Тогда
		Результат.Вставить("ОсновныеНачисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
 		Результат.Вставить("ДополнительныеНачисления.ФизЛицо", 		  Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ВозвратЗарплатыРаботниковОрганизаций" Тогда
		Результат.Вставить("Зарплата.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ВозвратТоваровОтПокупателя" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);

	ИначеЕсли ИмяДокумента = "ВозвратТоваровПоставщику" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);

	ИначеЕсли ИмяДокумента = "ЗарплатаКВыплатеОрганизаций" Тогда
		Результат.Вставить("Зарплата.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ИнвентаризацияТоваровНаСкладе" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);

	ИначеЕсли ИмяДокумента = "ИсполнительныйЛист" Тогда
		Результат.Вставить("Физлицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "КадровоеПеремещениеОрганизаций" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "КомандировкиОрганизаций" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "КомплектацияНоменклатуры" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);
	
	ИначеЕсли ИмяДокумента = "НачислениеЗарплатыРаботникамОрганизаций" Тогда
		Результат.Вставить("Начисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
 		Результат.Вставить("ДополнительныеНачисления.Физлицо", 		  Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ОПВВозвратВзносов" Тогда
		Результат.Вставить("ПенсионныеВзносы.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ОПВПеречислениеВФонды" Тогда
		Результат.Вставить("ПенсионныеВзносы.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "ОприходованиеТоваров" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);

	ИначеЕсли ИмяДокумента = "ОтражениеЗарплатыВРеглУчете" Тогда
		Результат.Вставить("ОтражениеВУчете.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ОтчетПроизводстваЗаСмену" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);

	ИначеЕсли ИмяДокумента = "ПередачаТоваров" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);

	ИначеЕсли ИмяДокумента = "ПеремещениеТоваров" Тогда
		Результат.Вставить("СкладПолучатель", Перечисления.ВидыОбъектовДоступа.Склады);
		Результат.Вставить("СкладОтправитель", Перечисления.ВидыОбъектовДоступа.Склады);

	ИначеЕсли ИмяДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		Результат.Вставить("ПеречислениеЗаработнойПлаты.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("СтруктурноеПодразделениеОтправитель", Перечисления.ВидыОбъектовДоступа.СтруктурныеПодразделения);
		Результат.Вставить("СтруктурноеПодразделениеПолучатель",  Перечисления.ВидыОбъектовДоступа.СтруктурныеПодразделения);

	ИначеЕсли ИмяДокумента = "ПоступлениеИзПереработки" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);

	ИначеЕсли ИмяДокумента = "ПоступлениеТоваровУслуг" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);

	ИначеЕсли ИмяДокумента = "ПриемНаРаботуВОрганизацию" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ПриходныйКассовыйОрдер" Тогда
		Результат.Вставить("Касса", Перечисления.ВидыОбъектовДоступа.Кассы);
        Результат.Вставить("СтруктурноеПодразделениеОтправитель", Перечисления.ВидыОбъектовДоступа.СтруктурныеПодразделения);
		Результат.Вставить("СтруктурноеПодразделениеПолучатель",  Перечисления.ВидыОбъектовДоступа.СтруктурныеПодразделения);
		
// ЗУП:	Результат.Вставить("Контрагент", 							  Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "РасходныйКассовыйОрдер" Тогда
        Результат.Вставить("Касса", Перечисления.ВидыОбъектовДоступа.Кассы);
		Результат.Вставить("СтруктурноеПодразделениеОтправитель", Перечисления.ВидыОбъектовДоступа.СтруктурныеПодразделения);
		Результат.Вставить("СтруктурноеПодразделениеПолучатель",  Перечисления.ВидыОбъектовДоступа.СтруктурныеПодразделения);
	
// ЗУП:	Результат.Вставить("Контрагент",Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ИнвентаризацияДенежныхСредств" Тогда
        Результат.Вставить("Касса", Перечисления.ВидыОбъектовДоступа.Кассы);
			
	ИначеЕсли ИмяДокумента = "РасчетНалоговПриПоступленииАктивовУслуг" Тогда
		//Результат.Вставить("ИсчисленныйИПН.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ИсчисленныйСН.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "РасчетПениОПВиСО" Тогда
		Результат.Вставить("ИсчислениеПени.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "РасчетСНиСО" Тогда
		Результат.Вставить("ИсчисленныйСН.Физлицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ИсчисленныеСО.Физлицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ИсчисленныйОППВ.ФизЛицо", 				  Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "РасчетУдержанийРаботниковОрганизаций" Тогда
		Результат.Вставить("ИсчисленныйИПН.Физлицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ИсчисленныйОПВ.Физлицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
        Результат.Вставить("Удержания.Физлицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ПогашениеЗаймов.ФизЛицо", 				  Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("НалоговыеВычеты.Физлицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "РеализацияТоваровУслуг" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);

	ИначеЕсли ИмяДокумента = "РегистрацияПрочихДоходовВЦеляхНалогообложения" Тогда
		Результат.Вставить("СведенияОДоходах.ФизЛицо", 			  	  Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "РегистрацияРазовыхУдержанийРаботниковОрганизаций" Тогда
		Результат.Вставить("Удержания.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "СОВозвратОтчислений" Тогда
		Результат.Вставить("СоциальныеОтчисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "СОПеречислениеВФонды" Тогда
		Результат.Вставить("СоциальныеОтчисления.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "СписаниеОС" Тогда
		Результат.Вставить("Товары.Склад", Перечисления.ВидыОбъектовДоступа.Склады);	

	ИначеЕсли ИмяДокумента = "СписаниеТоваров" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);	

	ИначеЕсли ИмяДокумента = "СчетНаОплатуПокупателю" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);

	ИначеЕсли ИмяДокумента = "ТребованиеНакладная" Тогда
		Результат.Вставить("Склад", Перечисления.ВидыОбъектовДоступа.Склады);
	    
	ИначеЕсли ИмяДокумента = "УвольнениеИзОрганизаций" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);

	ИначеЕсли ИмяДокумента = "УдержаниеИПНиОПВНУ" Тогда
		Результат.Вставить("УдержанныйИПН.Физлицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);		
		Результат.Вставить("УдержанныйОПВ.Физлицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);		
		
	ИначеЕсли ИмяДокумента = "АвизоПрочее" Тогда
		Результат.Вставить("СтруктурноеПодразделениеОтправитель", Перечисления.ВидыОбъектовДоступа.СтруктурныеПодразделения);
		Результат.Вставить("СтруктурноеПодразделениеПолучатель",  Перечисления.ВидыОбъектовДоступа.СтруктурныеПодразделения);
		
	ИначеЕсли ИмяДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		Результат.Вставить("СтруктурноеПодразделениеОтправитель", Перечисления.ВидыОбъектовДоступа.СтруктурныеПодразделения);
		Результат.Вставить("СтруктурноеПодразделениеПолучатель",  Перечисления.ВидыОбъектовДоступа.СтруктурныеПодразделения);
		
	ИначеЕсли ИмяДокумента = "АттестацияРаботника" Тогда
		Результат.Вставить("Физлицо", 								Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ВводКоэффициентовИндексацииЗаработка" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ВводНачальныхОстатковПоЗарплате" Тогда
		Результат.Вставить("ЗарплатаИНалоги.ФизЛицо", 				Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ВзносыИОтчисления.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ОПВПодлежитПеречислению.ФизЛицо", 		Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций" Тогда
		Результат.Вставить("ОсновныеНачисления.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ДополнительныеНачисления.ФизЛицо", 		Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ВводСведенийОПлановыхНачисленияхУдержанияхРаботников" Тогда
		Результат.Вставить("Начисления.Физлицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("Удержания.Физлицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций" Тогда
		Результат.Вставить("Удержания.ФизЛицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций" Тогда
		Результат.Вставить("ОсновныеНачисления.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ДополнительныеНачисления.ФизЛицо", 		Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ВозвратЗарплатыРаботниковОрганизаций" Тогда
		Результат.Вставить("Зарплата.ФизЛицо", 						Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ВозвратНаРаботу" Тогда
		Результат.Вставить("Работники.ФизЛицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ВозвратНаРаботуОрганизаций" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ГрафикОтпусковОрганизаций" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ДоговорЗаймаСРаботником" Тогда
		Результат.Вставить("ФизЛицо", 								Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ДоговорНаВыполнениеРаботСФизЛицом" Тогда
		Результат.Вставить("ФизЛицо", 								Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ЗарплатаКВыплате" Тогда
		Результат.Вставить("Зарплата.Физлицо", 						Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ЗарплатаКВыплатеОрганизаций" Тогда
		Результат.Вставить("Зарплата.Физлицо", 						Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ЗаявкаНаОбучение" Тогда
		Результат.Вставить("ОбучающиесяРаботники.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ИПНЗаявлениеНаПредоставлениеВычета" Тогда
		Результат.Вставить("ФизЛицо", 								Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ИсполнительныйЛист" Тогда
		Результат.Вставить("Физлицо", 								Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "КадровоеПеремещение" Тогда
		Результат.Вставить("Работники.ФизЛицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "КадровоеПеремещениеОрганизаций" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "КомандировкиОрганизаций" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "КомпенсацияЗаНеиспользованныеОтпускаРаботникамОрганизаций" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "УдалитьКорректировкаИспользованияРаботникамиРабочегоВремени" Тогда
		Результат.Вставить("ОтработанноеВремя.Физлицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "НачислениеЗарплатыРаботникам" Тогда
		Результат.Вставить("Начисления.Физлицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("Удержания.Физлицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ПогашениеЗаймов.ФизЛицо", 				Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "НачислениеЗарплатыРаботникамОрганизаций" Тогда
		Результат.Вставить("Начисления.Физлицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ДополнительныеНачисления.Физлицо", 		Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "НачислениеОтпускаРаботникамОрганизаций" Тогда
		Результат.Вставить("Физлицо", 								Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "НачислениеПоБольничномуЛисту" Тогда
		Результат.Вставить("Физлицо", 								Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "НевыходыВОрганизациях" Тогда
		Результат.Вставить("Начисления.Физлицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ОПВВозвратВзносов" Тогда
		Результат.Вставить("ПенсионныеВзносы.ФизЛицо", 				Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ОПВПеречислениеВФонды" Тогда
		Результат.Вставить("ПенсионныеВзносы.ФизЛицо", 				Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ОплатаПоСреднемуЗаработку" Тогда
		Результат.Вставить("Физлицо", 								Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ОплатаПраздничныхИВыходныхДнейОрганизаций" Тогда
		Результат.Вставить("Начисления.Физлицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ОплатаСверхурочныхЧасов" Тогда
		Результат.Вставить("Начисления.Физлицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "Опрос" Тогда
		Результат.Вставить("ОпрашиваемоеЛицо", 						Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ОтзывИзОтпусковОрганизаций" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ОтпускаОрганизаций" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ОтпускПоУходуЗаРебенком" Тогда
		Результат.Вставить("Физлицо", 								Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ОтражениеЗарплатыВРеглУчете" Тогда
		Результат.Вставить("ОтражениеВУчете.ФизЛицо", 				Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ОтсутствиеНаРаботе" Тогда
		Результат.Вставить("Работники.ФизЛицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ОтсутствиеНаРаботеОрганизаций" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ОценкаИспытательногоСрока" Тогда
		Результат.Вставить("Работники.ФизЛицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ОценкаКандидата" Тогда
		Результат.Вставить("Кандидаты.ФизЛицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ПланГрафикУчетаРабочегоВремени" Тогда
		Результат.Вставить("РабочееВремя.ФизЛицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ПланированиеОтпуска" Тогда
		Результат.Вставить("Работники.ФизЛицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ПремииРаботниковОрганизаций" Тогда
		Результат.Вставить("Начисления.Физлицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ПриемНаРаботу" Тогда
		Результат.Вставить("Работники.ФизЛицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ПриемНаРаботуВОрганизацию" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ПриходныйКассовыйОрдер" Тогда
		Результат.Вставить("Контрагент", 							Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ПрохождениеКурсаОбучения" Тогда
		Результат.Вставить("ОбучающиесяРаботники.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ПрохождениеКурсаОбученияРаботникамиОрганизаций" Тогда
		Результат.Вставить("ОбучающиесяРаботники.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "РассылкаАнкет" Тогда
		Результат.Вставить("Получатели.Объект", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "РасчетНалоговПриПоступленииАктивовУслуг" Тогда
		Результат.Вставить("ИсчисленныйИПН.ФизЛицо", 				Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ИсчисленныйСН.ФизЛицо", 				Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "РасчетПениОПВиСО" Тогда
		Результат.Вставить("ИсчислениеПени.ФизЛицо", 				Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "РасчетПриУвольненииРаботникаОрганизаций" Тогда
		Результат.Вставить("Физлицо", 								Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "РасчетСНиСО" Тогда
		Результат.Вставить("ИсчисленныйСН.ФизЛицо", 				Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ИсчисленныеСО.ФизЛицо", 				Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "РасчетУдержанийРаботниковОрганизаций" Тогда
		Результат.Вставить("ИсчисленныйИПН.ФизЛицо", 				Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ИсчисленныйОПВ.ФизЛицо", 				Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("Удержания.ФизЛицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ПогашениеЗаймов.ФизЛицо", 				Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("НалоговыеВычеты.ФизЛицо", 				Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "РегистрацияКандидатов" Тогда
		Результат.Вставить("Кандидаты.ФизЛицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "РегистрацияПростоевВОрганизациях" Тогда
		Результат.Вставить("Физлицо", 								Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "РегистрацияПрочихДоходовВЦеляхНалогообложения" Тогда
		Результат.Вставить("ИПНСведенияОДоходах.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ОПВСведенияОДоходах.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("СНСведенияОДоходах.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("СОСведенияОДоходах.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "РегистрацияРазовыхНачисленийРаботниковОрганизаций" Тогда
		Результат.Вставить("ОсновныеНачисления.Физлицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ДополнительныеНачисления.Физлицо", 		Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "РегистрацияРазовыхУдержанийРаботниковОрганизаций" Тогда
		Результат.Вставить("Удержания.Физлицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "РегистрацияСобеседованияКандидата" Тогда
		Результат.Вставить("ФизЛицо", 								Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "СдельныйНаряд" Тогда
		Результат.Вставить("Исполнители.ФизЛицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "СОВозвратОтчислений" Тогда
		Результат.Вставить("СоциальныеОтчисления.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "СОПеречислениеВФонды" Тогда
		Результат.Вставить("СоциальныеОтчисления.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "УдалитьТрудовойДоговор" Тогда
		Результат.Вставить("ФизЛицо", 								Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ТрудовыеОтпускаОрганизаций" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "Увольнение" Тогда
		Результат.Вставить("Работники.ФизЛицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "УвольнениеИзОрганизаций" Тогда
		Результат.Вставить("РаботникиОрганизации.Физлицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "УдержаниеИПНиОПВНУ" Тогда
		Результат.Вставить("УдержанныйИПН.ФизЛицо", 				Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("УдержанныйОПВ.ФизЛицо", 				Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "УчастиеВМероприятиях" Тогда
		Результат.Вставить("Работники.ФизЛицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "УчетЗаработкаРаботников" Тогда
		Результат.Вставить("Работники.ФизЛицо", 					Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете" Тогда
		Результат.Вставить("РаботникиОрганизации.ФизЛицо", 			Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ЭлектронноеПисьмо" Тогда
		Результат.Вставить("Предмет", 								Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	ИначеЕсли ИмяДокумента = "ТабельУчетаРабочегоВремениОрганизации" Тогда
		Результат.Вставить("ОтработанноеВремя.Физлицо", 			  Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		Результат.Вставить("ОтработанноеВремяВЦеломЗаПериод.Физлицо", Перечисления.ВидыОбъектовДоступа.ФизическиеЛица);
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ  - ОБРАБОТЧИКИ ПОДПИСОК НА СОБЫТИЯ МЕХАНИЗМА ДАТЫ ЗАПРЕТА РЕДАКТИРОВАНИЯ
// 				И МЕХАНИЗМА ЗАПРЕТА РЕДАКТИРОВАНИЯ ЧУЖИХ ДОКУМЕНТОВ

// Проверка возможности изменения записей регистров (дата запрета изменения данных)
//
Процедура ПередЗаписьюРегистраНакопленийПроверкаДоступностиПериода(Источник, Отказ, Замещение) Экспорт
	
	//цс
	  Если РольДоступна("ПолныеПрава") тогда
	    Возврат;
	  КонецЕсли;
	  
	  Если Тип(Источник) = Тип(РегистрыНакопления.СведенияСчетовФактурПолученных.СоздатьНаборЗаписей()) Тогда
	    Возврат;
	  КонецЕсли;
    //Конеццс


	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаПериодаЗаписейРегистров(Источник, Отказ, "РегистрНакопления");	
	#Если Клиент Тогда
		Если Отказ Тогда
			Сообщить("Редактирование данных этого периода запрещено. Изменения не могут быть записаны... (" + Источник + ")", СтатусСообщения.Важное);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ПередЗаписьюРегистраНакопленийПроверкаДоступностиПериода

// Проверка возможности изменения записей регистров бухгалтерии (дата запрета изменения данных)
//
Процедура ПередЗаписьюРегистраБухгалтерииПроверкаДоступностиПериода(Источник, Отказ, Замещение) Экспорт
	
	//цс
	Если РольДоступна("ПолныеПрава") тогда
		Возврат;
	КонецЕсли;
	//Конеццс
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаПериодаЗаписейРегистров(Источник, Отказ, "РегистрБухгалтерии");	
	#Если Клиент Тогда
		Если Отказ Тогда
			Сообщить("Редактирование данных этого периода запрещено. Изменения не могут быть записаны... (" + Источник + ")", СтатусСообщения.Важное);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ПередЗаписьюРегистраБухгалтерииПроверкаДоступностиПериода

// Проверка возможности изменения записей регистров сведений (дата запрета изменения данных)
//
Процедура ПередЗаписьюРегистраСведенийПроверкаДоступностиПериода(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаПериодаЗаписейРегистров(Источник, Отказ, "РегистрСведений");	
	#Если Клиент Тогда
		Если Отказ Тогда
			Сообщить("Редактирование данных этого периода запрещено. Изменения не могут быть записаны... (" + Источник + ")", СтатусСообщения.Важное);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ПередЗаписьюРегистраБухгалтерииПроверкаДоступностиПериода

// Проверка возможности изменения записей регистров расчета (дата запрета изменения данных)
//
Процедура ПередЗаписьюРегистраРасчетаПроверкаДоступностиПериода(Источник, Отказ, Замещение,ТолькоЗапись) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаПериодаЗаписейРегистров(Источник, Отказ, "РегистрРасчета");	
	#Если Клиент Тогда
		Если Отказ Тогда
			Сообщить("Редактирование данных этого периода запрещено. Изменения не могут быть записаны... (" + Источник + ")", СтатусСообщения.Важное);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ПередЗаписьюРегистраРасчетаПроверкаДоступностиПериода

// Проверка возможности записи данных документа с учетом даты запрета изменения данных (даты запрета редактирования)
//
Процедура ПередЗаписьюДокументовПроверкаДоступностиПериода(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//ЦС
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РольДоступна("ПолныеПрава") тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	ПроверятьПоПериоду = истина;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.цс_ГарантияФЗ") 
		или ТипЗнч(Источник) = Тип("ДокументОбъект.цс_Договор") 
		или ТипЗнч(Источник) = Тип("ДокументОбъект.цс_ЗаявкаНаФинасирование") 
		или ТипЗнч(Источник) = Тип("ДокументОбъект.цс_РеестрЗаявок") 
		или ТипЗнч(Источник) = Тип("ДокументОбъект.цс_НачислениеДисконта")
		или ТипЗнч(Источник) = Тип("ДокументОбъект.ДоговорПрямогоЗакупаЗерна") 
		или ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаНаПрямойЗакупЗерна") 
		или ТипЗнч(Источник) = Тип("ДокументОбъект.РеестрЗаявокПрямогоЗакупаЗерна")
		или ТипЗнч(Источник) = Тип("ДокументОбъект.цс_РасторжениеДоговораПЗ")
	
		или ТипЗнч(Источник) = Тип("ДокументОбъект.цс_АмортизацияДисконта")
		или ТипЗнч(Источник) = Тип("ДокументОбъект.дог_РегистрацияДоговоров")тогда
		
		ПроверятьПоПериоду = Ложь;
		
	КонецЕсли;
	
	Если ПроверятьПоПериоду Тогда 
		ПроверкаПериодаДокумента(Источник, Отказ, РежимЗаписи);
		Если Отказ Тогда
			ТекстСообщения = "Редактирование данных этого периода запрещено. Изменения не могут быть записаны...";
		КонецЕсли;
	КонецЕсли;
	
	ЗапрещеноРедактироватьДокумент = Ложь;
	АвторДокументаТекст = "";
	ПроверкаРазрешенияРедактированияЧужихДокументов(Источник, ЗапрещеноРедактироватьДокумент, АвторДокументаТекст);
	Если ЗапрещеноРедактироватьДокумент Тогда
		Отказ = Истина;
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС;
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + "Редактирование документов пользователя """ + АвторДокументаТекст + """ запрещено. Изменения не могут быть записаны...";
	КонецЕсли;
	#Если Клиент Тогда
		Если Отказ Тогда
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		КонецЕсли;
	#КонецЕсли
	//ЦС
	
	//Если Источник.ОбменДанными.Загрузка Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если Источник.ДополнительныеСвойства.Свойство("ПропуститьПроверкуЗапретаИзменения") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ТекстСообщения = "";
	//ПроверкаПериодаДокумента(Источник, Отказ, РежимЗаписи);
	//Если Отказ Тогда
	//	ТекстСообщения = "Редактирование данных этого периода запрещено. Изменения не могут быть записаны...";
	//КонецЕсли;
	//ЗапрещеноРедактироватьДокумент = Ложь;
	//АвторДокументаТекст = "";
	//ПроверкаРазрешенияРедактированияЧужихДокументов(Источник, ЗапрещеноРедактироватьДокумент, АвторДокументаТекст);
	//Если ЗапрещеноРедактироватьДокумент Тогда
	//	Отказ = Истина;
	//	Если Не ПустаяСтрока(ТекстСообщения) Тогда
	//		ТекстСообщения = ТекстСообщения + Символы.ПС;
	//	КонецЕсли;
	//	ТекстСообщения = ТекстСообщения + "Редактирование документов пользователя """ + АвторДокументаТекст + """ запрещено. Изменения не могут быть записаны...";
	//КонецЕсли;
	//#Если Клиент Тогда
	//	Если Отказ Тогда
	//		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
	//	КонецЕсли;
	//#КонецЕсли
КонецПроцедуры	// ПередЗаписьюДокументовПроверкаДоступностиПериода

Процедура ПриЗаписиДокументаРегистрацияОбъектовДоступаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ДополнительныеСвойства = Источник.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ПараметрыЗаписиОбъектовДоступа", Новый Структура("Замещать"));
	ДополнительныеСвойства.ПараметрыЗаписиОбъектовДоступа.Замещать = НЕ Источник.ЭтоНовый(); 
	
КонецПроцедуры

Процедура ПриЗаписиДокументаРегистрацияОбъектовПравДоступа(Источник, Отказ) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникИмя = Источник.Метаданные().Имя;	
	ОбъектыДоступаДокумента = ПолучитьОбъектыДоступаДокумента(ИсточникИмя);
	Если ОбъектыДоступаДокумента.Количество() = 0 Тогда
		ВызватьИсключение "Не определено правило регистрации объектов доступа для документа: " + ИсточникИмя;
	КонецЕсли;
	
	ОбъектыДоступа = Новый ТаблицаЗначений;
	ОбъектыДоступа.Колонки.Добавить("ВидОбъектаДоступа", Метаданные.РегистрыСведений.ОбъектыДоступаДокументов.Измерения.ВидОбъектаДоступа.Тип);
	ОбъектыДоступа.Колонки.Добавить("ОбъектДоступа", Метаданные.РегистрыСведений.ОбъектыДоступаДокументов.Измерения.ОбъектДоступа.Тип);
	
	Для Каждого ВидДоступа ИЗ ОбъектыДоступаДокумента Цикл
		ПозицияТочки = Найти(ВидДоступа.Ключ, ".");
		Если  ПозицияТочки <> 0 Тогда
			// реквизит в табличной части
			ИмяТЧ = Лев(ВидДоступа.Ключ, ПозицияТочки - 1);
			ИмяРеквизита = Сред(ВидДоступа.Ключ, ПозицияТочки + 1);
			ЗначенияВТЧ = Источник[ИмяТЧ].ВыгрузитьКолонку(ИмяРеквизита);
			Для Каждого ЗначениеРеквизита ИЗ ЗначенияВТЧ Цикл
				Если ЗначениеРеквизита <> Неопределено Тогда
					СтрокаОбъектаДоступа = ОбъектыДоступа.Добавить();
					СтрокаОбъектаДоступа.ВидОбъектаДоступа = ВидДоступа.Значение;
					СтрокаОбъектаДоступа.ОбъектДоступа = ЗначениеРеквизита;
				КонецЕсли;
			КонецЦикла;		
		Иначе
			ЗначениеРеквизита = Источник[ВидДоступа.Ключ];
			Если ЗначениеРеквизита <> Неопределено Тогда
				СтрокаОбъектаДоступа = ОбъектыДоступа.Добавить();
				СтрокаОбъектаДоступа.ВидОбъектаДоступа = ВидДоступа.Значение;
				СтрокаОбъектаДоступа.ОбъектДоступа = ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПараметрыЗаписиОбъектовДоступа") Тогда
		Замещать = Источник.ДополнительныеСвойства.ПараметрыЗаписиОбъектовДоступа.Замещать;
	Иначе
		Замещать = Истина;
	КонецЕсли;
		
	ПолныеПрава.РегистрацияОбъектовДоступаДокумента(Источник.Ссылка, ОбъектыДоступа, Замещать);

КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАЮЩИЕ СОБЫТИЯ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМ

#Если Клиент Тогда

Процедура РедактироватьПраваДоступа(Ссылка) Экспорт
	
	
	Если НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГруппыПользователейПользователиГруппы.Пользователь
		|ИЗ
		|	Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователейПользователиГруппы
		|ГДЕ
		|	ГруппыПользователейПользователиГруппы.Ссылка = &Ссылка
		|	И ГруппыПользователейПользователиГруппы.Пользователь = &Пользователь";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		
		Результат = Запрос.Выполнить().Пустой();
		
		Если Результат Тогда 
			Предупреждение("Пользователь не имеет полных прав и не состоит в составе группы.",,"Просмотр недоступен!!!");
			Возврат
		КонецЕсли;
		
	КонецЕсли;
	
	Обработки.НастройкаПравДоступа.ПолучитьФорму("НастройкаПравДоступа",,Ссылка).Открыть();
		
КонецПроцедуры

Процедура РедактироватьДоступКДокументамДругихПользователей(Ссылка) Экспорт
	
	Если ОбщегоНазначения.ПроверитьПравоДоступа(Метаданные.ОбщиеФормы.НастройкаДоступаКДокументамДругихПользователей, "Просмотр") Тогда	
		ФормаНастройки = ПолучитьОбщуюФорму("НастройкаДоступаКДокументамДругихПользователей",,Ссылка);
		ФормаНастройки.Открыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

Функция ПолучитьСписокВидовНаследованияПравДоступа(ОбъектДоступа) Экспорт
	
	СписокПеречисления = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(ОбъектДоступа) или ТипЗнч(ОбъектДоступа) = Тип("СправочникСсылка.Организации") Тогда
		СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
		СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
	Иначе
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектДоступа)) Тогда
			МетаданныеОбъекта = ОбъектДоступа.Метаданные();
			Если МетаданныеОбъекта.Иерархический Тогда
				Если МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
					Если ОбъектДоступа.ЭтоГруппа Тогда
						СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
					Иначе
						СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
					КонецЕсли;
				Иначе
					СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
					СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных);
				КонецЕсли;
			Иначе
				СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
			КонецЕсли;
		Иначе
			СписокПеречисления.Добавить(Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат СписокПеречисления;
	
КонецФункции
