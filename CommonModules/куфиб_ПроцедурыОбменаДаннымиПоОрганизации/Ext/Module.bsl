//Функция проверяет нужно ли фильтровать по данному документу
//
Функция НеИспользоватьФильтрПоДокументу(ДокументДанных)
	
	Результат = Ложь;
	Если ДокументДанных = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДокументДанных.Метаданные().Реквизиты.Найти("Организация") = Неопределено Тогда 
		Результат = Истина;
	// - КУФИБ - начало - общие объекты по бюджетированию
	ИначеЕсли Метаданные.Подсистемы.фин_Бюджетирование.Подсистемы.фин_НастройкиБюджетнойСтруктуры.Подсистемы.фин_НастройкиБюджетированияОбщиеДляОрганизаций.Состав.Содержит(ДокументДанных.Метаданные()) И НЕ ЗначениеЗаполнено(ДокументДанных.Организация) Тогда
		Результат = Истина;
	// - КУФИБ - конец
	КонецЕсли;
	
	Если ДокументДанных.Метаданные().Имя = "УстановкаСоответствияСчетовБУиНУ" Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СообщитьИнформацияОНеобходимостиЗавершенияРаботыПрограммы() Экспорт
	
	Сообщить("Для корректной работы механизма регистрации изменений для узлов информационной базы необходимо завершить работу всех пользователей
		| и перезапустить текущий сеанс работы 1С:Предприятия.");
		
КонецПроцедуры
                       
Функция ПолучитьСоотвествиеУзловИОрганизаций() Экспорт
	
	Хранилище = ПараметрыСеанса.СоответствиеОрганизацийИУзловОбменаПоОрганизации;
		
	СоотвествиеУзловИОрганизаций = Хранилище.Получить();
	
	Возврат СоотвествиеУзловИОрганизаций;
	
КонецФункции

Функция ПолучитьМассивВсехУзлов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ различные
	               |	ПоОрганизации.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.ПоОрганизации КАК ПоОрганизации
				   |
				   |ГДЕ
				   |
				   |	ПоОрганизации.Ссылка <> &ЭтотУзел";
				   
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ПоОрганизации.ЭтотУзел());			   
				   
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСсылок;
	
КонецФункции

Функция ПолучитьЗапросомМассивУзловПоОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Различные
	               |	ПоОрганизации.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.ПоОрганизации КАК ПоОрганизации
				   |		Левое соединение ПланОбмена.ПоОрганизации.Организации КАК СписокОрганизаций
				   |			ПО (ПоОрганизации.Ссылка = СписокОрганизаций.Ссылка)
				   |
	               |ГДЕ
	               |	(СписокОрганизаций.Организация В (&СсылкаНаОрганизацию)
				   |		ИЛИ СписокОрганизаций.Организация Есть NULL)
				   |	И ПоОрганизации.Ссылка <> &ЭтотУзел";
				   
	Запрос.УстановитьПараметр("СсылкаНаОрганизацию", Организация);
	
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ПоОрганизации.ЭтотУзел());
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСсылок;	
	
КонецФункции

Функция ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Данные, ИмяБазовогоТипа, ТипЭлемента = Неопределено, МетаданныеОбъекта = Неопределено,
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоотвествиеУзловИОрганизаций = Неопределено) Экспорт
	
	Если ИмяБазовогоТипа = "Справочники" Тогда
			
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиСправочника(Данные, ТипЭлемента, ВыгружатьДляВсехУзлов, 
			ВозвращатьМассивВсехУзлов, СоотвествиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиДокумента(Данные, ТипЭлемента, ВыгружатьДляВсехУзлов, 
			ВозвращатьМассивВсехУзлов, СоотвествиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "РегистрыСведений" Тогда	
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраСведений(Данные, МетаданныеОбъекта, ВыгружатьДляВсехУзлов, 
			ВозвращатьМассивВсехУзлов, СоотвествиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "РегистрыНакопления" Тогда	
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраНакопления(Данные, МетаданныеОбъекта, ВыгружатьДляВсехУзлов,
			ВозвращатьМассивВсехУзлов, СоотвествиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "РегистрыБухгалтерии" Тогда	
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраБухгалтерии(Данные, МетаданныеОбъекта, ВыгружатьДляВсехУзлов, СоотвествиеУзловИОрганизаций);

	ИначеЕсли ИмяБазовогоТипа = "РегистрыРасчета" Тогда	
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраРасчета(Данные, МетаданныеОбъекта, ВыгружатьДляВсехУзлов, СоотвествиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "Перерасчеты" Тогда
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраРасчета(Данные, МетаданныеОбъекта, СоотвествиеУзловИОрганизаций);
		
	КонецЕсли;
	
	// информация из подчиненной информационной базы в главную по отношению к ней передаем всегда
	ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
		
	Если ЗначениеЗаполнено(ГлавныйУзел) Тогда
	
		НомерВМассиве = МассивУзловДляРегистрацииСсылки.Найти(ГлавныйУзел);
		
		Если НомерВМассиве = Неопределено Тогда
		
			МассивУзловДляРегистрацииСсылки.Добавить(ГлавныйУзел);	
			
		КонецЕсли;
		
	КонецЕсли;	
			
	Возврат МассивУзловДляРегистрацииСсылки;
	
КонецФункции

Функция ОпределениеУзловДляВыгрузкиДокумента(Элемент, ТипРеквизита = Неопределено, ВыгружатьДляВсехУзлов = Ложь, 
	ВозвращатьМассивВсехУзлов = Истина, СоотвествиеУзловИОрганизаций = Неопределено) Экспорт
	
	МассивУзловДляПередачи = Новый Массив;
	
	Если НеИспользоватьФильтрПоДокументу(Элемент) Тогда
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, Истина, МассивУзловДляПередачи);
		
	Иначе
	
		ДополнитьМассивУзловДляВыгрузкиДокумента(Элемент, МассивУзловДляПередачи, 
			ТипРеквизита, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, СоотвествиеУзловИОрганизаций);
			
	КонецЕсли;
		
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Функция ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраСведений(Элемент, МетаданныеРегистра, 
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоотвествиеУзловИОрганизаций = Неопределено) Экспорт
	
	ВыгружатьДляВсехУзлов = Ложь;
	МассивУзловДляПередачи = Новый Массив;
	
	ТипЭлемента = ТипЗнч(Элемент);
	
	Если МетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
	
		ОпределитьПоРегистраторуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов);
		
	ИначеЕсли МетаданныеРегистра.Имя = "ОбъектыДоступаДокументов" Тогда
		ОпределитьПоДокументуИзмерениюМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов);
	// - КУФИБ - начало - для регистров подсистемы УДС и бюджетирования без регистратора
	ИначеЕсли МетаданныеРегистра.Имя = "фин_ЗначенияДополнительныхРеквизитовБюджетирования" Тогда
		ОпределитьПоДокументуИзмерениюМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов,"Документ");
	ИначеЕсли МетаданныеРегистра.Имя = "усд_ДвижениеДокументовПоМаршрутам" Тогда
		ОпределитьПоДокументуИзмерениюМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов,"Документ");
	ИначеЕсли МетаданныеРегистра.Имя = "усд_АктивныеЭтапыРассмотренияДокументов" Тогда
		ОпределитьПоДокументуИзмерениюМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов,"Документ");
	ИначеЕсли МетаданныеРегистра.Имя = "усд_РеестрЗаметок" Тогда
		ОпределитьПоДокументуИзмерениюМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов,"Объект");
	ИначеЕсли МетаданныеРегистра.Имя = "усд_НазначенияМаршрутов" Тогда
		ОпределитьПоДокументуИзмерениюМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов,"Документ");
	ИначеЕсли МетаданныеРегистра.Имя = "фин_СловарьТерминовБюджетирования" Тогда
		ОпределитьПоСправочникуИзмерениюМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов,"Термин");
	ИначеЕсли МетаданныеРегистра.Имя = "СоответствиеПодразделенийИПодразделенийОрганизаций" Тогда
		ОпределитьПоСправочникуИзмерениюМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов,"Организация");
	ИначеЕсли МетаданныеРегистра.Имя = "фин_НастройкаСоответствийДляИзмеренийБюджетирования" Тогда
		ОпределитьПоСправочникуИзмерениюМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов,"ИсходноеЗначение");
		
	ИначеЕсли МетаданныеРегистра.Имя = "ВерсииОбъектов" Тогда
		ОпределитьПоСправочникуИзмерениюМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов,"Объект");
	ИначеЕсли МетаданныеРегистра.Имя = "НомераОтсканированныхФайлов" Тогда
		ОпределитьПоСправочникуИзмерениюМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов,"Владелец");
	ИначеЕсли МетаданныеРегистра.Имя = "ФайлыВРабочемКаталоге" Тогда
		ОпределитьПоСправочникуИзмерениюМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов,"Версия");
	ИначеЕсли МетаданныеРегистра.Имя = "ХранимыеФайлыВерсий" Тогда
		ОпределитьПоСправочникуИзмерениюМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов,"ВерсияФайла");
	ИначеЕсли МетаданныеРегистра.Имя = "фин_ДатыВводаДокументовВСистему" Тогда	
		ОпределитьПоДокументуИзмерениюМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов,"Документ");
		
	// - КУФИБ - конец
	Иначе
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, Истина, МассивУзловДляПередачи);
		
	КонецЕсли;
		
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Функция ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраНакопления(Элемент, МетаданныеРегистра, 
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоотвествиеУзловИОрганизаций = Неопределено) Экспорт
	
	МассивУзловДляПередачи = Новый Массив;
	
//	ТипЭлемента = ТипЗнч(Элемент);
	
	ОпределитьПоРегистраторуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов);
				
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Функция ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраБухгалтерии(Элемент, МетаданныеРегистра,ВыгружатьДляВсехУзлов = Ложь, СоотвествиеУзловИОрганизаций = Неопределено) Экспорт
	
	МассивУзловДляПередачи = Новый Массив;
	
	ОпределитьПоРегистраторуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов);
				
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Процедура ДополнитьМассивУзловДляВыгрузкиСправочника(Элемент, МассивУзловДляПередачи, 
	ТипЭлемента = Неопределено, ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина,
	СоотвествиеУзловИОрганизаций = Неопределено)
	
	// все элементы всех справочников выгружаем и загружаем послностью
	ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, Истина, МассивУзловДляПередачи);		
		
КонецПроцедуры

Процедура ДополнитьМассивУзловДляВыгрузкиДокумента(Элемент, МассивУзловДляПередачи, 
	ТипЭлемента = Неопределено, ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина,
	СоотвествиеУзловИОрганизаций = Неопределено)
	
	Если ТипЭлемента = Неопределено Тогда
		ТипЭлемента = ТипЗнч(Элемент);
	КонецЕсли;
	
	ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Элемент.Организация, СоотвествиеУзловИОрганизаций);
	
КонецПроцедуры

Процедура ОпределитьПоРегистраторуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов)
	
	НетОрганизацииРегистратора = Ложь;
	
	Если Элемент.Отбор.Найти("Регистратор") <> Неопределено Тогда
		
		РегистраторНабораЗаписей = Элемент.Отбор.Регистратор.Значение;
		
		СоответствиеУзлыДляПередачиДокумента = Неопределено;
		СохраненныйМассивУзлов = Неопределено;
		Если Элемент.ДополнительныеСвойства.Свойство("СоответствиеУзлыДляПередачиДокумента", СоответствиеУзлыДляПередачиДокумента) Тогда
			СохраненныйМассивУзлов = СоответствиеУзлыДляПередачиДокумента[РегистраторНабораЗаписей];
		КонецЕсли;
		
		Если СохраненныйМассивУзлов = Неопределено Тогда
		
			Если НеИспользоватьФильтрПоДокументу(РегистраторНабораЗаписей) Тогда
				
				ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, Истина, МассивУзловДляПередачи);
				
			Иначе
				
				Если РегистраторНабораЗаписей.Метаданные().Реквизиты.Найти("Организация") <> Неопределено Тогда
					
					// если это регистр то надо удалить старые записи по старой организации
					Попытка
						Если Элемент.Количество()=0 Тогда
							ОрганизацияРегистратора = РегистраторНабораЗаписей.Организация;
						Иначе
							ОрганизацияРегистратора = Элемент[0].Организация;
						КонецЕсли;
					Исключение
						ОрганизацияРегистратора = РегистраторНабораЗаписей.Организация;
					КонецПопытки;	
					
					МассивОрганизаций = Новый Массив;
					МассивОрганизаций.Добавить(ОрганизацияРегистратора);
					ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, МассивОрганизаций, СоотвествиеУзловИОрганизаций);
					
				Иначе
					
					НетОрганизацииРегистратора = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
		
			Если Не НетОрганизацииРегистратора Тогда
				// сохраним массив узлов регистратора в соответствие для ускорения обращения к нему в дальнейшем
				Если СоответствиеУзлыДляПередачиДокумента = Неопределено Тогда
					СоответствиеУзлыДляПередачиДокумента = Новый Соответствие;
				КонецЕсли;
				СоответствиеУзлыДляПередачиДокумента.Вставить(РегистраторНабораЗаписей, МассивУзловДляПередачи);
				
				Элемент.ДополнительныеСвойства.Свойство("СоответствиеУзлыДляПередачиДокумента", СоответствиеУзлыДляПередачиДокумента);
			КонецЕсли;
			
		Иначе
			
			// берем массив узлов из кэша
			МассивУзловДляПередачи = СохраненныйМассивУзлов;
		
		КонецЕсли;
		
	Иначе
		
		НетОрганизацииРегистратора = Истина;
		
	КонецЕсли;
	
	Если НетОрганизацииРегистратора Тогда
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, Истина, МассивУзловДляПередачи);
	КонецЕсли; 

	
КонецПроцедуры

// - КУФИБ - конец

Процедура ОпределитьПоДокументуИзмерениюМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов,ПолеДокумент = "ДокументСсылка")
	
	НетОрганизацииРегистратора = Ложь;
	
//	Если Элемент.Отбор.Найти("ДокументСсылка") <> Неопределено Тогда
//		
//		РегистраторНабораЗаписей = Элемент.Отбор.ДокументСсылка.Значение;
	// - КУФИБ - начало	
	Если Элемент.Отбор.Найти(ПолеДокумент) <> Неопределено Тогда
		
		РегистраторНабораЗаписей = Элемент.Отбор[ПолеДокумент].Значение;
	// - КУФИБ - конец	
		
		СоответствиеУзлыДляПередачиДокумента = Неопределено;
		СохраненныйМассивУзлов = Неопределено;
		Если Элемент.ДополнительныеСвойства.Свойство("СоответствиеУзлыДляПередачиДокумента", СоответствиеУзлыДляПередачиДокумента) Тогда
			СохраненныйМассивУзлов = СоответствиеУзлыДляПередачиДокумента[РегистраторНабораЗаписей];
		КонецЕсли;
		
		Если СохраненныйМассивУзлов = Неопределено Тогда
		
			Если НеИспользоватьФильтрПоДокументу(РегистраторНабораЗаписей) Тогда
				
				ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, Истина, МассивУзловДляПередачи);
				
			Иначе
				
				Если РегистраторНабораЗаписей.Метаданные().Реквизиты.Найти("Организация") <> Неопределено Тогда
					
					ОрганизацияРегистратора = РегистраторНабораЗаписей.Организация;
					
					МассивОрганизаций = Новый Массив;
					МассивОрганизаций.Добавить(ОрганизацияРегистратора);
					ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, МассивОрганизаций, СоотвествиеУзловИОрганизаций);
					
				Иначе
					
					НетОрганизацииРегистратора = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
		
			Если Не НетОрганизацииРегистратора Тогда
				// сохраним массив узлов регистратора в соответствие для ускорения обращения к нему в дальнейшем
				Если СоответствиеУзлыДляПередачиДокумента = Неопределено Тогда
					СоответствиеУзлыДляПередачиДокумента = Новый Соответствие;
				КонецЕсли;
				СоответствиеУзлыДляПередачиДокумента.Вставить(РегистраторНабораЗаписей, МассивУзловДляПередачи);
				
				Элемент.ДополнительныеСвойства.Свойство("СоответствиеУзлыДляПередачиДокумента", СоответствиеУзлыДляПередачиДокумента);
			КонецЕсли;
			
		Иначе
			
			// берем массив узлов из кэша
			МассивУзловДляПередачи = СохраненныйМассивУзлов;
		
		КонецЕсли;
		
	Иначе
		
		НетОрганизацииРегистратора = Истина;
		
	КонецЕсли;
	
	Если НетОрганизацииРегистратора Тогда
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, Истина, МассивУзловДляПередачи);
	КонецЕсли; 

	
КонецПроцедуры

Процедура ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи)
	
	ВыгружатьДляВсехУзлов = Истина;
			
	Если ВозвращатьМассивВсехУзлов Тогда
		ДополнитьМассивВсемиУзлами(МассивУзловДляПередачи);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Организация, СоотвествиеУзловИОрганизаций = Неопределено)
	
	МассивУзлов = ПолучитьМассивУзловПоОрганизации(Организация, СоотвествиеУзловИОрганизаций);
	
	ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);
	
КонецПроцедуры

Процедура ДополнитьМассивСсылками(ТекущийМассив, МассивДляДобавления)
	
	Если МассивДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из МассивДляДобавления Цикл
		
		ТекущийМассив.Добавить(Элемент);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ДополнитьМассивУзловДляВыгрузкиСсылочногоТипа(ИмяБазовогоТипа, Элемент, МассивУзловДляПередачи, 
	ТипЭлемента = Неопределено, ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина,
	СоотвествиеУзловИОрганизаций = Неопределено)
	
	Если ИмяБазовогоТипа = "Справочники" Тогда
		
		ДополнитьМассивУзловДляВыгрузкиСправочника(Элемент, МассивУзловДляПередачи, 
			ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов,
			СоотвествиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
		
		ДополнитьМассивУзловДляВыгрузкиДокумента(Элемент, МассивУзловДляПередачи, 
			ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов,
			СоотвествиеУзловИОрганизаций);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПоНаборуЗаписейРазличныеЗначенияРеквизита(НаборЗаписей, ИмяРеквизита) Экспорт
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ТаблицаДанных = НаборЗаписей.Выгрузить(, ИмяРеквизита);
	ТаблицаДанных.Свернуть(ИмяРеквизита);
	
	МассивОрганизаций = ТаблицаДанных.ВыгрузитьКолонку(ИмяРеквизита); 
	
	Возврат МассивОрганизаций;	
	
КонецФункции

Функция ОпределитьПоНаборуЗаписейСписокОрганизаций(НаборЗаписей) Экспорт
	
	МассивЗначений = ПолучитьПоНаборуЗаписейРазличныеЗначенияРеквизита(НаборЗаписей, "Организация");
	Возврат МассивЗначений;
	
КонецФункции

Процедура ДополнитьМассивВсемиУзлами(МассивУзловДляПередачи)
	
	МассивУзлов = ВернутьМассивВсехУзловИзПараметровСеанса();
	
	ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);	
	 
КонецПроцедуры

Функция ПолучитьМассивУзловПоОрганизации(Организация, СоотвествиеУзловИОрганизаций = Неопределено) Экспорт
	
	Если ТипЗнч(Организация) = Тип("Массив") Тогда
		
		КоличествоЭлементовВМассиве = Организация.Количество();
		
		Если КоличествоЭлементовВМассиве = 0 Тогда
			
			ОрганизацияДляПоиска = Справочники.Организации.ПустаяСсылка();
			
		ИначеЕсли КоличествоЭлементовВМассиве = 1 Тогда
			
			ОрганизацияДляПоиска = Организация[0];
			
		Иначе
			
			ОрганизацияДляПоиска = Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		ОрганизацияДляПоиска = Организация;
		
	КонецЕсли;
	
	Если ОрганизацияДляПоиска <> Неопределено Тогда
		
		МассивУзлов = ВернутьМассивУзловПоОднойОрганизации(ОрганизацияДляПоиска, СоотвествиеУзловИОрганизаций);
		
	Иначе	
		
		МассивУзлов = ПолучитьЗапросомМассивУзловПоОрганизации(Организация);
		
	КонецЕсли;	
	
	Возврат МассивУзлов;
	
КонецФункции

Функция ПолучитьПоТабличнойЧастиРазличныеЗначенияРеквизита(ТабличнаяЧасть, ИмяРеквизита) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ТаблицаДанных = ТабличнаяЧасть.Выгрузить(, ИмяРеквизита);
	ТаблицаДанных.Свернуть(ИмяРеквизита);
	
	МассивОрганизаций = ТаблицаДанных.ВыгрузитьКолонку(ИмяРеквизита); 
	
	Возврат МассивОрганизаций;	
	
КонецФункции

Функция ВернутьМассивВсехУзловИзПараметровСеанса()
	
	Возврат ПараметрыСеанса.ВсеУзлыОбменаПоОрганизациям;	
	
КонецФункции

Функция ВернутьМассивУзловПоОднойОрганизации(Организация, СоотвествиеУзловИОрганизаций = Неопределено)
	
	Если СоотвествиеУзловИОрганизаций = Неопределено Тогда
		
		СоотвествиеУзловИОрганизаций = ПолучитьСоотвествиеУзловИОрганизаций();
	
	КонецЕсли;
	
	Возврат СоотвествиеУзловИОрганизаций[Организация];	
	
КонецФункции

Процедура ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииПередЗаписью, МассивУзловДляРегистрацииПриЗаписи)
	
	Источник.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	Источник.ОбменДанными.Получатели.Заполнить();
	
	// для регистрации ссылки
	Для Каждого Элемент Из МассивУзловДляРегистрацииПередЗаписью Цикл
		
		Источник.ОбменДанными.Получатели.Добавить(Элемент);
		
	КонецЦикла;
	
	// для регистрации объекта
	Для Каждого Элемент Из МассивУзловДляРегистрацииПриЗаписи Цикл
		
		Источник.ОбменДанными.Получатели.Добавить(Элемент);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, ИмяБазовогоТипа, ТипЭлемента = Неопределено, 
	МассивУзловДляРегистрацииСсылки = Неопределено, МассивУзловДляРегистрацииОбъекта = Неопределено)
	Если Метаданные.ПараметрыСеанса.Найти("НаличиеОбменаДаннымиПоОрганизации")=Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		Возврат;
		
	КонецЕсли;		
	
	Если Источник.ЭтоНовый() Тогда
		
		// элемент еще никуда не передавался
		МассивУзловДляРегистрацииСсылки = Новый Массив;
		
	Иначе
		
		МассивУзловДляРегистрацииСсылки = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник.Ссылка, ИмяБазовогоТипа, ТипЭлемента);
						
	КонецЕсли;
		
	МассивУзловДляРегистрацииОбъекта = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник, ИмяБазовогоТипа, ТипЭлемента);
			
	ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииСсылки, МассивУзловДляРегистрацииОбъекта);	
			
КонецПроцедуры

Процедура ПередЗаписьюНабораЗаписейДляОбменаПоОрганизации(Источник, Отказ, Замещение, ИмяБазовогоТипа) Экспорт
	
	Если Метаданные.ПараметрыСеанса.Найти("НаличиеОбменаДаннымиПоОрганизации")=Неопределено Тогда
		Возврат;
	КонецЕсли;		
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТипЗначенияИсточника = ТипЗнч(Источник);
	
	МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗначенияИсточника);
	
	Если Замещение Тогда
		
		Если ИмяБазовогоТипа = "РегистрыСведений" Тогда
			СтарыйНаборЗаписей = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли ИмяБазовогоТипа = "РегистрыНакопления" Тогда
			СтарыйНаборЗаписей = РегистрыНакопления[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли ИмяБазовогоТипа = "РегистрыБухгалтерии" Тогда
			СтарыйНаборЗаписей = РегистрыБухгалтерии[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();	
		ИначеЕсли ИмяБазовогоТипа = "РегистрыРасчета" Тогда
			СтарыйНаборЗаписей = РегистрыРасчета[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();	
		ИначеЕсли ИмяБазовогоТипа = "Перерасчеты" Тогда
			СтарыйНаборЗаписей = РегистрыРасчета[МетаданныеРегистра.Родитель().Имя].Перерасчеты[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
		КонецЕсли;
	
		Для Каждого ЗначениеОтбора Из Источник.Отбор Цикл
			
			Если ЗначениеОтбора.Использование = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
			СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
			СтрокаОтбора.Использование = Истина;
			
		КонецЦикла;
		
		СтарыйНаборЗаписей.Прочитать();
		
		МассивУзловДляРегистрацииСсылки = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(СтарыйНаборЗаписей, ИмяБазовогоТипа,  , МетаданныеРегистра);
		
		
	Иначе
		
		МассивУзловДляРегистрацииСсылки = Новый Массив;
			
	КонецЕсли;
			
	МассивУзловДляРегистрацииОбъекта = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник, ИмяБазовогоТипа,  , МетаданныеРегистра);
	
	ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииСсылки, МассивУзловДляРегистрацииОбъекта);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписьюДокументаДляОбменаПоОрганизацииПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, "Документы");
	
КонецПроцедуры

Процедура ПередЗаписьРегистраСведенийДляОбменаПоОрганизацииПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	ПередЗаписьюНабораЗаписейДляОбменаПоОрганизации(Источник, Отказ, Замещение, "РегистрыСведений");	
		
КонецПроцедуры

Процедура ПередЗаписьюРегистраНакопленийДляОбменаПоОрганизацииПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	ПередЗаписьюНабораЗаписейДляОбменаПоОрганизации(Источник, Отказ, Замещение, "РегистрыНакопления");
	
КонецПроцедуры

Процедура ПередЗаписьюРегистраБухгалтерииДляОбменаПоОрганизацииПередЗаписью(Источник, Отказ, РежимЗаписи) Экспорт
	
	ПередЗаписьюНабораЗаписейДляОбменаПоОрганизации(Источник, Отказ, РежимЗаписи, "РегистрыБухгалтерии");
	
КонецПроцедуры


Процедура ПередУдалениемДокументаДляОбменаПоОрганизацииПередУдалением(Источник, Отказ) Экспорт
	
	ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, "Документы");
	
КонецПроцедуры

// - КУФИБ - начало

Процедура ОпределитьПоСправочникуИзмерениюМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов,ПолеСправочник)
	
	НетОрганизацииРегистратора = Ложь;
	
	Если Элемент.Отбор.Найти(ПолеСправочник) <> Неопределено Тогда
		
		РегистраторНабораЗаписей = Элемент.Отбор[ПолеСправочник].Значение;
		
		СоответствиеУзлыДляПередачиДокумента = Неопределено;
		СохраненныйМассивУзлов = Неопределено;
		Если Элемент.ДополнительныеСвойства.Свойство("СоответствиеУзлыДляПередачиДокумента", СоответствиеУзлыДляПередачиДокумента) Тогда
			СохраненныйМассивУзлов = СоответствиеУзлыДляПередачиДокумента[РегистраторНабораЗаписей];
		КонецЕсли;
		
		Если СохраненныйМассивУзлов = Неопределено Тогда
		    Если РегистраторНабораЗаписей = Неопределено Тогда
				ОрганизацияРегистратора = Неопределено;
				НетОрганизацииРегистратора = Истина;
			ИначеЕсли ТипЗнч(РегистраторНабораЗаписей)=Тип("СправочникСсылка.Организации") Тогда
				ОрганизацияРегистратора = РегистраторНабораЗаписей;
			// - КУФИБ - начало
			ИначеЕсли ТипЗнч(РегистраторНабораЗаписей)=Тип("СправочникСсылка.Файлы") И ФайлОрганизации(РегистраторНабораЗаписей) Тогда
				ОрганизацияРегистратора = РегистраторНабораЗаписей.ВладелецФайла.Организация;
			ИначеЕсли ТипЗнч(РегистраторНабораЗаписей)=Тип("СправочникСсылка.ВерсииФайлов") И ФайлОрганизации(РегистраторНабораЗаписей.Владелец) Тогда
				ОрганизацияРегистратора = РегистраторНабораЗаписей.Владелец.ВладелецФайла.Организация;
			// - КУФИБ - конец
			ИначеЕсли РегистраторНабораЗаписей.Метаданные().Реквизиты.Найти("Организация") <> Неопределено Тогда
				ОрганизацияРегистратора = РегистраторНабораЗаписей.Организация;
			ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(РегистраторНабораЗаписей)) И РегистраторНабораЗаписей.Метаданные().Владельцы.Количество()>0 И ТипЗнч(РегистраторНабораЗаписей.Владелец)=Тип("СправочникСсылка.Организации") Тогда
				ОрганизацияРегистратора = РегистраторНабораЗаписей.Владелец;
			Иначе
				ОрганизацияРегистратора = Неопределено;
				НетОрганизацииРегистратора = Истина;
			КонецЕсли;
				
			Если Не НетОрганизацииРегистратора Тогда
				
				МассивОрганизаций = Новый Массив;
				МассивОрганизаций.Добавить(ОрганизацияРегистратора);
				ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, МассивОрганизаций, СоотвествиеУзловИОрганизаций);
				
			КонецЕсли;
				
			Если Не НетОрганизацииРегистратора Тогда
				// сохраним массив узлов регистратора в соответствие для ускорения обращения к нему в дальнейшем
				Если СоответствиеУзлыДляПередачиДокумента = Неопределено Тогда
					СоответствиеУзлыДляПередачиДокумента = Новый Соответствие;
				КонецЕсли;
				СоответствиеУзлыДляПередачиДокумента.Вставить(РегистраторНабораЗаписей, МассивУзловДляПередачи);
				
				Элемент.ДополнительныеСвойства.Свойство("СоответствиеУзлыДляПередачиДокумента", СоответствиеУзлыДляПередачиДокумента);
			КонецЕсли;
			
		Иначе
			
			// берем массив узлов из кэша
			МассивУзловДляПередачи = СохраненныйМассивУзлов;
		
		КонецЕсли;
		
	Иначе
		
		НетОрганизацииРегистратора = Истина;
		
	КонецЕсли;
	
	Если НетОрганизацииРегистратора Тогда
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, Истина, МассивУзловДляПередачи);
	КонецЕсли; 

	
КонецПроцедуры

Функция ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраРасчета(Элемент, МетаданныеРегистра,ВыгружатьДляВсехУзлов = Ложь, СоотвествиеУзловИОрганизаций = Неопределено) Экспорт
	
	МассивУзловДляПередачи = Новый Массив;
	
	ОпределитьПоРегистраторуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоотвествиеУзловИОрганизаций, МетаданныеРегистра, ВыгружатьДляВсехУзлов);
				
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Процедура ПередЗаписьюРегистраРасчетаДляОбменаПоОрганизацииПередЗаписью(Источник, Отказ, Замещение, ТолькоЗапись) Экспорт
	
	ПередЗаписьюНабораЗаписейДляОбменаПоОрганизации(Источник, Отказ, Замещение, "РегистрыРасчета");
	
КонецПроцедуры

// ЗУПК

Процедура ПроизвестиРегистрациюСвязанныхОбъектов(СсылкаНаОбъект, МассивУзловДляРегистрацииОбъекта, ТипОбъекта)
	
	Если МассивУзловДляРегистрацииОбъекта.Количество() = 0
		ИЛИ СсылкаНаОбъект.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// регистрируем изменения для самого объекта
	ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрацииОбъекта, СсылкаНаОбъект);
	
	Если ТипОбъекта = "Контрагенты" Тогда
		
		// банковские счета
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	БанковскиеСчета.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.БанковскиеСчета КАК БанковскиеСчета
		               |ГДЕ
		               |	БанковскиеСчета.Владелец = &Контрагент";
					   
		Запрос.УстановитьПараметр("Контрагент", СсылкаНаОбъект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрацииОбъекта, Выборка.ссылка);	
			
		КонецЦикла;
		
		// контактная информация
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.Тип,
			|	КонтактнаяИнформация.Вид
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &Объект";
		
		Запрос.УстановитьПараметр("Объект", СсылкаНаОбъект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Использование = Истина;
		НаборЗаписей.Отбор.Объект.Значение = СсылкаНаОбъект;
		НаборЗаписей.Отбор.Тип.Использование = Истина;
		НаборЗаписей.Отбор.Вид.Использование = Истина;
		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.Тип.Значение = Выборка.Тип;
			НаборЗаписей.Отбор.Вид.Значение = Выборка.Вид;
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрацииОбъекта, НаборЗаписей);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры



Процедура ПередЗаписьюСправочникаДляОбменаПоОрганизации(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТипЭлемента = ТипЗнч(Источник);
	МассивУзловДляРегистрацииСсылки = Новый Массив();
	МассивУзловДляРегистрацииОбъекта = Новый Массив();
	
	ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, "Справочники", 
		МассивУзловДляРегистрацииСсылки, МассивУзловДляРегистрацииОбъекта);
		
	Если Источник.ОбменДанными.Загрузка Тогда
		
		Пока НЕ МассивУзловДляРегистрацииОбъекта.Найти(Источник.ОбменДанными.Отправитель) = Неопределено Цикл
        	МассивУзловДляРегистрацииОбъекта.Удалить(МассивУзловДляРегистрацииОбъекта.Найти(Источник.ОбменДанными.Отправитель));
		КонецЦикла;
		
		Если МассивУзловДляРегистрацииОбъекта.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;		
			
	КонецЕсли;		
		
	Если ТипЭлемента = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда		
		
		Если НЕ Источник.ЭтоГруппа Тогда
			
			ПроизвестиРегистрациюСвязанныхОбъектов(Источник.Владелец, МассивУзловДляРегистрацииОбъекта, "Контрагенты");
						
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.БанковскиеСчета") Тогда
		
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.Организации") Тогда
		
		//нужно зарегистрировать все связанные организации
		ПровестиРегистрацияСвязанныхОрганизаций(Источник.Ссылка, МассивУзловДляРегистрацииОбъекта);
		
	КонецЕсли;		
			
КонецПроцедуры


Процедура ПровестиРегистрацияСвязанныхОрганизаций(СсылкаНаОбъект, МассивУзловДляРегистрацииОбъекта)
	
	Если МассивУзловДляРегистрацииОбъекта.Количество() = 0
		ИЛИ СсылкаНаОбъект.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// регистрируем изменения для самого объекта
	ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрацииОбъекта, СсылкаНаОбъект);
	
	// регистрируем изменения для головной организации и все что связано с головной
	СсылкаНаГоловнуюОрганизация = СсылкаНаОбъект.ГоловнаяОрганизация;
	Если НЕ ЗначениеЗаполнено(СсылкаНаГоловнуюОрганизация) Тогда
		Возврат;
	КонецЕсли;
	
	ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрацииОбъекта, СсылкаНаГоловнуюОрганизация);
	
	// регистрируем все подчиненные головной
	Выборка = ПолучитьВыборкуПодчиненныхОрганизаций(СсылкаНаГоловнуюОрганизация);
	
	Пока Выборка.Следующий() Цикл
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрацииОбъекта, Выборка.Ссылка);		
				
	КонецЦикла;	
	
КонецПроцедуры


Функция ПолучитьВыборкуПодчиненныхОрганизаций(ГоловнаяОрганизация)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ Различные
	               |	Организации.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация
				   |	И Организации.Ссылка <> &ГоловнаяОрганизация";
				   
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);	
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ПередЗаписьюПерерасчетовДляОбменаПоОрганизацииПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	ПередЗаписьюНабораЗаписейДляОбменаПоОрганизации(Источник, Отказ, Замещение, "Перерасчеты");
	
КонецПроцедуры

Процедура ПередЗаписьюРегистраРасчетовДляОбменаПоОрганизацииПередЗаписью(Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов) Экспорт
	
	ПередЗаписьюНабораЗаписейДляОбменаПоОрганизации(Источник, Отказ, Замещение, "РегистрыРасчета");
	
КонецПроцедуры

Процедура ПередЗаписьюСправочникаРедактированиеЭлементовВПодчиненныхУзлахПоОрганизацииПередЗаписью(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПодлежитИзменению = ОпределитьПоЭлементуПодлежитИзменениюВТекущейИБ(Источник);
	
	Если НЕ ПодлежитИзменению Тогда
	
		куфиб_ОбщегоНазначения.СообщитьОбОшибке("Редактирование данных справочника """ + Строка(Источник.Метаданные()) + """ запрещено. 
		|Изменять справочник можно только в головной информационной базе или обладая ролью ""Полные права"". Изменения не могут быть записаны...", Отказ);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалениемСправочникаДляОбменаПоОрганизацииПередУдалением(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, "Справочники");	
	
КонецПроцедуры

Функция ОпределитьПоЭлементуПодлежитИзменениюВТекущейИБ(Источник)
	
	Если Источник.ОбменДанными.Загрузка
		ИЛИ РольДоступна("ПолныеПрава") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	// Если это подчиненныей узел плана обмен по организации то редактирование элемента запрещено
	ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
	
	Если ГлавныйУзел = Неопределено
		ИЛИ ТипЗнч(ГлавныйУзел) <> Тип("ПланОбменаСсылка.ПоОрганизации") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


Функция ОпределениеУзловДляВыгрузкиСправочника(Элемент, ТипЭлемента = Неопределено, 
			ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоотвествиеУзловИОрганизаций = Неопределено) Экспорт
	
	МассивУзловДляПередачи = Новый Массив;
	
	Если Элемент.Метаданные().Имя = "Файлы" И ФайлОрганизации(Элемент) Тогда
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Элемент.ВладелецФайла.Организация, СоотвествиеУзловИОрганизаций);
	ИначеЕсли Элемент.Метаданные().Имя = "ВерсииФайлов" И ФайлОрганизации(Элемент.Владелец) Тогда
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Элемент.Владелец.ВладелецФайла.Организация, СоотвествиеУзловИОрганизаций);
	Иначе
		ДополнитьМассивУзловДляВыгрузкиСправочника(Элемент, МассивУзловДляПередачи, 
			ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, СоотвествиеУзловИОрганизаций);
	КонецЕсли;
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Функция ФайлОрганизации(Элемент)
	Попытка
		Если ЗначениеЗаполнено(Элемент.ВладелецФайла) И (НЕ НеИспользоватьФильтрПоДокументу(Элемент.ВладелецФайла)) И Элемент.ВладелецФайла.Метаданные().Реквизиты.Найти("Организация")<>Неопределено Тогда
			Возврат Истина;	
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Ложь;
КонецФункции