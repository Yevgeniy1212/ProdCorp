////////////////////////////////////////////////////////////////////////////////
// КОММЕНТАРИИ РАСЧЕТОВ

// Функция выводит текст сообщения в окно сообщений или на форму сообщений
//
Функция КомментарийРасчета(	ТекстСообщения, 
							РодительскаяСтрока = НеОпределено,
							ПредставлениеРасшифровкиКомментария = НеОпределено, 
							РасшифровкаКомментария = НеОпределено, 
							ВидСообщения = НеОпределено,
							РаскрытьКомментарий = Истина,
							ПорядокСообщения = Неопределено) Экспорт
	
	#Если Клиент Тогда
		Обработка = глЗначениеПеременной("глОбработкаСообщений");
		Если ВидСообщения = НеОпределено Тогда
			ВидСообщения = Перечисления.ВидыСообщений.Информация;
		КонецЕсли;
		Если РасшифровкаКомментария <> НеОпределено Тогда
			Расшифровки = Новый Массив;
			// расшифровка сообщений представляет собой массив структур "Представление+Расшифровка"
			Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", ПредставлениеРасшифровкиКомментария, РасшифровкаКомментария));
		Иначе
			Расшифровки = НеОпределено;
		КонецЕсли;
		Возврат Обработка.ДобавитьСообщение(
								ТекстСообщения, 
								ВидСообщения, 
								Расшифровки, 
								РодительскаяСтрока, 
								РаскрытьКомментарий,
								ПорядокСообщения);
	#Иначе
		Сообщить(ТекстСообщения);
	#КонецЕсли
	
КонецФункции // КомментарийРасчета()

// Процедура выводит сообщение об ошибке
//
Процедура ОшибкаРасчета(ТекстОшибки,
						ПредставлениеРасшифровкиКомментария = НеОпределено, 
						РасшифровкаКомментария = НеОпределено,
						ПорядокСообщения = Неопределено) Экспорт
	
	#Если Клиент Тогда
		Обработка = глЗначениеПеременной("глОбработкаСообщений");
		
		Если РасшифровкаКомментария <> НеОпределено Тогда
			Расшифровки = Новый Массив;
			// расшифровка сообщений представляет собой массив структур "Представление+Расшифровка"
			Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", ПредставлениеРасшифровкиКомментария, РасшифровкаКомментария));
		Иначе
			Расшифровки = НеОпределено;
		КонецЕсли;
		Обработка.ДобавитьСообщение(ТекстОшибки, 
									Перечисления.ВидыСообщений.Ошибка, 
									Расшифровки,
									, // РодительскаяСтрока
									, // РаскрытьСообщение
									ПорядокСообщения);
	#Иначе
		Сообщить(ТекстОшибки, СтатусСообщения.Важное);
	#КонецЕсли
КонецПроцедуры // ОшибкаРасчета()

// Функция выводит текст сообщения в окно сообщений или на форму сообщений
//
Функция ЗаменитьТекстКомментарияРасчета(ТекстСообщенияИсходный, ТекстСообщенияНовый) Экспорт
	
	#Если Клиент Тогда
		Обработка = глЗначениеПеременной("глОбработкаСообщений");
		СтрокаСообщения = Обработка.ЗаменитьТекстСообщения(ТекстСообщенияИсходный, ТекстСообщенияНовый, Истина);
		
		Возврат СтрокаСообщения;	
	#КонецЕсли
	
КонецФункции// КомментарийРасчета()

// Функция формирует расшифровку, вызывающую некоторое действие (процедуру) в формате,
// используемом в обработке СообщенияВыполняемыхДействий
//
Функция СформироватьРасшифровкуДействия(СтрокаДействия, МассивПараметров = Неопределено) Экспорт

	МассивРасшифровки = Новый Массив;
	МассивРасшифровки.Добавить(СтрокаДействия); // первый элемент всегда строка с описанием действия	
	Если МассивПараметров <> Неопределено Тогда
		Для Инд = 0 По МассивПараметров.ВГраница() Цикл
			МассивРасшифровки.Добавить(МассивПараметров[Инд]);
		КонецЦикла;
	КонецЕсли;

	Возврат  МассивРасшифровки;

КонецФункции // СформироватьРасшифровкуДействия()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАСШИФРОВКИ КОММЕНТАРИЕВ РАСЧЕТОВ

// Процедура открывает окно сведений для редактирования гражданства физлица
// 
// Параметры:
//	МассивПараметров - массив с одним элементов ФизЛицо, чье гражданство открыть
//
Процедура ОткрытьГражданствоФизЛица(МассивПараметров) Экспорт

	ФизЛицо = МассивПараметров[0];
	Попытка
		ФормаЭлемента = ФизЛицо.ПолучитьФорму("ФормаЭлемента");
		ФормаЭлемента.Открыть();
		
		ФормаГражданства = ФизЛицо.ПолучитьФорму("ФормаЗаписиГражданство", ФормаЭлемента);
		ФормаГражданства.НаборЗаписей = ФормаЭлемента.мНаборЗаписейГражданство;
		ФормаГражданства.Открыть();
	Исключение
		// в случае какой-либо ошибки (например, недостаточно прав) - ничего не делаем	
	КонецПопытки;

КонецПроцедуры // ОткрытьГражданствоФизЛица()

// Процедура открывает окно сведений для редактирования пенсионного обеспечения физлица
// 
// Параметры:
//	МассивПараметров - массив с одним элементов ФизЛицо, чье пенсионное обеспечение открыть
//
Процедура ОткрытьПенсионноеОбеспечениеФизЛица(МассивПараметров) Экспорт

	ФизЛицо = МассивПараметров[0];
	Попытка
		ФормаЭлемента = ФизЛицо.ПолучитьФорму("ФормаЭлемента");
		ФормаЭлемента.Открыть();
		
		ФормаПенсионноеОбеспечение = ФизЛицо.ПолучитьФорму("ФормаЗаписиПенсионноеОбеспечение", ФормаЭлемента);
		ФормаПенсионноеОбеспечение.НаборЗаписей = ФормаЭлемента.мНаборЗаписейПенсионноеОбеспечение;
		ФормаПенсионноеОбеспечение.Открыть();
	Исключение
		// в случае какой-либо ошибки (например, недостаточно прав) - ничего не делаем	
	КонецПопытки;

КонецПроцедуры // ОткрытьПенсионноеОбеспечениеФизЛица()

// Процедура открывает окно сведений для редактирования сведений об инвалидности физлица
// 
// Параметры:
//	МассивПараметров - массив с одним элементов ФизЛицо, чьи сведения об инвалидности открыть
//
Процедура ОткрытьСведенияОбИнвалидностиФизЛица(МассивПараметров) Экспорт

	ФизЛицо = МассивПараметров[0];
	Попытка
		ФормаЭлемента = ФизЛицо.ПолучитьФорму("ФормаЭлемента");
		ФормаЭлемента.Открыть();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Период 
		|ИЗ
		|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(, ФизЛицо = &ФизЛицо)
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		ФормаСведенияОбИнвалидности = РегистрыСведений.СведенияОбИнвалидностиФизлиц.ПолучитьФорму("ФормаЗаписиДополнительная", ФормаЭлемента);
		ФормаСведенияОбИнвалидности.ФизЛицо = ФизЛицо;
		
		Если Выборка.Следующий() Тогда
			ФормаСведенияОбИнвалидности.Период = Выборка.Период;
			ФормаСведенияОбИнвалидности.Прочитать();
		КонецЕсли;
		
		ФормаСведенияОбИнвалидности.Открыть();
		
	Исключение
		// в случае какой-либо ошибки (например, недостаточно прав) - ничего не делаем	
	КонецПопытки;

КонецПроцедуры // ОткрытьСведенияОбИнвалидностиФизЛица()

// Процедура открывает окно сведений для редактирования сведений о физлица как участнике ВОВ
// 
// Параметры:
//	МассивПараметров - массив с одним элементов ФизЛицо, чьи сведения об инвалидности открыть
//
Процедура ОткрытьСведенияОбУчастникеВОВФизЛица(МассивПараметров) Экспорт

	ФизЛицо = МассивПараметров[0];
	Попытка
		ФормаЭлемента = ФизЛицо.ПолучитьФорму("ФормаЭлемента");
		ФормаЭлемента.Открыть();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Период 
		|ИЗ
		|	РегистрСведений.СведенияОФизлицахУчастникахВОВ.СрезПоследних(, ФизЛицо = &ФизЛицо)
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		ФормаСведенияОбУчастникеВОВ = РегистрыСведений.СведенияОФизлицахУчастникахВОВ.ПолучитьФорму("ФормаЗаписиДополнительная", ФормаЭлемента);
		ФормаСведенияОбУчастникеВОВ.ФизЛицо = ФизЛицо;
		
		Если Выборка.Следующий() Тогда
			ФормаСведенияОбУчастникеВОВ.Период = Выборка.Период;
			ФормаСведенияОбУчастникеВОВ.Прочитать();
		КонецЕсли;
		
		ФормаСведенияОбУчастникеВОВ.Открыть();
		
	Исключение
		// в случае какой-либо ошибки (например, недостаточно прав) - ничего не делаем	
	КонецПопытки;

КонецПроцедуры // ОткрытьСведенияОбУчастникеВОВФизЛица()

// Процедура открывает окно сведений для редактирования сведений о налогообложении физлица
// 
// Параметры:
//	МассивПараметров - массив с одним элементов ФизЛицо, чье пенсионное обеспечение открыть
//
Процедура ОткрытьНалогиФизЛица(МассивПараметров) Экспорт

	ФизЛицо = МассивПараметров[0];
	Попытка
		ФормаЭлемента = ФизЛицо.ПолучитьФорму("ФормаЭлемента");
		ФормаЭлемента.Открыть();
		
		ФормаВводаДанныхНалоги = ФизЛицо.ПолучитьФорму("ФормаВводаДанныхНалоги", ФормаЭлемента);
		ФормаВводаДанныхНалоги.Открыть();
	Исключение
		// в случае какой-либо ошибки (например, недостаточно прав) - ничего не делаем	
	КонецПопытки;

КонецПроцедуры // ОткрытьНалогиФизЛица()

// Процедура открывает форму для редактирования регистра сведений СведенияОСтавкахИПНиСН
//
// Параметры:
//	МассивПараметров - массив с одним элементом - значение Перечисление.ВидыСтавокИПНиСН
//
Процедура ОткрытьСведенияОСтавкахИПНиСН(МассивПараметров) Экспорт

	ВидСтавки = МассивПараметров[0];
	Попытка
		Форма = РегистрыСведений.СведенияОСтавкахИПНиСН.ПолучитьФормуСписка();
		Форма.ВидСтавокИПНиСН = ВидСтавки;
		Форма.Открыть();
	Исключение
		// если вдруг что-то не получилось - ничего не делаем
	КонецПопытки;

КонецПроцедуры // ОткрытьСведенияОСтавкахИПНиСН()

// Процедура открывает окно учетной политику по НУ для переданного налогоплательщика-организации
//
// Параметры:
//	МассивПараметров - массив из одного элемента - организации-налогоплательщика
//
Процедура ОткрытьУчетнуюПолитикуПоНалоговомуУчету(МассивПараметров) Экспорт

    Налогоплательщик = МассивПараметров[0];
    Попытка
    	
    	Запрос = Новый Запрос;
    	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
    	Запрос.Текст = "
    	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
    	|	УчетнаяПолитикаНУ.Период
    	|ИЗ
    	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(, Организация = &Налогоплательщик) КАК УчетнаяПолитикаНУ
    	|";
    	
    	Выборка = Запрос.Выполнить().Выбрать();
    	
    	ФормаЗаписи = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.ПолучитьФормуРедактированияЗаписи();
    	ФормаЗаписи.Организация = Налогоплательщик;
    	Если Выборка.Следующий() Тогда
    		ФормаЗаписи.Период  = Выборка.Период;
    		ФормаЗаписи.Прочитать();
    	КонецЕсли;
    	ФормаЗаписи.Открыть();
    
    Исключение
    	// если что-то не получилось - ничего не делаем
    КонецПопытки;	

КонецПроцедуры // ОткрытьУчетнуюПолитикуПоНалоговомуУчету()

// Процедура открывает форму элемента справочника организации
//
// Параметры:
// 	МассивПараметров - массив с одним элементом - СправочникСсылка.Организации
//
Процедура ОткрытьФормуОрганизации(МассивПараметров) Экспорт

	Организация = МассивПараметров[0];
	Попытка
		Форма = Организация.ПолучитьФорму();
		Форма.Открыть();
	Исключение
		// в случае какой-либо ошибки - ничего не делаем
	КонецПопытки;

КонецПроцедуры // ОткрытьФормуОрганизации()

// Процедура открывает форму регистра сведений КодыОрганизацийВБанковскойСистеме
//
// Параметры:
// 	МассивПараметров - массив с двумя элементам - СправочникСсылка.Организации, СправочникСсылка.Банк
//
Процедура ОткрытьКодыОрганизацийВБанковскойСистеме(МассивПараметров) Экспорт

	Организация = МассивПараметров[0];
	Банк = МассивПараметров[1];
	Попытка
		Форма = РегистрыСведений.КодыОрганизацийВБанковскойСистеме.ПолучитьФормуСписка();
		Форма.Отбор.Организация.Установить(Организация, Истина);
		Форма.Отбор.Банк.Установить(Банк, Истина);
		Форма.Открыть();
	Исключение
		// в случае какой-либо ошибки - ничего не делаем
	КонецПопытки;

КонецПроцедуры // ОткрытьФормуОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВСТРОЕННОЙ СПРАВКИ

Процедура УстановитьВидимостьТекста(Документ, Ид, ВключитьВидимость, Параметр = "inline") Экспорт
	
	// Документ должен быть всегда загружен и в нем должен найтись нужный нам элемент
	// Пользователь может увидеть данные сообщения только в том случае, если при кодировании
	// механизма были допущены ошибки
	
	// Данное сообщение будет выведено, если мы пытаемся обновить справку ПриОткрытии формы
	// Обновлять справку в этом событии не нужно, так как текст справки был изначально
	// сформирован правильно
	Если Документ.readyState <> "complete" Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Справка: справка еще не загружена");
		Возврат;
	КонецЕсли;
	
	// Данное сообщение будет выведено, если мы пытаемся переключить видимость элемента
	// которого нет в справке. Такое может только в случае, если бы допустили ошибку в коде
	Элемент = Документ.getElementById(Ид);
	Если Элемент = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Справка: не найден элемент " + Ид);
		Возврат;
	КонецЕсли;
	
	Элемент.style.display = ?(ВключитьВидимость, Параметр, "none");
	
КонецПроцедуры

Процедура ПолеHTMLДокументаOnClick(Элемент, pEvtObj, Форма) Экспорт
	
	ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если ЭлементHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементHTML.id = "Команда" Тогда
		Попытка
			Форма.ВыполнитьКомандуФормы(ЭлементHTML.pathname, ЭлементHTML.target);
		Исключение
			// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		pEvtObj.returnValue = Ложь;
		
	ИначеЕсли ЭлементHTML.id = "ОткрытьСписок" Тогда
		Менеджер = Вычислить(ЭлементHTML.pathname);
		Попытка
			ФормаСписка = Менеджер.ПолучитьФормуСписка();
			ФормаСписка.Открыть();
		Исключение
			// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		
		pEvtObj.returnValue = Ложь;
		
	ИначеЕсли ЭлементHTML.id = "АктивизироватьЭУ" Тогда
		Форма.ТекущийЭлемент = Вычислить("Форма.ЭлементыФормы." + ЭлементHTML.pathname);
		pEvtObj.returnValue = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЭлемент(ЭлементHTML, НазваниеТега)
	
	ТекущийЭлементHTML = ЭлементHTML;
	Пока Истина Цикл
		Если ТекущийЭлементHTML.tagName = "BODY" Тогда
			Возврат Неопределено;
		ИначеЕсли ТекущийЭлементHTML.tagName = НазваниеТега Тогда
			Возврат ТекущийЭлементHTML;
		Иначе
			ТекущийЭлементHTML = ТекущийЭлементHTML.parentNode;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ПолеHTMLДокументаOnMouseOver(Элемент, pEvtObj, ВыделятьРазделы = Ложь) Экспорт
	
	Если ВыделятьРазделы Тогда
		ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "DIV");
		Если ЭлементHTML <> Неопределено Тогда
			ЭлементHTML.style.paddingtop		= 0;
			ЭлементHTML.style.paddingright		= 3;
			ЭлементHTML.style.paddingbottom		= 2;
			ЭлементHTML.style.paddingleft		= 3;
			ЭлементHTML.style.borderwidth		= 1;
			ЭлементHTML.style.borderstyle		= "solid";
			ЭлементHTML.style.backgroundcolor	= "#FFFBF0";
		КонецЕсли;
	КонецЕсли;
	ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если ЭлементHTML <> Неопределено Тогда
		ЭлементHTML.style.backgroundcolor	= ВернутьШестнадцатиричноеПредставлениеЦвета(ВстроеннаяСправка_ФонВыделеннойСсылки());
		ЭлементHTML.style.color				= ВернутьШестнадцатиричноеПредставлениеЦвета(ВстроеннаяСправка_ЦветВыделеннойСсылки());
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеHTMLДокументаOnMouseOut(Элемент, pEvtObj, ВыделятьРазделы = Ложь) Экспорт
	
	Если ВыделятьРазделы Тогда
		ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "DIV");
		Если ЭлементHTML <> Неопределено Тогда
			ЭлементHTML.style.paddingtop		= 1;
			ЭлементHTML.style.paddingright		= 4;
			ЭлементHTML.style.paddingbottom		= 3;
			ЭлементHTML.style.paddingleft		= 4;
			ЭлементHTML.style.borderstyle		= "none";
			ЭлементHTML.style.backgroundcolor	= "";
		КонецЕсли;
	КонецЕсли;
	ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если ЭлементHTML <> Неопределено Тогда
		ЭлементHTML.style.backgroundcolor	= "";
		ЭлементHTML.style.color				= "";
	КонецЕсли;
	
КонецПроцедуры

Функция ВстроеннаяСправка_ЦветФона() Экспорт
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветРамки() Экспорт
	
	Возврат Новый Цвет(137, 132, 119);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветСсылки() Экспорт
	
	Возврат Новый Цвет(0, 0, 0);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветВыделеннойСсылки() Экспорт
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

Функция ВстроеннаяСправка_ФонВыделеннойСсылки() Экспорт
	
	Возврат Новый Цвет(64, 94, 172);
	
КонецФункции

// Возвращает описание стилей, используемых при показе встроенной ситуационно-зависимой справки
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   строка
//
Функция ВстроеннаяСправка_СтилиДокумента() Экспорт

	Возврат "
	|		<STYLE type=text/css>
	|			DIV.top {
	|				PADDING: 0;
	|			}
	|			DIV {
	|				PADDING: 3px 0px 3px 3px;
	|				BORDER-TOP-COLOR: #dadac4;
	|				BORDER-RIGHT-COLOR: #dadac4;
	|				BORDER-BOTTOM-COLOR: #dadac4;
	|				BORDER-LEFT-COLOR: #dadac4;
	|			}
	|			A {
	|				PADDING-TOP: 1px;
	|				PADDING-BOTTOM: 1px;
	|			}
	|			BODY {
	|				SCROLLBAR-FACE-COLOR: #fffbf0;
	|				SCROLLBAR-HIGHLIGHT-COLOR: #dadac4;
	|				SCROLLBAR-3DLIGHT-COLOR: #fff; MARGIN: 5px;
	|				SCROLLBAR-ARROW-COLOR: #708090;
	|				SCROLLBAR-TRACK-COLOR: #fffbf0;
	|				SCROLLBAR-DARKSHADOW-COLOR: #fff;
	|				MARGIN: 5px 0px 5px 5px;
	|			}
	|			IMG {
	|				MARGIN-LEFT: 3px;
	|			}
	|		</STYLE>";

КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ЦВЕТАМИ HTML

// Возвращает строкое представление в виде шестнадцатиричного числа для переданного цвета
//
Функция ВернутьШестнадцатиричноеПредставлениеЦвета(ВыбранныйЦвет) Экспорт
	
	Если ТипЗнч(ВыбранныйЦвет) <> Тип("Цвет") Тогда
		Возврат "";
	КонецЕсли;
	
	Красный	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Красный);
	Зеленый	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Зеленый);
	Синий	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Синий);
	
	Возврат "#" + Красный + Зеленый + Синий;
	
КонецФункции // ВернутьШестнадцатиричноеПредставлениеЦвета()

