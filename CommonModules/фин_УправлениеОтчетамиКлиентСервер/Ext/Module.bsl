Функция ОпределитьСтрокуИерархииДляДобавленияГруппировки(ГруппировкиДерево,СтрокаГруппировок) Экспорт
	ВидСтроки = ОпределитьВидГруппировок(СтрокаГруппировок.ВидГруппировки);
	НайденнаяСтрока = Неопределено;
	СтрокиДерева = ГруппировкиДерево.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.ВидГруппировки = ВидСтроки Тогда
			НайденнаяСтрока = СтрокаДерева;
		КонецЕсли;
	КонецЦикла;
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = ГруппировкиДерево.ПолучитьЭлементы().Добавить();
		НайденнаяСтрока.ВидГруппировки = ВидСтроки;
		НайденнаяСтрока.ЭтоГруппа = Истина;
		НайденнаяСтрока.Представление = ?(ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.ГруппировкаСтрок"),"Строки",?(ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.Колонка"),"Колонки","Поля детальных записей"));
	КонецЕсли;
	Если ВидСтроки<>ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.Поле") Тогда
		Пока НайденнаяСтрока.ПолучитьЭлементы().Количество()<>0 Цикл
			НайденнаяСтрока = НайденнаяСтрока.ПолучитьЭлементы()[0];
		КонецЦикла;
	КонецЕсли;
	возврат НайденнаяСтрока;
КонецФункции

Функция ОпределитьВидГруппировок(ВидСтроки) Экспорт
	Результат = ВидСтроки;
	Если ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.ГруппировкаСтрокСИерархией") ИЛИ ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.ГруппировкаТолькоИерархия") Тогда
		Результат = ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.ГруппировкаСтрок");
	ИначеЕсли ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.КолонкаСИерерахией") Тогда
		Результат = ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.Колонка");
	ИначеЕсли ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.ПустаяСсылка") Тогда
		Результат = ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.Поле");
	КонецЕсли;
	возврат Результат;
КонецФункции

Функция ОпределитьВидГруппировкиПриемникаПриПеретаскивании(ВидГруппировкиИсточника,ЗНАЧ ВидГруппировкиПриемника) Экспорт
	Если ВидГруппировкиПриемника = ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.Колонка") Тогда
		Если ВидГруппировкиИсточника = ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.ГруппировкаСтрокСИерархией") ИЛИ ВидГруппировкиИсточника = ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.ГруппировкаТолькоИерархия") Тогда
			ВидГруппировкиПриемника = ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.КолонкаСИерерахией");
		КонецЕсли;
	ИначеЕсли ВидГруппировкиПриемника = ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.ГруппировкаСтрок") Тогда
		Если ВидГруппировкиИсточника = ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.КолонкаСИерерахией") Тогда
			ВидГруппировкиПриемника = ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.ГруппировкаСтрокСИерархией");
		КонецЕсли;
	КонецЕсли;
	Возврат ВидГруппировкиПриемника;
КонецФункции

Функция ПредставлениеГруппировкиОтчета(СтрокаГруппировки,ДополнительныеПредставления=Неопределено) Экспорт
	Текст = Строка(СтрокаГруппировки.Измерение);
	Если ТипЗнч(СтрокаГруппировки.Измерение)=Тип("ПеречислениеСсылка.фин_ФактическиеПоказателиБюджетирования") И Найти(Текст,"Разрез")<>0 Тогда
		Текст = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(СтрокаГруппировки.Измерение);
	КонецЕсли;
	Если ДополнительныеПредставления<>Неопределено Тогда
		ЭлементСписка = ДополнительныеПредставления.НайтиПоЗначению(СтрокаГруппировки.Измерение);
		Если ЭлементСписка<>Неопределено Тогда
			Текст = ЭлементСписка.Представление;
		КонецЕсли;
	КонецЕсли;
	Если СтрокаГруппировки.ВидГруппировки=ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.ГруппировкаСтрокСИерархией") Тогда
		Текст = Текст+" (с иерархией)";
	ИначеЕсли СтрокаГруппировки.ВидГруппировки=ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.КолонкаСИерерахией") Тогда
		Текст = Текст+" (с иерархией)";
	ИначеЕсли СтрокаГруппировки.ВидГруппировки=ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.ГруппировкаТолькоИерархия") Тогда
		Текст = Текст+" (только иерархия)";
	КонецЕсли;
	//Если ЗначениеЗаполнено(СтрокаГруппировки.Расположение) Тогда
	//	Текст = Текст+", поля группировок: "+СтрокаГруппировки.Расположение;
	//КонецЕсли;
	Если СтрокаГруппировки.СоставноеПоле Тогда
		ПредставлениеСписка = "";
		ЕстьБазовое = Ложь;
		Для Каждого ЭлементСписка Из СтрокаГруппировки.Состав Цикл
			Если ЭлементСписка.Значение = "ЗначениеПоля" Тогда
				ЕстьБазовое = Истина;
				ПредставлениеСписка = ПредставлениеСписка+?(ПредставлениеСписка="","",",")+"Значение разреза";
			Иначе
				ПредставлениеСписка = ПредставлениеСписка+?(ПредставлениеСписка="","",",")+?(ЗначениеЗаполнено(ЭлементСписка.Представление),ЭлементСписка.Представление,ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;
		Если ЕстьБазовое Тогда
			Текст = Текст+", составное поле: "+ПредставлениеСписка;
		Иначе
			Текст = ПредставлениеСписка;
			Если СтрокаГруппировки.ВидГруппировки=ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.ГруппировкаСтрокСИерархией") Тогда
				Текст = Текст+" (с иерархией)";
			ИначеЕсли СтрокаГруппировки.ВидГруппировки=ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.КолонкаСИерерахией") Тогда
				Текст = Текст+" (с иерархией)";
			ИначеЕсли СтрокаГруппировки.ВидГруппировки=ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.ГруппировкаТолькоИерархия") Тогда
				Текст = Текст+" (только иерархия)";
			КонецЕсли;
		КонецЕсли;
		//Если ЗначениеЗаполнено(СтрокаГруппировки.РасположениеРеквизитов) Тогда
		//	Текст = Текст+", поля реквизитов располагаются: "+СтрокаГруппировки.РасположениеРеквизитов;
		//КонецЕсли;
	КонецЕсли;
	Если СтрокаГруппировки.ПрименятьОформление Тогда
		Текст = Текст+", оформление: "+" цвет "+строка(СтрокаГруппировки.Цвет)+" шрифт "+строка(СтрокаГруппировки.Шрифт);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаГруппировки.ОтборПоУровнюЗначимости) Тогда
		Текст = Текст+", отбор по уровню значимости отклонений: "+СтрокаГруппировки.ОтборПоУровнюЗначимости+" "+СтрокаГруппировки.УровеньЗначимости;
	КонецЕсли;
	Возврат Текст;
КонецФункции

Процедура ЗаполнитьИерархиюГруппировокИзТаблицы(ГруппировкиДерево,Группировки,ТекущаяТаблица,ПоддержкаНесколькихТаблиц,ПринудительнаяОбработкаКолонкиСортировки=Ложь) Экспорт
	Для Каждого ЭлементДерева Из ГруппировкиДерево.ПолучитьЭлементы() Цикл
		ЭлементДерева.ПолучитьЭлементы().Очистить();
	КонецЦикла;
	Для Каждого СтрокаГруппировок Из Группировки Цикл
		Если ПоддержкаНесколькихТаблиц И СтрокаГруппировок.Таблица <> ТекущаяТаблица Тогда
			Продолжить;
		КонецЕсли;
		СтрокаДобавления = ОпределитьСтрокуИерархииДляДобавленияГруппировки(ГруппировкиДерево,СтрокаГруппировок);
		СтрокаИерархии = СтрокаДобавления.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИерархии,СтрокаГруппировок);
		Если ПринудительнаяОбработкаКолонкиСортировки Тогда
			Если ТипЗнч(СтрокаГруппировок.Сортировка)=Тип("Строка") И ЗначениеЗаполнено(СтрокаГруппировок.Сортировка) Тогда
				СтрокаИерархии.Сортировка = фин_ОбщегоНазначенияСервер.ПреобразоватьИзСтроки(СтрокаГруппировок.Сортировка);
			КонецЕсли;
			Если ТипЗнч(СтрокаГруппировок.Состав)=Тип("Строка") И ЗначениеЗаполнено(СтрокаГруппировок.Состав) Тогда
				СтрокаИерархии.Состав = фин_ОбщегоНазначенияСервер.ПреобразоватьИзСтроки(СтрокаГруппировок.Состав);
			КонецЕсли;
			Если ТипЗнч(СтрокаГруппировок.Цвет)=Тип("Строка") И ЗначениеЗаполнено(СтрокаГруппировок.Цвет) Тогда
				СтрокаИерархии.Цвет = фин_ОбщегоНазначенияСервер.ПреобразоватьИзСтроки(СтрокаГруппировок.Цвет);
			КонецЕсли;
			Если ТипЗнч(СтрокаГруппировок.Шрифт)=Тип("Строка") И ЗначениеЗаполнено(СтрокаГруппировок.Шрифт) Тогда
				СтрокаИерархии.Шрифт = фин_ОбщегоНазначенияСервер.ПреобразоватьИзСтроки(СтрокаГруппировок.Шрифт);
			КонецЕсли;
		КонецЕсли;
		СтрокаИерархии.Представление = ПредставлениеГруппировкиОтчета(СтрокаИерархии);
	КонецЦикла;
КонецПроцедуры

Процедура ПеренестиНастройкиТаблицыОтчета(ОбрабатываемыеТаблицыФормы,ИсходнаяТаблица,Результирующая,Копирование = Ложь) Экспорт
	Для Каждого ТаблицаФормы Из ОбрабатываемыеТаблицыФормы Цикл
		СтрокиОбработать = ТаблицаФормы.НайтиСтроки(Новый Структура("Таблица",ИсходнаяТаблица));
		Для Каждого СтрокаОбработать Из СтрокиОбработать Цикл
			Если Копирование Тогда
				НоваяСтрока = ТаблицаФормы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаОбработать);
				НоваяСтрока.Таблица = Результирующая;
			Иначе
				СтрокаОбработать.Таблица = Результирующая;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьТекстПериода(НадписьПериодПланирования,ИмяОтчета,ВидДанных,Элементы,Периодичность,Сценарий,НачалоПериодаПланирования,КонецПериодаПланирования,ПриводитьКонецПериода=Истина) Экспорт
	ОбъектПериодичность = ?(ИмяОтчета<>"фин_ИсполнениеБюджета" И ВидДанных<>ПредопределенноеЗначение("Перечисление.фин_ВидыДанныхОтчета.Плановые") И Элементы.ВидДанных.Видимость,Периодичность,Сценарий);
	УстановитьТекстПериодаПоВыбраннойПериодичности(НадписьПериодПланирования,ОбъектПериодичность,НачалоПериодаПланирования,КонецПериодаПланирования,ПриводитьКонецПериода);
КонецПроцедуры

Процедура УстановитьТекстПериодаПоВыбраннойПериодичности(НадписьПериодПланирования,ОбъектПериодичность,НачалоПериодаПланирования,КонецПериодаПланирования,ПриводитьКонецПериода=Истина) Экспорт
	Если ПриводитьКонецПериода Тогда
		КонецПериодаПланирования 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(НачалоПериодаПланирования,ОбъектПериодичность);
	КонецЕсли;
	НадписьПериодПланирования 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(НачалоПериодаПланирования,ОбъектПериодичность);
	ТекстГоризонт 				= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(КонецПериодаПланирования,ОбъектПериодичность);
	Если ТекстГоризонт<>НадписьПериодПланирования Тогда
		НадписьПериодПланирования = НадписьПериодПланирования+" - "+ТекстГоризонт;
	КонецЕсли;
КонецПроцедуры

Процедура ПеренестиПодчиненныеСтрокиНаУказанную(СтрокаИсточник,СтрокаПриемник,КопируемаяСтрока) Экспорт
	Подчиненные = СтрокаИсточник.ПолучитьЭлементы();
	Для Каждого ПодчиненнаяСтрока Из Подчиненные Цикл
		Если ПодчиненнаяСтрока<>СтрокаПриемник И ПодчиненнаяСтрока<>КопируемаяСтрока Тогда
			ПеренестиСтроку(ПодчиненнаяСтрока,СтрокаПриемник,СтрокаИсточник,,КопируемаяСтрока);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПеренестиПодчиненныеСтрокиНаРодителя(СтрокаПереносимая,ПриемникВсегоПереносаСтрок) Экспорт
	Родитель = СтрокаПереносимая.ПолучитьРодителя();	
	Подчиненные = СтрокаПереносимая.ПолучитьЭлементы();
	Для Каждого ПодчиненнаяСтрока Из Подчиненные Цикл
		ПеренестиСтроку(подчиненнаяСтрока,Родитель,СтрокаПереносимая,ПриемникВсегоПереносаСтрок);
	КонецЦикла;
КонецПроцедуры

Процедура ПеренестиСтроку(СтрокаПереносимая,СтрокаПриемник,КонтрольнаяСтрока,ПриемникВсегоПереносаСтрок=Неопределено,ИсточникВсегоПереносаСтрок = Неопределено) Экспорт
	Если СтрокаПереносимая = КонтрольнаяСтрока тогда
		Возврат;
	КонецЕсли;
	Родитель 	= СтрокаПереносимая.ПолучитьРодителя();	
	НоваяСтрока = СтрокаПриемник.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПереносимая);
	Если СтрокаПереносимая = ПриемникВсегоПереносаСтрок Тогда
		ПриемникВсегоПереносаСтрок = НоваяСтрока;
	КонецЕсли;
	Подчиненные = СтрокаПереносимая.ПолучитьЭлементы();
	Для Каждого подчиненнаяСтрока Из Подчиненные Цикл
		Если подчиненнаяСтрока = КонтрольнаяСтрока тогда
			Возврат;
		КонецЕсли;
		Если подчиненнаяСтрока = ИсточникВсегоПереносаСтрок Тогда
			Продолжить;
		КонецЕсли;
		ПеренестиСтроку(подчиненнаяСтрока,НоваяСтрока,КонтрольнаяСтрока,ПриемникВсегоПереносаСтрок,ИсточникВсегоПереносаСтрок);
	КонецЦикла;
	Родитель.ПолучитьЭлементы().Удалить(СтрокаПереносимая);
КонецПроцедуры

// Процедура управляет состояние поля табличного документа
//
//Параметры:
//  ПолеТабличногоДокумента – ПолеФормы – поле формы с видом ПолеТабличногоДокумента,
//                            для которого необходимо установить состояние.
//  Состояние               – Строка – задает вид состояния.
//
Процедура УстановитьСостояниеПоляТабличногоДокумента(ПолеТабличногоДокумента, Состояние = "НеИспользовать") Экспорт
	
	Если ТипЗнч(ПолеТабличногоДокумента) = Тип("ПолеФормы") 
		И ПолеТабличногоДокумента.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
		ОтображениеСостояния = ПолеТабличногоДокумента.ОтображениеСостояния;
		Если ВРег(Состояние) = "НЕИСПОЛЬЗОВАТЬ" Тогда
			ОтображениеСостояния.Видимость                      = Ложь;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			ОтображениеСостояния.Картинка                       = Новый Картинка;
			ОтображениеСостояния.Текст                          = "";
		ИначеЕсли ВРег(Состояние) = "НЕАКТУАЛЬНОСТЬ" Тогда
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			ОтображениеСостояния.Картинка                       = Новый Картинка;
			ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.'");;
		ИначеЕсли ВРег(Состояние) = "ФОРМИРОВАНИЕОТЧЕТА" Тогда  
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
			ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет формируется...'");
		Иначе
			ВызватьИсключение(НСтр("ru = 'Недопустимое значение параметра (параметр номер ''2'')'"));
		КонецЕсли;
	Иначе
		ВызватьИсключение(НСтр("ru = 'Недопустимое значение параметра (параметр номер ''1'')'"));
	КонецЕсли;
	
КонецПроцедуры
