Функция ПолучитьНадписьПериодаСтрокой(ПериодПланирования,Сценарий) Экспорт
	ГоризонтПланирования = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьГоризонтПланирования(ПериодПланирования,Сценарий,ложь);
	
	Возврат ПредставлениеПериода(ПериодПланирования,ГоризонтПланирования, "ФП = истина");
Конецфункции

Процедура УстановитьДоступностьФормыРасчТаблДляРедактирования(ЭтотОбъект, ЭтаФорма) Экспорт
	Если ЭтотОбъект.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "Редактирование данных этого периода запрещено. Документ открыт в режиме просмотра...";
	
	Если ЭтотОбъект.Состояние = Перечисления.СостоянияОбъектов.Утвержден Тогда
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
Конецпроцедуры

Процедура РаспределитьПомесяцам(ТекСтрока,тзРаспределения) Экспорт
	Итсумма =0;
	
	Для каждого СтрокаТЗ ИЗ тзРаспределения Цикл
		Имя = "Сумма"+СокрЛП(СтрокаТЗ.НомерСтроки);
		Сумма = ТекСтрока.Сумма*СтрокаТЗ.Коэффициент;
		ТекСтрока[Имя] = Сумма;
		Итсумма = Итсумма+Сумма;
	КонецЦикла;
	    ТекСтрока.КонтрольнаяСумма = ИтСумма;
Конецпроцедуры

Процедура РассчитатьЗависимыеВиды(ДокументОбъект,СтрокаРасчТаблицы,Признак) Экспорт
	
	Запрос = Новый Запрос;
	ДокументОбъект.Записать();
	
	Запрос.УстановитьПараметр("ТекДокумент",ДокументОбъект.ссылка);
	Запрос.УстановитьПараметр("Бюджет",ДокументОбъект.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("Родитель",ДокументОбъект.СтатьяБюджета);
	Запрос.УстановитьПараметр("Дата",ДокументОбъект.ПериодПланирования);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БюджетированиеЗависимыеСтатьиПоЗарплатеСрезПоследних.ОсновнаяСтатьяБюджета,
	|	БюджетированиеЗависимыеСтатьиПоЗарплатеСрезПоследних.ЗависимаяСтатьяБюджета,
	|	ЕСТЬNULL(БюджетированиеЗависимыеСтатьиПоЗарплатеСрезПоследних.Коэффициент, 0) КАК Коэффициент,
	|	ЕСТЬNULL(БюджетированиеЗависимыеСтатьиПоЗарплатеСрезПоследних.Перерасчет, 0) КАК Перерасчет,
	|	РасчДокумент.ПорядковыйНомерПоказателя КАК ЗависимыйПорядковыйНомерПоказателя,
	|	ОснРасчДокумент.ПорядковыйНомерПоказателя КАК ОсновнойПорядковыйНомерПоказателя
	|ИЗ
	|	РегистрСведений.БюджетированиеЗависимыеСтатьиПоЗарплате.СрезПоследних(
	|			&Дата,
	|			Бюджет = &Бюджет
	|				И ОсновнаяСтатьяБюджета.ЯвляетсяДолжностнымОкладом
	|				И ЗависимаяСтатьяБюджета.Родитель = &Родитель) КАК БюджетированиеЗависимыеСтатьиПоЗарплатеСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Док.СтатьяБюджета КАК СтатьяБюджета,
	|			Док.ПорядковыйНомерПоказателя КАК ПорядковыйНомерПоказателя
	|		ИЗ
	|			Документ.б_РасчетнаяТаблица.РасчетнаяТаблица КАК Док
	|		ГДЕ
	|			Док.Ссылка = &ТекДокумент) КАК РасчДокумент
	|		ПО (РасчДокумент.СтатьяБюджета = БюджетированиеЗависимыеСтатьиПоЗарплатеСрезПоследних.ЗависимаяСтатьяБюджета)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Док.СтатьяБюджета КАК СтатьяБюджета,
	|			Док.ПорядковыйНомерПоказателя КАК ПорядковыйНомерПоказателя
	|		ИЗ
	|			Документ.б_РасчетнаяТаблица.РасчетнаяТаблица КАК Док
	|		ГДЕ
	|			Док.Ссылка = &ТекДокумент) КАК ОснРасчДокумент
	|		ПО (ОснРасчДокумент.СтатьяБюджета = БюджетированиеЗависимыеСтатьиПоЗарплатеСрезПоследних.ОсновнаяСтатьяБюджета)";
	
	 Результат = Запрос.Выполнить().Выбрать();
	 
	 Пока Результат.Следующий() Цикл
		 Если Признак = "Перерасчет" тогда
			 Если Результат.Перерасчет Тогда
				 
				 СтрокаРасчТаблицы["Сумма"+СокрЛП(Результат.ЗависимыйПорядковыйНомерПоказателя)] = СтрокаРасчТаблицы.ДолжностнойОклад*СтрокаРасчТаблицы.КоличествоСтавок*Окр((Результат.Коэффициент/12)*(Месяц(ДокументОбъект.ПериодПерерасчета)-1),1,1)
				 																					+ СтрокаРасчТаблицы.ДолжностнойОкладПлановый*СтрокаРасчТаблицы.КоличествоСтавок*Окр((Результат.Коэффициент/12)*(13-Месяц(ДокументОбъект.ПериодПерерасчета)),1,1);
	 
			 Иначе
				 СтрокаРасчТаблицы["Сумма"+СокрЛП(Результат.ЗависимыйПорядковыйНомерПоказателя)] = СтрокаРасчТаблицы.ДолжностнойОкладПлановый*СтрокаРасчТаблицы.КоличествоСтавок*Результат.Коэффициент;
			 КонецЕсли;
			 
		 Иначе
			 Если (Результат.ЗависимаяСтатьяБюджета.Наименование = "премия" ИЛИ Результат.ЗависимаяСтатьяБюджета.Наименование = "премии" ИЛИ Результат.ЗависимаяСтатьяБюджета.Наименование = "премии ежеквартальные") 
				 И СтрокаРасчТаблицы.Подразделение.Наименование = "Руководство"  Тогда
					
					 СтрокаРасчТаблицы["Сумма"+СокрЛП(Результат.ЗависимыйПорядковыйНомерПоказателя)] = 0;
			 Иначе
					 СтрокаРасчТаблицы["Сумма"+СокрЛП(Результат.ЗависимыйПорядковыйНомерПоказателя)] = СтрокаРасчТаблицы.ДолжностнойОклад*СтрокаРасчТаблицы.КоличествоСтавок*Результат.Коэффициент;
			 КонецЕсли;
				 
		 КонецЕсли;
	 КонецЦикла;
	 
 КонецПроцедуры

Процедура РассчитатьЗависимыеВидыЗарплата(ДокументОбъект,СтрокаРасчТаблицы,Признак, СтарыйОклад, СтароеКолвоСтавок) Экспорт
	
	Запрос = Новый Запрос;
	ДокументОбъект.Записать();
	
	Запрос.УстановитьПараметр("ТекДокумент",ДокументОбъект.ссылка);
	Запрос.УстановитьПараметр("Бюджет",ДокументОбъект.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("Родитель",ДокументОбъект.СтатьяБюджета);
	Запрос.УстановитьПараметр("Дата",ДокументОбъект.ПериодПланирования);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БюджетированиеЗависимыеСтатьиПоЗарплатеСрезПоследних.ОсновнаяСтатьяБюджета,
	|	БюджетированиеЗависимыеСтатьиПоЗарплатеСрезПоследних.ЗависимаяСтатьяБюджета,
	|	ЕСТЬNULL(БюджетированиеЗависимыеСтатьиПоЗарплатеСрезПоследних.Коэффициент, 0) КАК Коэффициент,
	|	ЕСТЬNULL(БюджетированиеЗависимыеСтатьиПоЗарплатеСрезПоследних.Перерасчет, 0) КАК Перерасчет,
	|	РасчДокумент.ПорядковыйНомерПоказателя КАК ЗависимыйПорядковыйНомерПоказателя,
	|	ОснРасчДокумент.ПорядковыйНомерПоказателя КАК ОсновнойПорядковыйНомерПоказателя
	|ИЗ
	|	РегистрСведений.БюджетированиеЗависимыеСтатьиПоЗарплате.СрезПоследних(
	|			&Дата,
	|			Бюджет = &Бюджет
	|				И ОсновнаяСтатьяБюджета.ЯвляетсяДолжностнымОкладом
	|				И ЗависимаяСтатьяБюджета.Родитель = &Родитель) КАК БюджетированиеЗависимыеСтатьиПоЗарплатеСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Док.СтатьяБюджета КАК СтатьяБюджета,
	|			Док.ПорядковыйНомерПоказателя КАК ПорядковыйНомерПоказателя
	|		ИЗ
	|			Документ.б_РасчетнаяТаблица.РасчетнаяТаблица КАК Док
	|		ГДЕ
	|			Док.Ссылка = &ТекДокумент) КАК РасчДокумент
	|		ПО (РасчДокумент.СтатьяБюджета = БюджетированиеЗависимыеСтатьиПоЗарплатеСрезПоследних.ЗависимаяСтатьяБюджета)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Док.СтатьяБюджета КАК СтатьяБюджета,
	|			Док.ПорядковыйНомерПоказателя КАК ПорядковыйНомерПоказателя
	|		ИЗ
	|			Документ.б_РасчетнаяТаблица.РасчетнаяТаблица КАК Док
	|		ГДЕ
	|			Док.Ссылка = &ТекДокумент) КАК ОснРасчДокумент
	|		ПО (ОснРасчДокумент.СтатьяБюджета = БюджетированиеЗависимыеСтатьиПоЗарплатеСрезПоследних.ОсновнаяСтатьяБюджета)";
	
	 Результат = Запрос.Выполнить().Выбрать();
	 
	 Пока Результат.Следующий() Цикл
		 Если Признак = "Перерасчет" тогда
			 Если Результат.Перерасчет Тогда
				 
				 Если (Месяц(ДокументОбъект.ПериодПерерасчета)-1) = 3 Тогда
					 НовыйКоэфПремии1 = Результат.Коэффициент-5;
					 НовыйКоэфПремии2 = Результат.Коэффициент-1;
				 ИначеЕсли (Месяц(ДокументОбъект.ПериодПерерасчета)-1) = 9 Тогда
					 НовыйКоэфПремии1 = Результат.Коэффициент-1;
					 НовыйКоэфПремии2 = Результат.Коэффициент-5;
			     КонецЕсли;
				 
				 Если СтрокаРасчТаблицы.Подразделение.Наименование = "Руководство" Тогда
					 НовыйКоэфПремии1 = 0;
					 НовыйКоэфПремии2 = 0;
				 КонецЕсли;
				 
				 СтрокаРасчТаблицы["Сумма"+СокрЛП(Результат.ЗависимыйПорядковыйНомерПоказателя)] = СтарыйОклад*СтароеКолвоСтавок*НовыйКоэфПремии1
																				+ СтрокаРасчТаблицы.ДолжностнойОклад*СтрокаРасчТаблицы.КоличествоСтавок*НовыйКоэфПремии2;
	       	 Иначе
				 СтрокаРасчТаблицы["Сумма"+СокрЛП(Результат.ЗависимыйПорядковыйНомерПоказателя)] = СтрокаРасчТаблицы.ДолжностнойОклад*СтрокаРасчТаблицы.КоличествоСтавок*Результат.Коэффициент;
			 КонецЕсли;
			 
		 Иначе
			 Если СтрокаРасчТаблицы.Подразделение.Наименование = "Руководство" Тогда
				 НовыйКоэфПремии1 = 0;
			 Иначе
				 НовыйКоэфПремии1 = Результат.Коэффициент;
			 КонецЕсли;

			 СтрокаРасчТаблицы["Сумма"+СокрЛП(Результат.ЗависимыйПорядковыйНомерПоказателя)] = СтрокаРасчТаблицы.ДолжностнойОклад*СтрокаРасчТаблицы.КоличествоСтавок*НовыйКоэфПремии1;
		 КонецЕсли;
	 КонецЦикла;
	 
 КонецПроцедуры


Процедура ЗаполнитьРасчетнуюТаблицуПоДаннымЗарплаты(ДокументОбъект) Экспорт
	
	Для Каждого СтрокаТЧ ИЗ ДокументОбъект.РасчетнаяТаблица Цикл
		ГодоваяСумма = ДокументОбъект.Зарплата.Итог("Сумма"+СокрЛП(СтрокаТЧ.ПорядковыйНомерПоказателя));
		
		СтрокаТЧ.КонтрольнаяСумма = ГодоваяСумма;
		
		Если ДокументОбъект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Бюджет Тогда
			РаспределяемаяСумма = ГодоваяСумма;
			НомерМесяца = 1;
		ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
			НомерМесяца = ДокументОбъект.Видкорректировки.НомерМесяца;
			ИсключаемаяСумма = 0;
			
			Для А =1 По ДокументОбъект.Видкорректировки.НомерМесяца-1 Цикл
				ИсключаемаяСумма = ИсключаемаяСумма + СтрокаТЧ["Сумма"+СокрЛП(А)];
			КонецЦикла;
			
			РаспределяемаяСумма = ГодоваяСумма - ИсключаемаяСумма;
			
		Иначе
			РаспределяемаяСумма = 0;
			НомерМесяца = 1;
		КонецЕсли;
		
		РаспределеннаяСумма = 0;
		
		Для А=НомерМесяца По 12 Цикл
			Если А = 12 Тогда
				СтрокаТЧ["Сумма"+СокрЛП(А)]= РаспределяемаяСумма - РаспределеннаяСумма;
			Иначе
				Если СтрокаТЧ.СтатьяБюджета.Наименование = "премии ежеквартальные" 
					ИЛИ СтрокаТЧ.СтатьяБюджета.Наименование = "премия квартальная" Тогда
						Если А = 1 ИЛИ А = 4 ИЛИ А = 7 ИЛИ А = 10 ИЛИ А = 12 Тогда
							ЧислоДеления = 4;
							
							//13.08.19 бюджет / в январе  - 2 оклада, по 1 окладу в: апреле, июле, октябре и декабре
							Если  А = 1 Тогда
								ЧислоДеления = 6/2;
							ИначеЕсли А = 4 ИЛИ А = 7 ИЛИ А = 10 ИЛИ А = 12 Тогда
	                            ЧислоДеления = 6;
							КонецЕсли;
							//13.08.19 бюджет
							
							Если НомерМесяца > 3 Тогда
								ЧислоДеления = 3;
							ИначеЕсли НомерМесяца > 6 Тогда
								ЧислоДеления = 2;
							ИначеЕсли НомерМесяца > 9 Тогда
								ЧислоДеления = 1;
							КонецЕсли;							
							СтрокаТЧ["Сумма"+СокрЛП(А)]= Окр(РаспределяемаяСумма / ЧислоДеления);
							РаспределеннаяСумма = РаспределеннаяСумма + Окр(РаспределяемаяСумма / ЧислоДеления);
					Иначе
						СтрокаТЧ["Сумма"+СокрЛП(А)]= 0;
					КонецЕсли;
					
				ИначеЕсли СтрокаТЧ.СтатьяБюджета.Наименование = "Бонусы" Тогда
					
					Если А = 6 Тогда 
						СтрокаТЧ["Сумма"+СокрЛП(А)]= Окр(РаспределяемаяСумма);
						РаспределеннаяСумма = РаспределеннаяСумма + Окр(РаспределяемаяСумма);
					Иначе
						СтрокаТЧ["Сумма"+СокрЛП(А)]= 0;
					КонецЕсли;
					
				Иначе
					СтрокаТЧ["Сумма"+СокрЛП(А)]= Окр(РаспределяемаяСумма /(12-НомерМесяца+1),0,1);
					РаспределеннаяСумма = РаспределеннаяСумма + Окр(РаспределяемаяСумма /(12-НомерМесяца+1),0,1);
				КонецЕсли;
			Конецесли;
			
		КонецЦикла;
		
	КонецЦикла;
	
Конецпроцедуры

Процедура ЗаполнитьДанныеДляЗарплатыПоШтатномуРасписанию(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("КонецПериода",ДокументОбъект.ПериодПланирования);
	Запрос.УстановитьПараметр("Бюджет",ДокументОбъект.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("СтатьяФОТ",ДокументОбъект.СтатьяБюджета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации КАК Подразделение,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность КАК Должность,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок КАК КоличествоСтавокНаНачалоГода,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.МаксимальнаяТарифнаяСтавка КАК ДолжностнойОклад,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.Период КАК ПериодПерерасчета,
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.КолвоМесяцевДляРасчетаБонусов
	|ИЗ
	|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(&КонецПериода, ) КАК ШтатноеРасписаниеОрганизацийСрезПоследних
	|ГДЕ
	|	ШтатноеРасписаниеОрганизацийСрезПоследних.ПодразделениеОрганизации В
	|			(ВЫБРАТЬ
	|				б_ЗакреплениеПодразделенийЗаСтатьямиФОТСрезПоследних.Подразделение
	|			ИЗ
	|				РегистрСведений.б_ЗакреплениеПодразделенийЗаСтатьямиФОТ.СрезПоследних(&КонецПериода, Организация = &Организация
	|					И Бюджет = &Бюджет
	|					И СтатьяФОТ = &СтатьяФОТ) КАК б_ЗакреплениеПодразделенийЗаСтатьямиФОТСрезПоследних)
	|	И ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок <> 0
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	ДокументОбъект.Зарплата.Загрузить(тз);
КонецПроцедуры

Процедура ЗаполнитьДвиженияДСПОБУ(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(ДокументОбъект.Дата));
	Запрос.УстановитьПараметр("КонецПериода",КонецДня(ДокументОбъект.Дата));
	Запрос.УстановитьПараметр("БанковскийСчет",ДокументОбъект.СчетОрганизации);
	Запрос.УстановитьПараметр("Организация",ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("ВыбСчет",ПланыСчетов.Типовой.ДенежныеСредства);
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА ТиповойОбороты.СуммаОборотДт<>0 
	|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.Поступление)
	|	ИНАЧЕ 
	|		ВЫБОР КОГДА ТиповойОбороты.СуммаОборотКт<>0
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.Выбытие)
	|		ИНАЧЕ """"
	|		КОНЕЦ 
	|	КОНЕЦ КАК ВидДвиженияДС,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ТиповойОбороты.Регистратор) = ТИП(Документ.ПлатежноеПоручениеИсходящее)
	|		  ТОГДА ТиповойОбороты.Регистратор.НазначениеПлатежа
	|		  ИНАЧЕ ТиповойОбороты.Регистратор.Комментарий
	|	КОНЕЦ КАК Комментарий,
	|	ТиповойОбороты.Регистратор КАК ПлатежныйДокумент,
	|	ТиповойОбороты.СуммаОборотДт КАК ПриходСумма,
	|	ТиповойОбороты.СуммаОборотКт КАК РасходСумма,
	|	ТиповойОбороты.ВалютнаяСуммаОборотДт КАК ПриходВалютнаяСумма,
	|	ТиповойОбороты.ВалютнаяСуммаОборотКт КАК РасходВалютнаяСумма
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(&НачалоПериода, &КонецПериода, Запись, Счет В ИЕРАРХИИ (&ВыбСчет), , , (НЕ КорСчет В ИЕРАРХИИ (&ВыбСчет)), ) КАК ТиповойОбороты
	|ГДЕ
	|	ТиповойОбороты.Организация = &Организация
	|	И ТиповойОбороты.Субконто1 = &БанковскийСчет";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	ДокументОбъект.ДвиженияДС.Загрузить(тз);
	
	
КонецПроцедуры


Функция ВернутьБалансовуюСтоимость(Организация,ОС,ТекДата)
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ОС",ОС);
	Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(ТекДата));
	Запрос.УстановитьПараметр("СчетОтбора",ПланыСчетов.Типовой.ОсновныеСредства);
	Запрос.УстановитьПараметр("мВидыСубконто",ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТиповойОстатки.СуммаОстатокДт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачалоПериода,
	|			Счет В ИЕРАРХИИ (&счетОтбора),
	|			&мВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 = &ОС) КАК ТиповойОстатки";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ВОЗВРАТ Результат.Сумма;
	Иначе
		ВОЗВРАТ 0;
	КонецЕсли;
	
КонецФункции

Функция ВернутьАмортизационнуюСтоимость(Организация,ОС,ТекДата)
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ОС",ОС);
	Запрос.УстановитьПараметр("НачалоПериода",ТекДата);
	Запрос.УстановитьПараметр("СчетОтбора",ПланыСчетов.Типовой.АмортизацияОсновныхСредств);
	Запрос.УстановитьПараметр("мВидыСубконто",ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойОстатки.СуммаОстатокКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			&НачалоПериода,
	|			Счет В ИЕРАРХИИ (&счетОтбора),
	|			&мВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 = &ОС) КАК ТиповойОстатки";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ВОЗВРАТ Результат.Сумма;
	Иначе
		ВОЗВРАТ 0;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьАмортизациюОС(ДокументОбъект,СтруктураОтбора) Экспорт
	
	СписокСтатей = Новый СписокЗначений;
	СписокСтатей.Добавить(ДокументОбъект.СтатьяБюджета);
	СписокСтатей.Добавить(Справочники.фин_СтатьиБюджета.ПустаяСсылка());
	
	Если ДокументОбъект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.бюджет Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Организация",ДокументОбъект.Организация);
		Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(НачалоГода(ДокументОбъект.ПериодПланирования)));
		Запрос.УстановитьПараметр("КонецПериода",КонецДня(КонецГода(ДокументОбъект.ПериодПланирования)));
		Запрос.УстановитьПараметр("СчетаОтбора",СтруктураОтбора.СчетУчетаБУ);
		Запрос.УстановитьПараметр("мВидыСубконто",ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
		Запрос.УстановитьПараметр("СостояниеОС",Перечисления.ВидыСостоянийОС.ПринятоКУчету);
		Запрос.УстановитьПараметр("СостояниеНМА",Перечисления.ВидыСостоянийНМА.ПринятКУчету);
		Запрос.УстановитьПараметр("СчетБалансаОС",ПланыСчетов.Типовой.ОсновныеСредства);
		Запрос.УстановитьПараметр("СчетАмортизацииОС",ПланыСчетов.Типовой.АмортизацияОсновныхСредств);
        Запрос.УстановитьПараметр("СтатьяБюджета", СписокСтатей);     
		
		Запрос.Текст =
		
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	0 КАК Сумма1,
		|	0 КАК Сумма2,
		|	0 КАК Сумма3,
		|	0 КАК Сумма4,
		|	0 КАК Сумма5,
		|	0 КАК Сумма6,
		|	0 КАК Сумма7,
		|	0 КАК Сумма8,
		|	0 КАК Сумма9,
		|	0 КАК Сумма10,
		|	0 КАК Сумма11,
		|	0 КАК Сумма12,
		|	0 КАК КонтрольнаяСумма,
		|	ДанныеПоОС.ОС КАК ОС,
		|	ДанныеПоОС.амДатаПринятияКУчету КАК амДатаПринятияКУчету,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0) КАК Сумма,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК амКоэффициентАмортизации,
		|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользования,
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации
		|ПОМЕСТИТЬ ОсновныеСредства
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТиповойОстатки.Субконто1 КАК ОС,
		|		ВЫБОР
		|			КОГДА СостоянияОСОрганизацийСрезПоследних.ДатаСостояния ЕСТЬ NULL
		|				ТОГДА СостоянияНМАОрганизацийСрезПоследних.Период
		|			ИНАЧЕ СостоянияОСОрганизацийСрезПоследних.ДатаСостояния
		|		КОНЕЦ КАК амДатаПринятияКУчету
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Остатки(
		|				&НачалоПериода,
		|				Счет В ИЕРАРХИИ (&СчетаОтбора),
		|				&мВидыСубконто,
		|				Организация = &Организация
		|					И Субконто1.СтатьяБюджета В (&СтатьяБюджета)) КАК ТиповойОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
		|					&КонецПериода,
		|					Состояние = &СостояниеОС
		|						И Организация = &Организация) КАК СостоянияОСОрганизацийСрезПоследних
		|			ПО ТиповойОстатки.Субконто1 = СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
		|					&КонецПериода,
		|					Состояние = &СостояниеНМА
		|						И Организация = &Организация) КАК СостоянияНМАОрганизацийСрезПоследних
		|			ПО ТиповойОстатки.Субконто1 = СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТиповойОбороты.Субконто1,
		|		ВЫБОР
		|			КОГДА СостоянияОСОрганизацийСрезПоследних.ДатаСостояния ЕСТЬ NULL
		|				ТОГДА СостоянияНМАОрганизацийСрезПоследних.Период
		|			ИНАЧЕ СостоянияОСОрганизацийСрезПоследних.ДатаСостояния
		|		КОНЕЦ
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Обороты(
		|				&Началопериода,
		|				&КонецПериода,
		|				День,
		|				Счет В ИЕРАРХИИ (&СчетаОтбора),
		|				&мВидысубконто,
		|				Организация = &Организация
		|					И Субконто1.СтатьяБюджета В (&СтатьяБюджета),
		|				НЕ КорСчет В ИЕРАРХИИ (&СчетаОтбора),
		|				) КАК ТиповойОбороты
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
		|					&КонецПериода,
		|					Состояние = &СостояниеОС
		|						И Организация = &Организация) КАК СостоянияОСОрганизацийСрезПоследних
		|			ПО ТиповойОбороты.Субконто1 = СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство,
		|		РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
		|				&КонецПериода,
		|				Состояние = &СостояниеНМА
		|					И Организация = &Организация) КАК СостоянияНМАОрганизацийСрезПоследних) КАК ДанныеПоОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&КонецПериода, Организация = &Организация) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
		|		ПО ДанныеПоОС.ОС = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(&КонецПериода, Организация = &Организация) КАК НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних
		|		ПО ДанныеПоОС.ОС = НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&КонецПериода, Организация = &Организация) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		|		ПО ДанныеПоОС.ОС = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОсновныеСредства.Сумма1,
		|	ОсновныеСредства.Сумма2,
		|	ОсновныеСредства.Сумма3,
		|	ОсновныеСредства.Сумма4,
		|	ОсновныеСредства.Сумма5,
		|	ОсновныеСредства.Сумма6,
		|	ОсновныеСредства.Сумма7,
		|	ОсновныеСредства.Сумма8,
		|	ОсновныеСредства.Сумма9,
		|	ОсновныеСредства.Сумма10,
		|	ОсновныеСредства.Сумма11,
		|	ОсновныеСредства.Сумма12,
		|	ОсновныеСредства.КонтрольнаяСумма,
		|	ОсновныеСредства.ОС,
		|	ЕСТЬNULL(ОсновныеСредства.амДатаПринятияКУчету, ОсновныеСредства.ОС.ДатаВыпуска) КАК амДатаПринятияКУчету,
		|	ОсновныеСредства.Сумма КАК амСуммаДляНачисленияАмортизации,
		|	ОсновныеСредства.ЛиквидационнаяСтоимость,
		|	ОсновныеСредства.амКоэффициентАмортизации,
		|	ЕСТЬNULL(БалансОС.СуммаОстатокДт, 0) КАК СуммаБалансаОС,
		|	ЕСТЬNULL(АмортизацияОС.СуммаОстатокКт, 0) КАК СуммаАмортизацииОС,
		|	ОсновныеСредства.СрокИспользования,
		|	ОсновныеСредства.СпособНачисленияАмортизации
		|ИЗ
		|	ОсновныеСредства КАК ОсновныеСредства
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
		|				&НачалоПериода,
		|				Счет В ИЕРАРХИИ (&СчетБалансаОС),
		|				&мВидыСубконто,
		|				Субконто1 В
		|					(ВЫБРАТЬ
		|						ОсновныеСредства.ОС
		|					ИЗ
		|						ОсновныеСредства КАК ОсновныеСредства)) КАК БалансОС
		|		ПО ОсновныеСредства.ОС = БалансОС.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
		|				&НачалоПериода,
		|				Счет В ИЕРАРХИИ (&СчетАмортизацииОС),
		|				&мВидыСубконто,
		|				Субконто1 В
		|					(ВЫБРАТЬ
		|						ОсновныеСредства.ОС
		|					ИЗ
		|						ОсновныеСредства КАК ОсновныеСредства)) КАК АмортизацияОС
		|		ПО ОсновныеСредства.ОС = АмортизацияОС.Субконто1";
		
		тз = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТЗ ИЗ тз Цикл
			
			Если СтрокаТЗ.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
				СуммаАмортизации = (СтрокаТЗ.амСуммаДляНачисленияАмортизации/СтрокаТЗ.СрокИспользования);
			Иначе
				СуммаАмортизации = (СтрокаТЗ.амСуммаДляНачисленияАмортизации*СтрокаТЗ.амКоэффициентАмортизации/100)/12;
			КонецЕсли;
			
			Попытка 					
				Если СтрокаТЗ.амДатаПринятияКУчету < НачалоГода(ДокументОбъект.ПериодПланирования) Тогда
					НачалоРасчета = 1;
				Иначе
					НачалоРасчета = Месяц(СтрокаТЗ.амДатаПринятияКУчету)+1;
				КонецЕсли;
			Исключение
				Продолжить;
			КонецПопытки; 			
			
			КоличествоМесяцев = РазностьДатВМесяцах(конецдня(КонецМесяца(СтрокаТЗ.амДатаПринятияКУчету))+1,НачалоГода(ДокументОбъект.ПериодПланирования));
			//СуммаАмортизацииПоБалансу = ВернутьАмортизационнуюСтоимость(ДокументОбъект.Организация,СтрокаТЗ.ОС, новый Граница(КонецДня(ДокументОбъект.ПериодПланирования),ВидГраницы.Включая));
			СуммаАмортизацииПоБалансу = СтрокаТЗ.СуммаАмортизацииОС;
			
			СуммаНакопленнойРасчитаннойАмортизации = КоличествоМесяцев * СуммаАмортизации;
			СуммаНакопленнойРасчитаннойАмортизации = Макс(СуммаНакопленнойРасчитаннойАмортизации, СуммаАмортизацииПоБалансу);
			
			Для А = НачалоРасчета По 12 Цикл
				ТекДата = Дата(Год(ДокументОбъект.ПериодПланирования),А,1);
				
				//СуммаПоБалансу = ВернутьБалансовуюСтоимость(ДокументОбъект.Организация,СтрокаТЗ.ОС,ТекДата);
				СуммаПоБалансу = СтрокаТЗ.СуммаБалансаОС;
				
				//СуммаПоБалансу = СуммаПоБалансу - СуммаАмортизацииПоБалансу;
				Если (СуммаПоБалансу - СуммаНакопленнойРасчитаннойАмортизации - СтрокаТЗ.ЛиквидационнаяСтоимость) > 0 Тогда
					СтрокаТЗ["Сумма"+СокрЛП(А)] = МИН(СуммаАмортизации,(СуммаПоБалансу - СуммаНакопленнойРасчитаннойАмортизации - СтрокаТЗ.ЛиквидационнаяСтоимость));
					СуммаНакопленнойРасчитаннойАмортизации = СуммаНакопленнойРасчитаннойАмортизации + СтрокаТЗ["Сумма"+СокрЛП(А)];
				Иначе
					СтрокаТЗ["Сумма"+СокрЛП(А)] = 0;
				КонецЕсли;
				
				СтрокаТЗ.КонтрольнаяСумма = СтрокаТЗ.КонтрольнаяСумма + СтрокаТЗ["Сумма"+СокрЛП(А)];
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Организация",ДокументОбъект.Организация);
		Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(НачалоГода(ДокументОбъект.ПериодПланирования)));
		Запрос.УстановитьПараметр("КонецПериода",КонецДня(КонецГода(ДокументОбъект.ПериодПланирования)));
		Запрос.УстановитьПараметр("СчетаОтбора",СтруктураОтбора.СчетУчетаБУ);
		Запрос.УстановитьПараметр("мВидыСубконто",ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
		Запрос.УстановитьПараметр("СчетБалансаОС",ПланыСчетов.Типовой.ОсновныеСредства);
		Запрос.УстановитьПараметр("СчетАмортизацииОС",ПланыСчетов.Типовой.АмортизацияОсновныхСредств);
		Запрос.УстановитьПараметр("СтатьяБюджета", СписокСтатей);
		
		
		Запрос.Текст =
		
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	0 КАК Сумма1,
		|	0 КАК Сумма2,
		|	0 КАК Сумма3,
		|	0 КАК Сумма4,
		|	0 КАК Сумма5,
		|	0 КАК Сумма6,
		|	0 КАК Сумма7,
		|	0 КАК Сумма8,
		|	0 КАК Сумма9,
		|	0 КАК Сумма10,
		|	0 КАК Сумма11,
		|	0 КАК Сумма12,
		|	0 КАК КонтрольнаяСумма,
		|	ДанныеПоОС.ОС КАК ОС,
		|	ДанныеПоОС.ОС.ДатаВыпуска КАК амДатаПринятияКУчету,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0) КАК Сумма,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК амКоэффициентАмортизации,
		|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования
		|ПОМЕСТИТЬ ОсновныеСредства
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТиповойОстатки.Субконто1 КАК ОС,
		|		&НачалоПериода КАК амДатаПринятияКУчету
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Остатки(
		|				&НачалоПериода,
		|				Счет В ИЕРАРХИИ (&СчетаОтбора),
		|				&мВидыСубконто,
		|				Организация = &Организация
		|					И Субконто1.СтатьяБюджета В (&СтатьяБюджета)) КАК ТиповойОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТиповойОбороты.Субконто1,
		|		ТиповойОбороты.Период
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Обороты(
		|				&Началопериода,
		|				&КонецПериода,
		|				День,
		|				Счет В ИЕРАРХИИ (&СчетаОтбора),
		|				&мВидысубконто,
		|				Организация = &Организация
		|					И Субконто1.СтатьяБюджета В (&СтатьяБюджета),
		|				НЕ КорСчет В ИЕРАРХИИ (&СчетаОтбора),
		|				) КАК ТиповойОбороты) КАК ДанныеПоОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&КонецПериода, Организация = &Организация) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
		|		ПО ДанныеПоОС.ОС = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
		|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(&КонецПериода, Организация = &Организация) КАК НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних
		|ГДЕ
		|	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОсновныеСредства.Сумма1,
		|	ОсновныеСредства.Сумма2,
		|	ОсновныеСредства.Сумма3,
		|	ОсновныеСредства.Сумма4,
		|	ОсновныеСредства.Сумма5,
		|	ОсновныеСредства.Сумма6,
		|	ОсновныеСредства.Сумма7,
		|	ОсновныеСредства.Сумма8,
		|	ОсновныеСредства.Сумма9,
		|	ОсновныеСредства.Сумма10,
		|	ОсновныеСредства.Сумма11,
		|	ОсновныеСредства.Сумма12,
		|	ОсновныеСредства.КонтрольнаяСумма,
		|	ОсновныеСредства.ОС,
		|	ОсновныеСредства.амДатаПринятияКУчету,
		|	ОсновныеСредства.Сумма КАК амСуммаДляНачисленияАмортизации,
		|	ОсновныеСредства.ЛиквидационнаяСтоимость,
		|	ОсновныеСредства.амКоэффициентАмортизации,
		|	ЕСТЬNULL(БалансОС.СуммаОстатокДт, 0) КАК СуммаБалансаОС,
		|	ЕСТЬNULL(АмортизацияОС.СуммаОстатокКт, 0) КАК СуммаАмортизацииОС,
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации,
		|	ОсновныеСредства.СрокПолезногоИспользования КАК СрокИспользования
		|ИЗ
		|	ОсновныеСредства КАК ОсновныеСредства
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
		|				&НачалоПериода,
		|				Счет В ИЕРАРХИИ (&СчетБалансаОС),
		|				&мВидыСубконто,
		|				Субконто1 В
		|					(ВЫБРАТЬ
		|						ОсновныеСредства.ОС
		|					ИЗ
		|						ОсновныеСредства КАК ОсновныеСредства)) КАК БалансОС
		|		ПО ОсновныеСредства.ОС = БалансОС.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
		|				&НачалоПериода,
		|				Счет В ИЕРАРХИИ (&СчетАмортизацииОС),
		|				&мВидыСубконто,
		|				Субконто1 В
		|					(ВЫБРАТЬ
		|						ОсновныеСредства.ОС
		|					ИЗ
		|						ОсновныеСредства КАК ОсновныеСредства)) КАК АмортизацияОС
		|		ПО ОсновныеСредства.ОС = АмортизацияОС.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&КонецПериода, Организация = &Организация) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		|		ПО ОсновныеСредства.ОС = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство";
		тз = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТЗ ИЗ тз Цикл
			
			Если СтрокаТЗ.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
				Если СтрокаТЗ.СрокИспользования <> 0 Тогда
					СуммаАмортизации = (СтрокаТЗ.амСуммаДляНачисленияАмортизации/СтрокаТЗ.СрокИспользования);
				Иначе
					Возврат
				КонецЕсли;

			Иначе
				СуммаАмортизации = (СтрокаТЗ.амСуммаДляНачисленияАмортизации*СтрокаТЗ.амКоэффициентАмортизации/100)/12;
			КонецЕсли;

			//СуммаАмортизации = (СтрокаТЗ.Сумма*СтрокаТЗ.амКоэффициентАмортизации/100)/12;
			Если СтрокаТЗ.амДатаПринятияКУчету < НачалоГода(ДокументОбъект.ПериодПланирования) Тогда
				НачалоРасчета = ДокументОбъект.ВидКорректировки.НомерМесяца;
			Иначе
				НачалоРасчета = Месяц(СтрокаТЗ.амДатаПринятияКУчету)+1;
			КонецЕсли;
			
			Для А = НачалоРасчета По 12 Цикл
				ТекДата = Дата(Год(ДокументОбъект.ПериодПланирования),А,1);
				//СуммаПоБалансу = ВернутьБалансовуюСтоимость(ДокументОбъект.Организация,СтрокаТЗ.ОС,ТекДата);
				СуммаПоБалансу = СтрокаТЗ.СуммаБалансаОС;
				//СуммаАмортизацииПоБалансу = ВернутьАмортизационнуюСтоимость(ДокументОбъект.Организация,СтрокаТЗ.ОС,ТекДата);
				СуммаАмортизацииПоБалансу = СтрокаТЗ.СуммаАмортизацииОС;
				Если (СуммаПоБалансу - СуммаАмортизацииПоБалансу - СтрокаТЗ.ЛиквидационнаяСтоимость) > 0 Тогда
					СтрокаТЗ["Сумма"+СокрЛП(А)] = МИН(СуммаАмортизации,(СуммаПоБалансу - СуммаАмортизацииПоБалансу - СтрокаТЗ.ЛиквидационнаяСтоимость));
				Иначе
					СтрокаТЗ["Сумма"+СокрЛП(А)] = 0;
				КонецЕсли;
				СтрокаТЗ.КонтрольнаяСумма = СтрокаТЗ.КонтрольнаяСумма + СтрокаТЗ["Сумма"+СокрЛП(А)];
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ДокументОбъект.РасчетнаяТаблица.Очистить();
	
	СписокОСИзм = Новый СписокЗначений;
	СписокОСИзм.Очистить();

	Для Каждого Строка Из тз Цикл  	
		
		Если Строка.КонтрольнаяСумма <> 0 Тогда
			НовСтрока = ДокументОбъект.РасчетнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
		Конецесли;
		
		СписокОСИзм.Добавить(Строка.ОС); 	
	КонецЦикла;     	
	

	СписокСчетовУчетаОС = Новый СписокЗначений;
	СписокСчетовУчетаОС.Очистить();
	
	СписокСчетовУчетаОС.Добавить(СтруктураОтбора.СчетУчетаБУ);
		
	ДобавитьОСКоторыеЕщеНеПриобретены(СписокОСИзм, СписокСчетовУчетаОС, ДокументОбъект);

	ДобавитьНеУченныеОС(СписокОСИзм, СписокСчетовУчетаОС, ДокументОбъект);

	//ДокументОбъект.РасчетнаяТаблица.Загрузить(тз);	
	
КонецПроцедуры

Процедура ДобавитьНеУченныеОС(СписокОСИзм, СписокСчетовУчетаОС, ДокументОбъект)
	
	СписокСтатей = Новый СписокЗначений;
	СписокСтатей.Добавить(ДокументОбъект.СтатьяБюджета);
	СписокСтатей.Добавить(Справочники.фин_СтатьиБюджета.ПустаяСсылка());

	//Добавим не учтенные в бюджете ОС
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Организация",ДокументОбъект.Организация);
		Запрос.УстановитьПараметр("НачалоПериода",ДокументОбъект.Дата);
		Запрос.УстановитьПараметр("КонецПериода",КонецДня(КонецГода(ДокументОбъект.ПериодПланирования)));
		Запрос.УстановитьПараметр("СчетаОтбора", СписокСчетовУчетаОС);
		Запрос.УстановитьПараметр("мВидыСубконто",ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
		Запрос.УстановитьПараметр("СчетБалансаОС",ПланыСчетов.Типовой.ОсновныеСредства);
		Запрос.УстановитьПараметр("СчетАмортизацииОС",ПланыСчетов.Типовой.АмортизацияОсновныхСредств);
		Запрос.УстановитьПараметр("СписокОС",СписокОСИзм);
		Запрос.УстановитьПараметр("СтатьяБюджета", СписокСтатей); 
			
		Запрос.Текст =
		
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	0 КАК Сумма1,
		|	0 КАК Сумма2,
		|	0 КАК Сумма3,
		|	0 КАК Сумма4,
		|	0 КАК Сумма5,
		|	0 КАК Сумма6,
		|	0 КАК Сумма7,
		|	0 КАК Сумма8,
		|	0 КАК Сумма9,
		|	0 КАК Сумма10,
		|	0 КАК Сумма11,
		|	0 КАК Сумма12,
		|	0 КАК КонтрольнаяСумма,
		|	ДанныеПоОС.ОС КАК ОС,
		|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Период КАК амДатаПринятияКУчету,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0) КАК Сумма,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК амКоэффициентАмортизации,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0) КАК СрокИспользования,
		|	ЕСТЬNULL(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации, 0) КАК СпособНачисленияАмортизации
		|ПОМЕСТИТЬ ОсновныеСредства
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТиповойОстатки.Субконто1 КАК ОС,
		|		&НачалоПериода КАК амДатаПринятияКУчету
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Остатки(
		|				&НачалоПериода,
		|				Счет В ИЕРАРХИИ (&СчетаОтбора),
		|				&мВидыСубконто,
		|				Организация = &Организация
		|					И Субконто1.СтатьяБюджета В (&СтатьяБюджета)) КАК ТиповойОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТиповойОбороты.Субконто1,
		|		ТиповойОбороты.Период
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Обороты(
		|				&Началопериода,
		|				&КонецПериода,
		|				День,
		|				Счет В ИЕРАРХИИ (&СчетаОтбора),
		|				&мВидысубконто,
		|				Организация = &Организация
		|					И Субконто1.СтатьяБюджета В (&СтатьяБюджета),
		|				НЕ КорСчет В ИЕРАРХИИ (&СчетаОтбора),
		|				) КАК ТиповойОбороты) КАК ДанныеПоОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&КонецПериода, Организация = &Организация) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
		|		ПО ДанныеПоОС.ОС = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&КонецПериода, Организация = &Организация) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		|		ПО ДанныеПоОС.ОС = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(&КонецПериода, Организация = &Организация) КАК НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних
		|		ПО ДанныеПоОС.ОС = НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|ГДЕ
		|	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОсновныеСредства.Сумма1,
		|	ОсновныеСредства.Сумма2,
		|	ОсновныеСредства.Сумма3,
		|	ОсновныеСредства.Сумма4,
		|	ОсновныеСредства.Сумма5,
		|	ОсновныеСредства.Сумма6,
		|	ОсновныеСредства.Сумма7,
		|	ОсновныеСредства.Сумма8,
		|	ОсновныеСредства.Сумма9,
		|	ОсновныеСредства.Сумма10,
		|	ОсновныеСредства.Сумма11,
		|	ОсновныеСредства.Сумма12,
		|	ОсновныеСредства.КонтрольнаяСумма,
		|	ОсновныеСредства.ОС,
		|	ОсновныеСредства.амДатаПринятияКУчету,
		|	ОсновныеСредства.Сумма КАК амСуммаДляНачисленияАмортизации,
		|	ОсновныеСредства.ЛиквидационнаяСтоимость,
		|	ОсновныеСредства.амКоэффициентАмортизации,
		|	ЕСТЬNULL(БалансОС.СуммаОстатокДт, 0) КАК СуммаБалансаОС,
		|	ЕСТЬNULL(АмортизацияОС.СуммаОстатокКт, 0) КАК СуммаАмортизацииОС,
		|	ОсновныеСредства.СрокИспользования,
		|	ОсновныеСредства.СпособНачисленияАмортизации
		|ИЗ
		|	ОсновныеСредства КАК ОсновныеСредства
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
		|				&НачалоПериода,
		|				Счет В ИЕРАРХИИ (&СчетБалансаОС),
		|				&мВидыСубконто,
		|				Субконто1 В
		|					(ВЫБРАТЬ
		|						ОсновныеСредства.ОС
		|					ИЗ
		|						ОсновныеСредства КАК ОсновныеСредства)) КАК БалансОС
		|		ПО ОсновныеСредства.ОС = БалансОС.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
		|				&НачалоПериода,
		|				Счет В ИЕРАРХИИ (&СчетАмортизацииОС),
		|				&мВидыСубконто,
		|				Субконто1 В
		|					(ВЫБРАТЬ
		|						ОсновныеСредства.ОС
		|					ИЗ
		|						ОсновныеСредства КАК ОсновныеСредства)) КАК АмортизацияОС
		|		ПО ОсновныеСредства.ОС = АмортизацияОС.Субконто1
		|ГДЕ
		|	НЕ ОсновныеСредства.ОС В (&СписокОС)";
		тз = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТЗ ИЗ тз Цикл
			
			Если СтрокаТЗ.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
				СуммаАмортизации = (СтрокаТЗ.амСуммаДляНачисленияАмортизации/СтрокаТЗ.СрокИспользования);
			Иначе
				СуммаАмортизации = (СтрокаТЗ.амСуммаДляНачисленияАмортизации*СтрокаТЗ.амКоэффициентАмортизации/100)/12;
			КонецЕсли;
					
						
			Если ДокументОбъект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
				НачалоРасчета = ДокументОбъект.ВидКорректировки.НомерМесяца;
			Иначе
				НачалоРасчета = 1;
			КонецЕсли;

			Для А = НачалоРасчета По 12 Цикл
				//ТекДата = Дата(Год(ДокументОбъект.ПериодПланирования),А,1);
				СуммаПоБалансу = СтрокаТЗ.СуммаБалансаОС;
				СуммаАмортизацииПоБалансу = СтрокаТЗ.СуммаАмортизацииОС;
				
				ОсталосьАмортизацииНаНачало = СуммаПоБалансу - СуммаАмортизацииПоБалансу - СтрокаТЗ.ЛиквидационнаяСтоимость;
			 
				 Если (ОсталосьАмортизацииНаНачало-СтрокаТЗ.КонтрольнаяСумма)>0 Тогда 
					ОстаточАмортизация = МИН((ОсталосьАмортизацииНаНачало - СтрокаТЗ.КонтрольнаяСумма),ОсталосьАмортизацииНаНачало);
				 Иначе
					ОстаточАмортизация = ОсталосьАмортизацииНаНачало;
				 КонецЕсли;
				 
				 Если Окр(СтрокаТЗ.КонтрольнаяСумма,0) < Окр((ОсталосьАмортизацииНаНачало),0)  Тогда

					Если ОсталосьАмортизацииНаНачало > 0 Тогда
						СтрокаТЗ["Сумма"+СокрЛП(А)] = Окр(МИН(СуммаАмортизации,ОстаточАмортизация),2);
					Иначе
						СтрокаТЗ["Сумма"+СокрЛП(А)] = 0;
					КонецЕсли;
				 КонецЕсли;	 
				 
				 СтрокаТЗ.КонтрольнаяСумма = СтрокаТЗ.КонтрольнаяСумма + СтрокаТЗ["Сумма"+СокрЛП(А)];
            КонецЦикла;
		КонецЦикла;
				
	
	Для Каждого Строка Из тз Цикл  	
		
		Если Строка.КонтрольнаяСумма <> 0 Тогда
			НовСтрока = ДокументОбъект.РасчетнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
		Конецесли;
			
	КонецЦикла;     
	
	ДокументОбъект.Записать();
	
КонецПроцедуры

Процедура ДобавитьОСКоторыеЕщеНеПриобретены(СписокОСИзм, СписокСчетовУчетаОС, ДокументОбъект)
	
	  	Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(НачалоГода(ДокументОбъект.ПериодПланирования)));
		Запрос.УстановитьПараметр("СписокОС",СписокОСИзм);
		Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
    		
			Запрос.Текст =
		
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Период,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Количество,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ОС,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ЕдиницаИзмерения,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Цена,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сумма,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.КонтрольнаяСумма,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Примечание,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сумма1,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сумма2,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сумма3,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сумма4,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сумма5,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сумма6,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сумма7,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сумма8,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сумма9,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сумма10,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сумма11,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сумма12,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.НормаРасходаНа100КмВЛетнееВремя,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.НормаРасходаНа100КмВЗимнееВремя,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ПробегВДень,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ЧислоДнейМесяца,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ЦенаЗаЛитр,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.НормаРасходаВДень,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.кЧислоДнейМесяца,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ктариф,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.комДолжность,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.комЦельКомандировки,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.комКоличествоЧеловек,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.комКоличествоКомандировок,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.комКоличествоДней,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.комСрокКомандировки,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.комПроезд,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.комПроживание,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.комСуточные,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.комНормаСуточных,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.комНормаПроживание,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.арКоличествоШтатныхЕдиниц,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.арКоличествоКвМетровНаЧеловека,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.арЦена,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СтатьяБюджета,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ПорядковыйНомерПоказателя,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.амКоэффициентАмортизации,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.НМА,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.амСрокПолезногоИспользования,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ПризнакКорректировки,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Регион,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.амДатаПринятияКУчету,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.амСуммаДляНачисленияАмортизации,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.пвНаименованиеСеминара,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.пвКонтрагент,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.пвМестоПроведения,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.пвМесяцПроведения,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.пвПодразделение,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.пвПериодПроведения,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСумма1,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСумма2,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСумма3,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСумма4,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСумма5,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСумма6,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСумма7,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСумма8,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСумма9,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСумма10,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСумма11,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСумма12,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИКонтрольнаяСумма,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Отклонение,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СпособЗакупок,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.АвансПлатеж,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаНачПроведенияЗакупок,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаКонПроведенияЗакупок,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаНачПоставокТовара,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаКонПоставокТовара,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.МестоПроведЗакупок,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.МестоПоставкиТоваров,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ФИООбучаемого,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаПоступления1,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаПоступления2,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаПоступления3,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаПоступления4,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаПоступления5,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаПоступления6,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаПоступления7,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаПоступления8,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаПоступления9,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаПоступления10,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаПоступления11,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаПоступления12,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаВыбытия1,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаВыбытия2,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаВыбытия3,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаВыбытия4,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаВыбытия5,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаВыбытия6,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаВыбытия7,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаВыбытия8,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаВыбытия9,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаВыбытия10,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаВыбытия11,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаВыбытия12,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаПоступления1,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаПоступления2,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаПоступления3,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаПоступления4,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаПоступления5,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаПоступления6,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаПоступления7,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаПоступления8,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаПоступления9,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаПоступления10,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаПоступления11,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаПоступления12,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаВыбытия1,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаВыбытия2,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаВыбытия3,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаВыбытия4,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаВыбытия5,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаВыбытия6,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаВыбытия7,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаВыбытия8,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаВыбытия9,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаВыбытия10,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаВыбытия11,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИСуммаВыбытия12,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.КонтрольнаяСуммаПоступления,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.КонтрольнаяСуммаВыбытия,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИКонтрольнаяСуммаПоступления,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ИКонтрольнаяСуммаВыбытия,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ПоступлениеСумма1,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ПоступлениеСумма2,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ПоступлениеСумма3,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ПоступлениеСумма4,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ПоступлениеСумма5,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ПоступлениеСумма6,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ПоступлениеСумма7,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ПоступлениеСумма8,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ПоступлениеСумма9,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ПоступлениеСумма10,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ПоступлениеСумма11,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ПоступлениеСумма12,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ВыбытиеСумма1,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ВыбытиеСумма2,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ВыбытиеСумма3,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ВыбытиеСумма4,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ВыбытиеСумма5,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ВыбытиеСумма6,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ВыбытиеСумма7,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ВыбытиеСумма8,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ВыбытиеСумма9,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ВыбытиеСумма10,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ВыбытиеСумма11,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ВыбытиеСумма12,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иПоступлениеСумма1,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иПоступлениеСумма2,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иПоступлениеСумма3,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иПоступлениеСумма4,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иПоступлениеСумма5,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иПоступлениеСумма6,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иПоступлениеСумма7,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иПоступлениеСумма8,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иПоступлениеСумма9,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иПоступлениеСумма10,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иПоступлениеСумма11,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иПоступлениеСумма12,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВыбытиеСумма1,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВыбытиеСумма2,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВыбытиеСумма3,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВыбытиеСумма4,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВыбытиеСумма5,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВыбытиеСумма6,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВыбытиеСумма7,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВыбытиеСумма8,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВыбытиеСумма9,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВыбытиеСумма10,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВыбытиеСумма11,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВыбытиеСумма12,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.КонтрольнаяСуммаПоступление,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.КонтрольнаяСуммаВыбытие,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иКонтрольнаяСуммаПоступление,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иКонтрольнаяСуммаВыбытие,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сумма0,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.СуммаФактПозапрошлогоГода,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ОбъемЗакупаВНатуральномВыражении,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Вознаграждение1,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Вознаграждение2,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Вознаграждение3,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Вознаграждение4,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Вознаграждение5,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Вознаграждение6,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Вознаграждение7,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Вознаграждение8,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Вознаграждение9,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Вознаграждение10,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Вознаграждение11,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Вознаграждение12,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаПоступления1,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаПоступления2,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаПоступления3,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаПоступления4,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаПоступления5,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаПоступления6,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаПоступления7,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаПоступления8,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаПоступления9,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаПоступления10,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаПоступления11,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаПоступления12,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаВыбытия1,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаВыбытия2,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаВыбытия3,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаВыбытия4,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаВыбытия5,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаВыбытия6,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаВыбытия7,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаВыбытия8,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаВыбытия9,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаВыбытия10,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаВыбытия11,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.ДатаВыбытия12,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВознаграждение1,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВознаграждение2,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВознаграждение3,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВознаграждение4,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВознаграждение5,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВознаграждение6,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВознаграждение7,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВознаграждение8,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВознаграждение9,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВознаграждение10,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВознаграждение11,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иВознаграждение12,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.КонтрольнаяСуммаВознаграждение,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иКонтрольнаяСуммаВознаграждение,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Выплачивать1,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Выплачивать2,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Выплачивать3,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Выплачивать4,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Выплачивать5,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Выплачивать6,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Выплачивать7,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Выплачивать8,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Выплачивать9,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Выплачивать10,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Выплачивать11,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Выплачивать12,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сдвиг1,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сдвиг2,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сдвиг3,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сдвиг4,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сдвиг5,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сдвиг6,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сдвиг7,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сдвиг8,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сдвиг9,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сдвиг10,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сдвиг11,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Сдвиг12,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иСдвиг1,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иСдвиг2,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иСдвиг3,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иСдвиг4,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иСдвиг5,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иСдвиг6,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иСдвиг7,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иСдвиг8,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иСдвиг9,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иСдвиг10,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иСдвиг11,
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.иСдвиг12
		|ИЗ
		|	Документ.б_РасчетнаяТаблица.РасчетнаяТаблица КАК б_РасчетнаяТаблицаРасчетнаяТаблица
		|ГДЕ
		|	б_РасчетнаяТаблицаРасчетнаяТаблица.Ссылка = &Ссылка
		|	И б_РасчетнаяТаблицаРасчетнаяТаблица.амДатаПринятияКУчету >= &НачалоПериода
		|	И НЕ б_РасчетнаяТаблицаРасчетнаяТаблица.ОС В (&СписокОС)";
		тз = Запрос.Выполнить().Выгрузить();
		
				
	Для Каждого Строка Из тз Цикл  	
			НовСтрока = ДокументОбъект.РасчетнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
	КонецЦикла;     
   	
КонецПроцедуры

Функция ВернутьБалансовуюСтоимостьНМА(Организация,НМА,ТекДата)
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НМА",НМА);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(ТекДата));
	Запрос.УстановитьПараметр("СчетОтбора",ПланыСчетов.Типовой.ПрочиеНематериальныеАктивы);
	Запрос.УстановитьПараметр("мВидыСубконто",ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокДт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&НачалоПериода,
	|			,
	|			,
	|			Счет В ИЕРАРХИИ (&счетОтбора),
	|			&мВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 = &НМА) КАК ТиповойОстаткиИОбороты";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ВОЗВРАТ Результат.Сумма;
	Иначе
		ВОЗВРАТ 0;
	КонецЕсли;
	
КонецФункции

Функция ВернутьАмортизационнуюСтоимостьНМА(Организация,НМА,ТекДата)
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НМА",НМА);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(ТекДата));
	Запрос.УстановитьПараметр("СчетОтбора",ПланыСчетов.Типовой.АмортизацияПрочихНематериальныхАктивов);
	Запрос.УстановитьПараметр("мВидыСубконто",ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&НачалоПериода,
	|			,
	|			,
	|			Счет В ИЕРАРХИИ (&счетОтбора),
	|			&мВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 = &НМА) КАК ТиповойОстаткиИОбороты";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ВОЗВРАТ Результат.Сумма;
	Иначе
		ВОЗВРАТ 0;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьАмортизациюНМА(ДокументОбъект,СтруктураОтбора) Экспорт
	
	Если ДокументОбъект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.бюджет Тогда
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Организация",ДокументОбъект.Организация);
		Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(НачалоГода(ДокументОбъект.ПериодПланирования)));
		Запрос.УстановитьПараметр("КонецПериода",КонецДня(КонецГода(ДокументОбъект.ПериодПланирования)));
		Запрос.УстановитьПараметр("СчетаОтбора",СтруктураОтбора.СчетУчетаБУ);
		Запрос.УстановитьПараметр("мВидыСубконто",ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);
		Запрос.УстановитьПараметр("СчетАмортизации",ПланыСчетов.Типовой.АмортизацияПрочихНематериальныхАктивов);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	0 КАК Сумма1,
		|	0 КАК Сумма2,
		|	0 КАК Сумма3,
		|	0 КАК Сумма4,
		|	0 КАК Сумма5,
		|	0 КАК Сумма6,
		|	0 КАК Сумма7,
		|	0 КАК Сумма8,
		|	0 КАК Сумма9,
		|	0 КАК Сумма10,
		|	0 КАК Сумма11,
		|	0 КАК Сумма12,
		|	0 КАК КонтрольнаяСумма,
		|	ДанныеПоОС.НМА КАК НМА,
		|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Период КАК амДатаПринятияКУчету,
		|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0) КАК Сумма,
		|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК амСрокПолезногоИспользования
		|ПОМЕСТИТЬ СписокОС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТиповойОстатки.Субконто1 КАК НМА,
		|		&НачалоПериода КАК амДатаПринятияКУчету
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Остатки(&НачалоПериода, Счет В ИЕРАРХИИ (&СчетаОтбора), &мВидыСубконто, Организация = &Организация) КАК ТиповойОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТиповойОбороты.Субконто1,
		|		ТиповойОбороты.Период
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Обороты(&Началопериода, &КонецПериода, День, Счет В ИЕРАРХИИ (&СчетаОтбора), &мВидысубконто, Организация = &Организация, НЕ КорСчет В ИЕРАРХИИ (&СчетаОтбора), ) КАК ТиповойОбороты) КАК ДанныеПоОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&КонецПериода, Организация = &Организация) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
		|		ПО ДанныеПоОС.НМА = ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокОС.Сумма1,
		|	СписокОС.Сумма2,
		|	СписокОС.Сумма3,
		|	СписокОС.Сумма4,
		|	СписокОС.Сумма5,
		|	СписокОС.Сумма6,
		|	СписокОС.Сумма7,
		|	СписокОС.Сумма8,
		|	СписокОС.Сумма9,
		|	СписокОС.Сумма10,
		|	СписокОС.Сумма11,
		|	СписокОС.Сумма12,
		|	СписокОС.КонтрольнаяСумма,
		|	СписокОС.НМА КАК НМА,
		|	СписокОС.амДатаПринятияКУчету,
		|	СписокОС.Сумма,
		|	СписокОС.амСрокПолезногоИспользования,
		|	ЕСТЬNULL(БалансоваяСтоимость.СуммаНачальныйОстатокДт, 0) КАК БалансоваяСтоимостьНМА,
		|	ЕСТЬNULL(АмортизацияНМА.СуммаНачальныйОстатокКт, 0) КАК АмортизацияНМА
		|ИЗ
		|	СписокОС КАК СписокОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
		|				&НачалоПериода,
		|				&НачалоПериода,
		|				,
		|				,
		|				Счет В ИЕРАРХИИ (&СчетаОтбора),
		|				&мВидыСубконто,
		|				Организация = &Организация
		|					И Субконто1 В
		|						(ВЫБРАТЬ
		|							СписокОС.НМА
		|						ИЗ
		|							СписокОС КАК СписокОС)) КАК БалансоваяСтоимость
		|		ПО СписокОС.НМА = БалансоваяСтоимость.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
		|				&НачалоПериода,
		|				&НачалоПериода,
		|				,
		|				,
		|				Счет В ИЕРАРХИИ (&СчетАмортизации),
		|				&мВидыСубконто,
		|				Организация = &Организация
		|					И Субконто1 В
		|						(ВЫБРАТЬ
		|							СписокОС.НМА
		|						ИЗ
		|							СписокОС КАК СписокОС)) КАК АмортизацияНМА
		|		ПО СписокОС.НМА = АмортизацияНМА.Субконто1
		|ГДЕ
		|	СписокОС.Сумма <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НМА
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		тз = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТЗ ИЗ тз Цикл
			СуммаГодовойАмортизации = ?(СтрокаТЗ.амСрокПолезногоИспользования = 0,0,СтрокаТЗ.Сумма/СтрокаТЗ.амСрокПолезногоИспользования * 12);
			СуммаАмортизации        = СуммаГодовойАмортизации / 12;
			Если Месяц(СтрокаТЗ.амДатаПринятияКУчету) = 1 Тогда
				НачалоРасчета = 1;
			Иначе
				НачалоРасчета = Месяц(СтрокаТЗ.амДатаПринятияКУчету)+1;
			КонецЕсли;
			СуммаАмортизацииЗаПериод = 0;
			Для А = 1 По 12 Цикл
				//ТекДата = Дата(Год(ДокументОбъект.ПериодПланирования),А,1);
				//СуммаПоБалансу = ВернутьБалансовуюСтоимостьНМА(ДокументОбъект.Организация,СтрокаТЗ.НМА,ТекДата);
				//СуммаАмортизацииПоБалансу = ВернутьАмортизационнуюСтоимостьНМА(ДокументОбъект.Организация,СтрокаТЗ.НМА,ТекДата);
				СуммаПоБалансу = СтрокаТЗ.БалансоваяСтоимостьНМА;
				СуммаАмортизацииПоБалансу = СтрокаТЗ.АмортизацияНМА;				
				Если (СуммаПоБалансу - СуммаАмортизацииПоБалансу-СуммаАмортизацииЗаПериод) > 0 Тогда
					СтрокаТЗ["Сумма"+СокрЛП(А)] = МИН(СуммаАмортизации,(СуммаПоБалансу - СуммаАмортизацииПоБалансу-СуммаАмортизацииЗаПериод));
				Иначе
					СтрокаТЗ["Сумма"+СокрЛП(А)] = 0;
				КонецЕсли;
				СуммаАмортизацииЗаПериод = СуммаАмортизацииЗаПериод + СтрокаТЗ["Сумма"+СокрЛП(А)];
				СтрокаТЗ.КонтрольнаяСумма = СтрокаТЗ.КонтрольнаяСумма + СтрокаТЗ["Сумма"+СокрЛП(А)];
			КонецЦикла;
						
		КонецЦикла;
		
	ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Организация",ДокументОбъект.Организация);
		Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(НачалоГода(ДокументОбъект.ПериодПланирования)));
		Запрос.УстановитьПараметр("КонецПериода",КонецДня(КонецГода(ДокументОбъект.ПериодПланирования)));
		Запрос.УстановитьПараметр("СчетаОтбора",СтруктураОтбора.СчетУчетаБУ);
		Запрос.УстановитьПараметр("мВидыСубконто",ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);
		Запрос.УстановитьПараметр("СчетАмортизации",ПланыСчетов.Типовой.АмортизацияПрочихНематериальныхАктивов);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	0 КАК Сумма1,
		|	0 КАК Сумма2,
		|	0 КАК Сумма3,
		|	0 КАК Сумма4,
		|	0 КАК Сумма5,
		|	0 КАК Сумма6,
		|	0 КАК Сумма7,
		|	0 КАК Сумма8,
		|	0 КАК Сумма9,
		|	0 КАК Сумма10,
		|	0 КАК Сумма11,
		|	0 КАК Сумма12,
		|	0 КАК КонтрольнаяСумма,
		|	ДанныеПоОС.НМА КАК НМА,
		|	&НачалоПериода КАК амДатаПринятияКУчету,
		|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0) КАК Сумма,
		|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК амСрокПолезногоИспользования
		|ПОМЕСТИТЬ СписокОС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТиповойОстатки.Субконто1 КАК НМА,
		|		&НачалоПериода КАК амДатаПринятияКУчету
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Остатки(&НачалоПериода, Счет В ИЕРАРХИИ (&СчетаОтбора), &мВидыСубконто, Организация = &Организация) КАК ТиповойОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТиповойОбороты.Субконто1,
		|		ТиповойОбороты.Период
		|	ИЗ
		|		РегистрБухгалтерии.Типовой.Обороты(&Началопериода, &КонецПериода, День, Счет В ИЕРАРХИИ (&СчетаОтбора), &мВидысубконто, Организация = &Организация, НЕ КорСчет В ИЕРАРХИИ (&СчетаОтбора), ) КАК ТиповойОбороты) КАК ДанныеПоОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&КонецПериода, Организация = &Организация) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
		|		ПО ДанныеПоОС.НМА = ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокОС.Сумма1,
		|	СписокОС.Сумма2,
		|	СписокОС.Сумма3,
		|	СписокОС.Сумма4,
		|	СписокОС.Сумма5,
		|	СписокОС.Сумма6,
		|	СписокОС.Сумма7,
		|	СписокОС.Сумма8,
		|	СписокОС.Сумма9,
		|	СписокОС.Сумма10,
		|	СписокОС.Сумма11,
		|	СписокОС.Сумма12,
		|	СписокОС.КонтрольнаяСумма,
		|	СписокОС.НМА,
		|	СписокОС.амДатаПринятияКУчету,
		|	СписокОС.Сумма,
		|	СписокОС.амСрокПолезногоИспользования,
		|	ЕСТЬNULL(БалансоваяСтоимость.СуммаНачальныйОстатокДт, 0) КАК БалансоваяСтоимостьНМА,
		|	ЕСТЬNULL(АмортизацияНМА.СуммаНачальныйОстатокКт, 0) КАК АмортизацияНМА
		|ИЗ
		|	СписокОС КАК СписокОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
		|				&НачалоПериода,
		|				&НачалоПериода,
		|				,
		|				,
		|				Счет В ИЕРАРХИИ (&СчетаОтбора),
		|				&мВидыСубконто,
		|				Организация = &Организация
		|					И Субконто1 В
		|						(ВЫБРАТЬ
		|							СписокОС.НМА
		|						ИЗ
		|							СписокОС КАК СписокОС)) КАК БалансоваяСтоимость
		|		ПО СписокОС.НМА = БалансоваяСтоимость.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
		|				&НачалоПериода,
		|				&НачалоПериода,
		|				,
		|				,
		|				Счет В ИЕРАРХИИ (&СчетАмортизации),
		|				&мВидыСубконто,
		|				Организация = &Организация
		|					И Субконто1 В
		|						(ВЫБРАТЬ
		|							СписокОС.НМА
		|						ИЗ
		|							СписокОС КАК СписокОС)) КАК АмортизацияНМА
		|		ПО СписокОС.НМА = АмортизацияНМА.Субконто1";
		
		тз = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТЗ ИЗ тз Цикл
			СуммаГодовойАмортизации = ?(СтрокаТЗ.амСрокПолезногоИспользования = 0,0,СтрокаТЗ.Сумма/СтрокаТЗ.амСрокПолезногоИспользования * 12);
			СуммаАмортизации        = СуммаГодовойАмортизации / 12;
			
			//Если СтрокаТЗ.амДатаПринятияКУчету < НачалоГода(ДокументОбъект.ПериодПланирования) Тогда
				НачалоРасчета = ДокументОбъект.ВидКорректировки.НомерМесяца;
			//Иначе
			//	НачалоРасчета = Месяц(СтрокаТЗ.амДатаПринятияКУчету)+1;
			//КонецЕсли;
			СуммаАмортизацииЗаПериод = 0;
			Для А = НачалоРасчета По 12 Цикл
				//ТекДата = Дата(Год(ДокументОбъект.ПериодПланирования),А,1);
				//СуммаПоБалансу = ВернутьБалансовуюСтоимостьНМА(ДокументОбъект.Организация,СтрокаТЗ.НМА,ТекДата);
				//СуммаАмортизацииПоБалансу = ВернутьАмортизационнуюСтоимостьНМА(ДокументОбъект.Организация,СтрокаТЗ.НМА,ТекДата);
				СуммаПоБалансу = СтрокаТЗ.БалансоваяСтоимостьНМА;
				СуммаАмортизацииПоБалансу = СтрокаТЗ.АмортизацияНМА;
				Если (СуммаПоБалансу - СуммаАмортизацииПоБалансу-СуммаАмортизацииЗаПериод) > 0 Тогда
					СтрокаТЗ["Сумма"+СокрЛП(А)] = МИН(СуммаАмортизации,(СуммаПоБалансу - СуммаАмортизацииПоБалансу-СуммаАмортизацииЗаПериод));
				Иначе
					СтрокаТЗ["Сумма"+СокрЛП(А)] = 0;
				КонецЕсли;
				СуммаАмортизацииЗаПериод = СуммаАмортизацииЗаПериод + СтрокаТЗ["Сумма"+СокрЛП(А)];
				СтрокаТЗ.КонтрольнаяСумма = СтрокаТЗ.КонтрольнаяСумма + СтрокаТЗ["Сумма"+СокрЛП(А)];
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	//ДокументОбъект.РасчетнаяТаблица.Загрузить(тз);
	
	Для Каждого Строка Из тз Цикл  	
		
		Если Строка.КонтрольнаяСумма <> 0 Тогда
			НовСтрока = ДокументОбъект.РасчетнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
		Конецесли;
					
	КонецЦикла;  
	
КонецПроцедуры

Процедура ЗаполнитьПоНалогуНаЗемлю(ДокументОбъект) Экспорт
	
	Если ДокументОбъект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.бюджет Тогда
		Запрос = Новый Запрос();	
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ОбъектыЗемельногоНалогаСрезПоследних.Период,
		|	ОбъектыЗемельногоНалогаСрезПоследних.Регистратор,
		|	ОбъектыЗемельногоНалогаСрезПоследних.ОбъектНалогообложения КАК ОС,
		|	ОбъектыЗемельногоНалогаСрезПоследних.Налогоплательщик,
		|	ОбъектыЗемельногоНалогаСрезПоследних.СтруктурнаяЕдиница,
		|	ОбъектыЗемельногоНалогаСрезПоследних.Организация,
		|	ПараметрыРасчетаЗемельногоНалога.КатегорияЗемель,
		|	ПараметрыРасчетаЗемельногоНалога.КатегорияЗемель.ВидЗемельногоНалога КАК ВидЗемельногоНалога,
		|	ПараметрыРасчетаЗемельногоНалога.КатегорияЗемель.ВидЗемельногоНалога.КодБК КАК КБК,
		|	ПараметрыРасчетаЗемельногоНалога.БазоваяСтавкаНалога,
		|	ПараметрыРасчетаЗемельногоНалога.ПлощадьОблагаемая,
		|	(ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.БазоваяСтавкаНалога, 0) + ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПроцентИзмененияБазовойСтавкиНалога, 0) * ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.БазоваяСтавкаНалога, 0) / 100) * ВЫБОР
		|		КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалога, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалога, 0)
		|	КОНЕЦ * ВЫБОР
		|		КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ, 0)
		|	КОНЕЦ * ВЫБОР
		|		КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов, 0)
		|	КОНЕЦ КАК СтавкаНалогаСУчетомКорректировки,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПлощадьОблагаемая, 0) * (ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.БазоваяСтавкаНалога, 0) + ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.ПроцентИзмененияБазовойСтавкиНалога, 0) * ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.БазоваяСтавкаНалога, 0) / 100) * ВЫБОР
		|			КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалога, 0) = 0
		|				ТОГДА 1
		|			ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалога, 0)
		|		КОНЕЦ * ВЫБОР
		|			КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ, 0) = 0
		|				ТОГДА 1
		|			ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ, 0)
		|		КОНЕЦ * ВЫБОР
		|			КОГДА ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов, 0) = 0
		|				ТОГДА 1
		|			ИНАЧЕ ЕСТЬNULL(ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов, 0)
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаЗемельногоНалога,
		|	ПараметрыРасчетаЗемельногоНалога.ПроцентИзмененияБазовойСтавкиНалога,
		|	ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалога,
		|	ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаНаТерриторияхСЭЗ,
		|	ПараметрыРасчетаЗемельногоНалога.КорректировкаБазовойСтавкиНалогаПоРешениюМестныхОрганов,
		|	0 КАК КонтрольнаяСумма,
		|	0 КАК сумма2,
		|	0 КАК Сумма5,
		|	0 КАК Сумма8,
		|	0 КАК Сумма11
		|ИЗ
		|	РегистрСведений.ОбъектыЗемельногоНалога.СрезПоследних(
		|			&Дата,
		|			Налогоплательщик = &Налогоплательщик
		|				) КАК ОбъектыЗемельногоНалогаСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыРасчетаЗемельногоНалога КАК ПараметрыРасчетаЗемельногоНалога
		|		ПО ОбъектыЗемельногоНалогаСрезПоследних.ОбъектНалогообложения = ПараметрыРасчетаЗемельногоНалога.ОсновноеСредство
		|			И ОбъектыЗемельногоНалогаСрезПоследних.Организация = ПараметрыРасчетаЗемельногоНалога.Организация
		|ГДЕ
		|	ОбъектыЗемельногоНалогаСрезПоследних.НачислятьНалог = ИСТИНА И СтруктурнаяЕдиница В (&СписокСтруктурныхЕдиниц)
		|ИТОГИ
		|	СУММА(СуммаЗемельногоНалога)
		|ПО
		|	КБК";
		
		
		Запрос.Текст = ТекстЗапроса;
		
		// Установка параметров	
		Запрос.УстановитьПараметр("Дата",НачалоДня(НачалоГода(ДокументОбъект.ПериодПланирования)));
		Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц", 	ДокументОбъект.Организация);
		Запрос.УстановитьПараметр("Налогоплательщик", 			ДокументОбъект.Организация);			   
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Сообщить("Данные для заполнения данных по земельному налогу отсутствуют...", СтатусСообщения.Информация);	
		КонецЕсли;	
		
		Выборка = Результат.Выгрузить();
		
		ВыборкаЗемля = Выборка.СкопироватьКолонки("ОС,СуммаЗемельногоНалога,КонтрольнаяСумма,Сумма2,Сумма5,Сумма8,Сумма11");
		ВыборкаЗемля.Свернуть("ОС","СуммаЗемельногоНалога,КонтрольнаяСумма,Сумма2,Сумма5,Сумма8,Сумма11");
		
		// РАСЧЕТ ЗЕМЕЛЬНОГО НАЛОГА		
		
		Для Каждого СтрокаТЧ ИЗ ВыборкаЗемля Цикл
			СуммаВМесяц = Окр(СтрокаТЧ.СуммаЗемельногоНалога/4,0);
			СуммаВПоследнийМесяц = СтрокаТЧ.СуммаЗемельногоНалога - СуммаВМесяц*3;
			
			СтрокаТЧ.Сумма2 = СуммаВМесяц;
			СтрокаТЧ.Сумма5 = СуммаВМесяц;
			СтрокаТЧ.Сумма8 = СуммаВМесяц;
			СтрокаТЧ.Сумма11 = СуммаВПоследнийМесяц;
			
			СтрокаТЧ.КонтрольнаяСумма = СтрокаТЧ.Сумма2+СтрокаТЧ.Сумма5+СтрокаТЧ.Сумма8+СтрокаТЧ.Сумма11;
			
		КонецЦикла;
		
		
	КонецЕсли;
	
	ДокументОбъект.Расчетнаятаблица.Загрузить(ВыборкаЗемля);	
	
КонецПроцедуры

Процедура ЗаполнитьПоНалогуНаИмущество(ДокументОбъект) Экспорт
	
	Если ДокументОбъект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.бюджет Тогда
		Запрос = Новый Запрос();	
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ОбъектыИмущественногоНалогаСрезПоследних.Объектналогообложения КАК ОС,
		|	СУММА(ЕСТЬNULL(ТиповойОстатки.СуммаОстаток, 0)) КАК ОстаточнаяСтоимость,
		|	0 КАК КонтрольнаяСумма,
		|	0 КАК сумма2,
		|	0 КАК Сумма5,
		|	0 КАК Сумма8,
		|	0 КАК Сумма11
		|ИЗ
		|	РегистрСведений.ОбъектыИмущественногоНалога.СрезПоследних(
		|			&Дата,
		|			Налогоплательщик = &Налогоплательщик
		|				) КАК ОбъектыИмущественногоНалогаСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(
		|				&Дата,
		|				Счет В ИЕРАРХИИ (&СписокСчетов),
		|				,
		|				Субконто1 В
		|					(ВЫБРАТЬ
		|						ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения
		|					ИЗ
		|						РегистрСведений.ОбъектыИмущественногоНалога.СрезПоследних(&Дата, Налогоплательщик = &Налогоплательщик) КАК ОбъектыИмущественногоНалогаСрезПоследних
		|					ГДЕ
		|						ОбъектыИмущественногоНалогаСрезПоследних.НачислятьНалог = ИСТИНА И СтруктурнаяЕдиница В (&СписокСтруктурныхЕдиниц))) КАК ТиповойОстатки
		|		ПО (ТиповойОстатки.Организация = ОбъектыИмущественногоНалогаСрезПоследних.Организация)
		|			И (ТиповойОстатки.Субконто1 = ОбъектыИмущественногоНалогаСрезПоследних.ОбъектНалогообложения)
		|ГДЕ
		|	ОбъектыИмущественногоНалогаСрезПоследних.НачислятьНалог = ИСТИНА И СтруктурнаяЕдиница В (&СписокСтруктурныхЕдиниц)
		|СГРУППИРОВАТЬ ПО ОбъектыИмущественногоНалогаСрезПоследних.Объектналогообложения
		|";
		
		
		Запрос.Текст = ТекстЗапроса;
		
		// Установка параметров	
		Запрос.УстановитьПараметр("Дата",НачалоДня(НачалоГода(ДокументОбъект.ПериодПланирования)));
		Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц", 	ДокументОбъект.Организация);
		Запрос.УстановитьПараметр("Налогоплательщик", 			ДокументОбъект.Организация);			   
		
		СписокСчетовОС = Новый СписокЗначений;
		СписокСчетовОС.Добавить(ПланыСчетов.Типовой.ИнвестицииВНедвижимость_);        // счет 2300
		СписокСчетовОС.Добавить(ПланыСчетов.Типовой.ОсновныеСредства_);               // счет 2400
		СписокСчетовОС.Добавить(ПланыСчетов.Типовой.БиологическиеАктивы);		      // счет 2500
		СписокСчетовОС.Добавить(ПланыСчетов.Типовой.НематериальныеАктивы);            // счет 2700
		
		Запрос.УстановитьПараметр("СписокСчетов", СписокСчетовОС);		
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Сообщить("Данные для заполнения данных по налогу на имущетсво отсутствуют...", СтатусСообщения.Информация);	
		КонецЕсли;	
		
		ТаблицаРезультата = Результат.Выгрузить();	
		
		// РАСЧЕТ НАЛОГА НА ИМУЩЕСТВО		
		СтавкаНалога = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(ДокументОбъект.Организация, Справочники.НалогиСборыОтчисления.НалогНаИмущество, НачалоДня(НачалоГода(ДокументОбъект.ПериодПланирования)));		
		
		Для Каждого СтрокаОтчета из ТаблицаРезультата Цикл  			
			ОстаточнаяСтоимость = ?(СтрокаОтчета.ОстаточнаяСтоимость = Null, 0, СтрокаОтчета.ОстаточнаяСтоимость);
			ОбщаяСумма = Окр(ОстаточнаяСтоимость * СтавкаНалога /100,0);
			СуммаВМесяц = Окр(ОбщаяСумма/4,0);
			СуммаВПоследнийМесяц = ОбщаяСумма - СуммаВМесяц*3;
			
			СтрокаОтчета.Сумма2 = СуммаВМесяц;
			СтрокаОтчета.Сумма5 = СуммаВМесяц;
			СтрокаОтчета.Сумма8 = СуммаВМесяц;
			СтрокаОтчета.Сумма11 = СуммаВПоследнийМесяц;
			СтрокаОтчета.КонтрольнаяСумма = СтрокаОтчета.Сумма2 + СтрокаОтчета.Сумма5 + СтрокаОтчета.Сумма8 + СтрокаОтчета.Сумма11;
			
		КонецЦикла;
	КонецЕсли;
	
	ДокументОбъект.РасчетнаяТаблица.Загрузить(ТаблицаРезультата);	
КонецПроцедуры

Процедура ПроставитьПризнакКорректировки(ДокументОбъект) Экспорт
	
	Для Каждого СтрокаТЧ ИЗ ДокументОбъект.РасчетнаяТаблица Цикл
		СтрокаТЧ.ПризнакКорректировки = Истина;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ ИЗ ДокументОбъект.РасчетнаяТаблицаМасло Цикл
		СтрокаТЧ.ПризнакКорректировки = Истина;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ ИЗ ДокументОбъект.Зарплата Цикл
		СтрокаТЧ.ПризнакКорректировки = Истина;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ ИЗ ДокументОбъект.Налоги Цикл
		СтрокаТЧ.ПризнакКорректировки = Истина;
	КонецЦикла;
Конецпроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЗАПОЛНЕНИЯ ДАННЫХ ПО НАЛОГУ НА ТРАНСПОРТ

Функция ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавок, ЗначениеПоказателя = Неопределено, РассчитатьОтПревышения = 0, ОбъемПревышения = 0)  Экспорт
	
	Если ЗначениеПоказателя = Неопределено Тогда
		ЗначениеПоказателя  = 0;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ТаблицаСтавок) = Тип("ТаблицаЗначений") Тогда	
		Возврат 0;
	КонецЕсли;	                       
	ТаблицаСтавок.Сортировать("НижнийПредел");
	Для Каждого СтрокаСтавок Из ТаблицаСтавок Цикл
		НижнийПредел   = СтрокаСтавок.НижнийПредел;
		ВерхнийПредел  = СтрокаСтавок.ВерхнийПредел;
		БезОграничения = СтрокаСтавок.БезОграничения;
		
		Если БезОграничения Тогда
			Если РассчитатьОтпревышения = 1 Тогда
				ОбъемПревышения = ЗначениеПоказателя - НижнийПредел;				
			КонецЕсли; 
			Возврат СтрокаСтавок.СтавкаНалога;
		КонецЕсли;
		
		Если (ЗначениеПоказателя > НижнийПредел) И
			 ((ЗначениеПоказателя <= ВерхнийПредел) Или БезОграничения) Тогда			
			 
			Если РассчитатьОтпревышения = 1 Тогда
				ОбъемПревышения = ЗначениеПоказателя - НижнийПредел;				
			КонецЕсли;      
			
			Возврат СтрокаСтавок.СтавкаНалога;
		КонецЕсли;	
	КонецЦикла;

	Возврат 0;
	
КонецФункции // ПолучитьСтавкуНалогаНаТранспортДляОбъекта()

// Описание:
//  Возвращает размер первышения по объему двигателя 
//  для легковых автомобилей
Функция ПолучитьРазмерПревышенияПоОбъему(ВидТранспортногоСредства, ЗначениеХарактеристикиОбъекта, СтруктураСтавокНалога) Экспорт
	
	Если ТипЗнч(ВидТранспортногоСредства) = Тип("ПеречислениеСсылка.ВидыТранспортныхСредств") 
		И ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛегковойАвтомобиль Тогда
		
		ТаблицаСтавокНалога = Неопределено;				 
		Если СтруктураСтавокНалога.Свойство("ПревышенияПоVЛегковых", ТаблицаСтавокНалога) Тогда				 	
			ОбъемПревышения = 0;
			ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавокНалога, ЗначениеХарактеристикиОбъекта,1,ОбъемПревышения) ;
			Возврат ОбъемПревышения;
		КонецЕсли;					 							
	КонецЕсли;	
	
	Возврат 0;	
КонецФункции // ПолучитьРазмерПревышенияПоОбъему

Функция СформироватьСтуктуруСтавокНалогаНаТранспорт(Период) Экспорт 
	
	СтруктураСтавок = Новый Структура;			
	МакетСтавок = ПолучитьОбщийМакет("СтавкиНалогаНаТранспорт");	
	
	СтруктураТаблицы = Новый ТаблицаЗначений;
	СтруктураТаблицы.Колонки.Добавить("НижнийПредел");
	СтруктураТаблицы.Колонки.Добавить("ВерхнийПредел");
	СтруктураТаблицы.Колонки.Добавить("БезОграничения");
	СтруктураТаблицы.Колонки.Добавить("СтавкаНалога");
	                              	
	Область = МакетСтавок.Области["Строка" + Период];
	Для Ном = Область.Верх По Область.Низ Цикл
		Наименование  = СокрЛП(МакетСтавок.Область(Ном, 1).Текст);
		НижнийПредел  = СокрЛП(МакетСтавок.Область(Ном, 2).Текст);
		ВерхнийПредел = СокрЛП(МакетСтавок.Область(Ном, 3).Текст);
		СтавкаНалога  = СокрЛП(МакетСтавок.Область(Ном, 4).Текст);
		
		Если Не СтруктураСтавок.Свойство(Наименование) Тогда			
			СтруктураСтавок.Вставить(Наименование, СтруктураТаблицы.Скопировать());
		КонецЕсли;	
		
		Строка = СтруктураСтавок[Наименование].Добавить();
		Строка.БезОграничения = ВерхнийПредел = "*";
		Строка.НижнийПредел   = ?(Не НижнийПредел = "*", Число(НижнийПредел), 0);
		Строка.ВерхнийПредел  = ?(НЕ ВерхнийПредел = "*",Число(ВерхнийПредел), 999999);
		Строка.СтавкаНалога	  = Число(СтавкаНалога);
	КонецЦикла;
	
	Возврат СтруктураСтавок;
	
КонецФункции // СформироватьСтуктуруСтавокНалогаНаТранспорт()

Функция РазностьДатВМесяцах(знач Дата1, Дата2) Экспорт
	
	КоличествоЛет     = Год(Дата2) - Год(Дата1);
	КоличествоМесяцев = Месяц(Дата2) - Месяц(Дата1);	
	// корректировка для случая Дата1 = 15 марта, Дата2 = 10 апреля. месяц еще не истек
	Если не Месяц(Дата2) = Месяц(Дата1) и
		День(Дата2) < День(Дата1)	ТОгда
		КоличествоМесяцев =  КоличествоМесяцев - 1;
	КонецЕсли;	                                              	
	РазностьВМесяцах = КоличествоЛет * 12 + КоличествоМесяцев;		
	
	Возврат РазностьВМесяцах;	                              	
	
КонецФункции

//  Возвращает размер корректировки налога для случаев, указанных в п. 3,4,5 и 7 статьи 347 НК РК
//
Функция ПолучитьРазмерКорректировки(ДатаПериода,ВидТранспортногоСредства, ХарактеристикиОбъекта, СтруктураСтавокНалога)	Экспорт
	
	ПоправочныйКоэффициент = 1;
	Если НЕ ТипЗнч(ВидТранспортногоСредства) = Тип("ПеречислениеСсылка.ВидыТранспортныхСредств")
		ИЛИ НЕ ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат Тогда
		Возврат ПоправочныйКоэффициент;
	КонецЕсли;
	// 01 июля отчетного года
	ОтчетнаяДата = Дата(Год(ДатаПериода), 07, 01) ;
	
	// - Коэффициенты (*К) - летательные аппараты
	Если ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат 
		 и ХарактеристикиОбъекта.ДатаВыпуска <> Дата(1,1,1) ТОгда
		 
		 ТаблицаСтавокНалога = Неопределено;				  
		 Если ХарактеристикиОбъекта.ЭксплуатацияВРКдо1апреля = Ложь Тогда
		 	 Если СтруктураСтавокНалога.Свойство("КЛетательныеАппаратыПосле010499", ТаблицаСтавокНалога) Тогда				 	
				ПоправочныйКоэффициент = ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавокНалога, РазностьДатВМесяцах(ХарактеристикиОбъекта.ДатаВыпуска, ОтчетнаяДата)/12) ;						
			 КонецЕсли;					 											
		 Иначе
			 Если СтруктураСтавокНалога.Свойство("КЛетательныеАппаратыДо010499", ТаблицаСтавокНалога) Тогда				 	
				ПоправочныйКоэффициент = ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавокНалога, РазностьДатВМесяцах(ХарактеристикиОбъекта.ДатаВыпуска, ОтчетнаяДата)/12) ;						
			 КонецЕсли;					 											
		КонецЕсли;		
	КонецЕсли;
		
	Возврат ПоправочныйКоэффициент;	
	
КонецФункции // ПолучитьРазмерКорректировки()

Процедура ЗаполнитьПоНалогуНаТранспорт(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос();
	
	// Сначала базовая таблица периодов
	// поскольку начисление налога начинается с 1-го числа месяца приобретения (ст.368 п.2), 
	// то оперируем значениям на конец месяца
	// т.е. если объект присутствует на конец месяца, то за этот месяц необходимо начислять налог.
	ТекстЗапросаПо6Месяцам = "";	
	Для Счетчик = 1 по 6 Цикл
		Если Не ТекстЗапросаПо6Месяцам = "" ТОгда
			ТекстЗапросаПо6Месяцам = ТекстЗапросаПо6Месяцам + "
			| ОБЪЕДИНИТЬ ВСЕ
			| ";
		КонецЕсли;
		ТекстЗапросаПо6Месяцам = ТекстЗапросаПо6Месяцам +  "
		                        |	ВЫБРАТЬ
		                        |	&Дата" + СокрЛП(Счетчик) + " КАК Период		                        
								| ";
		Запрос.УстановитьПараметр("Дата" + СокрЛП(Счетчик), КонецМесяца(ДобавитьМесяц(НачалоГода(ДокументОбъект.ПериодПланирования),Счетчик-1)));			
	КонецЦикла;	
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			Объекты.ПериодГода КАК ПериодГода,
	               |			Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
	               |			Объекты.Организация КАК Организация,
	               |			МАКСИМУМ(Объекты.ПериодЗаписи) КАК ПериодЗаписи
				   |	ПОМЕСТИТЬ ВТ_Объекты			
	               |	ИЗ
	               |	 (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |		Периоды.Период КАК ПериодГода,
	               |		ОбъектыТранспортногоНалога.ОбъектНалогообложения КАК ОбъектНалогообложения,
	               |		ОбъектыТранспортногоНалога.Организация КАК Организация,
	               |		ОбъектыТранспортногоНалога.Период КАК ПериодЗаписи
	               |	ИЗ
	               |		(" + ТекстЗапросаПо6Месяцам + ") КАК Периоды
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортногоНалога КАК ОбъектыТранспортногоНалога
	               |			ПО ОбъектыТранспортногоНалога.Период <= Периоды.Период
	               |				И (ОбъектыТранспортногоНалога.Налогоплательщик = &Налогоплательщик)) КАК Объекты
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			Объекты.ОбъектНалогообложения,
	               |			Объекты.Организация,
	               |			Объекты.ПериодГода;
	               |ВЫБРАТЬ
	               |	ОбщийЗапрос.ОбъектНалогообложения,
				   |	Представление(ОбщийЗапрос.ОбъектНалогообложения) как ПредставлениеОбъектаНалогообложения,
	               |	ОбщийЗапрос.Организация,
	               |	СУММА(ОбщийЗапрос.КоличествоМесяцев) КАК КоличествоМесяцев,	               
	               |	ПараметрыРасчетаТранспортногоНалога.ВидТранспортногоСредства,
	               |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.Грузоподъемность,0) КАК Грузоподъемность,
	               |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.ДатаВыпуска, ДатаВремя(1,1,1)) КАК ДатаВыпуска,
	               |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.ДатаПриобретения, ДатаВремя(1,1,1)) КАК ДатаПриобретения,
	               |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.КоличествоПосадочныхМест,0) КАК КоличествоПосадочныхМест,
	               |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.МощностьВКиловаттах,0) КАК МощностьВКиловаттах,
	               |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.МощностьВЛошадиныхСилах,0) КАК МощностьВЛошадиныхСилах,
	               |	ПараметрыРасчетаТранспортногоНалога.НомерТранспортногоСредства,
	               |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.ОбъемДвигателя,0) КАК ОбъемДвигателя,
	               |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.ПроизводствоСтранСНГ,Ложь) КАК ПроизводствоСтранСНГ,
				   |	ЕстьNull(ПараметрыРасчетаТранспортногоНалога.ЭксплуатацияВРКдо1апреля1999г,Ложь) КАК ЭксплуатацияВРКдо1апреля
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Объекты.ПериодГода КАК ПериодГода,
	               |		Объекты.ОбъектНалогообложения КАК ОбъектНалогообложения,
	               |		Объекты.Организация КАК Организация,
	               |		Объекты.ПериодЗаписи КАК ПериодЗаписи,
				   |		ВЫБОР
	               |			КОГДА ОбъектыТранспортногоНалога.НачислятьНалог
	               |				ТОГДА 
				   |				 ВЫБОР КОГДА Объекты.ПериодГода = &Дата6 Тогда 7 иначе 1 Конец
	               |			ИНАЧЕ 0
	               |		КОНЕЦ КАК КоличествоМесяцев
				   |	ИЗ
	               |		ВТ_Объекты КАК Объекты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортногоНалога КАК ОбъектыТранспортногоНалога
	               |			ПО Объекты.ПериодЗаписи = ОбъектыТранспортногоНалога.Период				   
				   |			И Объекты.ОбъектНалогообложения = ОбъектыТранспортногоНалога.ОбъектНалогообложения
	               |			И Объекты.Организация = ОбъектыТранспортногоНалога.Организация
	               |		ГДЕ
	               |			ОбъектыТранспортногоНалога.СтруктурнаяЕдиница В (&СписокСтруктурныхЕдиниц)) КАК ОбщийЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыРасчетаТранспортногоНалога КАК ПараметрыРасчетаТранспортногоНалога
	               |		ПО ОбщийЗапрос.Организация = ПараметрыРасчетаТранспортногоНалога.Организация
	               |			И ОбщийЗапрос.ОбъектНалогообложения = ПараметрыРасчетаТранспортногоНалога.ОсновноеСредство
	               |				   
				   |	ГДЕ
				   |		ОбщийЗапрос.КоличествоМесяцев > 0
				   |СГРУППИРОВАТЬ ПО
	               |	ОбщийЗапрос.ОбъектНалогообложения,
	               |	ОбщийЗапрос.Организация,	               
	               |	ПараметрыРасчетаТранспортногоНалога.ВидТранспортногоСредства,
	               |	ПараметрыРасчетаТранспортногоНалога.Грузоподъемность,
	               |	ПараметрыРасчетаТранспортногоНалога.ДатаВыпуска,
	               |	ПараметрыРасчетаТранспортногоНалога.ДатаПриобретения,
	               |	ПараметрыРасчетаТранспортногоНалога.КоличествоПосадочныхМест,
	               |	ПараметрыРасчетаТранспортногоНалога.МощностьВКиловаттах,
	               |	ПараметрыРасчетаТранспортногоНалога.МощностьВЛошадиныхСилах,
	               |	ПараметрыРасчетаТранспортногоНалога.НомерТранспортногоСредства,
	               |	ПараметрыРасчетаТранспортногоНалога.ОбъемДвигателя,
				   |	ПараметрыРасчетаТранспортногоНалога.ЭксплуатацияВРКдо1апреля1999г,
	               |	ПараметрыРасчетаТранспортногоНалога.ПроизводствоСтранСНГ";
		
	
	Запрос.Текст = ТекстЗапроса;
	
	// Установка параметров
	Запрос.УстановитьПараметр("СписокСтруктурныхЕдиниц", 	ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("Налогоплательщик", 			ДокументОбъект.Организация);			   
	
		
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		Сообщить("Данные для заполнения отсутствуют...", СтатусСообщения.Информация);	
	КонецЕсли;	  	
	
	ТаблицаОтчета = Результат.Выгрузить();	
	
	СтруктураСтавокНалога = СформироватьСтуктуруСтавокНалогаНаТранспорт("2011");
	СтруктураОбязательныхРеквизитов = Новый Структура("ЛегковойАвтомобиль, ГрузовойАвтомобиль, Автобус, Катер, ЛетательныйАппарат, Мотоцикл, СамоходнаяМашина, ЖелезнодорожныйТяговыйПодвижнойСостав, МотороВагонныйПодвижнойСостав",
													"ОбъемДвигателя", "Грузоподъемность", "КоличествоПосадочныхМест",
													"МощностьВЛошадиныхСилах", "МощностьВКиловаттах", "МощностьВКиловаттах", "ОбъектНалогообложения", "МощностьВКиловаттах", "МощностьВКиловаттах");
													
	Всего = 0;
	РасчетБезРзбиенияПоСрокамДействияМРП=0;
	
	Для Каждого СтрокаОтчета из ТаблицаОтчета Цикл  			
		
		//Если РасчетБезРзбиенияПоСрокамДействияМРП = 0 Тогда
		//	ВеличинаМРП = парамМРП;
		//Иначе
			ВеличинаМРП = РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьПоследнее(НачалоДня(НачалоГода(ДокументОбъект.ПериодПланирования))).РазмерМРП; 
		//КонецЕсли;
		
		Если Не СтрокаОтчета.ВидТранспортногоСредства = Null И Не СтрокаОтчета.ВидТранспортногоСредства.Пустая() Тогда
			
			МетаданныеЗначенияПеречисления = Метаданные.Перечисления["ВидыТранспортныхСредств"].ЗначенияПеречисления[Перечисления.ВидыТранспортныхСредств.Индекс(СтрокаОтчета.ВидТранспортногоСредства)];
			ВидТранспортногоСредстваСтрока = СокрЛП(МетаданныеЗначенияПеречисления.Имя);
			// Базовый показатель (700.02.004)
			
			// Значение ключевого реквизита
			ИмяРеквизита = "";
			ЗначениеПоказателя = 0;
			Если СтруктураОбязательныхРеквизитов.Свойство(ВидТранспортногоСредстваСтрока, ИмяРеквизита) И
				НЕ  СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.СамоходнаяМашина  Тогда						 
				ЗначениеПоказателя = СтрокаОтчета[ИмяРеквизита];		    			 						
			КонецЕсли;	     						 
			
			// Базовая ставка Налога 700.02.005
			ТаблицаСтавокНалога = Неопределено;				 
			СуммаНалога 		= 0;
			СтавкаНалога = 0;
			Если СтруктураСтавокНалога.Свойство(ВидТранспортногоСредстваСтрока, ТаблицаСтавокНалога) Тогда				 	
				СтавкаНалога =ПолучитьСтавкуНалогаНаТранспортДляОбъекта(ТаблицаСтавокНалога, ЗначениеПоказателя);
				Если РасчетБезРзбиенияПоСрокамДействияМРП = 0 Тогда
					Если СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат 
						Или СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЖелезнодорожныйТяговыйПодвижнойСостав
						Или СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.МотороВагонныйПодвижнойСостав Тогда
						СуммаНалога = СтавкаНалога * ЗначениеПоказателя * ВеличинаМРП;
					Иначе
						СуммаНалога = СтавкаНалога * ВеличинаМРП;						 
					КонецЕсли;
				Иначе					
					ВеличинаМРПДо1Июля = РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьПоследнее(НачалоДня(НачалоГода(ДокументОбъект.ПериодПланирования))).РазмерМРП; // за первые 6 месяецв
					// количество месяцев может быть 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12 (не 6)
					Если СтрокаОтчета.КоличествоМесяцев <=5 Тогда
						// актив выбыл до 1 июля - считаем по старой ставке
						Если СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат
							Или СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЖелезнодорожныйТяговыйПодвижнойСостав
							Или СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.МотороВагонныйПодвижнойСостав Тогда
							СуммаНалога = СтавкаНалога * ЗначениеПоказателя * ВеличинаМРПДо1Июля;
						Иначе
							СуммаНалога = СтавкаНалога * ВеличинаМРПДо1Июля;						 
						КонецЕсли;
					Иначе
						// актив мог выбыть после 1 июля, а мог и не выбыть - после 1 июля мы не смотрим выбыл он или нет.
						КолВоМесДо1Июля = СтрокаОтчета.КоличествоМесяцев - 6;
						КолВоМесПосле1Июля = 6;
						
						ВеличинаМРППосле1июля = РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьПоследнее(НачалоДня(КонецГода(ДокументОбъект.ПериодПланирования))).РазмерМРП; // за последние 6 месяецв
						
						// рассчитаем сумму налога по формуле:					
						// СуммаНалога = СтавкаНалога * (МРП1*КолВоМесДо1Июля + МРП2*КолВоМесПосле1Июля) / КолВоМесяцев
						СреднееМРП = (ВеличинаМРПДо1Июля*КолВоМесДо1Июля + ВеличинаМРППосле1июля*КолВоМесПосле1Июля) / СтрокаОтчета.КоличествоМесяцев;
						Если СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛетательныйАппарат 
							Или СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЖелезнодорожныйТяговыйПодвижнойСостав
							Или СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.МотороВагонныйПодвижнойСостав Тогда
							СуммаНалога = СтавкаНалога * ЗначениеПоказателя * СреднееМРП;
						Иначе
							СуммаНалога = СтавкаНалога * СреднееМРП;						 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Для легковых автомобилей рассчитываем размер превышения
			СуммаПревышения = 0;
			Если СтрокаОтчета.ВидТранспортногоСредства = Перечисления.ВидыТранспортныхСредств.ЛегковойАвтомобиль Тогда							
				РазмерПревышения = ПолучитьРазмерПревышенияПоОбъему(СтрокаОтчета.ВидТранспортногоСредства, ЗначениеПоказателя, СтруктураСтавокНалога);
				
				СуммаПревышения = РазмерПревышения*7;						
			КонецЕсли;
			
			ОбщаяСуммаНалога = СуммаНалога + СуммаПревышения;
			РазмерКорректировки = ПолучитьРазмерКорректировки(ДокументОбъект.ПериодПланирования,СтрокаОтчета.ВидТранспортногоСредства, СтрокаОтчета, СтруктураСтавокНалога);				 	 
			
			СуммаСУчетомКорректировки = ОбщаяСуммаНалога * РазмерКорректировки;
				
			ОбщаяСуммаНалога = Окр(СуммаСУчетомКорректировки*СтрокаОтчета.КоличествоМесяцев/12,0);
						
			Всего = Всего + ОбщаяСуммаНалога;
			
			НоваяСтрока =  ДокументОбъект.РасчетнаяТаблица.Добавить();
			НоваяСтрока.ОС = СтрокаОтчета.ОбъектНалогообложения;
			НоваяСтрока.Сумма6 = ОбщаяСуммаНалога;
			НоваяСтрока.КонтрольнаяСумма = ОбщаяСуммаНалога;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//

Процедура РассчитатьНалогиПоЗарплате(ДокументОбъект) Экспорт
	
	ФинансовыйГод = Год(ДокументОбъект.ПериодПланирования);
	НачалоРасчета = ДокументОбъект.ВидКорректировки.НомерМесяца;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументОбъект",ДокументОбъект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	б_РасчетнаяТаблица.Ссылка.ФормируемыйБюджет,
	|	б_РасчетнаяТаблица.Сумма1,
	|		б_РасчетнаяТаблица.Сумма2,
	|		б_РасчетнаяТаблица.Сумма3,
	|		б_РасчетнаяТаблица.Сумма4,
	|		б_РасчетнаяТаблица.Сумма5,
	|		б_РасчетнаяТаблица.Сумма6,
	|		б_РасчетнаяТаблица.Сумма7,
	|		б_РасчетнаяТаблица.Сумма8,
	|		б_РасчетнаяТаблица.Сумма9,
	|		б_РасчетнаяТаблица.Сумма10,
	|		б_РасчетнаяТаблица.Сумма11,
	|		б_РасчетнаяТаблица.Сумма12
	|
	|ИЗ
	|	Документ.б_РасчетнаяТаблица.РасчетнаяТаблица КАК б_РасчетнаяТаблица
	|ГДЕ
	|	б_РасчетнаяТаблица.Ссылка = &ДокументОбъект
	|";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ФормируемыйБюджет",ДокументОбъект.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("ФОТ",ДокументОбъект.СтатьяБюджета);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	БюджетированиеНалогиПоЗарплате.СтатьяБюджета,
		|	БюджетированиеНалогиПоЗарплате.Процент
		|ИЗ
		|	РегистрСведений.БюджетированиеНалогиПоЗарплате КАК БюджетированиеНалогиПоЗарплате
		|ГДЕ
		|	БюджетированиеНалогиПоЗарплате.ФормируемыйБюджет = &ФормируемыйБюджет
		|	И БюджетированиеНалогиПоЗарплате.ГруппаСтатейБюджета = &ФОТ
		|";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	ВеличинаМЗП = РегистрыСведений.РегламентированныеРасчетныеПоказатели.ПолучитьПоследнее(НачалоДня(НачалоГода(ДокументОбъект.ПериодПланирования))).РазмерМЗП; 
	ОблагаемыйДоход = ВеличинаМЗП*15;
	
	Пока Результат.Следующий() Цикл
		
		Если ДокументОбъект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Бюджет Тогда
			НоваяСтрока = ДокументОбъект.Налоги.Добавить();
			НоваяСтрока.СтатьяБюджета = Результат.СтатьяБюджета;
		ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
			НоваяСтрока = ДокументОбъект.Налоги.Найти(Результат.СтатьяБюджета,"СтатьяБюджета");
		КонецЕсли;
		
		    Если Результат.СтатьяБюджета.Наименование = "Отчисления на обязательное медицинское страхование" Тогда

					Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	б_РасчетнаяТаблицаЗарплата.Подразделение,
					|	б_РасчетнаяТаблицаЗарплата.Должность,
					|	б_РасчетнаяТаблицаЗарплата.СуммаФОТ,
					|	б_РасчетнаяТаблицаЗарплата.ИСуммаФОТ,
					|	ВЫБОР
					|		КОГДА б_РасчетнаяТаблицаЗарплата.КоличествоСтавок <> 0
					|			ТОГДА б_РасчетнаяТаблицаЗарплата.СуммаФОТ / б_РасчетнаяТаблицаЗарплата.КоличествоСтавок / 12
					|		ИНАЧЕ 0
					|	КОНЕЦ КАК СредняяЗП,
					|	б_РасчетнаяТаблицаЗарплата.КоличествоСтавок
					|ИЗ
					|	Документ.б_РасчетнаяТаблица.Зарплата КАК б_РасчетнаяТаблицаЗарплата
					|ГДЕ
					|	б_РасчетнаяТаблицаЗарплата.Ссылка = &Ссылка";

				Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);

				Результат2 = Запрос.Выполнить();

				ВыборкаДетальныеЗаписи = Результат2.Выбрать();

				СуммаЗаМесяц = 0;
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.СредняяЗП > ОблагаемыйДоход Тогда 
						СуммаЗаМесяц = СуммаЗаМесяц + ОблагаемыйДоход * ВыборкаДетальныеЗаписи.КоличествоСтавок;
					Иначе
						СуммаЗаМесяц = СуммаЗаМесяц + ВыборкаДетальныеЗаписи.СредняяЗП * ВыборкаДетальныеЗаписи.КоличествоСтавок;
					КонецЕсли;
				КонецЦикла;
            КонецЕсли;
	        
		
		ПересчетЗаЗакрытыйПериод = 0;
		Если НоваяСтрока <> НЕОПРЕДЕЛЕНО Тогда
			Для А = 1 ПО 12 Цикл  
								
				Если А >= НачалоРасчета  Тогда
					
					Если Результат.СтатьяБюджета.Наименование = "Отчисления на обязательное медицинское страхование" Тогда
						
						Если ФинансовыйГод < 2018 И А>6 Тогда
							НоваяСтрока["Сумма"+СокрЛП(А)] = СуммаЗаМесяц*Результат.Процент/100;
						ИначеЕсли ФинансовыйГод > 2017 Тогда
							НоваяСтрока["Сумма"+СокрЛП(А)] = СуммаЗаМесяц*Результат.Процент/100;
						КонецЕсли;
						
					ИначеЕсли Результат.СтатьяБюджета.Наименование = "Обязательные пенсионные взносы работодателя" Тогда
						
						Если ФинансовыйГод >= 2020 Тогда
							НоваяСтрока["Сумма"+СокрЛП(А)] = тз.Итог("Сумма"+СокрЛП(А))*Результат.Процент/100;
						КонецЕсли;

					Иначе
								
						Если ФинансовыйГод < 2014 Тогда
							НоваяСтрока["Сумма"+СокрЛП(А)] = тз.Итог("Сумма"+СокрЛП(А))*Результат.Процент/100;
						Иначе //расчет с 2014 г. с учетом ОПВ
							СуммаОПВ =  тз.Итог("Сумма"+СокрЛП(А))*0.1;
							НоваяСтрока["Сумма"+СокрЛП(А)] = (тз.Итог("Сумма"+СокрЛП(А))-СуммаОПВ)*Результат.Процент/100;
						КонецЕсли;
					
					КонецЕсли;
					
					Если А = НачалоРасчета  Тогда
						НоваяСтрока["Сумма"+СокрЛП(А)] = НоваяСтрока["Сумма"+СокрЛП(А)] - ПересчетЗаЗакрытыйПериод;
					КонецЕсли;
					
				Иначе
					СуммаОПВ =  тз.Итог("Сумма"+СокрЛП(А))*0.1;
							
					ПересчетЗаЗакрытыйПериод = ПересчетЗаЗакрытыйПериод + НоваяСтрока["Сумма"+СокрЛП(А)] - (тз.Итог("Сумма"+СокрЛП(А))-СуммаОПВ)*Результат.Процент/100;
					
				КонецЕсли;
				
				НоваяСтрока.КонтрольнаяСумма =  НоваяСтрока.КонтрольнаяСумма + НоваяСтрока["Сумма"+СокрЛП(А)];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
Конецпроцедуры

Процедура ДополнитьИзРасчетнойТаблицыОС(ТекДокумент,Параметр) Экспорт
	
	ТекРасчТаблица = Параметр.Расчетнаятаблица.ПолучитьОбъект();
	
	Если  ТекДокумент.видОперации = Перечисления.фин_ВидыОперацийБюджет.Бюджет Тогда
		Для Каждого СтрокаРТ ИЗ ТекРасчТаблица.РасчетнаяТаблица Цикл
			
			Если СтрокаРТ.Контрольнаясумма > 0 Тогда
				Для А = 1 по 12 Цикл
					Если СтрокаРТ["Сумма"+А]>0 Тогда
						НоваяСтрока = ТекДокумент.РасчетнаяТаблица.Добавить();
						НоваяСтрока.ОС =  СтрокаРТ.Номенклатура;
						НоваяСтрока.Сумма =  СтрокаРТ["Сумма"+А];
						НоваяСтрока.амДатаПринятияКУчету =  Дата(Год(ТекДокумент.ПериодПланирования),А,1);
					Конецесли;
				КонецЦикла;
			Конецесли;
			
		КонецЦикла;
	ИначеЕсли  ТекДокумент.видОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
		Для Каждого СтрокаРТ ИЗ ТекРасчТаблица.РасчетнаяТаблица Цикл
			СтрокаТЗ = ТекДокумент.РасчетнаяТаблица.Найти(СтрокаРТ.Номенклатура,"ОС");
			Если СтрокаТЗ <> Неопределено Тогда
			Иначе
				НомерМесяца = ТекДокумент.ВидКорректировки.НомерМесяца;
				Для А = НомерМесяца по 12 Цикл
					Если СтрокаРТ["Сумма"+А]>0 Тогда
						НоваяСтрока = ТекДокумент.РасчетнаяТаблица.Добавить();
						НоваяСтрока.ОС =  СтрокаРТ.Номенклатура;
						НоваяСтрока.Сумма =  СтрокаРТ["Сумма"+А];
						НоваяСтрока.амДатаПринятияКУчету =  Дата(Год(ТекДокумент.ПериодПланирования),А,1);
					Конецесли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьИзРасчетнойТаблицыНМА(ТекДокумент,Параметр) Экспорт
	
	ТекРасчТаблица = Параметр.Расчетнаятаблица.ПолучитьОбъект();
	
	
	Если  ТекДокумент.видОперации = Перечисления.фин_ВидыОперацийБюджет.Бюджет Тогда
		Для Каждого СтрокаРТ ИЗ ТекРасчТаблица.РасчетнаяТаблица Цикл
			
			Если СтрокаРТ.Контрольнаясумма > 0 Тогда
				Для А = 1 по 12 Цикл
					Если СтрокаРТ["Сумма"+А]>0 Тогда
						НоваяСтрока = ТекДокумент.РасчетнаяТаблица.Добавить();
						НоваяСтрока.НМА =  СтрокаРТ.Номенклатура;
						НоваяСтрока.Сумма =  СтрокаРТ["Сумма"+А];
						НоваяСтрока.амДатаПринятияКУчету =  Дата(Год(ТекДокумент.ПериодПланирования),А,1);
					Конецесли;
				КонецЦикла;
			Конецесли;
			
		КонецЦикла;
	ИначеЕсли  ТекДокумент.видОперации = Перечисления.фин_ВидыОперацийБюджет.Корректировка Тогда
		Для Каждого СтрокаРТ ИЗ ТекРасчТаблица.РасчетнаяТаблица Цикл
			СтрокаТЗ = ТекДокумент.РасчетнаяТаблица.Найти(СтрокаРТ.Номенклатура,"НМА");
			Если СтрокаТЗ <> Неопределено Тогда
			Иначе
				НомерМесяца = ТекДокумент.ВидКорректировки.НомерМесяца;
				Для А = НомерМесяца по 12 Цикл
					Если СтрокаРТ["Сумма"+А]>0 Тогда
						НоваяСтрока = ТекДокумент.РасчетнаяТаблица.Добавить();
						НоваяСтрока.НМА =  СтрокаРТ.Номенклатура;
						НоваяСтрока.Сумма =  СтрокаРТ["Сумма"+А];
						НоваяСтрока.амДатаПринятияКУчету =  Дата(Год(ТекДокумент.ПериодПланирования),А,1);
					Конецесли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьВлияющиеСтатьи(ТекДокумент,Параметр) Экспорт
	
	СписокСтатей = Параметр.СтатьиБюджета;
	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокСтатей",СписокСтатей);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|    Справочник.ссылка КАК ВлияющаяСтатьяБюджета
	|ИЗ
	|   Справочник.фин_СтатьиБюджета КАК Справочник
	|ГДЕ
	|   Справочник.ссылка в ИЕРАРХИИ(&СписокСтатей)
	|   И НЕ Справочник.ЭтоГруппа 
	|";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	//Сообщить(тз.Количество());
	
	тз.Колонки.Добавить("ВлияющийБюджет");
	тз.ЗаполнитьЗначения(Параметр.Бюджет, "ВлияющийБюджет");

	ТекДокумент.ВлияющиеПоказатели.Загрузить(тз);
	
КонецПроцедуры

Функция ПолучитьКоэффициент(Дата,Бюджет,СтатьяБюджета) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Бюджет",Бюджет);
	Запрос.УстановитьПараметр("СтатьяБюджета",СтатьяБюджета);
	Запрос.УстановитьПараметр("КонецПериода",Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	б_КоэффициентыДляСтатейБюджетаПриПеремещенииСрезПоследних.Коэффициент
	|ИЗ
	|	РегистрСведений.б_КоэффициентыДляСтатейБюджетаПриПеремещении.СрезПоследних(
	|			&КонецПериода,
	|			Бюджет = &Бюджет
	|				И СтатьяБюджета = &СтатьяБюджета) КАК б_КоэффициентыДляСтатейБюджетаПриПеремещенииСрезПоследних
	|";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.коэффициент;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура РасчетХраненияПриПланировании(ДокументОбъект,ТекСтрока) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода",НачалоГода(ДокументОбъект.ПериодПланирования));
	Запрос.УстановитьПараметр("КонецПериода",КонецГода(ДокументОбъект.ПериодПланирования));
	Запрос.УстановитьПараметр("Организация",ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("Бюджет",	ДокументОбъект.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("ИсточникФинансирования",ДокументОбъект.ФормируемыйБюджет.ИсточникФинансирования);
	Запрос.УстановитьПараметр("мВидыСубконто",ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТиповойОстатки.КоличествоОстатокДт КАК Остаток,
	|	0 КАК Объем,
	|	&НачалоПериода КАК Период
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(&Началопериода, 
	|			Счет В ИЕРАРХИИ 
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СчетаУчетаРесурсов.Счетучета
	|					ИЗ РегистрСведений.ур_СоответствиеСчетовУчетаРесурсов КАК СчетаУчетаРесурсов
	|					ГДЕ
	|						СчетаУчетаРесурсов.ИсточникФинансирования = &ИсточникФинансирования)
	|					, &мВидыСубконто, ) КАК ТиповойОстатки
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	0 КАК Остаток,
	|	б_РасчетнаяТаблицаРеализацияОбороты.КоличествоОборот КАК Объем,
	|	б_РасчетнаяТаблицаРеализацияОбороты.Период КАК Период
	|ИЗ
	|	РегистрНакопления.б_РасчетнаяТаблицаРеализация.Обороты(&НачалоПериода, &КонецПериода, Месяц, Бюджет = &Бюджет) КАК б_РасчетнаяТаблицаРеализацияОбороты
	|";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	тз.Свернуть("Период","Остаток,Объем");
	
	ТекСтрока.КонтрольнаяСумма = 0;
	
	ОбъемХранения = 0; ПереходящийОстаток = 0;
	НомерМесяца = 1;
	
	Для Каждого СтрокаТЗ из тз Цикл
		
		Если Месяц(СтрокаТЗ.период) = 1 Тогда
			ОбъемХранения = СтрокаТЗ.Остаток;
			ПереходящийОстаток = СтрокаТЗ.Остаток-СтрокаТЗ.Объем;
		Иначе
			ОбъемХранения = ПереходящийОстаток;
			ПереходящийОстаток = ОбъемХранения-СтрокаТЗ.Объем;
		КонецЕсли;
		
		НомерМесяца = Месяц(СтрокаТЗ.период);
		
		Дней = День(КонецМесяца(СтрокаТЗ.период))-День(НачалоМесяца(СтрокаТЗ.период))+1;
		ТекСтрока["Сумма"+Месяц(СтрокаТЗ.период)] = ТекСтрока.Цена*Дней*ОбъемХранения;
		
		ТекСтрока.КонтрольнаяСумма = ТекСтрока.КонтрольнаяСумма+ТекСтрока["Сумма"+Месяц(СтрокаТЗ.период)];
		
	КонецЦикла;
	
	Если (НомерМесяца+1) <= 12 Тогда
		
		Для А = (НомерМесяца+1) По 12 Цикл
			Дней = День(КонецМесяца(Дата(Год(ДокументОбъект.ПериодПланирования),А,1)))-День(НачалоМесяца(Дата(Год(ДокументОбъект.ПериодПланирования),А,1)))+1;
			ТекСтрока["Сумма"+А] = ТекСтрока.Цена*Дней*ОбъемХранения;
			
			ТекСтрока.КонтрольнаяСумма = ТекСтрока.КонтрольнаяСумма+ТекСтрока["Сумма"+Месяц(СтрокаТЗ.период)];
		КонецЦикла;
		
	КонецЕсли;
	
	
Конецпроцедуры

/////////////////////////////////////////////
//
Функция ПолучитьПравоПользователяНаКорректировку(ТекОбъект) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонецПериода",ТекОбъект.Дата);
	Запрос.УстановитьПараметр("Организация",ТекОбъект.Организация);
	Запрос.УстановитьПараметр("Пользователь",глТекущийПользователь);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравоПользователяНаКорректировкуЗаявокНаФинансированиеСрезПоследних.Доступно
	|ИЗ
	|	РегистрСведений.ПравоПользователяНаКорректировкуЗаявокНаФинансирование.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Пользователь = &Пользователь) КАК ПравоПользователяНаКорректировкуЗаявокНаФинансированиеСрезПоследних
	|";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Доступно;
	Иначе
		Возврат ложь;
	КонецЕсли;
	
	
	
КонецФункции

///////////////////////////////////////////////////
//

Процедура ПроставитьПризнакКорректировкиДляПеремещения(ДокументОбъект) Экспорт
	
	Для Каждого СтрокаТЧ ИЗ ДокументОбъект.РасчетнаяТаблица Цикл
		СтрокаТЧ.ПризнакКорректировки = Истина;
	КонецЦикла;
	
Конецпроцедуры

Процедура ПроставитьИсходныеСуммы(ДокОбъект)
	
	Для Каждого СтрокаТЧ Из ДокОбъект.РасчетнаяТаблица Цикл
		
		СтрокаТЧ.ИконтрольнаяСумма = СтрокаТЧ.КонтрольнаяСумма;
		
		Для А = 1 По 12 Цикл
			СтрокаТЧ["ИСумма"+СокрЛП(А)] = СтрокаТЧ["Сумма"+СокрЛП(А)]
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ДокОбъект.РасчетнаяТаблицаМасло Цикл
		
		СтрокаТЧ.ИконтрольнаяСумма = СтрокаТЧ.КонтрольнаяСумма;
		
		Для А = 1 По 12 Цикл
			СтрокаТЧ["ИСумма"+СокрЛП(А)] = СтрокаТЧ["Сумма"+СокрЛП(А)]
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ДокОбъект.Зарплата Цикл
		
		СтрокаТЧ.ИСуммаФОТ = СтрокаТЧ.СуммаФОТ;
		
		Для А = 1 По 12 Цикл
			СтрокаТЧ["ИСумма"+СокрЛП(А)] = СтрокаТЧ["Сумма"+СокрЛП(А)]
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ДокОбъект.Налоги Цикл
		
		СтрокаТЧ.ИконтрольнаяСумма = СтрокаТЧ.КонтрольнаяСумма;
		
		Для А = 1 По 12 Цикл
			СтрокаТЧ["ИСумма"+СокрЛП(А)] = СтрокаТЧ["Сумма"+СокрЛП(А)]
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

Процедура ПроставитьИсходныеСуммыДляПеремещения(ДокОбъект)
	
	Для Каждого СтрокаТЧ Из ДокОбъект.РасчетнаяТаблица Цикл
		
		СтрокаТЧ.ИСуммаБезНДС = СтрокаТЧ.СуммаБезНДС;
		СтрокаТЧ.ИСумма = СтрокаТЧ.Сумма;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроставитьПризнакКорректировкиДляРеализации(ДокументОбъект) Экспорт
	
	Для Каждого СтрокаТЧ ИЗ ДокументОбъект.РасчетнаяТаблица Цикл
		СтрокаТЧ.ПризнакКорректировки = Истина;
	КонецЦикла;
	
Конецпроцедуры

Процедура ПроставитьИсходныеСуммыДляРеализации(ДокОбъект)
	
	Для Каждого СтрокаТЧ Из ДокОбъект.РасчетнаяТаблица Цикл
		
		СтрокаТЧ.ИКоличество 		= СтрокаТЧ.Количество;
		СтрокаТЧ.ИСебестоимость 	= СтрокаТЧ.Себестоимость;
		СтрокаТЧ.ИСуммаБезНДС 		= СтрокаТЧ.СуммаБезНДС;
		СтрокаТЧ.ИСуммаСНДС 		= СтрокаТЧ.СуммаСНДС;
		
		СтрокаТЧ.ИТоварныйКредитВознаграждениеЗаТонну = СтрокаТЧ.ТоварныйКредитВознаграждениеЗаТонну;
		СтрокаТЧ.ИСуммаВознагражденияЗаТоварныйКредит = СтрокаТЧ.СуммаВознагражденияЗаТоварныйКредит;

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоРасчетнойТаблице(ДокОбъект) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",ДокОбъект.Организация);
	Запрос.УстановитьПараметр("Проект",ДокОбъект.Проект);
	Запрос.УстановитьПараметр("ФормируемыйБюджет",ДокОбъект.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("Сценарий",ДокОбъект.Сценарий);
	Запрос.УстановитьПараметр("ПериодПланирования",ДокОбъект.ПериодПланирования);
	Запрос.УстановитьПараметр("СтатьяБюджета",ДокОбъект.СтатьяБюджета);
	Запрос.УстановитьПараметр("ДатаДокумента",ДокОбъект.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	б_РасчетнаяТаблица.Ссылка КАК ТекДокумент
	|ИЗ
	|	Документ.б_РасчетнаяТаблица КАК б_РасчетнаяТаблица
	|ГДЕ
	|	б_РасчетнаяТаблица.Организация = &Организация
	|	И б_РасчетнаяТаблица.Проект = &Проект
	|	И б_РасчетнаяТаблица.ФормируемыйБюджет = &ФормируемыйБюджет
	|	И б_РасчетнаяТаблица.Сценарий = &Сценарий
	|	И б_РасчетнаяТаблица.ПериодПланирования = &ПериодПланирования
	|	И б_РасчетнаяТаблица.СтатьяБюджета = &СтатьяБюджета
	|	И б_РасчетнаяТаблица.Дата < &ДатаДокумента
	|	И б_РасчетнаяТаблица.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	б_РасчетнаяТаблица.Дата УБЫВ";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ДокОбъект.РасчетнаяТаблица.Загрузить(Результат.ТекДокумент.РасчетнаяТаблица.Выгрузить());
		ДокОбъект.РасчетнаяТаблицаМасло.Загрузить(Результат.ТекДокумент.РасчетнаяТаблицаМасло.Выгрузить());
		ДокОбъект.Зарплата.Загрузить(Результат.ТекДокумент.Зарплата.Выгрузить());
		ДокОбъект.Налоги.Загрузить(Результат.ТекДокумент.Налоги.Выгрузить());
		
		ПроставитьПризнакКорректировки(ДокОбъект);
		ПроставитьИсходныеСуммы(ДокОбъект);
	КонецЕсли;
	
	Если ДокОбъект.ВидРасчетнойТаблицы = Перечисления.б_ВидыРасчетныхТаблиц.АмортизацияОС Тогда
		ДополнительныеПоБюджетированию.ПересчитатьАмортизациюОС(ДокОбъект);
	КонецЕсли;
 
	Если ДокОбъект.ВидРасчетнойТаблицы = Перечисления.б_ВидыРасчетныхТаблиц.АмортизацияНМА Тогда
		ДополнительныеПоБюджетированию.ПересчитатьАмортизациюНМА(ДокОбъект);
	КонецЕсли;
	Для каждого ТекущаяСтрокаРасчТаблицы из ДокОбъект.РасчетнаяТаблица Цикл
		Если ДокОбъект.ФормируемыйБюджет.ЦС_РасчетНеНакоплением Тогда
			ТекущаяСтрокаРасчТаблицы.КонтрольнаяСумма = 0;
			ТекущаяСтрокаРасчТаблицы.КонтрольнаяСумма = ТекущаяСтрокаРасчТаблицы["Сумма"+СокрЛП(12)];
		Иначе
			ТекущаяСтрокаРасчТаблицы.КонтрольнаяСумма = 0;
			Для А = 1 по 12 Цикл
				ТекущаяСтрокаРасчТаблицы.КонтрольнаяСумма = ТекущаяСтрокаРасчТаблицы.КонтрольнаяСумма + ТекущаяСтрокаРасчТаблицы["Сумма"+СокрЛП(А)];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСписокПредыдущихПериодов(ДокОбъект) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",ДокОбъект.Организация);
	Запрос.УстановитьПараметр("ФормируемыйБюджет",ДокОбъект.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("Сценарий",ДокОбъект.Сценарий);
//	Запрос.УстановитьПараметр("ВидОперацииПеремещенияРеализации",ДокОбъект.ВидОперацииПеремещенияРеализации);
	Запрос.УстановитьПараметр("ПериодПланирования",ДокОбъект.ПериодПланирования);
	Запрос.УстановитьПараметр("Страна",ДокОбъект.Страна);
	Запрос.УстановитьПараметр("НачалоПериода",НачалоГода(ДокОбъект.Период));
	Запрос.УстановитьПараметр("КонецПериода",ДокОбъект.Период);
	Запрос.УстановитьПараметр("Номенклатура",ДокОбъект.Номенклатура);
	Запрос.УстановитьПараметр("ДатаДокумента",ДокОбъект.Дата);
	Запрос.УстановитьПараметр("парИстина",Истина);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	б_РасчетнаяТаблица.СтатьяБюджета КАК СтатьяБюджета,
	|	б_РасчетнаяТаблица.ПризнакПредыдущегоПериода КАК &парИстина,
	|	б_РасчетнаяТаблица.СуммаБезНДС КАК СуммаБезНДС,
	|	б_РасчетнаяТаблица.Сумма КАК Сумма
	|ИЗ
	|	Документ.б_РасчетнаяТаблицаРасходовПоПеремещениюРеализации.РасчетнаяТаблица КАК б_РасчетнаяТаблица
	|ГДЕ
	|	б_РасчетнаяТаблица.Организация = &Организация
	|	И б_РасчетнаяТаблица.ВидОперацииПеремещенияРеализации = &ВидОперацииПеремещенияРеализации
	|	И б_РасчетнаяТаблица.ФормируемыйБюджет = &ФормируемыйБюджет
	|	И б_РасчетнаяТаблица.Сценарий = &Сценарий
	|	И б_РасчетнаяТаблица.ПериодПланирования = &ПериодПланирования
	|	И б_РасчетнаяТаблица.Страна = &Страна
	|	И (б_РасчетнаяТаблица.Период >= &НачалоПериода И б_РасчетнаяТаблица.Период<&КонецПериода)
	|	И б_РасчетнаяТаблица.Номенклатура = &Номенклатура
	|	И б_РасчетнаяТаблица.Дата < &ДатаДокумента
	|	И б_РасчетнаяТаблица.Проведен
	|";
	
	тз = Запрос.Выполнить().Выгрузить();
	тз.Свернуть("СтатьяБюджета,ПризнакПредыдущегоПериода","СуммаБезНДС,Сумма");
	
	Возврат тз; 
КонецФункции

Процедура ЗаполнитьДанныеПоРасчетнойТаблицеПеремещения(ДокОбъект) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",ДокОбъект.Организация);
	Запрос.УстановитьПараметр("ФормируемыйБюджет",ДокОбъект.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("Сценарий",ДокОбъект.Сценарий);
	Запрос.УстановитьПараметр("ВидОперацииПеремещенияРеализации",ДокОбъект.ВидОперацииПеремещенияРеализации);
	Запрос.УстановитьПараметр("ПериодПланирования",ДокОбъект.ПериодПланирования);
	Запрос.УстановитьПараметр("Страна",ДокОбъект.Страна);
	Запрос.УстановитьПараметр("Период",ДокОбъект.Период);
	Запрос.УстановитьПараметр("Количество",ДокОбъект.Количество);
	Запрос.УстановитьПараметр("КоличествоВагонов",ДокОбъект.КоличествоВагонов);
	Запрос.УстановитьПараметр("Номенклатура",ДокОбъект.Номенклатура);
	Запрос.УстановитьПараметр("ДатаДокумента",ДокОбъект.Дата);
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	б_РасчетнаяТаблица.Ссылка КАК ТекДокумент
		|ИЗ
		|	Документ.б_РасчетнаяТаблицаРасходовПоПеремещениюРеализации КАК б_РасчетнаяТаблица
		|ГДЕ
		|	б_РасчетнаяТаблица.Организация = &Организация
		|	И б_РасчетнаяТаблица.ВидОперацииПеремещенияРеализации = &ВидОперацииПеремещенияРеализации
		|	И б_РасчетнаяТаблица.ФормируемыйБюджет = &ФормируемыйБюджет
		|	И б_РасчетнаяТаблица.Сценарий = &Сценарий
		|	И б_РасчетнаяТаблица.ПериодПланирования = &ПериодПланирования
		|	И б_РасчетнаяТаблица.Страна = &Страна
		|	И б_РасчетнаяТаблица.Период <= &Период
		|	И б_РасчетнаяТаблица.Количество = &Количество
		|	И б_РасчетнаяТаблица.КоличествоВагонов = &КоличествоВагонов
		|	И б_РасчетнаяТаблица.Номенклатура = &Номенклатура
		|	И б_РасчетнаяТаблица.Дата < &ДатаДокумента
		|	И б_РасчетнаяТаблица.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	б_РасчетнаяТаблица.Дата УБЫВ";
		
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		тз =  Результат.ТекДокумент.РасчетнаяТаблица.Выгрузить();
		
		ДокОбъект.РасчетнаяТаблица.Загрузить(тз);
		
		ПроставитьПризнакКорректировкиДляПеремещения(ДокОбъект);
		ПроставитьИсходныеСуммыДляПеремещения(ДокОбъект);
	КонецЕсли;
	
	 
КонецПроцедуры

Процедура ЗаполнитьДанныеПоРасчетнойТаблицеРеализации(ДокОбъект) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",ДокОбъект.Организация);
	Запрос.УстановитьПараметр("ФормируемыйБюджет",ДокОбъект.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("Сценарий",ДокОбъект.Сценарий);
	Запрос.УстановитьПараметр("ВидОперацииРеализации",ДокОбъект.ВидОперацииРеализации);
	Запрос.УстановитьПараметр("ПериодПланирования",ДокОбъект.ПериодПланирования);
	Запрос.УстановитьПараметр("СтатьяБюджета",ДокОбъект.СтатьяБюджета);
	Запрос.УстановитьПараметр("СтатьяБюджетаСебестоимости",ДокОбъект.СтатьяБюджетаСебестоимости);
	Запрос.УстановитьПараметр("ДатаДокумента",ДокОбъект.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	б_РасчетнаяТаблица.Ссылка КАК ТекДокумент
	|ИЗ
	|	Документ.б_РасчетнаяТаблицаРеализации КАК б_РасчетнаяТаблица
	|ГДЕ
	|	б_РасчетнаяТаблица.Организация = &Организация
	|	И б_РасчетнаяТаблица.ФормируемыйБюджет = &ФормируемыйБюджет
	|	И б_РасчетнаяТаблица.Сценарий = &Сценарий
	|	И б_РасчетнаяТаблица.ВидОперацииРеализации = &ВидОперацииРеализации
	|	И б_РасчетнаяТаблица.ПериодПланирования = &ПериодПланирования
	|	И б_РасчетнаяТаблица.СтатьяБюджета = &СтатьяБюджета
	|	И б_РасчетнаяТаблица.СтатьяБюджетаСебестоимости = &СтатьяБюджетаСебестоимости
	|	И б_РасчетнаяТаблица.Дата < &ДатаДокумента
	|	И б_РасчетнаяТаблица.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	б_РасчетнаяТаблица.Дата УБЫВ";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ДокОбъект.РасчетнаяТаблица.Загрузить(Результат.ТекДокумент.РасчетнаяТаблица.Выгрузить());
		
		ПроставитьПризнакКорректировкиДляРеализации(ДокОбъект);
		ПроставитьИсходныеСуммыДляРеализации(ДокОбъект);
	КонецЕсли;
	
	 
КонецПроцедуры

Процедура ЗаполнитьДанныеПоРасчетнойТаблицеРеализацииПоДокументу(ДокОбъект) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка",ДокОбъект.КорректировкаДокумента);

	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	б_РасчетнаяТаблица.Ссылка КАК ТекДокумент
		|ИЗ
		|	Документ.б_РасчетнаяТаблица КАК б_РасчетнаяТаблица
		|ГДЕ
		|	б_РасчетнаяТаблица.Проведен
		|	И б_РасчетнаяТаблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	б_РасчетнаяТаблица.Дата УБЫВ";

	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ДокОбъект.РасчетнаяТаблица.Загрузить(Результат.ТекДокумент.РасчетнаяТаблица.Выгрузить());
		ДокОбъект.РасчетнаяТаблицаМасло.Загрузить(Результат.ТекДокумент.РасчетнаяТаблицаМасло.Выгрузить());
		ДокОбъект.Зарплата.Загрузить(Результат.ТекДокумент.Зарплата.Выгрузить());
		ДокОбъект.Налоги.Загрузить(Результат.ТекДокумент.Налоги.Выгрузить());
		
		ПроставитьПризнакКорректировки(ДокОбъект);
		ПроставитьИсходныеСуммы(ДокОбъект);
	КонецЕсли;
	
	Если ДокОбъект.ВидРасчетнойТаблицы = Перечисления.б_ВидыРасчетныхТаблиц.АмортизацияОС Тогда
		ДополнительныеПоБюджетированию.ПересчитатьАмортизациюОС(ДокОбъект);
	КонецЕсли;
 
	Если ДокОбъект.ВидРасчетнойТаблицы = Перечисления.б_ВидыРасчетныхТаблиц.АмортизацияНМА Тогда
		ДополнительныеПоБюджетированию.ПересчитатьАмортизациюНМА(ДокОбъект);
	КонецЕсли;
	Для каждого ТекущаяСтрокаРасчТаблицы из ДокОбъект.РасчетнаяТаблица Цикл
		Если ДокОбъект.ФормируемыйБюджет.ЦС_РасчетНеНакоплением Тогда
			ТекущаяСтрокаРасчТаблицы.КонтрольнаяСумма = 0;
			ТекущаяСтрокаРасчТаблицы.КонтрольнаяСумма = ТекущаяСтрокаРасчТаблицы["Сумма"+СокрЛП(12)];
		Иначе
			ТекущаяСтрокаРасчТаблицы.КонтрольнаяСумма = 0;
			Для А = 1 по 12 Цикл
				ТекущаяСтрокаРасчТаблицы.КонтрольнаяСумма = ТекущаяСтрокаРасчТаблицы.КонтрольнаяСумма + ТекущаяСтрокаРасчТаблицы["Сумма"+СокрЛП(А)];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	
	 
КонецПроцедуры

Функция ПолучитьАмортизациюЗаКорректируемыйПериод(ТекДокумент, ОС)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", ТекДокумент.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", ТекДокумент.ПериодПланирования);
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата(Год(ТекДокумент.ПериодПланирования),ТекДокумент.ВидКорректировки.НомерМесяца-1,1)));
	Запрос.УстановитьПараметр("СтатьяБюджета", ТекДокумент.СтатьяБюджета);
	Запрос.УстановитьПараметр("ФормируемыйБюджет", ТекДокумент.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("мВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Запрос.УстановитьПараметр("ОС", ОС);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТиповойОборотыДтКт.СубконтоКт1 КАК Справочник.ОсновныеСредства) КАК ФА,
	|	ТиповойОборотыДтКт.СуммаОборот КАК СуммаАмортизации
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			(НЕ СчетДт В ИЕРАРХИИ
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Соответствие.СчетУчетаБУ
	|					ИЗ
	|						РегистрСведений.б_СоответствиеСтатейБюджетаФАСчетамБУ КАК Соответствие
	|					ГДЕ
	|						Соответствие.ФормируемыйБюджет = &ФормируемыйБюджет
	|						И Соответствие.СтатьяБюджета = &СтатьяБюджета
	|			
	|					ОБЪЕДИНИТЬ ВСЕ
	|			
	|					ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Соответствие.СчетАмортизацииБУ
	|					ИЗ
	|						РегистрСведений.б_СоответствиеСтатейБюджетаФАСчетамБУ КАК Соответствие
	|					ГДЕ
	|						Соответствие.ФормируемыйБюджет = &ФормируемыйБюджет
	|						И Соответствие.СтатьяБюджета = &СтатьяБюджета)),
	|			,
	|			СчетКт В ИЕРАРХИИ
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Соответствие.СчетАмортизацииБУ
	|				ИЗ
	|					РегистрСведений.б_СоответствиеСтатейБюджетаФАСчетамБУ КАК Соответствие
	|				ГДЕ
	|					Соответствие.ФормируемыйБюджет = &ФормируемыйБюджет
	|					И Соответствие.СтатьяБюджета = &СтатьяБюджета),
	|			&мВидыСубконто,
	|			Организация = &Организация
	|				И СубконтоКт1 = &ОС) КАК ТиповойОборотыДтКт";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.СуммаАмортизации;
	Иначе
		Возврат 0;
	Конецесли;
	
КонецФункции

Функция ПолучитьАмортизациюЗаКорректируемыйПериодНМА(ТекДокумент, НМА)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", ТекДокумент.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", ТекДокумент.ПериодПланирования);
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата(Год(ТекДокумент.ПериодПланирования),ТекДокумент.ВидКорректировки.НомерМесяца-1,1)));
	Запрос.УстановитьПараметр("СтатьяБюджета", ТекДокумент.СтатьяБюджета);
	Запрос.УстановитьПараметр("ФормируемыйБюджет", ТекДокумент.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("мВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);
	Запрос.УстановитьПараметр("НМА", НМА);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТиповойОборотыДтКт.СубконтоКт1 КАК Справочник.НематериальныеАктивы) КАК ФА,
	|	ТиповойОборотыДтКт.СуммаОборот КАК СуммаАмортизации
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			(НЕ СчетДт В ИЕРАРХИИ
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Соответствие.СчетУчетаБУ
	|					ИЗ
	|						РегистрСведений.б_СоответствиеСтатейБюджетаФАСчетамБУ КАК Соответствие
	|					ГДЕ
	|						Соответствие.ФормируемыйБюджет = &ФормируемыйБюджет
	|						И Соответствие.СтатьяБюджета = &СтатьяБюджета
	|			
	|					ОБЪЕДИНИТЬ ВСЕ
	|			
	|					ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Соответствие.СчетАмортизацииБУ
	|					ИЗ
	|						РегистрСведений.б_СоответствиеСтатейБюджетаФАСчетамБУ КАК Соответствие
	|					ГДЕ
	|						Соответствие.ФормируемыйБюджет = &ФормируемыйБюджет
	|						И Соответствие.СтатьяБюджета = &СтатьяБюджета)),
	|			,
	|			СчетКт В ИЕРАРХИИ
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Соответствие.СчетАмортизацииБУ
	|				ИЗ
	|					РегистрСведений.б_СоответствиеСтатейБюджетаФАСчетамБУ КАК Соответствие
	|				ГДЕ
	|					Соответствие.ФормируемыйБюджет = &ФормируемыйБюджет
	|					И Соответствие.СтатьяБюджета = &СтатьяБюджета),
	|			&мВидыСубконто,
	|			Организация = &Организация
	|				И СубконтоКт1 = &НМА) КАК ТиповойОборотыДтКт";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.СуммаАмортизации;
	Иначе
		Возврат 0;
	Конецесли;
	
КонецФункции

Процедура ПересчитатьАмортизациюОС(ТекДокумент) Экспорт
	
	//проверим была ли начислена амортизация за корректируемый период
	ЕстьДокНачисленияАмортизации = Ложь;
	
		Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗакрытиеМесяца.Ссылка,
		|	ЗакрытиеМесяца.АмортизацияОСБУ
		|ИЗ
		|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
		|ГДЕ
		|	ЗакрытиеМесяца.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ЗакрытиеМесяца.Организация = &Организация";

	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Дата(Год(ТекДокумент.ПериодПланирования),ТекДокумент.ВидКорректировки.НомерМесяца-1,1)));
	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(Дата(Год(ТекДокумент.ПериодПланирования),ТекДокумент.ВидКорректировки.НомерМесяца-1,1)));
    Запрос.УстановитьПараметр("Организация",ТекДокумент.Организация);
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		 ЕстьДокНачисленияАмортизации = Истина;
	КонецЦикла;

	

	Если ЕстьДокНачисленияАмортизации = Истина Тогда

		//перерасчет амортизаци за период корректировки
			
		Для Каждого СтрокаТЧ из  ТекДокумент.РасчетнаяТаблица ЦИкл
			
				СуммаАмортизации = ПолучитьАмортизациюЗаКорректируемыйПериод(ТекДокумент, СтрокаТЧ.ОС);
				НомерМесяца = ТекДокумент.ВидКорректировки.НомерМесяца;
				
				СуммаПериода = 0;
				
				Для А = 1 ПО  НомерМесяца Цикл
					Если А < НомерМесяца Тогда
						СуммаПериода = СуммаПериода + СтрокаТЧ["Сумма"+СокрЛП(А)];
					Иначе
						СтрокаТЧ["Сумма"+СокрЛП(А)] = СтрокаТЧ["Сумма"+СокрЛП(А)] + (СуммаАмортизации-СуммаПериода);
					КонецЕсли;
				КонецЦикла;
				
		КонецЦикла;
	
	КонецЕсли;
	
	//перерасчет выбывших ОС
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", ТекДокумент.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", ТекДокумент.ПериодПланирования);
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата(Год(ТекДокумент.ПериодПланирования),ТекДокумент.ВидКорректировки.НомерМесяца-1,1)));
	Запрос.УстановитьПараметр("СтатьяБюджета", ТекДокумент.СтатьяБюджета);
	Запрос.УстановитьПараметр("ФормируемыйБюджет", ТекДокумент.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("мВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтборФА.ФА КАК ФА,
	|	ОтборФА.СуммаКонечныйОстатокДт КАК СуммаОстатка,
	|	ЕстьNULL(НачисленнаяАмортизация.СуммаАмортизации,0) КАК СуммаАмортизации
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫРАЗИТЬ(ТиповойОстаткиИОбороты.Субконто1 КАК Справочник.ОсновныеСредства) КАК ФА,
	|		ТиповойОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
	|		ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , 
	|					Счет В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|										Соответствие.СчетУчетаБУ
	|                                    ИЗ
	|                                       РегистрСведений.б_СоответствиеСтатейБюджетаФАСчетамБУ КАК Соответствие
	|                                    Где
	|                                       Соответствие.ФормируемыйБюджет = &ФормируемыйБюджет
	|                                       И Соответствие.СтатьяБюджета = &СтатьяБюджета
	|									), 
	|				&мВидыСубконто, Организация = &Организация) КАК ТиповойОстаткиИОбороты
	|	) КАК ОтборФА
	|Левое Соединение
	|        (ВЫБРАТЬ
	|			ВЫРАЗИТЬ(ТиповойОборотыДтКт.СубконтоКт1 КАК Справочник.ОсновныеСредства) КАК ФА,
	|			ТиповойОборотыДтКт.СуммаОборот КАК СуммаАмортизации
	|		 ИЗ
	|			РегистрБухгалтерии.Типовой.ОборотыДтКт(&НачалоПериода, &КонецПериода, , 
	|					(НЕ СчетДт В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|												Соответствие.СчетУчетаБУ
	|                                    	   ИЗ
	|                                       		РегистрСведений.б_СоответствиеСтатейБюджетаФАСчетамБУ КАК Соответствие
	|                                    	   Где
	|                                       		Соответствие.ФормируемыйБюджет = &ФормируемыйБюджет
	|                                       		И Соответствие.СтатьяБюджета = &СтатьяБюджета
	|											ОБЪЕДИНИТЬ ВСЕ
	|											ВЫБРАТЬ РАЗЛИЧНЫЕ
	|												Соответствие.СчетАмортизацииБУ
	|                                    	   ИЗ
	|                                       		РегистрСведений.б_СоответствиеСтатейБюджетаФАСчетамБУ КАК Соответствие
	|                                    	   Где
	|                                       		Соответствие.ФормируемыйБюджет = &ФормируемыйБюджет
	|                                       		И Соответствие.СтатьяБюджета = &СтатьяБюджета
	|					)), , 
	|					СчетКт В ИЕРАРХИИ (
	|										ВЫБРАТЬ РАЗЛИЧНЫЕ
	|												Соответствие.СчетАмортизацииБУ
	|                                    	   ИЗ
	|                                       		РегистрСведений.б_СоответствиеСтатейБюджетаФАСчетамБУ КАК Соответствие
	|                                    	   Где
	|                                       		Соответствие.ФормируемыйБюджет = &ФормируемыйБюджет
	|                                       		И Соответствие.СтатьяБюджета = &СтатьяБюджета
	|										), &мВидыСубконто, Организация = &Организация) КАК ТиповойОборотыДтКт	
	|
	|         ) КАК НачисленнаяАмортизация
	|      ПО ОтборФА.ФА = НачисленнаяАмортизация.ФА
	|
	|
	|ГДЕ
	|	ОтборФА.СуммаКонечныйОстатокДт = 0
	|";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	НомерМесяцаКорректировки = ТекДокумент.ВИдКорректировки.НомерМесяца;
	
	Для Каждого СтрокаТЗ из тз Цикл
		СтрокаТЧ = ТекДокумент.РасчетнаяТаблица.Найти(СтрокаТЗ.ФА,"ОС");
		
		Если СтрокаТЧ <> НЕОПРЕДЕЛЕНО Тогда
			СуммаАмортизацииДоКорректировки = 0;
			
			Для А = 1 ПО 12 Цикл
				Если А < НомерМесяцаКорректировки Тогда
					 СуммаАмортизацииДоКорректировки = СуммаАмортизацииДоКорректировки + СтрокаТЧ["Сумма"+СокрЛП(А)];
				ИначеЕсли А = НомерМесяцаКорректировки Тогда
					СтрокаТЧ["Сумма"+СокрЛП(А)] = СтрокаТЗ.СуммаАмортизации-СуммаАмортизацииДоКорректировки;
				Иначе
					СтрокаТЧ["Сумма"+СокрЛП(А)] = 0;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦИкла;
	
	//добавить поступившие ОС
	
	СписокСчетовИсключения = Новый Массив;
	СписокСчетовИсключения.Добавить(ПланыСчетов.Типовой.ОсновныеСредства);
	СписокСчетовИсключения.Добавить(ПланыСчетов.Типовой.АмортизацияОсновныхСредств);
	СписокСчетовИсключения.Добавить(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПредставительств);
	СписокСчетовИсключения.Добавить(ПланыСчетов.Типовой.КраткосрочнаяКредиторскаяЗадолженностьпредставительств);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", ТекДокумент.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", ТекДокумент.ПериодПланирования);
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата(Год(ТекДокумент.ПериодПланирования),ТекДокумент.ВидКорректировки.НомерМесяца-1,1)));
	Запрос.УстановитьПараметр("СтатьяБюджета", ТекДокумент.СтатьяБюджета);
	Запрос.УстановитьПараметр("ФормируемыйБюджет", ТекДокумент.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("мВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Запрос.УстановитьПараметр("СписокСчетовИсключения", СписокСчетовИсключения);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(НалоговыйОборотыДтКт.СубконтоДт1 КАК Справочник.ОсновныеСредства) КАК ФА,
	|	НалоговыйОборотыДтКт.СуммаОборот,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0) КАК Сумма,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК амКоэффициентАмортизации
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОборотыДтКт(&НачалоПериода, &КонецПериода, , 
	|				СчетДт В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|										Соответствие.СчетУчетаБУ
	|                                    ИЗ
	|                                       РегистрСведений.б_СоответствиеСтатейБюджетаФАСчетамБУ КАК Соответствие
	|                                    Где
	|                                       Соответствие.ФормируемыйБюджет = &ФормируемыйБюджет
	|                                       И Соответствие.СтатьяБюджета = &СтатьяБюджета
	|									), &мВидыСубконто, 
	|				(НЕ СчетКт В ИЕРАРХИИ (&СписокСчетовИсключения)), , Организация = &Организация) КАК НалоговыйОборотыДтКт
	|Левое Соединение РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&КонецПериода, Организация = &Организация) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|    ПО НалоговыйОборотыДтКт.СубконтоДт1 = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	НачалоРасчета = ТекДокумент.ВИдКорректировки.НомерМесяца;
	
	Для Каждого СтрокаТЗ ИЗ тз Цикл
		СуммаАмортизации = (СтрокаТЗ.СуммаОборот*СтрокаТЗ.амКоэффициентАмортизации/100)/12;
		
		НоваяСтрока = ТекДокумент.РасчетнаяТаблица.Добавить();
		НоваяСтрока.ОС = СтрокаТЗ.ФА;
		НоваяСтрока.амКоэффициентАмортизации = СтрокаТЗ.амКоэффициентАмортизации;
		НоваяСтрока.Сумма = СтрокаТЗ.СуммаОборот;
		
		СуммаПоБалансу =0;
		СуммаАмортизацииПоБалансу =0;
		Для А = НачалоРасчета По 12 Цикл
			СуммаПоБалансу = СтрокаТЗ.СуммаОборот;
			СуммаАмортизацииПоБалансу = СуммаАмортизацииПоБалансу+СуммаАмортизации;
			Если (СуммаПоБалансу - СуммаАмортизацииПоБалансу - СтрокаТЗ.ЛиквидационнаяСтоимость) > 0 Тогда
				НоваяСтрока["Сумма"+СокрЛП(А)] = МИН(СуммаАмортизации,(СуммаПоБалансу - СуммаАмортизацииПоБалансу - СтрокаТЗ.ЛиквидационнаяСтоимость));
			Иначе
				НоваяСтрока["Сумма"+СокрЛП(А)] = 0;
			КонецЕсли;
			НоваяСтрока.КонтрольнаяСумма = НоваяСтрока.КонтрольнаяСумма + НоваяСтрока["Сумма"+СокрЛП(А)];
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ПересчитатьАмортизациюНМА(ТекДокумент) Экспорт
	//добавить поступившие ОС
	
	СписокСчетовИсключения = Новый Массив;
	СписокСчетовИсключения.Добавить(ПланыСчетов.Типовой.НематериальныеАктивы);
	СписокСчетовИсключения.Добавить(ПланыСчетов.Типовой.АмортизацияПрочихНематериальныхАктивов);
	СписокСчетовИсключения.Добавить(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПредставительств);
	СписокСчетовИсключения.Добавить(ПланыСчетов.Типовой.КраткосрочнаяКредиторскаяЗадолженностьпредставительств);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация"				, ТекДокумент.Организация);
	Запрос.УстановитьПараметр("НачалоПериода"			, ТекДокумент.ПериодПланирования);
	Запрос.УстановитьПараметр("КонецПериода"			, КонецМесяца(Дата(Год(ТекДокумент.ПериодПланирования),ТекДокумент.ВидКорректировки.НомерМесяца,1)));
	Запрос.УстановитьПараметр("СтатьяБюджета"			, ТекДокумент.СтатьяБюджета);
	Запрос.УстановитьПараметр("ФормируемыйБюджет"		, ТекДокумент.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("мВидыСубконто"			, ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);
	Запрос.УстановитьПараметр("СписокСчетовИсключения"	, СписокСчетовИсключения);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(НалоговыйОборотыДтКт.СубконтоДт1 КАК Справочник.НематериальныеАктивы) КАК ФА,
	|	НалоговыйОборотыДтКт.СуммаОборот,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0) КАК Сумма,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК амСрокПолезногоИспользования
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			СчетДт В ИЕРАРХИИ
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Соответствие.СчетУчетаБУ
	|				ИЗ
	|					РегистрСведений.б_СоответствиеСтатейБюджетаФАСчетамБУ КАК Соответствие
	|				ГДЕ
	|					Соответствие.ФормируемыйБюджет = &ФормируемыйБюджет
	|					И Соответствие.СтатьяБюджета = &СтатьяБюджета),
	|			&мВидыСубконто,
	|			НЕ СчетКт В ИЕРАРХИИ (&СписокСчетовИсключения),
	|			,
	|			Организация = &Организация) КАК НалоговыйОборотыДтКт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&КонецПериода, Организация = &Организация) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|		ПО НалоговыйОборотыДтКт.СубконтоДт1 = ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	НачалоРасчета = ТекДокумент.ВИдКорректировки.НомерМесяца;
	
	Для Каждого СтрокаТЗ ИЗ тз Цикл
		СуммаГодовойАмортизации = ?(СтрокаТЗ.амСрокПолезногоИспользования = 0,0,СтрокаТЗ.СуммаОборот/СтрокаТЗ.амСрокПолезногоИспользования * 12);
		СуммаАмортизации        = СуммаГодовойАмортизации / 12;
		Если ТекДокумент.расчетнаятаблица.найти(СтрокаТЗ.ФА,"НМА") <> Неопределено тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТекДокумент.РасчетнаяТаблица.Добавить();
		НоваяСтрока.НМА = СтрокаТЗ.ФА;
		НоваяСтрока.амСрокПолезногоИспользования = СтрокаТЗ.амСрокПолезногоИспользования;
		НоваяСтрока.Сумма = СтрокаТЗ.СуммаОборот;
		
		СуммаПоБалансу =0;
		СуммаАмортизацииПоБалансу =0;
		Для А = НачалоРасчета По 12 Цикл
			СуммаПоБалансу = СтрокаТЗ.СуммаОборот;
			СуммаАмортизацииПоБалансу = СуммаАмортизацииПоБалансу+СуммаАмортизации;
			Если (СуммаПоБалансу - СуммаАмортизацииПоБалансу) > 0 Тогда
				НоваяСтрока["Сумма"+СокрЛП(А)] = МИН(СуммаАмортизации,(СуммаПоБалансу - СуммаАмортизацииПоБалансу ));
			Иначе
				НоваяСтрока["Сумма"+СокрЛП(А)] = 0;
			КонецЕсли;
			НоваяСтрока.КонтрольнаяСумма = НоваяСтрока.КонтрольнаяСумма + НоваяСтрока["Сумма"+СокрЛП(А)];
		КонецЦикла;
	КонецЦикла;

	//перерасчет амортизаци за период корректировки
	
	Для Каждого СтрокаТЧ из  ТекДокумент.РасчетнаяТаблица ЦИкл
		СуммаАмортизации = ПолучитьАмортизациюЗаКорректируемыйПериодНМА(ТекДокумент, СтрокаТЧ.НМА);
		НомерМесяца = ТекДокумент.ВидКорректировки.НомерМесяца;
		
		СуммаПериода = 0;
		
		Для А = 1 ПО  НомерМесяца Цикл
			Если А < НомерМесяца Тогда
				СуммаПериода = СуммаПериода + СтрокаТЧ["Сумма"+СокрЛП(А)];
			Иначе
				СтрокаТЧ["Сумма"+СокрЛП(А)] = СтрокаТЧ["Сумма"+СокрЛП(А)] + (СуммаАмортизации-СуммаПериода);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	//перерасчет выбывших ОС
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", ТекДокумент.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", ТекДокумент.ПериодПланирования);
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата(Год(ТекДокумент.ПериодПланирования),ТекДокумент.ВидКорректировки.НомерМесяца,1)));
	Запрос.УстановитьПараметр("СтатьяБюджета", ТекДокумент.СтатьяБюджета);
	Запрос.УстановитьПараметр("ФормируемыйБюджет", ТекДокумент.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("мВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтборФА.ФА КАК ФА,
	|	ОтборФА.СуммаКонечныйОстатокДт КАК СуммаОстатка,
	|	ЕстьNULL(НачисленнаяАмортизация.СуммаАмортизации,0) КАК СуммаАмортизации
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫРАЗИТЬ(ТиповойОстаткиИОбороты.Субконто1 КАК Справочник.НематериальныеАктивы) КАК ФА,
	|		ТиповойОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
	|		ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , 
	|					Счет В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|										Соответствие.СчетУчетаБУ
	|                                    ИЗ
	|                                       РегистрСведений.б_СоответствиеСтатейБюджетаФАСчетамБУ КАК Соответствие
	|                                    Где
	|                                       Соответствие.ФормируемыйБюджет = &ФормируемыйБюджет
	|                                       И Соответствие.СтатьяБюджета = &СтатьяБюджета
	|									), 
	|				&мВидыСубконто, Организация = &Организация) КАК ТиповойОстаткиИОбороты
	|	) КАК ОтборФА
	|Левое Соединение
	|        (ВЫБРАТЬ
	|			ВЫРАЗИТЬ(ТиповойОборотыДтКт.СубконтоКт1 КАК Справочник.НематериальныеАктивы) КАК ФА,
	|			ТиповойОборотыДтКт.СуммаОборот КАК СуммаАмортизации
	|		 ИЗ
	|			РегистрБухгалтерии.Типовой.ОборотыДтКт(&НачалоПериода, &КонецПериода, , 
	|					(НЕ СчетДт В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|												Соответствие.СчетУчетаБУ
	|                                    	   ИЗ
	|                                       		РегистрСведений.б_СоответствиеСтатейБюджетаФАСчетамБУ КАК Соответствие
	|                                    	   Где
	|                                       		Соответствие.ФормируемыйБюджет = &ФормируемыйБюджет
	|                                       		И Соответствие.СтатьяБюджета = &СтатьяБюджета
	|											ОБЪЕДИНИТЬ ВСЕ
	|											ВЫБРАТЬ РАЗЛИЧНЫЕ
	|												Соответствие.СчетАмортизацииБУ
	|                                    	   ИЗ
	|                                       		РегистрСведений.б_СоответствиеСтатейБюджетаФАСчетамБУ КАК Соответствие
	|                                    	   Где
	|                                       		Соответствие.ФормируемыйБюджет = &ФормируемыйБюджет
	|                                       		И Соответствие.СтатьяБюджета = &СтатьяБюджета
	|					)), , 
	|					СчетКт В ИЕРАРХИИ (
	|										ВЫБРАТЬ РАЗЛИЧНЫЕ
	|												Соответствие.СчетАмортизацииБУ
	|                                    	   ИЗ
	|                                       		РегистрСведений.б_СоответствиеСтатейБюджетаФАСчетамБУ КАК Соответствие
	|                                    	   Где
	|                                       		Соответствие.ФормируемыйБюджет = &ФормируемыйБюджет
	|                                       		И Соответствие.СтатьяБюджета = &СтатьяБюджета
	|										), &мВидыСубконто, Организация = &Организация) КАК ТиповойОборотыДтКт	
	|
	|         ) КАК НачисленнаяАмортизация
	|      ПО ОтборФА.ФА = НачисленнаяАмортизация.ФА
	|
	|
	|ГДЕ
	|	ОтборФА.СуммаКонечныйОстатокДт = 0
	|";
	
	тз = Запрос.Выполнить().Выгрузить();
	
	НомерМесяцаКорректировки = ТекДокумент.ВИдКорректировки.НомерМесяца;
	
	Для Каждого СтрокаТЗ из тз Цикл
		СтрокаТЧ = ТекДокумент.РасчетнаяТаблица.Найти(СтрокаТЗ.ФА,"НМА");
		
		Если СтрокаТЧ <> НЕОПРЕДЕЛЕНО Тогда
			СуммаАмортизацииДоКорректировки = 0;
			
			Для А = 1 ПО 12 Цикл
				Если А < НомерМесяцаКорректировки Тогда
					 СуммаАмортизацииДоКорректировки = СуммаАмортизацииДоКорректировки + СтрокаТЧ["Сумма"+СокрЛП(А)];
				ИначеЕсли А = НомерМесяцаКорректировки Тогда
					СтрокаТЧ["Сумма"+СокрЛП(А)] = СтрокаТЗ.СуммаАмортизации-СуммаАмортизацииДоКорректировки;
				Иначе
					СтрокаТЧ["Сумма"+СокрЛП(А)] = 0;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦИкла;
	
	////добавить поступившие ОС
	//
	//СписокСчетовИсключения = Новый Массив;
	//СписокСчетовИсключения.Добавить(ПланыСчетов.Типовой.НематериальныеАктивы);
	//СписокСчетовИсключения.Добавить(ПланыСчетов.Типовой.АмортизацияПрочихНематериальныхАктивов);
	//СписокСчетовИсключения.Добавить(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПредставительств);
	//СписокСчетовИсключения.Добавить(ПланыСчетов.Типовой.КраткосрочнаяКредиторскаяЗадолженностьпредставительств);
	//
	//Запрос = Новый Запрос;
	//
	//Запрос.УстановитьПараметр("Организация", ТекДокумент.Организация);
	//Запрос.УстановитьПараметр("НачалоПериода", ТекДокумент.ПериодПланирования);
	//Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата(Год(ТекДокумент.ПериодПланирования),ТекДокумент.ВидКорректировки.НомерМесяца,1)));
	//Запрос.УстановитьПараметр("СтатьяБюджета", ТекДокумент.СтатьяБюджета);
	//Запрос.УстановитьПараметр("ФормируемыйБюджет", ТекДокумент.ФормируемыйБюджет);
	//Запрос.УстановитьПараметр("мВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);
	//Запрос.УстановитьПараметр("СписокСчетовИсключения", СписокСчетовИсключения);

	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ВЫРАЗИТЬ(НалоговыйОборотыДтКт.СубконтоДт1 КАК Справочник.НематериальныеАктивы) КАК ФА,
	//|	НалоговыйОборотыДтКт.СуммаОборот,
	//|	естьNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации,0) КАК Сумма,
	//|	естьNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования,0) КАК амСрокПолезногоИспользования
	//|ИЗ
	//|	РегистрБухгалтерии.Типовой.ОборотыДтКт(&НачалоПериода, &КонецПериода, , 
	//|				СчетДт В ИЕРАРХИИ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|										Соответствие.СчетУчетаБУ
	//|                                    ИЗ
	//|                                       РегистрСведений.б_СоответствиеСтатейБюджетаФАСчетамБУ КАК Соответствие
	//|                                    Где
	//|                                       Соответствие.ФормируемыйБюджет = &ФормируемыйБюджет
	//|                                       И Соответствие.СтатьяБюджета = &СтатьяБюджета
	//|									), &мВидыСубконто, 
	//|				(НЕ СчетКт В ИЕРАРХИИ (&СписокСчетовИсключения)), , Организация = &Организация) КАК НалоговыйОборотыДтКт
	//|Левое Соединение РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&КонецПериода, Организация = &Организация) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	//|    ПО НалоговыйОборотыДтКт.СубконтоДт1 = ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	//|";
	//
	//тз = Запрос.Выполнить().Выгрузить();
	//
	//НачалоРасчета = ТекДокумент.ВИдКорректировки.НомерМесяца;
	//
	//Для Каждого СтрокаТЗ ИЗ тз Цикл
	//	СуммаГодовойАмортизации = ?(СтрокаТЗ.амСрокПолезногоИспользования = 0,0,СтрокаТЗ.СуммаОборот/СтрокаТЗ.амСрокПолезногоИспользования * 12);
	//	СуммаАмортизации        = СуммаГодовойАмортизации / 12;
	//	
	//	НоваяСтрока = ТекДокумент.РасчетнаяТаблица.Добавить();
	//	НоваяСтрока.НМА = СтрокаТЗ.ФА;
	//	НоваяСтрока.амСрокПолезногоИспользования = СтрокаТЗ.амСрокПолезногоИспользования;
	//	НоваяСтрока.Сумма = СтрокаТЗ.СуммаОборот;
	//	
	//	СуммаПоБалансу =0;
	//	СуммаАмортизацииПоБалансу =0;
	//	Для А = НачалоРасчета По 12 Цикл
	//		СуммаПоБалансу = СтрокаТЗ.СуммаОборот;
	//		СуммаАмортизацииПоБалансу = СуммаАмортизацииПоБалансу+СуммаАмортизации;
	//		Если (СуммаПоБалансу - СуммаАмортизацииПоБалансу) > 0 Тогда
	//			НоваяСтрока["Сумма"+СокрЛП(А)] = МИН(СуммаАмортизации,(СуммаПоБалансу - СуммаАмортизацииПоБалансу ));
	//		Иначе
	//			НоваяСтрока["Сумма"+СокрЛП(А)] = 0;
	//		КонецЕсли;
	//		НоваяСтрока.КонтрольнаяСумма = НоваяСтрока.КонтрольнаяСумма + НоваяСтрока["Сумма"+СокрЛП(А)];
	//	КонецЦикла;
	//КонецЦикла;
	
	
КонецПроцедуры

Функция ПолучитьСписокПроводокДляСтатьиБюджета()
	
	Запрос = Новый Запрос;
	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШаблонПроводок.СчетДт КАК СчетДТ,
	|	ШаблонПроводок.СчетКт КАК СчетКТ,
	|	ШаблонПроводок.КоэффициентДляСуммы КАК КоэффициентДляСуммы,
	|	ШаблонПроводок.Ссылка КАК СтатьяБюджета,
	|	ШаблонПроводок.Ссылка.Владелец КАК Бюджет
	|ИЗ
	|	Справочник.фин_СтатьиБюджета.ШаблоныПроводок КАК ШаблонПроводок";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ВОЗВРАТ НЕОПРЕДЕЛЕНО;
	Иначе
		Возврат Результат.Выгрузить();
	КонецЕсли;
	
КонецФункции
Функция ВыполнитьДвижениеПроводокПоБюджетированию(ТекДокумент, ПроводкиПоБюджету, СтруктураШапкиДокумента, ТаблицаДанныхДляБюджета) Экспорт
	
	Если Год(СтруктураШапкиДокумента.ПериодПланирования) > 2013 Тогда
		
		//ТабПроводокДокумента = НОВЫЙ ТаблицаЗначений;
		ТаблицаПроводок = ПолучитьСписокПроводокДляСтатьиБюджета();
		
		Если ТаблицаПроводок = Неопределено тогда 
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого СтрокаТЗ из ТаблицаДанныхДляБюджета ЦИкл
			
			СписокПроводок = ТаблицаПроводок.найтистроки(Новый структура("Бюджет,СтатьяБюджета",СтрокаТЗ.Бюджет,СтрокаТЗ.СтатьяБюджета));
			Для Каждого Строка из СписокПроводок ЦИкл
				Если СтрокаТЗ.Сумма <> 0 Тогда
					
					Если Строка.СчетДТ <> ПланыСчетов.фин_Бюджетирование.ПустаяСсылка() И Строка.СчетДТ <> ПланыСчетов.фин_Бюджетирование.ПустаяСсылка() Тогда
						НоваяПроводка = ПроводкиПоБюджету.Добавить();
						НоваяПроводка.Организация = СтруктураШапкиДокумента.организация;
						НоваяПроводка.Сценарий = СтруктураШапкиДокумента.Сценарий;
						НоваяПроводка.Период = СтрокаТЗ.Период;
						НоваяПроводка.СчетДТ = Строка.СчетДТ;
						НоваяПроводка.СчетКТ = Строка.СчетКТ;
						НоваяПроводка.СуммаУпр = СтрокаТЗ.Сумма*Строка.КоэффициентДляСуммы;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;	
	
КонецФункции
//
// Вставка СТАНИСЛАВ
//

Функция ПолучитьРасходыПоПеремещениюРеализации(ДокОбъект) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",ДокОбъект.Организация);
	Запрос.УстановитьПараметр("ФормируемыйБюджет",ДокОбъект.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("ПериодПланирования",ДокОбъект.ПериодПланирования);
//	Запрос.УстановитьПараметр("НачалоПериода",НачалоГода(ДокОбъект.Период));
//	Запрос.УстановитьПараметр("КонецПериода",ДокОбъект.Период);
Запрос.Текст =	
"ВЫБРАТЬ
|	б_РасчетнаяТаблица.Ссылка Как Док,
|	б_РасчетнаяТаблица.Проведен Как Проведен,
|	б_РасчетнаяТаблица.Организация Как Организация,
|	б_РасчетнаяТаблица.Количество Как Количество,
|	б_РасчетнаяТаблица.КоличествоВагонов Как КоличествоВагонов,
|	б_РасчетнаяТаблица.Страна Как Страна,
|	б_РасчетнаяТаблица.Период Как Период,
|	б_РасчетнаяТаблица.ПериодПланирования Как ПериодПланирования,
|	б_РасчетнаяТаблица.Номенклатура Как Номенклатура,
|	б_РасчетнаяТаблица.ФормируемыйБюджет Как ФормируемыйБюджет
|ИЗ
|	Документ.б_РасчетнаяТаблицаРасходовПоПеремещениюРеализации КАК б_РасчетнаяТаблица
|ГДЕ
|	б_РасчетнаяТаблица.Организация = &Организация
|	И б_РасчетнаяТаблица.ПериодПланирования = &ПериодПланирования
|	И б_РасчетнаяТаблица.ФормируемыйБюджет = &ФормируемыйБюджет
|	И б_РасчетнаяТаблица.Проведен
	|";
тз = Запрос.Выполнить().Выгрузить();
Тз.Колонки.Добавить("СуммаБезНДС");
Тз.Колонки.Добавить("ГруппаНоменклатуры");
Тз.Колонки.Добавить("НомерПериода");
ТзПериодов = ПолучитьТаблицупериодов(ДокОбъект);
Для Каждого Строка Из Тз Цикл
	Строка.СуммаБезНДС = Строка.ДОк.РасчетнаяТаблица.Итог("СуммаБезНДС");
	Строка.ГруппаНоменклатуры = Строка.Номенклатура.ГруппаКультур;
	Для НомерСтрокиПериодов = 0 По ТзПериодов.Количество()-1 Цикл
		Если Строка.Период>=ТзПериодов.Получить(НомерСтрокиПериодов).Период Тогда
			 Строка.НомерПериода = ТзПериодов.Получить(НомерСтрокиПериодов).НомерПериода;
		Прервать;	 
	КонецЕсли;
	КонецЦикла;
КонецЦикла;
	Возврат тз; 
КонецФункции

Функция ПолучитьТаблицуПериодов(ДокОбъект) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",ДокОбъект.Организация);
	Запрос.УстановитьПараметр("ФормируемыйБюджет",ДокОбъект.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("ПериодПланирования",ДокОбъект.ПериодПланирования);
//	Запрос.УстановитьПараметр("НачалоПериода",НачалоГода(ДокОбъект.Период));
//	Запрос.УстановитьПараметр("КонецПериода",ДокОбъект.Период);
Запрос.Текст =	
"ВЫБРАТЬ
|	б_РасчетнаяТаблица.Ссылка Как Док,
|	б_РасчетнаяТаблица.Проведен Как Проведен,
|	б_РасчетнаяТаблица.Организация Как Организация,
|	б_РасчетнаяТаблица.Количество Как Количество,
|	б_РасчетнаяТаблица.КоличествоВагонов Как КоличествоВагонов,
|	б_РасчетнаяТаблица.Страна Как Страна,
|	б_РасчетнаяТаблица.Период Как Период,
|	б_РасчетнаяТаблица.ПериодПланирования Как ПериодПланирования,
|	б_РасчетнаяТаблица.Номенклатура Как Номенклатура,
|	б_РасчетнаяТаблица.ФормируемыйБюджет Как ФормируемыйБюджет
|ИЗ
|	Документ.б_РасчетнаяТаблицаРасходовПоПеремещениюРеализации КАК б_РасчетнаяТаблица
|ГДЕ
|	б_РасчетнаяТаблица.Организация = &Организация
|	И б_РасчетнаяТаблица.ПериодПланирования = &ПериодПланирования
|	И б_РасчетнаяТаблица.ФормируемыйБюджет = &ФормируемыйБюджет
|	И б_РасчетнаяТаблица.Проведен
	|";
ТПериодов = Запрос.Выполнить().Выгрузить();
ТПериодов.Свернуть("Период","Количество");
ТПериодов.Сортировать("Период убыв");
ТПериодов.Колонки.Добавить("НомерПериода");
НП = 1;
Для Каждого Период Из ТПериодов Цикл
Период.НомерПериода = НП;
НП = НП +1;
КонецЦикла;	
Возврат ТПериодов;
КонецФункции
Функция ОпределитьПериодРасходовПоДате(ДокОбъект,ТекДата) Экспорт
	ТаблицаПериодов = ПолучитьТаблицуПериодов(ДокОбъект);
	Для НомерСтрокиПериодов = 0 По ТаблицаПериодов.Количество()-1 Цикл
		Если ТекДата>=ТаблицаПериодов.Получить(НомерСтрокиПериодов).Период Тогда
			 НомерПериода = ТаблицаПериодов.Получить(НомерСтрокиПериодов).НомерПериода;
		Прервать;	 
		КонецЕсли;
	КонецЦикла;
Возврат(НомерПериода);
КонецФункции	
