
#Область РаботаСПравами

Функция ПравоДоступаПользователя(ВидПрава,ГруппаМетаданных,ОбъектМетаданных) Экспорт
	Возврат ПравоДоступа(ВидПрава,Метаданные[ГруппаМетаданных][ОбъектМетаданных]);	
КонецФункции

Функция ПравоРедактированияПутиСЛК() Экспорт
	//Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда
		Возврат ПравоДоступа("Просмотр",Метаданные.ОбщиеФормы["общ_НастройкаСвязиССерверомЛицензий"]) И ПравоДоступа("Изменение",Метаданные.Константы["общ_АдресСервераСЛК"]);	
	//Иначе
	//	Возврат ПравоДоступа("Просмотр",Метаданные.ОбщиеФормы["фин_НастройкаСвязиССерверомЛицензий"]) И ПравоДоступа("Изменение",Метаданные.Константы["фин_АдресСервераСЛК"]);	
	//КонецЕсли;
КонецФункции

Функция ИнформационнаяБазаОбновлена() Экспорт 
	Возврат (Метаданные.Версия = Константы.НомерВерсииКонфигурации.Получить());
КонецФункции

Функция ЗапускПользователяВозможен() Экспорт
	ЗапускПользователяВозможен = Ложь;
	// список дополнительных ролей, которые не учитываем при проверке
	СтруктураДополнительныхРолей = Новый Структура("фин_БюджетированиеИспользованиеНСИБезОграничений,фин_РасчетМоделейБюджетированияПоРегламентированнымДаннымБезЗарплатныхДанных,фин_РасчетМоделейБюджетированияПоРегламентированнымДанным,фин_ФормированиеОтчетаПоИсполнениюБюджета,фин_ФормированиеОтчетаПоБюджету,фин_ОбновлениеРегламентныхСоответствийФактическихДанныхБюджетирования,фин_КорректировкаДвиженийБухгалтерскихДокументовПоБюджетам,ДобавлениеИзменениеОбменовДанными,ПравоАдминистрирования, ПравоАдминистрированияДополнительныхФормИОбработок, ПравоВнешнегоПодключения, ПравоЗавершенияРаботыПользователей, ПравоЗапускаВнешнихОбработок, РедактированиеДвиженийДокумента, ПравоИнтерактивногоУдаленияПомеченныхОбъектов, Пользователь,ВыполнениеОбменовДанными");
	Для Каждого РольМетаданных Из Метаданные.Роли Цикл
		ИмяРоли = РольМетаданных.Имя;
		Если СтруктураДополнительныхРолей.Свойство(ИмяРоли) = Ложь Тогда
			// Это не дополнительная роль. Проверяем ее доступность
			Если РольДоступна(ИмяРоли) Тогда
				ЗапускПользователяВозможен = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	Возврат ЗапускПользователяВозможен;
КонецФункции

Процедура УстановитьТекущегоПользователя() Экспорт
	Попытка
		Если ЕстьОбщийМодуль("ПолныеПрава") Тогда
			ПараметрыСеанса.ТекущийПользователь = Вычислить("ПолныеПрава.ОпределитьТекущегоПользователя()");
			Возврат;
		КонецЕсли;
	Исключение
	КонецПопытки;
	Если ПустаяСтрока(ИмяПользователя()) Тогда
			ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
			Возврат;
	Иначе
		ИмяПользователя           = ИмяПользователя();
		
		Если ПустаяСтрока(ПолноеИмяПользователя()) Тогда
			ПолноеИмяПользователя = ИмяПользователя;
		Иначе
			ПолноеИмяПользователя = ПолноеИмяПользователя();
		КонецЕсли;
	КонецЕсли;
	
	ДлинаКодаПользователя = Метаданные.Справочники.Пользователи.ДлинаКода;
	
	Если СтрДлина(ИмяПользователя) > ДлинаКодаПользователя Тогда
		ИмяПользователя = Лев(ИмяПользователя, ДлинаКодаПользователя);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	(НЕ Пользователи.ЭтоГруппа)
	|	И Пользователи.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", ИмяПользователя);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ОбъектПользователь = Справочники.Пользователи.СоздатьЭлемент();
		
		ОбъектПользователь.Код          = ИмяПользователя;
		ОбъектПользователь.Наименование = ПолноеИмяПользователя;
        
		Попытка
			ОбъектПользователь.Записать();
        Исключение
            #Если Клиент Тогда
			ПоказатьПредупреждение(,"Пользователь : " + ИмяПользователя + " не был найден в справочнике пользователей. Возникла ошибка при добавлении пользователя в справочник.
				|" + ОписаниеОшибки());
			ЗавершитьРаботуСистемы(Ложь);
            #КонецЕсли
        
			ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
			Возврат;
			
		КонецПопытки;
        
		ТекущийПользователь = ОбъектПользователь.Ссылка;

    Иначе
        Выборка = Результат.Выбрать();
		Выборка.Следующий();
        
        ТекущийПользователь = Выборка.Ссылка;
		
	КонецЕсли; 	
	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;
КонецПроцедуры

Функция ПроверкаНазначенияРолиПользователь() Экспорт
	Возврат (НЕ РольДоступна("Пользователь")) И (НЕ РольДоступна("ПолныеПрава")) И (НЕ РольДоступна("ТолькоПросмотрБазовыеФункции"));
КонецФункции

Функция ПроверкаРолейПомимоТолькоПросмотра() Экспорт
	ДоступенТолькоПросмотр = Ложь;
	РолиТолькоПросмотр = Новый Массив;
	ЗапускПользователяВозможен = Истина;
	Для Каждого Роль Из Метаданные.Роли Цикл
		Если Найти(Роль.Имя,"ТолькоПросмотр")<>0 Тогда
			Если РольДоступна(Роль.Имя) Тогда
				ДоступенТолькоПросмотр = Истина;
				Для Каждого РольМетаданных из Метаданные.Роли Цикл
					ИмяРоли = РольМетаданных.Имя;
					Если РольДоступна(ИмяРоли) И Найти(ИмяРоли,"ТолькоПросмотр")=0 И ИмяРоли<>"общ_НастройкаСЛК" Тогда 
						ЗапускПользователяВозможен = Ложь;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЗапускПользователяВозможен Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ПроверкаРольИзСпискаДоступна(Роли) Экспорт
	Для Каждого Роль Из Роли Цикл
		Если РольДоступна(Роль) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ПроверкаРольДоступна(Роль) Экспорт
	Возврат РольДоступна(Роль);
КонецФункции

Функция ДоступКЗадачам(Задачи) Экспорт
	Возврат ПравоДоступа("Просмотр",Метаданные.Задачи[Задачи]);	
КонецФункции

Функция ПравоРедактированияСведенийОЛицензииНаПоддержку() Экспорт 
	
	Возврат ПравоДоступа("Просмотр", Метаданные.Обработки.общ_СведенияОЛицензииНаПоддержку) И ПравоДоступа("Изменение", Метаданные.Константы.общ_СведенияОПодпискеНаПоддержку);	
	
КонецФункции

#КонецОбласти

#Область РаботаСМетаданными

Функция ИмяМетаданных() Экспорт
	Возврат фин_ПроцедурыМеханизмаЗащиты.ИмяМетаданных();	
КонецФункции

Функция ВерсияМетаданных() Экспорт
	Возврат фин_ПроцедурыМеханизмаЗащиты.ВерсияМетаданных();	
КонецФункции

// Возвращает менеджер объекта по ссылке на объект
//
// Не обрабатываются точки маршрутов бизнес-процессов
//
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер, ...
// 
Функция МенеджерОбъектаПоСсылке(Ссылка) Экспорт
	
	ИмяОбъекта = Ссылка.Метаданные().Имя;
	ТипСсылки = ТипЗнч(Ссылка);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Справочники[ИмяОбъекта];
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Документы[ИмяОбъекта];
		
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат БизнесПроцессы[ИмяОбъекта];
		
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыВидовХарактеристик[ИмяОбъекта];
		
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыСчетов[ИмяОбъекта];
		
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыВидовРасчета[ИмяОбъекта];
		
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Задачи[ИмяОбъекта];
		
	ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыОбмена[ИмяОбъекта];
		
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Перечисления[ИмяОбъекта];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ИмяКонфигурации() Экспорт
	Возврат Метаданные.Имя;
КонецФункции

Функция ИспользоватьКлиентБСП() Экспорт
	Возврат Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты.ТабличныеЧасти.Найти("ДоступКУчетнойЗаписи")=Неопределено;
КонецФункции

Функция МодульДоступенНаТонкомКлиенте(Имя) Экспорт
	Возврат Метаданные.ОбщиеМодули[Имя].КлиентУправляемоеПриложение;	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Справочник"
//
// Параметры:
//  ОбъектМетаданных – объект метаданных, для которого необходимо определить принадлежность к заданному типу
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – объект метаданных принадлежит заданному типу; Ложь – нет.
//
Функция ЭтоДокумент(ОбъектМетаданных) Экспорт
	
	Возврат ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) = ИмяТипаДокументы();
	
КонецФункции

Функция ИмяКонстантыСВерсиейКонфигурации()
	Возврат фин_ПроцедурыМеханизмаЗащиты.ИмяКонстантыСВерсиейКонфигурации();	
КонецФункции

Функция ВерсияКонфигурацииИБ() Экспорт
	Если Метаданные.ОбщиеМодули.Найти("ОбновлениеИнформационнойБазы")<>Неопределено И Метаданные.РегистрыСведений.Найти("ВерсииПодсистем")<>Неопределено Тогда
		Возврат Вычислить("ОбновлениеИнформационнойБазы.ВерсияИБ(ИмяМетаданных())");
	ИначеЕсли ИмяКонстантыСВерсиейКонфигурации()<>Неопределено Тогда
		Возврат Константы[ИмяКонстантыСВерсиейКонфигурации()].Получить();
	Иначе
		Возврат Метаданные.Версия; 	
	КонецЕсли;
КонецФункции

Функция ЕстьОбщийМодуль(Имя) Экспорт
	Возврат Метаданные.ОбщиеМодули.Найти(Имя)<>Неопределено;	
КонецФункции

Функция ЕстьОбработка(Имя) Экспорт
	Возврат Метаданные.Обработки.Найти(Имя)<>Неопределено;	
КонецФункции

Функция ЕстьОбъектМетаданных(Имя,Группа) Экспорт
	Возврат Метаданные[Группа].Найти(Имя)<>Неопределено;	
КонецФункции

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Булево: Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Булево: Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокументаСсылка(ИмяРеквизита, Документ) Экспорт
    МетаданныеДокумента = Документ.Метаданные();
	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

// Функция возвращает имя табличной части, к которой принадлежит переданная строка
//
// Параметры
//  СтрокаТабличнойЧасти - ссылка на строку табличной части
//
// Возвращаемое значение:
//   Строка - имя табличной части, как оно задано в конфигураторе
//
Функция ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти) Экспорт

	Возврат Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Имя;

КонецФункции // ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку()

// Позволяет определить есть ли среди реквизитов табличной части документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//  ИмяТабЧасти  - строковое имя табличной части документа, среди реквизитов которого производится поиск
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти) Экспорт

	ТабЧасть = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти);

	Если ТабЧасть = Неопределено Тогда // Нет такой таб. части в документе
		Возврат Ложь;

	Иначе
		Возврат НЕ (ТабЧасть.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

	КонецЕсли;

КонецФункции // ЕстьРеквизитТабЧастиДокумента()

Функция ЕстьПараметрСеанса(Имя) Экспорт
	Возврат Метаданные.ПараметрыСеанса.Найти(Имя)<>Неопределено;	
КонецФункции

Функция ОперативноеПроведениеДоступно(Документ) Экспорт
	Возврат Документ.Метаданные().ОперативноеПроведение = Метаданные.СвойстваОбъектов.ОперативноеПроведение.Разрешить;
КонецФункции

Функция ПроведениеДоступно(Документ) Экспорт
	Возврат Документ.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
КонецФункции

Функция ЗначенияПеречисленияВидаОперации(Документ) Экспорт
	Возврат Документ.ВидОперации.Метаданные().ЗначенияПеречисления;	
КонецФункции

Функция ЗначениеВидаОперации(Документ,Значение) Экспорт
	Возврат Перечисления[Документ.ВидОперации.Метаданные().Имя][Значение];	
КонецФункции

Функция СведенияМетаданных(Объект) Экспорт
	МетаданныеОбъекта = Объект.Метаданные();
	Возврат Новый Структура("Представление,Имя,Дата",МетаданныеОбъекта.Представление(),МетаданныеОбъекта.Имя,Объект.Дата);
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Справочник"
//
// Параметры:
//  ОбъектМетаданных – объект метаданных, для которого необходимо определить принадлежность к заданному типу
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – объект метаданных принадлежит заданному типу; Ложь – нет.
//
Функция ЭтоСправочник(ОбъектМетаданных) Экспорт
	
	Возврат ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) = ИмяТипаСправочники();
	
КонецФункции

// Возвращает имя базового типа по переданному значению объекта метаданных
//
// Параметры:
//  ОбъектМетаданных - объект метаданных, по которому необходимо определить базовый тип
// 
// Возвращаемое значение:
//  Строка - имя базового типа по переданному значению объекта метаданных
//
Функция ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) Экспорт
	
	Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаДокументы();
		
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаСправочники();
		
	ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПеречисления();
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыСведений();
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыНакопления();
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыБухгалтерии();
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыРасчета();
		
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыОбмена();
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыВидовХарактеристик();
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаБизнесПроцессы();
		
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаЗадачи();
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыСчетов();
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыВидовРасчета();
		
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаКонстанты();
		
	ИначеЕсли Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаЖурналыДокументов();
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции
// Имена типов.

// Возвращает значение для идентификации общего типа "Регистры сведений"
//
// Тип: Строка
//
Функция ИмяТипаРегистрыСведений() Экспорт
	
	Возврат "РегистрыСведений";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры накопления"
//
// Тип: Строка
//
Функция ИмяТипаРегистрыНакопления() Экспорт
	
	Возврат "РегистрыНакопления";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры бухгалтерии"
//
// Тип: Строка
//
Функция ИмяТипаРегистрыБухгалтерии() Экспорт
	
	Возврат "РегистрыБухгалтерии";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры расчета"
//
// Тип: Строка
//
Функция ИмяТипаРегистрыРасчета() Экспорт
	
	Возврат "РегистрыРасчета";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Документы"
//
// Тип: Строка
//
Функция ИмяТипаДокументы() Экспорт
	
	Возврат "Документы";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Справочники"
//
// Тип: Строка
//
Функция ИмяТипаСправочники() Экспорт
	
	Возврат "Справочники";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Перечисления"
//
// Тип: Строка
//
Функция ИмяТипаПеречисления() Экспорт
	
	Возврат "Перечисления";
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Отчеты"
//
// Тип: Строка
//
Функция ИмяТипаОтчеты() Экспорт
	
	Возврат "Отчеты";
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Обработки"
//
// Тип: Строка
//
Функция ИмяТипаОбработки() Экспорт
	
	Возврат "Обработки";
	
КонецФункции

// Возвращает значение для идентификации общего типа "ПланыОбмена"
//
// Тип: Строка
//
Функция ИмяТипаПланыОбмена() Экспорт
	
	Возврат "ПланыОбмена";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Планы видов характеристик"
//
// Тип: Строка
//
Функция ИмяТипаПланыВидовХарактеристик() Экспорт
	
	Возврат "ПланыВидовХарактеристик";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Бизнес-процессы"
//
// Тип: Строка
//
Функция ИмяТипаБизнесПроцессы() Экспорт
	
	Возврат "БизнесПроцессы";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Задачи"
//
// Тип: Строка
//
Функция ИмяТипаЗадачи() Экспорт
	
	Возврат "Задачи";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Планы счетов"
//
// Тип: Строка
//
Функция ИмяТипаПланыСчетов() Экспорт
	
	Возврат "ПланыСчетов";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Планы видов расчета"
//
// Тип: Строка
//
Функция ИмяТипаПланыВидовРасчета() Экспорт
	
	Возврат "ПланыВидовРасчета";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Константы"
//
// Тип: Строка
//
Функция ИмяТипаКонстанты() Экспорт
	
	Возврат "Константы";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Журналы документов"
//
// Тип: Строка
//
Функция ИмяТипаЖурналыДокументов() Экспорт
	
	Возврат "ЖурналыДокументов";
	
КонецФункции

#КонецОбласти

#Область РаботаСКурсами

// Возвращает курс валюты на дату
//
// Параметры:
//  Валюта     - Валюта (элемент справочника "Валюты")
//  ДатаКурса  - Дата, на которую следует получить курс
//
// Возвращаемое значение: 
//  Структура, содержащая:
//   Курс      - курс валюты
//   Кратность - кратность валюты
//
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса) Экспорт

	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЕстьРегистрКурсовВалют()=Ложь Тогда
		Возврат Новый Структура("Курс,Кратность",1,1);
	КонецЕсли;
	Структура = Новый Структура("Курс,Кратность",1,1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалютСрезПоследних";
	
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("Дата", ДатаКурса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Структура,ВыборкаДетальныеЗаписи);
	КонецЕсли;

	Возврат Структура;
	
КонецФункции // ПолучитьКурсВалюты()

// Определяет курс документа, который равен либо курсу документа (если в документе он существует),
// либо курсу взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект                 - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - курс документа.
//
Функция КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	Если ТипЗнч(ДокументОбъект) = Тип("Структура") Тогда
		// Если валюта документа совпадает с валютой регл. учета, то курс 1.
		Если ДокументОбъект.Свойство("ВалютаДокумента") Тогда
			
			Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			
				// Если есть реквизит КурсДокумента - его и вернем
				Если ДокументОбъект.Свойство("КурсДокумента") Тогда
					Возврат ДокументОбъект.КурсДокумента;
				КонецЕсли;

				// Если нет КурсДокумента и валюта документа не совпадает с валютой регл. учета, 
				// то такой документ может быть выписан только в валюте взаиморасчетов,
				// если есть реквизит КурсВзаиморасчетов - его и вернем.
				Если ДокументОбъект.Свойство("КурсВзаиморасчетов") Тогда
					Возврат ДокументОбъект.КурсВзаиморасчетов;
				КонецЕсли;

				// Если нет КурсВзаиморасчетов и валюта документа не совпадает с валютой регл. учета, 
				// то КурсВзаиморасчетов долежн быть в табличной части документа или может вообще отсутсвовать.
				// Тогда возьмем курс из справочника на дату документа.
				Возврат ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата).Курс;

			КонецЕсли;
			
		КонецЕсли;
	Иначе
		МетаданныеДокумента = ДокументОбъект.Метаданные();

		// Если валюта документа совпадает с валютой регл. учета, то курс 1.
		Если ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
			
			Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			
				// Если есть реквизит КурсДокумента - его и вернем
				Если ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
					Возврат ДокументОбъект.КурсДокумента;
				КонецЕсли;

				// Если нет КурсДокумента и валюта документа не совпадает с валютой регл. учета, 
				// то такой документ может быть выписан только в валюте взаиморасчетов,
				// если есть реквизит КурсВзаиморасчетов - его и вернем.
				Если ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
					Возврат ДокументОбъект.КурсВзаиморасчетов;
				КонецЕсли;

				// Если нет КурсВзаиморасчетов и валюта документа не совпадает с валютой регл. учета, 
				// то КурсВзаиморасчетов долежн быть в табличной части документа или может вообще отсутсвовать.
				// Тогда возьмем курс из справочника на дату документа.
				Возврат ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата).Курс;

			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	Возврат 1;

КонецФункции // КурсДокумента()

// Определяет кратность документа, которая равен либо кратности документа (если в документе она существует),
// либо кратности взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - кратность валюты в документе.
//
Функция КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	Если ТипЗнч(ДокументОбъект) = Тип("Структура") Тогда

		Если ДокументОбъект.Свойство("ВалютаДокумента") Тогда

			// Если валюта документа совпадает с валютой регл. учета, то кратность 1.
			Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда

				// Если есть реквизит КратностьДокумента - его и вернем
				Если ДокументОбъект.Свойство("КратностьДокумента") Тогда
					Возврат ДокументОбъект.КратностьДокумента;
				КонецЕсли;

				// Если нет КратностьДокумента и валюта документа не совпадает с валютой регл. учета, 
				// то такой документ может быть выписан только в валюте взаиморасчетов,
				// если есть реквизит КратностьВзаиморасчетов - его и вернем.
				Если ДокументОбъект.Свойство("КратностьВзаиморасчетов") Тогда
					Возврат ДокументОбъект.КратностьВзаиморасчетов;
				КонецЕсли;

				// Если нет КратностьВзаиморасчетов и валюта документа не совпадает с валютой регл. учета, 
				// то КратностьВзаиморасчетов должна быть в табличной части документа или может вообще отсутсвовать.
				// Тогда возьмем Кратность из справочника на дату документа.
				Возврат ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата).Кратность;

			КонецЕсли;
		
		КонецЕсли;
	Иначе	
		МетаданныеДокумента = ДокументОбъект.Метаданные();

		Если ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда

			// Если валюта документа совпадает с валютой регл. учета, то кратность 1.
			Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда

				// Если есть реквизит КратностьДокумента - его и вернем
				Если ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
					Возврат ДокументОбъект.КратностьДокумента;
				КонецЕсли;

				// Если нет КратностьДокумента и валюта документа не совпадает с валютой регл. учета, 
				// то такой документ может быть выписан только в валюте взаиморасчетов,
				// если есть реквизит КратностьВзаиморасчетов - его и вернем.
				Если ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
					Возврат ДокументОбъект.КратностьВзаиморасчетов;
				КонецЕсли;

				// Если нет КратностьВзаиморасчетов и валюта документа не совпадает с валютой регл. учета, 
				// то КратностьВзаиморасчетов должна быть в табличной части документа или может вообще отсутсвовать.
				// Тогда возьмем Кратность из справочника на дату документа.
				Возврат ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата).Кратность;

			КонецЕсли;
		
		КонецЕсли;
	КонецЕсли;

	Возврат 1;

КонецФункции // КратностьДокумента()

Функция ПересчитатьИзВалютыВВалюту(Сумма, ВалютаНач, ВалютаКон, ПоКурсуНач, ПоКурсуКон, ПоКратностьНач = 1, ПоКратностьКон = 1) Экспорт 
	Возврат фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(Сумма, ВалютаНач, ВалютаКон, ПоКурсуНач, ПоКурсуКон, ПоКратностьНач, ПоКратностьКон); 
КонецФункции

// Функция ПолучитьКурсыДляГруппыВалют
//
Функция ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют, ДатаКурса) Экспорт
	
	Запрос=Новый Запрос;
	СписокВалют=Новый СписокЗначений;
	
	Для каждого Валюта Из СтруктураГруппаВалют Цикл
		
		СписокВалют.Добавить(Валюта.Значение);
		
	КонецЦикла; 
	
	Запрос.Текст="ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность,
	|	КурсыВалютСрезПоследних.Валюта.Код КАК КодВалюты,
	|	КурсыВалютСрезПоследних.Валюта.Ссылка КАК Валюта
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, Валюта.Код В (&СписокВалют)) КАК КурсыВалютСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаКурса",ДатаКурса);
	Запрос.УстановитьПараметр("СписокВалют",СписокВалют);
	
	СтруктураКурсыВалют=Новый Структура;
	
	Результат=Запрос.Выполнить().Выгрузить();
	
	Для каждого Валюта Из СтруктураГруппаВалют Цикл
		
		СтрокаВалюта=Результат.Найти(Валюта.Значение,"КодВалюты");
		
		Если НЕ СтрокаВалюта=Неопределено Тогда
			СтруктураКурсыВалют.Вставить(Валюта.Ключ+"Курс",СтрокаВалюта.Курс);
			СтруктураКурсыВалют.Вставить(Валюта.Ключ+"Кратность",СтрокаВалюта.Кратность);
			СтруктураКурсыВалют.Вставить(Валюта.Ключ,СтрокаВалюта.Валюта);
		Иначе
			СтруктураКурсыВалют.Вставить(Валюта.Ключ+"Курс",0);
			СтруктураКурсыВалют.Вставить(Валюта.Ключ+"Кратность",0);
			СтруктураКурсыВалют.Вставить(Валюта.Ключ,Новый(Тип("СправочникСсылка.Валюты")));
		КонецЕсли;
		
	КонецЦикла; 		
	
	Возврат СтруктураКурсыВалют;
	
КонецФункции // ПолучитьКурсыДляГруппыВалют()

#КонецОбласти

#Область РаботаСИнформационнойБазой

Процедура ДобавитьПрефиксОрганизации(ДокументОбъект, Префикс) Экспорт
	
	Если Метаданные.Справочники.Организации.Реквизиты.Найти("Префикс")=Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Если  нет реквизита "Организация" или для нее не задан префикс, то 
	// используем пустой префикс,
	// иначе используем префикс организации.
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда 
		Реквизит = "Организация";
	ИначеЕсли ЕстьРеквизитДокумента("ОрганизацияОтправитель", МетаданныеДокумента) Тогда 
		Реквизит = "ОрганизацияОтправитель";
	Иначе 
		Если Не ЗначениеЗаполнено(Префикс) Тогда
			 Префикс = "0";
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект[Реквизит].Префикс)  Тогда
		Если Не ЗначениеЗаполнено(Префикс) Тогда
			 Префикс = "0";
		КонецЕсли;
	Иначе
                                
		Префикс = ДокументОбъект[Реквизит].Префикс + Префикс;
        		
	КонецЕсли;
	
Конецпроцедуры

Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина, Дата = Неопределено, КодЯзыка = "ru") Экспорт 
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда 
		Возврат Вычислить("ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СписокСведений, Список,СПрефиксом,Дата,КодЯзыка)");	
	ИначеЕсли фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 Тогда 
		Возврат Вычислить("ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СписокСведений, Список,СПрефиксом)");	
	ИначеЕсли фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана
		ИЛИ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда 
		Возврат Вычислить("ОбщегоНазначения.ОписаниеОрганизации(СписокСведений, Список,СПрефиксом,Дата,КодЯзыка)");	
	Иначе	
		Возврат СписокСведений;
	КонецЕсли;
КонецФункции

Функция ПолучитьДополнительныйПрефиксНомераДокумента(Документ)
     Возврат "";
КонецФункции

// Возвращает тип платформы строкой.
Функция ТипПлатформыСервераСтрокой() Экспорт
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	
	Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		Возврат "Linux_x86";
		
	ИначеЕсли СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Возврат "Linux_x86_64";
		
	ИначеЕсли СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		Возврат "Windows_x86";
		
	ИначеЕсли СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Возврат "Windows_x86_64";
		
	ИначеЕсли СистемнаяИнфо.ТипПлатформы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВызватьИсключение ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Неизвестный тип платформы ""%1""'"),
		Строка(СистемнаяИнфо.ТипПлатформы));
	
КонецФункции

// Определяет режим эксплуатации информационной базы файловый (Истина) или серверный (Ложь).
// При проверке используется СтрокаСоединенияИнформационнойБазы, которую можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево.
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
			
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции 

#КонецОбласти

#Область РаботаСДаннымиИнформационнойБазы

// Устанавливается значение организации в зависимости от владельца выбранного структурного подразделения
//
Процедура УстановитьОрганизациюИСтруктурноеПодразделение(Организация, СтруктурноеПодразделение) Экспорт	
	
	Организация = ?(ТипЗнч(СтруктурноеПодразделение) = Тип("СправочникСсылка.Организации"), СтруктурноеПодразделение, СтруктурноеПодразделение.Владелец);	
	
КонецПроцедуры // УстановитьОрганизациюИСтруктурноеПодразделение

Функция ОсновнойЯзыкОтчетов() Экспорт
	Попытка 
		Язык = Справочники[фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"ЯзыкиНародовМира"].Русский;
	Исключение
		Язык = Справочники[фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"ЯзыкиНародовМира"].НайтиПоНаименованию("Русский");
	КонецПопытки;
	Возврат Язык;
КонецФункции

Функция ЭлементыПеречисленияВидаОперации(ВидОперации) Экспорт
	ЗначенияПеречисления = ВидОперации.Метаданные().ЗначенияПеречисления;	
	СписокЭлементов = Новый СписокЗначений;
	Для Каждого ЗначениеПеречисления Из ЗначенияПеречисления Цикл
		СписокЭлементов.Добавить(Перечисления[ВидОперации.Метаданные().Имя][ЗначениеПеречисления.Имя],ЗначениеПеречисления.Синоним);
	КонецЦикла;
	Возврат СписокЭлементов;
КонецФункции
	
Процедура НастроитьПредставлениеПолейНадписей(Форма) Экспорт
	Для Каждого РеквизитФормы Из Форма.ПолучитьРеквизиты() Цикл
		Если Найти(РеквизитФормы.Имя,"Надпись")<>0 Тогда
			Форма[РеквизитФормы.Имя] = РеквизитФормы.Заголовок;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Функция выполняет запрос при автоподборе текста и при окончании ввода текста в поле ввода.
//
// Параметры
//  Текст - Строка, текст введенный в поле ввода СтруктурноеПодразделение, по которому необходимо строить поиск
//  Организация - ссылка на организацию
//
// Возвращаемое значение
//  РезультатЗапроса
//
Функция ПолучитьРезультатЗапросаАвтоподбораСтруктурногоПодразделенияСписком(Владелец, Текст) Экспорт
		
		Если Владелец <> Справочники.Организации.ПустаяСсылка() Тогда
			
			ЗапросПоОрганизации		= " И Организации.Ссылка = &Владелец";
			ЗапросПоСППодразделение = " И ПодразделенияОрганизаций.Владелец = &Владелец";
			
		Иначе
			
			ЗапросПоОрганизации 	= "";
			ЗапросПоСППодразделение = "";
				  
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
							  |	Организации.Ссылка КАК Ссылка,
							  |	Организации.Ссылка КАК Владелец
							  |ИЗ
							  |	Справочник.Организации КАК Организации
							  |ГДЕ
							  |	Организации.Наименование ПОДОБНО &ШаблонНаименования"
							  + ЗапросПоОрганизации + 
							  " ОБЪЕДИНИТЬ ВСЕ
							  |
							  |ВЫБРАТЬ 
							  |	ПодразделенияОрганизаций.Ссылка,
							  |	ПодразделенияОрганизаций.Владелец
							  |ИЗ
							  |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
							  |ГДЕ
							  |	ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением = ИСТИНА
							  |	И ПодразделенияОрганизаций.Наименование ПОДОБНО &ШаблонНаименования"
							  + ЗапросПоСППодразделение +
							  " УПОРЯДОЧИТЬ ПО
							  |	Владелец,
							  |	Ссылка
							  |АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.УстановитьПараметр("ШаблонНаименования", Текст + "%");
	Запрос.УстановитьПараметр("Владелец", 			Владелец); 
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Массив);
    Возврат Список;
КонецФункции

//Сформировать структуру реквизитов объекта
//
Функция СформироватьСтруктуруРеквизитовОбъекта(Источник,ИмяТЧ="") Экспорт
	СтруктураРеквизитов = Новый Структура;
	МетаданныеДокумента = Источник.Метаданные();
	Если ИмяТЧ = "" Тогда
		Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
			СтруктураРеквизитов.Вставить(Реквизит.Имя,"");
		КонецЦикла;
		Для Каждого Реквизит Из МетаданныеДокумента.СтандартныеРеквизиты Цикл
			СтруктураРеквизитов.Вставить(Реквизит.Имя,"");
		КонецЦикла;
	Иначе
		Для Каждого Реквизит Из МетаданныеДокумента.ТабличныеЧасти[ИмяТЧ].Реквизиты Цикл
			СтруктураРеквизитов.Вставить(Реквизит.Имя,"");
		КонецЦикла;
		Для Каждого Реквизит Из МетаданныеДокумента.ТабличныеЧасти[ИмяТЧ].СтандартныеРеквизиты Цикл
			СтруктураРеквизитов.Вставить(Реквизит.Имя,"");
		КонецЦикла;
	КонецЕсли;
	Возврат СтруктураРеквизитов
КонецФункции

// Процедура динамического создания элементов формы при инициализации
Процедура НастроитьФорму(Форма) Экспорт
	
	ИмяФормы = Форма.ИмяФормы;
	Если Найти(ИмяФормы, "Документ.") = 0 Тогда
		Возврат;
	КонецЕсли;
	ИмяДокумента = Сред(ИмяФормы, СтрДлина("Документ.") + 1);
	ИмяДокумента = Лев(ИмяДокумента, Найти(ИмяДокумента,".") - 1);
	
	// формы документа
	
	Если НЕ Найти(ИмяФормы, ".Форма.ФормаДокумента") = 0 Тогда
		
		Если ВРег(ИмяДокумента) = ВРег("АвансовыйОтчет") Тогда
			
			// Заказ
			ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, "Товары", Ложь);
			
			// Заявка МТС, Подразделение, Проект
			ДобавитьНаборРеквизитовВТабличнуюЧасть(Форма, "Товары");
					
		ИначеЕсли ВРег(ИмяДокумента) = ВРег("АктОбОказанииПроизводственныхУслуг") Тогда
			
			// Заказ услуги
			ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, "Услуги", Истина);
			
			// ДоговорКонтрагента
			Реквизит = Форма.Элементы.ДоговорКонтрагента;
			Реквизит.УстановитьДействие("ОбработкаВыбора", "ДоговорКонтрагентаОбработкаВыбора");
			
		ИначеЕсли ВРег(ИмяДокумента) = ВРег("ВозвратТоваровОтПокупателя") Тогда
			
			// Заказ услуги
			ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, "Услуги", Истина);
			
			// Заказ товары
			ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, "Товары", Истина);

		ИначеЕсли ВРег(ИмяДокумента) = ВРег("ВозвратТоваровПоставщику") Тогда
			
			// Табличная часть "Товары"
			// Заказ 
			ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, "Товары", Истина);
			// Заявка МТС, Подразделение, Проект
			ДобавитьНаборРеквизитовВТабличнуюЧасть(Форма, "Товары");
			
			// Табличная часть "Услуги"
			// Заказ услуги
			ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, "Услуги", Истина);
			// Заявка МТС, Подразделение, Проект
			ДобавитьНаборРеквизитовВТабличнуюЧасть(Форма, "Услуги");			
			
			// Табличная часть "ОС"
			// Заказ ОС
			ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, "ОС", Истина);
			// Заявка МТС, Подразделение, Проект
			ДобавитьНаборРеквизитовВТабличнуюЧасть(Форма, "ОС");
			
		ИначеЕсли ВРег(ИмяДокумента) = ВРег("Доверенность") Тогда
			
			// Табличная часть "Товары"
			// Заказ 
			ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, "Товары", Истина);
			// Заявка МТС, Подразделение, Проект
			ДобавитьНаборРеквизитовВТабличнуюЧасть(Форма, "Товары");
			
		ИначеЕсли ВРег(ИмяДокумента) = ВРег("ПередачаНМА") Тогда
			
			// Реквизиты шапки
			// Заказ 
			Реквизит = Форма.Элементы.Добавить("Заказ", Тип("ПолеФормы"), Форма.Элементы.Найти("ГруппаШапкаЛевая"));	
			Реквизит.Вид = ВидПоляФормы.ПолеВвода;
			Реквизит.ПутьКДанным = "Объект.Заказ";
			Реквизит.Подсказка = "Заказ";
			
			СвязиПараметровВыбора = Новый Массив;
			НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать);
			СвязиПараметровВыбора.Добавить(НоваяСвязь);
			НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.СтруктурноеПодразделение", "Объект.СтруктурноеПодразделение", РежимИзмененияСвязанногоЗначения.Очищать);
			СвязиПараметровВыбора.Добавить(НоваяСвязь);
			НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать);
			СвязиПараметровВыбора.Добавить(НоваяСвязь);
			
			Реквизит.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
			
			// Договор контрагента
			ДоговорКонтрагента = Форма.Элементы.ДоговорКонтрагента;
			ДоговорКонтрагента.УстановитьДействие("ОбработкаВыбора", "ДоговорКонтрагентаОбработкаВыбора");
			
		ИначеЕсли ВРег(ИмяДокумента) = ВРег("ПередачаОС") Тогда
			
			// Договор контрагента
			ДоговорКонтрагента = Форма.Элементы.ДоговорКонтрагента;
			ДоговорКонтрагента.УстановитьДействие("ОбработкаВыбора", "ДоговорКонтрагентаОбработкаВыбора");
			
			// Табличная часть "ОС"
			// Заказ 
			ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, "ОС", Истина);
			
		ИначеЕсли ВРег(ИмяДокумента) = ВРег("ПеремещениеОС") Тогда
			
			// Реквизиты шапки
			// Документ основание 
			Реквизит = Форма.Элементы.Добавить("ДокументОснование", Тип("ПолеФормы"), Форма.Элементы.Найти("ГруппаДополнительно"));
			Реквизит.Вид = ВидПоляФормы.ПолеВвода;
			Реквизит.ПутьКДанным = "Объект.ДокументОснование";
			Реквизит.Подсказка = "Документ основание";
			
			// Табличная часть "ОС"
			// Заявка МТС, Подразделение, Проект
			ДобавитьНаборРеквизитовВТабличнуюЧасть(Форма, "ОС", Истина);
			
		ИначеЕсли ВРег(ИмяДокумента) = ВРег("ПеремещениеТоваров") Тогда
			
			// Табличная часть "Товары"
			// Заявка МТС, Подразделение, Проект
			ДобавитьНаборРеквизитовВТабличнуюЧасть(Форма, "Товары", Истина);
			
		ИначеЕсли ВРег(ИмяДокумента) = ВРег("ПоступлениеИзПереработки") Тогда
			
			// Реквизиты шапки
			// Договор контрагента
			ДоговорКонтрагента = Форма.Элементы.ДоговорКонтрагента;
			ДоговорКонтрагента.УстановитьДействие("ОбработкаВыбора", "ДоговорКонтрагентаОбработкаВыбора");
			
			// Табличная часть "Услуги"
			// Заказ 
			ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, "Услуги", Истина);			
			// Заявка МТС, Подразделение, Проект
			ДобавитьНаборРеквизитовВТабличнуюЧасть(Форма, "Услуги");
			
			// Табличная часть "Продукция"
			// Заявка МТС
			Реквизит = Форма.Элементы.Добавить("ПродукцияЗаявкаМТС", Тип("ПолеФормы"), Форма.Элементы["Продукция"]);	
			Реквизит.Вид = ВидПоляФормы.ПолеВвода;
			Реквизит.ПутьКДанным = "Объект.Продукция.ЗаявкаМТС";
			Реквизит.Подсказка = "Заявка МТС";
			
			СвязиПараметровВыбора = Новый Массив;
			НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать);
			СвязиПараметровВыбора.Добавить(НоваяСвязь);
			НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.СтруктурноеПодразделение", "Объект.СтруктурноеПодразделение", РежимИзмененияСвязанногоЗначения.Очищать);
			СвязиПараметровВыбора.Добавить(НоваяСвязь);
			
			Реквизит.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
			
		ИначеЕсли ВРег(ИмяДокумента) = ВРег("ПоступлениеНМА") Тогда
			
			// Реквизиты шапки
			// Договор контрагента
			ДоговорКонтрагента = Форма.Элементы.ДоговорКонтрагента;
			ДоговорКонтрагента.УстановитьДействие("ОбработкаВыбора", "ДоговорКонтрагентаОбработкаВыбора");
			
			// Табличная часть "НМА"
			// Заказ 
			ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, "НМА", Истина);			
			// Заявка МТС, Подразделение, Проект
			ДобавитьНаборРеквизитовВТабличнуюЧасть(Форма, "НМА");
			
		ИначеЕсли ВРег(ИмяДокумента) = ВРег("ПоступлениеТоваровУслуг") Тогда
			
			// Реквизиты шапки
			// Договор контрагента
			ДоговорКонтрагента = Форма.Элементы.ДоговорКонтрагента;
			ДоговорКонтрагента.УстановитьДействие("ОбработкаВыбора", "ДоговорКонтрагентаОбработкаВыбора");
			
			КомандаЗаполнить 				= Форма.Команды.Добавить("ЗаполнитьПоСпецифике");
			КомандаЗаполнить.Действие 		= "ЗаполнитьПоСпецифике";
			КомандаЗаполнить.Заголовок		= "Заполнить";
			КомандаЗаполнить.Подсказка 		= "Заполнить по специфике";
			КомандаЗаполнить.Картинка		= БиблиотекаКартинок.фин_Заполнить;
			КомандаЗаполнить.Отображение 	= ОтображениеКнопки.КартинкаИТекст;
			
    		КнопкаЗаполнить 				= Форма.Элементы.Добавить("ФормаЗаполнитьПоСпецифике", Тип("КнопкаФормы"), Форма.КоманднаяПанель);
    		КнопкаЗаполнить.ИмяКоманды		= "ЗаполнитьПоСпецифике";
			
			// Табличная часть "Товары"
			// Заказ 
			ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, "Товары", Истина);			
			// Заявка МТС, Подразделение, Проект
			ДобавитьНаборРеквизитовВТабличнуюЧасть(Форма, "Товары");
			
			// Табличная часть "Услуги"
			// Заказ 
			ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, "Услуги", Истина);			
			// Заявка МТС, Подразделение, Проект
			ДобавитьНаборРеквизитовВТабличнуюЧасть(Форма, "Услуги");			
			
			// Табличная часть "ОС"
			// Заказ 
			ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, "ОС", Истина);			
			// Заявка МТС, Подразделение, Проект
			ДобавитьНаборРеквизитовВТабличнуюЧасть(Форма, "ОС");
			
		ИначеЕсли ВРег(ИмяДокумента) = ВРег("РеализацияТоваровУслуг") Тогда
			
			// Реквизиты шапки
			// Договор контрагента
			ДоговорКонтрагента = Форма.Элементы.ДоговорКонтрагента;
			ДоговорКонтрагента.УстановитьДействие("ОбработкаВыбора", "ДоговорКонтрагентаОбработкаВыбора");
			
			КомандаЗаполнить 				= Форма.Команды.Добавить("ЗаполнитьПоСпецифике");
			КомандаЗаполнить.Действие 		= "ЗаполнитьПоСпецифике";
			КомандаЗаполнить.Заголовок		= "Заполнить";
			КомандаЗаполнить.Подсказка 		= "Заполнить по специфике";
			КомандаЗаполнить.Картинка		= БиблиотекаКартинок.фин_Заполнить;
			КомандаЗаполнить.Отображение 	= ОтображениеКнопки.КартинкаИТекст;
			
    		КнопкаЗаполнить 				= Форма.Элементы.Добавить("ФормаЗаполнитьПоСпецифике", Тип("КнопкаФормы"), Форма.КоманднаяПанель);
    		КнопкаЗаполнить.ИмяКоманды		= "ЗаполнитьПоСпецифике";
			
			// Табличная часть "Товары"
			// Заказ 
			ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, "Товары", Истина);
			
			// Табличная часть "Услуги"
			// Заказ 
			ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, "Услуги", Истина);
			
		ИначеЕсли ВРег(ИмяДокумента) = ВРег("РеализацияУслугПоПереработке") Тогда
			
			// Табличная часть "Услуги"
			// Заказ 
			ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, "Услуги", Истина);
			
		ИначеЕсли ВРег(ИмяДокумента) = ВРег("СписаниеТоваров") Тогда
			
			// Табличная часть "Товары"
			// Заявка МТС, Подразделение, Проект
			ДобавитьНаборРеквизитовВТабличнуюЧасть(Форма, "Товары");
			
		ИначеЕсли ВРег(ИмяДокумента) = ВРег("СчетНаОплатуПокупателю") Тогда
			
			// Табличная часть "Товары"
			// Заказ 
			ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, "Товары", Истина);
			
			// Табличная часть "Услуги"
			// Заказ 
			ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, "Услуги", Истина);
			
			// Табличная часть "ОС"
			// Заказ 
			ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, "ОС", Истина);
			
		ИначеЕсли ВРег(ИмяДокумента) = ВРег("ТребованиеНакладная") Тогда
			
			МатериалыЕдиницаИзмерения = Форма.Элементы.МатериалыЕдиницаИзмерения;
			МатериалыЕдиницаИзмерения.УстановитьДействие("ПриИзменении", "МатериалыЕдиницаИзмеренияПриИзменении");			
			
			// Табличная часть "Материалы"
			// Заявка МТС, Подразделение, Проект
			ДобавитьНаборРеквизитовВТабличнуюЧасть(Форма, "Материалы");			
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет реквизит заказ в заданную табличную часть
Процедура ДобавитьРеквизитЗаказВТабличнуюЧасть(Форма, ИмяТабЧасти, ЕстьКонтрагент = Ложь)
	
	Реквизит = Форма.Элементы.Добавить(ИмяТабЧасти + "Заказ", Тип("ПолеФормы"), Форма.Элементы[ИмяТабЧасти]);	
	Реквизит.Вид = ВидПоляФормы.ПолеВвода;
	Реквизит.ПутьКДанным = "Объект." + ИмяТабЧасти + ".Заказ";
	Реквизит.Подсказка = "Заказ";
	
	СвязиПараметровВыбора = Новый Массив;
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать);
	СвязиПараметровВыбора.Добавить(НоваяСвязь);
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.СтруктурноеПодразделение", "Объект.СтруктурноеПодразделение", РежимИзмененияСвязанногоЗначения.Очищать);
	СвязиПараметровВыбора.Добавить(НоваяСвязь);
	Если ЕстьКонтрагент Тогда 
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать);
		СвязиПараметровВыбора.Добавить(НоваяСвязь);
	КонецЕсли;
	
	Реквизит.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
			
КонецПроцедуры

// Процедура добавляет три реквизита:
// Заявка МТС, Подразделение, Проект
Процедура ДобавитьНаборРеквизитовВТабличнуюЧасть(Форма, ИмяТабЧасти, Получатель = Ложь)
	
	// Заявка МТС
	Реквизит = Форма.Элементы.Добавить(ИмяТабЧасти + "ЗаявкаМТС", Тип("ПолеФормы"), Форма.Элементы[ИмяТабЧасти]);	
	Реквизит.Вид = ВидПоляФормы.ПолеВвода;
	Реквизит.ПутьКДанным = "Объект." + ИмяТабЧасти + ".ЗаявкаМТС";
	Реквизит.Подсказка = "Заявка МТС";
	
	СвязиПараметровВыбора = Новый Массив;
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать);
	СвязиПараметровВыбора.Добавить(НоваяСвязь);
	Если Получатель Тогда 
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.СтруктурноеПодразделение", "Объект.СтруктурноеПодразделениеПолучатель", РежимИзмененияСвязанногоЗначения.Очищать);
	Иначе 
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.СтруктурноеПодразделение", "Объект.СтруктурноеПодразделение", РежимИзмененияСвязанногоЗначения.Очищать);
	КонецЕсли;
	СвязиПараметровВыбора.Добавить(НоваяСвязь);
	
	Реквизит.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
	// Подразделение
	Реквизит = Форма.Элементы.Добавить(ИмяТабЧасти + "Подразделение", Тип("ПолеФормы"), Форма.Элементы[ИмяТабЧасти]);	
	Реквизит.Вид = ВидПоляФормы.ПолеВвода;
	Реквизит.ПутьКДанным = "Объект." + ИмяТабЧасти + ".Подразделение";
	Реквизит.Подсказка = "Подразделение";
	
	// Проект
	Реквизит = Форма.Элементы.Добавить(ИмяТабЧасти + "Проект", Тип("ПолеФормы"), Форма.Элементы[ИмяТабЧасти]);	
	Реквизит.Вид = ВидПоляФормы.ПолеВвода;
	Реквизит.ПутьКДанным = "Объект." + ИмяТабЧасти + ".Проект";
	Реквизит.Подсказка = "Проект";
			
КонецПроцедуры

Функция ЗаписатьИЗакрытьПослеОповещенияПользователяОЗаписи(ДанныеФормы) Экспорт 
	
	Источник = ?(ТипЗнч(ДанныеФормы) = Тип("ДанныеФормыСтруктура"),ДанныеФормыВЗначение(ДанныеФормы,Тип(СтрЗаменить(ДанныеФормы.Ссылка.Метаданные().ПолноеИмя(),".","Объект."))),ДанныеФормы);
	Попытка
		Источник.Записать();
		Возврат Истина;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;	
	
КонецФункции

Функция ПолучитьЗначениеПоУмолчанию(Пользователь = Неопределено,Параметр) Экспорт
	Если Пользователь = Неопределено Тогда
		Пользователь = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь");
	КонецЕсли;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")<>Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда
		Если Параметр = "ИспользоватьНапоминания" Тогда
			Возврат ПолучитьНастройкуПользователя(Пользователь,"ИспользоватьНапоминания");
		ИначеЕсли Параметр = "ОткрыватьПодчиненныеОкнаВОтдельномОкне" Тогда
			Результат = ПолучитьНастройкуПользователя(Пользователь,"ИспользоватьНапоминания");
			Возврат Результат = Истина;
		ИначеЕсли Параметр = "МакетОформленияОтчетовУпр" Тогда
			Возврат ПолучитьНастройкуПользователя(Пользователь,"МакетОформленияОтчетовУпр");
		КонецЕсли;
	ИначеЕсли Параметр = "ОткрыватьПодчиненныеОкнаВОтдельномОкне" Тогда
		Возврат Истина;
	КонецЕсли;
	Если ВРег(Параметр) = ВРег("УчетПоВсемОрганизациям") И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой")=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 Тогда
		Возврат Истина;
	КонецЕсли;
	Попытка
		РежимИнтеграции = фин_ОбщегоНазначенияВызовСервераПовтИсп.РежимИнтеграции();
		Если РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда
			Возврат Вычислить("ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователь, Параметр)");	
		ИначеЕсли РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 Тогда
			Возврат Вычислить("БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(Параметр)");	
		ИначеЕсли фин_ОбщегоНазначенияСервер.ЕстьОбщийМодуль("УправлениеПользователями") Тогда	
			Возврат Вычислить("УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь,Параметр)");
		Иначе
			Возврат ПредопределенноеЗначениеПоУмолчанию(Параметр);
		КонецЕсли;
	Исключение
		Возврат ПредопределенноеЗначениеПоУмолчанию(Параметр);
	КонецПопытки;
КонецФункции

Функция ПолучитьНастройкуПользователя(Пользователь = Неопределено,Параметр) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_НастройкиПользователей."+Параметр+" КАК Значение
		|ИЗ
		|	РегистрСведений.фин_НастройкиПользователей КАК фин_НастройкиПользователей
		|ГДЕ
		|	фин_НастройкиПользователей.Пользователь = &Пользователь";

	Запрос.УстановитьПараметр("Пользователь", ?(Пользователь=Неопределено,фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"),Пользователь));

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Значение;
	КонецЦикла;
	возврат Неопределено;
КонецФункции

Функция ПредопределенноеЗначениеПоУмолчанию(Параметр) Экспорт
	Если Параметр = "ЗапрашиватьВидОперацииПриВводеНового" Тогда
		Возврат Истина;
	ИначеЕсли Параметр = "ИспользоватьНапоминания" Тогда
		Возврат Истина;
	ИначеЕсли Параметр = "УчетПоВсемОрганизациям" Тогда
		Возврат Истина;
	ИначеЕсли Параметр = "ПриОткрытииДокументовПозиционироватьсяНаДату" Тогда
		Возврат Ложь;
	ИначеЕсли Параметр = "ПечатьДокументовБезПредварительногоПросмотра" Тогда
		Возврат Ложь;
	ИначеЕсли Параметр = "ПоказыватьДвиженияПриПроведении" Тогда
		Возврат Ложь;
	ИначеЕсли Параметр = "МакетОформленияОтчетовУпр" Тогда
		Возврат ПолучитьМакетОформленияУпр();
	КонецЕсли;
	Возврат Неопределено;
КонецФункции
	
Функция ПолучитьМакетОформленияУпр() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_НастройкиПользователей.МакетОформленияОтчетовУпр
		|ИЗ
		|	РегистрСведений.фин_НастройкиПользователей КАК фин_НастройкиПользователей
		|ГДЕ
		|	фин_НастройкиПользователей.Пользователь = &Пользователь";

	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаданныйМакет = ВыборкаДетальныеЗаписи.МакетОформленияОтчетовУпр;
	КонецЦикла;

	Если ЗначениеЗаполнено(ЗаданныйМакет) Тогда
		Возврат ПолучитьИмяЭлементаПеречисленияПоЗначению(ЗаданныйМакет);	
	КонецЕсли;
	Возврат "Зеленый";	
КонецФункции

// Добавляет в таблицу значений строки из другой таблицы значений и 
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - таблица значений, откуда берутся значения.
//  ТаблицаПриемник - таблица значений, куда добавляются строки.
//
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник) Экспорт

	// Заполним значения в совпадающих колонках.
	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);

	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьВТаблицуЗначений()

Процедура УстановитьОтборПоОсновнойОрганизации(Объект) Экспорт
	
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям") И фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("УчетПоВсемОрганизациям")=Ложь Тогда
		ЗначенияОтбора = Новый СписокЗначений;
		ЗначенияОтбора.Добавить(Справочники.Организации.ПустаяСсылка());
		ЗначенияОтбора.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
		УстановитьОтборПоОсновнойОрганизацииВСписке(Объект,"Список","Организация",ЗначенияОтбора);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет установку отбора по указанной организации в динамических списках.
// Вызывать необходимо из обработчика формы ПриСозданииНаСервере.
// Если в форму при открытии был передан отбор по организации, то функция не будет выполнена.
//
// Параметры
//  Форма          - УправляемаяФорма  - форма, в которой необходимо установить отбор
//  ИмяСписка      - Строка - имя реквизита формы типа ДинамическийСписок.
//  ИмяРеквизита   - Строка - имя поля-организации в динамическом списке.
//  ЗначениеОтбора - СправочникСсылка.Организации, СписокЗначений, Массив - значение отбора.
//                   Если значение не задано, то будет подставлена основная организация из
//                   настроек пользователя.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - Если отбор установлен, то вернет значение отбора.
//
Функция УстановитьОтборПоОсновнойОрганизацииВСписке(Форма, ИмяСписка = "Список", ИмяРеквизита = "Организация", ЗначениеОтбора = Неопределено) Экспорт

	Перем ОсновнаяОрганизация; // Что бы не затереть глобальную переменную
	
	УчетПоВсемОрганизациям = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("УчетПоВсемОрганизациям");
	Если УчетПоВсемОрганизациям = Неопределено Тогда
		Возврат ОсновнаяОрганизация;
	КонецЕсли;
	Если Форма.Параметры.Свойство("Отбор") И Форма.Параметры.Отбор.Свойство(ИмяРеквизита) Тогда
		// Если значение отбора передается в параметрах формы - берем его оттуда, параметр при этом удаляем
		ОсновнаяОрганизация = Форма.Параметры.Отбор[ИмяРеквизита];
		Форма.Параметры.Отбор.Удалить(ИмяРеквизита);
	ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Организации") 
		ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") 
		ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
		ОсновнаяОрганизация = ЗначениеОтбора;
	Иначе
		ОсновнаяОрганизация = ОрганизацияПоУмолчанию(ЗначениеОтбора);
	КонецЕсли;
	
	Если ТипЗнч(ОсновнаяОрганизация) = Тип("СправочникСсылка.Организации") Тогда
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
	Иначе
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
	КонецЕсли;
	
	ИспользованиеОтбора = ЗначениеЗаполнено(ОсновнаяОрганизация);
	
	Представление = "";
	Если УчетПоВсемОрганизациям<>Ложь Тогда
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	Иначе 
		Представление = НСтр("ru = 'Отбор по основной организации (%1)'");
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Представление, Строка(ОсновнаяОрганизация));
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Форма[ИмяСписка].КомпоновщикНастроек.Настройки.Отбор, ИмяРеквизита, ОсновнаяОрганизация, ВидСравненияОтбора, , ИспользованиеОтбора, РежимОтображения);
	
	Возврат ОсновнаяОрганизация;
	
КонецФункции

Функция ОрганизацияПоУмолчанию(Организация = Неопределено) Экспорт
	
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой") = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда
		Возврат Вычислить("Справочники.Организации.ОрганизацияПоУмолчанию(Организация)");
	ИначеЕсли фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой") = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3 Тогда
		Возврат Вычислить("Справочники.Организации.ОрганизацияПоУмолчанию()");
	КонецЕсли;
	
	ОсновнаяОрганизацияПользователя = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Если ЗначениеЗаполнено(ОсновнаяОрганизацияПользователя) Тогда 
		Возврат ОсновнаяОрганизацияПользователя;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "";
	Если Организация <> Неопределено Тогда 
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка,
		|	0 КАК Порядок
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ " + ?(Организация = Неопределено, "РАЗРЕШЕННЫЕ", "") + " ПЕРВЫЕ 2
	|	Организации.Ссылка,
	|	1 КАК Порядок
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";

	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Если в результате запроса 3 элемента справочника, то значит переданная организация доступна для пользователя
	// Если в результате запроса 1 элемент справочника, то значит пользователю доступна 1 организация, ее и выберем
	// В остальных случаях возвращаем пустую ссылку на элемент справочника
	Если Выборка.Количество() = 3 Тогда
		Возврат Организация;
	ИначеЕсли Выборка.Количество() = 1 Тогда 
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.Организации.ПустаяСсылка();
	
КонецФункции

// Заменяет отбор, установленный пользователем в сохраненной настройке списка, на отбор, установленный программно при создании формы списка.
// Вызывается при восстановлении пользовательских настроек динамического списка
// из обработчика списка ПередЗагрузкойПользовательскихНастроекНаСервере.
//
// Параметры
//  Список      - ДинамическийСписок
//  Настройки   - ПользовательскиеНастройкиКомпоновкиДанных - восстанавливаемые настройки списка
//  ИмяОтбора   - Строка - имя элемента отбора
//
Процедура ВосстановитьОтборСписка(Список, Настройки, ИмяОтбора) Экспорт

	ОтборыКомпоновкиДанных = Неопределено;
	Для Каждого ЭлементНастроек Из Настройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастроек) = Тип("ОтборКомпоновкиДанных") Тогда
			ОтборыКомпоновкиДанных = ЭлементНастроек;
		КонецЕсли;
	КонецЦикла;
	
	// пользователем не устанавливались отборы
	Если ОтборыКомпоновкиДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ФиксированныеОтборы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, ИмяОтбора);
		
	// если элемент отбора найден в фиксированных настройках, то удалим его из настроек пользователя
	Если ФиксированныеОтборы.Количество() <> 0 Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ОтборыКомпоновкиДанных, ИмяОтбора);
	КонецЕсли;
		
	Отборы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, ИмяОтбора);
	
	Если Отборы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементОтбора = Отборы[0];
	ИдентификаторНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
	
	Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Организации") Тогда 
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("УчетПоВсемОрганизациям") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ЭлементНастроек Из ОтборыКомпоновкиДанных.Элементы Цикл
		Если ТипЗнч(ЭлементНастроек) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И ЭлементНастроек.ИдентификаторПользовательскойНастройки = ИдентификаторНастройки Тогда
			ЭлементНастроек.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
			ЭлементНастроек.Использование  = ЭлементОтбора.Использование;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Для каждого ЭлементНастроек Из Настройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастроек) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И ЭлементНастроек.ИдентификаторПользовательскойНастройки = ИдентификаторНастройки Тогда
			ЭлементНастроек.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
			ЭлементНастроек.Использование  = ЭлементОтбора.Использование;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура активизирует элемент формы.
// Если это - табличная часть, то тогда анализируется,
// может табличная часть на закладке и если так,
// то закладка становится текущей, но табличная часть не активизируется
//
// Параметры:
//  Форма            - Управляемая форма
//  ИмяЭлементаФормы - Строка - имя элемента, который необходимо активизировать
//
Процедура АктивизироватьЭлементФормы(Форма, ИмяЭлементаФормы) Экспорт

	Если НЕ ПустаяСтрока(ИмяЭлементаФормы) Тогда
		НайденныйЭлементФормы = Форма.Элементы.Найти(ИмяЭлементаФормы);
		Если НайденныйЭлементФормы <> Неопределено Тогда
			Если ТипЗнч(НайденныйЭлементФормы) = Тип("ТаблицаФормы") Тогда
				// Для таблицы определить - если она находится на закладке, то не активизировать элемент,
				// а сделать активной страницу, на которой находится эта табличная часть
				Страница = НайденныйЭлементФормы.Родитель;
				Пока Страница <> Неопределено И ТипЗнч(Страница) = Тип("ГруппаФормы") И Страница.Вид = ВидГруппыФормы.ОбычнаяГруппа Цикл
					// Таблица может быть внутри группы, а группа на странице
					Страница = Страница.Родитель;
				КонецЦикла;
				Если (Страница <> Неопределено) И ТипЗнч(Страница) = Тип("ГруппаФормы") И (Страница.Вид = ВидГруппыФормы.Страница) Тогда
					// Определим владельца этой страницы и активизируем эту страницу
					ПанельСтраниц = Страница.Родитель;
					Если (ПанельСтраниц <> Неопределено) И (ПанельСтраниц.Вид = ВидГруппыФормы.Страницы) Тогда
						ПанельСтраниц.ТекущаяСтраница = Страница;
					Иначе
						Форма.ТекущийЭлемент = НайденныйЭлементФормы;
					КонецЕсли;
				Иначе
					Форма.ТекущийЭлемент = НайденныйЭлементФормы;
				КонецЕсли;
			Иначе
				Форма.ТекущийЭлемент = НайденныйЭлементФормы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода = '20200101', ДляФизЛицаТолькоИнициалы = Истина, БанковскийСчет = Неопределено) Экспорт
	Если ЕстьОбщийМодуль("ОбщегоНазначенияБКВызовСервера") Тогда
		Возврат Вычислить("фин_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы, БанковскийСчет)");
	Иначе
		Возврат Новый Структура("ПолноеНаименование,Кбе",ЮрФизЛицо.Наименование,"");
	КонецЕсли;
КонецФункции


Функция СостояниеДокументаПоУмолчанию(ИмяДокумента=Неопределено) Экспорт
	Если НЕ ПравоДоступа("Проведение",Метаданные.Документы[ИмяДокумента]) Тогда
		Возврат Перечисления[фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СостоянияОбъектов"].Подготовлен;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ВидыДокументов.Ссылка
		|ПОМЕСТИТЬ Виды
		|ИЗ
		|	Справочник.фин_ВидыДокументов КАК фин_ВидыДокументов
		|ГДЕ
		|	фин_ВидыДокументов.ПрограммныйИдентификатор = &ПрограммныйИдентификатор
		|	И НЕ фин_ВидыДокументов.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	усд_АктуальныеМаршрутыСогласованияДокументов.Маршрут
		|ИЗ
		|	Виды КАК Виды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.усд_АктуальныеМаршрутыСогласованияДокументов КАК усд_АктуальныеМаршрутыСогласованияДокументов
		|		ПО Виды.Ссылка = усд_АктуальныеМаршрутыСогласованияДокументов.ВидДокументов";

	Запрос.УстановитьПараметр("ПрограммныйИдентификатор", ИмяДокумента);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Перечисления[фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СостоянияОбъектов"].Подготовлен;
	КонецЕсли;

	Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.СостояниеОбъектаУтвержден();	
КонецФункции

Процедура ОтборВФормеСпискаПоОрганизации(Список,Элементы) Экспорт
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("УчетПоВсемОрганизациям")=Ложь Тогда // Установлен режим учета по одной организации
         Список.Отбор.Элементы.Очистить();
         Поле = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
         Поле.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Организация");
		 Поле.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		 Поле.ПравоеЗначение = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	 КонецЕсли;
	 Если Элементы.Список.ПодчиненныеЭлементы.Найти("СтруктурноеПодразделение")<>Неопределено Тогда
    	Элементы.Список.ПодчиненныеЭлементы.СтруктурноеПодразделение.Видимость=фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	КонецЕсли;
КонецПроцедуры

// Процедура проверяет Напоминания из регистра.
// 
//  Параметры
//   ТаблицаНапоминаний - ТаблицаЗначений, с Напоминаниями
//
Функция ПроверитьНапоминанияПользователя(ВыбПользователь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	*
		|ИЗ
		|	Задача.усд_ЗадачиСогласованияДокументов.ЗадачиПоИсполнителю(&ТекПользователь, 
		|		Выполнена = ЛОЖЬ И Оповещение = ИСТИНА И СрокОповещения < &ДатаСреза И ПометкаУдаления=ЛОЖЬ)
		|";
		
	Запрос.УстановитьПараметр("ТекПользователь", ВыбПользователь);
	Запрос.УстановитьПараметр("ДатаСреза"      , ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыгрузкаДляСверки = РезультатЗапроса.Выгрузить();
    Возврат ВыгрузкаДляСверки.Количество();
	
КонецФункции // ПроверитьНапоминанияПользователя()

Функция ПроверитьДоступКЗадачамИНапоминанияПользователя(Задачи, ВыбПользователь, КоличествоЗадач) Экспорт 
	
	Если ДоступКЗадачам(Задачи) Тогда 
		КоличествоЗадач = ПроверитьНапоминанияПользователя(ВыбПользователь);
		Возврат Истина;
	Иначе 
		КоличествоЗадач = 0;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//  Процедура определяет ситуацию, когда при изменении своей даты документ 
//  оказывается в другом периоде нумерации документов, и в это м случае
//  присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументОбъект         - контекст документа,из которого вызвана процедура 
//  НачальнаяДатаДокумента - начальная дата документа 
// 
Процедура ПроверитьНомерДокумента(ДокументОбъект, НачальнаяДатаДокумента) Экспорт   // в разработке

	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ?(ТипЗнч(ДокументОбъект)=Тип("Структура"),ДокументОбъект.Ссылка,ДокументОбъект).Метаданные().ПериодичностьНомера;

	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - ДокументОбъект.Дата;

	Иначе
		Возврат;

	КонецЕсли;

	Если РазностьДат <> 0 Тогда
		ДокументОбъект.Номер = "";
	КонецЕсли;

КонецПроцедуры // ПроверитьНомерДокумента()

// Процедура проверяет Напоминания из регистра.
// 
//  Параметры
//   ТаблицаНапоминаний - ТаблицаЗначений, с Напоминаниями
//
Функция ПроверитьНапоминанияПользователяБюджетирование(ВыбПользователь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	*
		|ИЗ
		|	Задача.фин_ЗадачиБюджетногоПроцесса.ЗадачиПоИсполнителю(&ТекПользователь, 
		|		Выполнена = ЛОЖЬ И Оповещение = ИСТИНА И СрокОповещения < &ДатаСреза И ПометкаУдаления=ЛОЖЬ)
		|";
		
	Запрос.УстановитьПараметр("ТекПользователь", ВыбПользователь);
	Запрос.УстановитьПараметр("ДатаСреза"      , ТекущаяДата());
	Возврат Запрос.Выполнить().Выгрузить().Количество();
КонецФункции

Функция ПроверитьДоступКЗадачамИНапоминанияПользователяБюджетирование(Задачи, ВыбПользователь, КоличествоЗадач) Экспорт 
	
	Если ДоступКЗадачам(Задачи) Тогда 
		КоличествоЗадач = ПроверитьНапоминанияПользователяБюджетирование(ВыбПользователь);
		Возврат Истина;
	Иначе 
		КоличествоЗадач = 0;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция формирует фамилию и инициалы либо по наименованию элемента спр-ка ФизическиеЛица
//  либо по переданным строкам.
//  Если передан Объект, то извлеченная из него строка считается совокупностью 
//  Фамилия + Имя + Отчество, разделенными пробелами.
//
// Параметры
//  Объект		- строка или ссылка или объект элемента спр-ка ФизическиеЛица.
//  Фамилия		- фамилия физ. лица.
//  Имя			- имя физ. лица.
//  Отчество	- отчество физ. лица.
//
// Возвращаемое значение 
//  Фамилия и Инициалы одной строкой. Побочные эффекты - переданная целая строка 
//  Побочные эффекты - переданная целая строка разбивается на подстроки, соответствующие
//  отдельным Фамилии,Имени и Отчеству
//
Функция ФамилияИнициалыФизЛица(Объект = "", Фамилия = " ", Имя = " ", Отчество = " ") Экспорт
    УстановитьПривилегированныйРежим(Истина);
	ТипОбъекта = ТипЗнч(Объект);
	
	МассивТиповСсылок = Новый Массив;
	МассивТиповСсылок.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));

	СписокТиповСсылок	= Новый ОписаниеТипов(МассивТиповСсылок);
	
	МассивТиповОбъектов = Новый Массив;
	МассивТиповОбъектов.Добавить(Тип("СправочникОбъект.ФизическиеЛица"));

	СписокТиповОбъектов	= Новый ОписаниеТипов(МассивТиповОбъектов);
	
	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект)," ");
	ИначеЕсли ТипОбъекта <> Тип("Неопределено") И (СписокТиповСсылок.СодержитТип(ТипОбъекта) Или СписокТиповОбъектов.СодержитТип(ТипОбъекта)) Тогда 
		Наименование = Объект.Наименование;

		// Избавление от возможных выражений в скобках, например (осн.), (вн. совм.).
		НачальнаяПозиция	= Найти(Наименование,"(");
		КонечнаяПозиция		= Найти(Наименование,")");
		ДлинаСтроки			= СтрДлина(Наименование);
		Если НачальнаяПозиция > 0 Тогда
			СтрокаДляОбработки = Лев(Наименование, НачальнаяПозиция - 1) + ?(КонечнаяПозиция > 0,Прав(Наименование, ДлинаСтроки - КонечнаяПозиция),"")
		Иначе
			СтрокаДляОбработки = Наименование;
		КонецЕсли; 

		ФИО = РазложитьСтрокуВМассивПодстрок(СокрЛП(СтрокаДляОбработки)," ");
	Иначе

		// используем возможно переданные отдельные строки
		Возврат Объект;

	КонецЕсли;

	КоличествоПодстрок = ФИО.Количество();
	Фамилия  = ?(КоличествоПодстрок > 0,ФИО[0],"");
	Имя      = ?(КоличествоПодстрок > 1,ФИО[1],"");
	Отчество = ?(КоличествоПодстрок > 2,ФИО[2],"");
	
	Возврат ?(НЕ ПустаяСтрока(Фамилия), 
				Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"");

КонецФункции // ФамилияИнициалыФизЛица()

// Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт

	МассивСтрок = Новый Массив();

	Если Разделитель = " " Тогда

		Стр = СокрЛП(Стр);

		Пока 1 = 1 Цикл

			Поз = Найти(Стр,Разделитель);

			Если Поз = 0 Тогда

				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;

			КонецЕсли;

			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));

		КонецЦикла;

	Иначе

		ДлинаРазделителя = СтрДлина(Разделитель);

		Пока 1 = 1 Цикл

			Поз = Найти(Стр,Разделитель);
			Если Поз = 0 Тогда

				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;

			КонецЕсли;

			МассивСтрок.Добавить(Лев(Стр,Поз-1));

			Стр = Сред(Стр,Поз + ДлинаРазделителя);

		КонецЦикла;

	КонецЕсли;

КонецФункции // РазложитьСтрокуВМассивПодстрок()

Функция ОтсутствиеНеобходимостиПроверкиОбъекта(Знач ДанныеФормы) Экспорт
	Источник = ?(ТипЗнч(ДанныеФормы)=Тип("ДанныеФормыСтруктура"),ДанныеФормыВЗначение(ДанныеФормы,Тип(СтрЗаменить(ДанныеФормы.Ссылка.Метаданные().ПолноеИмя(),".","Объект."))),ДанныеФормы);
	Возврат Источник.ДополнительныеСвойства.Свойство("ВнешняяОбработка") ИЛИ Источник.ОбменДанными.Загрузка;	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров
// начинается с единицы.
//
// Параметры
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра").
// Параметр<n>         - Строка - параметр
// Возвращаемое значение:
//   Строка   – текстовая строка с подставленными параметрами
//
// Пример:
// Строка = ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк");
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1,	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	Если СтрокаПодстановки = Неопределено ИЛИ СтрДлина(СтрокаПодстановки) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	НачПозиция = 1;
	Позиция = 1;
	Пока Позиция <= СтрДлина(СтрокаПодстановки) Цикл
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		Если СимволСтроки <> "%" Тогда
			Позиция = Позиция + 1;
			Продолжить;
		КонецЕсли;
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, Позиция - НачПозиция);
		Позиция = Позиция + 1;
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		
		Если СимволСтроки = "%" Тогда
			Позиция = Позиция + 1;
			НачПозиция = Позиция;
			Продолжить;
		КонецЕсли;
		
		Попытка
			НомерПараметра = Число(СимволСтроки);
		Исключение
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + СимволСтроки);
		КонецПопытки;
		
		Если СимволСтроки = "1" Тогда
			ЗначениеПараметра = Параметр1;
		ИначеЕсли СимволСтроки = "2" Тогда
			ЗначениеПараметра = Параметр2;
		ИначеЕсли СимволСтроки = "3" Тогда
			ЗначениеПараметра = Параметр3;
		ИначеЕсли СимволСтроки = "4" Тогда
			ЗначениеПараметра = Параметр4;
		ИначеЕсли СимволСтроки = "5" Тогда
			ЗначениеПараметра = Параметр5;
		ИначеЕсли СимволСтроки = "6" Тогда
			ЗначениеПараметра = Параметр6;
		ИначеЕсли СимволСтроки = "7" Тогда
			ЗначениеПараметра = Параметр7;
		ИначеЕсли СимволСтроки = "8" Тогда
			ЗначениеПараметра = Параметр8;
		ИначеЕсли СимволСтроки = "9" Тогда
			ЗначениеПараметра = Параметр9;
		Иначе
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + ЗначениеПараметра);
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
		Иначе
			ЗначениеПараметра = Строка(ЗначениеПараметра);
		КонецЕсли;
		Результат = Результат + ЗначениеПараметра;
		Позиция = Позиция + 1;
		НачПозиция = Позиция;
	
	КонецЦикла;
	
	Если (НачПозиция <= СтрДлина(СтрокаПодстановки)) Тогда
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, СтрДлина(СтрокаПодстановки) - НачПозиция + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка    - Ссылка на объект - элемент справочника, документ, ...
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
// 
Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		СтруктураРеквизитов = Новый Структура(Реквизиты);
		
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Структура")
	      ИЛИ ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		
		СтруктураРеквизитов = Реквизиты;
		
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив")
	      ИЛИ ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		
		СтруктураРеквизитов = Новый Структура;
		Для каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"),
			Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
	
КонецФункции

// Возвращает значения реквизитов, прочитанные из информационной базы
// для нескольких объектов.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  МассивСсылок - массив ссылок на объекты одного типа.
//				ВАЖНО! значения массива должны быть ссылками на 
//				объекты одного типа!
//  ИменаРеквизитов - Строка, имена реквизитов перечисленные через запятую,
//				в формате требований к свойствам структуры.
//				Например, "Код, Наименование, Родитель".
// 
// Возвращаемое значение:
//  Соответствие - где ключ - ссылка на объект, а Значение - структура, которая 
//		   		содержит список свойств, как список имен в строке.
//				ИменаРеквизитов, со значениям реквизитов, прочитанными из информационной базы.
// 
Функция ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов) Экспорт
	
	ЗначенияРеквизитов = Новый Соответствие;
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат ЗначенияРеквизитов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Ссылка КАК Ссылка, " + ИменаРеквизитов + "
		|ИЗ
		|	" + МассивСсылок[0].Метаданные().ПолноеИмя() + " КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат = Новый Структура(ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		ЗначенияРеквизитов[Выборка.Ссылка] = Результат;
	КонецЦикла;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

Функция РазрешитьПечатьНепроведенныхДокументов(Проведен=Истина) Экспорт
	Если Метаданные.ОбщиеМодули.Найти("УправлениеПользователями")<>Неопределено Тогда
		Попытка
			Возврат Вычислить("УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен)");
		Исключение
			Возврат Истина;
		КонецПопытки;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СПРАВОЧНИКАМИ

// Функция возвращает массив вышестоящих групп указанного элемента.
// 
// Переметры:
//  Элемент      - Элемент справочника, для которого ищется родитель
//
// Возвращаемое значение
//  Массив вышестояших групп
//
Функция ПолучитьСписокВышеСтоящихГрупп(ЭлементСправочника) Экспорт
	
	Результат = Новый Массив;		
	
	МетаданныеЭлемента = ЭлементСправочника.Метаданные();
	
	ИмяОбъектаМетаданных = МетаданныеЭлемента.Имя;
	
	ТипОбъектаМетаданных = "";
	Если Метаданные.Справочники.Содержит(МетаданныеЭлемента) Тогда
		ТипОбъектаМетаданных = "Справочник";
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеЭлемента) Тогда
		ТипОбъектаМетаданных = "ПланСчетов";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеЭлемента) Тогда
		ТипОбъектаМетаданных = "ПланВидовХарактеристик";
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Справочник1.Родитель КАК Родитель1,
	|	Справочник2.Родитель КАК Родитель2,
	|	Справочник3.Родитель КАК Родитель3,
	|	Справочник4.Родитель КАК Родитель4,
	|	Справочник5.Родитель КАК Родитель5
	|ИЗ
	|	" + ТипОбъектаМетаданных + "." + ИмяОбъектаМетаданных + " КАК Справочник1
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТипОбъектаМетаданных + "." + ИмяОбъектаМетаданных + " КАК Справочник2
	|		ПО (Справочник2.Ссылка = Справочник1.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТипОбъектаМетаданных + "." + ИмяОбъектаМетаданных + " КАК Справочник3
	|		ПО (Справочник3.Ссылка = Справочник2.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТипОбъектаМетаданных + "." + ИмяОбъектаМетаданных + " КАК Справочник4
	|		ПО (Справочник4.Ссылка = Справочник3.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТипОбъектаМетаданных + "." + ИмяОбъектаМетаданных + " КАК Справочник5
	|		ПО (Справочник5.Ссылка = Справочник4.Родитель)
	|ГДЕ
	|	Справочник1.Ссылка = &Ссылка";
	
	ТекущийЭлемент = ЭлементСправочника;
	
	Пока ЗначениеЗаполнено(ТекущийЭлемент) Цикл		
		Запрос.УстановитьПараметр("Ссылка", ТекущийЭлемент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Для Индекс = 1 по 5 Цикл
				ТекущийЭлемент = Выборка["Родитель" + Индекс];
				Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
					Результат.Добавить(ТекущийЭлемент);
				Иначе
					Прервать;
				КонецЕсли;				
			КонецЦикла;
		Иначе
			ТекущийЭлемент = Неопределено;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции // ПолучитьСписокВышеСтоящихГрупп()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПЕРЕЧИСЛЕНИЯМИ

// Функция формирует список элементов перечисления
//
// Параметры
//  ИмяПеречисления - имя перечисления, как оно задано в конфигураторе
//
// Возвращаемое значение:
//   СписокЗначений - список элементов перечисления
//
Функция ПолучитьСписокЭлементовПеречисления(ИмяПеречисления) Экспорт

	СписокЭлементовПеречисления = Новый СписокЗначений;
	
	Попытка
		КоллекцияЭлементовПеречисления = Перечисления[ИмяПеречисления];
	Исключение
		Возврат СписокЭлементовПеречисления;
	КонецПопытки;
	
	Для каждого ЭлементПеречисления Из КоллекцияЭлементовПеречисления Цикл
		СписокЭлементовПеречисления.Добавить(ЭлементПеречисления, Строка(ЭлементПеречисления));
	КонецЦикла;
	
	Возврат СписокЭлементовПеречисления;

КонецФункции // ПолучитьСписокЭлементовПеречисления()

// Предназначена для получения имени элемента перечисления по значению.
//
// Параметры:
//	Элемент перечисления.
//
// Возвращаемое значение:
//	Строка - имя элемента перечисления в метаданных.
//
Функция ПолучитьИмяЭлементаПеречисленияПоЗначению(ЗначениеПеречисления) Экспорт
	
	ИмяЭлемента = Строка(ЗначениеПеречисления);
	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
	Для Каждого ЭлементПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если Перечисления[ИмяПеречисления][ЭлементПеречисления.Имя] = ЗначениеПеречисления Тогда
		//Если ЭлементПеречисления.Синоним = Строка(ЗначениеПеречисления) Тогда
			ИмяЭлемента = ЭлементПеречисления.Имя;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ИмяЭлемента;
	
КонецФункции // ПолучитьПериодичностьДляЗапросаПоЗначениюПеречисления()

// Проверить, что значение имеет ссылочный тип данных.
//
// Параметры:
//  Значение       - ссылка на объект, - элемент справочника, документ, ...
//
// Возвращаемое значение:
//  Булево       - Истина, если тип значения ссылочный.
//
Функция ЗначениеСсылочногоТипа(Значение) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Получает картинку для вывода на странице с комментарием в зависимости
// от наличия текста в комментарии.
//
// Параметры
//  Комментарий  - Строка - текст комментария
//
// Возвращаемое значение:
//  Картинка - Картинка, которая должна отображаться на странице с комментарием.
//
Функция ПолучитьКартинкуКомментария(Комментарий) Экспорт
	
	Если НЕ ПустаяСтрока(Комментарий) Тогда
		Картинка = БиблиотекаКартинок.Комментарий;
	Иначе
		Картинка = Новый Картинка;
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

// Проверяет наличие табличной части у справочника
//
//Параметры
//  ИмяСправочника    - Строка - имя справочника, для которого осуществляется проверка.
//  ИмяТабличнойЧасти - Строка - имя табличной части, наличие которой проверяется.
//
//Возвращаемое значение:
//  Булево   - Истина, если табличная часть есть, ложь в обратном случае
//
//Пример:
//  Если НЕ фин_ОбщегоНазначенияСервер.НаличиеТабличнойЧастиУСправочника(ИмяСправочника,"КонтактнаяИнформация") Тогда
//  	Возврат;
//  КонецЕсли;
//
Функция НаличиеТабличнойЧастиУСправочника(ИмяСправочника, ИмяТабличнойЧасти) Экспорт
	
	Возврат (Метаданные.Справочники[ИмяСправочника].ТабличныеЧасти.Найти(ИмяТабличнойЧасти) <> Неопределено);
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Функции для работы с журналом регистрации

// Процедура пакетной записи сообщений в журнал регистрации
// 
// Параметры: СобытияДляЖурналаРегистрации - массив структур, клиентская глобальная переменная 
// Каждая структура - сообщение для журнала регистрации.
// После записи переменная очищается.
Процедура ЗаписатьСобытияВЖурналРегистрации(СобытияДляЖурналаРегистрации) Экспорт
	
	Если ТипЗнч(СобытияДляЖурналаРегистрации) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;	
	
	Если СобытияДляЖурналаРегистрации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СообщениеЖурнала Из СобытияДляЖурналаРегистрации Цикл
		ЗначениеСообщения = СообщениеЖурнала.Значение;
		ИмяСобытия = ЗначениеСообщения.ИмяСобытия;
		УровеньСобытия = УровеньСобытияПоПредставлению(ЗначениеСообщения.ПредставлениеУровня);
		ДатаСобытия = ТекущаяДатаСеанса();
		Если ЗначениеСообщения.Свойство("ДатаСобытия") И ЗначениеЗаполнено(ЗначениеСообщения.ДатаСобытия) Тогда
			ДатаСобытия = ЗначениеСообщения.ДатаСобытия;
		КонецЕсли;
		Комментарий = Строка(ДатаСобытия) + " " + ЗначениеСообщения.Комментарий;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньСобытия,,, Комментарий);
	КонецЦикла;
	СобытияДляЖурналаРегистрации.Очистить();
	
КонецПроцедуры

// Включить запись уровней событий СписокУровней в журнале регистрации.
//
// Параметры: УровниСобытий - СписокЗначений - наименования уровней регистрации событий, 
//                                             которые необходимо включить
//
Процедура ВключитьИспользованиеЖурналаРегистрации(СписокУровней = Неопределено) Экспорт
	
	МассивУровней = Новый Массив();
	Если СписокУровней = Неопределено Тогда
		МассивУровней.Добавить(УровеньЖурналаРегистрации.Информация);
		МассивУровней.Добавить(УровеньЖурналаРегистрации.Ошибка);
		МассивУровней.Добавить(УровеньЖурналаРегистрации.Предупреждение);
		МассивУровней.Добавить(УровеньЖурналаРегистрации.Примечание);
	Иначе
		МассивУровней = УровниСобытияЖурналаРегистрацииПоСтроке(СписокУровней);
	КонецЕсли;
		
	МонопольныйРежимУстановленРанее = МонопольныйРежим();
	УстановитьМонопольныйРежим(Истина);
	
	Попытка
		УстановитьИспользованиеЖурналаРегистрации(МассивУровней);
	Исключение
		Если Не МонопольныйРежимУстановленРанее Тогда
			УстановитьМонопольныйРежим(Ложь);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет, включена ли регистрация событий УровниСобытий в журнале регистрации.
//
// Параметры: 
//   УровниСобытий - СписокЗначений - список строк с уровнями регистрации событий журнала регистрации, 
//                                    для которых необходимо проверить, что они включены.
//                                    Если Неопределено, то проверяются все уровни событий.
//
// Возвращаемое значение: 
//   Булево - Истина, когда заданные режимы включены. Иначе - Ложь.
//
Функция ПроверитьВключениеЖурналаРегистрации(УровниСобытий = Неопределено) Экспорт	
	
	УстановленныеУровниСобытий = ПолучитьИспользованиеЖурналаРегистрации();
	Если УровниСобытий = Неопределено Тогда
		Возврат УстановленныеУровниСобытий.Количество() = 4; // включены все уровни событий?
	КонецЕсли;
	
	ИменаУровнейСобытий = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УровниСобытий);
	Для Каждого Название Из ИменаУровнейСобытий Цикл
		УровеньСобытия = УровеньСобытияПоПредставлению(Название);
		Если УстановленныеУровниСобытий.Найти(УровеньСобытия) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции




// Проверяет проведенность документов
//
// Параметры:
//  Документы - Массив - документы, проведенность которых необходимо проверить
//
// Возвращаемое значение:
//  Массив - непроведенные документы из массива Документы
//
Функция ПроверитьПроведенностьДокументов(знач Документы) Экспорт
	
	Результат = Новый Массив;
	
	ШаблонЗапроса = 	
		"ВЫБРАТЬ
		|	Документ.Ссылка КАК Ссылка
		|ИЗ
		|	&ИмяДокумента КАК Документ
		|ГДЕ
		|	Документ.Ссылка В(&МассивДокументов)
		|	И (НЕ Документ.Проведен)";
	
	ТекстОбъединитьВсе =
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
	ИменаДокументов = Новый Массив;
	Для Каждого Документ Из Документы Цикл
		ИмяДокумента = Документ.Метаданные().ПолноеИмя();
		Если ИменаДокументов.Найти(ИмяДокумента) = Неопределено
		   и Метаданные.Документы.Содержит(Метаданные.НайтиПоПолномуИмени(ИмяДокумента)) Тогда	
			ИменаДокументов.Добавить(ИмяДокумента);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "";
	Для Каждого ИмяДокумента Из ИменаДокументов Цикл
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + ТекстОбъединитьВсе;
		КонецЕсли;
		ТекстПодзапроса = СтрЗаменить(ШаблонЗапроса, "&ИмяДокумента", ИмяДокумента);
		ТекстЗапроса = ТекстЗапроса + ТекстПодзапроса;
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", Документы);
	
	Если Не ПустаяСтрока(ТекстЗапроса) Тогда
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет попытку проведения документов.
//
// Параметры:
//	Документы                - Массив - документы, которые необходимо провести.
//
// Возвращаемое значение:
//	Массив - массив структур с полями:
//									Ссылка         - документ, который не удалось провести;
//									ОписаниеОшибки - текст описания ошибки при проведении.
//
Функция ПровестиДокументы(Документы) Экспорт
	
	НепроведенныеДокументы = Новый Массив;
	
	Для Каждого ДокументСсылка Из Документы Цикл
		
		ВыполненоУспешно = Ложь;
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ВыполненоУспешно = Истина;
			Исключение
				ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстСообщенияОбОшибке = НСтр("ru = 'Ошибка при попытке проведения документа: %1'");
				ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, ПредставлениеОшибки);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Проведение документов при печати'"),
					УровеньЖурналаРегистрации.Информация, ДокументОбъект.Метаданные(), ДокументСсылка, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		Иначе
			ПредставлениеОшибки = НСтр("ru = 'Поля документа не заполнены.'");
		КонецЕсли;
		
		Если Не ВыполненоУспешно Тогда
			НепроведенныеДокументы.Добавить(Новый Структура("Ссылка,ОписаниеОшибки", ДокументСсылка, ПредставлениеОшибки));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НепроведенныеДокументы;
	
КонецФункции 

// Проверяет наличие ссылок на объект в базе данных.
//
// Параметры:
//  Ссылка       - ЛюбаяСсылка
//               - Массив значений типа ЛюбаяСсылка
//
//  ИскатьСредиСлужебныхОбъектов - Булево - начальное значение Ложь,
//                 когда установлено Истина, тогда не будет учитываться
//                 исключения поиска ссылок, заданные при разработке конфигурации.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЕстьСсылкиНаОбъект(Знач СсылкаИлиМассивСсылок, Знач ИскатьСредиСлужебныхОбъектов = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(СсылкаИлиМассивСсылок) = Тип("Массив") Тогда
		МассивСсылок = СсылкаИлиМассивСсылок;
	Иначе
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СсылкаИлиМассивСсылок);
	КонецЕсли;
	
	ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
	
	Если НЕ ИскатьСредиСлужебныхОбъектов Тогда
		
		СлужебныеОбъекты = ПолучитьОбщийСписокИсключенийПоискаСсылок();
		Исключения = Новый Массив;
		
		Для каждого ОписаниеСсылки Из ТаблицаСсылок Цикл
			Если СлужебныеОбъекты.Найти(ОписаниеСсылки.Метаданные.ПолноеИмя()) <> Неопределено Тогда
				Исключения.Добавить(ОписаниеСсылки);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаИсключение Из Исключения Цикл
			ТаблицаСсылок.Удалить(СтрокаИсключение);
		КонецЦикла;
	КонецЕсли;
	
	
	Возврат ТаблицаСсылок.Количество() > 0;
	
КонецФункции

// Функция СтрокаТаблицыЗначенийВСтруктуру создает
// структуру со свойствами, как колонки таблицы
// значений передаваемой строки
// и устанавливает этим свойствам значения
// из строки таблицы значений.
// 
// Параметры:
//  СтрокаТаблицыЗначений - СтрокаТаблицыЗначений
//
// ВозвращаемоеЗначение:
//  Структура
//
Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений) Экспорт
	
	Структура = Новый Структура;
	Для каждого Колонка Из СтрокаТаблицыЗначений.Владелец().Колонки Цикл
		Структура.Вставить(Колонка.Имя, СтрокаТаблицыЗначений[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Функция ПреобразоватьИзСтроки(Значение) Экспорт
	Попытка
		Возврат ЗначениеИзСтрокиВнутр(Значение);	
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

#КонецОбласти

#Область РаботаСХранилищемНастроек

// Сохраняет настройку в хранилище общих настроек.
// 
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроекСохранить.Сохранить, 
//   подробнее - см. параметры процедуры ХранилищеСохранить()
// 
Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек = "", Значение,
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено, 
	НужноОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
	
	ХранилищеСохранить(
		ХранилищеОбщихНастроек,
		КлючОбъекта,
		КлючНастроек,
		Значение,
		ОписаниеНастроек,
		ИмяПользователя,
		НужноОбновитьПовторноИспользуемыеЗначения
	);
	
КонецПроцедуры

// Сохраняет настройку в хранилище настроек через его менеджер.
// 
// Параметры:
//   МенеджерХранилища (СтандартноеХранилищеНастроекМенеджер) Хранилище, в котором сохраняется настройка
//   КлючОбъекта       (Строка) Ключ объекта настройки. 
//                              Подробнее см. раздел справки "Настройки, автоматически сохраняемые в системном хранилище".
//   КлючНастроек      (Строка) Ключ сохраняемых настроек.
//   Значение          (*)      Содержит настройки, которые нужно сохранить в хранилище. 
//   ОписаниеНастроек  (ОписаниеНастроек) Содержит информацию об описании настройки.
//   ИмяПользователя   (Строка) Имя пользователя, настройки которого сохраняются.
//                              Если не указано, то сохраняются настройки текущего пользователя.
//   НужноОбновитьПовторноИспользуемыеЗначения (Булево)
// 
Процедура ХранилищеСохранить(МенеджерХранилища, КлючОбъекта, КлючНастроек, Значение,
	ОписаниеНастроек, ИмяПользователя, НужноОбновитьПовторноИспользуемыеЗначения)
	
	Если НЕ ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерХранилища.Сохранить(КлючОбъекта, КлючНастроек, Значение, ОписаниеНастроек, ИмяПользователя);
	
	Если НужноОбновитьПовторноИспользуемыеЗначения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет настройку в хранилище настроек данных форм.
// 
// Параметры:
//   Соответствуют методу ХранилищеСистемныхНастроек.Сохранить, 
//   подробнее - см. параметры процедуры ХранилищеСохранить()
//
Процедура ХранилищеНастроекДанныхФормСохранить(КлючОбъекта, КлючНастроек = "", Значение,
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено, 
	НужноОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
	
	ХранилищеСохранить(
		ХранилищеНастроекДанныхФорм, 
		КлючОбъекта, 
		КлючНастроек, 
		Значение,
		ОписаниеНастроек, 
		ИмяПользователя, 
		НужноОбновитьПовторноИспользуемыеЗначения
	);
	
КонецПроцедуры

// Загружает настройку из хранилища настроек данных форм.
//
// Параметры:
//   Соответствуют методу ХранилищеСистемныхНастроек.Загрузить,
//   подробнее - см. параметры функции ХранилищеЗагрузить()
//
Функция ХранилищеНастроекДанныхФормЗагрузить(КлючОбъекта, КлючНастроек = "", ЗначениеПоУмолчанию = Неопределено, 
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено) Экспорт
	
	Возврат ХранилищеЗагрузить(
		ХранилищеНастроекДанныхФорм, 
		КлючОбъекта, 
		КлючНастроек, 
		ЗначениеПоУмолчанию, 
		ОписаниеНастроек, 
		ИмяПользователя
	);
	
КонецФункции

// Загружает настройку из хранилища общих настроек.
//
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроек.Загрузить,
//   подробнее - см. параметры функции ХранилищеЗагрузить()
//
Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек = "", ЗначениеПоУмолчанию = Неопределено, 
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено) Экспорт
	
	Возврат ХранилищеЗагрузить(
		ХранилищеОбщихНастроек,
		КлючОбъекта,
		КлючНастроек,
		ЗначениеПоУмолчанию,
		ОписаниеНастроек,
		ИмяПользователя
	);
	
КонецФункции

// Загружает настройку из хранилища настроек через его менеджер.
//
// Параметры:
//   МенеджерХранилища   (СтандартноеХранилищеНастроекМенеджер) Хранилище, из которого загружается настройка
//   КлючОбъекта         (Строка) Ключ объекта настройки. 
//                                Подробнее см. раздел справки "Настройки, автоматически сохраняемые в системном хранилище".
//   КлючНастроек        (Строка) Ключ сохраняемых настроек.
//   ЗначениеПоУмолчанию (*)      Значение, которое необходимо подставить если настройки не были загружены.
//   ОписаниеНастроек    (ОписаниеНастроек) Через данный параметр при загрузке можно получить описание настроек.
//   ИмяПользователя     (Строка) Имя пользователя, настройки которого загружается.
//                                Если не указано, то загружается настройки текущего пользователя.
// 
// Возвращаемое значение: 
//   (*) Настройки, загруженные из хранилища. Неопределено, если настройки не найдены. 
// 
Функция ХранилищеЗагрузить(МенеджерХранилища, КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию,
	ОписаниеНастроек, ИмяПользователя)
	
	Результат = Неопределено;
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Результат = МенеджерХранилища.Загрузить(КлючОбъекта, КлючНастроек, ОписаниеНастроек, ИмяПользователя);
	КонецЕсли;
	
	Если (Результат = Неопределено) И (ЗначениеПоУмолчанию <> Неопределено) Тогда
		Результат = ЗначениеПоУмолчанию;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Сохраняет массив пользовательских настроек МассивСтруктур. 
// Может применяться для случаев вызова с клиента.
// 
// Параметры:
//    МассивСтруктур - Массив - массив структур с полями "Объект", "Настройка", "Значение".
//    НужноОбновитьПовторноИспользуемыеЗначения - Булево - требуется обновить повторно используемые значения
//
Процедура ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур,
	НужноОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
	
	Для Каждого Элемент Из МассивСтруктур Цикл
		ХранилищеОбщихНастроек.Сохранить(Элемент.Объект, Элемент.Настройка, Элемент.Значение);
	КонецЦикла;
	
	Если НужноОбновитьПовторноИспользуемыеЗначения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сохранение, чтение и удаление настроек из хранилищ

// Удаляет настройку из хранилища общих настроек.
//
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроек.Удалить,
//   подробнее - см. параметры функции ХранилищеУдалить()
//
Процедура ХранилищеОбщихНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт
	
	ХранилищеУдалить(
		ХранилищеОбщихНастроек,
		КлючОбъекта,
		КлючНастроек,
		ИмяПользователя
	);
	
КонецПроцедуры

// Сохраняет массив пользовательских настроек МассивСтруктур и обновляет повторно
//   используемые значения. Может применяться для случаев вызова с клиента.
// 
// Параметры:
//    МассивСтруктур - Массив - массив структур с полями "Объект", "Настройка", "Значение".
//
Процедура ХранилищеОбщихНастроекСохранитьМассивИОбновитьПовторноИспользуемыеЗначения(МассивСтруктур) Экспорт
	
	ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур, Истина);
	
КонецПроцедуры

// Сохраняет настройку в хранилище общих настроек и обновляет повторно используемые 
//   значения.
// 
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроекСохранить.Сохранить, 
//   подробнее - см. параметры процедуры ХранилищеСохранить()
//
Процедура ХранилищеОбщихНастроекСохранитьИОбновитьПовторноИспользуемыеЗначения(КлючОбъекта, КлючНастроек, Значение) Экспорт
	
	ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Значение,,,Истина);
	
КонецПроцедуры

// Сохраняет настройку в хранилище системных настроек.
// 
// Параметры:
//   Соответствуют методу ХранилищеСистемныхНастроек.Сохранить, 
//   подробнее - см. параметры процедуры ХранилищеСохранить()
// 
Процедура ХранилищеСистемныхНастроекСохранить(КлючОбъекта, КлючНастроек = "", Значение,
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено, 
	НужноОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
	
	ХранилищеСохранить(
		ХранилищеСистемныхНастроек, 
		КлючОбъекта, 
		КлючНастроек, 
		Значение,
		ОписаниеНастроек, 
		ИмяПользователя, 
		НужноОбновитьПовторноИспользуемыеЗначения
	);
	
КонецПроцедуры

// Загружает настройку из хранилища системных настроек.
//
// Параметры:
//   Соответствуют методу ХранилищеСистемныхНастроек.Загрузить,
//   подробнее - см. параметры функции ХранилищеЗагрузить()
//
Функция ХранилищеСистемныхНастроекЗагрузить(КлючОбъекта, КлючНастроек = "", ЗначениеПоУмолчанию = Неопределено, 
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено) Экспорт
	
	Возврат ХранилищеЗагрузить(
		ХранилищеСистемныхНастроек, 
		КлючОбъекта, 
		КлючНастроек, 
		ЗначениеПоУмолчанию, 
		ОписаниеНастроек, 
		ИмяПользователя
	);
	
КонецФункции

// Удаляет настройку из хранилища системных настроек.
//
// Параметры:
//   Соответствуют методу ХранилищеСистемныхНастроек.Удалить,
//   подробнее - см. параметры функции ХранилищеУдалить()
//
Процедура ХранилищеСистемныхНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт
	
	ХранилищеУдалить(
		ХранилищеСистемныхНастроек,
		КлючОбъекта,
		КлючНастроек,
		ИмяПользователя
	);
	
КонецПроцедуры

// Удаляет настройку из хранилища настроек данных форм.
//
// Параметры:
//   Соответствуют методу ХранилищеНастроекДанныхФорм.Удалить,
//   подробнее - см. параметры функции ХранилищеУдалить()
//
Процедура ХранилищеНастроекДанныхФормУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя) Экспорт
	
	ХранилищеУдалить(
		ХранилищеНастроекДанныхФорм,
		КлючОбъекта,
		КлючНастроек,
		ИмяПользователя
	);
	
КонецПроцедуры

// Удаляет настройку из хранилища настроек через его менеджер.
//
// Параметры:
//   МенеджерХранилища (СтандартноеХранилищеНастроекМенеджер) Хранилище, из которого удаляется настройка
//   КлючОбъекта       (Строка)       Ключ объекта настройки. 
//                     (Неопределено) Удаляются настройки для всех объектов.
//   КлючНастроек      (Строка)       Ключ сохраняемых настроек.
//                     (Неопределено) Удаляются настройки со всеми ключами.
//   ИмяПользователя   (Строка)       Имя пользователя, настройки которого загружается.
//                     (Неопределено) Удаляются настройки всех пользователей.
// 
// Возвращаемое значение: 
//   (*) Настройки, загруженные из хранилища. Неопределено, если настройки не найдены. 
// 
Процедура ХранилищеУдалить(МенеджерХранилища, КлючОбъекта, КлючНастроек, ИмяПользователя)
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		МенеджерХранилища.Удалить(КлючОбъекта, КлючНастроек, ИмяПользователя);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция УровеньСобытияПоПредставлению(ПредставлениеУровня)
	Если ПредставлениеУровня = "Информация" Тогда
		Возврат УровеньЖурналаРегистрации.Информация;
	ИначеЕсли ПредставлениеУровня = "Ошибка" Тогда
		Возврат УровеньЖурналаРегистрации.Ошибка;
	ИначеЕсли ПредставлениеУровня = "Предупреждение" Тогда
		Возврат УровеньЖурналаРегистрации.Предупреждение; 
	ИначеЕсли ПредставлениеУровня = "Примечание" Тогда
		Возврат УровеньЖурналаРегистрации.Примечание;
	КонецЕсли;	
КонецФункции

Функция УровниСобытияЖурналаРегистрацииПоСтроке(СписокУровней)
	МассивНазванийУровней = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокУровней);
	МассивУровней = Новый Массив;
	Для Каждого Название Из МассивНазванийУровней Цикл
		МассивУровней.Добавить(УровеньСобытияПоПредставлению(Название));
	КонецЦикла;
	Возврат МассивУровней;
КонецФункции

// Объединяет исключения поиска ссылок.
//
Функция ПолучитьОбщийСписокИсключенийПоискаСсылок() Экспорт
	
	ОбщийМассивИсключенийСсылок = Новый Массив;
	
	ЗаполнитьМассивУникальнымиЗначениями(ОбщийМассивИсключенийСсылок, ИсключенияПоискаСсылок());
	
	Возврат ОбщийМассивИсключенийСсылок;
	
КонецФункции

// Возвращает список имен объектов метаданных, данные которых могут содержать ссылки на различные объекты метаданных,
// но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Возвращаемое значение:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Функция ИсключенияПоискаСсылок() Экспорт
	
	Массив = Новый Массив;
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Массив.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов.ПолноеИмя());
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	Если Метаданные.РегистрыСведений.Найти("НаличиеПрисоединенныхФайлов")<>Неопределено Тогда
		Массив.Добавить(Метаданные.РегистрыСведений["НаличиеПрисоединенныхФайлов"].ПолноеИмя());
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Массив.Добавить(Метаданные.РегистрыСведений.ФайлыВРабочемКаталоге.ПолноеИмя());
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	

	Возврат Массив;
	
КонецФункции

// Заполняет массив-приемник уникальными значениями из массива-источника.
// Если элемент в массиве-приемнике уже существует, то добавления нового элемента не происходит.
//
// Параметры:
//  МассивПриемник – Массив – массив, который заполняется уникальными значениями
//  МассивИсточник – Массив – массив, из которого подбираются элементы в массив-приемник.
// 
Процедура ЗаполнитьМассивУникальнымиЗначениями(МассивПриемник, МассивИсточник) Экспорт
	
	УникальныеЗначения = Новый Соответствие;
	
	Для каждого Значение Из МассивПриемник Цикл
		УникальныеЗначения.Вставить(Значение, Истина);
	КонецЦикла;
	
	Для каждого Значение Из МассивИсточник Цикл
		Если УникальныеЗначения[Значение] = Неопределено Тогда
			МассивПриемник.Добавить(Значение);
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение в виде XML-строки.
// Преобразованы в XML-строку (сериализованы) могут быть только те объекты, 
// для которых в описании указано, что они сериализуются.
//
// Параметры:
// Значение – Произвольный. Значение, которое необходимо сериализовать в XML-строку.
//
// Возвращаемое значение:
// XML-строка представления значения в сериализованном виде.
//
Функция ЗначениеВСтрокуXML(Значение) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

// Возвращает значение, полученное из XML-строки. 
// Получены из XML-строки могут быть только те объекты, 
// для которых в описании указано, что они сериализуются.
//
// Параметры:
// СтрокаXML – строка представления значения в сериализованном виде.
//
// Возвращаемое значение:
// Значение, полученное из переданной XML-строки.
//
Функция ЗначениеИзСтрокиXML(СтрокаXML) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
КонецФункции

Процедура НастроитьКнопкиОтправки(Форма,КоманднаяПанель) Экспорт
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИспользоватьПочтовыйКлиент") Тогда
		НоваяКоманда = Форма.Команды.Добавить("ОтправитьНаПочту");
		НоваяКоманда.Заголовок = "Отправить...";
		НоваяКоманда.Картинка = БиблиотекаКартинок.ОтправитьПолучитьПочту;
		НоваяКоманда.Отображение= ОтображениеКнопки.КартинкаИТекст;
		НоваяКоманда.Действие = "ОтправитьНаПочту";
		КП = Форма.Элементы.Добавить("Отправить",Тип("КнопкаФормы"),КоманднаяПанель);
		КП.Заголовок = "Отправить...";
		КП.Картинка = БиблиотекаКартинок.ОтправитьПолучитьПочту;
		КП.Отображение= ОтображениеКнопки.КартинкаИТекст;
		КП.ИмяКоманды = "ОтправитьНаПочту";
	КонецЕсли;
КонецПроцедуры

// Возвращает таблицу возможных форматов для сохранения табличного документа.
//
// Возвращаемое значение
//  ТаблицаЗначений:
//                   ТипФайлаТабличногоДокумента - ТипФайлаТабличногоДокумента                 - значение в платформе, соответствующее формату;
//                   Ссылка                      - ПеречислениеСсылка.ФорматыСохраненияОтчетов - ссылка на метаданные, где хранится представление;
//                   Представление               - Строка -                                    - представление типа файла (заполняется из перечисления);
//                   Расширение                  - Строка -                                    - тип файла для операционной системы;
//                   Картинка                    - Картинка                                    - значок формата.
//
// Примечание: таблица форматов может быть переопределена в процедуре УправлениеПечатьюПереопределяемый.ПриЗаполненииНастроекФорматовСохранения().
//
Функция НастройкиФорматовСохраненияТабличногоДокумента() Экспорт
	
	ТаблицаФорматов = Новый ТаблицаЗначений;
	
	ТаблицаФорматов.Колонки.Добавить("ТипФайлаТабличногоДокумента", Новый ОписаниеТипов("ТипФайлаТабличногоДокумента"));
	ТаблицаФорматов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ПеречислениеСсылка.ФорматыСохраненияОтчетов"));
	ТаблицаФорматов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаФорматов.Колонки.Добавить("Расширение", Новый ОписаниеТипов("Строка"));
	ТаблицаФорматов.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));

	// Документ PDF (.pdf)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.PDF;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.PDF;
	НовыйФормат.Расширение = "pdf";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматPDF;
	
	// Лист Microsoft Excel 2007 (.xlsx)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.XLSX;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.XLSX;
	НовыйФормат.Расширение = "xlsx";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматExcel2007;

	// Лист Microsoft Excel 97-2003 (.xls)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.XLS;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.XLS;
	НовыйФормат.Расширение = "xls";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматExcel;

	// Электронная таблица OpenDocument (.ods)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.ODS;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.ODS;
	НовыйФормат.Расширение = "ods";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматOpenOfficeCalc;
	
	// Табличный документ (.mxl)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.MXL;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.MXL;
	НовыйФормат.Расширение = "mxl";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматMXL;

	// Документ Word 2007 (.docx)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.DOCX;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.DOCX;
	НовыйФормат.Расширение = "docx";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматWord2007;
	
	// Веб-страница (.html)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.HTML;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.HTML;
	НовыйФормат.Расширение = "html";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматHTML;
	
	// Текстовый документ UTF-8 (.txt)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.TXT;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.TXT;
	НовыйФормат.Расширение = "txt";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматTXT;
	
	// Текстовый документ ANSI (.txt)
	НовыйФормат = ТаблицаФорматов.Добавить();
	НовыйФормат.ТипФайлаТабличногоДокумента = ТипФайлаТабличногоДокумента.ANSITXT;
	НовыйФормат.Ссылка = Перечисления.ФорматыСохраненияОтчетов.ANSITXT;
	НовыйФормат.Расширение = "txt";
	НовыйФормат.Картинка = БиблиотекаКартинок.ФорматTXT;

	Для Каждого ФорматСохранения Из ТаблицаФорматов Цикл
		ФорматСохранения.Представление = Строка(ФорматСохранения.Ссылка);
	КонецЦикла;
		
	Возврат ТаблицаФорматов;
	
КонецФункции

Функция НастройкиФормата(ТипФайла) Экспорт
	ТаблицаФорматов = НастройкиФорматовСохраненияТабличногоДокумента();
	НастройкиФорматаСтрока = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ТипФайла))[0];
	НастройкиФорматаСтруктура = Новый Структура("ТипФайлаТабличногоДокумента,Расширение,Ссылка,Картинка");
	ЗаполнитьЗначенияСвойств(НастройкиФорматаСтруктура,НастройкиФорматаСтрока);
	Возврат НастройкиФорматаСтруктура;
	
КонецФункции

#КонецОбласти

#Область УсловноеОформление
/////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С УСЛОВНЫМ ОФОРМЛЕНИЕМ

Процедура ДобавитьПараметрыОформленияВЭлементУсловногоОформления(ЭлементОформления,СтруктураПараметров) Экспорт
	Для Каждого Элемент Из СтруктураПараметров Цикл
		ДобавитьПараметрОформленияВЭлементУсловногоОформления(ЭлементОформления,Элемент.Ключ,Элемент.Значение);
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьПараметрОформленияВЭлементУсловногоОформления(ЭлементОформления,ПараметрОформления,ЗначениеПараметра) Экспорт
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра(ПараметрОформления,ЗначениеПараметра);
КонецПроцедуры

Процедура ДобавитьОформляемыеПоляВУсловноеОформление(ЭлементОформления,ОформляемыеПоля) Экспорт
	Если ТипЗнч(ОформляемыеПоля)=Тип("Строка") Тогда
		ДобавитьОформляемоеПолеВУсловноеОформление(ЭлементОформления,ОформляемыеПоля);
	ИначеЕсли ТипЗнч(ОформляемыеПоля)=Тип("СписокЗначений") Тогда
		Для Каждого Поле Из ОформляемыеПоля Цикл
			ДобавитьОформляемоеПолеВУсловноеОформление(ЭлементОформления,Поле.Значение);
		КонецЦикла;
	ИначеЕсли ТипЗнч(ОформляемыеПоля)=Тип("Массив") Тогда
		Для Каждого Поле Из ОформляемыеПоля Цикл
			ДобавитьОформляемоеПолеВУсловноеОформление(ЭлементОформления,Поле);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьОформляемоеПолеВУсловноеОформление(ЭлементОформления,ОформляемоеПоле)
	ПолеОформления 							= ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование			= Истина;
	ПолеОформления.Поле						= Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
КонецПроцедуры

Процедура ДобавитьУсловиеИспользованияВУсловноеОформление(ЭлементОформления,Поле,ВидСравнения=Неопределено,Значение=Неопределено) Экспорт
	ОтборЭлемент 							= ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемент.Использование				= Истина;
	ОтборЭлемент.ЛевоеЗначение 				= Новый ПолеКомпоновкиДанных(Поле);
	ОтборЭлемент.ВидСравнения 				= ?(ВидСравнения=Неопределено,ВидСравненияКомпоновкиДанных.Равно,ВидСравнения);
	ОтборЭлемент.ПравоеЗначение 			= Значение;
КонецПроцедуры

Функция ДобавитьЭлементУсловногоОформления(УсловноеОформление) Экспорт
	НовыйЭлементОформления 					= УсловноеОформление.Элементы.Добавить();
	НовыйЭлементОформления.Использование	= Истина;
	Возврат НовыйЭлементОформления;
КонецФункции

Функция ДобавитьЭлементУсловногоОформленияСЗаполнением(УсловноеОформление,Поле,ВидСравнения=Неопределено,Значение=Неопределено,ОформляемоеПоле,СтруктураПараметровОформления) Экспорт
	НовыйЭлементОформления 	= ДобавитьЭлементУсловногоОформления(УсловноеОформление);
	ДобавитьУсловиеИспользованияВУсловноеОформление(НовыйЭлементОформления,Поле,ВидСравнения,Значение);
	ДобавитьОформляемыеПоляВУсловноеОформление(НовыйЭлементОформления,ОформляемоеПоле);
	ДобавитьПараметрыОформленияВЭлементУсловногоОформления(НовыйЭлементОформления,СтруктураПараметровОформления);
	Возврат НовыйЭлементОформления;
КонецФункции

#КонецОбласти

Функция ПорядокВызоваФункцийПереопределяемый() Экспорт
	ТаблицаПереопределения = Новый ТаблицаЗначений;
	ТаблицаПереопределения.Колонки.Добавить("Метод",Новый ОписаниеТипов("Строка"));
	ТаблицаПереопределения.Колонки.Добавить("Обработка",Новый ОписаниеТипов("Строка"));
	ТаблицаПереопределения.Колонки.Добавить("Внешняя",Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаПереопределения;
КонецФункции

Функция ПроверкаНазначенияРолиТолькоПросмотрБазовыеФункции() Экспорт
	ДоступенТолькоПросмотр = Ложь;
	РолиТолькоПросмотр = Новый Массив;
	Для Каждого Роль Из Метаданные.Роли Цикл
		Если Найти(Роль.Имя,"ТолькоПросмотр")<>0 Тогда
			Если РольДоступна(Роль.Имя) Тогда
				ДоступенТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если (НЕ РольДоступна("ТолькоПросмотрБазовыеФункции")) И ДоступенТолькоПросмотр Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция НеобходимоПроверятьОтключениеЗащитыОтОпасныхДействий() Экспорт		
	НеобходимоПроверятьОтключениеЗащитыОтОпасныхДействий = Ложь;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТекущаяВерсия = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения, ".");
	//смотрим, какая ситема используется 8.3 или 8.2
	Если Число(ТекущаяВерсия[0]) = 8 И ((Число(ТекущаяВерсия[1]) = 3 И ((Число(ТекущаяВерсия[2]) = 9 И Число(ТекущаяВерсия[3]) >= 2033) ИЛИ Число(ТекущаяВерсия[2]) > 9)) ИЛИ Число(ТекущаяВерсия[1]) > 3) Тогда //8.3
		НеобходимоПроверятьОтключениеЗащитыОтОпасныхДействий = Истина;
	КонецЕсли;  
	
	Если НеобходимоПроверятьОтключениеЗащитыОтОпасныхДействий И ПользователиИнформационнойБазы.ТекущийПользователь().ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции