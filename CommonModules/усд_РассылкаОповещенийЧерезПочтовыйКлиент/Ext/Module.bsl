///////////////////////////////////////
// почтовый клиент ЗУП

// Функция обрабатывает пользовательское событие - создание нового электронного письма.
// 
// Параметры:
//  ТекущийПользователь          - СправочникСсылка.Пользователи, текущий пользователь
//  СтруктураНовогоПисьма        - Структура с данными нового письма
//    Ключи структуры:
//     Тело                 - строка, текст письма (простой текст, или текст в формате ХТМЛ)
//     Тема                 - Строка
//     ВидТекста            - ПеречислениеСсылка.ВидыТекстовЭлектронныхПисем, вид текста нового письма
//     СписокФайловВложений - СписокЗначений, где значения - структура параметров и знаяений для создания
//                            нового элемента справочника ВложенияЭлектронныхПисем, ключи структуры
//                            соответствуют именам реквизитов справочника ВложенияЭлектронныхПисем
//     УчетнаяЗапись        - СправочникСсылка.УчетнаяЗапись, учетная запись нового письма
//     Кому                 - Список значений, значение - адрес эл.почты, представление - представление получателя
//     Копии                - Список значений, значение - адрес эл.почты, представление - представление получателя
//     СкрытыеКопии         - Список значений, значение - адрес эл.почты, представление - представление получателя
//     Основание            - ДокументСсылка.ЭлектронноеПисьмо, ДокументСсылка.Событие
//     ГруппаУчетнойЗаписи  - элемент справочника ГруппыПисемЭлектроннойПочты, группа писем для нового письма
//     Ответственный        - элемент справочника Пользователи, ответственный для запоолнения в письме
//
//  ПеренестиВложенияИзОснования - Булево, переносить ли аттачи письма из основания (действует для копирования и пересылки)
//  Копирование                  - булево, признак копирования электронного письма
//  ТекущийЭлементХТМЛ           - Булево, устанавливать в качестве активного элемента в открытой форме письма поле ХТМЛ(Текстового) документа
//  Дополнительно                - Строка, "Ответ", "Переадресация", вид действия при создании нового письма
//  ФормаВладелец                - Форма, владелец для открываемой формы нового письма
//  ПодписьПодТекстом            - Булево, устанавливать подпись в письме "после" или "перед" текстом.
//  ОткрыватьПисьмо              - Булево, открывать форму письма или записывать письмо и не открывать форму
//
//  ВозвращаемреЗначение
//   СтруктураПараметров - Структура
//     Ключи структуры:
//     Письмо       - ДокументОбъект.ЭлектронноеПисьмо, новое электронное письмо
//     Форма        - Форма, форма нового электронного письма
//     ПисьмоСсылка - ДокументСсылка.ЭлектронноеПисьмо, новое электронное письмо
//
Функция НаписатьПисьмоСУчетнойЗаписи(УчетнаяЗапись,ТекущийПользователь, СтруктураНовогоПисьма = Неопределено, ПодписьПодТекстом = Ложь,Дополнительно=Неопределено,ПеренестиВложенияИзОснования=Ложь,Копирование=Ложь) Экспорт

	Перем Тема;
	Перем Тело;
	Перем ВидТекста;
	Перем СписокФайловВложений;
	Перем ГруппаУчетнойЗаписи;
	Перем Кому;
	Перем Копии;
	Перем СкрытыеКопии;
	Перем Основание;
	Перем Ответственный;
	Перем Предмет;
	
	Если СтруктураНовогоПисьма = Неопределено Тогда
		СтруктураНовогоПисьма = Новый Структура;
	КонецЕсли; 
	
	Попытка
		Письмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	Письмо.Дата                             = ТекущаяДата();
	Письмо.УчетнаяЗапись                    = УчетнаяЗапись;
	Письмо.ОтправительИмя                   = УчетнаяЗапись.Наименование;
	Письмо.ОтправительАдресЭлектроннойПочты = УчетнаяЗапись.АдресЭлектроннойПочты;
	Письмо.ОтправительПредставление         = УчетнаяЗапись.Наименование + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + ">";
	
	СтруктураНовогоПисьма.Свойство("Тело", Тело);
	Если ЗначениеЗаполнено(Тело) Тогда
		Письмо.ТекстПисьма = Тело;
	КонецЕсли; 
	
	СтруктураНовогоПисьма.Свойство("Тема", Тема);
	Если ЗначениеЗаполнено(Тема) Тогда
		Письмо.Тема = Тема;
	КонецЕсли; 
	
	СтруктураНовогоПисьма.Свойство("СписокФайловВложений", СписокФайловВложений);
	
	ОписаниеТиповПредмета = Новый ОписаниеТипов("Строка,СправочникСсылка.ФизическиеЛица");
	
	СтруктураНовогоПисьма.Свойство("Основание", Основание);
	Если ЗначениеЗаполнено(Основание) Тогда
		Письмо.Основание = Основание;
		Если Письмо.УчетнаяЗапись.ИспользоватьКлассификациюПисемПоПредметам Тогда
			СтруктураНовогоПисьма.Свойство("Предмет", Предмет);
			Если ЗначениеЗаполнено(Предмет) И ОписаниеТиповПредмета.СодержитТип(ТипЗнч(Предмет)) Тогда
				Письмо.Предмет = Предмет;
			Иначе
				Если Письмо.УчетнаяЗапись.ИспользоватьКлассификациюПисемПоПредметам И ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
					Письмо.Предмет = Основание.Предмет;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание)
		И УчетнаяЗапись.ФорматПисьмаДляОтветовИПереадресацийБратьИзИсходного
		И ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
		ВидТекста = Основание.ВидТекстаПисьма;
	Иначе
		СтруктураНовогоПисьма.Свойство("ВидТекста", ВидТекста);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидТекста) Тогда
		Письмо.ВидТекстаПисьма = УчетнаяЗапись.ФорматТекстаПисьмаПоУмолчанию;
		Если НЕ ЗначениеЗаполнено(Письмо.ВидТекстаПисьма) Тогда
			Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML;
		КонецЕсли;
	Иначе
		Письмо.ВидТекстаПисьма = ВидТекста;
	КонецЕсли;
	
	Если Дополнительно = "Ответ" Тогда
		Письмо.Ответ         = Истина;
	ИначеЕсли Дополнительно = "Переадресация" Тогда
		Письмо.Переадресация = Истина;
	КонецЕсли; 
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо") ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда
			
			Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
				Тело = "<HTML><HEAD>
				|<META http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8" + """" + ">
				|<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
				|<BODY>" + СтрЗаменить(Основание.СодержаниеСобытия, Символы.ПС, "<BR>") + "</BODY></HTML>";
			Иначе
				Тело = Основание.СодержаниеСобытия;
			КонецЕсли
			
		Иначе
			
			Тело = Основание.ТекстПисьма;
			
			Если ((Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками)
				И Основание.ВидТекстаПисьма <> Перечисления.ВидыТекстовЭлектронныхПисем.HTML И Основание.ВидТекстаПисьма <> Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками)
				ИЛИ ((Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Прочее)
				И Основание.ВидТекстаПисьма <> Перечисления.ВидыТекстовЭлектронныхПисем.Текст И Основание.ВидТекстаПисьма <> Перечисления.ВидыТекстовЭлектронныхПисем.Прочее) Тогда
				
				Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
					
					Тело = "<HTML><HEAD>
					|<META http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8" + """" + ">
					|<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
					|<BODY>" + СтрЗаменить(Тело, Символы.ПС, "<BR>") + "</BODY></HTML>";
					
				Иначе
					
					Тело = ПреобразоватьТекстИзХТМЛФорматаВПростой(Тело);
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		Письмо.ТекстПисьма = Тело;
		
	КонецЕсли;
	
	СтруктураНовогоПисьма.Свойство("ГруппаУчетнойЗаписи", ГруппаУчетнойЗаписи);
	Если ЗначениеЗаполнено(ГруппаУчетнойЗаписи) И ГруппаУчетнойЗаписи.Владелец = УчетнаяЗапись Тогда
		Письмо.ГруппаУчетнойЗаписи = ГруппаУчетнойЗаписи;
	Иначе
		Письмо.УказатьГруппуПоУмолчанию();
	КонецЕсли; 
	
	СтруктураНовогоПисьма.Свойство("Ответственный", Ответственный);
	Если ЗначениеЗаполнено(Ответственный) Тогда
		Письмо.Ответственный = Ответственный;
	Иначе
		Письмо.Ответственный = ТекущийПользователь;
	КонецЕсли; 
	
	СтруктураНовогоПисьма.Свойство("Кому", Кому);
	Если ТипЗнч(Кому) = Тип("СписокЗначений") Тогда
		Для каждого ЭлементСписка Из Кому Цикл
			Если ПустаяСтрока(ЭлементСписка.Значение) Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТЧ = Письмо.КомуТЧ.Добавить();
			СтрокаТЧ.АдресЭлектроннойПочты = ЭлементСписка.Значение;
			СтрокаТЧ.Представление         = ЭлементСписка.Представление;
			Если НЕ ПустаяСтрока(Письмо.Кому) Тогда
				Письмо.Кому = Письмо.Кому + ", ";
			КонецЕсли;
			Если ПустаяСтрока(ЭлементСписка.Представление) Тогда
				Письмо.Кому = Письмо.Кому + ЭлементСписка.Значение;
			Иначе
				Письмо.Кому = Письмо.Кому + ЭлементСписка.Представление + " <" + ЭлементСписка.Значение + ">";
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	СтруктураНовогоПисьма.Свойство("Копии", Копии);
	Если ТипЗнч(Копии) = Тип("СписокЗначений") Тогда
		Для каждого ЭлементСписка Из Копии Цикл
			Если ПустаяСтрока(ЭлементСписка.Значение) Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТЧ = Письмо.КопииТЧ.Добавить();
			СтрокаТЧ.АдресЭлектроннойПочты = ЭлементСписка.Значение;
			СтрокаТЧ.Представление         = ЭлементСписка.Представление;
			Если НЕ ПустаяСтрока(Письмо.Копии) Тогда
				Письмо.Копии = Письмо.Копии + ", ";
			КонецЕсли;
			Если ПустаяСтрока(ЭлементСписка.Представление) Тогда
				Письмо.Копии = Письмо.Копии + ЭлементСписка.Значение;
			Иначе
				Письмо.Копии = Письмо.Копии + ЭлементСписка.Представление + " <" + ЭлементСписка.Значение + ">";
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	СтруктураНовогоПисьма.Свойство("СкрытыеКопии", СкрытыеКопии);
	Если ТипЗнч(СкрытыеКопии) = Тип("СписокЗначений") Тогда
		Для каждого ЭлементСписка Из СкрытыеКопии Цикл
			Если ПустаяСтрока(ЭлементСписка.Значение) Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТЧ = Письмо.СкрытыеКопииТЧ.Добавить();
			СтрокаТЧ.АдресЭлектроннойПочты = ЭлементСписка.Значение;
			СтрокаТЧ.Представление         = ЭлементСписка.Представление;
			Если НЕ ПустаяСтрока(Письмо.СкрытыеКопии) Тогда
				Письмо.СкрытыеКопии = Письмо.СкрытыеКопии + ", ";
			КонецЕсли;
			Если ПустаяСтрока(ЭлементСписка.Представление) Тогда
				Письмо.СкрытыеКопии = Письмо.СкрытыеКопии + ЭлементСписка.Значение;
			Иначе
				Письмо.СкрытыеКопии = Письмо.СкрытыеКопии + ЭлементСписка.Представление + " <" + ЭлементСписка.Значение + ">";
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	// Проставим при необходимости подпись
	Если НЕ Копирование И ((УчетнаяЗапись.ДобавлятьПодписьКИсходящимПисьмам И Дополнительно = Неопределено)
		ИЛИ ((Дополнительно = "Ответ" ИЛИ Дополнительно = "Переадресация") И УчетнаяЗапись.ДобавлятьПодписьКОтветамИПересылкам = Истина)) Тогда
		
		Отказ = Ложь;
		
		НовыйКом = Новый COMОбъект("HtmlFile");
		НовыйКом.open("text/html");
		НовыйКом.write(УчетнаяЗапись.ТекстПодписи);
		НовыйКом.close();
		
		Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			
			ТекстПисьма = Письмо.ТекстПисьма;
			
			Если ПустаяСтрока(ТекстПисьма) Тогда
				ТекстПисьма = "<HTML><HEAD>
				|<META http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8" + """" + ">
				|<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
				|<BODY></BODY></HTML>";
			Иначе
				Если Найти(ТекстПисьма, "<BODY") = 0 тогда
					ТекстПисьма = "<HTML><HEAD>
					|<META http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8" + """" + ">
					|<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
					|<BODY>" + СтрЗаменить(ТекстПисьма, Символы.ПС, "<BR>") + "</BODY></HTML>";
				КонецЕсли; 
			КонецЕсли; 
			
			НачалоТела = Найти(ТекстПисьма, "<BODY");
			КонецНачалаТела = 0;
			а = НачалоТела;
			Пока 1 = 1 Цикл
				Если Сред(ТекстПисьма, а, 1) = ">" Тогда
					КонецНачалаТела = а;
					Прервать;
				Иначе
					а = а + 1;
				КонецЕсли; 
			КонецЦикла;
			
			Если НачалоТела = 0 ИЛИ КонецНачалаТела = 0 Тогда
				Отказ = Истина;
			КонецЕсли;
			
			ТегBODY = НовыйКом.all.Tags("BODY");
			Если ТегBODY.length > 0 Тогда
				ХТМЛПодписи = ТегBODY.item(0).innerHTML;
				Если ПустаяСтрока(ХТМЛПодписи) Тогда
					Отказ = Истина;
				Иначе
					ХТМЛПодписи = СтрЗаменить(ХТМЛПодписи, "<PRE>", "");
					ХТМЛПодписи = СтрЗаменить(ХТМЛПодписи, "</PRE>", "<BR>");
				КонецЕсли;
			Иначе
				Отказ = Истина;
			КонецЕсли; 
			
			Если НЕ Отказ Тогда
				Если ПодписьПодТекстом Тогда
					НачалоКонцаТела = Найти(ТекстПисьма, "</BODY");
					Если НачалоКонцаТела > 0 Тогда
						НовыйТекстПисьма = Лев(ТекстПисьма, НачалоКонцаТела - 1);
						НовыйТекстПисьма  = НовыйТекстПисьма + "<BR>" + ХТМЛПодписи + Сред(ТекстПисьма, НачалоКонцаТела);
						Письмо.ТекстПисьма = НовыйТекстПисьма;
					КонецЕсли; 
				Иначе
					НовыйТекстПисьма = Лев(ТекстПисьма, КонецНачалаТела);
					НовыйТекстПисьма  = НовыйТекстПисьма + "<P>&nbsp;</P>" + ХТМЛПодписи + Сред(ТекстПисьма, (КонецНачалаТела + 1));
					Письмо.ТекстПисьма = НовыйТекстПисьма;
				КонецЕсли; 
			КонецЕсли; 
			
		Иначе
			
			ТекстПодписи = Новый ТекстовыйДокумент;
			ТекстПодписи.УстановитьТекст(СтрЗаменить(НовыйКом.all.item(0).innerText, Символ(13), ""));
			
			Если ТекстПодписи.КоличествоСтрок() > 0 Тогда
				
				НовыйТекстПисьма = Новый ТекстовыйДокумент;
				НовыйТекстПисьма.УстановитьТекст(Письмо.ТекстПисьма);
				
				Если НовыйТекстПисьма.КоличествоСтрок() > 0 Тогда
					ПерваяСтрока = НовыйТекстПисьма.ПолучитьСтроку(1);
					Если ПустаяСтрока(ПерваяСтрока) Тогда
						НовыйТекстПисьма.УдалитьСтроку(1);
					КонецЕсли; 
				КонецЕсли; 
				
				Для а = 1 По ТекстПодписи.КоличествоСтрок() Цикл
					Если ПодписьПодТекстом Тогда
						НовыйТекстПисьма.ДобавитьСтроку(ТекстПодписи.ПолучитьСтроку(а));
					Иначе
						НовыйТекстПисьма.ВставитьСтроку(а, ТекстПодписи.ПолучитьСтроку(а));
					КонецЕсли;
				КонецЦикла;
				
				НовыйТекстПисьма.ВставитьСтроку(1, "");
				Письмо.ТекстПисьма = НовыйТекстПисьма.ПолучитьТекст();
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Попытка
		Письмо.Записать();
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
	Если ТипЗнч(СписокФайловВложений) = Тип("СписокЗначений") И СписокФайловВложений.Количество() > 0 Тогда
		
		ЗначениеСтруктурыВозврата = Неопределено;
		
		Для каждого ЭлементСписка Из СписокФайловВложений Цикл
			
			НовоеВложение = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
			НовоеВложение.Объект = Письмо.Ссылка;
			
			ЭлементСписка.Значение.Свойство("Хранилище", ЗначениеСтруктурыВозврата);
			Если ЗначениеСтруктурыВозврата = Неопределено Тогда
				Продолжить;
			Иначе
				Если ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("ДвоичныеДанные") Тогда
					НовоеВложение.Хранилище = Новый ХранилищеЗначения(ЗначениеСтруктурыВозврата, Новый СжатиеДанных);
				ИначеЕсли ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("ХранилищеЗначения") Тогда
					НовоеВложение.Хранилище = ЗначениеСтруктурыВозврата;
				ИначеЕсли ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("Строка") Тогда
					НовоеВложение.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ЗначениеСтруктурыВозврата), Новый СжатиеДанных);
				Иначе
					Продолжить;
				КонецЕсли; 
				ЗначениеСтруктурыВозврата = Неопределено;
			КонецЕсли; 
			
			ЭлементСписка.Значение.Свойство("ИмяФайла", ЗначениеСтруктурыВозврата);
			Если ЗначениеСтруктурыВозврата = Неопределено Тогда
				НовоеВложение.ИмяФайла = "";
			Иначе
				НовоеВложение.ИмяФайла = ЗначениеСтруктурыВозврата;
				ЗначениеСтруктурыВозврата = Неопределено;
			КонецЕсли; 
			
			ЭлементСписка.Значение.Свойство("Наименование", ЗначениеСтруктурыВозврата);
			Если ЗначениеСтруктурыВозврата = Неопределено Тогда
				НовоеВложение.Наименование = "";
			Иначе
				НовоеВложение.Наименование = ЗначениеСтруктурыВозврата;
				ЗначениеСтруктурыВозврата = Неопределено;
			КонецЕсли; 
			
			Попытка
				НовоеВложение.Записать();
			Исключение
				Возврат ОписаниеОшибки();
			КонецПопытки;
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	СтруктураВозврата = Новый Структура("Письмо,  ПисьмоСсылка", Письмо, Письмо.Ссылка);
		
	
	Возврат СтруктураВозврата;

КонецФункции

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПреобразоватьТекстИзХТМЛФорматаВПростой(ТекстВФорматеХТМЛ) Экспорт

	НовыйHTMLДокумент = Новый COMОбъект("HtmlFile");
	НовыйHTMLДокумент.open("text/html");
	НовыйHTMLДокумент.write(ТекстВФорматеХТМЛ);
	НовыйHTMLДокумент.close();
	
	НайтиИДобавитьПрефиксВТеги(НовыйHTMLДокумент.all, "BLOCKQUOTE");
	
	Возврат СтрЗаменить(НовыйHTMLДокумент.all.item(0).innerText, Символ(13), "");

КонецФункции

Процедура НайтиИДобавитьПрефиксВТеги(Структура, ИмяТега)

	а = 0;
	НайденоОтступов = 0;
	Пока а < Структура.length Цикл
		Если Структура.item(а).nodeName = ИмяТега Тогда
			НайденоОтступов = НайденоОтступов + 1;
			НайтиИДобавитьПрефиксВТеги(Структура.item(а).all, ИмяТега);
			ТекстДляЗамены = Структура.item(а).innerText;
			Структура.item(а).innerText = "> " + СтрЗаменить(ТекстДляЗамены, Символы.ПС, (Символы.ПС + "> "));
		КонецЕсли; 
		а = а + 1;
	КонецЦикла; 
	
КонецПроцедуры

// Процедура роизводит отправку пачки электронных писем
//
// Параметры
//  МассивПисем - массив, электронные письма к отправке
//  СоответствиеТекстовЭлектронныхПисем, соответствие, требуется для передачи в качестве параметра в процедуру отправки
//  ТекущийПользователь - СправочникСсылка.Пользователи
//
Процедура ОтправитьПисьма(УчетнаяЗапись,Письма, СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, Знач ПоказыватьОкноВыполнения = Истина, ТекстОшибок = "",Массивом=Ложь) Экспорт

	Если ТипЗнч(Письма) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли; 
	
	ИзмененныйСоставПисем = Новый Соответствие;
	МассивПисем = Новый Массив;
	Для каждого Письмо Из Письма Цикл
	
		Если Письмо.Ключ.СтатусПисьма = Перечисления.СтатусыПисем.Полученное ИЛИ Письмо.Ключ.СтатусПисьма = Перечисления.СтатусыПисем.Отправленное Тогда
			Сообщить("" + СокрЛП(Письмо.Ключ) + " исключено из списка отправки, отправлять можно только сохраненные или исходящие письма.");
			Продолжить;;
		КонецЕсли;
		
		Если Письмо.Ключ.ПометкаУдаления Тогда
			Сообщить("" + СокрЛП(Письмо.Ключ) + " исключено из списка отправки, письмо помечено на удаление.");
			Продолжить;
		КонецЕсли;
		
		Если Письмо.Ключ.КомуТЧ.Количество() = 0 Тогда
			Сообщить("" + СокрЛП(Письмо.Ключ) + " исключено из списка отправки, не указан ни один получатель.");
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Письмо.Ключ.УчетнаяЗапись) Тогда
			Сообщить("" + СокрЛП(Письмо.Ключ) + " исключено из списка отправки, не указана учетная запись.");
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Письмо.Значение) <> Тип("ДокументОбъект.ЭлектронноеПисьмо") Тогда
			ОбъектПисьмо = Письмо.Ключ.ПолучитьОбъект();
			
			ОбъектПисьмо.СтатусПисьма = Перечисления.СтатусыПисем.Исходящее;
			Если Не ЗначениеЗаполнено(ОбъектПисьмо.Ответственный) Тогда
				ОбъектПисьмо.Ответственный = ТекущийПользователь;
			КонецЕсли; 
		
			Попытка
				ОбъектПисьмо.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(),, (СокрЛП(Письмо.Ключ) + " исключено из списка отправки."));
				Продолжить;
			КонецПопытки;
		Иначе
			Письмо.Значение.СтатусПисьма = Перечисления.СтатусыПисем.Исходящее;
			Если Не ЗначениеЗаполнено(Письмо.Значение.Ответственный) Тогда
				Письмо.Значение.Ответственный = ТекущийПользователь;
			КонецЕсли; 
		КонецЕсли; 
		
		ИзмененныйСоставПисем.Вставить(Письмо.Ключ, Письмо.Значение);
		МассивПисем.Добавить(Письмо.Ключ);
	КонецЦикла;
	
	Если ИзмененныйСоставПисем.Количество() > 0 Тогда
		ПолучениеОтправкаПисем(УчетнаяЗапись,СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, ?(Массивом,МассивПисем,ИзмененныйСоставПисем), 
			Истина, , ПоказыватьОкноВыполнения);
	КонецЕсли; 

КонецПроцедуры

// Процедура осуществляет транспорт писем
//
// Параметры
//  СоответствиеТекстовЭлектронныхПисем - Соответствие, текстов писем и ДокументСсылка.ЭлектронноеПисьмо
//  ТекущийПользователь - СправочникСсылка.Пользователи, Текущий пользователь системы
//  МассивУчетныхЗаписей - Массив, учетные записи по которым необходимо осуществить транспорт
//  МассивПисем - Массив, документы ЭлектронноеПисьмо, которые необходимо отправить
//  Отправить - Булево, действие "отправить письма"
//  Получить - Булево, действие "получить письма"
//  ПоказыватьОкноВыполнения - Булево, показывать окно выполнения получения/отправки писем
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ПолучениеОтправкаПисем(УчетнаяЗапись,СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, МассивПисем = Неопределено, Отправить = Ложь, Получить = Ложь, ПоказыватьОкноВыполнения = Истина) Экспорт

	Перем мРазделительАдресов;
	
	мРазделительАдресов = ",";
	
	ТекстОшибок = "";
	СписокДоступныхУчетныхЗаписей = Новый Массив;
	СписокДоступныхУчетныхЗаписей.Добавить(УчетнаяЗапись);
	// Получим сответствие всех учетных записей, по которым надо производить действия отправки и получения
	СоответствиеУчетныхЗаписейВсего = Новый Соответствие;
		
	Если Отправить Тогда
		
		Запрос = Новый Запрос;
		
			
			Запрос.УстановитьПараметр("СписокВладельцев", СписокДоступныхУчетныхЗаписей);
			Запрос.УстановитьПараметр("СписокПисем", МассивПисем);
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЭлектронноеПисьмо.УчетнаяЗапись КАК УчетнаяЗапись,
			|	ЭлектронноеПисьмо.Ссылка        КАК Письмо
			|ИЗ
			|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
			|
			|ГДЕ
			|	ЭлектронноеПисьмо.Ссылка В (&СписокПисем)
			|	И
			|	ЭлектронноеПисьмо.УчетнаяЗапись В (&СписокВладельцев)
			|
			|ИТОГИ ПО
			|	УчетнаяЗапись
			|";
			
			ДеревоУчетныхЗаписейИПисем = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			

		
		МассивУчетныхЗаписейОтправка = ДеревоУчетныхЗаписейИПисем.Строки.ВыгрузитьКолонку("УчетнаяЗапись");
		Для каждого ЭлементМассива Из МассивУчетныхЗаписейОтправка Цикл
			СоответствиеУчетныхЗаписейВсего.Вставить(ЭлементМассива, ЭлементМассива);
		КонецЦикла;
		
	КонецЕсли; 
	

	// Определим те учетные записи, которые были заявлены во входящих параметрах
	// и проверим их на возможность отправки, что бы пользователю было понятно
	// почему некоторые письма не отправились
	
	СоответствиеЗаявленныхУчетныхЗаписей = Новый Соответствие;
	
	Если ТипЗнч(МассивПисем) = Тип("Массив") Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Исходящее", Перечисления.СтатусыПисем.Исходящее);
		Запрос.УстановитьПараметр("СписокПисем", МассивПисем);
		Запрос.УстановитьПараметр("СписокВладельцев", СписокДоступныхУчетныхЗаписей);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмо.УчетнаяЗапись КАК УчетнаяЗапись
		|ИЗ
		|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
		|
		|ГДЕ
		|	ЭлектронноеПисьмо.Ссылка В (&СписокПисем)
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеЗаявленныхУчетныхЗаписей.Вставить(Выборка.УчетнаяЗапись, Выборка.УчетнаяЗапись);
		КонецЦикла; 
	
	КонецЕсли;
	
	Если СоответствиеУчетныхЗаписейВсего.Количество() > 0 Тогда
		
		Для каждого ЭлементСоответствия Из СоответствиеУчетныхЗаписейВсего Цикл
			
			УчетнаяЗапись = ЭлементСоответствия.Значение;
			
			// Пробуем подключиться
			Профиль = Новый ИнтернетПочтовыйПрофиль;
			
			Профиль.АдресСервераPOP3 = УчетнаяЗапись.POP3Сервер;
			Профиль.АдресСервераSMTP = УчетнаяЗапись.SMTPСервер;
			Если УчетнаяЗапись.ВремяОжиданияСервера > 0 Тогда
				Профиль.ВремяОжидания = УчетнаяЗапись.ВремяОжиданияСервера;
			КонецЕсли; 
			Профиль.Пароль           = УчетнаяЗапись.Пароль;
			Профиль.Пользователь     = УчетнаяЗапись.Логин;
			Профиль.ПортPOP3         = УчетнаяЗапись.ПортPOP3;
			Профиль.ПортSMTP         = УчетнаяЗапись.ПортSMTP;
			
			Если УчетнаяЗапись.ТребуетсяSMTPАутентификация Тогда
				Профиль.ПарольSMTP       = УчетнаяЗапись.ПарольSMTP;
				Профиль.ПользовательSMTP = УчетнаяЗапись.ЛогинSMTP;
				Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
			Иначе
				Профиль.ПарольSMTP       = УчетнаяЗапись.Пароль;
				Профиль.ПользовательSMTP = УчетнаяЗапись.Логин;
			КонецЕсли; 
			
			ИнтернетПочта = Новый ИнтернетПочта;
			
			Попытка
				ИнтернетПочта.Подключиться(Профиль);
			Исключение
				Если ПоказыватьОкноВыполнения Тогда
					ТекстОшибок = Символы.ПС + ТекстОшибок + (Строка(УчетнаяЗапись) + ". " + ОписаниеОшибки());
				КонецЕсли; 
				Продолжить;
			КонецПопытки;
			
			// Сначала проверим отправку
			Если Отправить Тогда
			
				
				Если ТипЗнч(ДеревоУчетныхЗаписейИПисем) = Тип("ДеревоЗначений") Тогда
				
					СтрокаДереваУчетнойЗаписи = ДеревоУчетныхЗаписейИПисем.Строки.Найти(УчетнаяЗапись, "УчетнаяЗапись");
					
					Если СтрокаДереваУчетнойЗаписи <> Неопределено Тогда
					
						
						Для каждого СтрокаПисьма Из СтрокаДереваУчетнойЗаписи.Строки Цикл
						
							ПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
							
							Письмо = СтрокаПисьма.Письмо;
							
							// Вложения
							Запрос = Новый Запрос;
							
							Запрос.УстановитьПараметр("ВыбОбъект", Письмо);
							Запрос.УстановитьПараметр("ПустаяСтрока", "");
							
							Запрос.Текст = "
							|ВЫБРАТЬ РАЗРЕШЕННЫЕ
							|	ВложенияЭлектронныхПисем.Ссылка       КАК Ссылка,
							|	ВложенияЭлектронныхПисем.Наименование КАК Наименование,
							|	ВложенияЭлектронныхПисем.ИмяФайла     КАК ИмяФайла,
							|	ВложенияЭлектронныхПисем.Хранилище    КАК ХранилищеЗначения
							|ИЗ
							|	Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
							|ГДЕ
							|	ВложенияЭлектронныхПисем.Объект = &ВыбОбъект
							|	И
							|	ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма = &ПустаяСтрока
							|";
							
							Выборка = Запрос.Выполнить().Выбрать();
							Пока Выборка.Следующий() Цикл
								ИмяФайла = "";
								Если НЕ ПустаяСтрока(Выборка.ИмяФайла) Тогда
									ИмяФайла = Выборка.ИмяФайла;
								ИначеЕсли НЕ ПустаяСтрока(Выборка.Наименование) Тогда
									ИмяФайла = Выборка.Наименование;
								КонецЕсли;
								ДвоичныеДанные = Выборка.ХранилищеЗначения.Получить();
								Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
									ПочтовоеСообщение.Вложения.Добавить(Выборка.ХранилищеЗначения.Получить(), ИмяФайла);
								КонецЕсли; 
							КонецЦикла; 
							
							// Общие свойства письма
							ПочтовоеСообщение.ИмяОтправителя  = Письмо.ОтправительИмя;
							ПочтовоеСообщение.Отправитель     = Письмо.ОтправительАдресЭлектроннойПочты;
							ПочтовоеСообщение.Тема            = Письмо.Тема;
							
							Для каждого СтрокаТЧ Из Письмо.КомуТЧ Цикл
								ПочтовоеСообщение.Получатели.Добавить(СтрокаТЧ.АдресЭлектроннойПочты);
							КонецЦикла; 
							Для каждого СтрокаТЧ Из Письмо.КопииТЧ Цикл
								ПочтовоеСообщение.Копии.Добавить(СтрокаТЧ.АдресЭлектроннойПочты);
							КонецЦикла; 
							Для каждого СтрокаТЧ Из Письмо.СкрытыеКопииТЧ Цикл
								ПочтовоеСообщение.СлепыеКопии.Добавить(СтрокаТЧ.АдресЭлектроннойПочты);
							КонецЦикла;
							
							ТекстПисьмаИД = Письмо.ТекстПисьма;
							Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
								ПочтовоеСообщение.Тексты.Добавить(УправлениеЭлектроннойПочтой.ПропарситьHTMLИДВ_ТекстКартинки(СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, Письмо, ТекстПисьмаИД), ТипТекстаПочтовогоСообщения.HTML);
							ИначеЕсли Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML Тогда
								ПочтовоеСообщение.Тексты.Добавить(ТекстПисьмаИД, ТипТекстаПочтовогоСообщения.HTML);
							Иначе
								ПочтовоеСообщение.Тексты.Добавить(ТекстПисьмаИД, ТипТекстаПочтовогоСообщения.ПростойТекст);
							КонецЕсли; 
							
							Попытка
								
								ИнтернетПочта.Послать(ПочтовоеСообщение);
								ОбъектПисьмо = Письмо.ПолучитьОбъект();
								ОбъектПисьмо.СтатусПисьма    = Перечисления.СтатусыПисем.Отправленное;
								ОбъектПисьмо.ДатаТранспорта  = ТекущаяДата();
								ОбъектПисьмо.ДатаОтправления = ТекущаяДата();
								
								ОчиститьПисьмо(ПочтовоеСообщение);
							
								ОбъектПисьмо.ПочтовоеСообщение = Новый ХранилищеЗначения(ПочтовоеСообщение, Новый СжатиеДанных());
								
								Попытка
									ОбъектПисьмо.Записать();
								Исключение
								КонецПопытки;
								
							Исключение
								
								Если ПоказыватьОкноВыполнения Тогда
									ТекстОшибок = Символы.ПС + ТекстОшибок + (Строка(УчетнаяЗапись) + ". " + ОписаниеОшибки());
								КонецЕсли; 
								Продолжить;
								
							КонецПопытки;
							
						КонецЦикла; 
					
					КонецЕсли; 
				
				КонецЕсли; 
			
			КонецЕсли;
			
			ИнтернетПочта.Отключиться();
			
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Если ТекстОшибок <>"" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибок);
	КонецЕсли;
КонецПроцедуры

// Функция очищает от данных объект ИнтернетПисьмо, перед его сохранением в документе ЭлектронноеПисьмо
//
// Параметры
//  Письмо - ИнтернетПисьмо
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ОчиститьПисьмо(Письмо)

	Письмо.Вложения.Очистить();
	Письмо.Копии.Очистить();
	Письмо.Получатели.Очистить();
	Письмо.СлепыеКопии.Очистить();

КонецПроцедуры

Функция СформироватьВложение(Документ,ВидДокументов,ИмяФайла,ТабличныйДокумент,Расширение) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	усд_НастройкаРежимовРассылкиСодержимогоДокументаПоЭлектроннойПочтеДляСогласования.РежимРассылки,
		|	усд_НастройкаРежимовРассылкиСодержимогоДокументаПоЭлектроннойПочтеДляСогласования.Формат
		|ИЗ
		|	РегистрСведений.усд_НастройкаРежимовРассылкиСодержимогоДокументаПоЭлектроннойПочтеДляСогласования КАК усд_НастройкаРежимовРассылкиСодержимогоДокументаПоЭлектроннойПочтеДляСогласования
		|ГДЕ
		|	усд_НастройкаРежимовРассылкиСодержимогоДокументаПоЭлектроннойПочтеДляСогласования.ВидДокументов = &ВидДокументов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	усд_НастройкаРежимовРассылкиСодержимогоДокументаПоЭлектроннойПочтеДляСогласования.РежимРассылки,
		|	усд_НастройкаРежимовРассылкиСодержимогоДокументаПоЭлектроннойПочтеДляСогласования.Формат
		|ИЗ
		|	РегистрСведений.усд_НастройкаРежимовРассылкиСодержимогоДокументаПоЭлектроннойПочтеДляСогласования КАК усд_НастройкаРежимовРассылкиСодержимогоДокументаПоЭлектроннойПочтеДляСогласования
		|ГДЕ
		|	усд_НастройкаРежимовРассылкиСодержимогоДокументаПоЭлектроннойПочтеДляСогласования.ВидДокументов = ЗНАЧЕНИЕ(Справочник.фин_ВидыДокументов.ПустаяСсылка)";

	Запрос.УстановитьПараметр("ВидДокументов", ВидДокументов);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Режим = ВыборкаДетальныеЗаписи.РежимРассылки;
		Расширение = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВыборкаДетальныеЗаписи.Формат);
		Если Расширение = "" Тогда
			Расширение = "html";
		КонецЕсли;
		Если Режим = Перечисления.усд_РежимыРассылкиСодержимогоДокумента.ОтчетПоМетаданнымДокумента Тогда
			ИмяФайла = Документ.Метаданные().Синоним + " "+Документ.Номер+" от "+Формат(Документ.Дата,"ДФ='дд ММММ гггг'")+"."+Расширение;
			Попытка
				СоздатьКаталог(КаталогВременныхФайлов()+"Вложения");
			Исключение
				
			КонецПопытки;
			ТабличныйДокумент = ОтчетПоМетаданнымДокумента(Документ);
			ИмяФайла = КаталогВременныхФайлов()+"Вложения"+"\"+ИмяФайла;
			Попытка
				ТабличныйДокумент.Записать(ИмяФайла,ТипФайлаТабличногоДокумента[Расширение]);
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат Неопределено;
			КонецПопытки;
			Попытка
				ВыбранныйФайл = Новый ДвоичныеДанные(ИмяФайла);
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат Неопределено;
			КонецПопытки;
			УдалитьФайлы(КаталогВременныхФайлов()+"Вложения\","*.html");
			Возврат ВыбранныйФайл;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ОтчетПоМетаданнымДокумента(Документ) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ОбластьЗаголовок = ТабличныйДокумент.Область("R2C2:R2C5");
	ОбластьЗаголовок.Шрифт = Новый Шрифт(,12,Истина);
	ОбластьЗаголовок.Объединить();
	ОбластьЗаголовок.Текст = Строка(Документ);
	Ряд = 4;
	Область = ТабличныйДокумент.Область("R"+Строка(Ряд)+"C2:R"+Строка(Ряд)+"C3");
	Область.Объединить();
	Область.Текст = "Номер";
	Область = ТабличныйДокумент.Область("R"+Строка(Ряд)+"C4:R"+Строка(Ряд)+"C5");
	Область.Объединить();
	Область.Текст = Документ.Номер;
	Ряд = 5;
	Область = ТабличныйДокумент.Область("R"+Строка(Ряд)+"C2:R"+Строка(Ряд)+"C3");
	Область.Объединить();
	Область.Текст = "Дата";
	Область = ТабличныйДокумент.Область("R"+Строка(Ряд)+"C4:R"+Строка(Ряд)+"C5");
	Область.Объединить();
	Область.Текст = Документ.Дата;
	Ряд = 6;
	Для Каждого Реквизит Из Документ.Метаданные().Реквизиты Цикл
		Область = ТабличныйДокумент.Область("R"+Строка(Ряд)+"C2:R"+Строка(Ряд)+"C3");
		Область.Объединить();
		Область.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		Область.Текст = Реквизит.Синоним;
		Область = ТабличныйДокумент.Область("R"+Строка(Ряд)+"C4:R"+Строка(Ряд)+"C5");
		Область.Объединить();
		Область.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		Область.Текст = Документ[Реквизит.Имя];
		Ряд = Ряд +1;
	КонецЦикла;
	Для Каждого ТабличнаяЧасть Из Документ.Метаданные().ТабличныеЧасти Цикл
		Если Документ[ТабличнаяЧасть.Имя].Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		Ряд = Ряд + 1;
		ОбластьЗаголовок = ТабличныйДокумент.Область("R"+Строка(Ряд)+"C2:R"+Строка(Ряд)+"C5");
		ОбластьЗаголовок.Объединить();
		ОбластьЗаголовок.Шрифт = Новый Шрифт(,10,Истина);
		ОбластьЗаголовок.Текст = ТабличнаяЧасть.Синоним;
		Ряд = Ряд + 1;
		Область = ТабличныйДокумент.Область("R"+Строка(Ряд)+"C2:R"+Строка(Ряд)+"C2");
		Область.Текст = "№";
		Область.ЦветФона = Новый Цвет(255,218,185);
		Область.Шрифт = Новый Шрифт(,9,Истина);
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		Область.Обвести(Линия,Линия,Линия,Линия);
		Область.ЦветРамки = Новый Цвет(222,184,135);
		Колонка = 1;
		Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			Область = ТабличныйДокумент.Область("R"+Строка(Ряд)+"C"+Строка(3+(Колонка-1)*2)+":R"+Строка(Ряд)+"C"+Строка(2+Колонка*2));
			Область.Объединить();
			Область.Текст = Реквизит.Синоним;
			Область.ЦветФона = Новый Цвет(255,218,185);
			Область.Шрифт = Новый Шрифт(,9,Истина);
			Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
			Область.Обвести(Линия,Линия,Линия,Линия);
			Область.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			Область.ЦветРамки = Новый Цвет(222,184,135);
			Колонка = Колонка +1;
		КонецЦикла;
		Ряд = Ряд + 1;
		Для Каждого СтрокаТЧ Из Документ[ТабличнаяЧасть.Имя] Цикл
			Область = ТабличныйДокумент.Область("R"+Строка(Ряд)+"C2:R"+Строка(Ряд)+"C2");
			Область.Текст = СтрокаТЧ.НомерСтроки;
			Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
			Область.Обвести(Линия,Линия,Линия,Линия);
			Область.ЦветРамки = Новый Цвет(222,184,135);
			Область.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			Колонка = 1;
			Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
				Область = ТабличныйДокумент.Область("R"+Строка(Ряд)+"C"+Строка(3+(Колонка-1)*2)+":R"+Строка(Ряд)+"C"+Строка(2+Колонка*2));
				Область.Объединить();
				Область.Текст = СтрокаТЧ[Реквизит.Имя];
				Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
				Область.Обвести(Линия,Линия,Линия,Линия);
				Область.ЦветРамки = Новый Цвет(222,184,135);
				Область.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				Колонка = Колонка +1;
			КонецЦикла;
			Ряд = Ряд + 1;
		КонецЦикла;
	КонецЦикла;
	Для Инд = 2 По ТабличныйДокумент.ШиринаТаблицы Цикл 
		Область = ТабличныйДокумент.Область("R"+Строка(Инд)+":R"+Строка(Инд));
		Область.ШиринаКолонки = 35;
	КонецЦикла;
	Возврат ТабличныйДокумент;
КонецФункции

//////////////////////////////////////////////////////////////////
// БСП


// Работа с отправкой печатной формы
//
Процедура ОтправкаОповещенияПоЭлПочте(УчетнаяЗапись,ПараметрыПисьма, Знач ТабДокумент)Экспорт 
	
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("ПолеДокумента", ТабДокумент);
	ПараметрыОтправки.Вставить("Тема", ПараметрыПисьма.Тема);
	
	
	ФорматыСохранения = Новый Массив;
	ФорматыСохранения.Добавить(ТипФайлаТабличногоДокумента[?(ПараметрыПисьма.Расширение="","HTML",ПараметрыПисьма.Расширение)]);
	НастройкиСохранения = Новый Структура;
	НастройкиСохранения.Вставить("УпаковатьВАрхив", Ложь);
	НастройкиСохранения.Вставить("ФорматыСохранения", ФорматыСохранения);

	
	ПисьмоКОтправке = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
	ПисьмоКОтправке.Автор = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("глТекущийПользователь");
	ПисьмоКОтправке.ЕстьВложения = ТабДокумент<>Неопределено;
	ПисьмоКОтправке.Ответственный = ПисьмоКОтправке.Автор;
	ПисьмоКОтправке.ОтправительПредставление = "Система автоматического оповещения о задачах согласования документов";
	Для Каждого Получатель Из ПараметрыПисьма.Получатели Цикл
		НС = ПисьмоКОтправке.ПолучателиПисьма.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Получатель);
	КонецЦикла;
	ПисьмоКОтправке.СписокПолучателейПисьма = Вычислить("ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(ПисьмоКОтправке.ПолучателиПисьма, Ложь)");
	ПисьмоКОтправке.СтатусПисьма=Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
	ПисьмоКОтправке.ТекстHTML = ПараметрыПисьма.Текст;
	ПисьмоКОтправке.Текст = ПараметрыПисьма.Текст;
	ПисьмоКОтправке.Тема = ПараметрыПисьма.Тема;
	ПисьмоКОтправке.УчетнаяЗапись = УчетнаяЗапись;
	ПисьмоКОтправке.УдалятьПослеОтправки = Истина;
	ПисьмоКОтправке.Дата = ТекущаяДата();
	ПисьмоКОтправке.Комментарий = "Автоматическое оповещение системы согласования";
	ПисьмоКОтправке.Записать();
	
	Если ТабДокумент<>Неопределено Тогда
		ТабДокумент.АвтоМасштаб = Истина;
		ПараметрыОтправки.Вставить("КлючУникальности",Новый УникальныйИдентификатор);
		СписокВложений = ПоместитьТабличныеДокументыВоВременноеХранилище(НастройкиСохранения, ПараметрыОтправки);
		Для Каждого Вложение Из СписокВложений Цикл
			// из временного хранилища
			УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
						ПисьмоКОтправке.Ссылка, Вложение.Значение, Вложение.Представление, 0);
		КонецЦикла;
	КонецЕсли;
				
	Попытка
		ИдентификаторПисьма = Вычислить("Взаимодействия.ВыполнитьОтправкуПисьма(ПисьмоКОтправке)");
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
    ПисьмоКОтправке.Прочитать();
	ПисьмоКОтправке.Удалить();
КонецПроцедуры

Функция ПоместитьТабличныеДокументыВоВременноеХранилище(НастройкиСохранения, ПараметрыОтправки) Экспорт 
	Перем ЗаписьZipФайла, ИмяАрхива;
	
	Результат = Новый СписокЗначений;
	
	// подготовка архива
	Если НастройкиСохранения.УпаковатьВАрхив Тогда
		ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива);
	КонецЕсли;
	
	// подготовка временной папки
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	ИспользованныеИменаФайлов = Новый Соответствие;
	
	ВыбранныеФорматыСохранения = НастройкиСохранения.ФорматыСохранения;
	
	Для Каждого ТипФайла Из ВыбранныеФорматыСохранения Цикл
		НастройкиФормата = фин_ОбщегоНазначенияСервер.НастройкиФормата(ТипФайла);
		
		ИмяФайла = ПолучитьИмяВременногоФайлаДляПечатнойФормы(ПараметрыОтправки.Тема,НастройкиФормата.Расширение,ИспользованныеИменаФайлов);
		ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла;
		
		Попытка
			ПараметрыОтправки.ПолеДокумента.Записать(ПолноеИмяФайла, ТипФайла);
		Исключение
			Сообщить("Не удалось сохранить файл в формат:" + НастройкиФормата.Расширение + ". Пожалуйста, выберите другой формат сохранения файла.", СтатусСообщения.Важное);
			Продолжить;
		КонецПопытки;
				
		Если ТипФайла = ТипФайлаТабличногоДокумента.HTML Тогда
			ВставитьКартинкиВHTML(ПолноеИмяФайла);
		КонецЕсли;
		
		Если ЗаписьZipФайла <> Неопределено Тогда 
			ЗаписьZipФайла.Добавить(ПолноеИмяФайла);
		Иначе
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ПараметрыОтправки.КлючУникальности);
			Результат.Добавить(ПутьВоВременномХранилище, ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	
	// если архив подготовлен, записываем и помещаем его во временное хранилище
	Если ЗаписьZipФайла <> Неопределено Тогда 
		ЗаписьZipФайла.Записать();
		ФайлАрхива = Новый Файл(ИмяАрхива);
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
		ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ПараметрыОтправки.КлючУникальности);
		Результат.Добавить(ПутьВоВременномХранилище, ПолучитьИмяФайлаДляАрхива(ПараметрыОтправки));
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИмяВременногоФайлаДляПечатнойФормы(ИмяМакета, Расширение, ИспользованныеИменаФайлов)
	
	ШаблонИмениФайла = "%1%2.%3";
	
	ИмяМакета = СокрЛП(Лев(ИмяМакета, 250));
	
	ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, ИмяМакета, "", Расширение));
		
	НомерИспользования = ?(ИспользованныеИменаФайлов[ИмяВременногоФайла] <> Неопределено,
							ИспользованныеИменаФайлов[ИмяВременногоФайла] + 1,
							1);
	
	ИспользованныеИменаФайлов.Вставить(ИмяВременногоФайла, НомерИспользования);
	
	// если имя уже было ранее использовано, прибавляем счётчик в конце имени
	Если НомерИспользования > 1 Тогда
		ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонИмениФайла,
				ИмяМакета,
				" (" + НомерИспользования + ")",
				Расширение));
	КонецЕсли;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

Процедура ВставитьКартинкиВHTML(ИмяФайлаHTML) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
	
	ФайлHTML = Новый Файл(ИмяФайлаHTML);
	
	ИмяПапкиКартинок = ФайлHTML.ИмяБезРасширения + "_files";
	ПутьКПапкеКартинок = СтрЗаменить(ФайлHTML.ПолноеИмя, ФайлHTML.Имя, ИмяПапкиКартинок);
	
	// ожидается, что в папке будут только картинки
	ФайлыКартинок = НайтиФайлы(ПутьКПапкеКартинок, "*");
	
	Для Каждого ФайлКартинки Из ФайлыКартинок Цикл
		КартинкаТекстом = Base64Строка(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя));
		КартинкаТекстом = "data:image/" + Сред(ФайлКартинки.Расширение,2) + ";base64," + Символы.ПС + КартинкаТекстом;
		
		ТекстHTML = СтрЗаменить(ТекстHTML, ИмяПапкиКартинок + "\" + ФайлКартинки.Имя, КартинкаТекстом);
	КонецЦикла;
		
	ТекстовыйДокумент.УстановитьТекст(ТекстHTML);
	ТекстовыйДокумент.Записать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	
КонецПроцедуры

Функция ПолучитьИмяФайлаДляАрхива(ПараметрыОтправки) Экспорт 
	
	Результат = "";
	
	Если ПустаяСтрока(Результат) Тогда
		Результат = ПараметрыОтправки.Тема;
	Иначе
		Результат = НСтр("ru = 'Документы'");
	КонецЕсли;
	
	Возврат Результат + ".zip";
	
КонецФункции
