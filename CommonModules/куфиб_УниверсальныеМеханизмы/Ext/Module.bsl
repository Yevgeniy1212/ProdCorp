  
// Функция получает ТабличныйДокумент для печати из внешней печатной формы.
//
// Параметры
//  Ссылка         - Ссылка, для которой необходимо напечатать документ
//  ИсточникМакета - ИсточникМакета, структура, содержащая внешнюю обработку для печати
//
// Возвращаемое значение:
//   ТабличныйДокумент
//
Функция НапечататьВнешнююФорму(Ссылка, ИсточникМакета) Экспорт

	Перем ДополнительныеПараметры;
	
	ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.Принадлежность[ИсточникМакета.НомерСтроки - 1].ХранилищеВнешнейОбработки.Получить();
	
	// Получить дополнительные параметры внешней обработки
	ИсточникМакета.Свойство("ДополнительныеПараметрыОбработки", ДополнительныеПараметры);
	
	Если ДвоичныеДанные = Неопределено Тогда
		ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.ХранилищеВнешнейОбработки.Получить();
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Неопределено;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("epf");
	Попытка
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		
		// Передать внешней обработке дополнительные параметры
		Если ДополнительныеПараметры <> Неопределено Тогда
			
			// Если у внешней обработки есть реквизит для дополнительных параметров, присвоить ему значение
			Если НЕ Обработка.Метаданные().Реквизиты.Найти("ДополнительныеПараметры") = Неопределено Тогда
				Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент = Обработка.Печать();
		УдалитьФайлы(ИмяФайла);
	Исключение
		куфиб_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось сформировать внешнюю печатную форму!");
	КонецПопытки;
	
	Возврат ТабДокумент;

КонецФункции // НапечататьВнешнююФорму()

// Выводит на печать подготовленный макет 
//
// Параметры:
//  ПечДокумент           - ТабличыйДокумент, макет на печать,
//  КоличествоЭкземпляров - Число, количество экземпляров на печать,
//  НаПринтер             - Булево, Если истина, то выводим сразу на принтер.
//  Заголовок             - Заголовок окна табличного документа
//
Процедура НапечататьДокумент(ПечДокумент, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Заголовок = "", Ссылка = Неопределено) Экспорт

	ЗащитаТаблиц = куфиб_ОбщегоНазначения.ЗащитаТаблиц();
	
	Если ПечДокумент = Неопределено тогда
		Возврат; 
	КонецЕсли;

	// Получить необходимое количество копий
	Если КоличествоЭкземпляров < 1 Тогда
		ПечДокумент.КоличествоЭкземпляров = 1;
	Иначе
		ПечДокумент.КоличествоЭкземпляров = КоличествоЭкземпляров;
	КонецЕсли;

	Если НЕ ПечДокумент.АвтоМасштаб
	   И НЕ ЗначениеЗаполнено(ПечДокумент.ИмяПринтера) Тогда
		ПечДокумент.АвтоМасштаб = Истина;
	КонецЕсли;

	Если НаПринтер Тогда

		ПечДокумент.Напечатать();

	Иначе

		// Отобразить печатный документ на экране
		Если Метаданные.ОбщиеФормы.Найти("ПечатьДокументов") <> Неопределено Тогда
			ФормаПечати = ПолучитьОбщуюФорму("ПечатьДокументов",, Новый УникальныйИдентификатор);
			ФормаПечати.ОбъектПечати     = Ссылка;
			ФормаПечати.ПечатныйДокумент = ПечДокумент;
			ФормаПечати.Заголовок        = Заголовок;
			ФормаПечати.Защита           = ЗащитаТаблиц;
			ФормаПечати.Открыть();
			
			// сохраним ссылку на последнюю открытую форму печати в глобальной переменной, 
			// чтобы потом к ней можно было программно обращаться
			//финЗначениеПеременнойУстановить("глПоследняяОткрытаяФормаПечатьДокументов", ФормаПечати);
		Иначе
			ПечДокумент.ОтображатьЗаголовки = Ложь;
			ПечДокумент.ОтображатьСетку     = Ложь;
			ПечДокумент.Защита              = ЗащитаТаблиц;
			ПечДокумент.ТолькоПросмотр      = Истина;
			ПечДокумент.Показать(Заголовок);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // НапечататьДокумент()

// Функция возвращает значение "Истина" или "Ложь" в зависимости от 
//  результата вызова метода табличного документа ПроверитВывод() с учетом 
//   наличия или отсутствия в системе принтера по умолчанию.
//
// Параметры
//  ТабличныйДокумент  - табличный документ
//  ВыводимыеОбласти   - массив выводимых областей
//                 
// Возвращаемое значение:
//   Булево
//
Функция ПроверитьВыводДляТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти) Экспорт
	
	Попытка
		//Проверяет, умещаются ли переданные табличные документы на страницу при печати.
		Возврат ТабличныйДокумент.ПроверитьВывод(ВыводимыеОбласти);
		
	Исключение
		//При возникновении проблем с получением информации о текущем принтере возвращает значение "ИСТИНА".
		Возврат Истина;
		
	КонецПопытки;
	
КонецФункции // ПроверитьВыводДляТабличногоДокумента()

// Печатает документ полученный по нажатию кнопки в форме списка
//
// Параметры
//  Документ - документ,который нужно отпечатать
//
Процедура НапечататьДокументИзФормыСписка(Объект) Экспорт
	
	Если Объект = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	НаПринтер = куфиб_ОбщегоНазначения.ПолучитьЗначениеПоУмолчанию(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("глТекущийПользователь"), "ПечатьДокументовБезПредварительногоПросмотра") = Истина;	
	
	Если Не НапечататьДокументПоУмолчанию(Объект,0, НаПринтер) Тогда                             		
		Предупреждение("Форма печати документа по умолчанию не определена. Операция не выполнена.");
	КонецЕсли;

КонецПроцедуры // НапечататьДокументИзФормыСписка()

// Функция выводит на печать макет документа "по умолчанию"
//
Функция НапечататьДокументПоУмолчанию(Объект, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	ЭтоДокумент = Метаданные.Документы.Содержит(Объект.Метаданные());
	
	Если ЭтоДокумент И Объект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить и Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Объект.Проведен) Тогда
		Сообщить("Недостаточно полномочий для печати непроведенного документа!"); 
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		СтруктураВнутреннихПечатныхФорм = Объект.ПолучитьСтруктуруПечатныхФорм()
	Исключение
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
	КонецПопытки;
	
	ДеревоМакетов = ПолучитьДеревоМакетовПечати(Объект.Ссылка, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(Объект.Метаданные().Имя, ДеревоМакетов);
	
	Если СтрокаПоУмолчанию = Неопределено Тогда
		
		Сообщить("Печать по умолчанию не определена!"); 
		Возврат Ложь;
		
	КонецЕсли;
	
	Расшифровка = СтрокаПоУмолчанию.Расшифровка;
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		Если Не РаботаСДиалогами.ПроверитьМодифицированность(Объект) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТабДокумент = НапечататьВнешнююФорму(Объект.Ссылка, Расшифровка);
		НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ?(ЭтоДокумент, РаботаСДиалогами.СформироватьЗаголовокДокумента(Объект), Строка(Объект)), Объект.Ссылка);
	Иначе
		Объект.Печать(Расшифровка, КоличествоЭкземпляров, НаПринтер);
	КонецЕсли;
	Возврат Истина;
	
КонецФункции // НапечататьДокументПоУмолчанию()

// Процедура формирует подменю "Заполнить" у ТЧ по дереву значений
//
Процедура СформироватьПодменюЗаполненияТЧ(ДеревоКнопок, СоответствиеТЧ) Экспорт
	
	СтруктураТЧ = Новый Структура;
	Для Каждого КлючИЗначение Из СоответствиеТЧ Цикл
		
		СтруктураТЧ.Вставить(КлючИЗначение.Ключ.Данные,Новый Структура("ТабличноеПоле,ПодменюИлиКоманднаяПанель",КлючИЗначение.Ключ,КлючИЗначение.Значение));
		
	КонецЦикла;
	
	Для Каждого СтрокаПодменю Из ДеревоКнопок.Строки Цикл
		
		ИмяТабличнойЧасти = СтрокаПодменю.Имя;
		Если НЕ ПустаяСтрока(ИмяТабличнойЧасти) Тогда
			
			ЭлементыУправления = Неопределено;
			Если СтруктураТЧ.Свойство(ИмяТабличнойЧасти,ЭлементыУправления) Тогда
				
				СтрокаПодменю.Расшифровка = ЭлементыУправления.ТабличноеПоле;
				ПодменюИлиКоманднаяПанель = ЭлементыУправления.ПодменюИлиКоманднаяПанель;
				Если ТипЗНЧ(ПодменюИлиКоманднаяПанель) = Тип("КоманднаяПанель") Тогда
					
					ПодменюИлиКоманднаяПанель = ПодменюИлиКоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Подменю,"Заполнить");
					
				КонецЕсли;
				СформироватьПодменю(СтрокаПодменю, ПодменюИлиКоманднаяПанель, Ложь, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует дерево кнопок для подменю "Заполнить"
//
Функция ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Действие) Экспорт
	ДеревоКнопок = ИнициализироватьДеревоДополнительныхКнопок();
	
	Если Метаданные.Справочники.Найти("ВнешниеОбработки")=Неопределено Тогда
		Возврат ДеревоКнопок;
	КонецЕсли;
	Если Метаданные.Перечисления.Найти("ВидыДополнительныхВнешнихОбработок")=Неопределено Тогда
		Возврат ДеревоКнопок;
	КонецЕсли;
	Если Метаданные.Справочники.Найти("ВнешниеОбработки").ТабличныеЧасти.Найти("Принадлежность")=Неопределено Тогда
		Возврат ДеревоКнопок;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка,
	|	ВнешниеОбработкиПринадлежность.Ссылка.Наименование,
	|	ВнешниеОбработкиПринадлежность.ТабличнаяЧастьИмя КАК ТабличнаяЧастьИмя
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьИмя
	|ИТОГИ ПО
	|	ТабличнаяЧастьИмя";
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей);
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
	Иначе
		Возврат ДеревоКнопок;
	КонецЕсли;
	
	НомерКнопки = 0;
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		СтрокаПодменю = ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок,Выборка.ТабличнаяЧастьИмя);
		ВыборкаДействий            = Выборка.Выбрать();
		
		Пока ВыборкаДействий.Следующий() Цикл
			НомерКнопки = НомерКнопки + 1;
			
			ДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, "ЗаполнениеТЧ"+НомерКнопки, ТипКнопкиКоманднойПанели.Действие, ВыборкаДействий.Наименование, Действие , ВыборкаДействий.Ссылка)
			
		КонецЦикла; 
	КонецЦикла; 
	
	
	Возврат ДеревоКнопок;
	
КонецФункции // ПолучитьДеревоКнопокЗаполненияТабличныхЧастей() 

// Процедура формирует подменю по дереву значений
// Параметры:
//	< СтрокаПодменю > (обязательный)
//		Тип: Дерево или элемент дерева значений, по данным которого необходимо построить подменю.
//	< Подменю> (обязательный)
//		Тип: Элемент командной панели «Кнопка» типа «Подменю». На которой необходимо сформировать новое подменю.
//	< Очищать> (по умолчанию «Ложь»)
//		Тип: булево. Определяет: следует ли очищать переданное подменю.
//	< ДобавлятьРазделительВНачало > (по умолчанию «Ложь»)
//		Тип: булево. Определяет: следует ли добавить в начало подменю разделитель.
Процедура СформироватьПодменю(СтрокаПодменю, Подменю, Очищать = Ложь, ДобавлятьРазделительВНачало = Ложь, КнопкиПодменюИзменяютДанные = Ложь) Экспорт
	
	Строки = СтрокаПодменю.Строки;
	Кнопки = Подменю.Кнопки;
	
	Если Очищать Тогда
		Кнопки.Очистить();
	КонецЕсли; 
	
	Если ДобавлятьРазделительВНачало и Строки.Количество() > 0 Тогда
		Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
	КонецЕсли; 
	
	Для каждого СтрокаКнопки Из Строки Цикл
		
		Кнопка = Кнопки.Добавить(СтрокаКнопки.Имя,СтрокаКнопки.ТипКнопки, СтрокаКнопки.Текст, СтрокаКнопки.Действие);
		
		Если СтрокаКнопки.Строки.Количество() > 0 Тогда
			
			СформироватьПодменю(СтрокаКнопки, Подменю, Ложь, Ложь)
			
		КонецЕсли; 
		
		Если Не СтрокаКнопки.Картинка = Неопределено Тогда
			
			Кнопка.Картинка  = СтрокаКнопки.Картинка;
		
		КонецЕсли; 
		
		Кнопка.Подсказка = СтрокаКнопки.Подсказка;
		Кнопка.Пояснение = СтрокаКнопки.Подсказка;
		Кнопка.Пометка   = СтрокаКнопки.Пометка;
		
		//Остальные свойства кнопки
		Если Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие Тогда
			Кнопка.ИзменяетДанные = КнопкиПодменюИзменяютДанные;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры // СформироватьПодменю()

// Процедура формирует дерево кнопок для подменю "Печать"
//
Функция ПолучитьДеревоМакетовПечати(СсылкаОбъекта, ВнутренниеПечатныеФормы, Действие = Неопределено, 
									ДействиеУстановитьПечатьПоУмолчанию = Неопределено) Экспорт
	
	// Сформировать структуру дерева
	ДеревоКнопок = ИнициализироватьДеревоДополнительныхКнопок();
	
	// Добавить в дерево встроенные печатные формы
	Если НЕ ВнутренниеПечатныеФормы = Неопределено Тогда
		ДобавитьВДеревоМакетовВстроенныеФормы(ДеревоКнопок, ВнутренниеПечатныеФормы, Действие);
	КонецЕсли;
	
	// Добавить в дерево дополнительные печатные формы из Справочник.ВнешниеОбработки
	ДобавитьВДеревоМакетовДополнительныеФормы(ДеревоКнопок, СсылкаОбъекта, Действие);
	
	// Получить имя макета печати по умолчанию
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(СсылкаОбъекта.Метаданные().Имя ,ДеревоКнопок);
	
	// Для подменю Печать объекта: установить пометку кнопки печати по умолчанию
	Если НЕ СтрокаПоУмолчанию = Неопределено Тогда
		СтрокаПоУмолчанию.Пометка = Истина;
	КонецЕсли;
	 
	// Добавит печать по умолчанию
	Если ДеревоКнопок.Строки.Количество() > 0 Тогда
		ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Разделитель);
		ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, "ПечатьПоУмолчанию", ТипКнопкиКоманднойПанели.Действие, "По умолчанию...", ДействиеУстановитьПечатьПоУмолчанию, "ПечатьПоУмолчанию");
	КонецЕсли; 
	
	Возврат ДеревоКнопок;
	
КонецФункции // ПолучитьДеревоМакетовПечати()

// Функция инициализирует дерево дополнительных кнопок
//	Параметры:
//		Нет
// Возвращаемое значение:
//		Тип: ДереваЗначений.
Функция ИнициализироватьДеревоДополнительныхКнопок() Экспорт
	
	ДеревоКнопок = Новый ДеревоЗначений;
	
	//Если ИмяКнопки = Неопределено, создается разделитель
	//Если Дерево имеет подчиненные, то 
	
	ДеревоКнопок.Колонки.Добавить("Имя");
	ДеревоКнопок.Колонки.Добавить("ТипКнопки");
	ДеревоКнопок.Колонки.Добавить("Текст");
	ДеревоКнопок.Колонки.Добавить("Подсказка");
	ДеревоКнопок.Колонки.Добавить("Картинка");
	ДеревоКнопок.Колонки.Добавить("Действие");
	ДеревоКнопок.Колонки.Добавить("Пометка");
	//Остальные свойства кнопки
	
	ДеревоКнопок.Колонки.Добавить("Расшифровка");
	
	Возврат ДеревоКнопок;
	
КонецФункции // ИнициализироватьДеревоДополнительныхКнопок()

// Функция заполняет начальные параметры построителю отчета, который
//  используется для настройки отбора в мезанизме подключения внешних печатных форм.
//
// Параметры
//  ИмяТаблицы     - Строка, имя таблицы БД к которой необходимо определить запрос
//  СинонимТаблицы - Строка, синоним таблицы БД к которой необходимо определить запрос
//
// Возвращаемое значение:
//   ПостроительОтчета
//
Функция ИнициализироватьПостроительДопПечатныхФорм(ИмяТаблицы, СинонимТаблицы) Экспорт

	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	" + ИмяТаблицы + " КАК Объект
	|ГДЕ
	|	Объект.Ссылка = &Ссылка
	|{ГДЕ
	|	Объект.Ссылка.*}
	|";
	
	ПолеОбъекта = ПостроительОтчета.ДоступныеПоля.Найти("Ссылка");
	ПолеОбъекта.Представление = ?(НЕ ЗначениеЗаполнено(СинонимТаблицы), ИмяТаблицы, СинонимТаблицы);
	
	Возврат ПостроительОтчета;

КонецФункции // ИнициализироватьПостроительДопПечатныхФорм()
 
// Процедура добавляет в дерево кнопок макетов встроенные печатные формы
//
Процедура ДобавитьВДеревоМакетовВстроенныеФормы(ДеревоКнопок, ВнутренниеПечатныеФормы, Действие)

	Для каждого КлючИЗначение Из ВнутренниеПечатныеФормы Цикл
		
		Если КлючИЗначение.Значение = Неопределено Тогда
			ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, , ТипКнопкиКоманднойПанели.Разделитель);
		Иначе
			ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, КлючИЗначение.Ключ, ТипКнопкиКоманднойПанели.Действие, КлючИЗначение.Значение, Действие, КлючИЗначение.Ключ,,"Встроенная печатная форма");
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры // ДобавитьВДеревоМакетовВстроенныеФормы()

// Процедура дополняет таблицу печатных форма (ТаблицаМакетов) объекта
// из справочника "Дополнительные печатные формы"
Процедура ДобавитьВДеревоМакетовДополнительныеФормы(ДеревоМакетов, СсылкаОбъекта, Действие)
	
	Если Метаданные.Справочники.Найти("ВнешниеОбработки")=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Метаданные.Перечисления.Найти("ВидыДополнительныхВнешнихОбработок")=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Метаданные.Справочники.Найти("ВнешниеОбработки").Реквизиты.Найти("ХранилищеВнешнейОбработки") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Метаданные.Справочники.Найти("ВнешниеОбработки").Реквизиты.Найти("ВидОбработки") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Метаданные.Справочники.Найти("ВнешниеОбработки").ТабличныеЧасти.Найти("Принадлежность") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокиДерева = ДеревоМакетов.Строки;
	
	Если ТипЗнч(СсылкаОбъекта) = Тип("ОбъектМетаданных") Тогда
		Возврат;
	КонецЕсли; 
	
	МетаданныеОбъекта = СсылкаОбъекта.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка КАК Ссылка,
	|	ВнешниеОбработкиПринадлежность.ДополнительныеПараметрыОбработки КАК ДополнительныеПараметрыОбработки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВнешниеОбработкиПринадлежность.ПредставлениеКнопки, """") <> """" ТОГДА ВнешниеОбработкиПринадлежность.ПредставлениеКнопки
	|		ИНАЧЕ ВнешниеОбработкиПринадлежность.Ссылка.Наименование
	|	КОНЕЦ КАК Наименование,	
	|	ВнешниеОбработкиПринадлежность.Ссылка.ХранилищеВнешнейОбработки КАК СсылкаХранилищеВнешнейОбработки,
	|	ВнешниеОбработкиПринадлежность.НастройкиПостроителяДляОтбора КАК НастройкиПостроителяДляОтбора,
	|	ВнешниеОбработкиПринадлежность.ХранилищеВнешнейОбработки КАК ХранилищеВнешнейОбработки,
	|	ВнешниеОбработкиПринадлежность.ЗаменяемаяПечатнаяФорма КАК ЗаменяемаяПечатнаяФорма,
	|	ВнешниеОбработкиПринадлежность.НомерСтроки
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|ИТОГИ ПО
	|	Ссылка";
	
	ИмяТаблицыОбъекта = "";
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма);
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
		ИмяТаблицыОбъекта = "Документ." + МетаданныеОбъекта.Имя;
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
		ИмяТаблицыОбъекта = "Справочник." + МетаданныеОбъекта.Имя;
	Иначе
		Возврат;
	КонецЕсли;
	
	БылРазделитель	= СтрокиДерева.Количество() = 0 ;
	ВыборкаСсылок	= Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылок.Следующий() Цикл
		
		ПорядковыйНомер	= 0;
		Выборка			= ВыборкаСсылок.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяОбработка	= Неопределено;
			ОбработкаСтроки	= Выборка.ХранилищеВнешнейОбработки.Получить();
			
			Если ТипЗнч(ОбработкаСтроки) = Тип("ДвоичныеДанные") Тогда
				НоваяОбработка = ОбработкаСтроки;
			Иначе
				ОбработкаЭлемента = Выборка.СсылкаХранилищеВнешнейОбработки.Получить();
				Если ТипЗнч(ОбработкаЭлемента) = Тип("ДвоичныеДанные") Тогда
					НоваяОбработка = ОбработкаЭлемента;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяОбработка = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			СтруктураРасшифровки = Новый Структура("СсылкаНаВнешнююОбработку, НомерСтроки, ДополнительныеПараметрыОбработки", ВыборкаСсылок.Ссылка, Выборка.НомерСтроки, Выборка.ДополнительныеПараметрыОбработки.Получить());
			
			// Проверим, удовлетворяет ли подключаемый отчет указанным в нем условиям
			НастройкиПостроителя = Выборка.НастройкиПостроителяДляОтбора.Получить();
			
			Если ТипЗнч(НастройкиПостроителя) = Тип("НастройкиПостроителяОтчета") Тогда
				
				ПостроительОтчета = ИнициализироватьПостроительДопПечатныхФорм(ИмяТаблицыОбъекта, МетаданныеОбъекта.Синоним);
				ПостроительОтчета.Параметры.Вставить("Ссылка", СсылкаОбъекта);
				ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
				ПостроительОтчета.Выполнить();
				
				Если ПостроительОтчета.Результат.Пустой() Тогда
					Продолжить;
				КонецЕсли;
				
				Подсказка = "Отбор";
			Иначе
				Подсказка = "";
			КонецЕсли;
			
			// Теперь проверим, надо ли заменять существующую печ.форму или нужно добавить новую
			Если ЗначениеЗаполнено(Выборка.ЗаменяемаяПечатнаяФорма) Тогда
				Подсказка = "Печатная форма заменена подключаемой" + Подсказка;
				СтрокаДерева = СтрокиДерева.Найти(Выборка.ЗаменяемаяПечатнаяФорма, "Имя");
				
				Если СтрокаДерева = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				//ПодменятьВстроеннуюФорму = Ложь;
				СтрокаДерева.Расшифровка = СтруктураРасшифровки;
				СтрокаДерева.Подсказка = Подсказка;
				СтрокаДерева.Текст = Выборка.Наименование;
				Продолжить;
				
			Иначе
				Подсказка = "Подключаемая печатная форма" + Подсказка;
				
			КонецЕсли; 
			
			// Только тут будем добавлять новую печ. форму в дополнение списка
			Если Не БылРазделитель Тогда
				ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Разделитель);
				БылРазделитель = Истина;
			КонецЕсли;
			
			Суффикс = ?(ПорядковыйНомер = 0 ,"" , "("+ПорядковыйНомер+")");
			ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Действие, Выборка.Наименование + Суффикс, Действие ,СтруктураРасшифровки, , Подсказка, , );			
			
		КонецЦикла;
	
	КонецЦикла; 
	
КонецПроцедуры // ДобавитьВДеревоМакетовДополнительныеФормы()

// Функция добавляет новую строку в дерево кнопок
//
Функция ДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, Имя, Знач ТипКнопки = Неопределено ,Текст = "", Действие = Неопределено, Расшифровка = Неопределено, Пометка = Ложь, Подсказка = "", Картинка = Неопределено, Позиция = Неопределено) Экспорт
	
	Если ТипКнопки = Неопределено Тогда
	
		ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
		
	КонецЕсли;
	Если Позиция = Неопределено Тогда
		СтрокаКнопки         = СтрокаПодменю.Строки.Добавить();
	Иначе
		СтрокаКнопки         = СтрокаПодменю.Строки.Вставить(Позиция);
	КонецЕсли; 
	
	
	СтрокаКнопки.Имя         = Имя;
	СтрокаКнопки.ТипКнопки   = ТипКнопки;
	СтрокаКнопки.Текст       = Текст;
	СтрокаКнопки.Действие    = Действие;
	СтрокаКнопки.Картинка    = Картинка;
	СтрокаКнопки.Подсказка   = Подсказка;
	СтрокаКнопки.Пометка     = Пометка;
	
	СтрокаКнопки.Расшифровка = Расшифровка;
	Возврат СтрокаКнопки;
	
КонецФункции // ДобавитьСтрокуВДеревоКнопок()

// Функция возвращает из дерева кнопок строку с описанием кнопки для макета по умолчанию
//
Функция ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных, ДеревоКнопок)
	
	ИмяМакетаПоУмолчанию = ВосстановитьЗначение(ИмяМетаданных+ "МакетПечати");
	
	Если ИмяМакетаПоУмолчанию = Ложь или ДеревоКнопок.Строки.Количество() = 0 Тогда
		СтрокаПоУмолчанию = Неопределено;
	Иначе
		
		СтрокаПоУмолчанию = ДеревоКнопок.Строки.Найти(ИмяМакетаПоУмолчанию,"Текст");
		
		Если СтрокаПоУмолчанию = Неопределено Тогда
			СтрокаПоУмолчанию = ДеревоКнопок.Строки[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПоУмолчанию;
	
КонецФункции // ПолучитьСтрокуДереваМакетовПоУмолчанию()

// Процедура Устанавливает кнопку "Печать по умолчанию"
//
Процедура УстановитьПечатьПоУмолчанию(	ПечатьПоУмолчанию, КоманднаяПанель, ДеревоМакетов, ИмяМетаданных, 
										ДействиеПечатьПоУмолчанию) Экспорт
	
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоМакетов);
	
	Если Не СтрокаПоУмолчанию = Неопределено Тогда
		Если ПечатьПоУмолчанию = Неопределено Тогда
			
			ИмяКнопки = Строка (Новый УникальныйИдентификатор);
			
			Если КоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право Тогда
				КоманднаяПанель.Кнопки.Вставить(0,,ТипКнопкиКоманднойПанели.Разделитель);
				ПечатьПоУмолчанию = КоманднаяПанель.Кнопки.Вставить(0,ИмяКнопки,ТипКнопкиКоманднойПанели.Действие,"",ДействиеПечатьПоУмолчанию);
			Иначе
				КоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
				ПечатьПоУмолчанию = КоманднаяПанель.Кнопки.Добавить(ИмяКнопки,ТипКнопкиКоманднойПанели.Действие,"",ДействиеПечатьПоУмолчанию);
			КонецЕсли;
			
			ПечатьПоУмолчанию.Подсказка = "Печать по умолчанию";
			
		КонецЕсли; 
		
		ПечатьПоУмолчанию.Текст       = СтрокаПоУмолчанию.Текст;
		ПечатьПоУмолчанию.Доступность = Истина; 
		
	ИначеЕсли Не ПечатьПоУмолчанию = Неопределено Тогда
		
		ПечатьПоУмолчанию.Текст       = "Печать по умолчанию не назначена"; 
		ПечатьПоУмолчанию.Доступность = Ложь; 
		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьПечатьПоУмолчанию()


// Процедура устанавливает Подменю "Печать" 
// Параметры:
//    Форма       : Форма, вызвавшая процедуру
//    ДополнительныеКнопки : Структура дополнительных кнопок
Процедура УстановитьПодменюПечати(ПодменюПечати, КоманднаяПанель, СоздаватьПриНеобходимости) Экспорт
	
	Если НЕ ПодменюПечати = Неопределено ИЛИ НЕ СоздаватьПриНеобходимости Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяПодменю = Строка (Новый УникальныйИдентификатор);
	
	Если КоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право Тогда
		КоманднаяПанель.Кнопки.Вставить(0,,ТипКнопкиКоманднойПанели.Разделитель);
		ПодменюПечати = КоманднаяПанель.Кнопки.Вставить(0,ИмяПодменю,ТипКнопкиКоманднойПанели.Подменю,"Печать");
	Иначе
		КоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
		ПодменюПечати = КоманднаяПанель.Кнопки.Добавить(ИмяПодменю,ТипКнопкиКоманднойПанели.Подменю,"Печать");
	КонецЕсли;
	
	ПодменюПечати.Подсказка = "Меню выбора печатных форм";
	
КонецПроцедуры // УстановитьПодменюПечати()

// Функция определяет, есть ли у объекта элементы в хранилище дополнительной информации
//
// Параметры
//  Объект - СправочникСсылка, ДокументСсылка, объект для которого определяем наличие файлов
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьДополнительнаяИнформация(Объект, ИмяСправочника = "ХранилищеДополнительнойИнформации") Экспорт

	Если Метаданные.Справочники.Найти(ИмяСправочника)=Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗначениеНайдено = Ложь;
	
	Если ЗначениеЗаполнено(Объект) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект", Объект);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ХранилищеДополнительнойИнформации.Ссылка";
		Если Метаданные.Справочники[ИмяСправочника].Реквизиты.Найти("ЗначениеРазделенияДоступа") <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + ",
		|	ХранилищеДополнительнойИнформации.ЗначениеРазделенияДоступа";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + ",
		|	ХранилищеДополнительнойИнформации.Объект
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.Объект = &Объект
		|";
		ЗначениеНайдено = НЕ Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	Возврат ЗначениеНайдено;
	
КонецФункции
	
// Изменяет картинку у кнопки открытия формы списка файлов и изображений.
//
// Параметры
//  ОбъектФайла  - Ссылка на объект данных, для которого прикрепляются файлы.
//  КнопкаОткрытияФайлов - Кнопка тулбара, по нажатию которой открывается
//  форма списка файлов и изображений.
//
Процедура ПолучитьКартинкуКнопкиОткрытияФайлов(ОбъектФайла, СписокКнопокОткрытияФайлов) Экспорт

	КартинкаКнопки = ?(ЕстьДополнительнаяИнформация(ОбъектФайла), БиблиотекаКартинок.ТолькоСкрепка, БиблиотекаКартинок.НевидимаяСкрепка);
	Для каждого КнопкаОткрытияФайлов Из СписокКнопокОткрытияФайлов Цикл
		КнопкаОткрытияФайлов.Значение.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
		КнопкаОткрытияФайлов.Значение.Картинка    = КартинкаКнопки;
	КонецЦикла; 

КонецПроцедуры // ПолучитьКартинкуКнопкиОткрытияФайлов()
 
// Процедура назначает макет по умолчанию
//
Функция НазначитьКнопкуПечатиПоУмолчанию(ДеревоМакетов, ИмяМетаданных) Экспорт
	
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоМакетов);
	СписокМакетов = Новый СписокЗначений;
	
	Для каждого Строка Из ДеревоМакетов.Строки Цикл
		Если Строка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие и Не Строка.Расшифровка = "ПечатьПоУмолчанию" Тогда
			СписокМакетов.Добавить(Строка.Текст,,СтрокаПоУмолчанию = Строка);
		КонецЕсли; 
	КонецЦикла; 
	
	ФормаВыбораПечатнойФормыПоУмолчанию = ПолучитьОбщуюФорму("ФормаВыбораПечатнойФормыПоУмолчанию");
	ФормаВыбораПечатнойФормыПоУмолчанию.СписокВыбораПечатнойФормы = СписокМакетов;
	МакетПоУмолчанию = ФормаВыбораПечатнойФормыПоУмолчанию.ОткрытьМодально();
	
	Если МакетПоУмолчанию = "" Тогда
		СохранитьЗначение(ИмяМетаданных + "МакетПечати", Ложь);
	ИначеЕсли Не МакетПоУмолчанию = Неопределено Тогда
		СохранитьЗначение(ИмяМетаданных + "МакетПечати", МакетПоУмолчанию);
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции // НазначитьКнопкуПечатиПоУмолчанию()

// Процедура - обработчик нажатия любой из дополнительных кнопок печати
// Параметры:
//    Форма       : Форма, вызвавшая процедуру
//Процедура ПечатьПоДополнительнойКнопке(ДеревоМакетов, Объект, Форма, ТекстКнопки) Экспорт
Процедура ПечатьПоДополнительнойКнопке(УдалитьДеревоМакетов, Объект, Форма, ТекстКнопки) Экспорт
	
	Если Метаданные.Обработки.Найти("ОбменДаннымиПоОрганизацииИДокументами")<>Неопределено Тогда
		Попытка 
			ФормаОбработкиОбменаДаннымиПоОрганизацииИДокументами = Обработки.ОбменДаннымиПоОрганизацииИДокументами.ПолучитьФорму("Форма");
			Если ФормаОбработкиОбменаДаннымиПоОрганизацииИДокументами.Открыта() Тогда
				СписокОткрытыхОбектов = ФормаОбработкиОбменаДаннымиПоОрганизацииИДокументами.ЭтотОбъект.мСписокОткрытыхОбъектов;
				Если СписокОткрытыхОбектов.НайтиПоЗначению(Объект) <> Неопределено Тогда
					Сообщить("Печать документов, загруженных обработкой ""Обмен данными(по организации) и документами"" запрещена!", СтатусСообщения.Важное);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ куфиб_РаботаСДиалогами.ПроверитьМодифицированностьВФорме(Объект,Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		СтруктураВнутреннихПечатныхФорм = Объект.ПолучитьСтруктуруПечатныхФорм()
	Исключение
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
	КонецПопытки;
	
	ДеревоМакетовПечати = ПолучитьДеревоМакетовПечати(Объект.Ссылка, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаКнопки = ДеревоМакетовПечати.Строки.Найти(ТекстКнопки,"Текст");
	
	Если СтрокаКнопки = Неопределено Тогда
		Предупреждение("Печать не доступна. Изменился набор реквизитов!");
		Возврат;
	КонецЕсли; 
	
	НаПринтер = куфиб_ОбщегоНазначения.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ПечатьДокументовБезПредварительногоПросмотра") = Истина;
	
	Если ТипЗнч(СтрокаКнопки.Расшифровка) = Тип("Структура") Тогда
		ТабДокумент = НапечататьВнешнююФорму(Объект.Ссылка, СтрокаКнопки.Расшифровка);
		Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.НематериальныеАктивы") ИЛИ ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			НапечататьДокумент(ТабДокумент, , НаПринтер, ,Объект.Ссылка);
		Иначе 
			НапечататьДокумент(ТабДокумент, , НаПринтер, куфиб_РаботаСДиалогами.СформироватьЗаголовокДокумента(Объект),Объект.Ссылка);
		КонецЕсли;
	Иначе
		Объект.Печать(СтрокаКнопки.Имя, , НаПринтер);
	КонецЕсли;
	
КонецПроцедуры // ПечатьПоДополнительнойКнопке()

// Процедура открывает форму файлов и изображений по объекту отбора
//
Процедура ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ФормаВладелец, ИмяСправочника = "ХранилищеДополнительнойИнформации") Экспорт

	Если Метаданные.Справочники.Найти(ИмяСправочника)=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаФайлов = Справочники[ИмяСправочника].ПолучитьФорму("ФормаСпискаФайловИИзображений", ФормаВладелец);
	
	// Изображения
	Если СтруктураДляСпискаИзображений.Свойство("ОтборОбъектИспользование") Тогда
		ФормаФайлов.Изображения.Отбор.Объект.Использование = СтруктураДляСпискаИзображений.ОтборОбъектИспользование;
		ФормаФайлов.Изображения.Отбор.Объект.Значение      = СтруктураДляСпискаИзображений.ОтборОбъектЗначение;
	КонецЕсли;
	Если СтруктураДляСпискаИзображений.Свойство("ДоступностьОтбораОбъекта") Тогда
		ФормаФайлов.ЭлементыФормы.Изображения.НастройкаОтбора.Объект.Доступность = СтруктураДляСпискаИзображений.ДоступностьОтбораОбъекта;
	КонецЕсли; 
	Если СтруктураДляСпискаИзображений.Свойство("ВидимостьКолонкиОбъекта") Тогда
		ФормаФайлов.ЭлементыФормы.Изображения.Колонки.Объект.Видимость = СтруктураДляСпискаИзображений.ВидимостьКолонкиОбъекта;
	КонецЕсли; 

	// Дополнительные файлы
	Если СтруктураДляСпискаДополнительныхФайлов.Свойство("ОтборОбъектИспользование") Тогда
		ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Использование = СтруктураДляСпискаДополнительныхФайлов.ОтборОбъектИспользование;
		ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Значение      = СтруктураДляСпискаДополнительныхФайлов.ОтборОбъектЗначение;
	КонецЕсли;
	Если СтруктураДляСпискаДополнительныхФайлов.Свойство("ДоступностьОтбораОбъекта") Тогда
		ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.НастройкаОтбора.Объект.Доступность = СтруктураДляСпискаДополнительныхФайлов.ДоступностьОтбораОбъекта;
	КонецЕсли; 
	Если СтруктураДляСпискаДополнительныхФайлов.Свойство("ВидимостьКолонкиОбъекта") Тогда
		ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.Колонки.Объект.Видимость = СтруктураДляСпискаДополнительныхФайлов.ВидимостьКолонкиОбъекта;
	КонецЕсли; 
	
	ФормаФайлов.ОбязательныеОтборы = ОбязательныеОтборы;
	
	Если СтруктураДляСпискаИзображений.Свойство("ОтборОбъектИспользование") И СтруктураДляСпискаДополнительныхФайлов.Свойство("ОтборОбъектИспользование") Тогда
		Если СтруктураДляСпискаИзображений.ОтборОбъектЗначение = СтруктураДляСпискаДополнительныхФайлов.ОтборОбъектЗначение Тогда
			ФормаФайлов.Заголовок = "Хранилище дополнительной информации (" + СокрЛП(Строка(СтруктураДляСпискаИзображений.ОтборОбъектЗначение)) + ")";
		КонецЕсли;
	КонецЕсли; 
	
	ФормаФайлов.Открыть();

КонецПроцедуры
 
// Процедура - обработчик нажатия любой из дополнительных кнопок заполнения табличных частей
// Параметры:
//    Форма       : Форма, вызвавшая процедуру
Процедура ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(СтрокаКнопки,ЭтотОбъект) Экспорт
	
	Расшифровка = СтрокаКнопки.Расшифровка;
	
	Если ТипЗНЧ(Расшифровка) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = Расшифровка.ПолучитьОбъект();
		
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней обработки заполнения табличной части документа. Возможно обработка была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры = Неопределено;
		МетаданныеОбъекта = ЭтотОбъект.Метаданные();
		СсылкаОбъекта = Неопределено;
		Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
			СсылкаОбъекта = Документы[МетаданныеОбъекта.Имя].ПустаяСсылка();
		ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
			СсылкаОбъекта = Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка();
		КонецЕсли;
		
		Если СсылкаОбъекта <> Неопределено Тогда
			Для Каждого Стр Из Расшифровка.Принадлежность Цикл
				Если (Стр.СсылкаОбъекта = СсылкаОбъекта) И (СокрЛП(Стр.ТабличнаяЧастьИмя) = СтрокаКнопки.Родитель.Имя) Тогда
					ДополнительныеПараметры = Стр.ДополнительныеПараметрыОбработки.Получить();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Попытка
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Исключение
			Сообщить("Ошибка исполнения внешней обработки табличной части документа."+Символы.ПС+ОписаниеОшибки(), СтатусСообщения.Важное);
			Возврат;
		КонецПопытки;
		
		// Передать внешней обработке дополнительные параметры
		Если ДополнительныеПараметры <> Неопределено Тогда
			// Если у внешней обработки есть реквизит для дополнительных параметров, присвоить ему значение
			Если НЕ Обработка.Метаданные().Реквизиты.Найти("ДополнительныеПараметры") = Неопределено Тогда
				Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Обработка.Инициализировать(ЭтотОбъект, СтрокаКнопки.Родитель.Имя, СтрокаКнопки.Родитель.Расшифровка);
		Исключение
			куфиб_ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Заполнение ТЧ не произведено!");
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры


// Печатает движения документа
//
// Параметры:
//  ДокументСсылка - ссылка на документ, движения которого печатаем
//
Процедура НапечататьДвиженияДокумента(ДокументСсылка) Экспорт
	Если Метаданные.Отчеты.Найти("ДвиженияДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	// может, ссылки еще не существует? надо сначала записать документ
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Предупреждение("Сначала запишите документ!");
		Возврат;
	КонецЕсли;
	
	// Получим контекст отчета
	ПечатьДвиженийДокумента = Отчеты.ДвиженияДокумента.Создать();

	//Установим реквизиты и переменые отчета
	ПечатьДвиженийДокумента.Документ = ДокументСсылка;

	// Напечатаем движения
	ПечатьДвиженийДокумента.СформироватьОтчет();

КонецПроцедуры // НапечататьДвиженияДокумента()

