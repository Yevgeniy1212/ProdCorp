
/////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ДЛЯ РАБОТЫ С ФИКСИРОВАННЫМИ АКТИВАМИ

// Возвращает ставку налога по выбранной организации на заданную дату
//
Функция ПолучитьСтавкуНалога(Налогоплательщик, ВидНалога, Дата, ВидДохода = Неопределено) Экспорт
	// в случае, если задана ставка для налога по конкретной организации, то возвращается ставка именно этой организаци
	// в противном случае возвращается единая ставка для фирмы в целом
	СтавкаНалога = 0;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
      |	МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК Период
      |ПОМЕСТИТЬ ВТМаксимальныйПериод
      |ИЗ
      |	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений.СрезПоследних(
      |			&Дата,
      |			(Налогоплательщик = &Налогоплательщик
      |				ИЛИ Налогоплательщик = &ПустойНалогоплательщик)
      |				И (ВидДохода = &ВидДохода
      |					ИЛИ ВидДохода = &ПустойВидДохода)
      |				И ВидНалога = &ВидНалога) КАК СведенияОСтавкахНалоговСборовОтчислений
      |;
      |
      |////////////////////////////////////////////////////////////////////////////////
      |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
      |	СведенияОСтавкахНалоговСборовОтчислений.Период КАК Период,
      |	СведенияОСтавкахНалоговСборовОтчислений.ВидДохода КАК ВидДохода,
      |	СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик КАК Налогоплательщик,
	  |	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК Ставка,
      |	ВЫБОР
      |		КОГДА СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &Налогоплательщик
      |				И СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = &ВидДохода
      |			ТОГДА 1
      |		КОГДА СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &Налогоплательщик
      |				И СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = &ПустойВидДохода
      |			ТОГДА 2
      |		КОГДА СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &ПустойНалогоплательщик
      |				И СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = &ВидДохода
      |			ТОГДА 3
      |		КОГДА СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &ПустойНалогоплательщик
      |				И СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = &ПустойВидДохода
      |			ТОГДА 4
      |	КОНЕЦ КАК Приоритет
      |ИЗ
      |	ВТМаксимальныйПериод КАК МаксимальныйПериод
      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
      |		ПО МаксимальныйПериод.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
      |			И (СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &Налогоплательщик
      |				ИЛИ СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &ПустойНалогоплательщик)
      |			И (СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = &ВидДохода
      |				ИЛИ СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = &ПустойВидДохода)
      |			И (СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &ВидНалога)
      |
      |УПОРЯДОЧИТЬ ПО
      |	Приоритет");
						  
	Запрос.УстановитьПараметр("Дата", Дата);					  
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);					  
	Запрос.УстановитьПараметр("ПустойНалогоплательщик", Справочники.Организации.ПустаяСсылка());					  
	Запрос.УстановитьПараметр("ВидНалога", ВидНалога);	
	Запрос.УстановитьПараметр("ВидДохода", ?(ВидДохода = Неопределено, Справочники.ВидыДоходов.ПустаяСсылка(), ВидДохода));
	Запрос.УстановитьПараметр("ПустойВидДохода", Справочники.ВидыДоходов.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Если не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СтавкаНалога = Выборка.Ставка;
	КонецЕсли;	
	
	Возврат СтавкаНалога;
	
КонецФункции // ПолучитьСтавкуНалога()

// Возвращает ставку налога на заданную дату
//
Функция ПолучитьСтавкуОСМС(Дата, ВидДохода = Неопределено, ВидВзносыОтчисления = "Взносы", Налогоплательщик = Неопределено) Экспорт
		
	// в случае, если задана ставка для налога по конкретной организации, то возвращается ставка именно этой организаци
	// в противном случае возвращается единая ставка для фирмы в целом
	Ставка = 0;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	МАКСИМУМ(СведенияОСтавкахОСМССрезПоследних.Период) КАК Период
	                      |ПОМЕСТИТЬ ВТМаксимальныйПериод
	                      |ИЗ
	                      |	РегистрСведений.СведенияОСтавкахОСМС.СрезПоследних(
	                      |			&Дата,
	                      |			(Налогоплательщик = &парамНалогоплательщик
	                      |				ИЛИ Налогоплательщик = &ПустойНалогоплательщик)
	                      |				И ВидДохода = &ВидДохода) КАК СведенияОСтавкахОСМССрезПоследних
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	СведенияОСтавкахОСМС.Период КАК Период,
	                      |	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	                      |	СведенияОСтавкахОСМС.Налогоплательщик КАК Налогоплательщик,
	                      |	СведенияОСтавкахОСМС.СтавкаВзносы КАК СтавкаВзносы,
	                      |	СведенияОСтавкахОСМС.СтавкаОтчисления КАК СтавкаОтчисления,
	                      |	ВЫБОР
	                      |		КОГДА СведенияОСтавкахОСМС.Налогоплательщик = &парамНалогоплательщик
	                      |				И СведенияОСтавкахОСМС.ВидДохода = &ВидДохода
	                      |			ТОГДА 1
	                      |		КОГДА СведенияОСтавкахОСМС.Налогоплательщик = &ПустойНалогоплательщик
	                      |				И СведенияОСтавкахОСМС.ВидДохода = &ВидДохода
	                      |			ТОГДА 2
	                      |	КОНЕЦ КАК Приоритет
	                      |ИЗ
	                      |	ВТМаксимальныйПериод КАК МаксимальныйПериод
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	                      |		ПО МаксимальныйПериод.Период = СведенияОСтавкахОСМС.Период
	                      |			И (СведенияОСтавкахОСМС.Налогоплательщик = &парамНалогоплательщик
	                      |				ИЛИ СведенияОСтавкахОСМС.Налогоплательщик = &ПустойНалогоплательщик)
	                      |			И (СведенияОСтавкахОСМС.ВидДохода = &ВидДохода)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Приоритет");
						  
						  
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ВидДохода", ?(ВидДохода = Неопределено, Справочники.ВидыДоходов.ДоходыОтРаботодателя, ВидДохода));				  
	Запрос.УстановитьПараметр("парамНалогоплательщик", ?(Налогоплательщик = Неопределено, Справочники.Организации.ПустаяСсылка(), Налогоплательщик));					  
	Запрос.УстановитьПараметр("ПустойНалогоплательщик", Справочники.Организации.ПустаяСсылка());					  			  
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Ставка = Выборка["Ставка" + ВидВзносыОтчисления];
	КонецЕсли;	
	
	Возврат Ставка;

КонецФункции // ПолучитьСтавкуОСМС()

// Возвращает ставку ИПН по выбранной организации на заданную дату
//
Функция ПолучитьСтавкуИПН(Налогоплательщик, ВидДохода, Дата, ПризнакФизЛицоНеРезидент = 0) Экспорт
	// в случае, если задана ставка для налога по конкретной организации, то возвращается ставка именно этой организаци
	// в противном случае возвращается единая ставка для фирмы в целом
	СтавкаНалога = 0;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	МАКСИМУМ(СведенияОСтавкахИПНСрезПоследних.Период) КАК Период
	                      |ПОМЕСТИТЬ ВТМаксимальныйПериод
	                      |ИЗ
	                      |	РегистрСведений.СведенияОСтавкахИПН.СрезПоследних(
	                      |			&Дата,
	                      |			(Налогоплательщик = &парамНалогоплательщик
	                      |				ИЛИ Налогоплательщик = &ПустойНалогоплательщик)
	                      |				И ВидДохода = &ВидДохода) КАК СведенияОСтавкахИПНСрезПоследних
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	СведенияОСтавкахИПН.Период КАК Период,
	                      |	СведенияОСтавкахИПН.ВидДохода КАК ВидДохода,
	                      |	СведенияОСтавкахИПН.Налогоплательщик КАК Налогоплательщик,
	                      |	СведенияОСтавкахИПН.Ставка,
                          |	СведенияОСтавкахИПН.СтавкаНерезиденты,
	                      |	ВЫБОР
	                      |		КОГДА СведенияОСтавкахИПН.Налогоплательщик = &парамНалогоплательщик
	                      |				И СведенияОСтавкахИПН.ВидДохода = &ВидДохода
	                      |			ТОГДА 1
	                      |		КОГДА СведенияОСтавкахИПН.Налогоплательщик = &ПустойНалогоплательщик
	                      |				И СведенияОСтавкахИПН.ВидДохода = &ВидДохода
	                      |			ТОГДА 2
	                      |	КОНЕЦ КАК Приоритет
	                      |ИЗ
	                      |	ВТМаксимальныйПериод КАК МаксимальныйПериод
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахИПН КАК СведенияОСтавкахИПН
	                      |		ПО МаксимальныйПериод.Период = СведенияОСтавкахИПН.Период
	                      |			И (СведенияОСтавкахИПН.Налогоплательщик = &парамНалогоплательщик
	                      |				ИЛИ СведенияОСтавкахИПН.Налогоплательщик = &ПустойНалогоплательщик)
	                      |			И (СведенияОСтавкахИПН.ВидДохода = &ВидДохода)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Приоритет");
							  
	Запрос.УстановитьПараметр("Дата", Дата);					  
	Запрос.УстановитьПараметр("парамНалогоплательщик", Налогоплательщик);					  
	Запрос.УстановитьПараметр("ПустойНалогоплательщик", Справочники.Организации.ПустаяСсылка());					  
	Запрос.УстановитьПараметр("ВидДохода", ?(ВидДохода = Справочники.ВидыДоходов.ПустаяСсылка(), Справочники.ВидыДоходов.ДоходыОтРаботодателя, ВидДохода));					  
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если ПризнакФизЛицоНеРезидент = 1 Тогда
			СтавкаНалога = Выборка.СтавкаНерезиденты;
		Иначе 
			СтавкаНалога = Выборка.Ставка;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат СтавкаНалога;
КонецФункции // ПолучитьСтавкуНалога()

// Функция возвращает признак плательщика НДС для выбранной организации
//
// Параметры:
//  Организация - СправочникСсылка.Организации, элемент справочника, для которого необходимо получить
//  			признак пдательщика НДС
//
// Возвращаемое значение:
//	Истина 	- в случае, если на заданную дату организация являлась плательщиком НДС
// 	Ложь	- в случае, если на заданную дату организация не являлась плательщиком НДС
//  В случае, если нужные сведения отсутствуют по-умолчанию возвращается Истина
//
Функция ПолучитьПризнакПлательщикаНДС(Организация, знач Дата, УчетнаяПолитикаНУ = Неопределено) экспорт
	
	// Если значение не задано
	// по умолчанию присваиваем значение Истина
	ОрганизацияЯвляетсяПлательщикомНДС	= Истина;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	УчетнаяПолитикаНУ	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(	Дата, Ложь, Организация, "Нал");	
																			
	Если УчетнаяПолитикаНУ.Свойство("ОрганизацияЯвляетсяПлательщикомНДС") Тогда
		ОрганизацияЯвляетсяПлательщикомНДС = УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомНДС;
	КонецЕсли;		
	
	Возврат ОрганизацияЯвляетсяПлательщикомНДС;
	
КонецФункции // ПолучитьПризнакПлательщикаНДС()

// Функция возвращает признак плательщика Акциза для выбранной организации
//
// Параметры:
//  Организация - СправочникСсылка.Организации, элемент справочника, для которого необходимо получить
//  			признак пдательщика Акциза
//
// Возвращаемое значение:
//	Истина 	- в случае, если на заданную дату организация являлась плательщиком Акциза
// 	Ложь	- в случае, если на заданную дату организация не являлась плательщиком Акциза
//  В случае, если нужные сведения отсутствуют по-умолчанию возвращается Истина
//
Функция ПолучитьПризнакПлательщикаАкциза(Организация, знач Дата, УчетнаяПолитикаНУ = Неопределено) экспорт
	
	// Если значение не задано
	// по умолчанию присваиваем значение Истина
	ОрганизацияЯвляетсяПлательщикомАкциза = Истина;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	УчетнаяПолитикаНУ	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(	Дата, Ложь, Организация, "Нал");	
																			
	Если УчетнаяПолитикаНУ.Свойство("ОрганизацияЯвляетсяПлательщикомАкциза") Тогда
		ОрганизацияЯвляетсяПлательщикомАкциза = УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомАкциза;
	КонецЕсли;		
	
	Возврат ОрганизацияЯвляетсяПлательщикомАкциза;
	
КонецФункции // ПолучитьПризнакПлательщикаНДС()
                                                     
// Функция возвращает признак плательщика СН для выбранной организации.
//
Функция ПолучитьПризнакПлательщикаСоциальногоНалога(Организация, Знач Дата) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаАктуальности", Дата);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомСН, ИСТИНА) КАК ОрганизацияЯвляетсяПлательщикомСН
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(
	|				&ДатаАктуальности,
	|				Организация = &парамОрганизация) КАК УчетнаяПолитикаНУ
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ОрганизацияЯвляетсяПлательщикомСН;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // ПолучитьПризнакПлательщикаСоциальногоНалога()

// Функция возвращает признак вкладчика ОППВ для выбранной организации.
//
Функция ПолучитьПризнакВкладчикаПрофПенсионныхВзносов(Организация, Знач Дата) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаАктуальности", Дата);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетнаяПолитикаНУ.ОрганизацияЯвляетсяВкладчикомОППВ КАК ОрганизацияЯвляетсяВкладчикомОППВ
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(
		|							&ДатаАктуальности, 
		|							Организация = &парамОрганизация) КАК УчетнаяПолитикаНУ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ОрганизацияЯвляетсяВкладчикомОППВ;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ПолучитьПризнакВкладчикаПрофПенсионныхВзносов()

// Функция возвращает налогоплательщика для переданной структурной единицы
//
// Параметры:
//	СтруктурнаяЕдиница - Организация/Подразделение организации
//	Организация - организация из шапки документа
//	глИсчислениеНалоговСтруктурныхЕдиниц - значение глобальной переменной
//	РазделНУ - значение перечисления РазделыНалоговогоУчета
//
Функция ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктурнаяЕдиница, Организация, глИсчислениеНалоговСтруктурныхЕдиниц, РазделНУ) Экспорт
	
	ЗаписьОСтруктурнойЕдинице = Неопределено;
	
	Если глИсчислениеНалоговСтруктурныхЕдиниц <> Неопределено Тогда
		ЗаписьОСтруктурнойЕдинице = глИсчислениеНалоговСтруктурныхЕдиниц[СтруктурнаяЕдиница];
		Если ЗаписьОСтруктурнойЕдинице = Неопределено Тогда
			ЗаписьОСтруктурнойЕдинице = глИсчислениеНалоговСтруктурныхЕдиниц[Организация];
		КонецЕсли;
	КонецЕсли;

	Если ЗаписьОСтруктурнойЕдинице = Неопределено Тогда
		Если ТипЗнч("СтруктурнаяЕдиница") = Тип("СправочникСсылка.Организации") Тогда
			Возврат СтруктурнаяЕдиница;
		Иначе
			Возврат Организация;
		КонецЕсли;
	Иначе
		ИмяРазделаНУ = Метаданные.Перечисления.РазделыНалоговогоУчета.ЗначенияПеречисления[Перечисления.РазделыНалоговогоУчета.Индекс(РазделНУ)].Имя;
		Возврат ЗаписьОСтруктурнойЕдинице[ИмяРазделаНУ].Налогоплательщик;
    КонецЕсли;

КонецФункции // ПолучитьНалогоплательщикаСтруктурнойЕдиницы()

// Функция возвращает налоговый комитет для переданной структурной единицы
//
// Параметры:
//	СтруктурнаяЕдиница - Организация/Подразделение организации
//	Организация - организация из шапки документа
//	глИсчислениеНалоговСтруктурныхЕдиниц - значение глобальной переменной
//	РазделНУ - значение перечисления РазделыНалоговогоУчета
//
Функция ПолучитьНалоговыйКомитетСтруктурнойЕдиницы(СтруктурнаяЕдиница, Организация, глИсчислениеНалоговСтруктурныхЕдиниц, РазделНУ) Экспорт
	
	ЗаписьОСтруктурнойЕдинице = Неопределено;
	
	Если глИсчислениеНалоговСтруктурныхЕдиниц <> Неопределено Тогда
		ЗаписьОСтруктурнойЕдинице = глИсчислениеНалоговСтруктурныхЕдиниц[СтруктурнаяЕдиница];
		Если ЗаписьОСтруктурнойЕдинице = Неопределено Тогда
			ЗаписьОСтруктурнойЕдинице = глИсчислениеНалоговСтруктурныхЕдиниц[Организация];
		КонецЕсли;
	КонецЕсли;

	Если ЗаписьОСтруктурнойЕдинице = Неопределено Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		ИмяРазделаНУ = Метаданные.Перечисления.РазделыНалоговогоУчета.ЗначенияПеречисления[Перечисления.РазделыНалоговогоУчета.Индекс(РазделНУ)].Имя;
		Возврат ЗаписьОСтруктурнойЕдинице[ИмяРазделаНУ].НалоговыйКомитет;
    КонецЕсли;

КонецФункции // ПолучитьНалоговыйКомитетСтруктурнойЕдиницы()

// Функция возвращает порядок списания задолженности по зарплате.
//
Функция ПолучитьПризнакПорядокСписанияЗадолженностиПоЗарплате(Организация, Знач Дата) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаАктуальности", Дата);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.ПорядокСписанияЗадолженностиПоЗарплате, ЗНАЧЕНИЕ(Перечисление.ПорядокСписанияЗадолженностиПоЗарплате.ПоСпособуЗаполненияДокумента)) КАК УчетЗадолженностиПоМесяцам
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(
	|				&ДатаАктуальности,
	|				Организация = &парамОрганизация) КАК УчетнаяПолитикаНУ
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.УчетЗадолженностиПоМесяцам;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ПолучитьПризнакПорядокСписанияЗадолженностиПоЗарплате()

// Функция возвращает признак распределения налогов по структурным единицам.
//
Функция ПолучитьПризнакиРаспределенияНалогов(Организация, Знач Дата) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаАктуальности", Дата);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетнаяПолитикаНУ.РаспределятьНалогиПоСтруктурнымЕдиницам,
		|	УчетнаяПолитикаНУ.РаспределятьНалогиПоПодразделениямОрганизаций
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ДатаАктуальности, Организация = &парамОрганизация) КАК УчетнаяПолитикаНУ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПризнаковРаспределения = Новый Структура;
	
	Если Выборка.Следующий() Тогда
    	СтруктураПризнаковРаспределения.Вставить("РаспределятьНалогиПоСтруктурнымЕдиницам", Выборка.РаспределятьНалогиПоСтруктурнымЕдиницам);
    	СтруктураПризнаковРаспределения.Вставить("РаспределятьНалогиПоПодразделениямОрганизаций", Выборка.РаспределятьНалогиПоПодразделениямОрганизаций);
	Иначе
    	СтруктураПризнаковРаспределения.Вставить("РаспределятьНалогиПоСтруктурнымЕдиницам", Ложь);
    	СтруктураПризнаковРаспределения.Вставить("РаспределятьНалогиПоПодразделениямОрганизаций", Ложь);
	КонецЕсли;
	
    Возврат СтруктураПризнаковРаспределения;
	
КонецФункции // ПолучитьПризнакПлательщикаСоциальногоНалога()


// Функция возвращает признак отражения по периоду регистрации. // ISO 20022
//
Функция ПолучитьПризнакОтраженияПоПериодуРегистрации(Организация, Знач Дата) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаАктуальности", Дата);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ДатаАктуальности, Организация = &парамОрганизация) КАК УчетнаяПолитикаНУ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Признак = Ложь;
	
	Если Выборка.Следующий() Тогда
		Признак = Выборка.ОтражениеПоПериодуРегистрации;
	КонецЕсли;
	
	Возврат Признак;
	
КонецФункции // ПолучитьПризнакПлательщикаСоциальногоНалога() // ISO 20022

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ СО СТРУКТУРНЫМИ ПОДРАЗДЕЛЕНИЯМИ
 
// Функция возвращает список всех возможных налогоплательщиков по разделу налогового учета
//
Функция СформироватьСписокНалогоплательщиков(РазделНалоговогоУчета = Неопределено) Экспорт
    		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("РазделНалоговогоУчета", РазделНалоговогоУчета);
	
	Запрос.Текст = "
	|// самостоятельные организации-налогоплательщики, которых не заводили в регистр ИсчислениеНалоговСтруктурныхЕдиниц
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Налогоплательщик,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Если Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить() Тогда // если ведется учет по структурным единицам - получаем данные из регистра сведений ИсчислениеНалоговСтруктурныхЕдиниц
		Запрос.Текст = Запрос.Текст + "	
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов
		|		ПО Организации.Ссылка = ИсчислениеНалогов.СтруктурнаяЕдиница";
		Если ЗначениеЗаполнено(РазделНалоговогоУчета) Тогда
		Запрос.Текст = Запрос.Текст + "
		|			И ИсчислениеНалогов.РазделНалоговогоУчета = &РазделНалоговогоУчета";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|
		|ГДЕ
		|	ИсчислениеНалогов.СтруктурнаяЕдиница ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ // выбираем неповторяющиеся
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсчислениеНалогов.Налогоплательщик,
		|	ИсчислениеНалогов.Налогоплательщик.Наименование КАК Наименование
		|ИЗ
		|	РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов";
		Если ЗначениеЗаполнено(РазделНалоговогоУчета) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	ИсчислениеНалогов.РазделНалоговогоУчета = &РазделНалоговогоУчета";
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|";
	
	СписокНалогоплательщиков = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭлементСписка 				= СписокНалогоплательщиков.Добавить();
		ЭлементСписка.Значение 		= Выборка.Налогоплательщик;
		ЭлементСписка.Представление = Выборка.Наименование;
	КонецЦикла;

	Возврат СписокНалогоплательщиков;

КонецФункции // СформироватьСписокНалогоплательщиков

// Функция формирует список налоговых комитетов, в которые может сдавать отчетность выбранных налогоплательщик
//
// Параметры:
//	Налогоплательщик - СправочникСсылка.Организации/СправочникСсылка.ПодразделенияОрганизаций - налогоплательщик
//	РазделНалоговогоУчета - значение перечисления РазделыНалоговогоУчета
//
// Возвращаемое значение:
//		Список значений, содержащий налоговых комитетов, удовлетворяющие условию отбора
//
Функция СформироватьСписокНалоговыхКомитетов(Налогоплательщик, РазделНалоговогоУчета) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("РазделНалоговогоУчета", РазделНалоговогоУчета);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ИсчислениеНалогов.НалоговыйКомитет = &ПустойКонтрагент
	|			ТОГДА ИсчислениеНалогов.Налогоплательщик.НалоговыйКомитет
	|		ИНАЧЕ ИсчислениеНалогов.НалоговыйКомитет
	|	КОНЕЦ КАК НалоговыйКомитет,
	|	ВЫБОР
	|		КОГДА ИсчислениеНалогов.НалоговыйКомитет = &ПустойКонтрагент
	|			ТОГДА ИсчислениеНалогов.Налогоплательщик.НалоговыйКомитет.Наименование
	|		ИНАЧЕ ИсчислениеНалогов.НалоговыйКомитет.Наименование
	|	КОНЕЦ КАК НаименованиеНК
	|ИЗ
	|	РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов
	|ГДЕ
	|	ИсчислениеНалогов.Налогоплательщик = &Налогоплательщик
	|	И ИсчислениеНалогов.РазделНалоговогоУчета = &РазделНалоговогоУчета
	|
	|ОБЪЕДИНИТЬ // неповторяющиеся
	|
	|ВЫБРАТЬ 
	|	// если самого налогоплательщика нет в регистре, то берем налоговый комитет из справочника Организации
	|	ВЫБОР
	|		КОГДА НЕ(ИсчислениеНалогов.НалоговыйКомитет ЕСТЬ NULL)
	|			ТОГДА ВЫБОР
	|					КОГДА ИсчислениеНалогов.НалоговыйКомитет = &ПустойКонтрагент
	|						ТОГДА ИсчислениеНалогов.Налогоплательщик.НалоговыйКомитет
	|					ИНАЧЕ ИсчислениеНалогов.НалоговыйКомитет
	|				  КОНЕЦ
	|		ИНАЧЕ Организации.НалоговыйКомитет
	|	КОНЕЦ КАК НалоговыйКомитет,
	|	ВЫБОР
	|		КОГДА НЕ(ИсчислениеНалогов.НалоговыйКомитет ЕСТЬ NULL)
	|			ТОГДА ВЫБОР
	|					КОГДА ИсчислениеНалогов.НалоговыйКомитет = &ПустойКонтрагент
	|						ТОГДА ИсчислениеНалогов.Налогоплательщик.НалоговыйКомитет.Наименование
	|					ИНАЧЕ ИсчислениеНалогов.НалоговыйКомитет.Наименование
	|				  КОНЕЦ
	|		ИНАЧЕ Организации.НалоговыйКомитет.Наименование
	|	КОНЕЦ КАК НаименованиеНК
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов
	|		ПО ИсчислениеНалогов.СтруктурнаяЕдиница = &Налогоплательщик
	|			И ИсчислениеНалогов.РазделНалоговогоУчета = &РазделНалоговогоУчета
	|
	|ГДЕ
	|	Организации.Ссылка = &Налогоплательщик
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеНК
	|";
	
	СписокНК = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.НалоговыйКомитет) Тогда
			ЭлементСписка 				= СписокНК.Добавить();
			ЭлементСписка.Значение 		= Выборка.НалоговыйКомитет;
			ЭлементСписка.Представление = Выборка.НаименованиеНК;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокНК;

КонецФункции // СформироватьСписокНалоговыхКомитетов()

// Функция формирует список структурных единиц
//
// Параметры:
//	РазделНалоговогоУчета - значение перечисления РазделыНалоговогоУчета
//	НалоговыйКомитет - СправочникСсылка.Контрагенты - налоговый комитет, в котором зарегистрированы структурные единицы
//	Налогоплательщик - СправочникСсылка.Организации/СправочникСсылка.ПодразделенияОрганизаций - налогоплательщик, по которому отбирать
//
// Возвращаемое значение:
//		Список значений, содержащий структурные единицы, удовлетворяющие условию отбора
//
Функция СформироватьСписокСтруктурныхЕдиниц(РазделНалоговогоУчета, НалоговыйКомитет = Неопределено, Налогоплательщик = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НалоговыйКомитет", НалоговыйКомитет);
	Запрос.УстановитьПараметр("РазделНалоговогоУчета", РазделНалоговогоУчета);
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК СтруктурнаяЕдиница,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов
	|		ПО Организации.Ссылка = ИсчислениеНалогов.СтруктурнаяЕдиница
	|			И ИсчислениеНалогов.РазделНалоговогоУчета = &РазделНалоговогоУчета";
	
	ТекстУсловия = "";
	
	Если ЗначениеЗаполнено(НалоговыйКомитет) Тогда
		ТекстУсловия = "ЕСТЬNULL(ИсчислениеНалогов.НалоговыйКомитет, Организации.НалоговыйКомитет) = &НалоговыйКомитет";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Налогоплательщик) Тогда
		Если Не ПустаяСтрока(ТекстУсловия) Тогда
			ТекстУсловия = ТекстУсловия + " 
			|	И ";
		КонецЕсли;
		ТекстУсловия = ТекстУсловия + "ЕСТЬNULL(ИсчислениеНалогов.Налогоплательщик, Организации.Ссылка) = &Налогоплательщик";
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстУсловия) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ " + ТекстУсловия;
	КонецЕсли;

	Если НЕ (РазделНалоговогоУчета = Перечисления.РазделыНалоговогоУчета.КПН 
		ИЛИ РазделНалоговогоУчета = Перечисления.РазделыНалоговогоУчета.НДС) Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК СтруктурнаяЕдиница,
		|	ПодразделенияОрганизаций.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов_Подр
		|		ПО ПодразделенияОрганизаций.Ссылка = ИсчислениеНалогов_Подр.СтруктурнаяЕдиница
		|			И ИсчислениеНалогов_Подр.РазделНалоговогоУчета = &РазделНалоговогоУчета
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов_Орг
		|		ПО ПодразделенияОрганизаций.Владелец = ИсчислениеНалогов_Орг.СтруктурнаяЕдиница
		|			И ИсчислениеНалогов_Орг.РазделНалоговогоУчета = &РазделНалоговогоУчета
		|ГДЕ
		|	ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением";
		
		Если ЗначениеЗаполнено(НалоговыйКомитет) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И ЕСТЬNULL(ИсчислениеНалогов_Подр.НалоговыйКомитет, ЕСТЬNULL(ИсчислениеНалогов_Подр.НалоговыйКомитет, ПодразделенияОрганизаций.Владелец.НалоговыйКомитет)) = &НалоговыйКомитет";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Налогоплательщик) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И ЕСТЬNULL(ИсчислениеНалогов_Подр.Налогоплательщик, ЕСТЬNULL(ИсчислениеНалогов_Орг.Налогоплательщик, ПодразделенияОрганизаций.Владелец)) = &Налогоплательщик";
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|";

    СписокСтруктурныхЕдиниц = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовыйЭлемент 				= СписокСтруктурныхЕдиниц.Добавить();
		НовыйЭлемент.Значение 		= Выборка.СтруктурнаяЕдиница;
		НовыйЭлемент.Представление 	= Выборка.Наименование;
	КонецЦикла;
	
	Возврат СписокСтруктурныхЕдиниц;

КонецФункции // СформироватьСписокСтруктурныхЕдиниц()

// Функция возвращает список организаций, для которых налогоплательщиком является указанный 
//
// Параметры:
//	Налогоплательщик - налогоплательщик, организации которого требуется получить
//	РазделНалоговогоУчета - значение перечисления РазделыНалоговогоУчета
//	ТолькоГоловныеОрганизации - булево, если истина, то выбираются только головные организации
//
// Возвращаемое значение:
//	Список значений, содержащий отобранные организации
//
Функция СформироватьСписокОрганизацийНалогоплательщика(Налогоплательщик, РазделНалоговогоУчета, ТолькоГоловныеОрганизации = Ложь) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("РазделНалоговогоУчета", РазделНалоговогоУчета);
	
	Если ТолькоГоловныеОрганизации Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА Организации.Ссылка
		|		ИНАЧЕ Организации.ГоловнаяОрганизация
		|	КОНЕЦ КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА Организации.Наименование
		|		ИНАЧЕ Организации.ГоловнаяОрганизация.Наименование
		|	КОНЕЦ КАК Наименование
		|ИЗ
		|	Справочник.Организации КАК Организации
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов
		|		ПО Организации.Ссылка = ИсчислениеНалогов.СтруктурнаяЕдиница
		|			И ИсчислениеНалогов.РазделНалоговогоУчета = &РазделНалоговогоУчета
		|ГДЕ
		|	ЕСТЬNULL(ИсчислениеНалогов.Налогоплательщик, Организации.Ссылка) = &Налогоплательщик
		|";
	Иначе
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка,
		|	Организации.Наименование
		|ИЗ
		|	Справочник.Организации КАК Организации
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов
		|		ПО Организации.Ссылка = ИсчислениеНалогов.СтруктурнаяЕдиница
		|			И ИсчислениеНалогов.РазделНалоговогоУчета = &РазделНалоговогоУчета
		|ГДЕ
		|	ЕСТЬNULL(ИсчислениеНалогов.Налогоплательщик, Организации.Ссылка) = &Налогоплательщик
		|";
	КонецЕсли;
	
	СписокОрганизаций = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовыйЭлемент 				= СписокОрганизаций.Добавить();
		НовыйЭлемент.Значение 		= Выборка.Ссылка;
		НовыйЭлемент.Представление 	= Выборка.Наименование;
	КонецЦикла;
	
	Возврат СписокОрганизаций;

КонецФункции // СформироватьСписокОрганизацийНалогоплательщика()
////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ НАЛОГОВОГО УЧЕТА
                    
// Процедура формирует корреспонденции в налоговом учете
// по отражению постоянных разниц для документов,
// в которых не установлен признак отражения в НУ.
// Процедура необходима для предприятий, которые являются плательщиками КПН, но  не ведут учет временных разниц
//
Процедура ОтразитьПостоянныеРазницыВНУ(ДокументОбъект, СтруктураШапкиДокумента, ВыдаватьСообщения, ЗаписыватьПроводкиБУ = Истина) экспорт
	
	Если Не СтруктураШапкиДокумента.УчитыватьКПН тогда
		Возврат;
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
		Возврат;
	КонецЕсли;	
	
	Если СтруктураШапкиДокумента.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ Тогда
		Возврат;
	КонецЕсли;	
	
	//ВидУчетаНУ  = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;	
	ВидУчетаНУ = СтруктураШапкиДокумента.ВидУчетаНУ;
	
	Если ЗаписыватьПроводкиБУ Тогда
		ПроводкиБУ = ДокументОбъект.Движения.Типовой;
		ПроводкиБУ.Записать();
	КонецЕсли;

	ПроводкиНУ = ДокументОбъект.Движения.Налоговый;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДТ.НомерСтроки,
	                      |	ДТ.СчетДт,
	                      |	ДТ.СубконтоДт1,
	                      |	ДТ.СубконтоДт2,
	                      |	ДТ.СубконтоДт3,
	                      |	ДТ.СчетКт,
	                      |	ДТ.СубконтоКт1,
	                      |	ДТ.СубконтоКт2,
	                      |	ДТ.СубконтоКт3,
	                      |	ДТ.Сумма,
	                      |	ДТ.Содержание,
	                      |	ДТ.Приоритет,
	                      |	ДТ.СчетНУ КАК СчетДтНУ,
	                      |	ДТ.НомерСтроки КАК НомерСтроки1,
	                      |	Кт.СчетНУ КАК СчетКтНУ,
	                      |	ДТ.СубконтоНУ1 КАК СубконтоДтНУ1,
	                      |	ДТ.СубконтоНУ2 КАК СубконтоДтНУ2,
	                      |	ДТ.СубконтоНУ3 КАК СубконтоДтНУ3,
	                      |	Кт.СубконтоНУ1 КАК СубконтоКтНУ1,
	                      |	Кт.СубконтоНУ2 КАК СубконтоКтНУ2,
	                      |	Кт.СубконтоНУ3 КАК СубконтоКтНУ3,
	                      |	ДТ.Организация,
	                      |	ДТ.НомерЖурнала,
	                      |	ДТ.Период,
	                      |	ДТ.СтруктурноеПодразделениеДт,
	                      |	Кт.СтруктурноеПодразделениеКт
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		ДвиженияДт.СчетДт КАК СчетДт,
	                      |		ДвиженияДт.СубконтоДт1 КАК СубконтоДт1,
	                      |		ДвиженияДт.СубконтоДт2 КАК СубконтоДт2,
	                      |		ДвиженияДт.СубконтоДт3 КАК СубконтоДт3,
	                      |		ДвиженияДт.СчетКт КАК СчетКт,
	                      |		ДвиженияДт.СубконтоКт1 КАК СубконтоКт1,
	                      |		ДвиженияДт.СубконтоКт2 КАК СубконтоКт2,
	                      |		ДвиженияДт.СубконтоКт3 КАК СубконтоКт3,
	                      |		ДвиженияДт.Сумма КАК Сумма,
	                      |		ДвиженияДт.Содержание КАК Содержание,
	                      |		ДвиженияДт.Приоритет КАК Приоритет,
	                      |		ДанныеНУДт.СчетНУ КАК СчетНУ,
	                      |		ДвиженияДт.НомерСтроки КАК НомерСтроки,
	                      |		ДанныеНУДт.СубконтоНУ1 КАК СубконтоНУ1,
	                      |		ДанныеНУДт.СубконтоНУ2 КАК СубконтоНУ2,
	                      |		ДанныеНУДт.СубконтоНУ3 КАК СубконтоНУ3,
	                      |		ДвиженияДт.Организация КАК Организация,
	                      |		ДвиженияДт.НомерЖурнала КАК НомерЖурнала,
	                      |		ДвиженияДт.Период КАК Период,
	                      |		ДвиженияДт.СтруктурноеПодразделениеДт КАК СтруктурноеПодразделениеДт
	                      |	ИЗ
	                      |		(ВЫБРАТЬ
	                      |			ТиповойДвиженияССубконто.СчетДт КАК СчетДт,
	                      |			ТиповойДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
	                      |			ТиповойДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
	                      |			ТиповойДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
	                      |			ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	                      |			ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	                      |			ТиповойДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
	                      |			ТиповойДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
	                      |			ТиповойДвиженияССубконто.Сумма КАК Сумма,
	                      |			ТиповойДвиженияССубконто.Содержание КАК Содержание,
	                      |			МАКСИМУМ(ВЫБОР
	                      |					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетКт
	                      |							И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт1
	                      |								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт2
	                      |								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт3)
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоДт1
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = ТиповойДвиженияССубконто.СубконтоДт2
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = ТиповойДвиженияССубконто.СубконтоДт3
	                      |						ТОГДА 10
	                      |					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетКт
	                      |							И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт1
	                      |								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт2
	                      |								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт3)
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоДт1
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = ТиповойДвиженияССубконто.СубконтоДт2
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО
	                      |						ТОГДА 5
	                      |					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетКт
	                      |							И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт1
	                      |								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт2
	                      |								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт3)
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоДт1
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО
	                      |						ТОГДА 4
	                      |					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетКт
	                      |							И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт1
	                      |								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт2
	                      |								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт3)
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО
	                      |						ТОГДА 3
	                      |					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетКт
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = НЕОПРЕДЕЛЕНО
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО
	                      |						ТОГДА 2
	                      |					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = &ПустойСчетНУ
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = НЕОПРЕДЕЛЕНО
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО
	                      |						ТОГДА 1
	                      |				КОНЕЦ) КАК Приоритет,
	                      |			ТиповойДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	                      |			ТиповойДвиженияССубконто.Организация КАК Организация,
	                      |			ТиповойДвиженияССубконто.НомерЖурнала КАК НомерЖурнала,
	                      |			ТиповойДвиженияССубконто.Период КАК Период,
	                      |			ТиповойДвиженияССубконто.СтруктурноеПодразделениеДт КАК СтруктурноеПодразделениеДт
	                      |		ИЗ
	                      |			РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &Ссылка, , ) КАК ТиповойДвиженияССубконто
	                      |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(&Дата, ) КАК СоответствиеСчетовБУиНУСрезПоследних
	                      |				ПО ТиповойДвиженияССубконто.СчетДт = СоответствиеСчетовБУиНУСрезПоследних.СчетБУ
	                      |		
	                      |		СГРУППИРОВАТЬ ПО
	                      |			ТиповойДвиженияССубконто.СубконтоДт2,
	                      |			ТиповойДвиженияССубконто.СчетДт,
	                      |			ТиповойДвиженияССубконто.СубконтоКт3,
	                      |			ТиповойДвиженияССубконто.СубконтоДт3,
	                      |			ТиповойДвиженияССубконто.СубконтоДт1,
	                      |			ТиповойДвиженияССубконто.СубконтоКт2,
	                      |			ТиповойДвиженияССубконто.СчетКт,
	                      |			ТиповойДвиженияССубконто.СубконтоКт1,
	                      |			ТиповойДвиженияССубконто.Содержание,
	                      |			ТиповойДвиженияССубконто.Сумма,
	                      |			ТиповойДвиженияССубконто.НомерСтроки,
	                      |			ТиповойДвиженияССубконто.НомерЖурнала,
	                      |			ТиповойДвиженияССубконто.Период,
	                      |			ТиповойДвиженияССубконто.Организация,
	                      |			ТиповойДвиженияССубконто.СтруктурноеПодразделениеДт) КАК ДвиженияДт
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |				ТиповойДвиженияССубконто.СчетДт КАК СчетДт,
	                      |				ТиповойДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
	                      |				ТиповойДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
	                      |				ТиповойДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
	                      |				ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	                      |				ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	                      |				ТиповойДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
	                      |				ТиповойДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
	                      |				ТиповойДвиженияССубконто.Сумма КАК Сумма,
	                      |				ТиповойДвиженияССубконто.Содержание КАК Содержание,
	                      |				ВЫБОР
	                      |					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетКт
	                      |							И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт1
	                      |								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт2
	                      |								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт3)
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоДт1
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = ТиповойДвиженияССубконто.СубконтоДт2
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = ТиповойДвиженияССубконто.СубконтоДт3
	                      |						ТОГДА 10
	                      |					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетКт
	                      |							И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт1
	                      |								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт2
	                      |								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт3)
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоДт1
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = ТиповойДвиженияССубконто.СубконтоДт2
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО
	                      |						ТОГДА 5
	                      |					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетКт
	                      |							И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт1
	                      |								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт2
	                      |								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт3)
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоДт1
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО
	                      |						ТОГДА 4
	                      |					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетКт
	                      |							И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт1
	                      |								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт2
	                      |								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт3)
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО
	                      |						ТОГДА 3
	                      |					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетКт
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = НЕОПРЕДЕЛЕНО
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО
	                      |						ТОГДА 2
	                      |					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = &ПустойСчетНУ
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = НЕОПРЕДЕЛЕНО
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО
	                      |							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО
	                      |						ТОГДА 1
	                      |				КОНЕЦ КАК Приоритет,
	                      |				СоответствиеСчетовБУиНУСрезПоследних.СчетНУ КАК СчетНУ,
	                      |				СоответствиеСчетовБУиНУСрезПоследних.СубконтоНУ1 КАК СубконтоНУ1,
	                      |				СоответствиеСчетовБУиНУСрезПоследних.СубконтоНУ2 КАК СубконтоНУ2,
	                      |				СоответствиеСчетовБУиНУСрезПоследних.СубконтоНУ3 КАК СубконтоНУ3,
	                      |				ТиповойДвиженияССубконто.НомерСтроки КАК НомерСтроки
	                      |			ИЗ
	                      |				РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &Ссылка, , ) КАК ТиповойДвиженияССубконто
	                      |					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(&Дата, ) КАК СоответствиеСчетовБУиНУСрезПоследних
	                      |					ПО ТиповойДвиженияССубконто.СчетДт = СоответствиеСчетовБУиНУСрезПоследних.СчетБУ
	                      |			ГДЕ
	                      |				СоответствиеСчетовБУиНУСрезПоследних.Учитывается = ИСТИНА) КАК ДанныеНУДт
	                      |			ПО ДвиженияДт.НомерСтроки = ДанныеНУДт.НомерСтроки
	                      |				И ДвиженияДт.Приоритет = ДанныеНУДт.Приоритет) КАК ДТ
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |			ДвиженияКт.СчетДт КАК СчетДт,
	                      |			ДвиженияКт.СубконтоДт1 КАК СубконтоДт1,
	                      |			ДвиженияКт.СубконтоДт2 КАК СубконтоДт2,
	                      |			ДвиженияКт.СубконтоДт3 КАК СубконтоДт3,
	                      |			ДвиженияКт.СчетКт КАК СчетКт,
	                      |			ДвиженияКт.СубконтоКт1 КАК СубконтоКт1,
	                      |			ДвиженияКт.СубконтоКт2 КАК СубконтоКт2,
	                      |			ДвиженияКт.СубконтоКт3 КАК СубконтоКт3,
	                      |			ДвиженияКт.Сумма КАК Сумма,
	                      |			ДвиженияКт.Содержание КАК Содержание,
	                      |			ДвиженияКт.Приоритет КАК Приоритет,
	                      |			ДанныеНУКт.СчетНУ КАК СчетНУ,
	                      |			ДвиженияКт.НомерСтроки КАК НомерСтроки,
	                      |			ДанныеНУКт.СубконтоНУ2 КАК СубконтоНУ2,
	                      |			ДанныеНУКт.СубконтоНУ1 КАК СубконтоНУ1,
	                      |			ДанныеНУКт.СубконтоНУ3 КАК СубконтоНУ3,
	                      |			ДвиженияКт.СтруктурноеПодразделениеКт КАК СтруктурноеПодразделениеКт
	                      |		ИЗ
	                      |			(ВЫБРАТЬ
	                      |				ТиповойДвиженияССубконто.СчетДт КАК СчетДт,
	                      |				ТиповойДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
	                      |				ТиповойДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
	                      |				ТиповойДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
	                      |				ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	                      |				ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	                      |				ТиповойДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
	                      |				ТиповойДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
	                      |				ТиповойДвиженияССубконто.Сумма КАК Сумма,
	                      |				ТиповойДвиженияССубконто.Содержание КАК Содержание,
	                      |				МАКСИМУМ(ВЫБОР
	                      |						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетДт
	                      |								И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт1
	                      |									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт2
	                      |									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт3)
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоКт1
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = ТиповойДвиженияССубконто.СубконтоКт2
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = ТиповойДвиженияССубконто.СубконтоКт3
	                      |							ТОГДА 10
	                      |						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетДт
	                      |								И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт1
	                      |									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт2
	                      |									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт3)
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоКт1
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = ТиповойДвиженияССубконто.СубконтоКт2
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО
	                      |							ТОГДА 5
	                      |						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетДт
	                      |								И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт1
	                      |									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт2
	                      |									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт3)
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоКт1
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО
	                      |							ТОГДА 4
	                      |						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетДт
	                      |								И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт1
	                      |									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт2
	                      |									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт3)
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО
	                      |							ТОГДА 3
	                      |						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетДт
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = НЕОПРЕДЕЛЕНО
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО
	                      |							ТОГДА 2
	                      |						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = &ПустойСчетНУ
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = НЕОПРЕДЕЛЕНО
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО
	                      |							ТОГДА 1
	                      |					КОНЕЦ) КАК Приоритет,
	                      |				ТиповойДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	                      |				ТиповойДвиженияССубконто.Организация КАК Организация,
	                      |				ТиповойДвиженияССубконто.НомерЖурнала КАК НомерЖурнала,
	                      |				ТиповойДвиженияССубконто.Период КАК Период,
	                      |				ТиповойДвиженияССубконто.СтруктурноеПодразделениеКт КАК СтруктурноеПодразделениеКт
	                      |			ИЗ
	                      |				РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &Ссылка, , ) КАК ТиповойДвиженияССубконто
	                      |					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(&Дата, ) КАК СоответствиеСчетовБУиНУСрезПоследних
	                      |					ПО ТиповойДвиженияССубконто.СчетКт = СоответствиеСчетовБУиНУСрезПоследних.СчетБУ
	                      |			
	                      |			СГРУППИРОВАТЬ ПО
	                      |				ТиповойДвиженияССубконто.СубконтоДт2,
	                      |				ТиповойДвиженияССубконто.СчетДт,
	                      |				ТиповойДвиженияССубконто.СубконтоКт3,
	                      |				ТиповойДвиженияССубконто.СубконтоДт3,
	                      |				ТиповойДвиженияССубконто.СубконтоДт1,
	                      |				ТиповойДвиженияССубконто.СубконтоКт2,
	                      |				ТиповойДвиженияССубконто.СчетКт,
	                      |				ТиповойДвиженияССубконто.СубконтоКт1,
	                      |				ТиповойДвиженияССубконто.Содержание,
	                      |				ТиповойДвиженияССубконто.Сумма,
	                      |				ТиповойДвиженияССубконто.НомерСтроки,
	                      |				ТиповойДвиженияССубконто.Организация,
	                      |				ТиповойДвиженияССубконто.НомерЖурнала,
	                      |				ТиповойДвиженияССубконто.Период,
	                      |				ТиповойДвиженияССубконто.СтруктурноеПодразделениеКт) КАК ДвиженияКт
	                      |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |					ТиповойДвиженияССубконто.СчетДт КАК СчетДт,
	                      |					ТиповойДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
	                      |					ТиповойДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
	                      |					ТиповойДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
	                      |					ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
	                      |					ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	                      |					ТиповойДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
	                      |					ТиповойДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
	                      |					ТиповойДвиженияССубконто.Сумма КАК Сумма,
	                      |					ТиповойДвиженияССубконто.Содержание КАК Содержание,
	                      |					ВЫБОР
	                      |						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетДт
	                      |								И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт1
	                      |									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт2
	                      |									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт3)
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоКт1
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = ТиповойДвиженияССубконто.СубконтоКт2
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = ТиповойДвиженияССубконто.СубконтоКт3
	                      |							ТОГДА 10
	                      |						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетДт
	                      |								И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт1
	                      |									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт2
	                      |									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт3)
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоКт1
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = ТиповойДвиженияССубконто.СубконтоКт2
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО
	                      |							ТОГДА 5
	                      |						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетДт
	                      |								И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт1
	                      |									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт2
	                      |									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт3)
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоКт1
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО
	                      |							ТОГДА 4
	                      |						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетДт
	                      |								И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт1
	                      |									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт2
	                      |									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт3)
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО
	                      |							ТОГДА 3
	                      |						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетДт
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = НЕОПРЕДЕЛЕНО
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО
	                      |							ТОГДА 2
	                      |						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = &ПустойСчетНУ
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = НЕОПРЕДЕЛЕНО
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО
	                      |								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО
	                      |							ТОГДА 1
	                      |					КОНЕЦ КАК Приоритет,
	                      |					СоответствиеСчетовБУиНУСрезПоследних.СчетНУ КАК СчетНУ,
	                      |					СоответствиеСчетовБУиНУСрезПоследних.СубконтоНУ1 КАК СубконтоНУ1,
	                      |					СоответствиеСчетовБУиНУСрезПоследних.СубконтоНУ2 КАК СубконтоНУ2,
	                      |					СоответствиеСчетовБУиНУСрезПоследних.СубконтоНУ3 КАК СубконтоНУ3,
	                      |					ТиповойДвиженияССубконто.НомерСтроки КАК НомерСтроки
	                      |				ИЗ
	                      |					РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &Ссылка, , ) КАК ТиповойДвиженияССубконто
	                      |						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(&Дата, ) КАК СоответствиеСчетовБУиНУСрезПоследних
	                      |						ПО ТиповойДвиженияССубконто.СчетКт = СоответствиеСчетовБУиНУСрезПоследних.СчетБУ
	                      |				ГДЕ
	                      |					СоответствиеСчетовБУиНУСрезПоследних.Учитывается = ИСТИНА) КАК ДанныеНУКт
	                      |				ПО ДвиженияКт.НомерСтроки = ДанныеНУКт.НомерСтроки
	                      |					И ДвиженияКт.Приоритет = ДанныеНУКт.Приоритет) КАК Кт
	                      |		ПО ДТ.НомерСтроки = Кт.НомерСтроки");
	Запрос.УстановитьПараметр("Дата", СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустойСчетНУ", ПланыСчетов.Типовой.ПустаяСсылка());	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// Сформируем проводки НУ
		СчетДтНУ = Выборка.СчетДтНУ; 
		СчетКтНУ = Выборка.СчетКтНУ;     
		
		ПустойСчетДт = НЕ ЗначениеЗаполнено(СчетДтНУ);
		ПустойСчетКт = НЕ ЗначениеЗаполнено(СчетКтНУ);
		// Если нет аналогов в НУ для обоих счетов БУ - проводки не формируем
		Если ПустойСчетДт И ПустойСчетКт Тогда
			Если ВыдаватьСообщения Тогда
				Если ПустойСчетДт тогда
					Сообщить("Не установлено соответствие счета налогового учета для счета " + Выборка.СчетДт);				
				КонецЕсли;	
				Если ПустойСчетКт тогда
					Сообщить("Не установлено соответствие счета налогового учета для счета " + Выборка.СчетКт);
				КонецЕсли;
				Сообщить("Корреспонденции в НУ для проводки бухгалтерского учета № " + СокрЛП(Выборка.НомерСтроки) + " не сформирована!", СтатусСообщения.Важное);			
			КонецЕсли;	
			
			Продолжить; // оба счета в НУ не транслируются
		КонецЕсли;
		
		// Формируем корреспонденцию в налоговом учете
		ПроводкаНУ = ПроводкиНУ.Добавить();
		ПроводкаНУ.Период 		= Выборка.Период;
		ПроводкаНУ.Организация 	= Выборка.Организация;
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				ПроводкаНУ, Выборка.СтруктурноеПодразделениеДт, Выборка.СтруктурноеПодразделениеКт);
		
		Если НЕ ПустойСчетДт Тогда		
			ПроводкаНУ.СчетДт 		= СчетДтНУ;
			
			Если НЕ СчетДтНУ.ВестиУчетВременныхРазниц Тогда
				ПроводкаНУ.ВидУчетаДТ = СПравочники.ВидыУчетаНУ.НУ;
			Иначе
				ПроводкаНУ.ВидУчетаДТ 	= ВидУчетаНУ;
			КонецЕсли;
			
			// попытаемся проставить субконто по данным БУ
			Для Счетчик = 1 по Выборка.СчетДт.ВидыСубконто.Количество() Цикл
				ВидСубконтоДТ 	= Выборка.СчетДт.ВидыСубконто[Счетчик - 1].ВидСубконто;								
				СубконтоБУ 		= Выборка["СубконтоДт" + Счетчик];
				Для СчетчикНУ = 1 по СчетДТНУ.ВидыСубконто.Количество() Цикл
					ВидСубконтоДтНУ = СчетДтНУ.ВидыСубконто[СчетчикНУ - 1].ВидСубконто;				
					Если  ВидСубконтоДтНУ.ТипЗначения.СодержитТип(ТИпЗнч(СубконтоБУ)) Тогда
						ПроводкаНУ.СубконтоДт[ВидСубконтоДтНУ] = СубконтоБУ;
					КонецЕсли;	
				КонецЦикла;				
				
			КонецЦикла;             			
		КонецЕсли;                          	
		Если НЕ ПустойСчетКт Тогда
			ПроводкаНУ.СчетКт       = СчетКтНУ;
			ПроводкаНУ.ВидУчетаКт 	= ВидУчетаНУ;
			Если НЕ СчетКтНУ.ВестиУчетВременныхРазниц Тогда
				ПроводкаНУ.ВидУчетаКТ = Справочники.ВидыУчетаНУ.НУ;
			Иначе
				ПроводкаНУ.ВидУчетаКТ 	= ВидУчетаНУ;
			КонецЕсли;

			Для Счетчик = 1 по Выборка.СчетКт.ВидыСубконто.Количество() Цикл
				ВидСубконтоКт 	= Выборка.СчетКт.ВидыСубконто[Счетчик - 1].ВидСубконто;
				СубконтоБУ 		= Выборка["СубконтоКт" + Счетчик];
				Для СчетчикНУ = 1 по СчетКТНУ.ВидыСубконто.Количество() Цикл
					ВидСубконтоКтНУ = СчетКтНУ.ВидыСубконто[СчетчикНУ - 1].ВидСубконто;				
					Если  ВидСубконтоКтНУ.ТипЗначения.СодержитТип(ТИпЗнч(СубконтоБУ)) Тогда
						ПроводкаНУ.СубконтоКт[ВидСубконтоКтНУ] = СубконтоБУ;
					КонецЕсли;	
				КонецЦикла;								
			КонецЦикла;             			
		КонецЕсли;
		// если при трансляции были заданы конкретные значения НУ, то их приоритет выше
		// устанавливаем значения субконто, полученные при трансляции.
		Для Счетчик = 1 по 3 Цикл
			СубконтоДт = Выборка["СубконтоДтНУ" + Счетчик];
			СубконтоКт = Выборка["СубконтоКтНУ" + Счетчик];
			Если ЗначениеЗаполнено(СубконтоДт) ТОгда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, Счетчик, СубконтоДт);			
			КонецЕсли;	
			Если ЗначениеЗаполнено(СубконтоКт) Тогда
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, Счетчик, СубконтоКт);			
			КонецЕсли;			
		КонецЦикла;			
		
		ПроводкаНУ.НомерЖурнала = Выборка.НомерЖурнала;
		ПроводкаНУ.Сумма        = Выборка.Сумма;
		ПроводкаНУ.Содержание   = Выборка.Содержание;			
	КонецЦикла;		
КонецПроцедуры

// Процедура формирует корреспонденции в налоговом учете
// по отражению временной разницы на основании переданной в качестве параметра
// исходной проводки НУ или БУ.
// Если базовой является БУ проводка, то для формирования ВР проводки выполянется трансляция
//
Процедура ОтразитьВременныеРазницыВНУ(СтруктураШапкиДокумента, ИсходнаяПроводка, РегистрБухгалтерии, СуммаВР, ТранслироватьИзБУ = Ложь, СоответствиеСчетов = Неопределено) экспорт
	
	Если СуммаВР = 0  Тогда
		Возврат;
	КонецЕсли;	
	
	Если СоответствиеСчетов = Неопределено Тогда
		СоответствиеСчетов = Новый Соответствие;	
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.НеобходимостьОтраженияВНУ 
				И СтруктураШапкиДокумента.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда
				
		НоваяПроводкаНУ = РегистрБухгалтерии.Добавить();
		Если ТранслироватьИзБУ Тогда
			ЗаполнитьЗначенияСвойств(НоваяПроводкаНУ, ИсходнаяПроводка, "Период, Регистратор, Организация, СтруктурноеПодразделениеДт, СтруктурноеПодразделениеКт, Сумма, Содержание");
			// установка счетов
			Если ЗначениеЗаполнено(ИсходнаяПроводка.СчетДт) Тогда
				// проверяем специфическое соответствие
				СчетНУ = СоответствиеСчетов.Получить(ИсходнаяПроводка.СчетДт);
				// Если оно не задано, то используем стандартную трансляцию
				Если ЗначениеЗаполнено(СчетНУ) Тогда
					НоваяПроводкаНУ.СчетДт 				= СчетНУ;				
				Иначе				
					НоваяПроводкаНУ.СчетДт 				= ИсходнаяПроводка.СчетДт.СчетНУ;				
				КонецЕсли;	
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(ИсходнаяПроводка.СчетКт) Тогда
				// проверяем специфическое соответствие
				СчетНУ = СоответствиеСчетов.Получить(ИсходнаяПроводка.СчетКт);
				// Если оно не задано, то используем стандартную трансляцию
				Если ЗначениеЗаполнено(СчетНУ) Тогда
					НоваяПроводкаНУ.СчетКт 				= СчетНУ;				
				Иначе				
					НоваяПроводкаНУ.СчетКт 				= ИсходнаяПроводка.СчетКт.СчетНУ;				
				КонецЕсли;	
			КонецЕсли;	
		Иначе
			// заполняем по свойствами исходной проводки
			ЗаполнитьЗначенияСвойств(НоваяПроводкаНУ, ИсходнаяПроводка,,"ВидУчетаДт, ВидУчетаКт");			
		КонецЕсли;
		Если ЗначениеЗаполнено(НоваяПроводкаНУ.СчетДт) Тогда
			Для каждого КоллекцияСубконто Из ИсходнаяПроводка.СубконтоДт Цикл
				СубконтоИсходнойПроводки 	= КоллекцияСубконто.Значение;
				ВидСубконтоИсходнойПроводки = КоллекцияСубконто.Ключ;
				
				Если ТранслироватьИзБУ Тогда
					// могут не совпадать названия субконто. Например в БУ - ОС, в НУ - ВнеоборотныеАктивы
					Для Счетчик = 1 по НоваяПроводкаНУ.СчетДт.ВидыСубконто.Количество() Цикл					
						ВидСубконтоПриемник = НоваяПроводкаНУ.СчетДт.ВидыСубконто[Счетчик-1].ВидСубконто;
						Если ВидСубконтоПриемник.ТипЗначения.СодержитТип(ТипЗнч(СубконтоИсходнойПроводки)) Тогда
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводкаНУ.СчетДт, НоваяПроводкаНУ.СубконтоДт, ВидСубконтоПриемник, СубконтоИсходнойПроводки);
						КонецЕсли;						
					КонецЦикла; 					
				Иначе
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводкаНУ.СчетДт, НоваяПроводкаНУ.СубконтоДт, ВидСубконтоИсходнойПроводки, СубконтоИсходнойПроводки);
				КонецЕсли;	
			КонецЦикла;				
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(НоваяПроводкаНУ.СчетКт) Тогда
			Для каждого КоллекцияСубконто Из ИсходнаяПроводка.СубконтоКт Цикл
				СубконтоИсходнойПроводки 	= КоллекцияСубконто.Значение;
				ВидСубконтоИсходнойПроводки = КоллекцияСубконто.Ключ;
				Если ТранслироватьИзБУ Тогда
					// могут не совпадать названия субконто. Например в БУ - ОС, в НУ - ВнеоборотныеАктивы
					Для Счетчик = 1 по НоваяПроводкаНУ.СчетКт.ВидыСубконто.Количество() Цикл					
						ВидСубконтоПриемник = НоваяПроводкаНУ.СчетКт.ВидыСубконто[Счетчик-1].ВидСубконто;
						Если ВидСубконтоПриемник.ТипЗначения.СодержитТип(ТипЗнч(СубконтоИсходнойПроводки)) Тогда
							ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводкаНУ.СчетКт, НоваяПроводкаНУ.СубконтоКт, ВидСубконтоПриемник, СубконтоИсходнойПроводки);
						КонецЕсли;						
					КонецЦикла; 					
				Иначе
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(НоваяПроводкаНУ.СчетКт, НоваяПроводкаНУ.СубконтоКт, ВидСубконтоИсходнойПроводки, СубконтоИсходнойПроводки);
				КонецЕсли;	
			КонецЦикла;				
		КонецЕсли;
		
		НоваяПроводкаНУ.Сумма 		= СуммаВР;		
		НоваяПроводкаНУ.Содержание = "Признаны ВР по операции: " + НоваяПроводкаНУ.Содержание; 		
		
		// для счетов по которым не ведется учет ВР
		ВидУчетаНУ(НоваяПроводкаНУ, Справочники.ВидыУчетаНУ.ВР);
	КонецЕсли;	
КонецПроцедуры // ОтразитьВременныеРазницыВНУ

Функция СформироватьСписокПустыхСсылокТиповСубконто() экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыСубконто.ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.ВидыСубконтоТиповые КАК ВидыСубконто
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокПустыхЗначений = Новый СписокЗначений;
	
	МассивОдногоТипа = Новый Массив(1);
	
	Пока Выборка.Следующий() Цикл
		МассивТипы = Выборка.ТипЗначения.Типы();
		Для Каждого ЭлементМассива Из МассивТипы Цикл
		    МассивОдногоТипа[0] = ЭлементМассива;			
			НовоеОписаниеТипов = Новый ОписаниеТипов(МассивОдногоТипа);
			ПустоеЗначениеТипа = НовоеОписаниеТипов.ПривестиЗначение(Неопределено);
			СписокПустыхЗначений.Добавить(ПустоеЗначениеТипа);
		КонецЦикла;
	КонецЦикла;
	Возврат СписокПустыхЗначений;
КонецФункции	

Функция ВидУчетаНУПоСтатьеЗатрат(СтатьяЗатрат) экспорт
	
	Результат = Справочники.ВидыУчетаНУ.НУ;
	Если  ТипЗнч(СтатьяЗатрат) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		// если затрата не относится на вычеты по НУ
		Если НЕ СтатьяЗатрат.ПринятиеКНалоговомуУчету Тогда
			Результат = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;		
			
		ИначеЕсли СтатьяЗатрат.ВидРасходовНУ = Справочники.ВидыРасходовНУ.Амортизация Тогда
			Результат = Справочники.ВидыУчетаНУ.ВР; // по амортизации ОС образуется временная разница
		ИначеЕсли СтатьяЗатрат.ВидРасходовНУ.Нормируемый Тогда
			// по нормируемым затратам проводим постоянную разницу,
			// которая при проведении закрытия периода будет частично распределятся на
			// НУ - пределах норм и ПР - сверхлимита
			Результат = Справочники.ВидыУчетаНУ.РасходыСверхНорм; 			
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции	

// Определяет вид учета для проводки по налоговому учету
//
Процедура ВидУчетаНУ(Проводка, ДокументВидУчетаНУ, ЗаполнятьОбеСтороны = Истина, ПереопределятьПоСтатьеЗатрат = Истина) Экспорт
	
	//если для счета не ведется учет ВР, то вид учета всегда будет только НУ
	Если  НЕ Проводка.СчетДт.ВестиУчетВременныхРазниц Тогда
		ВидУчетаДт = Справочники.ВидыУчетаНУ.НУ;
		УчетВРДт = Ложь;
	Иначе
		ВидУчетаДт = ДокументВидУчетаНУ;
		УчетВРДт = Истина;
	КонецЕсли; 		
	Если  НЕ Проводка.СчетКт.ВестиУчетВременныхРазниц Тогда
		ВидУчетаКт = Справочники.ВидыУчетаНУ.НУ;
		УчетВРКт = Ложь;
	Иначе
		ВидУчетаКт = ДокументВидУчетаНУ;
		УчетВРКт = Истина;
	КонецЕсли;		
	
	Если НЕ ДокументВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ Тогда
		ВидУчетаДт = ВидУчетаДт;
		ВидУчетаКт = ВидУчетаКт;		
	Иначе
		Если УчетВРДт Тогда  
			
			ВидУчетаДт = ?(НЕ ЗначениеЗаполнено(Проводка.ВидУчетаДт), Справочники.ВидыУчетаНУ.НУ, Проводка.ВидУчетаДт);
			
			// вид учета, можно определить по статье затрат в аналитике проводки	
			// для стороны Дт		
			СтатьяЗатратВПроводке = Проводка.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
			Если ПереопределятьПоСтатьеЗатрат И Не СтатьяЗатратВПроводке = Неопределено Тогда			
				Если  ЗначениеЗаполнено(Проводка.СубконтоДт.СтатьиЗатрат) Тогда
					ВидУчетаДт = ВидУчетаНУПоСтатьеЗатрат(Проводка.СубконтоДт.СтатьиЗатрат);
				КонецЕсли;
				
				Если ЗаполнятьОбеСтороны И УчетВРКт Тогда
					// предполагаем, что вид учета един для проводки.
					// за исключением специфических ситуаций
					ВидУчетаКт = ВидУчетаДт;
				КонецЕсли;	
				
			КонецЕсли;
		КонецЕсли;
		
		Если УчетВРКт Тогда
			
			ВидУчетаКт = ?(НЕ ЗначениеЗаполнено(Проводка.ВидУчетаКт), Справочники.ВидыУчетаНУ.НУ, Проводка.ВидУчетаКт);
			// Для стороны Кт
			СтатьяЗатратВПроводке = Проводка.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
			Если ПереопределятьПоСтатьеЗатрат И Не СтатьяЗатратВПроводке = Неопределено Тогда
				Если  ЗначениеЗаполнено(Проводка.СубконтоКт.СтатьиЗатрат) Тогда
					ВидУчетаКт = ВидУчетаНУПоСтатьеЗатрат(Проводка.СубконтоКт.СтатьиЗатрат);
				КонецЕсли;
				Если ЗаполнятьОбеСтороны И УчетВРДт Тогда
					// предполагаем, что вид учета един для проводки.
					// за исключением специфических ситуаций
					ВидУчетаДт = ВидУчетаКт;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда
		Проводка.ВидУчетаДт = ВидУчетаДт;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда
		Проводка.ВидУчетаКт = ВидУчетаКт;
	КонецЕсли;
	
КонецПроцедуры // ВидУчетаНУ()

Функция ОпределитьВидУчетаНУПоСтроке(ВидУчетаНУ,Счет, Субконто1, Субконто2, Субконто3) Экспорт
	
	ВидУчетаДляСтроки = ВидУчетаНУ;
	
	//если для счета не ведется учет ВР, то вид учета всегда будет только НУ
	Если  НЕ Счет.ВестиУчетВременныхРазниц Тогда
		ВидУчетаДляСтроки = Справочники.ВидыУчетаНУ.НУ;
		Возврат ВидУчетаДляСтроки
	КонецЕсли;	
	
	//определим, есть ли на счете субконто с типом "СтатьиЗатрат";
	ЕстьСтатьяЗатрат = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	Если Не ЕстьСтатьяЗатрат = Неопределено Тогда
		Если ТипЗнч(Субконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			СтатьяПоВидуУчета = Субконто1;
		ИначеЕсли ТипЗнч(Субконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			СтатьяПоВидуУчета = Субконто2;
		ИначеЕсли ТипЗнч(Субконто3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			СтатьяПоВидуУчета = Субконто3;		
		КонецЕсли;
		Если  ЗначениеЗаполнено(СтатьяПоВидуУчета) Тогда
			ВидУчетаДляСтроки = ВидУчетаНУПоСтатьеЗатрат(СтатьяПоВидуУчета);
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат ВидУчетаДляСтроки;	
	
КонецФункции

// Функция возвращает признак плательщика КПН для выбранной организации
//
// Параметры:
//  Организация - СправочникСсылка.Организации, элемент справочника, для которого необходимо получить
//  			признак пдательщика НДС
//
// Возвращаемое значение:
//	Истина 	- в случае, если на заданную дату организация являлась плательщиком КПН
// 	Ложь	- в случае, если на заданную дату организация не являлась плательщиком КПН
//  В случае, если нужные сведения отсутствуют по-умолчанию возвращается Истина
//
Функция ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация, знач Дата, УчетнаяПолитикаНУ = Неопределено) экспорт
	
	// Если значение не задано
	// по умолчанию присваиваем значение Истина
	ОрганизацияЯвляетсяПлательщикомКПН	= Истина;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	УчетнаяПолитикаНУ	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(	Дата, Ложь, Организация, "Нал");	
			
	Если УчетнаяПолитикаНУ.Свойство("ОрганизацияЯвляетсяПлательщикомКПН") Тогда
		ОрганизацияЯвляетсяПлательщикомКПН = УчетнаяПолитикаНУ.ОрганизацияЯвляетсяПлательщикомКПН;
	КонецЕсли;		
	
	Возврат ОрганизацияЯвляетсяПлательщикомКПН;
	
КонецФункции // ПолучитьПризнакПлательщикаКПН()

// Функция возвращает признак контроля остатков ТМЗ в НУдля выбранной организации
//
// Параметры:
//  Организация - СправочникСсылка.Организации, элемент справочника, для которого необходимо получить
//  			признак 
//
// Возвращаемое значение:
//	Истина 	- в случае, если на заданную дату по организации включен котроль остатков
// 	Ложь	- в случае, если на заданную дату по организации отключен котроль остатков
//  В случае, если нужные сведения отсутствуют по-умолчанию возвращается Ложь
//
Функция ПолучитьПризнакВеденияУчетаВременныхРазницБалансовымМетодом(Организация, знач Дата, УчетнаяПолитикаБУ = Неопределено) экспорт
	
	// Если значение не задано
	// по умолчанию присваиваем значение Ложь
	ВедениеУчетаВременныхРазницБалансовымМетодом = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
    
	УчетнаяПолитикаБУ	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация, "Бух");	
			
	Если УчетнаяПолитикаБУ.Свойство("ВедениеУчетаВременныхРазницБалансовымМетодом") Тогда
		ВедениеУчетаВременныхРазницБалансовымМетодом = УчетнаяПолитикаБУ.ВедениеУчетаВременныхРазницБалансовымМетодом;
	КонецЕсли;		
	
	Возврат ВедениеУчетаВременныхРазницБалансовымМетодом;
	
КонецФункции // ПолучитьПризнакКонтроляОстатковВНУ()

// Функция возвращает признак плательщика поддержки учета временных разниц
// по налогу на примыль в соответствии с СБУ-11 и МСБУ-12
// Параметры:
//  Организация - СправочникСсылка.Организации, элемент справочника, для которого необходимо получить
//  			признак пдательщика НДС
//
// Возвращаемое значение:
//	Истина 	- в случае, если на заданную дату для организация поддерживался учет ВР
// 	Ложь	- в случае, если на заданную дату организация не поддерживался учет ВР
//  В случае, если нужные сведения отсутствуют по-умолчанию возвращается Ложь
//
Функция ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Организация, знач Дата, УчетнаяПолитикаБУ = Неопределено) экспорт
	
	УчетнаяПолитикаНеЗадана = Ложь;
	
	// Если значение не задано
	// по умолчанию присваиваем значение Ложь
	ПоддержкаУчетаВР = Ложь;	
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	УчетнаяПолитикаБУ	= ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация, "Бух");	
																			
	Если УчетнаяПолитикаБУ.Свойство("УчетВременныхРазницПоНалогуНаПрибыль") Тогда
		ПоддержкаУчетаВР = УчетнаяПолитикаБУ.УчетВременныхРазницПоНалогуНаПрибыль;
	КонецЕсли;		
	
	Возврат ПоддержкаУчетаВР;
	
КонецФункции // ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль()

// Определяет является ли счет - счетом доходов
//
Функция СчетДоходов(Счет) Экспорт
	СписокСчетовДоходов = Новый Массив;
	// группы доходов
	// 6000
	СписокСчетовДоходов.Добавить(ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_);
	// 6100
	СписокСчетовДоходов.Добавить(ПланыСчетов.Типовой.ДоходыОтФинансирования);
	// 6200
	СписокСчетовДоходов.Добавить(ПланыСчетов.Типовой.ПрочиеДоходы_);
	// 6300
	СписокСчетовДоходов.Добавить(ПланыСчетов.Типовой.ДоходыСвязанныеСПрекращаемойДеятельностью_);
	// 6400
	СписокСчетовДоходов.Добавить(ПланыСчетов.Типовой.ДоляПрибылиОрганизацийУчитываемыхПоМетодуДолевогоУчастия);
	
	Запрос = новый Запрос("ВЫБРАТЬ
	                      |	Типовой.Ссылка
	                      |ИЗ
	                      |	ПланСчетов.Типовой КАК Типовой
	                      |ГДЕ
	                      |	(Типовой.Ссылка В ИЕРАРХИИ(&СписокСчетовДоходов)) и (Типовой.Ссылка В ИЕРАРХИИ(&Счет))");
	Запрос.УстановитьПараметр("СписокСчетовДоходов", СписокСчетовДоходов);
	Запрос.УстановитьПараметр("Счет", Счет);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
КонецФункции // СчетДоходов()

// Определяет является ли счет - счетом затрат
//
Функция СчетЗатрат(Счет) Экспорт
	СписокСчетовЗатрат = Новый Массив;
	// группы затрат
	// 7000
	СписокСчетовЗатрат.Добавить(ПланыСчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг_);
	// 7100
	СписокСчетовЗатрат.Добавить(ПланыСчетов.Типовой.РасходыПоРеализацииПродукцииИОказаниюУслуг_);
	// 7200
	СписокСчетовЗатрат.Добавить(ПланыСчетов.Типовой.АдминистративныеРасходы_);
	// 7300 
	СписокСчетовЗатрат.Добавить(ПланыСчетов.Типовой.РасходыНаФинансирование);
	// 7400
	СписокСчетовЗатрат.Добавить(ПланыСчетов.Типовой.ПрочиеРасходы_);
	// 7500
	СписокСчетовЗатрат.Добавить(ПланыСчетов.Типовой.РасходыСвязанныеСПрекращаемойДеятельностью_);
	// 7600
	СписокСчетовЗатрат.Добавить(ПланыСчетов.Типовой.ДоляВУбыткеОрганизацийУчитываемыхМетодомДолевогоУчастия);
	// 7700
	СписокСчетовЗатрат.Добавить(ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу_);
	
	// 8100 - производственные затраты
	//СписокСчетовЗатрат.Добавить(ПланыСчетов.Типовой.ОсновноеПроизводство_);	
	//// 8200 - производственные затраты
	//СписокСчетовЗатрат.Добавить(ПланыСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_);	
	//// 8300 - производственные затраты
	//СписокСчетовЗатрат.Добавить(ПланыСчетов.Типовой.ВспомогательныеПроизводства_);	
	//// 8400 - производственные затраты
	//СписокСчетовЗатрат.Добавить(ПланыСчетов.Типовой.НакладныеРасходы_);	
	
	Запрос = новый Запрос("ВЫБРАТЬ
	                      |	Типовой.Ссылка
	                      |ИЗ
	                      |	ПланСчетов.Типовой КАК Типовой
	                      |ГДЕ
	                      |	(Типовой.Ссылка В ИЕРАРХИИ(&СписокСчетовЗатрат)) и (Типовой.Ссылка В ИЕРАРХИИ(&Счет))");
	Запрос.УстановитьПараметр("СписокСчетовЗатрат", СписокСчетовЗатрат);
	Запрос.УстановитьПараметр("Счет", Счет);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
КонецФункции // СчетЗатрат()

// Определяет относится ли счет к категории, отражаемых в НУ
// (является счетом доходов/затрат)
Функция ВлияетНаНалогооблагаемыйДоход(Счет) Экспорт
	// считаем, что счет оказывает влияние на налогооблагаемый доход 
	// если он относится к доходам, либо затратам предприятия
	
	Возврат СчетЗатрат(Счет) или СчетДоходов(Счет);	
КонецФункции // ВлияетНаНалогооблагаемыйДоход()

//Функция возвращает счет учета расчетов с контрагентом НУ
//
Функция ПолучитьСчетРасчетовСКонтрагентомНУ(СчетБУ = Неопределено) Экспорт
	Результат = ПланыСчетов.Налоговый.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(СчетБУ) Тогда
		Результат = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетБУ));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаработУслугПрав;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//Функция возвращает счет учета НДС к возмещению
//
Функция ПолучитьСчетУчетаНДСКВозмещениюНУ(СчетУчетаБУ = Неопределено,ТекДата = Неопределено)Экспорт
	Если  СчетУчетаБУ = Неопределено Тогда
		Возврат  ПланыСчетов.Налоговый.НалогНаДобавленнуюСтоимостьКВозмещению;
	Иначе
		Возврат ПроцедурыБухгалтерскогоучета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетУчетаБУ, ТекДата, ПланыСчетов.Налоговый.НалогНаДобавленнуюСтоимостьКВозмещению);
	КонецЕсли;
	
КонецФункции

//Функция определяет счет учета НДС к начислению
// по соответствию указанному счету БУ, если соответствия нет,
// или счет БУ не указан, то возвращается счет расчетов по-умолчанию
//
//Параметры
//	СчетУчетаБУ - ПланСчетовСсылка.Типовой - Счет учета БУ, для которого необходимо получить соответствующий счет НУ
//	Дата - Дата - Дата на которую необходимо получить срез соответствия счетов БУ и НУ
//
Функция ПолучитьСчетУчетаНДСКНачислениюНУ(СчетУчетаБУ = Неопределено, Дата = Неопределено)Экспорт
	
	СчетНУПоУмолчанию = ПланыСчетов.Налоговый.НДСНачисленныйПриПокупке;
	Если СчетУчетаБУ = Неопределено Тогда
		Возврат СчетНУПоУмолчанию;
	Иначе
		Возврат ПроцедурыБухгалтерскогоучета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетУчетаБУ, Дата, СчетНУПоУмолчанию);
	КонецЕсли;
	
КонецФункции

//Функция возвращает счет учета НДС к 
//
Функция ПолучитьСчетУчетаНДСНачисленногоНУ(СчетУчетаБУ = Неопределено,ТекДата = Неопределено)  Экспорт
	Если  СчетУчетаБУ = Неопределено Тогда
		Возврат  ПланыСчетов.Налоговый.НалогНаДобавленнуюСтоимость;
	Иначе
		Возврат ПроцедурыБухгалтерскогоучета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетУчетаБУ, ТекДата, ПланыСчетов.Налоговый.НалогНаДобавленнуюСтоимость);
	КонецЕсли;
	
КонецФункции

//Функция возвращает счет учета акциза
//
Функция ПолучитьСчетУчетаАкцизаНУ(СчетУчетаБУ = Неопределено,ТекДата = Неопределено) Экспорт
	Если  СчетУчетаБУ = Неопределено Тогда
		Возврат  ПланыСчетов.Налоговый.НалоговыеАктивыПрочее;
	Иначе
		Возврат ПроцедурыБухгалтерскогоучета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетУчетаБУ, ТекДата, ПланыСчетов.Налоговый.ПрочиеНалоги);
	КонецЕсли;
	
КонецФункции

//Функция возвращает счет учетп ИПН по НУ
Функция ПолучитьСчетУчетаНУИПН(СчетУчетаБУ = Неопределено, ТекДата = Неопределено, СтранаРезидентства = Неопределено)Экспорт
	
	Если СтранаРезидентства = Неопределено 
		ИЛИ СтранаРезидентства = Справочники.КлассификаторСтранМира.Казахстан Тогда
		СчетНУ = Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог.СчетУчетаРасчетовСКонтрагентомНУ;
	Иначе 
		СчетНУ = Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалогИностранныеГраждане.СчетУчетаРасчетовСКонтрагентомНУ;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетНУ) Тогда
		СчетНУПоУмолчанию = ПланыСчетов.Налоговый.ПрочиеНалоги;
		Если СчетУчетаБУ = Неопределено Тогда
			СчетНУ = СчетНУПоУмолчанию;
		Иначе
			СчетНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетУчетаБУ, ТекДата, СчетНУПоУмолчанию);
		КонецЕсли; 		
	КонецЕсли;
	
	Возврат СчетНУ;
	
КонецФункции

//Функция возвращает счет учета ОПВ по НУ
//
Функция ПолучитьСчетУчетаНУОПВ(СчетУчетаБУ = Неопределено, ТекДата = Неопределено) Экспорт
	
	СчетНУ = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомНУ;
	Если НЕ ЗначениеЗаполнено(СчетНУ) Тогда
		СчетНУПоУмолчанию = ПланыСчетов.Налоговый.ОбязательстваПоПенсионнымОтчислениям;
		Если СчетУчетаБУ = Неопределено Тогда
			СчетНУ = СчетНУПоУмолчанию;
		Иначе
			СчетНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетУчетаБУ, ТекДата, СчетНУПоУмолчанию);
		КонецЕсли; 		
	КонецЕсли;  	
	Возврат СчетНУ;
	
КонецФункции

//Функция возвращает счет учета ОПВР по НУ
//
Функция ПолучитьСчетУчетаНУОПВР(СчетУчетаБУ = Неопределено, ТекДата = Неопределено) Экспорт
	
	СчетНУ = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя.СчетУчетаРасчетовСКонтрагентомНУ;
	Если НЕ ЗначениеЗаполнено(СчетНУ) Тогда
		СчетНУПоУмолчанию = ПланыСчетов.Налоговый.ОбязательстваПоПенсионнымОтчислениям;
		Если СчетУчетаБУ = Неопределено Тогда
			СчетНУ = СчетНУПоУмолчанию;
		Иначе
			СчетНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетУчетаБУ, ТекДата, СчетНУПоУмолчанию);
		КонецЕсли; 		
	КонецЕсли;  	
	Возврат СчетНУ;
	
КонецФункции

//Функция возвращает счет учета ОППВ по НУ
//
Функция ПолучитьСчетУчетаНУОППВ(СчетУчетаБУ = Неопределено, ТекДата = Неопределено) Экспорт
	
	СчетНУ = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомНУ;
	Если НЕ ЗначениеЗаполнено(СчетНУ) Тогда
		СчетНУПоУмолчанию = ПланыСчетов.Налоговый.ОбязательстваПоПенсионнымОтчислениям;
		Если СчетУчетаБУ = Неопределено Тогда
			СчетНУ = СчетНУПоУмолчанию;
		Иначе
			СчетНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетУчетаБУ, ТекДата, СчетНУПоУмолчанию);
		КонецЕсли; 		
	КонецЕсли;  	
	Возврат СчетНУ;
	
КонецФункции

//Функция возвращает счет учета СО по НУ
//
Функция ПолучитьСчетУчетаНУСО(СчетУчетаБУ = Неопределено, ТекДата = Неопределено) Экспорт
	
	СчетНУ = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления.СчетУчетаРасчетовСКонтрагентомНУ;
	Если НЕ ЗначениеЗаполнено(СчетНУ) Тогда
		СчетНУПоУмолчанию = ПланыСчетов.Налоговый.ОбязательстваПоСоциальномуСтрахованию;
		Если СчетУчетаБУ = Неопределено Тогда
			СчетНУ = СчетНУПоУмолчанию;
		Иначе
			СчетНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетУчетаБУ, ТекДата, СчетНУПоУмолчанию);
		КонецЕсли; 		
	КонецЕсли;  	
	Возврат СчетНУ;
	
КонецФункции 

//Функция возвращает счет учета ВОСМС по НУ
//
Функция ПолучитьСчетУчетаНУВОСМС(СчетУчетаБУ = Неопределено, ТекДата = Неопределено) Экспорт
	
	СчетНУ = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомНУ;
	Если НЕ ЗначениеЗаполнено(СчетНУ) Тогда
		СчетНУПоУмолчанию = ПланыСчетов.Налоговый.ОбязательстваПоВзносамОСМС;
		Если СчетУчетаБУ = Неопределено Тогда
			СчетНУ = СчетНУПоУмолчанию;
		Иначе
			СчетНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетУчетаБУ, ТекДата, СчетНУПоУмолчанию);
		КонецЕсли; 		
	КонецЕсли;  	
	Возврат СчетНУ;
	
КонецФункции

//Функция возвращает счет учета СО по НУ
//
Функция ПолучитьСчетУчетаНУООСМС(СчетУчетаБУ = Неопределено, ТекДата = Неопределено) Экспорт
	
	СчетНУ = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомНУ;
	Если НЕ ЗначениеЗаполнено(СчетНУ) Тогда
		СчетНУПоУмолчанию = ПланыСчетов.Налоговый.ОбязательстваПоОтчислениямОСМС;
		Если СчетУчетаБУ = Неопределено Тогда
			СчетНУ = СчетНУПоУмолчанию;
		Иначе
			СчетНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетУчетаБУ, ТекДата, СчетНУПоУмолчанию);
		КонецЕсли; 		
	КонецЕсли;  	
	Возврат СчетНУ;
	
КонецФункции

//Функция возвращает счет учета СН по НУ
//
Функция ПолучитьСчетУчетаНУСН(СчетУчетаБУ = Неопределено, ТекДата = Неопределено)Экспорт
	
	СчетНУ = Справочники.НалогиСборыОтчисления.СоциальныйНалог.СчетУчетаРасчетовСКонтрагентомНУ;
	Если НЕ ЗначениеЗаполнено(СчетНУ) Тогда
		СчетНУПоУмолчанию = ПланыСчетов.Налоговый.ПрочиеНалоги;
		Если СчетУчетаБУ = Неопределено Тогда
			СчетНУ = СчетНУПоУмолчанию;
		Иначе
			СчетНУ = ПроцедурыБухгалтерскогоУчета.ЗаполнитьСчетНалоговогоУчетаПоУмолчанию(СчетУчетаБУ, ТекДата, СчетНУПоУмолчанию);
		КонецЕсли; 		
	КонецЕсли;  	
	Возврат СчетНУ;
	
КонецФункции 

Процедура ОтразитьРасходыНаРемонтПроизводственныхОС(ПроводкиНУ,
	СтруктураСведенийБУ, СтруктураСведенийНУ,ДатаОперации, Организация,СтруктурноеПодразделениеДт,СтруктурноеПодразделениеКт, ВидУчетаНУ, Стоимость, Количество, Отказ,СписокСчетовПроизводства = Неопределено) Экспорт
	
	// производственные расходы на ремонт ВА, списываемые на счет ремонта,
	// отражаем в системе производства. 
	Если СтруктураСведенийНУ.СчетНУ = ПланыСчетов.Налоговый.РасходыНаРемонтВА
		И ПроцедурыБухгалтерскогоУчета.СчетЯвляетсяПроизводственным(СтруктураСведенийБУ.СчетБУ, СписокСчетовПроизводства) Тогда
		
		СчетНУПроизводства = СтруктураСведенийБУ.СчетБУ.СчетНУ;
		Если НЕ ЗначениеЗаполнено(СчетНУПроизводства) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для счета бухгалтерского учета " + СокрЛП(СчетНУПроизводства) + " не указан соответствующий ему счет НУ", Отказ);			
			Возврат;
		КонецЕсли;  		
		
		// Дт производство, Кт Затраты на ремонт
		ПроводкаНУ				= ПроводкиНУ.Добавить();
		ПроводкаНУ.Период      	= ДатаОперации;
		ПроводкаНУ.Организация 	= Организация;
		ПроводкаНУ.Сумма 		= Стоимость;
		ПроводкаНУ.Содержание  = "Признаны расходы на ремонт производственного оборудования";
				
		// Транслируем счет производства
		ПроводкаНУ.СчетДт 	   = СчетНУПроизводства;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, СтруктураСведенийБУ.СубконтоБУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 2, СтруктураСведенийБУ.СубконтоБУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 3, СтруктураСведенийБУ.СубконтоБУ3);
		
		Если ПроводкаНУ.СчетДт.Количественный Тогда
			ПроводкаНУ.КоличествоДт = Количество;
		КонецЕсли;
		
		// Заполняем аналитику по ремонту
		ПроводкаНУ.СчетКт 	   = СтруктураСведенийНУ.СчетНУ;
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, СтруктураСведенийНУ.СубконтоНУ1);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 2, СтруктураСведенийНУ.СубконтоНУ2);
		ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 3, СтруктураСведенийНУ.СубконтоНУ3);
		
		Если ПроводкаНУ.СчетКт.Количественный Тогда
			ПроводкаНУ.КоличествоКт = Количество;
		КонецЕсли;                				
		ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, ВидУчетаНУ);				
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, СтруктурноеПодразделениеДт, СтруктурноеПодразделениеКт);
	КонецЕсли;				
КонецПроцедуры // ОтразитьРасходыНаРемонтПроизводственныхСредств

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ И ЭЛЕМЕНТАМИ УПРАВЛЕНИЯ

// Процедура вызывается из форм документов
// при изменении признака "УчитыватьКПН".
Процедура ПриИзмененииПризнакаОтраженияВНалоговомУчете(Организация, ДатаДокумента, УчитыватьКПН, УчетнаяПолитикаПоНалоговомуУчету, ИзменятьРеквизитУчитыватьКПН = Ложь) Экспорт
	
	// проверим возможность  установки признака
	Если УчетнаяПолитикаПоНалоговомуУчету  = Неопределено Тогда
		УчетнаяПолитикаПоНалоговомуУчету = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДатаДокумента, Истина, Организация, "Нал");					
	КонецЕсли;

	Если УчитыватьКПН Тогда
		Если не УчетнаяПолитикаПоНалоговомуУчету.Свойство("ОрганизацияЯвляетсяПлательщикомКПН") или не УчетнаяПолитикаПоНалоговомуУчету.ОрганизацияЯвляетсяПлательщикомКПН Тогда
			Сообщить("Для организации, не являющейся плательщиком налога на прибыль, отражение данных в налоговом учете невозможно. Признак отражения в налоговом учете снят.", СтатусСообщения.Важное);
			УчитыватьКПН = Ложь;
			Возврат;
		КонецЕсли; 
	КонецЕсли;	
	
	Если ИзменятьРеквизитУчитыватьКПН Тогда
		УчитыватьКПН =  УчетнаяПолитикаПоНалоговомуУчету.Свойство("ОрганизацияЯвляетсяПлательщикомКПН") И УчетнаяПолитикаПоНалоговомуУчету.ОрганизацияЯвляетсяПлательщикомКПН;
	КонецЕсли;		
	
КонецПроцедуры	

//Процедура вызывается из форм документов, и заполняет реквизит "ВидУчетаНУ"
//
Процедура ЗаполнитьВидУчетаНУ(УчитыватьКПН, ВидУчетаНУ) Экспорт
	Если УчитыватьКПН Тогда
		ОтражатьДокументыВНалоговомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете"); 
		Если ОтражатьДокументыВНалоговомУчете И ВидУчетаНУ <> Справочники.ВидыУчетаНУ.НУ Тогда
			ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
		ИначеЕсли Не ОтражатьДокументыВНалоговомУчете И ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ 
			ИЛИ НЕ ЗначениеЗаполнено(ВидУчетаНУ) Тогда
			ВидУчетаНУ = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;
		КонецЕсли;			
	КонецЕсли;		
КонецПроцедуры

// Стоимость Внеоборотного Актива по налоговому учету
//
Функция ПолучитьСтоимостьВАПоНУ(ВнеоборотныйАктив, Организация,Дата) Экспорт
	СтоимостьНУ = 0;
	
	Если НЕ ЗначениеЗаполнено(ВнеоборотныйАктив) ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0) КАК СтоимостьНУ
	                      |ИЗ
	                      |	РегистрБухгалтерии.Налоговый.Остатки(
	                      |		&Дата,
	                      |		Счет В ИЕРАРХИИ (&СчетаУчетаВА),
	                      |		,
	                      |		Организация = &Организация
	                      |			И Субконто1 = &ВнеоборотныйАктив) КАК НалоговыйОстатки");	
						  
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("СчетаУчетаВА", ПланыСчетов.Налоговый.ВнеоборотныеАктивы);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВнеоборотныйАктив", ВнеоборотныйАктив);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СтоимостьНУ = Выборка.СтоимостьНУ;	
	КонецЕсли;
	
	Возврат СтоимостьНУ;
КонецФункции // ПолучитьСтоимостьВАПоНУ

// Выполняет проверку принадлежности внеоборотного актива к фиксированным активам организации
// Функция возвращает
// 					Истина - в случае, если ВА является фиксированным активом
//					Ложь - в противном случае
Функция ЯвляетсяФиксированнымАктивом(ВнеоборотныйАктив, Организация,Дата) Экспорт	
	
	Если НЕ ЗначениеЗаполнено(ВнеоборотныйАктив) ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбъектыНалоговогоУчетаФАСрезПоследних.ФиксированныйАктив
	                      |ИЗ
	                      |	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	                      |		&Дата,
	                      |		Организация = &Организация
	                      |			И ФиксированныйАктив = &ВнеоборотныйАктив
	                      |			И СостояниеФиксированногоАктива = &СостояниеФА) КАК ОбъектыНалоговогоУчетаФАСрезПоследних");
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВнеоборотныйАктив", ВнеоборотныйАктив);
	Запрос.УстановитьПараметр("СостояниеФА", Перечисления.ВидыСостоянийФА.ПринятКУчету);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
КонецФункции	

// Выполняет проверку учета фиксированного актива отдельно от стоимостного баланса подгрупп
// в связи с применением двойной нормы амортизации в первый год эксплуатации
// Функция возвращает
// 					Истина - в случае, если ВА является фиксированным активом, учитываемым отдельно
//							 и он еще не включен в состав группы
//					Ложь - в противном случае
Функция ФиксированныйАктивУчитываемыйОтдельно(ВнеоборотныйАктив, Организация,Дата) Экспорт	
	
	Если НЕ ЗначениеЗаполнено(ВнеоборотныйАктив) ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних.ФиксированныйАктив
	                      |ИЗ
	                      |	РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(
	                      |		&Дата,
	                      |		Организация = &Организация
	                      |			И ФиксированныйАктив = &ВнеоборотныйАктив
	                      |			) КАК ФиксированныеАктивыУчитываемыеОтдельноСрезПоследних
						  |ГДЕ Событие = &СобытиеФА");
						  
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВнеоборотныйАктив", ВнеоборотныйАктив);
	Запрос.УстановитьПараметр("СобытиеФА", Перечисления.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
			
КонецФункции	

// Возвращает группу налоговго учета для Фиксированнного актива 
//					
Функция ПолучитьГруппуНУФиксированногоАктива(ВнеоборотныйАктив, Организация,Дата) Экспорт	
	
	Если НЕ ЗначениеЗаполнено(ВнеоборотныйАктив) ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбъектыНалоговогоУчетаФАСрезПоследних.ГруппаНУ
	                      |ИЗ
	                      |	РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	                      |		&Дата,
	                      |		Организация = &Организация
	                      |		    И ФиксированныйАктив = &ВнеоборотныйАктив
	                      |		    И СостояниеФиксированногоАктива в (&СостояниеФА)) КАК ОбъектыНалоговогоУчетаФАСрезПоследних");
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВнеоборотныйАктив", ВнеоборотныйАктив);
	
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);
	
	Запрос.УстановитьПараметр("СостояниеФА", СостоянияФА);
	Результат = Запрос.Выполнить();	
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ГруппаНУ
	Иначе
		Возврат Справочники.ГруппыНалоговогоУчетаФА.ПустаяСсылка()
	КонецЕсли;	
		
КонецФункции	

// Возвращает налоговый счет учета актива
// 
//
Функция ПолучитьСчетУчетаНУВнеоборотногоАктива(ВнеоборотныйАктив, Организация,Дата, ПризнакФА = Неопределено, ПризнакПримененияДвойнойНормыАмортизации = Неопределено) Экспорт
	СчетУчетуНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(ВнеоборотныйАктив) ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат СчетУчетуНУ;
	КонецЕсли;
	// инициализация необходимых признаков
	Если ПризнакФА = Неопределено  Тогда
		ПризнакФА = ЯвляетсяФиксированнымАктивом(ВнеоборотныйАктив, Организация,Дата);
	КонецЕсли;	
	
	Если ПризнакПримененияДвойнойНормыАмортизации = Неопределено Тогда
		ПризнакПримененияДвойнойНормыАмортизации = ФиксированныйАктивУчитываемыйОтдельно(ВнеоборотныйАктив, Организация,Дата);
	КонецЕсли;	
	
	// Определение счета учета
	Если ПризнакФА Тогда
		Если ПризнакПримененияДвойнойНормыАмортизации Тогда
			// фиксированные активы, учитываемые отдельно
			СчетУчетуНУ = ПланыСчетов.Налоговый.ВАНеВключенныеВСтоимостнойБаланс;	
		Иначе
			// фиксированные активы
			СчетУчетуНУ = ПланыСчетов.Налоговый.ВАВключенныеВСтоимостнойБаланс;	
		КонецЕсли;	
		
	Иначе
		// активы не подлежащий амортизации в налоговом учете
		СчетУчетуНУ = ПланыСчетов.Налоговый.ВАНеПодлежащиеАмортизации;
	КонецЕсли; 

	Возврат СчетУчетуНУ
КонецФункции // ПолучитьСчетУчетаНУВнеоборотногоАктива()

// Возрашает стоимость в налоговом учете для списка внеоборотных активов.
// Колонки результирующей таблицы:
//	ВнеоборотныйАктивНУ
// 	СчетУчетаНУ
// 	ВидУчетаНУ
//	СтоимостьНУ
//	ПризнакФА
//  
Функция ОпределитьСтоимостьНУПоСпискуВА(Организация, СписокВА, Период) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",	Период);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("СчетУчетаВА",	ПланыСчетов.Налоговый.ВнеоборотныеАктивы);
	Запрос.УстановитьПараметр("СубконтоВА",		ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВнеоборотныеАктивы);
	Запрос.УстановитьПараметр("СписокВА",		СписокВА);		
	
	СостоянияФА = Новый СписокЗначений();	
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.ПринятКУчету);
	СостоянияФА.Добавить(Перечисления.ВидыСостоянийФА.Выбыл);
	
	Запрос.УстановитьПараметр("СостоянияФА", 	СостоянияФА);		
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтоимостьВА_НУ.Субконто1 КАК ВнеоборотныйАктивНУ,
	               |	СтоимостьВА_НУ.Счет КАК СчетУчетаНУ,
	               |	ЕСТЬNULL(СтоимостьВА_НУ.СуммаОстатокДт, 0) КАК СтоимостьНУ,
	               |	СтоимостьВА_НУ.ВидУчета КАК ВидУчетаНУ,
	               |	ВЫБОР
	               |		КОГДА ОбъектыНалоговогоУчетаФА.СостояниеФиксированногоАктива в (&СостоянияФА)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПризнакФА
	               |ИЗ
	               |	РегистрБухгалтерии.Налоговый.Остатки(&НачалоПериода, Счет В ИЕРАРХИИ (&СчетУчетаВА),          	               
	               |		&СубконтоВА, Организация = &Организация И Субконто1 В (&СписокВА)) КАК СтоимостьВА_НУ
				   |
	               | ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(&НачалоПериода,Организация = &Организация И ФиксированныйАктив В (&СписокВА) ) КАК ОбъектыНалоговогоУчетаФА
	               | ПО СтоимостьВА_НУ.Субконто1 = ОбъектыНалоговогоУчетаФА.ФиксированныйАктив
	               |	И СтоимостьВА_НУ.Организация = ОбъектыНалоговогоУчетаФА.Организация";
	
	ТЗ = Запрос.Выполнить().Выгрузить();   
	
	Возврат ТЗ;
КонецФункции // ОпределитьСтоимостьНУПоСпискуВА()

// Функция возвращает счет налога по виду налога
//
Функция ПолучитьДанныеПоВидуНалога(СтруктураВидовНалоговПоСчетам,ВидНалогаСтрока,ВидНалогаСсылка) Экспорт
	
	Перем ПолученныйСчет;
	
	ТаблицаДанныхПоВидуНалога = Новый ТаблицаЗначений;
	ТаблицаДанныхПоВидуНалога.Колонки.Добавить("СчетНалога");
	ТаблицаДанныхПоВидуНалога.Колонки.Добавить("СтатьяЗатрат");
	
	ПолученныйСчет = ПланыСчетов.Типовой.ПустаяСсылка();
	СтатьяЗатрат   = Справочники.СтатьиЗатрат.ПустаяСсылка();
	
	Если НЕ ВидНалогаСсылка.Пустая() Тогда
		// получим счет из элемента справочника "Налоги, сборы, отчисления"
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НалогиСборыОтчисления.Наименование,
		               |	НалогиСборыОтчисления.Ссылка,
		               |	НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомБУ КАК СчетНалога,
		               |	НалогиСборыОтчисления.СтатьяЗатрат,
		               |	НалогиСборыОтчисления.СчетУчетаРасчетовСКонтрагентомНУ Как СчетНалогаНУ
		               |ИЗ
		               |	Справочник.НалогиСборыОтчисления КАК НалогиСборыОтчисления
		               |ГДЕ
		               |	НалогиСборыОтчисления.Ссылка = &ВидНалогаСсылка";
		Запрос.УстановитьПараметр("ВидНалогаСсылка", ВидНалогаСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ПолученныйСчет = Выборка.СчетНалога;
			СтатьяЗатрат   = Выборка.СтатьяЗатрат;
		КонецЕсли;
		Если ПолученныйСчет = ПланыСчетов.Типовой.ПустаяСсылка() Тогда
			СтруктураВидовНалоговПоСчетам.Свойство(ВидНалогаСтрока,ПолученныйСчет);
		КонецЕсли;			
	Иначе			
		СтруктураВидовНалоговПоСчетам.Свойство(ВидНалогаСтрока,ПолученныйСчет);
	КонецЕсли;
	
	Стр = ТаблицаДанныхПоВидуНалога.Добавить();
	Стр.СчетНалога 		 = ПолученныйСчет;
	Стр.СтатьяЗатрат = СтатьяЗатрат;
	
	Возврат ТаблицаДанныхПоВидуНалога;
	
КонецФункции // ПолучитьДанныеПоВидуНалога()

// Функция возвращает элемент справочника "Налоги, сборы, отчисления"
// в зависимости от требуемого налога и КБК
Функция ПолучитьВидНалогаПоКБК(ВидНалога,КБК) Экспорт
	
	Попытка
		// найдем предопределенный элемент по имени, если он есть
		ПолученныйВидНалога = Справочники.НалогиСборыОтчисления[ВидНалога];
	Исключение
		// иначе ищем по КБК
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НалогиСборыОтчисления.Наименование,
		               |	НалогиСборыОтчисления.Ссылка
		               |ИЗ
		               |	Справочник.НалогиСборыОтчисления КАК НалогиСборыОтчисления
		               |ГДЕ
		               |	НалогиСборыОтчисления.КодБК = &КодБК";
		Запрос.УстановитьПараметр("КодБК", КБК);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ПолученныйВидНалога = Выборка.Ссылка;
		Иначе
			ПолученныйВидНалога = Справочники.НалогиСборыОтчисления.ПустаяСсылка();
		КонецЕсли;
		
	КонецПопытки;	
	
	Возврат ПолученныйВидНалога;
	
КонецФункции // ПолучитьВидНалогаПоКБК()
