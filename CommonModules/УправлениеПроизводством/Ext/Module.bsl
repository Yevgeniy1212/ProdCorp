
Процедура ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, ИмяСчетаЗатрат = "СчетЗатратБУ", 
															ИмяСчетаЗатратНУ = "СчетЗатратНУ", 
															Знач ТекущаяДата = Неопределено) Экспорт

	СтрокаТабличнойЧасти[ИмяСчетаЗатратНУ] = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СтрокаТабличнойЧасти[ИмяСчетаЗатрат]), , , ТекущаяДата);

КонецПроцедуры // ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля()

// Процедура устанавливает видимость ячеек для ввода аналитики в зависимости от указанной статьи затрат.
//
Процедура НастроитьВидимостьЯчеекАналитикиЗатрат(ОформлениеСтроки, СчетЗатрат = НЕОПРЕДЕЛЕНО, СчетЗатратНУ = НЕОПРЕДЕЛЕНО, ОтражатьВНалоговомУчете = Ложь) Экспорт

	Если НЕ ОформлениеСтроки.Ячейки.Найти("Аналитика") = НЕОПРЕДЕЛЕНО Тогда
		ОформлениеСтроки.Ячейки.Аналитика.Видимость    = Ложь;
	КонецЕсли;
	
	Если НЕ ОформлениеСтроки.Ячейки.Найти("АналитикаНУ") = НЕОПРЕДЕЛЕНО Тогда
		ОформлениеСтроки.Ячейки.АналитикаНУ.Видимость    = Ложь;
	КонецЕсли;

	Если НЕ ОформлениеСтроки.Ячейки.Найти("ВидАналитики") = НЕОПРЕДЕЛЕНО Тогда
		ОформлениеСтроки.Ячейки.ВидАналитики.Видимость = Ложь;
	КонецЕсли;

	Если НЕ ОформлениеСтроки.Ячейки.Найти("ВидАналитикиНУ") = НЕОПРЕДЕЛЕНО Тогда
		ОформлениеСтроки.Ячейки.ВидАналитикиНУ.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ОформлениеСтроки.Ячейки.Найти("ВидСубконто3") = НЕОПРЕДЕЛЕНО Тогда

		Если ЗначениеЗаполнено(СчетЗатрат) Тогда

			КоличествоСубконто = СчетЗатрат.ВидыСубконто.Количество();

			Если КоличествоСубконто > 0 Тогда
				ОформлениеСтроки.Ячейки.ВидСубконто1.УстановитьТекст(СчетЗатрат.ВидыСубконто.Получить(0).ВидСубконто);
			Иначе
				ОформлениеСтроки.Ячейки.ВидСубконто1.УстановитьТекст("");
			КонецЕсли;

			Если КоличествоСубконто > 1 Тогда
				ОформлениеСтроки.Ячейки.ВидСубконто2.УстановитьТекст(СчетЗатрат.ВидыСубконто.Получить(1).ВидСубконто);
			Иначе
				ОформлениеСтроки.Ячейки.ВидСубконто2.УстановитьТекст("");
			КонецЕсли;

			Если КоличествоСубконто > 2 Тогда
				ОформлениеСтроки.Ячейки.ВидСубконто3.УстановитьТекст(СчетЗатрат.ВидыСубконто.Получить(2).ВидСубконто);
			Иначе
				ОформлениеСтроки.Ячейки.ВидСубконто3.УстановитьТекст("");
			КонецЕсли;

		Иначе
			ОформлениеСтроки.Ячейки.ВидСубконто1.УстановитьТекст("");
			ОформлениеСтроки.Ячейки.ВидСубконто2.УстановитьТекст("");
			ОформлениеСтроки.Ячейки.ВидСубконто3.УстановитьТекст("");
		КонецЕсли;

	КонецЕсли;

	Если НЕ ОформлениеСтроки.Ячейки.Найти("ВидСубконтоНУ3") = НЕОПРЕДЕЛЕНО Тогда

		ОформлениеСтроки.Ячейки.ВидСубконтоНУ1.Видимость = ОтражатьВНалоговомУчете;
		ОформлениеСтроки.Ячейки.ВидСубконтоНУ2.Видимость = ОтражатьВНалоговомУчете;
		ОформлениеСтроки.Ячейки.ВидСубконтоНУ3.Видимость = ОтражатьВНалоговомУчете;

		Если ЗначениеЗаполнено(СчетЗатратНУ) Тогда

			КоличествоСубконто = СчетЗатратНУ.ВидыСубконто.Количество();

			Если КоличествоСубконто > 0 Тогда
				ОформлениеСтроки.Ячейки.ВидСубконтоНУ1.УстановитьТекст( СчетЗатратНУ.ВидыСубконто.Получить(0).ВидСубконто);
			Иначе
				ОформлениеСтроки.Ячейки.ВидСубконтоНУ1.УстановитьТекст("");
			КонецЕсли;

			Если КоличествоСубконто > 1 Тогда
				ОформлениеСтроки.Ячейки.ВидСубконтоНУ2.УстановитьТекст(СчетЗатратНУ.ВидыСубконто.Получить(1).ВидСубконто);
			Иначе
				ОформлениеСтроки.Ячейки.ВидСубконтоНУ2.УстановитьТекст("");
			КонецЕсли;

			Если КоличествоСубконто > 2 Тогда
				ОформлениеСтроки.Ячейки.ВидСубконтоНУ3.УстановитьТекст(СчетЗатратНУ.ВидыСубконто.Получить(2).ВидСубконто);
			Иначе
				ОформлениеСтроки.Ячейки.ВидСубконтоНУ3.УстановитьТекст("");
			КонецЕсли;

		Иначе
			ОформлениеСтроки.Ячейки.ВидСубконтоНУ1.УстановитьТекст("");
			ОформлениеСтроки.Ячейки.ВидСубконтоНУ2.УстановитьТекст("");
			ОформлениеСтроки.Ячейки.ВидСубконтоНУ3.УстановитьТекст("");
		КонецЕсли;

	КонецЕсли;

	
	Если НЕ ОформлениеСтроки.Ячейки.Найти("Субконто1") = НЕОПРЕДЕЛЕНО Тогда

		ОформлениеСтроки.Ячейки.Субконто1.ТолькоПросмотр = ОформлениеСтроки.Ячейки.Субконто1.ТолькоПросмотр;
		ОформлениеСтроки.Ячейки.Субконто2.ТолькоПросмотр = ОформлениеСтроки.Ячейки.Субконто2.ТолькоПросмотр;
		ОформлениеСтроки.Ячейки.Субконто3.ТолькоПросмотр = ОформлениеСтроки.Ячейки.Субконто3.ТолькоПросмотр;	
	КонецЕсли;	
	
	Если НЕ ОформлениеСтроки.Ячейки.Найти("СубконтоНУ1") = НЕОПРЕДЕЛЕНО Тогда
		ОформлениеСтроки.Ячейки.СубконтоНУ1.Видимость = ОтражатьВНалоговомУчете;
		ОформлениеСтроки.Ячейки.СубконтоНУ1.ТолькоПросмотр = ОформлениеСтроки.Ячейки.СубконтоНУ1.ТолькоПросмотр ИЛИ НЕ ОтражатьВНалоговомУчете;
	КонецЕсли;	
	
	Если НЕ ОформлениеСтроки.Ячейки.Найти("СубконтоНУ2") = НЕОПРЕДЕЛЕНО Тогда
		ОформлениеСтроки.Ячейки.СубконтоНУ2.Видимость = ОтражатьВНалоговомУчете;
		ОформлениеСтроки.Ячейки.СубконтоНУ2.ТолькоПросмотр = ОформлениеСтроки.Ячейки.СубконтоНУ2.ТолькоПросмотр ИЛИ НЕ ОтражатьВНалоговомУчете;
	КонецЕсли;	
	
	Если НЕ ОформлениеСтроки.Ячейки.Найти("СубконтоНУ3") = НЕОПРЕДЕЛЕНО Тогда
		ОформлениеСтроки.Ячейки.СубконтоНУ3.Видимость = ОтражатьВНалоговомУчете;
		ОформлениеСтроки.Ячейки.СубконтоНУ3.ТолькоПросмотр = ОформлениеСтроки.Ячейки.СубконтоНУ3.ТолькоПросмотр ИЛИ НЕ ОтражатьВНалоговомУчете;
	КонецЕсли;	
	
КонецПроцедуры // НастроитьВидимостьЯчеекАналитикиЗатрат()

// Процедура удаляет из строки имен реквизитов, проверяемых на заполненность
// реквизиты, которые зависят от типа учета документа
//
// Параметры:
//		ДокОбъект - проверяемый документ
//		СтрокаРекв   - Строка с именами реквизитов, которые надо проверять на заполненность
//      БухРеквизиты - строка, с именами реквизитов имеющих смысл
// 					   только в случае если документ отражается в регл.(бух.) учете
//		ИмяТабЧасти  - имя проверяемой табл. части документа
//
Процедура НепроверятьРеквизитыПоТипуУчета(	ДокОбъект, СтрокаРекв, Знач БухРеквизиты, ИмяТабЧасти = "", 
											СтруктураШапкиДокумента = Неопределено) Экспорт

	Стр = СтрЗаменить(СтрокаРекв, " ", "");
	СтруктРекв = Новый Структура(Стр);
	СтрокаРекв = "";

	БухРекв = СтрЗаменить(БухРеквизиты, " ", "");
	БухРекв = СтрЗаменить(БухРекв, Символы.ПС,  "");
	БухРекв = "," + СтрЗаменить(БухРекв, Символы.Таб, "") + ",";

	БухУчет = Истина;

	// Исключим из списка проверяемых реквизитов, те которые относятся к конкретному
	// виду учета и этот вид учета выключен
	Для Каждого Рекв Из СтруктРекв Цикл

		ИмяРекв = ?(ПустаяСтрока(ИмяТабЧасти), "", ИмяТабЧасти + ".") + Рекв.Ключ;

		Если Не БухУчет И Найти(БухРекв, "," + ИмяРекв + ",") > 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаРекв = ?(ПустаяСтрока(СтрокаРекв), "", СтрокаРекв + ", ") + Рекв.Ключ;

	КонецЦикла;

КонецПроцедуры // НепроверятьРеквизитыПоТипуУчета()

// Функция определяет основную спецификациию для заданной
// номенклатуры на определенный момент.
//
Функция ОпределитьСпецификациюПоУмолчанию(Номенклатура, Момент) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Момент) Тогда // используем текущую дату
		Момент = ТекущаяДата();
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", Номенклатура);
	
	СпецификацияТекущая = РегистрыСведений.ОсновныеСпецификацииНоменклатуры.ПолучитьПоследнее(Момент,Отбор).СпецификацияНоменклатуры;
	
	Возврат СпецификацияТекущая;

КонецФункции // ОпределитьСпецификациюПоУмолчанию()

// Функция производит расчет сырья, необходимый для производства готовой
// продукции, указанной в документе - основание
Функция РассчитатьРасходСырьяПоСпецификации(ОснованиеСсылка, ДокументаОснованиеТЧ, Номенклатура=Неопределено) Экспорт
	
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура КАК Номенклатура,
		|	СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА СпецификацииНоменклатуры.Количество = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.КоличествоПродукции * СпецификацииНоменклатурыИсходныеКомплектующие.Количество / СпецификацииНоменклатуры.Количество КАК ЧИСЛО(15, 3))
		|	КОНЕЦ КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДокументОснования.Спецификация КАК Спецификация,
		|		СУММА(ДокументОснования.Количество) КАК КоличествоПродукции
		|	ИЗ
		|		Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ДокументОснования
		|	ГДЕ
		|		ДокументОснования.Ссылка = &Ссылка
		|		И ДокументОснования.Спецификация <> &Спецификация";
		Если Номенклатура <> Неопределено Тогда
			Если Не Номенклатура.Пустая() Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|		И ДокументОснования.Спецификация.Владелец.Ссылка = &Номенклатура";
				Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			КонецЕсли;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДокументОснования.Спецификация) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпецификацииНоменклатуры КАК СпецификацииНоменклатуры
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие КАК СпецификацииНоменклатурыИсходныеКомплектующие
		|			ПО СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка = СпецификацииНоменклатуры.Ссылка
		|		ПО ВложенныйЗапрос.Спецификация = СпецификацииНоменклатуры.Ссылка";

		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", ОснованиеСсылка);
		Запрос.УстановитьПараметр("Спецификация", Справочники.СпецификацииНоменклатуры.ПустаяСсылка());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтчетПроизводстваЗаСмену.Продукция", ДокументаОснованиеТЧ);

		Возврат Запрос.Выполнить();
		
	КонецФункции

Функция ВыводНаименованияВыпуска(Наименование, ВыводитьЕдиницыИзмерения = Истина) Экспорт
	
	Если ТипЗнч(Наименование) = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Наименование.НаименованиеПолное + ?(ВыводитьЕдиницыИзмерения, " (" + Наименование.БазоваяЕдиницаИзмерения + ")", "");
	ИначеЕсли ТипЗнч(Наименование) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		Возврат "Услуги производственного характера";
	ИначеЕсли ТипЗнч(Наименование) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Возврат "Услуги, оказанные для подразделения " + Наименование.Наименование;
    Иначе
		Возврат Наименование;
		
	КонецЕсли;
		
КонецФункции

// Процедура выполняет стандартные действия по расчету плановой суммы
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//
Процедура ПересчитатьПлановуюСумму(СтрокаТЧ) Экспорт

	СтрокаТЧ.СуммаПлановая = СтрокаТЧ.Количество * СтрокаТЧ.ПлановаяСтоимость;

КонецПроцедуры // ПересчитатьПлановуюСумму()

// В строке табличной части заполняется плановая себестоимость номенклатуры.
//
// Параметры: 
//  СтрокаТЧ - строка табличной части, в которой надо заполнить плановую себестоимость;
//  Дата     - дата, на которую надо получить плановую себестоимость.
//
Процедура ЗаполнитьПлановуюСебестоимость(СтрокаТЧ, Дата, Организация) Экспорт

	ТипЦенПлановойСебестоимости   = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
	ВалютаРеглментированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Если ЗначениеЗаполнено(ТипЦенПлановойСебестоимости) Тогда

		СтрокаТЧ.ПлановаяСтоимость =
			УправлениеЦенообразованием.ПолучитьЦенуНоменклатуры(СтрокаТЧ.Номенклатура,
									 ТипЦенПлановойСебестоимости, Дата,
									 ВалютаРеглментированногоУчета, 1, , Организация);
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьПлановуюСебестоимость()
             