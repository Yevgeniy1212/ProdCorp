// проверяет выполнение условия для конкретного документа
//
Функция УсловиеВыполняется(Условие,ДокументСсылка,ТаблицаРезультата=Неопределено,СтруктураДанныхДокумента) Экспорт
	Если НЕ ЗначениеЗаполнено(Условие) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ТаблицаРезультата = Неопределено Тогда
		ТаблицаРезультата = Условие.СоставныеЧастиУсловия.Выгрузить();
		ТаблицаРезультата.Колонки.Добавить("ПризнакВыполнения");
		ТаблицаРезультата.ЗаполнитьЗначения(Ложь,"ПризнакВыполнения");
	Иначе
		ТаблицаРезультата.Очистить();
		фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(Условие.СоставныеЧастиУсловия.Выгрузить(),ТаблицаРезультата);
		Для Каждого СтрокаТЗ Из ТаблицаРезультата Цикл
			СтрокаТЗ.ПараметрыСоединенияСИсточником=Условие;
		КонецЦикла;
	КонецЕсли;
	Если ТаблицаРезультата.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Для Каждого СтрокаСУсловием Из ТаблицаРезультата Цикл
		СтрокаСУсловием.ПризнакВыполнения = ПроверитьВыполнениеЧастиУсловия(СтрокаСУсловием,ДокументСсылка,СтруктураДанныхДокумента);
	КонецЦикла;
	Если Условие.ВсеУсловияОбязательны Тогда
		Выполнено = Истина;
		Для Каждого СтрокаСУсловием Из ТаблицаРезультата Цикл
			Если НЕ СтрокаСУсловием.ПризнакВыполнения Тогда
				Выполнено = Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Выполнено = Ложь;
		Для Каждого СтрокаСУсловием Из ТаблицаРезультата Цикл
			Если СтрокаСУсловием.ПризнакВыполнения Тогда
				Выполнено = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Выполнено;
КонецФункции //УсловиеВыполняется

// проверяет на выполнимость строку условия
//
Функция ПроверитьВыполнениеЧастиУсловия(СтрокаСУсловием,ДокументСсылка,СтруктураДанныхДокумента)
	 мВидСравнения 		= СтрокаСУсловием.ВидСравнения;
	 ЗначениеСравнения 	= Неопределено;
	 ЗначениеСравнения2 = Неопределено;
	 СписокЗначений		= Неопределено;
	 Если СтрокаСУсловием.РежимСравнения = Перечисления.усд_РежимыСравненияДляУсловий.СравнениеСПроизвольнымЗначением Тогда
		 ЗначениеСравнения 	= СтрокаСУсловием.ЗначениеДляСравнения;
		 ЗначениеСравнения2 = СтрокаСУсловием.ЗначениеДляСравнения2;
		 Если НЕ УсловиеНаСписок(мВидСравнения) Тогда
			 СписокЗначений = Новый СписокЗначений;
		 ИначеЕсли СтрокаСУсловием.СтрокаСписокСравнения<>"" Тогда
			 СписокЗначений = Новый СписокЗначений;
			 ТаблицаСписка = ЗначениеИзСтрокиВнутр(СтрокаСУсловием.СтрокаСписокСравнения);
			 Если ТипЗнч(ТаблицаСписка)= Тип("ТаблицаЗначений") Тогда
				 СписокЗначений.ЗагрузитьЗначения(ТаблицаСписка.ВыгрузитьКолонку("Значение"));
			 КонецЕсли;
		 Иначе
			 СписокЗначений = Новый СписокЗначений;
			 //ТаблицаСписка = СтрокаСУсловием.СписокСравнения.СоставныеЧастиУсловия[СтрокаСУсловием.НомерСтроки-1].СписокЗначений.Получить();
			 //Если ТипЗнч(ТаблицаСписка)= Тип("ТаблицаЗначений") Тогда
			 //	СписокЗначений.ЗагрузитьЗначения(ТаблицаСписка.ВыгрузитьКолонку("Значение"));
			 //КонецЕсли;
		 КонецЕсли;
	 ИначеЕсли СтрокаСУсловием.РежимСравнения = Перечисления.усд_РежимыСравненияДляУсловий.СравнениеСПолемРегистраСведений Тогда
		 МетаданныеРегистра = Метаданные.РегистрыСведений.Найти(СтрокаСУсловием.ИсточникДанных);
		 Периодический = Строка(МетаданныеРегистра.ПериодичностьРегистраСведений)<>"Непериодический";
		 Если СтрокаСУсловием.СтрокаПараметрыСоединенияСИсточником<>"" Тогда
			 ПараметрыСоединенияСИсточником = ЗначениеИзСтрокиВнутр(СтрокаСУсловием.СтрокаПараметрыСоединенияСИсточником);
		 Иначе
			 ПараметрыСоединенияСИсточником = Неопределено;
		 КонецЕсли;
		 Запрос = Новый Запрос;
		 ПараметрыСреза ="";
		 Если ТипЗнч(ПараметрыСоединенияСИсточником) <> Тип("ТаблицаЗначений") Тогда
			 ПараметрыСоединенияСИсточником = Неопределено;
		 Иначе
			 Для Каждого СтрокаСоединения Из ПараметрыСоединенияСИсточником Цикл
				 Измерение = СтрокаСоединения.ИзмерениеРегистра;
				 Запрос.УстановитьПараметр(Измерение,СтруктураДанныхДокумента[СтрокаСоединения.РеквизитДокумента]);
				 ПараметрыСреза = ПараметрыСреза + ?(СокрЛП(ПараметрыСреза)="",""," И ")+Измерение+"=&"+Измерение;
			 КонецЦикла;
		 КонецЕсли;
		 Запрос.УстановитьПараметр("Дата",?(СтруктураДанныхДокумента.Дата='00010101',ТекущаяДата(),СтруктураДанныхДокумента.Дата));
		 Запрос.УстановитьПараметр("Дата",?(СтруктураДанныхДокумента.Дата='00010101',ТекущаяДата(),СтруктураДанныхДокумента.Дата));
		 Запрос.УстановитьПараметр("Проведен",?(Строка(ДокументСсылка.Метаданные().Проведение)="Разрешить",СтруктураДанныхДокумента.Проведен,Ложь));
		 Если Периодический Тогда
			 ИмяИсточника = СтрокаСУсловием.ИсточникДанных+".СрезПоследних(&Дата,"+ПараметрыСреза+")";
		 Иначе
			 ИмяИсточника = СтрокаСУсловием.ИсточникДанных;
		 КонецЕсли;
		 Поле1 = СтрокаСУсловием.ПолеИсточникаДляСравнения;
		 Текст="ВЫБРАТЬ 
		 |	Регистр."+Поле1+" КАК "+Поле1;
		 Если СокрЛП(СтрокаСУсловием.ПолеИсточникаДляСравнения2) <>"" Тогда
		 	Поле2 = СтрокаСУсловием.ПолеИсточникаДляСравнения2;
			Текст=Текст+",
			|	Регистр."+Поле2+" КАК "+Поле2;
		КонецЕсли;
		Текст=Текст+"
		|ИЗ РегистрСведений."+ИмяИсточника+" КАК Регистр";
		Если НЕ Периодический И СокрЛП(ПараметрыСреза)<>"" Тогда
			Текст = Текст+"
			|ГДЕ "+ПараметрыСреза;
		КонецЕсли;
		Запрос.Текст = Текст;
		Попытка
			ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		Исключение
		 	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при проверке условия на поле """+СтрокаСУсловием.ИмяРеквизита+""": "+ОписаниеОшибки());
		 	Возврат Ложь;
		КонецПопытки;
		Если ТаблицаРезультат.Количество()>0 Тогда
			Выборка = ТаблицаРезультат[0];
			ЗначениеСравнения = Выборка[Поле1];
			Если СокрЛП(СтрокаСУсловием.ПолеИсточникаДляСравнения2) <>"" Тогда
				ЗначениеСравнения2 = Выборка[СтрокаСУсловием.ПолеИсточникаДляСравнения2];
			КонецЕсли;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.ЗагрузитьЗначения(ТаблицаРезультат.ВыгрузитьКолонку(Поле1));
		Иначе
			Возврат Ложь;
		КонецЕсли;
	 ИначеЕсли СтрокаСУсловием.РежимСравнения = Перечисления.усд_РежимыСравненияДляУсловий.СравнениеСПолемПроизвольногоИсточника Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = СтрокаСУсловием.ПроизвольныйИсточник;
		НаборРеквизитов = ДокументСсылка.Метаданные().Реквизиты;
		Для Каждого Реквизит Из НаборРеквизитов Цикл
			ИмяРеквизита = Реквизит.Имя;
			Запрос.УстановитьПараметр(ИмяРеквизита,СтруктураДанныхДокумента[ИмяРеквизита]);
		КонецЦикла;
		 Запрос.УстановитьПараметр("Дата",?(СтруктураДанныхДокумента.Дата='00010101',ТекущаяДата(),СтруктураДанныхДокумента.Дата));
		 Запрос.УстановитьПараметр("Проведен",?(Строка(ДокументСсылка.Метаданные().Проведение)="Разрешить",СтруктураДанныхДокумента.Проведен,Ложь));
		 Запрос.УстановитьПараметр("Номер",СтруктураДанныхДокумента.Номер);
		 Запрос.УстановитьПараметр("Ссылка",СтруктураДанныхДокумента.Ссылка);
		Попытка
			ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		Исключение
		 	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при проверке условия на поле """+СтрокаСУсловием.ИмяРеквизита+""": "+ОписаниеОшибки());
		 	Возврат Ложь;
		КонецПопытки;
		Если ТаблицаРезультат.Количество()>0 Тогда
			Выборка = ТаблицаРезультат[0];
			ЗначениеСравнения = Выборка[СтрокаСУсловием.ПолеИсточникаДляСравнения];
			Если СокрЛП(СтрокаСУсловием.ПолеИсточникаДляСравнения2) <>"" Тогда
				ЗначениеСравнения2 = Выборка[СтрокаСУсловием.ПолеИсточникаДляСравнения2];
			КонецЕсли;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.ЗагрузитьЗначения(ТаблицаРезультат.ВыгрузитьКолонку(СтрокаСУсловием.ПолеИсточникаДляСравнения));
		Иначе
			Возврат Ложь;
		КонецЕсли;
	 КонецЕсли;
	 Попытка
		 ИмяПроверяемогоРеквизита=СтрокаСУсловием.ИмяРеквизита;
		 Если Найти(ИмяПроверяемогоРеквизита,".")=0 Тогда
			 ЗначениеПроверяемогоРеквизита = СтруктураДанныхДокумента[ИмяПроверяемогоРеквизита];
		 Иначе
			 ПозицияТочки = Найти(ИмяПроверяемогоРеквизита,".");
			 ЗначениеПроверяемогоРеквизита = СтруктураДанныхДокумента[Лев(ИмяПроверяемогоРеквизита,ПозицияТочки-1)][Сред(ИмяПроверяемогоРеквизита,ПозицияТочки+1)];
		 КонецЕсли;
		 Результат = Сравнить(ЗначениеПроверяемогоРеквизита,мВидСравнения,ЗначениеСравнения,ЗначениеСравнения2,СписокЗначений);
	 Исключение
		 ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при проверке условия на поле """+СтрокаСУсловием.ИмяРеквизита+""": "+ОписаниеОшибки());
		 Результат = Ложь;
	 КонецПопытки;
	 Возврат Результат;
КонецФункции //ПроверитьВыполнениеЧастиУсловия

// выполняет сравнение значений
//
Функция Сравнить(Значение,ВидСравнения,ЗначениеСравнения,ЗначениеСравнения2,СписокЗначений)
	Если ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.Больше Тогда
		Если Значение > ЗначениеСравнения Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.БольшеИлиРавно Тогда
		Если Значение >= ЗначениеСравнения Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВИнтервале Тогда
		Если (Значение > ЗначениеСравнения) И (Значение < ЗначениеСравнения2) Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВИнтервалеВключаяГраницы Тогда
		Если (Значение >= ЗначениеСравнения) И (Значение <= ЗначениеСравнения2) Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.Меньше Тогда
		Если Значение < ЗначениеСравнения Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.МеньшеИлиРавно Тогда
		Если Значение <= ЗначениеСравнения Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеРавно Тогда
		Если Значение <> ЗначениеСравнения Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.Равно Тогда
		Если Значение = ЗначениеСравнения Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСписке Тогда
		Если СписокЗначений <> Неопределено И ТипЗнч(СписокЗначений)=Тип("СписокЗначений") Тогда
			Возврат (СписокЗначений.НайтиПоЗначению(Значение)<>Неопределено);
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВСписке Тогда
		Если СписокЗначений <> Неопределено И ТипЗнч(СписокЗначений)=Тип("СписокЗначений") Тогда
			Возврат (СписокЗначений.НайтиПоЗначению(Значение)=Неопределено);
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии Тогда
		Если СписокЗначений <> Неопределено И ТипЗнч(СписокЗначений)=Тип("СписокЗначений") Тогда
			Если СписокЗначений.НайтиПоЗначению(Значение)<>Неопределено Тогда
				Возврат Истина;
			Иначе
				Попытка
					РодительЗначения = Значение.Родитель;
					Пока РодительЗначения <> Неопределено И ЗначениеЗаполнено(РодительЗначения) Цикл
						Если СписокЗначений.НайтиПоЗначению(РодительЗначения)<>Неопределено Тогда
							Возврат Истина;
						КонецЕсли;
						РодительЗначения = РодительЗначения.Родитель;
					КонецЦикла;
					Возврат Ложь;
				Исключение
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВСпискеПоИерархии Тогда
		Если СписокЗначений <> Неопределено И ТипЗнч(СписокЗначений)=Тип("СписокЗначений") Тогда
			Если СписокЗначений.НайтиПоЗначению(Значение)=Неопределено Тогда
				Попытка
					РодительЗначения = Значение.Родитель;
					Пока РодительЗначения <> Неопределено И ЗначениеЗаполнено(РодительЗначения) Цикл
						Если СписокЗначений.НайтиПоЗначению(РодительЗначения)<>Неопределено Тогда
							Возврат Ложь;
						КонецЕсли;
						РодительЗначения = РодительЗначения.Родитель;
					КонецЦикла;
					Возврат Истина;
				Исключение
					Возврат Ложь;
				КонецПопытки;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВИерархии Тогда
		Если ЗначениеСравнения = Значение Тогда
			Возврат Истина;
		Иначе
			Попытка
				РодительЗначения = Значение.Родитель;
				Пока РодительЗначения <> Неопределено И ЗначениеЗаполнено(РодительЗначения) Цикл
					Если ЗначениеСравнения = РодительЗначения Тогда
						Возврат Истина;
					КонецЕсли;
					РодительЗначения = РодительЗначения.Родитель;
				КонецЦикла;
				Возврат Ложь;
			Исключение
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.НеВИерархии Тогда
		Если ЗначениеСравнения <> Значение Тогда
			Попытка
				РодительЗначения = Значение.Родитель;
				Пока РодительЗначения <> Неопределено И ЗначениеЗаполнено(РодительЗначения) Цикл
					Если ЗначениеСравнения = РодительЗначения Тогда
						Возврат Ложь;
					КонецЕсли;
					РодительЗначения = РодительЗначения.Родитель;
				КонецЦикла;
				Возврат Истина;
			Исключение
				Возврат Ложь;
			КонецПопытки;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции //Сравнить

//устанавливает для документа первый этап движения по маршруту
//
Функция ПолучитьПервыйЭтап(Маршрут,ДокументОбъект=Неопределено,ДокументСсылка=Неопределено) Экспорт
	ВидДокументов = Неопределено;
	Если ДокументСсылка = Неопределено Тогда
		ДокументСсылка = ДокументОбъект.Ссылка;
		ДокументОбъект.ДополнительныеСвойства.Свойство("ВидДокументов",ВидДокументов);
	КонецЕсли;
	Если ВидДокументов = Неопределено Тогда
       ВидДокументов = Маршрут.Владелец;
	КонецЕсли;
    ПервыйЭтап = ОпределитьСледующийЭтап(ДокументСсылка,Неопределено,Маршрут);
	
	Если ЗначениеЗаполнено(ПервыйЭтап) Тогда
		СтруктураРезультата = ПолучитьХарактеристикиЭтапа(ПервыйЭтап,Маршрут,ВидДокументов,ДокументСсылка); 
		Возврат СтруктураРезультата;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции //ПолучитьПервыйЭтап

//Функция ПользовательВходитВГруппуОтветственности
//
Функция ПользовательВходитВГруппуОтветственности(ТекПользователь,Этап,Маршрут,ВидДокументов=Неопределено,ДокументСсылка) Экспорт
	СписокГруппы = ПолучитьСписокГруппыОтветственности(Этап,Маршрут,ВидДокументов,ДокументСсылка);
	Если СписокГруппы.Количество()=0 Тогда
		Возврат Истина;
	Иначе
		Возврат СписокГруппы.НайтиПоЗначению(ТекПользователь)<>Неопределено;
	КонецЕсли;
КонецФункции //ПользовательВходитВГруппуОтветственности

// возвращает результат запрос по характеристикам этапа
//
Функция ПолучитьХарактеристикиЭтапа(Этап,Маршрут,ВидДокументов,Документ=Неопределено) Экспорт
	Запрос= Новый Запрос;
	Запрос.УстановитьПараметр("Этап",			Этап);
	Запрос.УстановитьПараметр("Маршрут",		Маршрут);
	Запрос.УстановитьПараметр("ВидДокументов",	ВидДокументов);
	Запрос.Текст="ВЫБРАТЬ
	             |	ЭтапыМаршрута.СостояниеДокумента,
	             |	ЭтапыМаршрута.СостояниеПриВозврате,
	             |	ЭтапыМаршрута.ЗапретитьПроведениеДокументаНаДанномЭтапе,
	             |	ЭтапыМаршрута.КорректироватьРеквизитыДокумента,
	             |	ЭтапыМаршрута.ОжидатьПодписиВсехОтветственных,
	             |	ЭтапыМаршрута.СостояниеПриОтклонении,
	             |	ЭтапыМаршрута.КонтрольЗаполнения,
	             |	ЭтапыМаршрута.ПровестиАвтоматическиПриУтверждении
	             |ИЗ
	             |	Справочник.усд_МаршрутыДвиженияДокументов.ЭтапыМаршрута КАК ЭтапыМаршрута
	             |ГДЕ
	             |	ЭтапыМаршрута.Ссылка = &Маршрут
	             |	И ЭтапыМаршрута.Этап = &Этап";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура("СостояниеДокумента,СостояниеПриВозврате,ЗапретитьПроведениеДокументаНаДанномЭтапе,
		|КорректироватьРеквизитыДокумента,ОжидатьПодписиВсехОтветственных,
		|СостояниеПриОтклонении,КонтрольЗаполнения,ПровестиАвтоматическиПриУтверждении");
		ЗаполнитьЗначенияСвойств(СтруктураВозврата,Выборка);
		СтруктураВозврата.Вставить("Этап",Этап);
		Если Документ<>Неопределено Тогда
			// предыдущий этап
			СтруктураВозврата.Вставить("ЭтапВозврата",ОпределитьПредыдущийЭтап(Документ.Ссылка,Этап));
			//следующий этап
			СтруктураВозврата.Вставить("СледующийЭтап",ОпределитьСледующийЭтап(Документ.Ссылка,Этап,Маршрут));
		КонецЕсли;
		Возврат СтруктураВозврата;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции //ПолучитьХарактеристикиЭтапа

//Функция ПолучитьСписокГруппыОтветственности
//
Функция ПолучитьСписокГруппыОтветственности(Этап,Маршрут,ВидДокументов=Неопределено,ДокументСсылка) Экспорт
	Если ВидДокументов = Неопределено Тогда
		ВидДокументов = Маршрут.Владелец;
	КонецЕсли;
	СписокГруппы = Новый СписокЗначений;
	Если Этап = Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута Тогда
		СписокГруппы.Добавить(ДокументСсылка.Автор);
		Возврат СписокГруппы;
	Иначе
		 Запрос = Новый Запрос;
		 Запрос.УстановитьПараметр("Этап",Этап);
		 Запрос.УстановитьПараметр("Маршрут",Маршрут);
		 Запрос.УстановитьПараметр("ВидДокументов",ВидДокументов);
		 Запрос.Текст="ВЫБРАТЬ
		              |	ЕСТЬNULL(СоставГруппСогласованияДокументов.Пользователь, ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Пользователь) КАК Пользователь
		              |ИЗ
		              |	РегистрСведений.усд_ПраваПодписиНаЭтапахМаршрутов КАК ПраваПодписиНаЭтапахМаршрутовСрезПоследних
		              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.усд_ГруппыСогласованияДокументов КАК ГруппыСогласованияДокументов
		              |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.усд_СоставГруппСогласованияДокументов КАК СоставГруппСогласованияДокументов
		              |			ПО ГруппыСогласованияДокументов.Ссылка = СоставГруппСогласованияДокументов.ГруппаСогласования
		              |		ПО ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Пользователь = ГруппыСогласованияДокументов.Ссылка
		              |ГДЕ
		              |	ПраваПодписиНаЭтапахМаршрутовСрезПоследних.ВидДокументов = &ВидДокументов
		              |	И ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Маршрут = &Маршрут
		              |	И ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Этап = &Этап
		              |	И (НЕ ЕСТЬNULL(СоставГруппСогласованияДокументов.Пользователь, ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Пользователь) ЕСТЬ NULL )
		              |			И (НЕ ЕСТЬNULL(СоставГруппСогласованияДокументов.Пользователь, ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Пользователь) = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		              |			И (НЕ ЕСТЬNULL(СоставГруппСогласованияДокументов.Пользователь, ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Пользователь) = ЗНАЧЕНИЕ(Справочник.усд_ГруппыСогласованияДокументов.ПустаяСсылка))";
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат СписокГруппы;
		Иначе
			СписокГруппы.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Пользователь"));
		КонецЕсли;
		Возврат СписокГруппы;
	КонецЕсли;	
КонецФункции //ПолучитьСписокГруппыОтветственности

//Функция СобраныВсеПодписиЭтапа
//
Функция СобраныВсеПодписиЭтапа(Документ,ВидДокументов,Маршрут,ТекущийЭтап) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ЕСТЬNULL(СоставГруппСогласованияДокументов.Пользователь, ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Пользователь) КАК Пользователь
	             |ПОМЕСТИТЬ ВТ_Пользователи
	             |ИЗ
	             |	РегистрСведений.усд_ПраваПодписиНаЭтапахМаршрутов КАК ПраваПодписиНаЭтапахМаршрутовСрезПоследних
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.усд_ГруппыСогласованияДокументов КАК ГруппыСогласованияДокументов
	             |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.усд_СоставГруппСогласованияДокументов КАК СоставГруппСогласованияДокументов
	             |			ПО ГруппыСогласованияДокументов.Ссылка = СоставГруппСогласованияДокументов.ГруппаСогласования
	             |		ПО ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Пользователь = ГруппыСогласованияДокументов.Ссылка
	             |ГДЕ
	             |	ПраваПодписиНаЭтапахМаршрутовСрезПоследних.ВидДокументов = &ВидДокументов
	             |	И ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Маршрут = &Маршрут
	             |	И ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Этап = &Этап
	             |	И НЕ ЕСТЬNULL(СоставГруппСогласованияДокументов.Пользователь, ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Пользователь) ЕСТЬ NULL 
	             |	И НЕ ЕСТЬNULL(СоставГруппСогласованияДокументов.Пользователь, ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Пользователь) = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	             |	И НЕ ЕСТЬNULL(СоставГруппСогласованияДокументов.Пользователь, ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Пользователь) = ЗНАЧЕНИЕ(Справочник.усд_ГруппыСогласованияДокументов.ПустаяСсылка)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ПраваПодписиЭтапа.Пользователь
	             |ИЗ
	             |	ВТ_Пользователи КАК ПраваПодписиЭтапа
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.усд_ДвижениеДокументовПоМаршрутам КАК ДвижениеДокументовПоМаршрутам
	             |		ПО ПраваПодписиЭтапа.Пользователь = ДвижениеДокументовПоМаршрутам.ОтветственноеЛицо
	             |			И (ДвижениеДокументовПоМаршрутам.Маршрут = &Маршрут)
	             |			И (ДвижениеДокументовПоМаршрутам.Документ = &Документ)
	             |			И (ДвижениеДокументовПоМаршрутам.Этап = &Этап)
	             |			И (ДвижениеДокументовПоМаршрутам.ВидДокументов = &ВидДокументов)
	             |ГДЕ
	             |	ДвижениеДокументовПоМаршрутам.ОтветственноеЛицо ЕСТЬ NULL 
	             |	И ПраваПодписиЭтапа.Пользователь <> &ТекущийПользователь";
	Запрос.УстановитьПараметр("Документ",		Документ);
	Запрос.УстановитьПараметр("ВидДокументов",	ВидДокументов);
	Запрос.УстановитьПараметр("Маршрут",		Маршрут);
	Запрос.УстановитьПараметр("Этап",			ТекущийЭтап);
	Запрос.УстановитьПараметр("Дата",			Документ.Дата);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции //СобраныВсеПодписиЭтапа

//Функция ИмеетсяПодписьПользователя
//
Функция ИмеетсяПодписьПользователя(Документ,ВидДокументов,Маршрут,ТекущийЭтап) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(усд_ДвижениеДокументовПоМаршрутам.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_Максимум
		|ИЗ
		|	РегистрСведений.усд_ДвижениеДокументовПоМаршрутам КАК усд_ДвижениеДокументовПоМаршрутам
		|ГДЕ
		|	усд_ДвижениеДокументовПоМаршрутам.Документ = &Документ
		|	И усд_ДвижениеДокументовПоМаршрутам.Этап <> &Этап
		|	И усд_ДвижениеДокументовПоМаршрутам.Маршрут = &Маршрут
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	усд_ДвижениеДокументовПоМаршрутам.ОтветственноеЛицо
		|ИЗ
		|	РегистрСведений.усд_ДвижениеДокументовПоМаршрутам КАК усд_ДвижениеДокументовПоМаршрутам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Максимум КАК ВТ_ПроверкаНаПоследние
		|		ПО ВТ_ПроверкаНаПоследние.Период <= усд_ДвижениеДокументовПоМаршрутам.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Максимум КАК ВТ_Максимум
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВТ_Максимум.Период ЕСТЬ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НЕ ВТ_ПроверкаНаПоследние.Период ЕСТЬ NULL 
		|		КОНЕЦ
		|	И усд_ДвижениеДокументовПоМаршрутам.Этап = &Этап
		|	И усд_ДвижениеДокументовПоМаршрутам.Документ = &Документ
		|	И усд_ДвижениеДокументовПоМаршрутам.ОтветственноеЛицо = &ОтветственноеЛицо";

	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Маршрут", Маршрут);
	Запрос.УстановитьПараметр("ОтветственноеЛицо", фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"));
	Запрос.УстановитьПараметр("Этап", ТекущийЭтап);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции //СобраныВсеПодписиЭтапа

 //Процедура выполняет удаление с маршрутов
//
Процедура ВыполнитьУдаление(ПомеченныеНаУдалениеДокументы,ДокументыНеИмеющиеДвиженийПоМаршрутам,ДокументыНеИмеющиеНазначенныхМаршрутов,УказанныеВручную,ДеревоДокументов) Экспорт
	СнятыеДокументы = Новый Массив;
	Если ПомеченныеНаУдалениеДокументы Тогда
		ВыборкаВидовДокументов = Справочники.фин_ВидыДокументов.Выбрать();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполняется снятие с маршрутов помеченных на удаление");
		Пока ВыборкаВидовДокументов.Следующий() Цикл
			Если ВыборкаВидовДокументов.ЭтоГруппа Или СокрЛП(ВыборкаВидовДокументов.ПрограммныйИдентификатор)="" Тогда
				Продолжить;
			КонецЕсли;
			ВидДокументов=СокрЛП(ВыборкаВидовДокументов.ПрограммныйИдентификатор);
			Если Метаданные.Документы.Найти(ВидДокументов)=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	НазначенияМаршрутов.Документ КАК Документ
			               |ПОМЕСТИТЬ ВТ_ДокументыНаМаршрутах
			               |ИЗ
			               |	РегистрСведений.усд_НазначенияМаршрутов КАК НазначенияМаршрутов
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Документ
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВТ_ДокументыНаМаршрутах.Документ
			               |ИЗ
			               |	ВТ_ДокументыНаМаршрутах КАК ВТ_ДокументыНаМаршрутах
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ."+ВидДокументов+" КАК ТаблицаДокумента
			               |		ПО ВТ_ДокументыНаМаршрутах.Документ = ТаблицаДокумента.Ссылка
			               |			И (ТаблицаДокумента.ПометкаУдаления)";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				  НаборЗаписей = РегистрыСведений.усд_НазначенияМаршрутов.СоздатьНаборЗаписей();
				  НаборЗаписей.Отбор.Документ.Значение 		= Выборка.Документ;
				  НаборЗаписей.Отбор.Документ.Использование = Истина;
				  НаборЗаписей.Очистить();
				  НаборЗаписей.Записать();
				СнятыеДокументы.Добавить(Выборка.Документ);
			КонецЦикла;
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ДвижениеДокументовПоМаршрутам.Документ КАК Документ
			               |ПОМЕСТИТЬ ВТ_ДокументыНаМаршрутах
			               |ИЗ
			               |	РегистрСведений.усд_ДвижениеДокументовПоМаршрутам КАК ДвижениеДокументовПоМаршрутам
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Документ
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВТ_ДокументыНаМаршрутах.Документ
			               |ИЗ
			               |	ВТ_ДокументыНаМаршрутах КАК ВТ_ДокументыНаМаршрутах
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ."+ВидДокументов+" КАК ТаблицаДокумента
			               |		ПО ВТ_ДокументыНаМаршрутах.Документ = ТаблицаДокумента.Ссылка
			               |			И (ТаблицаДокумента.ПометкаУдаления)";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				  НаборЗаписей = РегистрыСведений.усд_ДвижениеДокументовПоМаршрутам.СоздатьНаборЗаписей();
				  НаборЗаписей.Отбор.Документ.Значение 		= Выборка.Документ;
				  НаборЗаписей.Отбор.Документ.Использование = Истина;
				  НаборЗаписей.Очистить();
				  НаборЗаписей.Записать();
				СнятыеДокументы.Добавить(Выборка.Документ);
			КонецЦикла;
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ДвижениеДокументовПоМаршрутам.Документ КАК Документ
			               |ПОМЕСТИТЬ ВТ_ДокументыНаМаршрутах
			               |ИЗ
			               |	РегистрСведений.усд_АктивныеЭтапыРассмотренияДокументов КАК ДвижениеДокументовПоМаршрутам
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Документ
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВТ_ДокументыНаМаршрутах.Документ
			               |ИЗ
			               |	ВТ_ДокументыНаМаршрутах КАК ВТ_ДокументыНаМаршрутах
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ."+ВидДокументов+" КАК ТаблицаДокумента
			               |		ПО ВТ_ДокументыНаМаршрутах.Документ = ТаблицаДокумента.Ссылка
			               |			И (ТаблицаДокумента.ПометкаУдаления)";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				  НаборЗаписей = РегистрыСведений.усд_АктивныеЭтапыРассмотренияДокументов.СоздатьНаборЗаписей();
				  НаборЗаписей.Отбор.Документ.Значение 		= Выборка.Документ;
				  НаборЗаписей.Отбор.Документ.Использование = Истина;
				  НаборЗаписей.Очистить();
				  НаборЗаписей.Записать();
				СнятыеДокументы.Добавить(Выборка.Документ);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Если ДокументыНеИмеющиеДвиженийПоМаршрутам Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполняется снятие с маршрутов документов, не имеющих движений по маршрутам");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НазначенияМаршрутов.Документ КАК Документ
		               |ИЗ
		               |	РегистрСведений.усд_НазначенияМаршрутов КАК НазначенияМаршрутов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |			ДвижениеДокументовПоМаршрутам.Документ КАК Документ
		               |		ИЗ
		               |			РегистрСведений.усд_ДвижениеДокументовПоМаршрутам КАК ДвижениеДокументовПоМаршрутам) КАК Движения
		               |		ПО НазначенияМаршрутов.Документ = Движения.Документ
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |			ДвижениеДокументовПоМаршрутам.Документ КАК Документ
		               |		ИЗ
		               |			РегистрСведений.усд_АктивныеЭтапыРассмотренияДокументов КАК ДвижениеДокументовПоМаршрутам) КАК ДвиженияАктивные
		               |		ПО НазначенияМаршрутов.Документ = ДвиженияАктивные.Документ
		               |ГДЕ
		               |	Движения.Документ ЕСТЬ NULL И ДвиженияАктивные.Документ ЕСТЬ NULL";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.усд_НазначенияМаршрутов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Значение 		= Выборка.Документ;
			НаборЗаписей.Отбор.Документ.Использование = Истина;
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			НаборЗаписей = РегистрыСведений.усд_АктивныеЭтапыРассмотренияДокументов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Значение 		= Выборка.Документ;
			НаборЗаписей.Отбор.Документ.Использование = Истина;
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			СнятыеДокументы.Добавить(Выборка.Документ);
		КонецЦикла;
	КонецЕсли;
	Если ДокументыНеИмеющиеНазначенныхМаршрутов Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполняется удаление истории движений документов, не имеющих назначенных маршрутов");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ДвижениеДокументовПоМаршрутам.Документ КАК Документ
		               |ПОМЕСТИТЬ ВТ_ДокументыНаМаршрутах
		               |ИЗ
		               |	РегистрСведений.усд_ДвижениеДокументовПоМаршрутам КАК ДвижениеДокументовПоМаршрутам
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ДокументыНаМаршрутах.Документ
		               |ИЗ
		               |	ВТ_ДокументыНаМаршрутах КАК ВТ_ДокументыНаМаршрутах
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |			НазначенияМаршрутов.Документ КАК Документ
		               |		ИЗ
		               |			РегистрСведений.усд_НазначенияМаршрутов КАК НазначенияМаршрутов) КАК Назначения
		               |		ПО ВТ_ДокументыНаМаршрутах.Документ = Назначения.Документ
		               |ГДЕ
		               |	Назначения.Документ ЕСТЬ NULL ";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.усд_ДвижениеДокументовПоМаршрутам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Значение 		= Выборка.Документ;
			НаборЗаписей.Отбор.Документ.Использование = Истина;
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			НаборЗаписей = РегистрыСведений.усд_АктивныеЭтапыРассмотренияДокументов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Значение 		= Выборка.Документ;
			НаборЗаписей.Отбор.Документ.Использование = Истина;
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			СнятыеДокументы.Добавить(Выборка.Документ);
		КонецЦикла;
	КонецЕсли;
	Если УказанныеВручную Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполняется удаление с маршрутов документов, указанных пользователем");
		Для Каждого СтрокаВид Из ДеревоДокументов Цикл
			Документ									= СтрокаВид.Документ;
			НаборЗаписей 								= РегистрыСведений.усд_НазначенияМаршрутов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Значение 		= Документ;
			НаборЗаписей.Отбор.Документ.Использование 	= Истина;
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			НаборЗаписей 								= РегистрыСведений.усд_ДвижениеДокументовПоМаршрутам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Значение 		= Документ;
			НаборЗаписей.Отбор.Документ.Использование 	= Истина;
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			НаборЗаписей 								= РегистрыСведений.усд_АктивныеЭтапыРассмотренияДокументов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Значение 		= Документ;
			НаборЗаписей.Отбор.Документ.Использование 	= Истина;
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			СнятыеДокументы.Добавить(СтрокаВид.Документ);
		КонецЦикла;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыНаКонтроле.Документ
		|ИЗ
		|	РегистрСведений.усд_ДокументыНаКонтроле КАК ДокументыНаКонтроле
		|ГДЕ
		|	ДокументыНаКонтроле.Документ В(&СнятыеДокументы)";

	Запрос.УстановитьПараметр("СнятыеДокументы", СнятыеДокументы);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.усд_ДокументыНаКонтроле.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(ВыборкаДетальныеЗаписи.Документ);
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры //ВыполнитьУдаление

// проверяет выполнение условия для конкретного документа
//
Функция УсловиеПоСтрокеВыполняется(Условие,ДокументСсылка,ДанныеТекущейСтроки=Неопределено,ТаблицаМониторинга=Неопределено,СтруктураДанныхДокумента,КЭШСписков=Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(Условие) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТаблицаРезультата = Условие.СоставныеЧастиУсловия.Выгрузить();
	ТаблицаРезультата.Колонки.Добавить("ПризнакВыполнения");
	ТаблицаРезультата.ЗаполнитьЗначения(Ложь,"ПризнакВыполнения");
	ТаблицаРезультата.Колонки.Добавить("Ссылка");
	ТаблицаРезультата.ЗаполнитьЗначения(Условие.Ссылка,"Ссылка");
	Если ТаблицаРезультата.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	ВсеУсловияОбязательны = Условие.ВсеУсловияОбязательны;
	Для Каждого СтрокаСУсловием Из ТаблицаРезультата Цикл
		СтрокаСУсловием.ПризнакВыполнения = ПроверитьВыполнениеЧастиУсловияПоСтроке(СтрокаСУсловием,ДокументСсылка,ДанныеТекущейСтроки,СтруктураДанныхДокумента,КЭШСписков);
		Если ТаблицаМониторинга <> Неопределено Тогда
			ТаблицаМониторинга[ТаблицаМониторинга.Индекс(ДанныеТекущейСтроки)]["Результат"+Строка(ТаблицаРезультата.Индекс(СтрокаСУсловием)+1)]= СтрокаСУсловием.ПризнакВыполнения;
		КонецЕсли;
		Если ВсеУсловияОбязательны И СтрокаСУсловием.ПризнакВыполнения = Ложь Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ВсеУсловияОбязательны Тогда
		Выполнено = Истина;
		Для Каждого СтрокаСУсловием Из ТаблицаРезультата Цикл
			Если Не СтрокаСУсловием.ПризнакВыполнения Тогда
				Выполнено = Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Выполнено = Ложь;
		Для Каждого СтрокаСУсловием Из ТаблицаРезультата Цикл
			Если СтрокаСУсловием.ПризнакВыполнения Тогда
				Выполнено = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Выполнено;
КонецФункции //УсловиеВыполняется

// проверяет на выполнимость строку условия
//
Функция ПроверитьВыполнениеЧастиУсловияПоСтроке(СтрокаСУсловием,ДокументСсылка,ТекущаяСтрока,СтруктураДанныхДокумента,КЭШСписков=Неопределено)
	 мВидСравнения 		= СтрокаСУсловием.ВидСравнения;
	 ЗначениеСравнения 	= Неопределено;
	 ЗначениеСравнения2 = Неопределено;
	 СписокЗначений		= Неопределено;
	 Если СтрокаСУсловием.РежимСравнения = Перечисления.усд_РежимыСравненияДляУсловий.СравнениеСПроизвольнымЗначением Тогда
		 ЗначениеСравнения 	= СтрокаСУсловием.ЗначениеДляСравнения;
		 ЗначениеСравнения2 = СтрокаСУсловием.ЗначениеДляСравнения2;
		 Если НЕ УсловиеНаСписок(мВидСравнения) Тогда
			 СписокЗначений = Новый СписокЗначений;
		 ИначеЕсли ЗначениеЗаполнено(СтрокаСУсловием.ПредопределенныйСписок) Тогда
			 СписокЗначений = Новый СписокЗначений;
			 СписокЗначений.ЗагрузитьЗначения(СоставПредопределенногоСписка(СтрокаСУсловием.ПредопределенныйСписок,КЭШСписков));
		 ИначеЕсли СтрокаСУсловием.СтрокаСписокСравнения<>"" Тогда
			 СписокЗначений = Новый СписокЗначений;
			 ТаблицаСписка = ЗначениеИзСтрокиВнутр(СтрокаСУсловием.СтрокаСписокСравнения);
			 Если ТипЗнч(ТаблицаСписка)= Тип("ТаблицаЗначений") Тогда
				 СписокЗначений.ЗагрузитьЗначения(ТаблицаСписка.ВыгрузитьКолонку("Значение"));
			 КонецЕсли;
		 Иначе
			 СписокЗначений = Новый СписокЗначений;
			 //ТаблицаСписка = СтрокаСУсловием.ПараметрыСоединенияСИсточником.СоставныеЧастиУсловия[СтрокаСУсловием.НомерСтроки-1].СписокСравнения.Получить();
			 //Если ТипЗнч(ТаблицаСписка)= Тип("ТаблицаЗначений") Тогда
			 //    СписокЗначений.ЗагрузитьЗначения(ТаблицаСписка.ВыгрузитьКолонку("Значение"));
			 //КонецЕсли;
		 КонецЕсли;
	 ИначеЕсли СтрокаСУсловием.РежимСравнения = Перечисления.усд_РежимыСравненияДляУсловий.СравнениеСПолемРегистраСведений Тогда
		 МетаданныеРегистра = Метаданные.РегистрыСведений.Найти(СтрокаСУсловием.ИсточникДанных);
		 Периодический = Строка(МетаданныеРегистра.ПериодичностьРегистраСведений)<>"Непериодический";
		 Если СтрокаСУсловием.СтрокаПараметрыСоединенияСИсточником<>"" Тогда
			 ПараметрыСоединенияСИсточником = ЗначениеИзСтрокиВнутр(СтрокаСУсловием.СтрокаПараметрыСоединенияСИсточником);
		 Иначе
			 ПараметрыСоединенияСИсточником = Неопределено;
		 КонецЕсли;
		 Запрос = Новый Запрос;
		 ПараметрыСреза ="";
		 Если ТипЗнч(ПараметрыСоединенияСИсточником) <> Тип("ТаблицаЗначений") Тогда
			 ПараметрыСоединенияСИсточником = Неопределено;
		 Иначе
			 Для Каждого СтрокаСоединения Из ПараметрыСоединенияСИсточником Цикл
				 Измерение = СтрокаСоединения.ИзмерениеРегистра;
				 Запрос.УстановитьПараметр(Измерение,?(Найти(СтрокаСоединения.РеквизитДокумента,":")<>0,ТекущаяСтрока[Сред(СтрокаСоединения.РеквизитДокумента,Найти(СтрокаСоединения.РеквизитДокумента,":")+1)],СтруктураДанныхДокумента[СтрокаСоединения.РеквизитДокумента]));
				 ПараметрыСреза = ?(СокрЛП(ПараметрыСреза)="",""," И ")+Измерение+"=&"+Измерение;
			 КонецЦикла;
		 КонецЕсли;
		 Запрос.УстановитьПараметр("Дата",?(СтруктураДанныхДокумента.Дата='00010101',ТекущаяДата(),СтруктураДанныхДокумента.Дата));
		 Запрос.УстановитьПараметр("Проведен",?(Строка(ДокументСсылка.Метаданные().Проведение)="Разрешить",СтруктураДанныхДокумента.Проведен,Ложь));
		 Если Периодический Тогда
			 ИмяИсточника = СтрокаСУсловием.ИсточникДанных+".СрезПоследних(&Дата,"+ПараметрыСреза+")";
		 Иначе
			 ИмяИсточника = СтрокаСУсловием.ИсточникДанных;
		 КонецЕсли;
		 Поле1 = СтрокаСУсловием.ПолеИсточникаДляСравнения;
		 Текст="ВЫБРАТЬ 
		 |	Регистр."+Поле1+" КАК "+Поле1;
		 Если СокрЛП(СтрокаСУсловием.ПолеИсточникаДляСравнения2) <>"" Тогда
		 	Поле2 = СтрокаСУсловием.ПолеИсточникаДляСравнения2;
			Текст=Текст+",
			|	Регистр."+Поле2+" КАК "+Поле2;
		КонецЕсли;
		Текст=Текст+"
		|ИЗ РегистрСведений."+ИмяИсточника+" КАК Регистр";
		Если Не Периодический И СокрЛП(ПараметрыСреза)<>"" Тогда
			Текст = Текст+"
			|ГДЕ "+ПараметрыСреза;
		КонецЕсли;
		Запрос.Текст = Текст;
		Попытка
			ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		Исключение
		 	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при проверке условия на поле """+СтрокаСУсловием.ИмяРеквизита+""": "+ОписаниеОшибки());
		 	Возврат Ложь;
		КонецПопытки;
		Если ТаблицаРезультат.Количество()>0 Тогда
			Выборка = ТаблицаРезультат[0];
			ЗначениеСравнения = Выборка[Поле1];
			Если СокрЛП(СтрокаСУсловием.ПолеИсточникаДляСравнения2) <>"" Тогда
				ЗначениеСравнения2 = Выборка[СтрокаСУсловием.ПолеИсточникаДляСравнения2];
			КонецЕсли;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.ЗагрузитьЗначения(ТаблицаРезультат.ВыгрузитьКолонку(Поле1));
		Иначе
			Возврат Ложь;
		КонецЕсли;
	 ИначеЕсли СтрокаСУсловием.РежимСравнения = Перечисления.усд_РежимыСравненияДляУсловий.СравнениеСПолемПроизвольногоИсточника Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = СтрокаСУсловием.ПроизвольныйИсточник;
		НаборРеквизитов = ДокументСсылка.Метаданные().Реквизиты;
		Для Каждого Реквизит Из НаборРеквизитов Цикл
			ИмяРеквизита = Реквизит.Имя;
			Запрос.УстановитьПараметр(ИмяРеквизита,СтруктураДанныхДокумента[ИмяРеквизита]);
		КонецЦикла;
		мУсловие = СтрокаСУсловием.Ссылка;
		Если мУсловие.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти Тогда
			НаборРеквизитов = ДокументСсылка.Метаданные().ТабличныеЧасти.Найти(мУсловие.ИмяИсточника).Реквизиты;
			Для Каждого Реквизит Из НаборРеквизитов Цикл
				ИмяРеквизита = Реквизит.Имя;
				Запрос.УстановитьПараметр("ТЧ_"+ИмяРеквизита,ТекущаяСтрока[ИмяРеквизита]);
			КонецЦикла;
		КонецЕсли;
		Если мУсловие.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах Тогда
			ИмяРегистра = Сред(мУсловие.ИмяИсточника,Найти(мУсловие.ИмяИсточника,".")+1);
			ОбъектПоиска = Метаданные["Регистры"+?(Найти(мУсловие.ИмяИсточника,"Сведений.")<>0,"Сведений",?(Найти(мУсловие.ИмяИсточника,"Накопления.")<>0,"Накопления",?(Найти(мУсловие.ИмяИсточника,"Бухгалтерии.")<>0,"Бухгалтерии","Расчета")))].Найти(ИмяРегистра);
			Если Найти(мУсловие.ИмяИсточника,"Бухгалтерии.")=0 Тогда
				Для Каждого Реквизит Из ОбъектПоиска.Измерения Цикл
					ИмяРеквизита = Реквизит.Имя;
					Запрос.УстановитьПараметр("ТЧ_"+ИмяРеквизита,ТекущаяСтрока[ИмяРеквизита]);
				КонецЦикла;
				Для Каждого Реквизит Из ОбъектПоиска.Ресурсы Цикл
					ИмяРеквизита = Реквизит.Имя;
					Запрос.УстановитьПараметр("ТЧ_"+ИмяРеквизита,ТекущаяСтрока[ИмяРеквизита]);
				КонецЦикла;
				Для Каждого Реквизит Из ОбъектПоиска.Реквизиты Цикл
					ИмяРеквизита = Реквизит.Имя;
					Запрос.УстановитьПараметр("ТЧ_"+ИмяРеквизита,ТекущаяСтрока[ИмяРеквизита]);
				КонецЦикла;
			Иначе
				Для Каждого Реквизит Из ОбъектПоиска.Измерения Цикл
					Попытка
						Если Реквизит.Балансовый Тогда
							ИмяРеквизита = Реквизит.Имя;
							Запрос.УстановитьПараметр("ТЧ_"+ИмяРеквизита,ТекущаяСтрока[ИмяРеквизита]);
						Иначе
							ИмяРеквизита = Реквизит.Имя+"Дт";
							Запрос.УстановитьПараметр("ТЧ_"+ИмяРеквизита,ТекущаяСтрока[ИмяРеквизита]);
							ИмяРеквизита = Реквизит.Имя+"Кт";
							Запрос.УстановитьПараметр("ТЧ_"+ИмяРеквизита,ТекущаяСтрока[ИмяРеквизита]);
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЦикла;
				Для Каждого Реквизит Из ОбъектПоиска.Ресурсы Цикл
					Попытка
						Если Реквизит.Балансовый Тогда
							ИмяРеквизита = Реквизит.Имя;
							Запрос.УстановитьПараметр("ТЧ_"+ИмяРеквизита,ТекущаяСтрока[ИмяРеквизита]);
						Иначе
							ИмяРеквизита = Реквизит.Имя+"Дт";
							Запрос.УстановитьПараметр("ТЧ_"+ИмяРеквизита,ТекущаяСтрока[ИмяРеквизита]);
							ИмяРеквизита = Реквизит.Имя+"Кт";
							Запрос.УстановитьПараметр("ТЧ_"+ИмяРеквизита,ТекущаяСтрока[ИмяРеквизита]);
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЦикла;
				Для Каждого Реквизит Из ОбъектПоиска.Реквизиты Цикл
					ИмяРеквизита = Реквизит.Имя;
					Запрос.УстановитьПараметр("ТЧ_"+ИмяРеквизита,ТекущаяСтрока[ИмяРеквизита]);
				КонецЦикла;
				СписокСвойств = Новый СписокЗначений;
				СписокСвойств.Добавить("СчетДт","Счет Дт");
				СписокСвойств.Добавить("СчетДт","Счет Кт");
				СписокСвойств.Добавить("СубконтоДт1","Субконто Дт (1)");
				СписокСвойств.Добавить("СубконтоДт2","Субконто Дт (2)");
				СписокСвойств.Добавить("СубконтоДт3","Субконто Дт (3)");
				СписокСвойств.Добавить("СубконтоКт1","Субконто Кт (1)");
				СписокСвойств.Добавить("СубконтоКт2","Субконто Кт (2)");
				СписокСвойств.Добавить("СубконтоКт3","Субконто Кт (3)");
				Для Каждого Реквизит Из СписокСвойств Цикл
					Попытка
						ИмяРеквизита = Реквизит.Значение;
						Запрос.УстановитьПараметр("ТЧ_"+ИмяРеквизита,ТекущаяСтрока[ИмяРеквизита]);
					Исключение
					КонецПопытки;
				 КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Запрос.УстановитьПараметр("Дата",?(СтруктураДанныхДокумента.Дата='00010101',ТекущаяДата(),СтруктураДанныхДокумента.Дата));
		Запрос.УстановитьПараметр("Проведен",?(Строка(ДокументСсылка.Метаданные().Проведение)="Разрешить",СтруктураДанныхДокумента.Проведен,Ложь));
		Попытка
			ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		Исключение
		 	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при проверке условия на поле """+СтрокаСУсловием.ИмяРеквизита+""": "+ОписаниеОшибки());
		 	Возврат Ложь;
		КонецПопытки;
		Если ТаблицаРезультат.Количество()>0 Тогда
			Выборка = ТаблицаРезультат[0];
			Попытка
				ЗначениеСравнения = Выборка[СтрокаСУсловием.ПолеИсточникаДляСравнения];
				Если СокрЛП(СтрокаСУсловием.ПолеИсточникаДляСравнения2) <>"" Тогда
					ЗначениеСравнения2 = Выборка[СтрокаСУсловием.ПолеИсточникаДляСравнения2];
				КонецЕсли;
			Исключение
			 	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при проверке условия на поле """+СтрокаСУсловием.ИмяРеквизита+""": "+ОписаниеОшибки());
			 	Возврат Ложь;				
			КонецПопытки;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.ЗагрузитьЗначения(ТаблицаРезультат.ВыгрузитьКолонку(СтрокаСУсловием.ПолеИсточникаДляСравнения));
		Иначе
			Возврат Ложь;
		КонецЕсли;
	 КонецЕсли;
	 Попытка
		 СтруктураДанныхИсточника = фин_ПроцедурыМеханизмовБюджетирования.ПолучитьСтруктуруИсточникаПоля(СтрокаСУсловием.ИмяРеквизита);
		 Если СтруктураДанныхИсточника.Автовыбор Тогда
			ИсходноеЗначениеСравнения = Неопределено;
			Для Инд = 1 По 3 Цикл
				Если СтруктураДанныхИсточника.Источник<>"" Тогда
					мИсходноеЗначениеСравнения = ПолучитьИсходноеЗначение(ТекущаяСтрока,СтруктураДанныхИсточника.Поле+Строка(Инд));
				Иначе
					мИсходноеЗначениеСравнения = ПолучитьИсходноеЗначение(СтруктураДанныхДокумента,СтруктураДанныхИсточника.Поле+Строка(Инд));
				КонецЕсли;
				Если ТипЗнч(мИсходноеЗначениеСравнения) = ТипЗнч(СтрокаСУсловием.Типизатор) Тогда
					ИсходноеЗначениеСравнения = мИсходноеЗначениеСравнения;
					Если СтрокаСУсловием.УсловиеНаВложенноеПоле = Истина И ЗначениеЗаполнено(СтрокаСУсловием.ВложенноеПоле) Тогда
						ИсходноеЗначениеСравнения = ИсходноеЗначениеСравнения[СтрокаСУсловием.ВложенноеПоле];
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		 Иначе
			 Если СтруктураДанныхИсточника.Источник<>"" Тогда
				 ИсходноеЗначениеСравнения = ПолучитьИсходноеЗначение(ТекущаяСтрока,СтруктураДанныхИсточника.Поле);
			 Иначе
				 ИсходноеЗначениеСравнения = ПолучитьИсходноеЗначение(СтруктураДанныхДокумента,СтруктураДанныхИсточника.Поле);
			 КонецЕсли;
		 КонецЕсли;
		 Результат = Сравнить(ИсходноеЗначениеСравнения,мВидСравнения,ЗначениеСравнения,ЗначениеСравнения2,СписокЗначений);
	 Исключение
		 ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при проверке условия на поле """+СтрокаСУсловием.ИмяРеквизита+""": "+ОписаниеОшибки());
		 Результат = Ложь;
	 КонецПопытки;
	 Возврат Результат;
 КонецФункции //ПроверитьВыполнениеЧастиУсловия
 
 Функция СоставПредопределенногоСписка(список,КЭШСписков = Неопределено)
	Если КЭШСписков<>Неопределено Тогда
		Результат = КЭШСписков.Получить(Список);	 
		Если Результат <> Неопределено Тогда
			Возврат Результат;	
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокДанных.Значение
		|ИЗ
		|	Справочник.фин_СпискиДанных.СписокДанных КАК СписокДанных
		|ГДЕ
		|	СписокДанных.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", список);

	Результат = Запрос.Выполнить();
	СоставСписка = Результат.Выгрузить().ВыгрузитьКолонку("Значение");
	
	Если КЭШСписков=Неопределено Тогда
		КЭШСписков = Новый Соответствие;
	КонецЕсли;
	
	КЭШСписков.Вставить(Список,СоставСписка);

	Возврат СоставСписка;
	 
КонецФункции
 
Функция УсловиеНаСписок(ВидСравненияУсловия)
	Если ВидСравненияУсловия = Перечисления.усд_ВидыСравненияДляУсловий.ВСписке
		ИЛИ ВидСравненияУсловия = Перечисления.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии
		ИЛИ ВидСравненияУсловия = Перечисления.усд_ВидыСравненияДляУсловий.НеВСписке
		ИЛИ ВидСравненияУсловия = Перечисления.усд_ВидыСравненияДляУсловий.НеВСпискеПоИерархии Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	Возврат Ложь;
КонецФункции
 
 //получает значение реквизита либо его поля
 //
Функция ПолучитьИсходноеЗначение(СтруктураДанныхДокумента,ИмяПроверяемогоРеквизита,Префикс = Неопределено) Экспорт
	 Если Найти(ИмяПроверяемогоРеквизита,".")=0 Тогда
		 ЗначениеПроверяемогоРеквизита = СтруктураДанныхДокумента[ИмяПроверяемогоРеквизита+?(Префикс = Неопределено,"",Префикс)];
	 Иначе
		 ПозицияТочки = Найти(ИмяПроверяемогоРеквизита,".");
		 ЗначениеПроверяемогоРеквизита = СтруктураДанныхДокумента[Лев(ИмяПроверяемогоРеквизита,ПозицияТочки-1)+?(Префикс = Неопределено,"",Префикс)][Сред(ИмяПроверяемогоРеквизита,ПозицияТочки+1)];
	 КонецЕсли;
	 Возврат ЗначениеПроверяемогоРеквизита;
 КонецФункции
 
Функция ИмеетсяНевыполненнаяЗадача(Объект,Исполнитель,ВидДокументов,Маршрут,Этап) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиСогласованияДокументов.Ссылка
		|ИЗ
		|	Задача.усд_ЗадачиСогласованияДокументов КАК ЗадачиСогласованияДокументов
		|ГДЕ
		|	ЗадачиСогласованияДокументов.Исполнитель = &Исполнитель
		|	И ЗадачиСогласованияДокументов.Объект = &Объект
		|	И ЗадачиСогласованияДокументов.ВидДокументов = &ВидДокументов
		|	И ЗадачиСогласованияДокументов.Маршрут = &Маршрут
		|	И ЗадачиСогласованияДокументов.Этап = &Этап
		|	И ЗадачиСогласованияДокументов.Выполнена = ЛОЖЬ
		|	И НЕ ЗадачиСогласованияДокументов.ПометкаУдаления";

	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("ВидДокументов", ВидДокументов);
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.УстановитьПараметр("Маршрут", Маршрут);
	Запрос.УстановитьПараметр("Этап", Этап);

	Результат = Запрос.Выполнить();

	Возврат НЕ Результат.Пустой();
КонецФункции

// функция вычисляет предыдущий этап для документа на маршруте
//
Функция ОпределитьПредыдущийЭтап(Документ,Этап) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДвижениеДокументовПоМаршрутам.Документ,
	|	МАКСИМУМ(ДвижениеДокументовПоМаршрутам.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ПериодыПопаданияНаТекущийЭтап
	|ИЗ
	|	РегистрСведений.усд_ДвижениеДокументовПоМаршрутам КАК ДвижениеДокументовПоМаршрутам
	|ГДЕ
	|	ДвижениеДокументовПоМаршрутам.Документ = &Документ
	|	И ДвижениеДокументовПоМаршрутам.Этап = &Этап
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвижениеДокументовПоМаршрутам.Документ
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ДвижениеДокументовПоМаршрутам.Документ,
	|	МАКСИМУМ(ДвижениеДокументовПоМаршрутам.Период) КАК Период
	|ИЗ
	|	РегистрСведений.усд_АктивныеЭтапыРассмотренияДокументов КАК ДвижениеДокументовПоМаршрутам
	|ГДЕ
	|	ДвижениеДокументовПоМаршрутам.Документ = &Документ
	|	И ДвижениеДокументовПоМаршрутам.Этап = &Этап
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвижениеДокументовПоМаршрутам.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыПопаданияНаТекущийЭтап.Документ,
	|	МАКСИМУМ(ДвижениеДокументовПоМаршрутам.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ПредыдущееДвижение
	|ИЗ
	|	ВТ_ПериодыПопаданияНаТекущийЭтап КАК ВТ_ПериодыПопаданияНаТекущийЭтап
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.усд_ДвижениеДокументовПоМаршрутам КАК ДвижениеДокументовПоМаршрутам
	|		ПО ВТ_ПериодыПопаданияНаТекущийЭтап.Документ = ДвижениеДокументовПоМаршрутам.Документ
	|			И ВТ_ПериодыПопаданияНаТекущийЭтап.Период >= ДвижениеДокументовПоМаршрутам.Период
	|			И (ДвижениеДокументовПоМаршрутам.Этап <> &Этап)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПериодыПопаданияНаТекущийЭтап.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвижениеДокументовПоМаршрутам.Этап
	|ИЗ
	|	ВТ_ПредыдущееДвижение КАК ВТ_ПредыдущееДвижение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.усд_ДвижениеДокументовПоМаршрутам КАК ДвижениеДокументовПоМаршрутам
	|		ПО ВТ_ПредыдущееДвижение.Документ = ДвижениеДокументовПоМаршрутам.Документ
	|			И ВТ_ПредыдущееДвижение.Период = ДвижениеДокументовПоМаршрутам.Период
	|			И (ДвижениеДокументовПоМаршрутам.Этап <> &Этап)";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Этап", Этап);
	
	Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
	ЭтапИсточник = Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута;
	Если Выборка.Следующий() Тогда
		Если Выборка.Этап<>Null Тогда
			ЭтапИсточник = Выборка.Этап;
		КонецЕсли;
	КонецЕсли;
	Возврат ЭтапИсточник;
КонецФункции //ОпределитьПредыдущийЭтап

// функция вычисляет следующий этап для документа на маршруте
//
Функция ОпределитьСледующийЭтап(Документ,Этап,Маршрут,СхемаМаршрута = Неопределено) Экспорт
	Возврат фин_ЗащитаПривилегированныеПроцедуры.ОпределитьСледующийЭтап(Документ,Этап,Маршрут,СхемаМаршрута);
КонецФункции //ОпределитьСледующийЭтап

Функция ВывестиЗаметкиПоДокументу(ДокументСсылка,ПолеЗаметок,Пользователь=Неопределено) Экспорт
    ПолеЗаметок.Очистить();
	МакетЗаметок = ПолучитьОбщийМакет("усд_Заметки");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	усд_РеестрЗаметок.Дата КАК Дата,
		|	усд_РеестрЗаметок.Дополнительно,
		|	усд_РеестрЗаметок.Заметка,
		|	усд_РеестрЗаметок.Автор,
		|	усд_РеестрЗаметок.ВидЗаметки
		|ИЗ
		|	РегистрСведений.усд_РеестрЗаметок КАК усд_РеестрЗаметок
		|ГДЕ
		|	усд_РеестрЗаметок.Объект = &Объект
		|	И ВЫБОР
		|			КОГДА усд_РеестрЗаметок.ВидЗаметки = ЗНАЧЕНИЕ(Перечисление.усд_ВидыЗаметок.Личная)
		|				ТОГДА усд_РеестрЗаметок.Автор = &Автор
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";

	Запрос.УстановитьПараметр("Автор", Пользователь);
	Запрос.УстановитьПараметр("Объект", ДокументСсылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
    ОбластьЗаметка = МакетЗаметок.ПолучитьОбласть("Заметка");
    ОбластьДополнительно = МакетЗаметок.ПолучитьОбласть("Дополнительно");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбластьЗаметка.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
		ПолеЗаметок.Вывести(ОбластьЗаметка);
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Дополнительно) Тогда
			ОбластьДополнительно.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
			ПолеЗаметок.Вывести(ОбластьДополнительно);
		КонецЕсли;
	КонецЦикла;
	Возврат ВыборкаДетальныеЗаписи.Количество();
КонецФункции

Процедура ВывестиЛистСогласования(Документ,ТабличныйДокумент) Экспорт
	
КонецПроцедуры

Процедура ДобавитьВСписокАвтовыборПоСубконто(НаборРеквизитов,СписокВыбора,Префикс=Неопределено) Экспорт
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		Если Найти(Реквизит.Имя,"Субконто")<>0 И Прав(Реквизит.Имя,1)="1" Тогда
			Имя = Лев(Реквизит.Имя,СтрДлина(Реквизит.Имя)-1);
			Если НаборРеквизитов.Найти(Имя+"2")<> Неопределено И НаборРеквизитов.Найти(Имя+"3")<> Неопределено Тогда
				СписокВыбора.Добавить("АвтовыборПоТипу:"+?(Префикс=Неопределено,"",Префикс+":")+Имя,"Автовыбор по типу из: "+?(Префикс=Неопределено,"",Префикс+":")+Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ОПЕРАЦИЯМИ СОГЛАСОВАНИЯ

Процедура ФормироватьЗадачу(Документ,Исполнитель,Этап,Статус,ТекущийПользователь, ВидДокумента,Маршрут) Экспорт
	фин_ЗащитаПривилегированныеПроцедуры.ФормироватьЗадачу(Документ,Исполнитель,Этап,Статус,ТекущийПользователь, ВидДокумента,Маршрут);	
КонецПроцедуры

Функция ДобавитьПодпись(Документ,Статус,Причина="",ТекущийПользователь,ВидДокумента,Маршрут,ТекущийЭтап,Приоритет,ДатаПоступления,КонтрольСрокаИсполнения,ЕдиницаИзмерения,СрокИсполнения,ОценкаСрока=0) Экспорт
	Возврат фин_ЗащитаПривилегированныеПроцедуры.ДобавитьПодпись(Документ,Статус,Причина,ТекущийПользователь,ВидДокумента,Маршрут,ТекущийЭтап,Приоритет,ДатаПоступления,КонтрольСрокаИсполнения,ЕдиницаИзмерения,СрокИсполнения,ОценкаСрока);	
КонецФункции

Функция ИзменитьТекущийЭтап(Документ,Этап,Статус,Состояние,Ответственный,Причина="",ВидДокумента,Маршрут,ТекущийЭтап,Приоритет) Экспорт
	Возврат фин_ЗащитаПривилегированныеПроцедуры.ИзменитьТекущийЭтап(Документ,Этап,Статус,Состояние,Ответственный,Причина,ВидДокумента,Маршрут,ТекущийЭтап,Приоритет);	
КонецФункции

Процедура ЗакрытьЗадачи(Документ,ЭтапЗавершен,Удалять,ТекущийПользователь,ВидДокумента,Маршрут,Этап) Экспорт
	фин_ЗащитаПривилегированныеПроцедуры.ЗакрытьЗадачи(Документ,ЭтапЗавершен,Удалять,ТекущийПользователь,ВидДокумента,Маршрут,Этап);
КонецПроцедуры

Процедура ФормироватьЗадачуОтветственномуПоДокументу(Документ,Отклонен,ТекущийПользователь,ВидДокумента,Маршрут) Экспорт
   	фин_ЗащитаПривилегированныеПроцедуры.ФормироватьЗадачуОтветственномуПоДокументу(Документ,Отклонен,ТекущийПользователь,ВидДокумента,Маршрут);
КонецПроцедуры

Процедура ФормироватьЗадачуАвторуДокумента(Документ,Отклонен,ТекущийПользователь,ВидДокумента,Маршрут) Экспорт
   	фин_ЗащитаПривилегированныеПроцедуры.ФормироватьЗадачуАвторуДокумента(Документ,Отклонен,ТекущийПользователь,ВидДокумента,Маршрут);
КонецПроцедуры

Функция СнятьСМаршрута(Документ) Экспорт
	НачатьТранзакцию();
	НаборЗаписей = РегистрыСведений.усд_НазначенияМаршрутов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	НаборЗаписей.Очистить();
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось снять документ "+Строка(Документ)+" с маршрута по причине: "+ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	НаборЗаписей = РегистрыСведений.усд_ДокументыНаКонтроле.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	НаборЗаписей.Очистить();
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось снять документ "+Строка(Документ)+" с маршрута по причине: "+ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	НаборЗаписей = РегистрыСведений.усд_ДвижениеДокументовПоМаршрутам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	НаборЗаписей.Очистить();
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось снять документ "+Строка(Документ)+" с маршрута по причине: "+ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	НаборЗаписей = РегистрыСведений.усд_АктивныеЭтапыРассмотренияДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	НаборЗаписей.Очистить();
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось снять документ "+Строка(Документ)+" с маршрута по причине: "+ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	усд_ЗадачиСогласованияДокументов.Ссылка
		|ИЗ
		|	Задача.усд_ЗадачиСогласованияДокументов КАК усд_ЗадачиСогласованияДокументов
		|ГДЕ
		|	усд_ЗадачиСогласованияДокументов.Объект = &Объект
		|	И НЕ усд_ЗадачиСогласованияДокументов.ПометкаУдаления";

	Запрос.УстановитьПараметр("Объект", Документ);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектЗадача = ВыборкаДетальныеЗаписи.ссылка.получитьОбъект();
		ОбъектЗадача.ПометкаУдаления = Истина;
		Попытка
			ОбъектЗадача.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось отменить задачу "+Строка(ВыборкаДетальныеЗаписи.ссылка)+" по причине: "+ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;

	ЗафиксироватьТранзакцию();
	Возврат Истина;
КонецФункции

Функция ПоставитьНаМаршрут(Документ,ВидДокументов,Маршрут,Этап = Неопределено,Ответственный = Неопределено,Приоритет = Неопределено,Состояние=Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(Маршрут) Тогда
		Возврат Ложь;
	КонецЕсли;
	НачатьТранзакцию();
	Если Этап = Неопределено Тогда
		СтруктураОтраженияЭтапа = ПолучитьПервыйЭтап(Маршрут,,Документ);
		Этап = СтруктураОтраженияЭтапа.Этап;
	Иначе
		СтруктураОтраженияЭтапа = ПолучитьХарактеристикиЭтапа(Этап,Маршрут,ВидДокументов,Документ);
	КонецЕсли;
	Если Приоритет = Неопределено Тогда
		Приоритет = Перечисления.усд_ПриоритетыРассмотренияДокументов.Обычный;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = Справочники.Пользователи.ПустаяСсылка();
		Если ЗначениеЗаполнено(Этап) И Этап<>Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ИспользоватьДиспетчеризациюЗадач") Тогда
			Ответственный = усд_ПроцедурыСогласованияДокументов.ОпределениеИсполнителяПоСистемеДиспетчеризации(Маршрут,Этап,Документ.Автор,Документ.Ссылка);
		КонецЕсли;
	КонецЕсли;
	Если Состояние = Неопределено Тогда
		Состояние = СтруктураОтраженияЭтапа.СостояниеДокумента;
	КонецЕсли;
	НаборЗаписей = РегистрыСведений.усд_НазначенияМаршрутов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Значение		= Документ;
	НаборЗаписей.Отбор.Документ.Использование 	= Истина;
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Документ 		= Документ;
	НоваяЗапись.Маршрут 		= Маршрут;
	НоваяЗапись.ВидДокументов 	= ВидДокументов;
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось поставить документ "+Строка(Документ)+" на маршрут по причине: "+ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	НаборЗаписейАктуальныеЭтапы = РегистрыСведений.усд_АктивныеЭтапыРассмотренияДокументов.СоздатьНаборЗаписей();
	НаборЗаписейАктуальныеЭтапы.Отбор.Документ.Значение		= Документ;
	НаборЗаписейАктуальныеЭтапы.Отбор.Документ.Использование 	= Истина;
	НоваяЗапись = НаборЗаписейАктуальныеЭтапы.Добавить();
	НоваяЗапись.Документ 		= Документ;
	НоваяЗапись.Период			= ТекущаяДата();
	НоваяЗапись.Маршрут 		= Маршрут;
	НоваяЗапись.ВидДокументов 	= ВидДокументов;
	НоваяЗапись.Этап 			= Этап;
	НоваяЗапись.Состояние 		= Состояние;
	НоваяЗапись.Статус 			= Перечисления.усд_СтатусыДокументовНаЭтапах.Активный;
	НоваяЗапись.ОжидатьПодписиВсехОтветственных				= СтруктураОтраженияЭтапа.ОжидатьПодписиВсехОтветственных;
	НоваяЗапись.ЗапретитьПроведениеДокументаНаДанномЭтапе	= СтруктураОтраженияЭтапа.ЗапретитьПроведениеДокументаНаДанномЭтапе;
	НоваяЗапись.КорректироватьРеквизитыДокумента			= СтруктураОтраженияЭтапа.КорректироватьРеквизитыДокумента;
	НоваяЗапись.Приоритет 		= Приоритет;
	НоваяЗапись.ОтветственноеЛицо = Ответственный;
	Попытка
		НаборЗаписейАктуальныеЭтапы.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось поставить документ "+Строка(Документ)+" на маршрут по причине: "+ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ФормироватьЗадачиПоИсполнителямСогласования") Тогда
		ФормироватьЗадачу(Документ,Ответственный,Этап,Перечисления.усд_СтатусыДокументовНаЭтапах.Активный,фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"), ВидДокументов,Маршрут)
	КонецЕсли;
	ЗафиксироватьТранзакцию();
    Возврат Истина;
КонецФункции

Функция СписокСогласуемыхВидовДокументов() Экспорт
	СписокВидов = Новый СписокЗначений;
	Для Каждого Документ Из Метаданные.Документы Цикл
		УчастиеВОтраженииФакта = Ложь;
		Подписка = Метаданные.ПодпискиНаСобытия.усд_ПередЗаписьюДокументаРегистрацияВСистемеСогласования;
		УчастиеВОтраженииФакта = Подписка.Источник.СодержитТип(Тип("ДокументОбъект."+Документ.Имя));
		Если УчастиеВОтраженииФакта Тогда
			СписокВидов.Добавить(Документ.Имя);
		КонецЕсли;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ВидыДокументов.Ссылка
		|ИЗ
		|	Справочник.фин_ВидыДокументов КАК фин_ВидыДокументов
		|ГДЕ
		|	фин_ВидыДокументов.ПрограммныйИдентификатор В(&ПрограммныйИдентификатор)
		|	И НЕ фин_ВидыДокументов.ПометкаУдаления";

	Запрос.УстановитьПараметр("ПрограммныйИдентификатор", СписокВидов);

	Результат = Запрос.Выполнить();

    Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

Функция ОпределениеИсполнителяПоСистемеДиспетчеризации(Маршрут,Этап,АвторДокумента,Документ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиДиспетчеризации.СпособДиспетчеризации,
		|	НастройкиДиспетчеризации.Диспетчер
		|ИЗ
		|	РегистрСведений.усд_НастройкиДиспетчеризацииЗадачСогласования КАК НастройкиДиспетчеризации
		|ГДЕ
		|	НастройкиДиспетчеризации.Маршрут = &Маршрут
		|	И НастройкиДиспетчеризации.Этап = &Этап
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиДиспетчеризацииБезУчетаЭтапа.СпособДиспетчеризации,
		|	НастройкиДиспетчеризацииБезУчетаЭтапа.Диспетчер
		|ИЗ
		|	РегистрСведений.усд_НастройкиДиспетчеризацииЗадачСогласования КАК НастройкиДиспетчеризацииБезУчетаЭтапа
		|ГДЕ
		|	НастройкиДиспетчеризацииБезУчетаЭтапа.Маршрут = &Маршрут
		|	И НастройкиДиспетчеризацииБезУчетаЭтапа.Этап = ЗНАЧЕНИЕ(Справочник.усд_ЭтапыМаршрутовДвиженияДокументов.ПустаяСсылка)";

	Запрос.УстановитьПараметр("Маршрут", Маршрут);
	Запрос.УстановитьПараметр("Этап", Этап);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		 СпособДиспетчеризации = ВыборкаДетальныеЗаписи.СпособДиспетчеризации;
		 Диспетчер = ВыборкаДетальныеЗаписи.Диспетчер;
	Иначе
		 Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	мСписокОтветственных = усд_УправлениеСогласованиемДокументов.ПолучитьСписокГруппыОтветственности(Этап,Маршрут,Маршрут.Владелец,Документ);

	Если СпособДиспетчеризации = Перечисления.усд_СпособыДиспетчеризацииЗадачСогласования.РаспределениеПоПравиламПерсональнойДиспетчеризации Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПравилаПерсональнойДиспетчеризации.ИсполнительЗадач,
			|	ВЫБОР
			|		КОГДА ПравилаПерсональнойДиспетчеризации.Этап = &Этап
			|			ТОГДА ПравилаПерсональнойДиспетчеризации.Приоритет
			|		ИНАЧЕ 1000 + ПравилаПерсональнойДиспетчеризации.Приоритет
			|	КОНЕЦ КАК Приоритет
			|ИЗ
			|	РегистрСведений.усд_ПравилаПерсональнойДиспетчеризацииПоСогласованию КАК ПравилаПерсональнойДиспетчеризации
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.усд_ДоступностьИсполнителейСогласования.СрезПоследних(&ДатаВремя,Исполнитель В (&ИсполнителиЗадач)) КАК ДоступностьИсполнителей
			|		ПО ПравилаПерсональнойДиспетчеризации.ИсполнительЗадач = ДоступностьИсполнителей.Исполнитель
			|ГДЕ
			|	ПравилаПерсональнойДиспетчеризации.Маршрут = &Маршрут
			|	И (ПравилаПерсональнойДиспетчеризации.Этап = &Этап
			|			ИЛИ ПравилаПерсональнойДиспетчеризации.Этап = ЗНАЧЕНИЕ(Справочник.усд_ЭтапыМаршрутовДвиженияДокументов.ПустаяСсылка))
			|	И ПравилаПерсональнойДиспетчеризации.ИсполнительЗадач В(&ИсполнителиЗадач)
			|	И ПравилаПерсональнойДиспетчеризации.АвторДокумента = &АвторДокумента
			|	И ЕСТЬNULL(ДоступностьИсполнителей.Доступность, ИСТИНА) = ИСТИНА
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет";

		Запрос.УстановитьПараметр("АвторДокумента", 	АвторДокумента);
		Запрос.УстановитьПараметр("ИсполнителиЗадач", 	мСписокОтветственных);
		Запрос.УстановитьПараметр("Маршрут", 			Маршрут);
		Запрос.УстановитьПараметр("Этап", 				Этап);
		Запрос.УстановитьПараметр("ДатаВремя", 			ТекущаяДата());
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.ИсполнительЗадач;
		КонецЦикла;

	ИначеЕсли СпособДиспетчеризации = Перечисления.усд_СпособыДиспетчеризацииЗадачСогласования.РаспределениеПоПриоритетамИсполнителей Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК ИсполнительЗадач,
			|	ВЫБОР
			|		КОГДА усд_ПриоритетыИсполнителей.Этап ЕСТЬ NULL 
			|			ТОГДА 1000000
			|		КОГДА усд_ПриоритетыИсполнителей.Этап = &Этап
			|			ТОГДА усд_ПриоритетыИсполнителей.Приоритет
			|		ИНАЧЕ 10000 + усд_ПриоритетыИсполнителей.Приоритет
			|	КОНЕЦ КАК Приоритет
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.усд_ПриоритетыИсполнителей КАК усд_ПриоритетыИсполнителей
			|		ПО Пользователи.Ссылка = усд_ПриоритетыИсполнителей.ИсполнительЗадач
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.усд_ДоступностьИсполнителейСогласования.СрезПоследних(&ДатаВремя, Исполнитель В (&ИсполнителиЗадач)) КАК ДоступностьИсполнителей
			|		ПО Пользователи.Ссылка = ДоступностьИсполнителей.Исполнитель
			|ГДЕ
			|	(усд_ПриоритетыИсполнителей.Этап ЕСТЬ NULL ИЛИ усд_ПриоритетыИсполнителей.Маршрут = &Маршрут)
			|	И (усд_ПриоритетыИсполнителей.Этап ЕСТЬ NULL ИЛИ усд_ПриоритетыИсполнителей.Этап = &Этап
			|			ИЛИ усд_ПриоритетыИсполнителей.Этап = ЗНАЧЕНИЕ(Справочник.усд_ЭтапыМаршрутовДвиженияДокументов.ПустаяСсылка))
			|	И Пользователи.Ссылка В(&ИсполнителиЗадач)
			|	И ЕСТЬNULL(ДоступностьИсполнителей.Доступность, ИСТИНА) = ИСТИНА
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет";

		Запрос.УстановитьПараметр("ДатаВремя", 			ТекущаяДата());
		Запрос.УстановитьПараметр("ИсполнителиЗадач", 	мСписокОтветственных);
		Запрос.УстановитьПараметр("Маршрут", 			Маршрут);
		Запрос.УстановитьПараметр("Этап", 				Этап);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.ИсполнительЗадач;
		КонецЦикла;

	Иначе

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК ИсполнительЗадач,
			|	СУММА(ВЫБОР
			|			КОГДА АктивныеЭтапы.Документ ЕСТЬ NULL 
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК Загрузка
			|ПОМЕСТИТЬ ВТ_Загрузка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.усд_АктивныеЭтапыРассмотренияДокументов.СрезПоследних КАК АктивныеЭтапы
			|		ПО Пользователи.Ссылка = АктивныеЭтапы.ОтветственноеЛицо
			|			И (ВЫБОР
			|				КОГДА &ВПределахЭтапа
			|					ТОГДА АктивныеЭтапы.Маршрут = &Маршрут
			|				ИНАЧЕ ИСТИНА
			|			КОНЕЦ)
			|			И (ВЫБОР
			|				КОГДА &ВПределахЭтапа
			|					ТОГДА АктивныеЭтапы.Этап = &Этап
			|				ИНАЧЕ ИСТИНА
			|			КОНЕЦ)
			|ГДЕ
			|	Пользователи.Ссылка В(&СписокИсполнителей)
			|
			|СГРУППИРОВАТЬ ПО
			|	Пользователи.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Загрузка.ИсполнительЗадач,
			|	ВТ_Загрузка.Загрузка КАК Загрузка
			|ИЗ
			|	ВТ_Загрузка КАК ВТ_Загрузка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.усд_ДоступностьИсполнителейСогласования.СрезПоследних(&ДатаВремя, Исполнитель В (&СписокИсполнителей)) КАК ДоступностьИсполнителей
			|		ПО ВТ_Загрузка.ИсполнительЗадач = ДоступностьИсполнителей.Исполнитель
			|ГДЕ
			|	ЕСТЬNULL(ДоступностьИсполнителей.Доступность, ИСТИНА) = ИСТИНА
			|
			|УПОРЯДОЧИТЬ ПО
			|	Загрузка";

		Запрос.УстановитьПараметр("ВПределахЭтапа", СпособДиспетчеризации = Перечисления.усд_СпособыДиспетчеризацииЗадачСогласования.РавномерноеРаспределениеПоЗагрузкеВПределахЭтапа);
		Запрос.УстановитьПараметр("ДатаВремя", ТекущаяДата());
		Запрос.УстановитьПараметр("Маршрут", Маршрут);
		Запрос.УстановитьПараметр("СписокИсполнителей", мСписокОтветственных);
		Запрос.УстановитьПараметр("Этап", Этап);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.ИсполнительЗадач;
		КонецЦикла;
	КонецЕсли;
	Возврат Диспетчер;
КонецФункции
