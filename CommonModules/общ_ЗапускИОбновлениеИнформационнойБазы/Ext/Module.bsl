///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБНОВЛЕНИЯ ИБ 

// Процедура проверяет и при необходимости подключает обработчик ожидания
// на запуск процедуры ПроверитьНапоминания()
//
// Параметры:
//  Нет.
//
Процедура мПроверитьПодключениеОбработчикаОжидания() Экспорт
	

	фин_ИнтервалПроверкиНапоминанийВСекундах = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ИнтервалПроверкиНапоминанийВСекундах");
	усд_ИнтервалПроверкиНапоминанийВСекундах = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ИнтервалПроверкиНапоминанийВСекундах");
	АвторизованныйПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	
	Если АвторизованныйПользователь <> Неопределено
		И ТипЗнч(АвторизованныйПользователь) = Тип("СправочникСсылка.Пользователи")
		И НЕ АвторизованныйПользователь.Пустая()
		И фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ИспользоватьНапоминания")=Истина
		И (усд_ИнтервалПроверкиНапоминанийВСекундах > 0 ИЛИ фин_ИнтервалПроверкиНапоминанийВСекундах > 0) Тогда
		
		СписокРолейСогласование = Новый Массив;
		СписокРолейСогласование.Добавить("усд_УчастникПроцессаСогласованияИУтвержденияДокументов");
		СписокРолейСогласование.Добавить("усд_УправлениеСогласованиемИУтверждениемДокументов");
		Если усд_ИнтервалПроверкиНапоминанийВСекундах>0 И фин_ОбщегоНазначенияСервер.ПроверкаРольИзСпискаДоступна(СписокРолейСогласование) Тогда
			ПодключитьОбработчикОжидания("ПроверитьНапоминанияСогласования", усд_ИнтервалПроверкиНапоминанийВСекундах);
			ПроверитьНапоминанияСогласования();
		КонецЕсли;
		
		СписокРолейБюджетирование = Новый Массив;
		СписокРолейБюджетирование.Добавить("фин_БазовыеФункции");
		
		Если фин_ИнтервалПроверкиНапоминанийВСекундах>0 И фин_ОбщегоНазначенияСервер.ПроверкаРольИзСпискаДоступна(СписокРолейБюджетирование) Тогда
			ПодключитьОбработчикОжидания("ПроверитьНапоминанияБюджетирования", фин_ИнтервалПроверкиНапоминанийВСекундах);
			ПроверитьНапоминанияБюджетирования();
		КонецЕсли;
	Иначе		
		
		СписокРолейСогласование = Новый Массив;
		СписокРолейСогласование.Добавить("усд_УчастникПроцессаСогласованияИУтвержденияДокументов");
		СписокРолейСогласование.Добавить("усд_УправлениеСогласованиемИУтверждениемДокументов");
		Если фин_ОбщегоНазначенияСервер.ПроверкаРольИзСпискаДоступна(СписокРолейСогласование) Тогда
			ОтключитьОбработчикОжидания("ПроверитьНапоминанияСогласования");
		КонецЕсли;
		
		СписокРолейБюджетирование = Новый Массив;
		СписокРолейБюджетирование.Добавить("фин_БазовыеФункции");
		
		Если фин_ОбщегоНазначенияСервер.ПроверкаРольИзСпискаДоступна(СписокРолейБюджетирование) Тогда
			ОтключитьОбработчикОжидания("ПроверитьНапоминанияБюджетирования");
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ИнициализироватьПодсистемуБюджетированиеПредприятия(Параметры=Неопределено) Экспорт
	глОбщиеЗначения = Новый Структура;
	// Вывод информации о переводе на платную поддержку
	ПоказыватьИнформацию = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИнформацияОВводеПлатнойПоддержки", "Показывать");
	Если ПоказыватьИнформацию = Неопределено ИЛИ ПоказыватьИнформацию Тогда
		СведенияОПоддержке = общ_ЗащитаКлиентСервер.ПолучитьСведенияОПоддержке();		
		Если СведенияОПоддержке = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СведенияОПоддержке) Тогда
			ОткрытьФорму("Обработка.общ_ИнформацияОВводеПлатнойПоддержки.Форма");
		КонецЕсли;
	КонецЕсли;
	Если фин_ОбщегоНазначенияСервер.НеобходимоПроверятьОтключениеЗащитыОтОпасныхДействий() Тогда
		ОткрытьФормуМодально("Обработка.общ_ПроверкаВерсийПлатформыИНастроек.Форма.ПроверкаЗащитыОтПодозрительныхДействийУПользователя");
	КонецЕсли;

	Если НЕ общ_ЗащитаКлиентСервер.ЗапускМенеджераЛицензий() Тогда
		Если фин_ОбщегоНазначенияСервер.ПравоРедактированияПутиСЛК() Тогда
			Результат = ОткрытьФормуМодально("ОбщаяФорма.общ_НастройкаСвязиССерверомЛицензий");
			Если Результат = Истина Тогда
				Если фин_ОбщегоНазначенияСервер.ПравоРедактированияСведенийОЛицензииНаПоддержку() И общ_ЗащитаКлиентСервер.СостояниеПоддержки() <> "EPaidSupportIsActive" Тогда
					ОткрытьФорму("Обработка.общ_СведенияОЛицензииНаПоддержку.Форма");
				КонецЕсли;
			Иначе
				Предупреждение("Ключ защиты не обнаружен!");
				Если Параметры <> Неопределено И ТипЗнч(Параметры) = Тип("Структура") Тогда
					Параметры.Вставить("Отказ", Истина);
				КонецЕсли;
				ЗавершитьРаботуСистемы(); // если использование типовой части конфигурации без отраслевой не предусмотрено
			КонецЕсли;
		Иначе
			Предупреждение("Ключ защиты не обнаружен!");
			Если Параметры <> Неопределено И ТипЗнч(Параметры) = Тип("Структура") Тогда
				Параметры.Вставить("Отказ", Истина);
			КонецЕсли;
			ЗавершитьРаботуСистемы(); // если использование типовой части конфигурации без отраслевой не предусмотрено
		КонецЕсли;
	Иначе
		ВерсияБиблиотекЗащиты = общ_ПроцедурыМеханизмаЗащиты.ВерсияБиблиотекЗащиты();
		Если ВерсияБиблиотекЗащиты <> "Не определена" Тогда 
			Если общ_ОбщегоНазначения.ВерсияБиблиотекЗащиты() <> ВерсияБиблиотекЗащиты Тогда
				Предупреждение("Версия библиотек защиты (" + ВерсияБиблиотекЗащиты + ") не соответствует версии, " 
				+ "требуемой для работы приложения (" + общ_ОбщегоНазначения.ВерсияБиблиотекЗащиты() + ")!", 120,
				"Система лицензирования и защиты конфигурации");
			КонецЕсли;
		КонецЕсли;
		Если фин_ОбщегоНазначенияСервер.ПравоРедактированияСведенийОЛицензииНаПоддержку() И общ_ЗащитаКлиентСервер.СостояниеПоддержки() <> "EPaidSupportIsActive" Тогда
			ОткрытьФорму("Обработка.общ_СведенияОЛицензииНаПоддержку.Форма");				
		КонецЕсли;
	КонецЕсли;
	мПроверитьПодключениеОбработчикаОжидания();
КонецПроцедуры

//Получение версии библиотек защиты
//
Функция ВерсияБиблиотекЗащиты() Экспорт
	Возврат "2.7.20.1";	
КонецФункции
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБНОВЛЕНИЯ ИБ 

//Обработка результата редактирования пути СЛК
//
Процедура ОбработкаРезультатаРедактированияПутиСЛК(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия<>Истина Тогда
		ПоказатьПредупреждение(,"Ключ защиты не обнаружен!");
		ЗавершитьРаботуСистемы();
	КонецЕсли;
КонецПроцедуры