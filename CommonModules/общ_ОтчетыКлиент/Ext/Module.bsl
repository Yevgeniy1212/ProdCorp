
//Группировка перед началом добавления завершение
//
Процедура ГруппировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры, ТабЧастьГруппировка = "ГруппировкиОтчета") Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		НоваяСтрока = Форма[ТабЧастьГруппировка].Добавить();
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Поле           = РезультатЗакрытия.Поле;
		НоваяСтрока.Представление  = РезультатЗакрытия.Заголовок;
		НоваяСтрока.ТипГруппировки = ПредопределенноеЗначение("Перечисление.общ_ТипДетализацииСтандартныхОтчетов.Элементы");
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			фин_УправлениеОтчетамиКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура ГруппировкаПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа, ТабЧастьГруппировка = "Группировка") Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Группировка");
	ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля(ТабЧастьГруппировка));
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения(ТабЧастьГруппировка + "ПередНачаломДобавленияЗавершение", Форма, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.общ_ФормаВыбораДоступногоПоля", ПараметрыФормы, Форма, Истина, , , ОповещениеОЗакрытии);
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ГруппировкаПередНачаломИзменения(Форма, Элемент, Отказ, ТабЧастьГруппировка = "Группировка") Экспорт
	
	Если Элемент.ТекущийЭлемент = Форма.Элементы[ТабЧастьГруппировка + "Представление"] Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"          , "Группировка");
		ПараметрыФормы.Вставить("ИсключенныеПоля", Форма.ПолучитьЗапрещенныеПоля(ТабЧастьГруппировка));
		ПараметрыФормы.Вставить("ТекущаяСтрока"  , Элемент.ТекущиеДанные.Поле);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
			
		ОповещениеОЗакрытии = Новый ОписаниеОповещения(ТабЧастьГруппировка + "ПередНачаломИзмененияЗавершение", Форма, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.общ_ФормаВыбораДоступногоПоля", ПараметрыФормы, Форма, Истина, , , ОповещениеОЗакрытии);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ГруппировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		НоваяСтрока = Элемент.ТекущиеДанные;
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Поле          = РезультатЗакрытия.Поле;
		НоваяСтрока.Представление = РезультатЗакрытия.Заголовок;
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			фин_УправлениеОтчетамиКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредставлениеСпискаОрганизацийНачалоВыбора(Форма, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт

	СтандартнаяОбработка = Ложь;
	
	РежимРаботы = "ПодборВОтчет";
	
	Если ДополнительныеПараметры.Свойство("СписокСтруктурныхЕдиниц")
		И ТипЗнч(ДополнительныеПараметры.СписокСтруктурныхЕдиниц) = Тип("СписокЗначений") Тогда
		СписокСтруктурныхЕдиниц = ДополнительныеПараметры.СписокСтруктурныхЕдиниц;
	Иначе
		СписокСтруктурныхЕдиниц = Новый СписокЗначений;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("СписокПодразделений")
		И ТипЗнч(ДополнительныеПараметры.СписокПодразделений) = Тип("СписокЗначений") Тогда
		СписокПодразделений = ДополнительныеПараметры.СписокПодразделений;
	Иначе
		СписокПодразделений = Новый СписокЗначений;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("СписокВладельцевГоловныхПодразделений")
		И ТипЗнч(ДополнительныеПараметры.СписокВладельцевГоловныхПодразделений) = Тип("СписокЗначений") Тогда
		СписокВладельцевГоловныхПодразделений = ДополнительныеПараметры.СписокВладельцевГоловныхПодразделений;
	Иначе
		СписокВладельцевГоловныхПодразделений = Новый СписокЗначений;
	КонецЕсли;
	
	ВыборСтруктурныхПодразделений = ДополнительныеПараметры.Свойство("ВыборСтруктурныхПодразделений")
	                                И ТипЗнч(ДополнительныеПараметры.ВыборСтруктурныхПодразделений) = Тип("Булево")
	                                И ДополнительныеПараметры.ВыборСтруктурныхПодразделений;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораСтруктурногоПодразделения", Форма, Новый Структура);
	ОткрытьФорму("ОбщаяФорма.фин_ФормаВыбораСтруктурногоПодразделения",
				 Новый Структура("Организация, СтруктурноеПодразделение, ДоступноИзменениеОрганизации, РежимРаботы, СписокСтруктурныхЕдиниц,
				                 |СписокПодразделений, СписокВладельцевГоловныхПодразделений, ВыборСтруктурныхПодразделений",
								 ,, Истина, РежимРаботы, СписокСтруктурныхЕдиниц, СписокПодразделений, СписокВладельцевГоловныхПодразделений, ВыборСтруктурныхПодразделений),
	             Форма, Истина,,, ОписаниеОповещения);

КонецПроцедуры

Процедура ПередЗакрытием(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Структура отчета задается динамически, поэтому в сохранении Варианта нет необходимости
	Форма.ВариантМодифицирован = Ложь;
	
КонецПроцедуры

Процедура ПриОткрытии(Форма, Отказ) Экспорт
	
	// Установка модифицированности пользовательских настроек 
	// для их автоматического сохранения при закрытии формы
	Если Форма.Отчет.Свойство("РежимРасшифровки") Тогда
		Форма.ПользовательскиеНастройкиМодифицированы = Не Форма.Отчет.РежимРасшифровки;
	Иначе
		Форма.ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
КонецПроцедуры


Процедура ДобавитьПоляРесурсовВЗапрещенныеПоля(Форма, СписокПолей) Экспорт
	
	Попытка
		НаборПоказателей = Форма.НаборПоказателей;
	Исключение
		НаборПоказателей = Неопределено;
	КонецПопытки;
	
	Если НаборПоказателей = Неопределено Тогда
		Для Каждого ДоступноеПоле Из Форма.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы Цикл
			Если ДоступноеПоле.Ресурс Тогда
				СписокПолей.Добавить(Строка(ДоступноеПоле.Поле));
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ИмяПоказателя Из Форма.НаборПоказателей Цикл
			Если Форма.Отчет["Показатель" + ИмяПоказателя] Тогда 
				ВидОстатка = "";
				Если Форма.Отчет.Свойство("РазвернутоеСальдо") Тогда
					Если ТипЗнч(Форма.Отчет.РазвернутоеСальдо) = Тип("Булево") Тогда
						Если Форма.Отчет.РазвернутоеСальдо Тогда
							ВидОстатка = "";
						Иначе
							ВидОстатка = "Развернутый";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатка + "ОстатокДт");
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатка + "ОстатокКт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "Конечный" + ВидОстатка + "ОстатокДт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "Конечный" + ВидОстатка + "ОстатокКт");
			Иначе
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокДт");
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокКт");
				СписокПолей.Добавить("ОборотыЗаПериод." + ИмяПоказателя + "ОборотДт");
				СписокПолей.Добавить("ОборотыЗаПериод." + ИмяПоказателя + "ОборотКт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокДт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстатокКт");
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйРазвернутыйОстатокДт");
				СписокПолей.Добавить("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйРазвернутыйОстатокКт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйРазвернутыйОстатокДт");
				СписокПолей.Добавить("СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйРазвернутыйОстатокКт");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
		
КонецПроцедуры


Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере) Экспорт
	
	Если НеобходимоОбновитьСумму(Результат, КэшВыделеннойОбласти) Тогда
		ПолеСумма = 0;
		КоличествоВыделенныхОбластей = КэшВыделеннойОбласти.Количество();
		Если КоличествоВыделенныхОбластей = 0      // Ничего не выделено
			ИЛИ КэшВыделеннойОбласти.Свойство("T") // Выделен весь табличный документ (Ctrl+A)
			Тогда
			КэшВыделеннойОбласти.Вставить("Сумма", 0);
		ИначеЕсли КоличествоВыделенныхОбластей = 1 Тогда
			// Если выделено небольшое количество ячейек, то получим сумму на клиенте
			Для каждого КлючИЗначение Из КэшВыделеннойОбласти Цикл
				СтруктураАдресВыделеннойОбласти = КлючИЗначение.Значение;
			КонецЦикла;
			
			РазмерОбластиПоВертикали   = СтруктураАдресВыделеннойОбласти.Низ   - СтруктураАдресВыделеннойОбласти.Верх;
			РазмерОбластиПоГоризонтали = СтруктураАдресВыделеннойОбласти.Право - СтруктураАдресВыделеннойОбласти.Лево;
			
			// В некоторых отчетах показатели (да и аналитика на котрую может встать пользователь
			// выводятся в "объединенных" ячейках - не желательно в этом случае делать сервереный вызов. 
			// Выделенная область из 10 ячеек закрывает все такие случае и скорее всего всегда будет доступна на клиенте.
			// Максимум, может быть сделан один неявный серверный вызов
			ВычислитьНаКлиенте = (РазмерОбластиПоВертикали + РазмерОбластиПоГоризонтали) < 12;
			Если ВычислитьНаКлиенте Тогда
				СуммаВЯчейках = 0;
				Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
					Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
						Попытка
							Ячейка = Результат.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
							Если Ячейка.Видимость = Истина Тогда
								Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
									СуммаВЯчейках = СуммаВЯчейках + Ячейка.Значение;
								ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
									ЧислоВЯчейке  = Вычислить("Число(СтрЗаменить(Ячейка.Текст, Символ(32), Символ(0)))");
									СуммаВЯчейках = СуммаВЯчейках + ЧислоВЯчейке;
								КонецЕсли;
							КонецЕсли;
						Исключение
						КонецПопытки;
					КонецЦикла;
				КонецЦикла;
				
				ПолеСумма = СуммаВЯчейках;
				КэшВыделеннойОбласти.Вставить("Сумма", ПолеСумма);
			Иначе
				// Если ячеек много, то лучше вычислим сумму ячеек на сервере за один вызов,
				// т.к. неявных серверных вызовов может быть гораздо больше
				НеобходимоВычислятьНаСервере = Истина;
			КонецЕсли;
		Иначе
			// Вычислим сумму ячеек на сервере
			НеобходимоВычислятьНаСервере = Истина;
		КонецЕсли;
	Иначе	
		ПолеСумма = КэшВыделеннойОбласти.Сумма;
	КонецЕсли;
	
КонецПроцедуры

Функция НеобходимоОбновитьСумму(Результат, КэшВыделеннойОбласти)
	Перем СтруктураАдресВыделеннойОбласти;
	
	ВыделенныеОбласти    = Результат.ВыделенныеОбласти;
	КоличествоВыделенных = ВыделенныеОбласти.Количество();
	
	Если КоличествоВыделенных = 0 Тогда
		КэшВыделеннойОбласти = Новый Структура();
		Возврат Истина;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Ложь;
	Если ТипЗнч(КэшВыделеннойОбласти) <> Тип("Структура") Тогда
		КэшВыделеннойОбласти = Новый Структура();
		ВозвращаемоеЗначение = Истина;
	ИначеЕсли ВыделенныеОбласти.Количество() <> КэшВыделеннойОбласти.Количество() Тогда
		КэшВыделеннойОбласти = Новый Структура();
		ВозвращаемоеЗначение = Истина;
	Иначе
		Для ИндексОбласти = 0 По КоличествоВыделенных - 1 Цикл
			ВыделеннаяОбласть = ВыделенныеОбласти[ИндексОбласти];
			ИмяОбласти = СтрЗаменить(ВыделеннаяОбласть.Имя, ":", "_");
			КэшВыделеннойОбласти.Свойство(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			
			// не нашли нужную область в кэше, поэтому переинициализируем кэш
			Если ТипЗнч(СтруктураАдресВыделеннойОбласти) <> Тип("Структура") Тогда
				КэшВыделеннойОбласти = Новый Структура();
				ВозвращаемоеЗначение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для ИндексОбласти = 0 По КоличествоВыделенных - 1 Цикл
		ВыделеннаяОбласть = ВыделенныеОбласти[ИндексОбласти];
		ИмяОбласти = СтрЗаменить(ВыделеннаяОбласть.Имя, ":", "_");
		
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			СтруктураАдресВыделеннойОбласти = Новый Структура("Верх, Низ, Лево, Право", 0, 0, 0, 0);
			КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			ВозвращаемоеЗначение = Истина;
			Продолжить;
		КонецЕсли;
		
		КэшВыделеннойОбласти.Свойство(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
		Если ТипЗнч(СтруктураАдресВыделеннойОбласти) <> Тип("Структура") Тогда
			СтруктураАдресВыделеннойОбласти = Новый Структура("Верх, Низ, Лево, Право", 0, 0, 0, 0);
			КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		
		Если СтруктураАдресВыделеннойОбласти.Верх <> ВыделеннаяОбласть.Верх
			ИЛИ СтруктураАдресВыделеннойОбласти.Низ <> ВыделеннаяОбласть.Низ
			ИЛИ СтруктураАдресВыделеннойОбласти.Лево <> ВыделеннаяОбласть.Лево
			ИЛИ СтруктураАдресВыделеннойОбласти.Право <> ВыделеннаяОбласть.Право Тогда
				СтруктураАдресВыделеннойОбласти = Новый Структура("Верх, Низ, Лево, Право",
					ВыделеннаяОбласть.Верх, ВыделеннаяОбласть.Низ, ВыделеннаяОбласть.Лево, ВыделеннаяОбласть.Право);
				КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
				ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции


Процедура ПослеВыбораСтруктурногоПодразделения(Форма, РезультатВыбора) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		Отчет = Форма.Отчет;	
		
		Форма.СписокСтруктурныхЕдиниц = РезультатВыбора.СписокСтруктурныхЕдиниц;
		Отчет.ПредставлениеСпискаОрганизаций = общ_ОтчетыВызовСервера.ВыгрузитьСписокВСтроку(Форма.СписокСтруктурныхЕдиниц);
		ОрганизацияПриИзменении(Форма, Отчет.ПредставлениеСпискаОрганизаций);
		
		Если Отчет.Свойство("ПредставлениеСпискаПодразделений") Тогда
			Форма.СписокПодразделений = РезультатВыбора.СписокПодразделений;
			Форма.СписокВладельцевГоловныхПодразделений = РезультатВыбора.СписокВладельцевГоловныхПодразделений;
			
			Отчет.ПредставлениеСпискаПодразделений = общ_ОтчетыВызовСервера.ВыгрузитьСписокВСтроку(Форма.СписокПодразделений);
			ПодразделениеПриИзменении(Форма, Отчет.ПредставлениеСпискаПодразделений);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ПодразделениеПриИзменении(Форма, Элемент) Экспорт
	
	КомпоновщикНастроек = Форма.Отчет.КомпоновщикНастроек;
	
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда
				
				КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Форма, Элемент) Экспорт 
	
	Организации = Форма.СписокСтруктурныхЕдиниц;
	
	КомпоновщикНастроек = Форма.Отчет.КомпоновщикНастроек;
	
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
				
				КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);			
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Процедура ОтборыПриИзменении(Форма, Элемент, ЕстьРеквизитПодразделение = Истина) Экспорт
	
	Отчет = Форма.Отчет;
	
	ТекущийОтбор = Элемент.ТекущиеДанные;
	
	Если ТекущийОтбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущийОтбор.Использование Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийОтбор.ЛевоеЗначение <> Неопределено Тогда
		Если ТекущийОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
			Если Отчет.Свойство("Организация") Тогда
				ТекущийОтбор.ПравоеЗначение = Отчет.Организация;
			ИначеЕсли Отчет.Свойство("ПредставлениеСпискаОрганизаций") И ЗначениеЗаполнено(Форма.СписокСтруктурныхЕдиниц) Тогда
				Форма.СписокСтруктурныхЕдиниц.Очистить();
				Отчет.ПредставлениеСпискаОрганизаций = "";
				Если Отчет.Свойство("ПредставлениеСпискаПодразделений")  Тогда
					Форма.СписокПодразделений.Очистить();
					Форма.СписокВладельцевГоловныхПодразделений.Очистить();
					Отчет.ПредставлениеСпискаПодразделений = "";
				КонецЕсли;
			ИначеЕсли Отчет.Свойство("ПредставлениеСпискаСтруктурныхЕдиниц") И ЗначениеЗаполнено(Форма.СписокСтруктурныхЕдиниц) Тогда
				Форма.СписокСтруктурныхЕдиниц.Очистить();
				Отчет.ПредставлениеСпискаСтруктурныхЕдиниц = "";
			КонецЕсли;
		ИначеЕсли ТекущийОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда 
			Если Отчет.Свойство("Подразделение") Тогда
				ТекущийОтбор.ПравоеЗначение = Отчет.Подразделение;
			ИначеЕсли Отчет.Свойство("ПредставлениеСпискаПодразделений")  Тогда
				Форма.СписокПодразделений.Очистить();
				Форма.СписокВладельцевГоловныхПодразделений.Очистить();
				Отчет.ПредставлениеСпискаПодразделений = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОтборыПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Отбор");
	ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Отбор"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
		
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОтборыПередНачаломДобавленияЗавершение", Форма, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.общ_ФормаВыбораДоступногоПоля", ПараметрыФормы, Форма, Истина, , , ОповещениеОЗакрытии);
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ОтборыПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		
		Если Элемент.ТекущаяСтрока = Неопределено Тогда
			ТекущаяСтрока = Неопределено;
		Иначе
			ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		КонецЕсли;

		Если ТипЗнч(ТекущаяСтрока) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЭлементОтбора = ТекущаяСтрока.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(ТекущаяСтрока) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ТекущаяСтрока.Родитель <> Неопределено Тогда
				ЭлементОтбора = ТекущаяСтрока.Родитель.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Иначе
				ЭлементОтбора = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			КонецЕсли;
		Иначе
			ЭлементОтбора = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
			Если Форма.Отчет.Свойство("Организация") Тогда
				ЭлементОтбора.ПравоеЗначение = Форма.Отчет.Организация;
			ИначеЕсли Форма.Отчет.Свойство("ПредставлениеСпискаОрганизаций") И ЗначениеЗаполнено(Форма.СписокСтруктурныхЕдиниц) Тогда
				Форма.СписокСтруктурныхЕдиниц.Очистить();
				Форма.Отчет.ПредставлениеСпискаОрганизаций = "";
				Если Форма.Отчет.Свойство("ПредставлениеСпискаПодразделений")  Тогда
					Форма.СписокПодразделений.Очистить();
					Форма.СписокВладельцевГоловныхПодразделений.Очистить();
					Форма.Отчет.ПредставлениеСпискаПодразделений = "";
				КонецЕсли;
			ИначеЕсли Форма.Отчет.Свойство("ПредставлениеСпискаСтруктурныхЕдиниц") И ЗначениеЗаполнено(Форма.СписокСтруктурныхЕдиниц) Тогда
				Форма.СписокСтруктурныхЕдиниц.Очистить();
				Форма.Отчет.ПредставлениеСпискаСтруктурныхЕдиниц = "";
			КонецЕсли;
		ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда 
			Если Форма.Отчет.Свойство("Подразделение") Тогда
				ЭлементОтбора.ПравоеЗначение = Форма.Отчет.Подразделение;
			ИначеЕсли Форма.Отчет.Свойство("ПредставлениеСпискаПодразделений")  Тогда
				Форма.СписокПодразделений.Очистить();
				Форма.СписокВладельцевГоловныхПодразделений.Очистить();
				Форма.Отчет.ПредставлениеСпискаПодразделений = "";
			КонецЕсли;
		КонецЕсли;
		ЭлементОтбора.ВидСравнения = ПараметрыВыбранногоПоля.ВидСравнения;
		
		Элемент.ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьИдентификаторПоОбъекту(ЭлементОтбора);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборыПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Если (Найти(Элемент.ТекущийЭлемент.Имя, "ОтборыЛевоеЗначение") > 0 И ТипЗнч(Элемент.ТекущиеДанные.ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных")) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"                , "Отбор");
		ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Отбор"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"        , Элемент.ТекущиеДанные.ЛевоеЗначение);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОтборыПередНачаломИзмененияЗавершение", Форма, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.общ_ФормаВыбораДоступногоПоля", ПараметрыФормы, Форма, Истина, , , ОповещениеОЗакрытии);
			
		Отказ = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОтборыПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		
		ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		
		Если Найти(Элемент.ТекущийЭлемент.Имя, "ОтборыЛевоеЗначение") > 0 Тогда
			
			ТекущаяСтрока.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
			
			Если ТекущаяСтрока.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
				Если Форма.Отчет.Свойство("ПредставлениеСпискаОрганизаций") И ЗначениеЗаполнено(Форма.СписокСтруктурныхЕдиниц) Тогда
					Форма.СписокСтруктурныхЕдиниц.Очистить();
					Форма.Отчет.ПредставлениеСпискаОрганизаций = "";
					Если Форма.Отчет.Свойство("ПредставлениеСпискаПодразделений")  Тогда
						Форма.СписокПодразделений.Очистить();
						Форма.СписокВладельцевГоловныхПодразделений.Очистить();
						Форма.Отчет.ПредставлениеСпискаПодразделений = "";
					КонецЕсли;
				ИначеЕсли Форма.Отчет.Свойство("ПредставлениеСпискаСтруктурныхЕдиниц") И ЗначениеЗаполнено(Форма.СписокСтруктурныхЕдиниц) Тогда
					Форма.СписокСтруктурныхЕдиниц.Очистить();
					Форма.Отчет.ПредставлениеСпискаСтруктурныхЕдиниц = "";
				КонецЕсли;
			ИначеЕсли ТекущаяСтрока.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда 
				Если Форма.Отчет.Свойство("ПредставлениеСпискаПодразделений")  Тогда
					Форма.СписокПодразделений.Очистить();
					Форма.СписокВладельцевГоловныхПодразделений.Очистить();
					Форма.Отчет.ПредставлениеСпискаПодразделений = "";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
