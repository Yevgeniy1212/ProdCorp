//устанавливает для документа маршрут утверждения и возвращает присвоенный маршрут
//
Функция НазначитьМаршрут(ДокументОбъект=Неопределено,ДокументСсылка=Неопределено) Экспорт
	ВидДокументов = Неопределено;
	Если ДокументСсылка = Неопределено Тогда
		ДокументСсылка = ДокументОбъект.Ссылка;
		ДокументОбъект.ДополнительныеСвойства.Свойство("ВидДокументов",ВидДокументов);
	КонецЕсли;
	Если ДокументОбъект = Неопределено Тогда
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	КонецЕсли;
	Если ВидДокументов = Неопределено Тогда
		Если ДокументСсылка.Метаданные().Имя = "усд_ВходящийДокумент" Тогда
			ВидДокументов = ДокументСсылка.ПозицияКлассификатора;
		Иначе
			ВидДокументов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ВидДокументовПоИмениМетаданных(ДокументОбъект.Метаданные().Имя);
			Если НЕ ЗначениеЗаполнено(ВидДокументов) Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	Дата = ДокументСсылка.Дата;
	Если Дата = '00010101' Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидДокументов",		ВидДокументов);
	Запрос.УстановитьПараметр("Дата",				Дата);
	Запрос.Текст="ВЫБРАТЬ
	             |	АктуальныеМаршруты.Маршрут КАК Маршрут,
	             |	АктуальныеМаршруты.Маршрут.УсловиеПопаданияНаМаршрут КАК УсловиеИспользования,
	             |	АктуальныеМаршруты.Маршрут.ИспользоватьПоУмолчанию КАК ИспользоватьПоУмолчанию
	             |ИЗ
	             |	РегистрСведений.усд_АктуальныеМаршрутыСогласованияДокументов КАК АктуальныеМаршруты
	             |ГДЕ
	             |	АктуальныеМаршруты.ВидДокументов = &ВидДокументов
	             |	И АктуальныеМаршруты.Маршрут.Владелец = &ВидДокументов";
	ТаблицаМаршрутовИУсловий = Запрос.Выполнить().Выгрузить();
	Если ТаблицаМаршрутовИУсловий.Количество()=0 Тогда
		Возврат Неопределено;
	Иначе
		Фильтр = Новый Структура("ИспользоватьПоУмолчанию");
		Фильтр.ИспользоватьПоУмолчанию = Истина;
		МаршрутПоУмолчанию = Неопределено;
		СтрокиПоУмолчанию = ТаблицаМаршрутовИУсловий.НайтиСтроки(Фильтр);
		Если СтрокиПоУмолчанию.Количество()>0 Тогда
			 МаршрутПоУмолчанию = СтрокиПоУмолчанию[0].Маршрут;
			 Если ТаблицаМаршрутовИУсловий.Количество()=1 Тогда
				 Возврат МаршрутПоУмолчанию;
			 КонецЕсли;
		КонецЕсли;
		Фильтр.ИспользоватьПоУмолчанию = Ложь;
		СтрокиСУсловиями = ТаблицаМаршрутовИУсловий.НайтиСтроки(Фильтр);
		Если СтрокиСУсловиями.Количество()>0 Тогда
			Для Каждого СтрокаСУсловием Из СтрокиСУсловиями Цикл
				СтруктураДанныхДокумента = СоздатьСтруктуруПоДаннымДокумента(ДокументОбъект);
				Если усд_ПроцедурыСогласованияДокументов.УсловиеВыполняется(СтрокаСУсловием.УсловиеИспользования,ДокументСсылка,,СтруктураДанныхДокумента) Тогда
					Возврат СтрокаСУсловием.Маршрут;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат МаршрутПоУмолчанию;
КонецФункции //НазначитьМаршрут

Функция СоздатьСтруктуруПоДаннымДокумента(Документ,ВключаяТабличныеЧасти=Ложь) Экспорт
	 СтруктураДанных = Новый Структура;
	 МетаданныеДокумента = Документ.Метаданные();
	 Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		 СтруктураДанных.Вставить(Реквизит.Имя,Документ[Реквизит.Имя]);
	 КонецЦикла;
	 СвойстваДокумента = Новый Массив;
	 СвойстваДокумента.Добавить("Ссылка");
	 Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Документ.Ссылка)) Тогда
		 СвойстваДокумента.Добавить("Номер");
		 СвойстваДокумента.Добавить("Дата");
		 Если Строка(МетаданныеДокумента.Проведение)="Разрешить" Тогда
			 СвойстваДокумента.Добавить("Проведен");
		 КонецЕсли;
	 КонецЕсли;
	 Для Каждого Свойство Из СвойстваДокумента Цикл
		 СтруктураДанных.Вставить(Свойство,Документ[Свойство]);
	 КонецЦикла;
	 Если ВключаяТабличныеЧасти=Истина Тогда
		 Для Каждого Реквизит Из МетаданныеДокумента.ТабличныеЧасти Цикл
			 СтруктураДанных.Вставить(Реквизит.Имя,Документ[Реквизит.Имя].Выгрузить());
		 КонецЦикла;
	 КонецЕсли;
	 Возврат СтруктураДанных;
КонецФункции //СоздатьСтруктуруПоДаннымДокумента

// процедура, обеспечивающая контрольную точку входа в механизм маршрутизации
//
Процедура ПередЗаписьюДокументаРегистрацияВДокументооборотеПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИспользоватьПодсистемуЭлектронногоДокументооборота") Тогда
		Возврат;
	КонецЕсли;
	Если усд_ПроцедурыСогласованияВызовСервераПовтИсп.ИспользуетсяСогласованиеДокумента(Метаданные.НайтиПоТипу(ТипЗнч(Источник)).Имя)=Ложь Тогда
		Возврат;
	КонецЕсли;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("НеИспользоватьКонтрольМаршрутизацииДляНеУчаствующихВПодсистеме") И НЕ (РольДоступна("усд_УчастникПроцессаСогласованияИУтвержденияДокументов") ИЛИ РольДоступна("усд_УправлениеСогласованиемИУтверждениемДокументов")) Тогда
		Возврат;
	КонецЕсли;
	СтруктураДанныхДокумента = СоздатьСтруктуруПоДаннымДокумента(Источник);
	Если Строка(Источник.Метаданные().Проведение)="Разрешить" И Источник.ЭтоНовый() И РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат;
	КонецЕсли;
	ТекущийМаршрут = НаМаршруте(Источник.Ссылка,Источник);
	Если ТекущийМаршрут = Неопределено И Строка(Источник.Метаданные().Проведение)="Разрешить" И (НЕ Источник.ЭтоНовый()) И Источник.Проведен Тогда
		Возврат;
	КонецЕсли;
	Если Строка(Источник.Метаданные().Проведение)="Разрешить" И ТекущийМаршрут=Неопределено И РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат;
	КонецЕсли;
	ВидДокументов = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ВидДокументов",ВидДокументов);
	Если ВидДокументов = Неопределено Тогда
		Если Источник.Метаданные().Имя = "усд_ВходящийДокумент" Тогда
			ВидДокументов = Источник.ПозицияКлассификатора;
			Источник.ДополнительныеСвойства.Вставить("ВидДокументов",ВидДокументов);
		Иначе
			ВидДокументов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ВидДокументовПоИмениМетаданных(Источник.Метаданные().Имя);
			Если ЗначениеЗаполнено(ВидДокументов) Тогда
				Источник.ДополнительныеСвойства.Вставить("ВидДокументов",ВидДокументов);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ТекущийМаршрут<>Неопределено И (НЕ РольДоступна("усд_УправлениеСогласованиемИУтверждениемДокументов") И Не РольДоступна("усд_УчастникПроцессаСогласованияИУтвержденияДокументов") И Не РольДоступна("ПолныеПрава")) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Запись документа "+Источник.Ссылка+" невозможна: Пользователь не имеет доступа к системе согласования документов!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если ТекущийМаршрут = Неопределено Тогда
		// устанавливаем маршрут
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_РежимПостановкиДокументовНаМаршрут") = Перечисления.усд_РежимыПостановкиДокументовНаМаршрут.ВРучную Тогда
			Возврат;
		КонецЕсли;
		Если Не Источник.ПометкаУдаления Тогда
			ТекущийМаршрут = НазначитьМаршрут(Источник);
			Если ТекущийМаршрут <> Неопределено Тогда
				Если НЕ РольДоступна("усд_УправлениеСогласованиемИУтверждениемДокументов") И Не РольДоступна("усд_УчастникПроцессаСогласованияИУтвержденияДокументов") И Не РольДоступна("ПолныеПрава") Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Запись документа "+Источник.Ссылка+" невозможна: Пользователь не имеет доступа к системе согласования документов!");
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				Источник.ДополнительныеСвойства.Вставить("НазначитьМаршрут",Новый Структура("Маршрут,ВидДокументов",ТекущийМаршрут,ВидДокументов));
				ТекущийЭтап = усд_ПроцедурыСогласованияДокументов.ПолучитьПервыйЭтап(ТекущийМаршрут,,СтруктураДанныхДокумента);
				Если ТекущийЭтап = Неопределено Тогда
					Возврат;
				Иначе
					Источник.ДополнительныеСвойства.Вставить("НазначитьЭтап",Новый Структура("Этап,Состояние,Завершен,Маршрут,ВидДокументов",ТекущийЭтап.Этап,ТекущийЭтап.СостояниеДокумента,ЗначениеЗаполнено(ТекущийЭтап.СледующийЭтап),ТекущийМаршрут,ВидДокументов));
					Если ЗначениеЗаполнено(ТекущийЭтап.СледующийЭтап) ИЛИ ((НЕ ЗначениеЗаполнено(ТекущийЭтап.СледующийЭтап)) И НЕ усд_ПроцедурыСогласованияДокументов.ПользовательВходитВГруппуОтветственности(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"),ТекущийЭтап.Этап,ТекущийМаршрут,ВидДокументов,Источник.Ссылка)) Тогда
						Если ТекущийЭтап.ЗапретитьПроведениеДокументаНаДанномЭтапе И (РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ (Строка(Источник.Метаданные().Проведение="Разрешить") И Источник.Проведен)) Тогда
							 Источник.Проведен = Ложь;
							 РежимЗаписи = РежимЗаписиДокумента.Запись;
							 ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документу """+?(Источник.Ссылка.Пустая(),ВидДокументов.Наименование+" №"+Источник.Номер+" от "+Источник.Дата,Источник.Ссылка)+"""
							 |	назначен маршрут """+ТекущийМаршрут+""" в системе согласования документов.
							 |	Этап: """+ТекущийЭтап.Этап+""": проведение на данном этапе невозможно!");
						Иначе
							 ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документу """+?(Источник.Ссылка.Пустая(),ВидДокументов.Наименование+" №"+Источник.Номер+" от "+Источник.Дата,Источник.Ссылка)+"""
							 |	назначен маршрут """+ТекущийМаршрут+""" в системе согласования документов.
							 |	Этап: """+ТекущийЭтап.Этап+""".");
						КонецЕсли;
					КонецЕсли;
					Если ТекущийЭтап.КорректироватьРеквизитыДокумента И ТекущийМаршрут.ПорядокЗаполненияКонтролируемыхРеквизитов=Перечисления.усд_ПорядкиЗаполненияКонтролируемыхРеквизитов.УстанавливатьЗначенияЭтапаПриПопаданииНаЭтап Тогда
						Попытка
							КорректироватьРеквизитыДокумента(Источник,ТекущийЭтап.Этап,ТекущийМаршрут);
						Исключение
							 ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документу """+Источник.Ссылка+"""
							 |		на маршруте """+ТекущийМаршрут+""" в системе согласования документов
							 |  	на этапе """+ТекущийЭтап.Этап+""": не удалось присвоить значение контролируемого реквизита! "+ОписаниеОшибки());
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// определяем текущий этап
		ТекущийЭтап = ПолучитьПараметрыТекущегоЭтапа(Источник.Ссылка);
		Если ТекущийЭтап = Неопределено Тогда
			//назначаем этап
				ТекущийЭтап = усд_ПроцедурыСогласованияДокументов.ПолучитьПервыйЭтап(ТекущийМаршрут,,СтруктураДанныхДокумента);
				Если ТекущийЭтап = Неопределено Тогда
					Возврат;
				Иначе
					Источник.ДополнительныеСвойства.Вставить("НазначитьЭтап",Новый Структура("Этап,Состояние,Завершен,Маршрут,ВидДокументов,Автопроверка",ТекущийЭтап.Этап,ТекущийЭтап.СостояниеДокумента,ТекущийЭтап.СледующийЭтап.Пустая(),ТекущийМаршрут,ВидДокументов,Истина));
					Если ЗначениеЗаполнено(ТекущийЭтап.СледующийЭтап) ИЛИ ((НЕ ЗначениеЗаполнено(ТекущийЭтап.СледующийЭтап)) И НЕ усд_ПроцедурыСогласованияДокументов.ПользовательВходитВГруппуОтветственности(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"),ТекущийЭтап.Этап,ТекущийМаршрут,ВидДокументов,Источник.Ссылка)) Тогда
						Если (Не (РольДоступна("ПолныеПрава") И НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ПрименятьЗапретРедактированияСогласуемыхДокументовДляПолныхПрав"))) И ТекущийЭтап.ЗапретитьПроведениеДокументаНаДанномЭтапе И (РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ (Строка(Источник.Метаданные().Проведение="Разрешить") И Источник.Проведен)) Тогда
							 Источник.Проведен = Ложь;
							 РежимЗаписи = РежимЗаписиДокумента.Запись;
							 ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документу """+Источник.Ссылка+"""
							 |	назначен маршрут """+ТекущийМаршрут+""" в системе согласования документов.
							 |	Этап: """+ТекущийЭтап.Этап+""": проведение на данном этапе невозможно!");
						 КонецЕсли;
					КонецЕсли;
					Если ТекущийЭтап.КорректироватьРеквизитыДокумента И ТекущийМаршрут.ПорядокЗаполненияКонтролируемыхРеквизитов=Перечисления.усд_ПорядкиЗаполненияКонтролируемыхРеквизитов.УстанавливатьЗначенияЭтапаПриПопаданииНаЭтап Тогда
						Попытка
							КорректироватьРеквизитыДокумента(Источник,ТекущийЭтап.Этап,ТекущийЭтап.Маршрут);
						Исключение
							 ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документу """+Источник.Ссылка+"""
							 |	на маршруте """+ТекущийМаршрут+""" в системе согласования документов
							 |	на этапе """+ТекущийЭтап.Этап+""": не удалось присвоить значение контролируемого реквизита!");
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			ТекущийЭтап = ПолучитьПараметрыТекущегоЭтапа(Источник.Ссылка);
		КонецЕсли;
		Если ТекущийЭтап = Неопределено Тогда
			Возврат
		Иначе
			// проверяем права редактирования
			Если ПользователиКлиентСервер.АвторизованныйПользователь() = ТекущийЭтап.ОтветственноеЛицо
				ИЛИ усд_ПроцедурыСогласованияДокументов.ПользовательВходитВГруппуОтветственности(ПользователиКлиентСервер.АвторизованныйПользователь(),ТекущийЭтап.Этап,ТекущийМаршрут,ВидДокументов,Источник.Ссылка) Тогда
				// запрет проведения и установка контрольных реквизитов
					Если ТекущийЭтап.Этап=Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута ИЛИ ((Не (РольДоступна("ПолныеПрава") И НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ПрименятьЗапретРедактированияСогласуемыхДокументовДляПолныхПрав"))) И ТекущийЭтап.ЗапретитьПроведениеДокументаНаДанномЭтапе И (РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ (Строка(Источник.Метаданные().Проведение="Разрешить") И Источник.Проведен))) Тогда
							 Источник.Проведен = Ложь;
							 РежимЗаписи = РежимЗаписиДокумента.Запись;
							 ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документу """+Источник.Ссылка+"""
							 |	назначен маршрут """+ТекущийМаршрут+""" в системе согласования документов.
							 |	Этап: """+ТекущийЭтап.Этап+""": проведение на данном этапе невозможно!");
					КонецЕсли;
			Иначе
				Если (Не (РольДоступна("ПолныеПрава") И НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ПрименятьЗапретРедактированияСогласуемыхДокументовДляПолныхПрав"))) Тогда
					Если ТекущийЭтап.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Согласованный Тогда
						Если НЕ ТекущийМаршрут.БлокироватьПриЗавершении Тогда
							Возврат;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Возврат;
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ """+Источник.Ссылка+"""
				|	находится на маршруте """+ТекущийМаршрут+""" в системе согласования документов
				|	на этапе """+ТекущийЭтап.Этап+""": недостаточно прав для его корректировки!");
				Источник.ДополнительныеСвойства.Вставить("ОтказДокументооборота");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ПередЗаписьюДокументаРегистрацияВДокументооборотеПередЗаписью

// возвращает маршрут, присвоенный документу
//
Функция НаМаршруте(ДокументСсылка,ДокументОбъект = Неопределено) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Документ",ДокументСсылка);
	Запрос.Текст ="ВЫБРАТЬ
	              |	НазначенияМаршрутов.Маршрут,
	              |	НазначенияМаршрутов.ВидДокументов
	              |ИЗ
	              |	РегистрСведений.усд_НазначенияМаршрутов КАК НазначенияМаршрутов
	              |ГДЕ
	              |	НазначенияМаршрутов.Документ = &Документ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ДокументОбъект <> Неопределено Тогда
			ДокументОбъект.ДополнительныеСвойства.Вставить("ВидДокументов",Выборка.ВидДокументов);
		КонецЕсли;
		Возврат Выборка.Маршрут;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции //НаМаршруте

//возвращает текущий этап документа и дополнительные сведения
//
Функция ПолучитьПараметрыТекущегоЭтапа(ДокументСсылка) Экспорт
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Документ",ДокументСсылка);
	Запрос.УстановитьПараметр("Дата",	?(ДокументСсылка.Дата='00010101',ТекущаяДата(),ДокументСсылка.Дата));
	Запрос.Текст ="ВЫБРАТЬ
	              |	АктивныйЭтап.Период,
	              |	АктивныйЭтап.Этап,
	              |	АктивныйЭтап.ВидДокументов,
	              |	АктивныйЭтап.Маршрут,
	              |	АктивныйЭтап.ОтветственноеЛицо,
	              |	АктивныйЭтап.Статус,
	              |	АктивныйЭтап.Состояние,
	              |	АктивныйЭтап.ЗапретитьПроведениеДокументаНаДанномЭтапе,
	              |	АктивныйЭтап.КорректироватьРеквизитыДокумента,
	              |	АктивныйЭтап.Маршрут.ФинальныйКонтрольРеквизитовДокумента КАК ФинальныйКонтрольРеквизитовДокумента
	              |ИЗ
	              |	РегистрСведений.усд_АктивныеЭтапыРассмотренияДокументов.СрезПоследних(, Документ = &Документ) КАК АктивныйЭтап
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	ДвижениеДокументов.Период,
	              |	ДвижениеДокументов.Этап,
	              |	ДвижениеДокументов.ВидДокументов,
	              |	ДвижениеДокументов.Маршрут,
	              |	ДвижениеДокументов.ОтветственноеЛицо,
	              |	ДвижениеДокументов.Статус,
	              |	NULL,
	              |	ВЫБОР
	              |		КОГДА ДвижениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.усд_СтатусыДокументовНаЭтапах.Согласованный)
	              |			ТОГДА ЛОЖЬ
	              |		ИНАЧЕ ИСТИНА
	              |	КОНЕЦ,
	              |	NULL,
	              |	NULL
	              |ИЗ
	              |	РегистрСведений.усд_ДвижениеДокументовПоМаршрутам.СрезПоследних(, Документ = &Документ) КАК ДвижениеДокументов";
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураПараметров = Новый Структура("Период,Этап,ОтветственноеЛицо,Статус,Состояние,
		|ЗапретитьПроведениеДокументаНаДанномЭтапе,КорректироватьРеквизитыДокумента,ФинальныйКонтрольРеквизитовДокумента");
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметров,Выборка);
		Возврат СтруктураПараметров;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции //ПолучитьПараметрыТекущегоЭтапа

//Функция ПолучитьСписокГруппыОтветственности
//
Функция ПолучитьСписокГруппыОтветственности(Этап,Маршрут,ВидДокументов=Неопределено,ДокументСсылка) Экспорт
	Если ВидДокументов = Неопределено Тогда
		ВидДокументов = Маршрут.Владелец;
	КонецЕсли;
	СписокГруппы = Новый СписокЗначений;
	Если Этап = Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута Тогда
		СписокГруппы.Добавить(ДокументСсылка.Автор);
		Возврат СписокГруппы;
	Иначе
		 Запрос = Новый Запрос;
		 Запрос.УстановитьПараметр("Этап",Этап);
		 Запрос.УстановитьПараметр("Маршрут",Маршрут);
		 Запрос.УстановитьПараметр("ВидДокументов",ВидДокументов);
		 Запрос.Текст="ВЫБРАТЬ
		              |	ЕСТЬNULL(СоставГруппСогласованияДокументов.Пользователь, ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Пользователь) КАК Пользователь
		              |ИЗ
		              |	РегистрСведений.усд_ПраваПодписиНаЭтапахМаршрутов КАК ПраваПодписиНаЭтапахМаршрутовСрезПоследних
		              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.усд_ГруппыСогласованияДокументов КАК ГруппыСогласованияДокументов
		              |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.усд_СоставГруппСогласованияДокументов КАК СоставГруппСогласованияДокументов
		              |			ПО ГруппыСогласованияДокументов.Ссылка = СоставГруппСогласованияДокументов.ГруппаСогласования
		              |		ПО ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Пользователь = ГруппыСогласованияДокументов.Ссылка
		              |ГДЕ
		              |	ПраваПодписиНаЭтапахМаршрутовСрезПоследних.ВидДокументов = &ВидДокументов
		              |	И ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Маршрут = &Маршрут
		              |	И ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Этап = &Этап
		              |	И (НЕ ЕСТЬNULL(СоставГруппСогласованияДокументов.Пользователь, ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Пользователь) ЕСТЬ NULL )
		              |			И (НЕ ЕСТЬNULL(СоставГруппСогласованияДокументов.Пользователь, ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Пользователь) = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		              |			И (НЕ ЕСТЬNULL(СоставГруппСогласованияДокументов.Пользователь, ПраваПодписиНаЭтапахМаршрутовСрезПоследних.Пользователь) = ЗНАЧЕНИЕ(Справочник.усд_ГруппыСогласованияДокументов.ПустаяСсылка))";
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат СписокГруппы;
		Иначе
			СписокГруппы.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Пользователь"));
		КонецЕсли;
		Возврат СписокГруппы;
	КонецЕсли;	
КонецФункции //ПолучитьСписокГруппыОтветственности

//процедура создает записи в регистрах учета маршрутов и этапов
//
Процедура ПриЗаписиДокументаРегистрацияВДокументооборотеПриЗаписи(Источник, Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИспользоватьПодсистемуЭлектронногоДокументооборота") Тогда
		Возврат;
	КонецЕсли;
	Если усд_ПроцедурыСогласованияВызовСервераПовтИсп.ИспользуетсяСогласованиеДокумента(Метаданные.НайтиПоТипу(ТипЗнч(Источник)).Имя)=Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("НеИспользоватьКонтрольМаршрутизацииДляНеУчаствующихВПодсистеме") И НЕ (РольДоступна("усд_УчастникПроцессаСогласованияИУтвержденияДокументов") ИЛИ РольДоступна("усд_УправлениеСогласованиемИУтверждениемДокументов")) Тогда
		Возврат;
	КонецЕсли;
	
	Маршрут 		= Неопределено;
	ВидДокументов	= Неопределено;
	Этап 			= Неопределено;
	Ответственный 	= Неопределено;
	Приоритет 		= Неопределено;
	Состояние 		= Неопределено;
	
	СтруктураОтраженияМаршрута=Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("НазначитьМаршрут",СтруктураОтраженияМаршрута) Тогда
		Маршрут 		= СтруктураОтраженияМаршрута.Маршрут;
		ВидДокументов	= СтруктураОтраженияМаршрута.ВидДокументов;
	КонецЕсли;
	СтруктураОтраженияЭтапа=Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("НазначитьЭтап",СтруктураОтраженияЭтапа) Тогда
		Этап 				= СтруктураОтраженияЭтапа.Этап;
		Если СтруктураОтраженияЭтапа.Свойство("Приоритет") Тогда
			Приоритет 		= СтруктураОтраженияЭтапа.Приоритет;
		КонецЕсли;
		Если СтруктураОтраженияЭтапа.Свойство("Ответственный") Тогда
			Ответственный 	= СтруктураОтраженияЭтапа.Ответственный;
		ИначеЕсли СтруктураОтраженияМаршрута<>Неопределено Тогда
			Если ЗначениеЗаполнено(Этап) И Этап<>Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ИспользоватьДиспетчеризациюЗадач") Тогда
				Ответственный = усд_ПроцедурыСогласованияДокументов.ОпределениеИсполнителяПоСистемеДиспетчеризации(Маршрут,Этап,Источник.Автор,Источник.Ссылка);
			КонецЕсли;
		КонецЕсли;
		Если СтруктураОтраженияЭтапа.Свойство("Состояние") Тогда
			Состояние 		= СтруктураОтраженияЭтапа.Состояние;
		КонецЕсли;
	КонецЕсли;
	Если Маршрут<>Неопределено Тогда
		усд_ПроцедурыСогласованияДокументов.ПоставитьНаМаршрут(Источник.Ссылка,ВидДокументов,Маршрут,Этап,Ответственный,Приоритет,Состояние);
	КонецЕсли;

	Если Источник.ДополнительныеСвойства.Свойство("НазначитьМаршрут") Тогда
		Источник.ДополнительныеСвойства.Удалить("НазначитьМаршрут");
	КонецЕсли;
	Если Источник.ДополнительныеСвойства.Свойство("НазначитьЭтап") Тогда
		Источник.ДополнительныеСвойства.Удалить("НазначитьЭтап");
	КонецЕсли;
	
КонецПроцедуры //ПриЗаписиДокументаРегистрацияВДокументооборотеПриЗаписи

// Функция возвращает интервалы напоминаний и представлениями.
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//  СписокЗначений
//
Функция ПолучитьСписокИнтерваловНапоминания() Экспорт

	СписокИнтервалов = Новый СписокЗначений;
	СписокИнтервалов.Добавить(5*60,"5 мин.");
	СписокИнтервалов.Добавить(10*60,"10 мин.");
	СписокИнтервалов.Добавить(15*60,"15 мин.");
	СписокИнтервалов.Добавить(30*60,"30 мин.");
	СписокИнтервалов.Добавить(1*60*60,"1 час");
	СписокИнтервалов.Добавить(2*60*60,"2 часа");
	СписокИнтервалов.Добавить(4*60*60,"4 часа");
	СписокИнтервалов.Добавить(8*60*60,"8 часов");
	СписокИнтервалов.Добавить(1*24*60*60,"1 день");
	СписокИнтервалов.Добавить(2*24*60*60,"2 дня");
	СписокИнтервалов.Добавить(3*24*60*60,"3 дня");
	СписокИнтервалов.Добавить(4*24*60*60,"4 дня");
	СписокИнтервалов.Добавить(1*7*24*60*60,"1 неделя");
	Возврат СписокИнтервалов;

КонецФункции
  
Функция ПолучитьТаблицуГрафикаРаботПоСогласованию(График,ДатаОтсчета,СпособСортировкиДаты="УБЫВ",ВидСравнения="<",ДатаЗавершения=Неопределено) Экспорт
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ПоддержкаГрафиковРаботыЗУП() Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Графики.ОсновноеЗначение КАК Значение,
		|	Графики.ВидУчетаВремени,
		|	Графики.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК Графики
		|ГДЕ
		|	Графики.ГрафикРаботы = &ГрафикРаботы
		|	И Графики.Дата "+ВидСравнения+"= &Дата"+?(ДатаЗавершения<>Неопределено," И Графики.Дата<=&ДатаЗавершения","")+"
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата "+СпособСортировкиДаты;
		
		Запрос.УстановитьПараметр("ГрафикРаботы", График);
		Запрос.УстановитьПараметр("Дата", ДатаОтсчета);
		Запрос.УстановитьПараметр("ДатаЗавершения", ДатаЗавершения);
		
		ТаблицаГрафика = Запрос.Выполнить().Выгрузить();
	ИначеЕсли фин_ОбщегоНазначенияВызовСервераПовтИсп.РежимИнтеграции()=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.ДатаКалендаря КАК Дата,
		|	&РабочихЧасовВДень КАК Значение,
		|	""ПоЧасам"" КАК ВидУчетаВремени
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ДатаКалендаря "+ВидСравнения+"= &Дата"+?(ДатаЗавершения<>Неопределено," И ДанныеПроизводственногоКалендаря.ДатаКалендаря<=&ДатаЗавершения","")+"
		|	И ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.ДатаКалендаря,
		|	1,
		|	""ПоДням""
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ДатаКалендаря "+ВидСравнения+"= &Дата"+?(ДатаЗавершения<>Неопределено," И ДанныеПроизводственногоКалендаря.ДатаКалендаря<=&ДатаЗавершения","")+"
		|	И ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаКалендаря "+СпособСортировкиДаты;
		Запрос.УстановитьПараметр("ПроизводственныйКалендарь", График);
		Запрос.УстановитьПараметр("Дата", ДатаОтсчета);
		Запрос.УстановитьПараметр("ДатаЗавершения", ДатаЗавершения);
		Запрос.УстановитьПараметр("РабочихЧасовВДень", 8);
		
		ТаблицаГрафика = Запрос.Выполнить().Выгрузить();
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
		|	&РабочихЧасовВДень КАК Значение,
		|	""ПоЧасам"" КАК ВидУчетаВремени
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|	И ДанныеПроизводственногоКалендаря.Дата "+ВидСравнения+"= &Дата"+?(ДатаЗавершения<>Неопределено," И ДанныеПроизводственногоКалендаря.Дата<=&ДатаЗавершения","")+"
		|	И ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.Дата,
		|	1,
		|	""ПоДням""
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|	И ДанныеПроизводственногоКалендаря.Дата "+ВидСравнения+"= &Дата"+?(ДатаЗавершения<>Неопределено," И ДанныеПроизводственногоКалендаря.Дата<=&ДатаЗавершения","")+"
		|	И ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата "+СпособСортировкиДаты;
		Запрос.УстановитьПараметр("ПроизводственныйКалендарь", График);
		Запрос.УстановитьПараметр("Дата", ДатаОтсчета);
		Запрос.УстановитьПараметр("ДатаЗавершения", ДатаЗавершения);
		Запрос.УстановитьПараметр("РабочихЧасовВДень", 8);
		
		ТаблицаГрафика = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	Возврат ТаблицаГрафика;
КонецФункции

#Если Клиент Тогда
     	
// открывает форму состояния документа в системе согласования
//
/////////////////////////////////////////////////////////////////////////
//
// Заменена на общую команду "усд_ПанельСогласованияДокумента"
//
//Процедура ОткрытьПанельСогласованияДокумента(Форма,Объект)  Экспорт
//	Если Объект.ЭтоНовый() ИЛИ Объект.Модифицированность() Тогда
//		Ответ = Вопрос("Для работы с согласованием документ необходимо записать. Записать?", РежимДиалогаВопрос.ДаНет, 60);
//		Если Ответ = КодВозвратаДиалога.Нет Тогда
//			Возврат;
//		КонецЕсли;
//		Попытка
//		    Объект.Записать();
//		Исключение
//			Предупреждение("Не удалось записать документ!");
//			Возврат;
//		КонецПопытки;
//	КонецЕсли;
//	СуществующаяФорма = Неопределено;
//	Если Объект.ДополнительныеСвойства.Свойство("ФормаСогласование",СуществующаяФорма) Тогда
//		Если СуществующаяФорма <> Неопределено И СуществующаяФорма.Открыта() Тогда
//			СуществующаяФорма.Активизировать();
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	ФормаОбработки = ОткрытьФорму("Обработка.усд_РаботаССогласованиемДокумента.Форма",Новый Структура("ЗакрыватьПриЗакрытииВладельца,ДокументОбъект,ТолькоПросмотр",Истина,Объект.Ссылка,Форма.ТолькоПросмотр),Форма,Объект.Ссылка);
//	Объект.ДополнительныеСвойства.Вставить("ФормаСогласование",ФормаОбработки)
//КонецПроцедуры //ОткрытьПанельСогласованияДокумента


//процедура настраивает в форме списка и выбор колонки для вывода информации о согласовании документа
//
Процедура УстановитьКолонкиСогласования(Форма) Экспорт
	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИспользоватьПодсистемуЭлектронногоДокументооборота") Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ЭлементФормы Из Форма.ЭлементыФормы Цикл
		Попытка
			Значение = ЭлементФормы.Значение;
			Если Найти(Строка(Значение),"ДокументСписок.") <>0 Тогда
				Идентификатор = Сред(Строка(Значение),СтрДлина("ДокументСписок.")+1);
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Идентификатор",Идентификатор);
				Запрос.Текст="ВЫБРАТЬ
				             |	МаршрутыДвиженияДокументов.Ссылка
				             |ИЗ
				             |	Справочник.усд_МаршрутыДвиженияДокументов КАК МаршрутыДвиженияДокументов
				             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ВидыДокументов КАК ВидыДокументов
				             |		ПО МаршрутыДвиженияДокументов.Владелец = ВидыДокументов.Ссылка
				             |ГДЕ
				             |	ВидыДокументов.ПрограммныйИдентификатор = &Идентификатор
				             |	И (НЕ МаршрутыДвиженияДокументов.ПометкаУдаления)";
				Если Запрос.Выполнить().Пустой() Тогда
					Возврат;
				КонецЕсли;
				КолонкаАвтор = ЭлементФормы.Колонки.Найти("Автор");
				Если КолонкаАвтор = Неопределено Тогда
					Индекс = ЭлементФормы.Колонки.Количество();
				Иначе
					Индекс = ЭлементФормы.Колонки.Индекс(КолонкаАвтор);
				КонецЕсли;
				КолонкаСостояние= ЭлементФормы.Колонки.Вставить(Индекс,"Ответственный за согласование");
				КолонкаСостояние.Имя 			= "ОтветственныйЭтапа";
				КолонкаСостояние.ТолькоПросмотр = Истина;
				КолонкаСостояние.Ширина 		= 20;
				КолонкаСостояние.ЦветФонаПоля	= Новый Цвет(245,245,220);
				КолонкаСостояние= ЭлементФормы.Колонки.Вставить(Индекс,"Состояние согласования");
				КолонкаСостояние.Имя 			= "Состояние";
				КолонкаСостояние.ТолькоПросмотр = Истина;
				КолонкаСостояние.Ширина 		= 20;
				КолонкаСостояние.ЦветФонаПоля	= Новый Цвет(245,245,220);
				КолонкаСостояние= ЭлементФормы.Колонки.Вставить(Индекс,"Этап согласования");
				КолонкаСостояние.Имя 			= "Этап";
				КолонкаСостояние.ТолькоПросмотр = Истина;
				КолонкаСостояние.Ширина 		= 20;
				КолонкаСостояние.ЦветФонаПоля	= Новый Цвет(245,245,220);
				КолонкаСостояние= ЭлементФормы.Колонки.Вставить(Индекс,"Маршрут согласования");
				КолонкаСостояние.Имя 			= "Маршрут";
				КолонкаСостояние.ТолькоПросмотр = Истина;
				КолонкаСостояние.Ширина 		= 20;
				КолонкаСостояние.ЦветФонаПоля	= Новый Цвет(245,245,220);
				Возврат;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры  //УстановитьКолонкиСогласования

//процедура заполняет виртуальные реквизиты табличного поля
//
Процедура ОбработатьПолучениеДанныхВТабличномПоле(ОформленияСтрок) Экспорт
	Если ОформленияСтрок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	Если ОформленияСтрок[0].Ячейки.Найти("Маршрут")=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Ссылка = ОформленияСтрок[0].ДанныеСтроки.Ссылка;
	Идентификатор = Ссылка.Метаданные().Имя;
	Запрос = Новый Запрос;
	МассивОтбора = Новый Массив;
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл 
		МассивОтбора.Добавить(ОформлениеСтроки.ДанныеСтроки.Ссылка);
	КонецЦикла;

	Запрос.УстановитьПараметр("Документы",МассивОтбора);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(АктивныеЭтапы.Маршрут,ДвижениеДокументов.Маршрут) КАК Маршрут,
	               |	ЕСТЬNULL(АктивныеЭтапы.Статус,ДвижениеДокументов.Статус) КАК Статус,
	               |	ЕСТЬNULL(АктивныеЭтапы.ОтветственноеЛицо,ДвижениеДокументов.ОтветственноеЛицо) КАК ОтветственныйЭтапа,
	               |	ЕСТЬNULL(АктивныеЭтапы.Этап,ДвижениеДокументов.Этап) КАК Этап,
	               |	АктивныеЭтапы.Состояние,
	               |	ЕСТЬNULL(АктивныеЭтапы.Документ,ДвижениеДокументов.Документ)КАК Документ
	               |ИЗ
	               |	РегистрСведений.усд_ДвижениеДокументовПоМаршрутам.СрезПоследних(,Документ В (&Документы)) КАК ДвижениеДокументов
				   |	ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.усд_АктивныеЭтапыРассмотренияДокументов.СрезПоследних(,Документ В (&Документы)) КАК АктивныеЭтапы
				   |		ПО ДвижениеДокументов.Документ = АктивныеЭтапы.Документ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Документ
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Строки = Выборка.НайтиСтроки(Новый Структура("Документ",ОформлениеСтроки.ДанныеСтроки.Ссылка));
		Если Строки.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		Ячейки = ОформлениеСтроки.Ячейки;
		Массив = Новый Массив;
		Массив.Добавить("ОтветственныйЭтапа");
		Массив.Добавить("Состояние");
		Массив.Добавить("Этап");
		Массив.Добавить("Маршрут");
		Для Каждого Поле Из Массив Цикл
			Ячейки[Поле].ОтображатьТекст 	= Истина;
			Ячейки[Поле].Текст 				= Строки[0][Поле];
		КонецЦикла;
		Если Строки[0].Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Отклоненный Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(255,182,193);
		ИначеЕсли Строки[0].Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Согласованный Тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(192,220,192);
		Иначе
			ОформлениеСтроки.ЦветФона = Новый Цвет(245,245,220);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ОбработатьПолучениеДанныхВТабличномПоле

#КонецЕсли 

//устанавливает режим просмотра в форме документа вне полномочий
//
Процедура ДоступностьРедактированияДокумента(Форма,Объект) Экспорт
	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ИспользоватьПодсистемуЭлектронногоДокументооборота") Тогда
		Возврат;
	КонецЕсли;
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ",Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Этап,
	               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Маршрут,
	               |	ДвижениеДокументовПоМаршрутамСрезПоследних.ВидДокументов,
	               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Статус,
	               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Маршрут.БлокироватьПриЗавершении КАК БлокироватьПриЗавершении,
	               |	ДвижениеДокументовПоМаршрутамСрезПоследних.ПричинаВозврата
	               |ИЗ
	               |	РегистрСведений.усд_АктивныеЭтапыРассмотренияДокументов.СрезПоследних(, Документ = &Документ) КАК ДвижениеДокументовПоМаршрутамСрезПоследних
				   |ОБЪЕДИНИТЬ ВСЕ
				   |ВЫБРАТЬ
	               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Этап,
	               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Маршрут,
	               |	ДвижениеДокументовПоМаршрутамСрезПоследних.ВидДокументов,
	               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Статус,
	               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Маршрут.БлокироватьПриЗавершении КАК БлокироватьПриЗавершении,
	               |	ДвижениеДокументовПоМаршрутамСрезПоследних.ПричинаВозврата
	               |ИЗ
	               |	РегистрСведений.усд_ДвижениеДокументовПоМаршрутам.СрезПоследних(, Документ = &Документ) КАК ДвижениеДокументовПоМаршрутамСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если (Выборка.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Согласованный ИЛИ Выборка.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Отклоненный) И НЕ Выборка.БлокироватьПриЗавершении  Тогда
			Возврат;
		КонецЕсли;
		Текст = "Документ находится на этапе """+Выборка.Этап+""",
		|	маршрута согласования """+Выборка.Маршрут+"""."+?(Выборка.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Отклоненный," Документ отклонен по причине: "+Выборка.ПричинаВозврата,?(Выборка.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Согласованный," Документ согласован и утвержден.",""));
		Если НЕ усд_ПроцедурыСогласованияДокументов.ПользовательВходитВГруппуОтветственности(ПользователиКлиентСервер.АвторизованныйПользователь(),Выборка.Этап,Выборка.Маршрут,Выборка.ВидДокументов,Объект.Ссылка) Тогда
			Форма.ТолькоПросмотр = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ """+Объект.Ссылка+""" открыт в режиме просмотра так как:
			|"+Текст);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ДоступностьРедактированияДокумента

//Функция ПолучитьОписаниеТипаДляРеквизита
//
Функция ПолучитьОписаниеТипаДляРеквизита(ВидДокументов) Экспорт
	ОписаниеТипа = Новый ОписаниеТипов;
	Если ВидДокументов.ПрограммныйИдентификатор <> "" И ВидДокументов.КонтролируемыйРеквизит <>"" Тогда
		МетаданныеДокумента = Метаданные.Документы.Найти(ВидДокументов.ПрограммныйИдентификатор);
		Если МетаданныеДокумента <> Неопределено Тогда
			Реквизит = МетаданныеДокумента.Реквизиты.Найти(ВидДокументов.КонтролируемыйРеквизит);
			Если Реквизит <> Неопределено Тогда
				ОписаниеТипа = Реквизит.Тип;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ОписаниеТипа;
КонецФункции //ПолучитьОписаниеТипаДляРеквизита

//процедура устанавливает реквизиты документа согласно правилам марщрута
//
Функция КорректироватьРеквизитыДокумента(ДокументОбъект,Этап,Маршрут) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаРеквизитовНаЭтапах.ЗначениеКонтролируемогоРеквизита,
		|	КорректировкаРеквизитовНаЭтапах.КорректируемыйРеквизит
		|ИЗ
		|	Справочник.усд_МаршрутыДвиженияДокументов.КорректировкаРеквизитовНаЭтапах КАК КорректировкаРеквизитовНаЭтапах
		|ГДЕ
		|	КорректировкаРеквизитовНаЭтапах.Ссылка = &Маршрут
		|	И КорректировкаРеквизитовНаЭтапах.Этап = &Этап";

	Запрос.УстановитьПараметр("Маршрут", Маршрут);
	Запрос.УстановитьПараметр("Этап", Этап);

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект[ВыборкаДетальныеЗаписи.КорректируемыйРеквизит] = ВыборкаДетальныеЗаписи.ЗначениеКонтролируемогоРеквизита;
	КонецЦикла;
    ДокументОбъект.ДополнительныеСвойства.Вставить("ОперацияСогласования",Истина);
КонецФункции //КорректироватьРеквизитыДокумента

//процедура устанавливает реквизиты документа согласно правилам марщрута
//
Функция ТребуетсяКорректироватьРеквизитыДокумента(Этап,Маршрут) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаРеквизитовНаЭтапах.ЗначениеКонтролируемогоРеквизита,
		|	КорректировкаРеквизитовНаЭтапах.КорректируемыйРеквизит
		|ИЗ
		|	Справочник.усд_МаршрутыДвиженияДокументов.КорректировкаРеквизитовНаЭтапах КАК КорректировкаРеквизитовНаЭтапах
		|ГДЕ
		|	КорректировкаРеквизитовНаЭтапах.Ссылка = &Маршрут
		|	И КорректировкаРеквизитовНаЭтапах.Этап В (&Этап)";

	Запрос.УстановитьПараметр("Маршрут", Маршрут);
	Запрос.УстановитьПараметр("Этап", Этап);

	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
КонецФункции //КорректироватьРеквизитыДокумента

Процедура усд_ПриПолученииФормыСогласуемогоДокументаОбработкаПолученияФормы(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	Если (РольДоступна("усд_УчастникПроцессаСогласованияИУтвержденияДокументов") ИЛИ РольДоступна("усд_УправлениеСогласованиемИУтверждениемДокументов")) И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ИспользоватьПодсистемуЭлектронногоДокументооборота") И Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Источник.ПустаяСсылка())) Тогда
		Если усд_ПроцедурыСогласованияВызовСервераПовтИсп.ИспользуетсяСогласованиеДокумента(Метаданные.НайтиПоТипу(ТипЗнч(Источник.ПустаяСсылка())).Имя)=Ложь Тогда
			Возврат;
		КонецЕсли;
		ИмяДокумента = Источник.ПустаяСсылка().Метаданные().Имя;
		Если Метаданные.Документы[ИмяДокумента].Формы.Найти(ВидФормы+"Согласование")<>Неопределено Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_ВидыДокументов.Ссылка
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	Справочник.фин_ВидыДокументов КАК фин_ВидыДокументов
			|ГДЕ
			|	фин_ВидыДокументов.ПрограммныйИдентификатор = &ПрограммныйИдентификатор
			|	И НЕ фин_ВидыДокументов.ПометкаУдаления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	усд_АктуальныеМаршрутыСогласованияДокументов.Маршрут
			|ИЗ
			|	ВТ КАК ВТ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.усд_АктуальныеМаршрутыСогласованияДокументов КАК усд_АктуальныеМаршрутыСогласованияДокументов
			|		ПО ВТ.Ссылка = усд_АктуальныеМаршрутыСогласованияДокументов.ВидДокументов";
			
			Запрос.УстановитьПараметр("ПрограммныйИдентификатор", ИмяДокумента);
			
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				ВыбраннаяФорма = "Документ."+ИмяДокумента+".Форма."+ВидФормы+"Согласование";
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
