
///////////////////////////////////////////////////////////////////////////////////
//ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает список с наборами прав, доступными текущему пользователю
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Список значений с доступными ролями пользователя
//
Функция мПолучитьСписокНабораПрав() Экспорт

	НаборДоступныхРолейПользователя = Новый СписокЗначений;
	
	ЗначенияПеречисления = Метаданные.Перечисления.НаборПравПользователей.ЗначенияПеречисления;
	
	КоличествоНаборовПрав = Перечисления["НаборПравПользователей"].Количество();
	Для а = 0 По КоличествоНаборовПрав - 1 Цикл
		Если РольДоступна(Строка(ЗначенияПеречисления[а].Имя)) ИЛИ РольДоступна(Строка(ЗначенияПеречисления[а].Имя)+"СОграничениемПравДоступа") Тогда
			НаборДоступныхРолейПользователя.Добавить(Перечисления.НаборПравПользователей[а]);
		КонецЕсли;
	КонецЦикла;

	Возврат НаборДоступныхРолейПользователя;

КонецФункции // мПолучитьСписокНабораПрав()
        
// Функция возвращает список значений права, установленных для пользователя.
// Если количество значений меньше количество доступных ролей, то возвращается значение по умолчанию
//
// Параметры:
//  Право               - право, для которого определяются значения
//  ЗначениеПоУмолчанию - значение по умолчанию для передаваемого права (возвращается в случае
//                        отсутствия значений в регистре сведений)
//
// Возвращаемое значение:
//  Список всех значений, установленных наборам прав (ролям), доступных пользователю
//
Функция ПолучитьЗначениеПраваДляТекущегоПользователя(Право, ЗначениеПоУмолчанию = Неопределено) Экспорт

	ВозвращаемыеЗначения = Новый СписокЗначений;
	СписокНабораПрав = мПолучитьСписокНабораПрав();

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НаборПрав"        , СписокНабораПрав);
	Запрос.УстановитьПараметр("ПравоПользователя", Право);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.ЗначенияПравПользователя КАК РегистрЗначениеПрав
	|
	|ГДЕ
	|	Право = &ПравоПользователя
	| И НаборПрав В(&НаборПрав)
	|
	|";

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() < СписокНабораПрав.Количество() Тогда
		ВозвращаемыеЗначения.Добавить(ЗначениеПоУмолчанию);
	КонецЕсли;

	Пока Выборка.Следующий() Цикл
		Если ВозвращаемыеЗначения.НайтиПоЗначению(Выборка.Значение) = Неопределено Тогда
			ВозвращаемыеЗначения.Добавить(Выборка.Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат ВозвращаемыеЗначения;

КонецФункции // ПолучитьЗначениеПраваДляТекущегоПользователя()

// Функция возвращает право печатать непроведенные документы.
//
// Параметры:
//  Проведен     - признак проведен ли документ (если документ не проводной,
//                 то либо параметр опускается, либо равен Истина)
//
// Возвращаемое значение:
//  Истина - если можно печатать, иначе Ложь.
//
Функция РазрешитьПечатьНепроведенныхДокументов(Проведен = Истина) Экспорт

	Если гз_ОбщегоНазначения.АвтономныйРежимРаботы() ИЛИ гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БГУ" Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если Проведен Тогда
		Возврат Истина;
	КонецЕсли;

	РазрешеноПечатать = ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик["ПраваПользователей"].ПечатьНепроведенныхДокументов, Истина);
	Если (РазрешеноПечатать.Количество() = 0)
	 ИЛИ (РазрешеноПечатать.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат РазрешеноПечатать[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьПечатьНепроведенныхДокументов()

// Функция возвращает признак защищать таблицу от редактирования или нет.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если таблицу необходимо защитить от редактирования, иначе Ложь.
//
Функция ЗащитаТаблиц() Экспорт

	Если гз_ОбщегоНазначения.ПолучитьРежимРаботы() = "БК" ИЛИ гз_ОбщегоНазначения.ПолучитьРежимРаботы() = "БГП" ИЛИ гз_ОбщегоНазначения.ПолучитьРежимРаботы()="БУГП" Тогда
		РазрешеноРедактирование = ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РедактированиеТаблиц, Истина);

		Если (РазрешеноРедактирование.Количество() = 0)
		 ИЛИ (РазрешеноРедактирование.Количество() > 1) Тогда
			Возврат Ложь;
		Иначе
			Возврат НЕ РазрешеноРедактирование[0].Значение;
		КонецЕсли;
	Иначе 
		Возврат Истина;
	КонецЕсли;

КонецФункции // ЗащитаТаблиц()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПОЛЬЗОВАТЕЛЯМИ БД

// Функция создает нового пользователя БД с настройками по умолчанию и возвращает его
//
// Параметры:
//  ИмяПользователя     				 - имя добавляемого пользователя
//  ПолноеИмя 							 - полное имя добавляемого пользователя
//  СообщатьОДобавленииПользователя 	 - признак сообщать ли о добавлении пользователя
//  ЗаписатьПользователяВИБ			 	 - признак добавлять ли пользователя в информационную базу
//
// Возвращаемое значение:
//  НовыйПользователь - созданный пользователь.
//
Функция ДобавитьНовогоПользователяИБ(ИмяПользователя, ПолноеИмя = Неопределено, СообщатьОДобавленииПользователя = Истина, ЗаписатьПользователяВИБ = Истина) Экспорт
	
	НовыйПользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
	НовыйПользователь.Имя = ИмяПользователя;
	НовыйПользователь.ПолноеИмя = ?(Не ЗначениеЗаполнено(ПолноеИмя), ИмяПользователя, ПолноеИмя);
	
	НовыйПользователь.АутентификацияСтандартная = Истина;
	НовыйПользователь.ПоказыватьВСпискеВыбора = Истина;
	
	Если ЗаписатьПользователяВИБ Тогда
		
		Попытка
			НовыйПользователь.Записать();
			#Если Клиент Тогда
			Если СообщатьОДобавленииПользователя Тогда
				Сообщить("В список пользователей ИБ добавлен пользователь с именем """ + ИмяПользователя + """");
			КонецЕсли;
			#КонецЕсли

		Исключение
		
			#Если Клиент Тогда
			Сообщить("Ошибка при добавлении пользователя в список пользователей ИБ """ + ИмяПользователя + """");
			#КонецЕсли
	
		КонецПопытки;
	
	КонецЕсли;	
	
	Возврат НовыйПользователь;
	
КонецФункции //ДобавитьНовогоПользователяИБ()

// Функция по имени ищет пользователя БД, если не находит - создает нового и его возвращает
// Параметры:
//	ИмяПользователя - строка по которой ищется пользователь БД
//  ПолноеИмяПользователя - строка, при добавлении пользователя БД таким будет установлено полное имя пользователя
//	СообщатьОДобавленииПользователя - Булево, нужно ли сообщать о добавлении нового пользователя БД
//	ЗаписатьПользователяВБД - Нужно ли при добавлении пользователя записывать его
Функция мНайтиПользователяИБ(ИмяПользователя) Экспорт
	
	Если ИмяПользователя = "НеАвторизован" Тогда
		ПользовательИБ = Неопределено
	Иначе
		// ищем пользователя ИБ по имени
		Попытка
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
		Исключение
			ПользовательИБ = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ПользовательИБ;
	
КонецФункции //мНайтиПользователяИБ()

// Функция дополняет ИМЯ пробелами справа до длины 50
//
// Параметры:
//  Имя	- имя пользователя
//
// Возвращаемое значение:
//  ИмяПользователя - имя пользователя, дополненное пробелами.
//
Функция СформироватьИмяПользователяВСправочнике(Имя) Экспорт
	
	ИмяПользователя = Имя;
	Для Счетчик = СтрДлина(ИмяПользователя) + 1 По 50 Цикл
		ИмяПользователя = ИмяПользователя + " ";	
	КонецЦикла;
	
	ИмяПользователя = Лев(ИмяПользователя, 50);
	
	Возврат ИмяПользователя;
	
КонецФункции //СформироватьИмяПользователяВСправочнике()

// Процедура синхронизирует справочник пользователей с пользователями ИБ
//
// Параметры:
//  нет.
//
Процедура СинхронизироватьПользователейИПользователейИБ() Экспорт
	
	// при синхронизации списков пользователей и пользователей ИБ приоритетом
	// пользуются пользователи ИБ
	// если нет пользователя ИБ, то такой элемент списка пользователей помечаем на удаление
	// если пользователь ИБ есть а всписке такого элемента нет, то добавляем его, а если он помечен на удаление, 
	//  то снимаем пометку
	
	// имена пользователей ИБ могут быть заданы с незначащими символами
	// надо все незначимые символы из имен пользователей ИБ убрать
	МассивПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого ПользовательИБ Из МассивПользователейИБ Цикл
		
		ИмяПользователяИБ = СокрЛП(ПользовательИБ.Имя);	
		Если ИмяПользователяИБ <> ПользовательИБ.Имя Тогда
			
			СтароеИмяПользователяИБ = ПользовательИБ.Имя;
			// полное имя тоже изменим если оно совпадает с именем самого пользователя
			Если ПользовательИБ.ПолноеИмя = ПользовательИБ.Имя Тогда
				ПользовательИБ.ПолноеИмя = ИмяПользователяИБ;	
			КонецЕсли;
			ПользовательИБ.Имя = ИмяПользователяИБ;
			
			Попытка
				ПользовательИБ.Записать();
			Исключение
				// не смогли пользователя еще одного записать, значит есть очень похожие имена
				Сообщить("В списке пользователей базы данных присутствуют пользователи с именами """ + 
					СтароеИмяПользователяИБ + """ и """ + ИмяПользователяИБ + """", СтатусСообщения.Важное);
					
				Сообщить("Этим пользователям будет сопоставлен единственный элемент справочника ""Пользователи"" с именем  """ + ИмяПользователяИБ + """", СтатусСообщения.Важное);	
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// 1 Пробегаем по справочнику пользователей и каких пользователей в ИБ
	// не нашли - тех помечаем на удаление
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	                |	Пользователи.*
	                |ИЗ
	                |	Справочник.Пользователи КАК Пользователи
					|
					| ГДЕ Пользователи.ЭтоГруппа = Ложь 
					|	И Пользователи.ПометкаУдаления = Ложь";
	
	ТаблицаПользователей = Запрос.Выполнить().Выгрузить();
	Для Каждого ПользовательСправочника Из ТаблицаПользователей Цикл

		// Для пользователя с пустым именем не надо пользователя в ИБ создавать
		ИмяПользователя = СокрЛП(ПользовательСправочника.Код);
		Если ИмяПользователя = "" ИЛИ ИмяПользователя = "НеАвторизован" Тогда           
			Продолжить;
		КонецЕсли;
			
		// ищем пользователя ИБ по имени
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
		Если ПользовательИБ = Неопределено Тогда
			// такого пользователя не нашли в пользователях ИБ - помечаем его на удаление
			
			ПользовательСсылка = Справочники.Пользователи.НайтиПоКоду(ПользовательСправочника.Код);
			// такого быть не может - должны найти всегда
			Если Не ЗначениеЗаполнено(ПользовательСсылка) Тогда
				Продолжить;
			КонецЕсли;
			
			ПользовательОбъект = ПользовательСсылка.ПолучитьОбъект();
			Попытка
				// обходим что бы можно было установить пометку на удаление
				ПользовательОбъект.ОбменДанными.Загрузка = Истина;
				ПользовательОбъект.УстановитьПометкуУдаления(Истина, Ложь);
				#Если Клиент Тогда
				Сообщить("Пользователь """ + СокрЛП(ПользовательОбъект.КОД) + """ помечен на удаление в справочнике пользователей.");
				#КонецЕсли

			Исключение
				
				#Если Клиент Тогда
				Сообщить("Ошибка при пометке на удаления пользователя """ + СокрЛП(ПользовательОбъект.КОД) + """. " + ОписаниеОшибки());
				#КонецЕсли
 			
			КонецПопытки;
			
		КонецЕсли;
	
	КонецЦикла;
	
	// 2 Пробегаем по пользователям ИБ и тех кого не нашли в справочнике добавляем
	Для Каждого ПользовательИБ Из МассивПользователейИБ Цикл
		
		ИмяПользователяВСправочнике = СформироватьИмяПользователяВСправочнике(ПользовательИБ.Имя);
		ПользовательСправочника = Справочники.Пользователи.НайтиПоКоду(ИмяПользователяВСправочнике);
		// пользователя в справочнике нашли
		Если ЗначениеЗаполнено(ПользовательСправочника) Тогда
			
			ПользовательОбъект = ПользовательСправочника.ПолучитьОбъект();
			// нельзя что бы имя пользователя ИБ совпадало с именем группы
			Если ПользовательОбъект.ЭтоГруппа Тогда
				
				#Если Клиент Тогда
				Сообщить("Имя пользователя ИБ """ + СокрЛП(ПользовательОбъект.КОД) + """ совпадает с именем группы в справочнике пользователей!", СтатусСообщения.Важное);
				#КонецЕсли

				Продолжить;
			КонецЕсли;
			
			Если НЕ ПользовательОбъект.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
				
			Попытка
				// обходим что бы можно было установить пометку на удаление
				ПользовательОбъект.ОбменДанными.Загрузка = Истина;
				ПользовательОбъект.УстановитьПометкуУдаления(Ложь, Ложь);
				ПользовательОбъект.мПользовательИБ = ПользовательИБ;
		        ПользовательОбъект.Код          = ИмяПользователяВСправочнике;
				ПользовательОбъект.Наименование = ПользовательИБ.ПолноеИмя;
					
				ПользовательОбъект.Записать();
				#Если Клиент Тогда
				Сообщить("У пользователя """ + СокрЛП(ПользовательОбъект.КОД) + """ снята пометка на удаление в справочнике пользователей.");
				#КонецЕсли

			Исключение
					
				#Если Клиент Тогда
				Сообщить("Ошибка при снятии пометки на удаления у пользователя """ + СокрЛП(ПользовательОбъект.КОД) + """. " + ОписаниеОшибки());
				#КонецЕсли
	 			
			КонецПопытки;
			
		Иначе
			// пользователя в справочнике не нашли
			ОбъектПользователь = Справочники.Пользователи.СоздатьЭлемент();
			ОбъектПользователь.мПользовательИБ = ПользовательИБ;
	        ОбъектПользователь.Код          = ИмяПользователяВСправочнике;
			ОбъектПользователь.Наименование = ПользовательИБ.ПолноеИмя;

			Попытка
				ОбъектПользователь.Записать();
				
				#Если Клиент Тогда
				Сообщить("Пользователь """ + СокрЛП(ПользовательИБ.Имя) + """ зарегистрирован в справочнике пользователей.");
				#КонецЕсли
			Исключение
				гз_ОбщегоНазначения.мСообщитьОбОшибке("Ошибка при добавлении пользователя """ + СокрЛП(ПользовательИБ.Имя) + """ в справочник.");
		    КонецПопытки;

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //СинхронизироватьПользователейИПользователейИБ()

// Функция копирует пользователя ИБ с определенным именем и создает нового с такими же настройками
//
// Параметры:
//  ИмяПользователяИБ - имя копируемого пользователя
//
// Возвращаемое значение:
//  НовыйПользовательИБ - созданный пользователь.
//
Функция СкопироватьПользователяИБ(ИмяПользователяИБ) Экспорт
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
	Если ПользовательИБ = Неопределено Тогда
		ПолноеИмяПользователяИБ = ИмяПользователяИБ;
	Иначе
		ПолноеИмяПользователяИБ = ПользовательИБ.ПолноеИмя;
	КонецЕсли;
	
	НовыйПользовательИБ = ДобавитьНовогоПользователяИБ(ИмяПользователяИБ, ПользовательИБ.ПолноеИмя, Ложь, Ложь);
	
	Если ПользовательИБ <> Неопределено Тогда
		// Если есть от кого копировать настройки - копируем
		НовыйПользовательИБ.ПользовательОС = ПользовательИБ.ПользовательОС;
		НовыйПользовательИБ.Пароль = "";
		НовыйПользовательИБ.АутентификацияСтандартная = ПользовательИБ.АутентификацияСтандартная;
		НовыйПользовательИБ.ПоказыватьВСпискеВыбора = ПользовательИБ.ПоказыватьВСпискеВыбора;
		НовыйПользовательИБ.АутентификацияОС = ПользовательИБ.АутентификацияОС;
		НовыйПользовательИБ.Язык = ПользовательИБ.Язык;
		НовыйПользовательИБ.ОсновнойИнтерфейс = ПользовательИБ.ОсновнойИнтерфейс;
		
		// Роли сохраняем
		Для Каждого ДоступныеРолиПользователяИБ Из ПользовательИБ.Роли Цикл
			НовыйПользовательИБ.Роли.Добавить(ДоступныеРолиПользователяИБ);
		КонецЦикла; 
	
	КонецЕсли;
  	
	Возврат  НовыйПользовательИБ;
	
КонецФункции //СкопироватьПользователяИБ()

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого возвращается значение по умолчанию
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция мПолучитьЗначениеПоУмолчанию(Пользователь, Настройка) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик["НастройкиПользователей"][Настройка]);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
	|
	|ГДЕ
	|	Пользователь = &Пользователь
	| И Настройка    = &Настройка";

	Выборка = Запрос.Выполнить().Выбрать();

	ПустоеЗначение = ПланыВидовХарактеристик.НастройкиПользователей[Настройка].ТипЗначения.ПривестиЗначение();

	Если Выборка.Количество() = 0 Тогда
		Если Настройка = "ОткрыватьПриЗапускеПанельФункций" Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Настройка = "ОтражатьДокументыВНалоговомУчете" Тогда
			Возврат Истина;
		КонецЕсли;
				
		Если Настройка = "ОтражатьДокументыВУправленческомУчете" Тогда
			Возврат Истина;
		КонецЕсли;
				
		Если Настройка = "ОтражатьДокументыВБухгалтерскомУчете" Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат ПустоеЗначение;

	ИначеЕсли Выборка.Следующий() Тогда

		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;

	Иначе
		Возврат ПустоеЗначение;

	КонецЕсли;

КонецФункции // ПолучитьЗначениеПоУмолчанию()

#Если Клиент Тогда

//Функция редактирует или создает нового пользователя ИБ
//
Функция мРедактироватьИлиСоздатьПользователяИБ(ОбъектПользователя, ТекущийПользовательИБ, Знач Модифицированность = Ложь,
	Знач ПользовательДляКопированияНастроек = Неопределено) Экспорт
	
	СозданНовыйЭлемент = Ложь;
	
	Если ТекущийПользовательИБ = Неопределено Тогда
		
		Если ОбъектПользователя = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ИмяПользователя = СокрЛП(ОбъектПользователя.Код);
		
		ОтветПользователя = Вопрос("Пользователь ИБ с именем """ + ИмяПользователя + """ не найден. Создать нового пользователя ИБ?", РежимДиалогаВопрос.ДаНет);
		Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// создаем нового пользователя ИБ
		ТекущийПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		ТекущийПользовательИБ.Имя = ИмяПользователя;
		ТекущийПользовательИБ.ПолноеИмя = СокрЛП(ОбъектПользователя.Наименование);
		
		СозданНовыйЭлемент = Истина;		
		
	КонецЕсли;
	
	// надо показать форму редактирования настроек пользователя ИБ
	ФормаРедактированияПользователяИБ = ПолучитьОбщуюФорму("ФормаПользователяИБ");
	ФормаРедактированияПользователяИБ.ПользовательИБ = ТекущийПользовательИБ;
	ФормаРедактированияПользователяИБ.ПользовательДляКопированияНастроек = ПользовательДляКопированияНастроек;
	ФормаРедактированияПользователяИБ.Модифицированность = Модифицированность ИЛИ СозданНовыйЭлемент;
	ФормаРедактированияПользователяИБ.Пользователь = ОбъектПользователя;
	
	РезультатОткрытия = ФормаРедактированияПользователяИБ.ОткрытьМодально();
	
	Возврат РезультатОткрытия;
	
КонецФункции //мРедактироватьИлиСоздатьПользователяИБ()

#КонецЕсли




