                     	
////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ОТБОРОМ 
   
// Формирование полной копии отбора
//
// Параметры
//  Отбор  – Отбор – Исходный отбор, копию которого необходимо получить
//
// Возвращаемое значение:
//   ТаблицаЗначений   – Копия исходного отбора
//
Функция ПолучитьКопиюОтбораВТЗ(Отбор) Экспорт

	Копия = Новый ТаблицаЗначений;
	Копия.Колонки.Добавить("ВидСравнения");
	Копия.Колонки.Добавить("Значение");
	Копия.Колонки.Добавить("ЗначениеПо");
	Копия.Колонки.Добавить("ЗначениеС");
	Копия.Колонки.Добавить("Имя");
	Копия.Колонки.Добавить("Использование");
	Копия.Колонки.Добавить("Представление");
	Копия.Колонки.Добавить("ПутьКДанным");
	Копия.Колонки.Добавить("ТипЗначения");
	
	Для каждого ЭлементОтбора Из Отбор Цикл
	
		//стр = Копия.Добавить();
		ЗаполнитьЗначенияСвойств(Копия.Добавить(), ЭлементОтбора);
	
	КонецЦикла;
	
	Возврат Копия;

КонецФункции // ПолучитьКопиюОтбора(Отбор)

// Заполнение отбора значениями из таблицы значений.
// Соответствие полей устанавливается по представлению и типам значений
//
// Параметры
//  Отбор  – Отбор           – Отбор, который требуется заполнить значениями
//  ТЗ     – ТаблицаЗначений – Таблица содержит значения для отбора.
//                             Структура колонок повторяет структуру отбора
//
Процедура УстановитьОтборИзТаблицы(Отбор, ТЗ) Экспорт
	
	//сначала удалим неиспоьзуемый отбор для счета
	НовыеНастройки = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(Отбор);
	
	Если НовыеНастройки.Количество() > 0 Тогда
		//удалим отбор, который не используется для текущего счета	
		Индекс = Отбор.Количество();
		Пока Индекс >0 Цикл
			Индекс = Индекс - 1;
			ПредставлениеОтбора = Отбор[Индекс].Представление;		
			ПозицияТочки = Найти(Отбор[Индекс], ".");
			Если ПозицияТочки > 0  Тогда
				ПредставлениеОтбора = СтрЗаменить(ПредставлениеОтбора,Прав(ПредставлениеОтбора,СтрДлина(ПредставлениеОтбора) - (ПозицияТочки-1)), "") ;				
				НайденныйОтбор = НовыеНастройки.Найти(ПредставлениеОтбора, "Представление");
				Если НайденныйОтбор = Неопределено Тогда
					//удалим его из отбора
					Отбор.Удалить(Индекс);
				КонецЕсли; 	
			КонецЕсли;			
		КонецЦикла;		
	КонецЕсли; 
				
	//установим значения для отбора	
	Для каждого ЭлементОтбора Из Отбор Цикл
		СтрокаТаблицы = Неопределено;
		Для каждого стр Из ТЗ Цикл
			Если стр.Представление =  ЭлементОтбора.Представление
				И стр.ТипЗначения = ЭлементОтбора.ТипЗначения Тогда
				Если ПустаяСтрока(стр.Представление)
					И ПустаяСтрока(стр.ПутьКданным) Тогда
					
					Продолжить;
					
				КонецЕсли;
				СтрокаТаблицы = стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаТаблицы <> Неопределено Тогда
			ЭлементОтбора.ВидСравнения = СтрокаТаблицы.ВидСравнения;
			ЗаполнитьЗначенияСвойств(ЭлементОтбора, СтрокаТаблицы, "Значение, ЗначениеПо, ЗначениеС, Использование");
		КонецЕсли;
	
	КонецЦикла;


КонецПроцедуры // УстановитьОтборИзТаблицы(Отбор, ТЗ)

// Функция формирует строку представления отборов объекта Отбор
//
// Параметры
//  Отбор - Отбор, по которому формируем строку
//
// Возвращаемое значение:
//   Строка - представление отбора
//
Функция СформироватьСтрокуОтборов(Отбор) Экспорт

	Если ТипЗнч(Отбор) <> Тип("Отбор") Тогда
		Возврат "";
	КонецЕсли; 
	
	СтрокаОтборов = "";
	
	Для а = 0 По Отбор.Количество() - 1 Цикл
		
		ЭлементОтбора = Отбор[а];
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли; 

		Если ЭлементОтбора.Имя = "Периодичность" Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ПустаяСтрока(СтрокаОтборов) Тогда
			СтрокаОтборов = СтрокаОтборов + ", ";
		КонецЕсли; 
		Если ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " = "+ ?(НЕ ЗначениеЗаполнено(ЭлементОтбора.Значение), "Пусто", СокрЛП(Строка(ЭлементОтбора.Значение)));
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " <> "+ ?(НЕ ЗначениеЗаполнено(ЭлементОтбора.Значение), "Пусто", СокрЛП(Строка(ЭлементОтбора.Значение)));
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
			СтрокаСписка = "";
			Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
				Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
					СтрокаСписка = СтрокаСписка + "; ";
				КонецЕсли; 
				Если НЕ ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
					СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
				Иначе
					СтрокаСписка = СтрокаСписка + СокрЛП(ЭлементСписка.Представление);
				КонецЕсли;
			КонецЦикла; 
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " в списке "+ ?(НЕ ЗначениеЗаполнено(ЭлементОтбора.Значение), "Пусто", СтрокаСписка);
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
			СтрокаСписка = "";
			Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
				Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
					СтрокаСписка = СтрокаСписка + "; ";
				КонецЕсли; 
				Если НЕ ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
					СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
				Иначе
					СтрокаСписка = СтрокаСписка + СокрЛП(ЭлементСписка.Представление);
				КонецЕсли;
			КонецЦикла; 
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " в списке по иерархии "+ ?(НЕ ЗначениеЗаполнено(ЭлементОтбора.Значение), "Пусто", СтрокаСписка);
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
			СтрокаСписка = "";
			Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
				Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
					СтрокаСписка = СтрокаСписка + "; ";
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
					СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
				Иначе
					СтрокаСписка = СтрокаСписка + СокрЛП(ЭлементСписка.Представление);
				КонецЕсли;
			КонецЦикла; 
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " не в списке "+ ?(НЕ ЗначениеЗаполнено(ЭлементОтбора.Значение), "Пусто", СтрокаСписка);
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
			СтрокаСписка = "";
			Для каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
				Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
					СтрокаСписка = СтрокаСписка + "; ";
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
					СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
				Иначе
					СтрокаСписка = СтрокаСписка + СокрЛП(ЭлементСписка.Представление);
				КонецЕсли;
			КонецЦикла; 
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " не в списке по иерархии "+ ?(НЕ ЗначениеЗаполнено(ЭлементОтбора.Значение), "Пусто", СтрокаСписка);
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВИерархии Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " в иерархии "+ ?(НЕ ЗначениеЗаполнено(ЭлементОтбора.Значение), "Пусто", ЭлементОтбора.Значение);
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВИерархии Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " не в иерархии "+ ?(НЕ ЗначениеЗаполнено(ЭлементОтбора.Значение), "Пусто", ЭлементОтбора.Значение);
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Больше Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " > "+ ?(НЕ ЗначениеЗаполнено(ЭлементОтбора.Значение), "Пусто", СокрЛП(Строка(ЭлементОтбора.Значение)));
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " >= "+ ?(НЕ ЗначениеЗаполнено(ЭлементОтбора.Значение), "Пусто", СокрЛП(Строка(ЭлементОтбора.Значение)));
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Меньше Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " < "+ ?(НЕ ЗначениеЗаполнено(ЭлементОтбора.Значение), "Пусто", СокрЛП(Строка(ЭлементОтбора.Значение)));
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
			СтрокаОтборов = СтрокаОтборов + ЭлементОтбора.Представление + " <= "+ ?(НЕ ЗначениеЗаполнено(ЭлементОтбора.Значение), "Пусто", СокрЛП(Строка(ЭлементОтбора.Значение)));
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Интервал Тогда
			СтрокаОтборов = СтрокаОтборов + ?(НЕ ЗначениеЗаполнено(ЭлементОтбора.ЗначениеС), "...", СокрЛП(Строка(ЭлементОтбора.ЗначениеС))) + " < " + ЭлементОтбора.Представление + " < "+ ?(НЕ ЗначениеЗаполнено(ЭлементОтбора.ЗначениеПо), "...", СокрЛП(Строка(ЭлементОтбора.ЗначениеПо)));
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
			СтрокаОтборов = СтрокаОтборов + ?(НЕ ЗначениеЗаполнено(ЭлементОтбора.ЗначениеС), "...", СокрЛП(Строка(ЭлементОтбора.ЗначениеС))) + " <= " + ЭлементОтбора.Представление + " <= "+ ?(НЕ ЗначениеЗаполнено(ЭлементОтбора.ЗначениеПо), "...", СокрЛП(Строка(ЭлементОтбора.ЗначениеПо)));
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
			СтрокаОтборов = СтрокаОтборов + ?(НЕ ЗначениеЗаполнено(ЭлементОтбора.ЗначениеС), "...", СокрЛП(Строка(ЭлементОтбора.ЗначениеС))) + " <= " + ЭлементОтбора.Представление + " < "+ ?(НЕ ЗначениеЗаполнено(ЭлементОтбора.ЗначениеПо), "...", СокрЛП(Строка(ЭлементОтбора.ЗначениеПо)));
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
			СтрокаОтборов = СтрокаОтборов + ?(НЕ ЗначениеЗаполнено(ЭлементОтбора.ЗначениеС), "...", СокрЛП(Строка(ЭлементОтбора.ЗначениеС))) + " < " + ЭлементОтбора.Представление + " <= "+ ?(НЕ ЗначениеЗаполнено(ЭлементОтбора.ЗначениеПо), "...", СокрЛП(Строка(ЭлементОтбора.ЗначениеПо)));
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит Тогда
			СтрокаОтборов = СтрокаОтборов  + ЭлементОтбора.Представление + " содержит '" + ЭлементОтбора.Значение + "'";
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеСодержит Тогда
			СтрокаОтборов = СтрокаОтборов  + ЭлементОтбора.Представление + " не содержит '" + ЭлементОтбора.Значение + "'";
		КонецЕсли; 

	КонецЦикла; 
	
	Возврат СтрокаОтборов;

КонецФункции // СформироватьСтрокуОтборов()

// Функция возвращает Строку Вида отбора для запроса
// 
// Параметры
// ВыбВидСравнения       - ВидСравнения
// ЗначениеОтбора        - Значение отбора запроса
// СтрокаАргументаОтбора - Строка, Аргумент запроса, т.е. то что должно быть написано до вида сревнения
// ЗначениеОтбораНач     - Произвольный, значение отбора для видов сравнения, у которых необходимо указывать два значения, начальное значение
// ЗначениеОтбораКон     - Произвольный, значение отбора для видов сравнения, у которых необходимо указывать два значения, конечное значение
// 
// Возвращаемое значение 
//  Строка для запроса
//
Функция ПолучитьСтрокуОтбора(ВыбВидСравнения, ЗначениеОтбора, СтрокаПоляОтбора, ЗначениеОтбораС = Неопределено, ЗначениеОтбораПо = Неопределено, СамоЗначение = Неопределено, СамоЗначениеС = Неопределено, СамоЗначениеПо = Неопределено) Экспорт

	СтрокаВозврата = "";
	Если ВыбВидСравнения = ВидСравнения.Равно Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" = " + ЗначениеОтбора);
	ИначеЕсли ВыбВидСравнения = ВидСравнения.НеРавно Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" <> " + ЗначениеОтбора);
	ИначеЕсли ВыбВидСравнения = ВидСравнения.ВСписке Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" В (" + ЗначениеОтбора+")");
	ИначеЕсли ВыбВидСравнения = ВидСравнения.ВСпискеПоИерархии 
		ИЛИ ВыбВидСравнения = ВидСравнения.ВИерархии Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" В ИЕРАРХИИ(" + ЗначениеОтбора+")");
	ИначеЕсли ВыбВидСравнения = ВидСравнения.НеВСписке Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" НЕ В (" + ЗначениеОтбора+")");
	ИначеЕсли ВыбВидСравнения = ВидСравнения.НеВСпискеПоИерархии 
		ИЛИ ВыбВидСравнения = ВидСравнения.НеВИерархии Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" НЕ В ИЕРАРХИИ(" + ЗначениеОтбора+")");
	ИначеЕсли ВыбВидСравнения = ВидСравнения.Больше Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" > " + ЗначениеОтбора);
	ИначеЕсли ВыбВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" >= " + ЗначениеОтбора);
	ИначеЕсли ВыбВидСравнения = ВидСравнения.Меньше Тогда
		Если НЕ (ТипЗнч(СамоЗначение) = Тип("Дата") И НЕ ЗначениеЗаполнено(СамоЗначение)) Тогда
			СтрокаВозврата = СтрокаПоляОтбора + Строка(" < " + ЗначениеОтбора);
		КонецЕсли; 
	ИначеЕсли ВыбВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
		Если НЕ (ТипЗнч(СамоЗначение) = Тип("Дата") И НЕ ЗначениеЗаполнено(СамоЗначение)) Тогда
			СтрокаВозврата = СтрокаПоляОтбора + Строка(" <= " + ЗначениеОтбора);
		КонецЕсли; 
	ИначеЕсли ВыбВидСравнения = ВидСравнения.Интервал Тогда
		Если ТипЗнч(СамоЗначениеПо) = Тип("Дата") И НЕ ЗначениеЗаполнено(СамоЗначениеПо) Тогда
			СтрокаВозврата = "(" + СтрокаПоляОтбора + Строка(" > " + ЗначениеОтбораС) + ")";
		Иначе
			СтрокаВозврата = "(" + СтрокаПоляОтбора + Строка(" > " + ЗначениеОтбораС) + " И " + СтрокаПоляОтбора + Строка(" < " + ЗначениеОтбораПо) + ")";
		КонецЕсли;
	ИначеЕсли ВыбВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
		Если ТипЗнч(СамоЗначениеПо) = Тип("Дата") И НЕ ЗначениеЗаполнено(СамоЗначениеПо) Тогда
			СтрокаВозврата = "(" + СтрокаПоляОтбора + Строка(" >= " + ЗначениеОтбораС) + ")";
		Иначе
			СтрокаВозврата = "(" + СтрокаПоляОтбора + Строка(" >= " + ЗначениеОтбораС) + " И " + СтрокаПоляОтбора + Строка(" <= " + ЗначениеОтбораПо) + ")";
		КонецЕсли;
	ИначеЕсли ВыбВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
		Если ТипЗнч(СамоЗначениеПо) = Тип("Дата") И НЕ ЗначениеЗаполнено(СамоЗначениеПо) Тогда
			СтрокаВозврата = "(" + СтрокаПоляОтбора + Строка(" >= " + ЗначениеОтбораС) + ")";
		Иначе
			СтрокаВозврата = "(" + СтрокаПоляОтбора + Строка(" >= " + ЗначениеОтбораС) + " И " + СтрокаПоляОтбора + Строка(" < " + ЗначениеОтбораПо) + ")";
		КонецЕсли;
	ИначеЕсли ВыбВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
		Если ТипЗнч(СамоЗначениеПо) = Тип("Дата") И НЕ ЗначениеЗаполнено(СамоЗначениеПо) Тогда
			СтрокаВозврата = "(" + СтрокаПоляОтбора + Строка(" > " + ЗначениеОтбораС) + ")";
		Иначе
			СтрокаВозврата = "(" + СтрокаПоляОтбора + Строка(" > " + ЗначениеОтбораС) + " И " + СтрокаПоляОтбора + Строка(" <= " + ЗначениеОтбораПо) + ")";
		КонецЕсли;
	ИначеЕсли ВыбВидСравнения = ВидСравнения.Содержит Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" ПОДОБНО " + ЗначениеОтбора);
	ИначеЕсли ВыбВидСравнения = ВидСравнения.НеСодержит Тогда
		СтрокаВозврата = "НЕ (" + СтрокаПоляОтбора + Строка(" ПОДОБНО " + ЗначениеОтбора + ")");
	КонецЕсли;
	
	Возврат СтрокаВозврата;
	
КонецФункции // ПолучитьСтрокуОтбора()

// Функция определяет, доступен ли элемент отбора с указанным именем для изменения имени, удаления, переименования
// используется в формах настройки отчетов на базе Построителя Отчетов для того, чтобы не удалить в форме
// настройки отбор, связанный с "быстрым отбором", находящимся на основной форме.
//
// Параметры:
//	ИмяЭлементаОтбора               - строка, содержит имя элемента отбора.
//	СтруктураСвязиЭлементовСДанными - структура, возвращаемая в один из параметров методом 
//                                    отУстановитьСвязьПолейБыстрогоОтбораНаФорме
//
Функция ОтборСвязанСДанными(ИмяЭлементаОтбора, СтруктураСвязиЭлементовСДанными) Экспорт

	Если СтруктураСвязиЭлементовСДанными.Свойство("ФлажокНастройки"+ИмяЭлементаОтбора)
		ИЛИ СтруктураСвязиЭлементовСДанными.Свойство("ПолеВидаСравнения"+ИмяЭлементаОтбора)
		ИЛИ СтруктураСвязиЭлементовСДанными.Свойство("ПолеНастройки"+ИмяЭлементаОтбора)
		ИЛИ СтруктураСвязиЭлементовСДанными.Свойство("ПолеНастройкиС"+ИмяЭлементаОтбора)
		ИЛИ СтруктураСвязиЭлементовСДанными.Свойство("ПолеНастройкиПо"+ИмяЭлементаОтбора) Тогда

		Возврат Истина;

	Иначе

		Возврат Ложь;

	КонецЕсли;

КонецФункции //отОтборСвязанСДанными()

// Процедура запоняет данными отбор из структуры.
//
// Параметры
//  Отбор - Отбор
//  СтруктураОтбора - Структура
//
Процедура ЗаполнитьОтборИзСтруктуры(Отбор, СтруктураОтбора) Экспорт

	Если ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
		Для каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
			ЗначениеЭлементаСтруктуры = ЭлементСтруктуры.Значение;
			ЭлементОтбора = Неопределено;
			Если НЕ ПустаяСтрока(ЗначениеЭлементаСтруктуры.Имя) Тогда
				ЭлементОтбора = Отбор.Найти(ЗначениеЭлементаСтруктуры.Имя);
			КонецЕсли; 
			Если ЭлементОтбора = Неопределено Тогда
				ЭлементОтбора = Отбор.Добавить(ЗначениеЭлементаСтруктуры.ПутьКДанным, ЗначениеЭлементаСтруктуры.Имя);
			КонецЕсли;
			Для каждого РеквизитОтбора Из ЗначениеЭлементаСтруктуры Цикл
				Попытка
					ЭлементОтбора[РеквизитОтбора.Ключ] = РеквизитОтбора.Значение;
				Исключение
				КонецПопытки;
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

// Процедура запоняет данными отбор из таблицы значений.
//
// Параметры
//  Отбор - Отбор
//  Таблица - ТаблицаЗначений, структурой колонок полностью повторяющая структуру отбора
//
Процедура ЗаполнитьОтборИзТаблицыЗначений(Отбор, Таблица, Знач ВызыватьИсключениеПриОшибкеУстановки = Истина) Экспорт

	Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
		
		Для каждого СтрокаТаблицы Из Таблица Цикл
			
			ЭлементОтбора = Неопределено;
			Если НЕ ПустаяСтрока(СтрокаТаблицы.Имя) Тогда
				ЭлементОтбора = Отбор.Найти(СтрокаТаблицы.Имя);
			КонецЕсли;
			
			Попытка
				
				Если ЭлементОтбора = Неопределено Тогда
				
					ЭлементОтбора = Отбор.Добавить(СтрокаТаблицы.ПутьКДанным, СтрокаТаблицы.Имя);
					
				КонецЕсли;
				
				ЭлементОтбора.ВидСравнения = СтрокаТаблицы.ВидСравнения;
				ЭлементОтбора.Использование = СтрокаТаблицы.Использование;
				
				Если СтрокаТаблицы.Значение <> Null Тогда
					ЭлементОтбора.Значение = СтрокаТаблицы.Значение;
				КонецЕсли;
				Если СтрокаТаблицы.ЗначениеС <> Null Тогда
					ЭлементОтбора.ЗначениеС = СтрокаТаблицы.ЗначениеС;
				КонецЕсли;
				Если СтрокаТаблицы.ЗначениеПо <> Null Тогда
					ЭлементОтбора.ЗначениеПо = СтрокаТаблицы.ЗначениеПо;
				КонецЕсли;
				
			Исключение
				
				Если ВызыватьИсключениеПриОшибкеУстановки Тогда
					
					ВызватьИсключение ОписаниеОшибки();
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПОРЯДКОМ

// Функция формирует строку представления порядков построителя отчетов
//
// Параметры
//  КоллекцияПорядок - Порядок, коллекция порядков построителя отчета
//
// Возвращаемое значение:
//   Строка - представление порядков построителя отчета
//
Функция СформироватьСтрокуПорядка(КоллекцияПорядок) Экспорт

	Если ТипЗнч(КоллекцияПорядок) <> Тип("Порядок") Тогда
		Возврат "";
	КонецЕсли; 
	
	СтрокаПорядка = "";
	
	Для а = 0 По КоллекцияПорядок.Количество() - 1 Цикл
		Если а > 0 Тогда
			СтрокаПорядка = СтрокаПорядка + ", ";
		КонецЕсли;
		СтрокаПорядка = СтрокаПорядка + КоллекцияПорядок[а].Представление + " " + КоллекцияПорядок[а].Направление;
	КонецЦикла;
	
	Возврат СтрокаПорядка;

КонецФункции // СформироватьСтрокуПорядка()

// Процедура обрабатывает Порядок Построителя отчета и удаляет из него те элементы порядка,
// которые не связаны с выбранными полями или измерениями.
// Это делается для несоздания ложного впечатления о том, что что-то как-то отсортировали
// в одних случаях, и для избежания ошибки времени выполнения при выполнении запроса
// в других случаях
//
// Параметры:
//	ПостроительОтчета - ПостроительОтчета, Порядок которого надо обработать
//
Процедура ПроверитьПорядокПостроителяОтчета(ПостроительОтчета) Экспорт

	КоличествоЭлементовПорядка = ПостроительОтчета.Порядок.Количество();

	Конструктор = Новый КонструкторЗапроса;

	ПопыткаПровалилась = Ложь;
	
	Если КоличествоЭлементовПорядка > 0 Тогда
		Попытка
			Конструктор.Текст = ПостроительОтчета.ПолучитьЗапрос().Текст;
		Исключение
			ПопыткаПровалилась = Истина;
		КонецПопытки;
	КонецЕсли;

	КопияПостроителя = Новый ПостроительОтчета;
	
	// Запрос оказался синтаксически неправильным...
	Попытка
		КопияПостроителя.Текст = ПостроительОтчета.Текст;// <- Здесь может произойти ошибка при исходно неправильном тексте запроса Построителя
	Исключение
		Возврат; // Ничего не делать.
	КонецПопытки;
		
	КопияПостроителя.УстановитьНастройки(ПостроительОтчета.ПолучитьНастройки(Истина, Ложь, Истина, Истина), Истина, Ложь, Истина, Истина);

	Если ПопыткаПровалилась Тогда
	
		// Побочным эффектом этой процедуры может послужить прочистка всего Порядка у
		// построителя отчета запросом, который прошел первую проверку, но имеет поля упорядочивания,
		// которые отсутствуют в выбранных полях

		Для Инд = 0 по КоличествоЭлементовПорядка - 1 Цикл
			// Это мы делаем для того, чтобы можно было бездумно удалять и переходить к следующему - 
			// обход с конца.
			ЭлементПорядка = ПостроительОтчета.Порядок[КоличествоЭлементовПорядка - 1 - Инд];
			КопияПостроителя.Порядок.Очистить();
			КопияПостроителя.Порядок.Добавить(ЭлементПорядка.ПутьКДанным);
			Попытка
				Конструктор.Текст = КопияПостроителя.ПолучитьЗапрос().Текст;
			Исключение
				ПостроительОтчета.Порядок.Удалить(КоличествоЭлементовПорядка - 1 - Инд);
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли; 

	// Теперь проверим порядки на то, что если в выбранных полях есть регистратор,
	// то для корректной работы необходимо установить порядок по периоду и самому регитстратору
	
	Если ПостроительОтчета.ВыбранныеПоля.Найти("Регистратор") <> Неопределено Тогда
		
		ЕстьРегистратор = Ложь;
		ЕстьПериод = Ложь;
		
		КоличествоЭлементовПорядка = ПостроительОтчета.Порядок.Количество();
		
		Для Инд = 0 по КоличествоЭлементовПорядка - 1 Цикл
			ЭлементПорядка = ПостроительОтчета.Порядок[КоличествоЭлементовПорядка - 1 - Инд];
			Если ЭлементПорядка.ПутьКДанным = "Регистратор" Тогда
				ЕстьРегистратор = Истина;
			КонецЕсли; 
			Если ЭлементПорядка.ПутьКДанным = "Период" Тогда
				ЕстьПериод = Истина;
			КонецЕсли; 
		КонецЦикла;
		
		Если КопияПостроителя.ДоступныеПоля.Найти("Период") <> Неопределено Тогда
			Если НЕ ЕстьПериод Тогда
				КопияПостроителя.Порядок.Очистить();
				Попытка
					КопияПостроителя.Порядок.Добавить("Период");
					Если КопияПостроителя.ВыбранныеПоля.Найти("Период") = Неопределено Тогда
						КопияПостроителя.ВыбранныеПоля.Добавить("Период");
					КонецЕсли; 
					КопияПостроителя.ВыбранныеПоля.Добавить("Период");
					Попытка
						Конструктор.Текст = КопияПостроителя.ПолучитьЗапрос().Текст;
						ПостроительОтчета.Порядок.Добавить("Период");
						Если ПостроительОтчета.ВыбранныеПоля.Найти("Период") = Неопределено Тогда
							ПостроительОтчета.ВыбранныеПоля.Вставить("Период",, 0);
						КонецЕсли; 
					Исключение
						// Ничего добавлять не будем
					КонецПопытки;
				Исключение
				КонецПопытки;
			Иначе
				Если ПостроительОтчета.ВыбранныеПоля.Найти("Период") = Неопределено Тогда
					Попытка
						ПостроительОтчета.ВыбранныеПоля.Вставить("Период",, 0);
					Исключение
					КонецПопытки;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
		
		Если КопияПостроителя.ДоступныеПоля.Найти("Регистратор") <> Неопределено Тогда
			Если НЕ ЕстьРегистратор Тогда
				КопияПостроителя.Порядок.Очистить();
				Попытка
					КопияПостроителя.Порядок.Добавить("Регистратор");
					Если КопияПостроителя.ВыбранныеПоля.Найти("Регистратор") = Неопределено Тогда
						КопияПостроителя.ВыбранныеПоля.Добавить("Регистратор");
					КонецЕсли; 
					Попытка
						Конструктор.Текст = КопияПостроителя.ПолучитьЗапрос().Текст;
						ПостроительОтчета.Порядок.Добавить("Регистратор");
					Исключение
						// Ничего добавлять не будем
					КонецПопытки;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьПорядокПостроителяОтчета()

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С КОЛОНТИТУЛАМИ

// Чтение настроек колонтитулов из константы. Если константа не заполнена, то формируются пустые настройки.
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//   Структура   – Настройки колонтитулов
//
Функция ПолучитьНастройкиКолонтитулов()

	Настройка = Константы.НастройкиКолонтитуловПоУмолчанию.Получить().Получить();
	
	Если ТипЗнч(Настройка) <> Тип("Структура") Тогда
		// Если константа не заполнена, то заполним структуру настройками пустых колонтитулов
		
		Настройка = Новый Структура;
		
		Верхний = Новый Структура;
		Нижний = Новый Структура;
		
		Верхний.Вставить("Выводить", Ложь);
		Верхний.Вставить("НачальнаяСтраница", 1);
		Верхний.Вставить("ТекстСлева",   "");
		Верхний.Вставить("ТекстВЦентре", "");
		Верхний.Вставить("ТекстСправа",  "");
		
		Нижний.Вставить("Выводить", Ложь);
		Нижний.Вставить("НачальнаяСтраница", 1);
		Нижний.Вставить("ТекстСлева",   "");
		Нижний.Вставить("ТекстВЦентре", "");
		Нижний.Вставить("ТекстСправа",  "");
		
		Настройка.Вставить("ВерхнийКолонтитул", Верхний);
		Настройка.Вставить("НижнийКолонтитул",  Нижний);
		
	Иначе
		// Если константа заполнена, но нет нужных нам полей, то заполним структуру настройками пустых колонтитулов
	
		Если Не Настройка.Свойство("ВерхнийКолонтитул") Тогда
			
			Верхний = Новый Структура;
			
			Верхний.Вставить("Выводить", Ложь);
			Верхний.Вставить("НачальнаяСтраница", 1);
			Верхний.Вставить("ТекстСлева",   "");
			Верхний.Вставить("ТекстВЦентре", "");
			Верхний.Вставить("ТекстСправа",  "");
			
			Настройка.Вставить("ВерхнийКолонтитул", Верхний);
			
		КонецЕсли;
		
		Если Не Настройка.Свойство("НижнийКолонтитул") Тогда
			
			Нижний = Новый Структура;
			
			Нижний.Вставить("Выводить", Ложь);
			Нижний.Вставить("НачальнаяСтраница", 1);
			Нижний.Вставить("ТекстСлева",   "");
			Нижний.Вставить("ТекстВЦентре", "");
			Нижний.Вставить("ТекстСправа",  "");
			
			Настройка.Вставить("НижнийКолонтитул",  Нижний);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Настройка;

КонецФункции // ПолучитьНастройкиКолонтитулов()

// Запись настроек колонтитулов в константу
//
// Параметры
//  Настройка  – Структура – Настройка колонтитулов
//
Процедура ЗаписатьНастройкиКолонтитулов(Настройка)
	
	Если ОбщегоНазначения.ПроверитьПравоДоступа(Метаданные.Константы.НастройкиКолонтитуловПоУмолчанию, "Изменение") Тогда
		Константы.НастройкиКолонтитуловПоУмолчанию.Установить(Новый ХранилищеЗначения(Настройка));
	КонецЕсли;

КонецПроцедуры // ЗаписатьНастройкиКолонтитулов()

// Проставление в тексте вместо шаблонов, значений
//
// Параметры
//  Текст           – Строка – Исходный текст шаблона
//  НазваниеОтчета  – Строка – Название отчета
//  Пользователь    – Строка – Имя пользователя
//
// Возвращаемое значение:
//   Строка   – результурующий текст для колонтитула
//
Функция ЗаполнитьТекстКолонтитула(Текст, НазваниеОтчета, Пользователь,ТабличныйДокумент=Неопределено)

	Результат = Текст;
	
	Если ТабличныйДокумент = Неопределено Тогда  // БК
		НазваниеОтчетаСтрока = НазваниеОтчета;
	Иначе // ЗУП
	
	ДлинаНазванияОтчета = СтрДлина(НазваниеОтчета);

	//определение количества символов для альбомной страницы и для портретной страницы
	КоличествоСимволов = ?(ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет, 36, 60);
	
	НазваниеОтчетаСтрока = "";
	КонечноеЗначение 	 = КоличествоСимволов;

	Если ДлинаНазванияОтчета > КонечноеЗначение Тогда
		
		Пока Сред(НазваниеОтчета, КонечноеЗначение, 1) <> " " Цикл
			КонечноеЗначение = КонечноеЗначение - 1;			
		КонецЦикла;
				
		НазваниеОтчетаСтрока = НазваниеОтчетаСтрока + Сред(НазваниеОтчета, 1, КонечноеЗначение) + Символы.ПС + Сред(НазваниеОтчета, КонечноеЗначение + 1, СтрДлина(НазваниеОтчета));
		
	Иначе
		НазваниеОтчетаСтрока = НазваниеОтчета;
	КонецЕсли;
	ТабличныйДокумент.ВерхнийКолонтитул.Шрифт = Новый Шрифт("Arial", 8);
	ТабличныйДокумент.НижнийКолонтитул.Шрифт  = Новый Шрифт("Arial", 8);

	КонецЕсли;
	
	Результат = СтрЗаменить(Результат, "[&НазваниеОтчета]", НазваниеОтчетаСтрока);
	Результат = СтрЗаменить(Результат, "[&Пользователь]", Пользователь);
	
	Возврат Результат;

КонецФункции // ЗаполнитьТекстКолонтитула()


// Установка колонтитулов для отчета
//
// Параметры
//  ТабличныйДокумент  – ТабличныйДокумент – Отчет, у которого необходимо установить колонтитулы
//  НазваниеОтчета     – Строка            – Название отчета для вывода в колонтитул
//  Пользователь       – Строка            – Имя пользователя для вывода в колонтитул
//
Процедура УстановитьКолонтитулыПоУмолчанию(ТабличныйДокумент, НазваниеОтчета, Пользователь) Экспорт
	
	Настройка = ПолучитьНастройкиКолонтитулов();
	
	ЗаголовокВерхнийКолонтитул = Ложь;	
	ЗаголовокНижнийКолонтитул  = Ложь;
	
	Если СтрЧислоВхождений(Настройка.ВерхнийКолонтитул.ТекстСлева, "[&НазваниеОтчета]")>=1 ИЛИ
			 СтрЧислоВхождений(Настройка.ВерхнийКолонтитул.ТекстВЦентре, "[&НазваниеОтчета]")>=1 ИЛИ
		 		СтрЧислоВхождений(Настройка.ВерхнийКолонтитул.ТекстСправа, "[&НазваниеОтчета]")>=1 Тогда
		 
		 ЗаголовокВерхнийКолонтитул = Истина;
		 
	КонецЕсли;
	
	Если СтрЧислоВхождений(Настройка.НижнийКолонтитул.ТекстСлева, "[&НазваниеОтчета]")>=1 ИЛИ
		 	СтрЧислоВхождений(Настройка.НижнийКолонтитул.ТекстВЦентре, "[&НазваниеОтчета]")>=1 ИЛИ
				 СтрЧислоВхождений(Настройка.НижнийКолонтитул.ТекстСправа, "[&НазваниеОтчета]")>=1 Тогда
		 
		 ЗаголовокНижнийКолонтитул = Истина;
		 
	КонецЕсли;
	
	ТабличныйДокумент.ВерхнийКолонтитул.Выводить          = Настройка.ВерхнийКолонтитул.Выводить;
	ТабличныйДокумент.ВерхнийКолонтитул.НачальнаяСтраница = Настройка.ВерхнийКолонтитул.НачальнаяСтраница;
	ТабличныйДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстСлева   = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстСлева, НазваниеОтчета, Пользователь, ТабличныйДокумент);
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстВЦентре = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстВЦентре, НазваниеОтчета, Пользователь, ТабличныйДокумент);
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстСправа  = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстСправа, НазваниеОтчета, Пользователь, ТабличныйДокумент);
	
	ТабличныйДокумент.НижнийКолонтитул.Выводить          = Настройка.НижнийКолонтитул.Выводить;
	ТабличныйДокумент.НижнийКолонтитул.НачальнаяСтраница = Настройка.НижнийКолонтитул.НачальнаяСтраница;
	ТабличныйДокумент.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ТабличныйДокумент.НижнийКолонтитул.ТекстСлева   = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстСлева, НазваниеОтчета, Пользователь, ТабличныйДокумент);
	ТабличныйДокумент.НижнийКолонтитул.ТекстВЦентре = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстВЦентре, НазваниеОтчета, Пользователь, ТабличныйДокумент);
	ТабличныйДокумент.НижнийКолонтитул.ТекстСправа  = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстСправа, НазваниеОтчета, Пользователь, ТабличныйДокумент);
	
	КоличествоСимволов = ?(ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет, 36, 60);
	
	Если СтрДлина(НазваниеОтчета) > КоличествоСимволов Тогда
		
		Если ЗаголовокВерхнийКолонтитул = Истина Тогда
			ТабличныйДокумент.ПолеСверху = 15;
		Иначе
			ТабличныйДокумент.ПолеСверху = 10;
		КонецЕсли;
		
		Если ЗаголовокНижнийКолонтитул = Истина Тогда
			ТабличныйДокумент.ПолеСнизу  = 15;
		Иначе
			ТабличныйДокумент.ПолеСнизу  = 10;
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.ПолеСверху = 10;
		ТабличныйДокумент.ПолеСнизу  = 10;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьКолонтитулы()

// Открыть форму настройки колонтитулов и по завершению работы записать настройки.
//
// Параметры
//  Нет
//
Процедура ОткрытьНастройкуКолонтитулов() Экспорт

	Настройка = ПолучитьНастройкиКолонтитулов();
	
	ФормаНастройки = ПолучитьОбщуюФорму("ФормаНастройкиКолонтитулов");
	
	Для каждого Элемент Из Настройка.ВерхнийКолонтитул Цикл
		ФормаНастройки.ВерхнийКолонтитул.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	Для каждого Элемент Из Настройка.НижнийКолонтитул Цикл
		ФормаНастройки.НижнийКолонтитул.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Результат = ФормаНастройки.ОткрытьМодально();
	Результат = ?(Результат = Неопределено, Ложь, Результат);
	
	Если Результат Тогда
		
		Для каждого Элемент Из ФормаНастройки.ВерхнийКолонтитул Цикл
			Настройка.ВерхнийКолонтитул.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
		Для каждого Элемент Из ФормаНастройки.НижнийКолонтитул Цикл
			Настройка.НижнийКолонтитул.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
		
		ЗаписатьНастройкиКолонтитулов(Настройка);
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьНастройкуКолонтитулов()

// Процедура заполняет представления элементов всех коллекций построителя отчета на
//  основании соответствия имен и представдлений переданных в параметре
//
// Параметры
//  СтруктураСоответствияИмен - Структура, ключ - имя поля, значение - представление поля
//  ПостроительОтчета         - ПостроительОтчета
//
//  Возвращаемое значение
//   НЕТ
//
Процедура ЗаполнитьПредставленияПолей(СтруктураСоответствияИмен, ПостроительОтчета) Экспорт

	СтруктураКоллекцийПостроителяОтчета = Новый Структура("ДоступныеПоля, ВыбранныеПоля, ИзмеренияКолонки, ИзмеренияСтроки, Отбор");
	
	Для каждого ЭлементСтруктуры Из СтруктураКоллекцийПостроителяОтчета Цикл
		Для а = 0 По ПостроительОтчета[ЭлементСтруктуры.Ключ].Количество() - 1 Цикл
			Если ПустаяСтрока(ПостроительОтчета[ЭлементСтруктуры.Ключ][а].Имя) Тогда
				Продолжить;
			КонецЕсли;
			Если СтруктураСоответствияИмен.Свойство(ПостроительОтчета[ЭлементСтруктуры.Ключ][а].Имя) Тогда
				ПостроительОтчета[ЭлементСтруктуры.Ключ][а].Представление = СтруктураСоответствияИмен[ПостроительОтчета[ЭлементСтруктуры.Ключ][а].Имя];
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

// Функция формирует строку представления измерений построителя отчета
//
// Параметры
//  КоллекцияИзмерений - ИзмеренияПостроителяОтчета, коллекция измерений построителя отчета
//
// Возвращаемое значение:
//   Строка - представление измерений построителя отчета
//
Функция СформироватьСтрокуИзмерений(КоллекцияИзмерений) Экспорт

	Если ТипЗнч(КоллекцияИзмерений) <> Тип("ИзмеренияПостроителяОтчета") Тогда
		Возврат "";
	КонецЕсли; 
	
	СтрокаИзмерений = "";
	
	Для а = 0 По КоллекцияИзмерений.Количество() - 1 Цикл
		Если а > 0 Тогда
			СтрокаИзмерений = СтрокаИзмерений + ", ";
		КонецЕсли;
		СтрокаИзмерений = СтрокаИзмерений + КоллекцияИзмерений[а].Представление;
	КонецЦикла;
	
	Возврат СтрокаИзмерений;

КонецФункции // СформироватьСтрокуГруппировок()

// Функция анализирует измерения Построителя Отчета и ищет среди них повторы
// Конечно же, например, возможен вывод в кросс-таблицу при одном и том же 
// измерении, встречающемся в строках и столбцах, но тогда отчет будет нечитабален
// и непонятно, зачем он вообще нужен.
//
// Параметры
//
//	ПостроительОтчета - Построитель отчета, измерения которого анализируются.
//
Функция ПроверитьПовторыИзмеренийПостроителя(ПостроительОтчета, ТолькоПовторы = Ложь) Экспорт

	Для Инд=0 По ПостроительОтчета.ИзмеренияКолонки.Количество()-1  Цикл
	
		Для Инд2=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1  Цикл

			Если ПостроительОтчета.ИзмеренияКолонки[Инд].ПутьКДанным = ПостроительОтчета.ИзмеренияСтроки[Инд2].ПутьКДанным Тогда

				#Если Клиент Тогда
				Предупреждение("Повторяющаяся группировка " + ПостроительОтчета.ИзмеренияКолонки[Инд].Представление +"."+ Символы.ПС+
				"Нельзя использовать одинаковые поля группировки в строках и в колонках!", 30);
				#КонецЕсли
				Возврат Ложь;
			
			КонецЕсли; 
		КонецЦикла;
	
	КонецЦикла;


	СписокЗначений = Новый СписокЗначений;
	
	Для Инд=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1  Цикл
		
		Если СписокЗначений.НайтиПоЗначению(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным) = Неопределено Тогда
			СписокЗначений.Добавить(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным);
		Иначе
			#Если Клиент Тогда
			Предупреждение("Повторяющаяся группировка " + ПостроительОтчета.ИзмеренияСтроки[Инд].Представление +"."+ Символы.ПС+
			"Нельзя использовать одинаковые поля группировки строк!", 30);
			#КонецЕсли
			Возврат Ложь;
			
		КонецЕсли;
		
		Если ТолькоПовторы Тогда
			Продолжить;
		КонецЕсли;

		// Если добавлялись одни и те же поля в строки и в колонки, то 
		//  у них будет неправильное автогенеренное имя, оканчивающееся на число
		ИмяИзмерения = ПостроительОтчета.ИзмеренияСтроки[Инд].Имя;

		ПоследнийСимвол = Сред(ИмяИзмерения, СтрДлина(ИмяИзмерения));

		Если ПоследнийСимвол = "1"
			ИЛИ ПоследнийСимвол = "2" 
			ИЛИ ПоследнийСимвол = "3" 
			ИЛИ ПоследнийСимвол = "4" 
			ИЛИ ПоследнийСимвол = "5" 
			ИЛИ ПоследнийСимвол = "6" 
			ИЛИ ПоследнийСимвол = "7" 
			ИЛИ ПоследнийСимвол = "8" 
			ИЛИ ПоследнийСимвол = "9" 
			ИЛИ ПоследнийСимвол = "0" Тогда
			
			// Удалим старое измерение и добавим новое

			ВремСписок = Новый СписокЗначений;
			ВремСписокИмяИзмерения = Новый СписокЗначений;
			ВремСписокТипИзмерения = Новый СписокЗначений;
			
			Пока ПостроительОтчета.ИзмеренияСтроки.КОличество() - 1 >= Инд Цикл

				СтрПутьКДанным = ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным;
				ВремСписок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Инд].ПутьКДанным);

				Если ИмяИзмерения = ПостроительОтчета.ИзмеренияСтроки[Инд].Имя Тогда //первая итерация

					ВремСписокИмяИзмерения.Добавить(Лев(ПостроительОтчета.ИзмеренияСтроки[Инд].Имя, СтрДлина(ИмяИзмерения) - 1));

				Иначе

					ВремСписокИмяИзмерения.Добавить(ПостроительОтчета.ИзмеренияСтроки[Инд].Имя);

				КонецЕсли;

				ВремСписокТипИзмерения.Добавить(ПостроительОтчета.ИзмеренияСтроки[Инд].ТипИзмерения);
				ПостроительОтчета.ИзмеренияСтроки.Удалить(ПостроительОтчета.ИзмеренияСтроки[Инд]);

			КОнецЦикла;
			Для Инд = 0 по ВремСписок.Количество() - 1 Цикл
				ПостроительОтчета.ИзмеренияСтроки.Добавить(ВремСписок[Инд].Значение, ВремСписокИмяИзмерения[Инд].Значение, ВремСписокТипИзмерения[Инд].Значение);
			КОнецЦикла;
		КонецЕсли;
		
	КонецЦикла;

	СписокЗначений = Новый СписокЗначений;
	
	Для Инд=0 По ПостроительОтчета.ИзмеренияКолонки.Количество()-1  Цикл
		
		Если СписокЗначений.НайтиПоЗначению(ПостроительОтчета.ИзмеренияКолонки[Инд].ПутьКДанным) = Неопределено Тогда
			СписокЗначений.Добавить(ПостроительОтчета.ИзмеренияКолонки[Инд].ПутьКДанным);
		Иначе
			#Если Клиент Тогда
			Предупреждение("Повторяющаяся группировка " + ПостроительОтчета.ИзмеренияКолонки[Инд].Представление +"."+ Символы.ПС+
			"Нельзя использовать одинаковые поля группировки колонок!", 30);
			#КонецЕсли
			Возврат Ложь;
			
		КонецЕсли;
		
		Если ТолькоПовторы Тогда
			Продолжить;
		КонецЕсли;

		// Если добавлялись одни и те же поля в строки и в колонки, то 
		// у них будет неправильное автогенеренное имя, оканчивающееся на число
		ИмяИзмерения = ПостроительОтчета.ИзмеренияКолонки[Инд].Имя;

		ПоследнийСимвол = Сред(ИмяИзмерения, СтрДлина(ИмяИзмерения));

		Если ПоследнийСимвол = "1"
			ИЛИ ПоследнийСимвол = "2" 
			ИЛИ ПоследнийСимвол = "3" 
			ИЛИ ПоследнийСимвол = "4" 
			ИЛИ ПоследнийСимвол = "5" 
			ИЛИ ПоследнийСимвол = "6" 
			ИЛИ ПоследнийСимвол = "7" 
			ИЛИ ПоследнийСимвол = "8" 
			ИЛИ ПоследнийСимвол = "9" 
			ИЛИ ПоследнийСимвол = "0" Тогда

			// Удалим старое измерение и добавим новое

			ВремСписок = Новый СписокЗначений;
			ВремСписокИмяИзмерения = Новый СписокЗначений;
			ВремСписокТипИзмерения = Новый СписокЗначений;
			
			Пока ПостроительОтчета.ИзмеренияКолонки.КОличество() - 1 >= Инд Цикл
				СтрПутьКДанным = ПостроительОтчета.ИзмеренияКолонки[Инд].ПутьКДанным;
				ВремСписок.Добавить(ПостроительОтчета.ИзмеренияКолонки[Инд].ПутьКДанным);

				Если ИмяИзмерения = ПостроительОтчета.ИзмеренияКолонки[Инд].Имя Тогда //первая итерация

					ВремСписокИмяИзмерения.Добавить(Лев(ПостроительОтчета.ИзмеренияКолонки[Инд].Имя, СтрДлина(ИмяИзмерения) - 1));

				Иначе

					ВремСписокИмяИзмерения.Добавить(ПостроительОтчета.ИзмеренияКолонки[Инд].Имя);

				КонецЕсли;

				ВремСписокТипИзмерения.Добавить(ПостроительОтчета.ИзмеренияКолонки[Инд].ТипИзмерения);
				ПостроительОтчета.ИзмеренияКолонки.Удалить(ПостроительОтчета.ИзмеренияКолонки[Инд]);
			КОнецЦикла;
			Для Инд = 0 по ВремСписок.Количество() - 1 Цикл
				ПостроительОтчета.ИзмеренияКолонки.Добавить(ВремСписок[Инд].Значение, ВремСписокИмяИзмерения[Инд].Значение, ВремСписокТипИзмерения[Инд].Значение);
			КОнецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

КонецФункции

// Удаляет автоматически добавляемые Построителем при инициализации дополнительные поля с измерениями
//
// Параметры:
//	нет
//
Процедура ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета) Экспорт

	Сч=0;
	Пока Сч<ПостроительОтчета.ВыбранныеПоля.Количество() Цикл

		Если ПостроительОтчета.ИзмеренияСтроки.Найти(ПостроительОтчета.ВыбранныеПоля[Сч].Имя)<>Неопределено Тогда

			ПостроительОтчета.ВыбранныеПоля.Удалить(ПостроительОтчета.ВыбранныеПоля[Сч]);

		ИначеЕсли ПостроительОтчета.ИзмеренияКолонки.Найти(ПостроительОтчета.ВыбранныеПоля[Сч].Имя)<>Неопределено Тогда

			ПостроительОтчета.ВыбранныеПоля.Удалить(ПостроительОтчета.ВыбранныеПоля[Сч]);
			
		Иначе

			Сч=Сч+1;

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура добавляет показатель в выбранные поля. Вызывается перед выполнением запроса.
// 
// Параметры:
//	ИмяПоляПостроителя - строка, идентификатор поля построителя
//	ПостроительОтчета  - Построитель отчета
//
Процедура ОбработкаПоказателейДобавитьВВыбранныеПоля(ИмяПоляПостроителя, ПостроительОтчета) Экспорт
	
	ПостроительОтчета.ДоступныеПоля.Найти(ИмяПоляПостроителя).Поле = Истина;
	
	ВыбранноеПолеПоказателя = ПостроительОтчета.ВыбранныеПоля.Найти(ИмяПоляПостроителя);
	
	Если ВыбранноеПолеПоказателя = Неопределено Тогда
		ВыбранноеПолеПоказателя = ПостроительОтчета.ВыбранныеПоля.Добавить(ИмяПоляПостроителя, ИмяПоляПостроителя);
	КонецЕсли;
	
	ВыбранноеПолеПоказателя.Представление = ПостроительОтчета.ДоступныеПоля.Найти(ИмяПоляПостроителя).Представление;
	
КонецПроцедуры

// Процедура делает показатель недоступным для выбора как поле, удаляет из выбранных полей
// Вызывается после формирования отчета.
// 
// Параметры:
//	ИмяПоляПостроителя - строка, идентификатор поля построителя
//	ПостроительОтчета  - Построитель отчета
//
Процедура ОбработкаПоказателейУдалитьИзДоступныхПолей(ИмяПоляПостроителя, ПостроительОтчета) Экспорт
	
	Представление = "";
	
	ВыбранноеПоле = ПостроительОтчета.ВыбранныеПоля.Найти(ИмяПоляПостроителя);
	Если ВыбранноеПоле<>Неопределено Тогда
		ПостроительОтчета.ВыбранныеПоля.Удалить(ВыбранноеПоле);
	КонецЕсли;
	
	ДоступноеПоле = ПостроительОтчета.ДоступныеПоля.Найти(ИмяПоляПостроителя);
	Если ДоступноеПоле<>Неопределено Тогда
		Представление = ДоступноеПоле.Представление;
		ТипЗначения = ДоступноеПоле.ТипЗначения;
		ПостроительОтчета.ДоступныеПоля.Удалить(ДоступноеПоле);
	Иначе
		возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Представление) Тогда

		Представление = ИмяПоляПостроителя;

	КонецЕсли;

	Поле = ПостроительОтчета.ДоступныеПоля.Добавить(ИмяПоляПостроителя, Представление, ТипЗначения);
	Поле.Порядок = Истина;
	
КонецПроцедуры

// Формирует список допустимых значений Вида Сравнения
//
// Параметры: 
//	ОпТипов - Описание Типов поля
//
// Возвращаемое значение: 
//	список значений, содержащийимена всех регистров остатков
//
Функция ПолучитьСписокВидовСравненияПоТипу(ОпТипов) Экспорт
	
	ТаблицаДоступныхЗначений = Новый ТаблицаЗначений;
	ТаблицаДоступныхЗначений.Колонки.Добавить("ВидСравнения");
	ТаблицаДоступныхЗначений.Колонки.Добавить("ЧислоВида");
	
	Для каждого ТипОписания Из ОпТипов.Типы() Цикл
	
		НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
		НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.Равно;
		НоваяСтрокаТаблицы.ЧислоВида = 1;
		
		НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
		НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.НеРавно;
		НоваяСтрокаТаблицы.ЧислоВида = 1;
		
		НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
		НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.ВСписке;
		НоваяСтрокаТаблицы.ЧислоВида = 1;
		
		НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
		НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.НеВСписке;
		НоваяСтрокаТаблицы.ЧислоВида = 1;

		Если Справочники.ТипВсеСсылки().СодержитТип(ТипОписания) И Метаданные.НайтиПоТипу(ТипОписания).Иерархический Тогда
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.ВИерархии;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.НеВИерархии;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
		ИначеЕсли ТипОписания = Тип("Число")
			  ИЛИ ТипОписания = Тип("Строка")
			  ИЛИ ТипОписания = Тип("Дата") Тогда
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.Больше;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.БольшеИлиРавно;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.Меньше;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.Интервал;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
		КонецЕсли;
		
		Если ТипОписания = Тип("Строка") Тогда
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.Содержит;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДоступныхЗначений.Свернуть("ВидСравнения", "ЧислоВида");
	
	СписокВидовСравнения = Новый СписокЗначений;
	КолТипов = ОпТипов.Типы().Количество();
	
	Для каждого СтрокаТаблицы Из ТаблицаДоступныхЗначений Цикл
		Если СтрокаТаблицы.ЧислоВида = КолТипов Тогда
			СписокВидовСравнения.Добавить(СтрокаТаблицы.ВидСравнения);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат СписокВидовСравнения;
	
Конецфункции // ПолучитьСписокРегистровОстатков()

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ РЕГИСТРОВ В ОТЧЕТАХ

// Процедура заполнения начальных настроек по метаданным для универсального отчета или отчета на базе универсального
Процедура ЗаполнитьНачальныеНастройкиПоМетаданнымРегистра(СтруктураПредставлениеПолей, МассивОтбора, Контекст, ТипОтчета) Экспорт

	ИмяРегистра = Контекст.ИмяРегистра;
	ПостроительОтчета = Контекст.ПостроительОтчета;

	МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
	Если МетаданныеРегистра = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 

	ИспользоватьСвойстваИКатегории = Ложь;
	Если Контекст.Метаданные().Реквизиты.Найти("ИспользоватьСвойстваИКатегории") <> Неопределено Тогда
		ИспользоватьСвойстваИКатегории = Контекст.ИспользоватьСвойстваИКатегории;
	КонецЕсли;
	
	ЕстьПВХНазначенияСвойствКатегорийОбъектов = Метаданные.ПланыВидовХарактеристик.Найти("НазначенияСвойствКатегорийОбъектов") <> Неопределено;

	ТекстПоляЗапроса = "";
	ТекстПоляИтоговЗапроса = "";
	ТекстПоляПоказатели = "";
	ТекстПоляИтогов = "";
	ТекстВыводимыеПоляЗапроса = "";
	ТекстПоляУпорядочивания = "";
	ТекстПоляИзмерений = "";

	ТекстВыводимыеПоляПериоды = "";
	ТекстПоляИтоговПериоды = "";

	ТекстИсточникиСведений ="";
	ТекстПоляКатегорий = "";
	ТекстПоляГруппировки = "";

	МассивИзмеренийКолонки = Новый Массив;
	
	МассивВыбранныеПоляПоУмолчанию = Новый Массив;
	
	МассивИзмеренияСтрокиПоУмолчанию = Новый Массив;

	Если НЕ ЗначениеЗаполнено(Контекст.мНазваниеОтчета) И Не ПустаяСтрока(ИмяРегистра) Тогда

		Контекст.мНазваниеОтчета = Метаданные.РегистрыНакопления[ИмяРегистра].Представление() + ?(ТипОтчета = "ОстаткиИОбороты", ": остатки и обороты", "");

	КонецЕсли; 

	ВидРегистра = Метаданные.РегистрыНакопления[ИмяРегистра].ВидРегистра;
	
	ЕстьИнформацияОГородеИОбласти = ?(Метаданные.РегистрыНакопления[ИмяРегистра].Измерения.Найти("Контрагент")<>Неопределено,Истина,Ложь);

	Если ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
		ТипПоляРегистра="Остаток";

		// Отчеты по остаткам - на дату
		
		Если ТипОтчета = "СписокКроссТаблица" Тогда
			Контекст.мРежимВводаПериода = 1;
		КонецЕсли;
		
	ИначеЕсли ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
		ТипПоляРегистра="Оборот";

		Если ТипОтчета = "СписокКроссТаблица" Тогда 
			Контекст.мРежимВводаПериода = 0;
		КонецЕсли;
		
	КонецЕсли;

	Для Инд = 0 По МетаданныеРегистра.Ресурсы.Количество()-1 Цикл

		Ресурс = МетаданныеРегистра.Ресурсы[Инд];
		
		Если Лев(Ресурс.Имя, 7) = "Удалить" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ИмяПоля           = Ресурс.Имя;
		ПредставлениеПоля = Ресурс.Представление();
		ОписаниеПоля      = Ресурс.Имя+"#";
		ВклПоУмолчанию    = Истина;
		ФорматнаяСтрока   = "ЧЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.Разрядность, "ЧГ=0") + " ; ЧДЦ = " + Формат(Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти, "ЧГ=0");
		СтрИзмерения      = "";
		СтдВалюта         = "";

		Если ТипОтчета = "СписокКроссТаблица" Тогда
			Контекст.мСтруктураСвязиПоказателейИИзмерений.Вставить(ИмяПоля, Новый Структура(СтрИзмерения));
		КонецЕсли;

		Если ПустаяСтрока(ОписаниеПоля) Тогда
			ОписаниеПоля = ИмяПоля;
		КонецЕсли;

		Если (ТипОтчета = "СписокКроссТаблица") ИЛИ (ТипОтчета = "Диаграмма") Тогда
			ТекстПоляПоказатели = ТекстПоляПоказатели + ",
			|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", ТипПоляРегистра) + " КАК " + ИмяПоля;

			ТекстПоляИтоговЗапроса = ТекстПоляИтоговЗапроса + ",
			|	СУММА(" + ИмяПоля + ")";

			ТекстПоляУпорядочивания = ТекстПоляУпорядочивания + ",
			|	" + ИмяПоля;

			СтруктураПредставлениеПолей.Вставить(ИмяПоля, ПредставлениеПоля);
		ИначеЕсли ТипОтчета = "ОстаткиИОбороты" Тогда
			ТекстПоляПоказатели = ТекстПоляПоказатели + ",
			|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "НачальныйОстаток") + " КАК " + ИмяПоля + "НачальныйОстаток,
			|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "КонечныйОстаток")  + " КАК " + ИмяПоля + "КонечныйОстаток,
			|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "Приход") 		  + " КАК " + ИмяПоля + "Приход,
			|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "Расход") 		  + " КАК " + ИмяПоля + "Расход";

			ТекстПоляИтоговЗапроса = ТекстПоляИтоговЗапроса + ",
			|	СУММА(" + ИмяПоля + "НачальныйОстаток),
			|	СУММА(" + ИмяПоля + "КонечныйОстаток),
			|	СУММА(" + ИмяПоля + "Приход),
			|	СУММА(" + ИмяПоля + "Расход)";

			ТекстПоляУпорядочивания = ТекстПоляУпорядочивания + ",
			|	" + ИмяПоля + "НачальныйОстаток,
			|	" + ИмяПоля + "КонечныйОстаток,
			|	" + ИмяПоля + "Приход,
			|	" + ИмяПоля + "Расход";

			СтруктураПредставлениеПолей.Вставить(ИмяПоля+"НачальныйОстаток", ПредставлениеПоля + " нач.ост.");
			СтруктураПредставлениеПолей.Вставить(ИмяПоля+"КонечныйОстаток", ПредставлениеПоля + " кон.ост." );
			СтруктураПредставлениеПолей.Вставить(ИмяПоля+"Приход", ПредставлениеПоля+" приход");
			СтруктураПредставлениеПолей.Вставить(ИмяПоля+"Расход", ПредставлениеПоля+" расход");
		КонецЕсли;
		// Показатели заносятся в специальную таблицу 
		СтрПоказатели = Контекст.мТаблицаПоказатели.Добавить();
		СтрПоказатели.ИмяПоля           = ИмяПоля;
		СтрПоказатели.ПредставлениеПоля = ПредставлениеПоля;
		СтрПоказатели.ФорматнаяСтрока   = ФорматнаяСтрока;

		// ... и добавляются в список
		Показатель = Контекст.Показатели.Добавить();
		Показатель.Имя           = ИмяПоля;
		Показатель.Представление = ПредставлениеПоля;
		Показатель.Использование = ВклПоУмолчанию;

	КонецЦикла;

	Если ТипОтчета = "СписокКроссТаблица" Тогда
		Контекст.ВыводитьПоказателиВСтроку=Истина;
	КонецЕсли;

	ТаблицаПолей = Новый ТаблицаЗначений;
	ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и
	                                               // категории. Используется в условии соединения с регистром сведений,
	                                               // хранящим значения свойств или категорий
	ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
	ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
//	ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории.
	                                               // Не используется.
	ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта

	Для Инд = 0 По МетаданныеРегистра.Измерения.Количество()-1 Цикл

		Измерение = МетаданныеРегистра.Измерения[Инд];
		
		Если Лев(Измерение.Имя, 7) = "Удалить" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ИмяПоля           = Измерение.Имя;
		ПредставлениеПоля = Измерение.Представление();
		ОписаниеПоля      = Измерение.Имя;

		Если (ТипОтчета <> "Диаграмма") Тогда
			РассчитыватьИтогиПоИерархии = Истина;
			РассчитыватьИтоги = ?(Инд<1, Истина, Ложь);
			ВклПоУмолчанию    = Истина;
		Иначе
			РассчитыватьИтогиПоИерархии = Ложь;
			// По умолчанию в отчете группировки и выбранные поля - по трем первым измерениям
			ВклПоУмолчанию    = ?(Инд<1, Истина, Ложь);
			РассчитыватьИтоги = ?(Инд<1, Истина, Ложь);
		КонецЕсли;

		ИтогВКолонке      = Ложь;

		ВклВОтбор    = Истина;

		Если ПустаяСтрока(ОписаниеПоля) И (ТипОтчета <> "Диаграмма") Тогда
			ОписаниеПоля = ИмяПоля;
		КонецЕсли;

		// Для итогов
		ТекстПоляИтогов = ТекстПоляИтогов + ",
		|	" + ОписаниеПоля + ".* КАК " + ИмяПоля;

		// Для списка всех полей
		ТекстВыводимыеПоляЗапроса = ТекстВыводимыеПоляЗапроса + ",
		|	" + ОписаниеПоля + ".* КАК " + ИмяПоля;

		Если ВклПоУмолчанию Тогда // добавим сразу в список полей

			МассивВыбранныеПоляПоУмолчанию.Добавить(ИмяПоля);

			Если РассчитыватьИтоги Тогда // добавим сразу в итоги
				
				МассивИзмеренияСтрокиПоУмолчанию.Добавить(ИмяПоля);

			КонецЕсли;

			Если ИтогВКолонке Тогда
				МассивИзмеренийКолонки.Добавить(ИмяПоля);
			КонецЕсли;

		КонецЕсли; 

		Если ВклВОтбор Тогда

			МассивОтбора.Добавить(ИмяПоля);

		КонецЕсли;

		СтруктураПредставлениеПолей.Вставить(ИмяПоля, ПредставлениеПоля);

		Тип0 = Измерение.Тип.Типы().Получить(0);

		// Ссылочные типы, для которых могут задаваться пользовательские свойства и категории
		Если ЕстьПВХНазначенияСвойствКатегорийОбъектов Тогда
			Если Измерение.Тип.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
				Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
			ИначеЕсли Измерение.Тип.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
				Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;
			ИначеЕсли Измерение.Тип.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
				Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Склады;
			ИначеЕсли Метаданные.Справочники.Найти("ДолжностиОрганизаций")<>Неопределено И Измерение.Тип.СодержитТип(Тип("СправочникСсылка.ДолжностиОрганизаций")) Тогда
				Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДолжностиОрганизаций;
			ИначеЕсли Метаданные.Справочники.Найти("ОсновныеСредства")<>Неопределено И Измерение.Тип.СодержитТип(Тип("СправочникСсылка.ОсновныеСредства")) Тогда
				Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ОсновныеСредства;				
			ИначеЕсли Метаданные.Справочники.Найти("НоменклатурныеГруппы")<>Неопределено И Измерение.Тип.СодержитТип(Тип("СправочникСсылка.НоменклатурныеГруппы")) Тогда
				Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_НоменклатурныеГруппы;				
			ИначеЕсли Метаданные.Справочники.Найти("Организации")<>Неопределено И Измерение.Тип.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
				Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации;
			ИначеЕсли Метаданные.Справочники.Найти("ПодразделенияОрганизаций")<>Неопределено И Измерение.Тип.СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
				Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ПодразделенияОрганизаций;
			ИначеЕсли Измерение.Тип.СодержитТип(Тип("СправочникСсылка.СотрудникиОрганизаций")) Тогда
				Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_СотрудникиОрганизаций;
			ИначеЕсли Метаданные.Справочники.Найти("ХарактеристикиНоменклатуры")<>Неопределено И Измерение.Тип.СодержитТип(Тип("СправочникСсылка.ХарактеристикиНоменклатуры")) Тогда
				Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;
			ИначеЕсли Измерение.Тип.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) Тогда
				Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица;
			ИначеЕсли Метаданные.Справочники.Найти("СтатьиЗатрат")<>Неопределено И Измерение.Тип.СодержитТип(Тип("СправочникСсылка.СтатьиЗатрат")) Тогда
				Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_СтатьиЗатрат;
			ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип0) Тогда
				Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
			Иначе
				Назначение = Неопределено;
			КонецЕсли;
			
		Иначе
			Назначение = Неопределено;
		КонецЕсли;

		Индекс = Инд;            
		
		Если ИспользоватьСвойстваИКатегории И Назначение <> Неопределено Тогда

			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.ПутьКДанным = ОписаниеПоля;
			НоваяСтрока.Представление = ПредставлениеПоля;
			НоваяСтрока.Назначение = Назначение;

		КонецЕсли;

	КонецЦикла;

	ТекстПоляГде = Сред(ТекстВыводимыеПоляЗапроса, 2);

	// Предопределенные группировки по стандартным периодам

	Если (ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты И ((ТипОтчета = "СписокКроссТаблица") ИЛИ (ТипОтчета = "Диаграмма"))) или (ТипОтчета = "ОстаткиИОбороты") Тогда

		// Для списка всех полей
		ТекстПоляИтоговПериоды = ТекстПоляИтоговПериоды + ",
		|	НачалоПериода(Период, День) КАК ПериодДень ,
		|	НачалоПериода(Период, Неделя) КАК ПериодНеделя ,
		|	НачалоПериода(Период, Декада) КАК ПериодДекада ,
		|	НачалоПериода(Период, Месяц) КАК ПериодМесяц ,
		|	НачалоПериода(Период, Квартал) КАК ПериодКвартал ,
		|	НачалоПериода(Период, Полугодие) КАК ПериодПолугодие ,
		|	НачалоПериода(Период, Год) КАК ПериодГод";

		ТекстВыводимыеПоляПериоды = ТекстВыводимыеПоляПериоды + ",
		|	НачалоПериода(Период, День) КАК ПериодДень ,
		|	НачалоПериода(Период, Неделя) КАК ПериодНеделя ,
		|	НачалоПериода(Период, Декада) КАК ПериодДекада ,
		|	НачалоПериода(Период, Месяц) КАК ПериодМесяц ,
		|	НачалоПериода(Период, Квартал) КАК ПериодКвартал ,
		|	НачалоПериода(Период, Полугодие) КАК ПериодПолугодие ,
		|	НачалоПериода(Период, Год) КАК ПериодГод";

		СтруктураПредставлениеПолей.Вставить("Период", "Период");
		СтруктураПредставлениеПолей.Вставить("ПериодДень", "По дням");
		СтруктураПредставлениеПолей.Вставить("ПериодНеделя", "По неделям");
		СтруктураПредставлениеПолей.Вставить("ПериодДекада", "По декадам");
		СтруктураПредставлениеПолей.Вставить("ПериодМесяц", "По месяцам");
		СтруктураПредставлениеПолей.Вставить("ПериодКвартал", "По кварталам");
		СтруктураПредставлениеПолей.Вставить("ПериодПолугодие", "По полугодиям");
		СтруктураПредставлениеПолей.Вставить("ПериодГод", "По годам");

		// Для списка всех полей
		ТекстВыводимыеПоляЗапроса = ТекстВыводимыеПоляЗапроса + ",
		|	Период ,
		|	Регистратор.* КАК Регистратор";

		СтруктураПредставлениеПолей.Вставить("Регистратор", "Документ движения (Регистратор)");
	КонецЕсли;

	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ //РАЗЛИЧНЫЕ" 
	+ Сред(ТекстПоляЗапроса + ТекстПоляПоказатели,2) 
	+ Символы.ПС + "{ВЫБРАТЬ " + Сред(ТекстВыводимыеПоляЗапроса+ТекстПоляПоказатели+"
	| //ОБЛАСТЬ_ГОРОД: ПОЛЯ
	|	//СВОЙСТВА
	|"+ТекстВыводимыеПоляПериоды, 2) + "}"
	;
	
	Если (ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты И ((ТипОтчета = "СписокКроссТаблица") ИЛИ (ТипОтчета = "Диаграмма"))) Тогда
		Текст =  Текст +
		"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".Обороты(&ДатаНач, &ДатаКон, {&Периодичность}, ";

		СтруктураПредставлениеПолей.Вставить("Периодичность", "Периодичность разворота итогов");

	ИначеЕсли (ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки И ((ТипОтчета = "СписокКроссТаблица") ИЛИ (ТипОтчета = "Диаграмма"))) Тогда
		Текст =  Текст +
		"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".Остатки(&ДатаКон, ";
	ИначеЕсли ТипОтчета = "ОстаткиИОбороты" Тогда
		Текст = Текст+
		"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".ОстаткиИОбороты(&ДатаНач, &ДатаКон, {&Периодичность}, , ";
	
		СтруктураПредставлениеПолей.Вставить("Периодичность", "Периодичность разворота итогов");
	КонецЕсли;

	Текст = Текст + "{"+ ТекстПоляГде + "}) КАК ТаблицаРегистра
	|//ОБЛАСТЬ_ГОРОД: СОЕДИНЕНИЯ
	|//СОЕДИНЕНИЯ";

	Текст = Текст + ТекстИсточникиСведений;

	Если Не ПустаяСтрока(ТекстПоляГруппировки) Тогда

		Текст = Текст + Символы.ПС + "СГРУППИРОВАТЬ ПО " + Сред(ТекстПоляГруппировки, 2)+"
		|//СГРУППИРОВАТЬПО";

	КонецЕсли; 

	// Отбор
	Текст = Текст + Символы.ПС + "{ГДЕ " + Сред(ТекстВыводимыеПоляЗапроса, 2) + "
	|//ОБЛАСТЬ_ГОРОД: ПОЛЯ
	|//СВОЙСТВА
	|//КАТЕГОРИИ
	|}";

	// Порядок
	Текст = Текст + Символы.ПС + "{УПОРЯДОЧИТЬ ПО " + Сред(ТекстВыводимыеПоляЗапроса + ТекстПоляУпорядочивания, 2) + "
	|//ОБЛАСТЬ_ГОРОД: ПОЛЯ
	|//СВОЙСТВА
	|}";

	Если Не ПустаяСтрока(ТекстПоляИтогов) Тогда 
		Текст = Текст + Символы.ПС +  
		"{ИТОГИ ПО " + Сред(ТекстПоляИтогов+ТекстПоляИтоговПериоды, 2) + "
		|//ОБЛАСТЬ_ГОРОД: ПОЛЯ
		|//СВОЙСТВА
		|}";
	КонецЕсли;

	Текст = Текст + Символы.ПС +  
	"ИТОГИ  " + Сред(ТекстПоляИтоговЗапроса, 2) + Символы.ПС + 
	"ПО ОБЩИЕ " + ТекстПоляИзмерений;

	// Автоупорядочивание
	Текст = Текст + Символы.ПС + "АВТОУПОРЯДОЧИВАНИЕ ";
	
	ТекстПоляКатегорий = "";
	ТекстПоляСвойств = "";

	Если Метаданные.РегистрыСведений.Найти("ИсчислениеНалоговСтруктурныхЕдиниц") <> Неопределено Тогда
		// Дополнительные поля для регистров налогового учета
		ТекстПоляНалоговогоУчета = "";
		ТекстСоединенияНалоговогоУчета = "";
		
		ТекстИсчислениеНалоговСтруктурныхЕдиниц = "
		|ВЫБРАТЬ
		|	Организации.Ссылка КАК ВспомогательнаяСтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА НЕ(ИсчислениеНалогов.НалоговыйКомитет ЕСТЬ NULL)
		|				И ИсчислениеНалогов.НалоговыйКомитет <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ИсчислениеНалогов.НалоговыйКомитет
		|		ИНАЧЕ Организации.НалоговыйКомитет
		|	КОНЕЦ КАК НалоговыйКомитет
		|ИЗ
		|	Справочник.Организации КАК Организации
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов
		|		ПО Организации.Ссылка = ИсчислениеНалогов.СтруктурнаяЕдиница
		|			И ИсчислениеНалогов.РазделНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.РазделыНалоговогоУчета.<РазделНУ>)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК ВспомогательнаяСтруктурнаяЕдиница,
		|	ВЫБОР
		|		КОГДА ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением 
		|			ТОГДА ВЫБОР
		|					КОГДА НЕ(ИсчислениеНалогов_Подр.НалоговыйКомитет ЕСТЬ NULL)
		|							И ИсчислениеНалогов_Подр.НалоговыйКомитет <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|						ТОГДА ИсчислениеНалогов_Подр.НалоговыйКомитет
		|					КОГДА НЕ(ИсчислениеНалогов_Орг.НалоговыйКомитет ЕСТЬ NULL)
		|							И ИсчислениеНалогов_Орг.НалоговыйКомитет <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|						ТОГДА ИсчислениеНалогов_Орг.НалоговыйКомитет
		|					ИНАЧЕ ПодразделенияОрганизаций.Владелец.НалоговыйКомитет
		|				  КОНЕЦ
		|		КОГДА НЕ(ИсчислениеНалогов_Орг.НалоговыйКомитет ЕСТЬ NULL)
		|				И ИсчислениеНалогов_Орг.НалоговыйКомитет <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ИсчислениеНалогов_Орг.НалоговыйКомитет
		|		ИНАЧЕ ПодразделенияОрганизаций.Владелец.НалоговыйКомитет
		|	КОНЕЦ КАК НалоговыйКомитет
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов_Подр
		|		ПО ПодразделенияОрганизаций.Ссылка = ИсчислениеНалогов_Подр.СтруктурнаяЕдиница
		|			И ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением
		|			И ИсчислениеНалогов_Подр.РазделНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.РазделыНалоговогоУчета.<РазделНУ>)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалогов_Орг
		|		ПО ПодразделенияОрганизаций.Владелец = ИсчислениеНалогов_Орг.СтруктурнаяЕдиница
		|			И ИсчислениеНалогов_Орг.РазделНалоговогоУчета = ЗНАЧЕНИЕ(Перечисление.РазделыНалоговогоУчета.<РазделНУ>)
		|";
		
		Если ИмяРегистра = "Акциз" Тогда
			
			ТекстПоляНалоговогоУчета = ",
			|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет.* КАК НалоговыйКомитет,
			|	КодыСтрокДекларацииПоАкцизу.КодСтроки КАК КодСтрокиДекларации";
			
			ТекстСоединенияНалоговогоУчета = "
			|	{ЛЕВОЕ СОЕДИНЕНИЕ (" + СтрЗаменить(ТекстИсчислениеНалоговСтруктурныхЕдиниц, "<РазделНУ>", "Акциз") + ") КАК ИсчислениеНалоговСтруктурныхЕдиниц
			|		ПО ТаблицаРегистра.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.ВспомогательнаяСтруктурнаяЕдиница
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|							ВидОперации КАК ВспомогательныйВидОперации,
			|							ВидТМЗ,
			|							КодСтроки
			|						ИЗ
			|							РегистрСведений.КодыСтрокДекларацииПоАкцизу.СрезПоследних(&ДатаКон) КАК КодыСтрокДекларацииПоАкцизу) КАК КодыСтрокДекларацииПоАкцизу
			|		ПО ТаблицаРегистра.ТМЗ.ВидПодакцизногоТМЗ = КодыСтрокДекларацииПоАкцизу.ВидТМЗ
			|			И ТаблицаРегистра.ВидОперации = КодыСтрокДекларацииПоАкцизу.ВспомогательныйВидОперации}";
			
			СтруктураПредставлениеПолей.Вставить("НалоговыйКомитет", "Налоговый комитет");
			СтруктураПредставлениеПолей.Вставить("КодСтрокиДекларации", "Код строки декларации");
			
			// включаем в выбранные поля и в отбор по умолчанию
			МассивВыбранныеПоляПоУмолчанию.Добавить("НалоговыйКомитет");
			МассивВыбранныеПоляПоУмолчанию.Добавить("КодСтрокиДекларации");
			
			МассивОтбора.Добавить("НалоговыйКомитет");
			МассивОтбора.Добавить("КодСтрокиДекларации");
			
		ИначеЕсли ИмяРегистра = "ВзаиморасчетыОрганизацийСКонтрагентамиФизЛицами"
			Или ИмяРегистра = "ВзаиморасчетыОрганизацийСПолучателямиИЛ"
			Или ИмяРегистра = "ВзаиморасчетыСДепонентамиОрганизаций"
			Или ИмяРегистра = "ВзаиморасчетыСРаботникамиОрганизаций"
			Или ИмяРегистра = "ВыплаченныеДоходыРаботникамОрганизацийНУ"
			Или ИмяРегистра = "ИПНРасчетыСБюджетом"
			Или ИмяРегистра = "ИПНСведенияОДоходах"
			Или ИмяРегистра = "ОПВПодлежитПеречислениюВФонды"
			Или ИмяРегистра = "ОПВРасчетыСФондами"
			Или ИмяРегистра = "ОПВСведенияОДоходах"
			Или ИмяРегистра = "СНИсчисленный"
			Или ИмяРегистра = "СОРасчетыСФондами"
			Или ИмяРегистра = "СОСведенияОДоходах" Тогда
			
			ТекстПоляНалоговогоУчета = ",
			|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет.* КАК НалоговыйКомитет";
			
			ТекстСоединенияНалоговогоУчета = "
			|	{ЛЕВОЕ СОЕДИНЕНИЕ (" + СтрЗаменить(ТекстИсчислениеНалоговСтруктурныхЕдиниц, "<РазделНУ>", "НалогиСЗаработнойПлаты") + ") КАК ИсчислениеНалоговСтруктурныхЕдиниц
			|		ПО ТаблицаРегистра.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.ВспомогательнаяСтруктурнаяЕдиница}";
			
			СтруктураПредставлениеПолей.Вставить("НалоговыйКомитет", "Налоговый комитет");
			
			// включаем в выбранные поля и в отбор по умолчанию
			МассивВыбранныеПоляПоУмолчанию.Добавить("НалоговыйКомитет");
			
			МассивОтбора.Добавить("НалоговыйКомитет");
			
		ИначеЕсли ИмяРегистра = "СНСведенияОДоходах" Тогда
			
			ТекстПоляНалоговогоУчета = ",
			|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет.* КАК НалоговыйКомитет,
			|	КодыСтрокДекларацииПоСН.КодСтроки КАК КодСтрокиДекларации";
			
			ТекстСоединенияНалоговогоУчета = "
			|	{ЛЕВОЕ СОЕДИНЕНИЕ (" + СтрЗаменить(ТекстИсчислениеНалоговСтруктурныхЕдиниц, "<РазделНУ>", "НалогиСЗаработнойПлаты") + ") КАК ИсчислениеНалоговСтруктурныхЕдиниц
			|		ПО ТаблицаРегистра.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.ВспомогательнаяСтруктурнаяЕдиница
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|							ВидРасчета КАК ВспомогательныйВидРасчета,
			|							КодСтроки
			|						ИЗ
			|							РегистрСведений.КодыСтрокДекларацииПоСН.СрезПоследних(&ДатаКон) КАК КодыСтрокДекларацииПоСН) КАК КодыСтрокДекларацииПоСН
			|		ПО ТаблицаРегистра.ВидРасчета = КодыСтрокДекларацииПоСН.ВспомогательныйВидРасчета}";
			
			СтруктураПредставлениеПолей.Вставить("НалоговыйКомитет", "Налоговый комитет");
			СтруктураПредставлениеПолей.Вставить("КодСтрокиДекларации", "Код строки декларации");
			
			// включаем в выбранные поля и в отбор по умолчанию
			МассивВыбранныеПоляПоУмолчанию.Добавить("НалоговыйКомитет");
			МассивВыбранныеПоляПоУмолчанию.Добавить("КодСтрокиДекларации");
			
			МассивОтбора.Добавить("НалоговыйКомитет");
			МассивОтбора.Добавить("КодСтрокиДекларации");
			
		ИначеЕсли ИмяРегистра = "КорректировкаНДС" Тогда
			
			ТекстПоляНалоговогоУчета = ",
			|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет.* КАК НалоговыйКомитет,
			|	КодыСтрокДекларацииПоНДС.КодСтроки КАК КодСтрокиДекларации";
			
			ТекстСоединенияНалоговогоУчета = "
			|	{ЛЕВОЕ СОЕДИНЕНИЕ (" + СтрЗаменить(ТекстИсчислениеНалоговСтруктурныхЕдиниц, "<РазделНУ>", "НДС") + ") КАК ИсчислениеНалоговСтруктурныхЕдиниц
			|		ПО ТаблицаРегистра.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.ВспомогательнаяСтруктурнаяЕдиница
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|							ВидОперации,
			|							КодСтроки
			|						ИЗ
			|							РегистрСведений.КодыСтрокДекларацииПоНДС.СрезПоследних(&ДатаКон) КАК КодыСтрокДекларацииПоНДС) КАК КодыСтрокДекларацииПоНДС
			|		ПО ТаблицаРегистра.ВидОперацииКорректировки = КодыСтрокДекларацииПоНДС.ВидОперации}";
			
			СтруктураПредставлениеПолей.Вставить("НалоговыйКомитет", "Налоговый комитет");
			СтруктураПредставлениеПолей.Вставить("КодСтрокиДекларации", "Код строки декларации");
			
			// включаем в выбранные поля и в отбор по умолчанию
			МассивВыбранныеПоляПоУмолчанию.Добавить("НалоговыйКомитет");
			МассивВыбранныеПоляПоУмолчанию.Добавить("КодСтрокиДекларации");
			
			МассивОтбора.Добавить("НалоговыйКомитет");
			МассивОтбора.Добавить("КодСтрокиДекларации");
			
		ИначеЕсли ИмяРегистра = "КорректировкаНДСКВозмещению" Тогда
			
			ТекстПоляНалоговогоУчета = ",
			|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет.* КАК НалоговыйКомитет,
			|	КодыСтрокДекларацииПоНДСКЗачету.КодСтроки КАК КодСтрокиДекларации";
			
			ТекстСоединенияНалоговогоУчета = "
			|	{ЛЕВОЕ СОЕДИНЕНИЕ (" + СтрЗаменить(ТекстИсчислениеНалоговСтруктурныхЕдиниц, "<РазделНУ>", "НДС") + ") КАК ИсчислениеНалоговСтруктурныхЕдиниц
			|		ПО ТаблицаРегистра.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.ВспомогательнаяСтруктурнаяЕдиница
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|							ВидОперации,
			|							ВидОборота КАК ВспомогательныйВидОборота,
			|							КодСтроки
			|						ИЗ
			|							РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних(&ДатаКон) КАК КодыСтрокДекларацииПоНДСКЗачету) КАК КодыСтрокДекларацииПоНДСКЗачету
			|		ПО ТаблицаРегистра.ВидОперацииКорректировки = КодыСтрокДекларацииПоНДСКЗачету.ВидОперации
			|			И ТаблицаРегистра.ВидОборота = КодыСтрокДекларацииПоНДСКЗачету.ВспомогательныйВидОборота}";
			
			СтруктураПредставлениеПолей.Вставить("НалоговыйКомитет", "Налоговый комитет");
			СтруктураПредставлениеПолей.Вставить("КодСтрокиДекларации", "Код строки декларации");
			
			// включаем в выбранные поля и в отбор по умолчанию
			МассивВыбранныеПоляПоУмолчанию.Добавить("НалоговыйКомитет");
			МассивВыбранныеПоляПоУмолчанию.Добавить("КодСтрокиДекларации");
			
			МассивОтбора.Добавить("НалоговыйКомитет");
			МассивОтбора.Добавить("КодСтрокиДекларации");
			
		ИначеЕсли ИмяРегистра = "НДС" Тогда
			
			ТекстПоляНалоговогоУчета = ",
			|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет.* КАК НалоговыйКомитет,
			|	КодыСтрокДекларацииПоНДС.КодСтроки КАК КодСтрокиДекларации";
			
			ТекстСоединенияНалоговогоУчета = "
			|	{ЛЕВОЕ СОЕДИНЕНИЕ (" + СтрЗаменить(ТекстИсчислениеНалоговСтруктурныхЕдиниц, "<РазделНУ>", "НДС") + ") КАК ИсчислениеНалоговСтруктурныхЕдиниц
			|		ПО ТаблицаРегистра.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.ВспомогательнаяСтруктурнаяЕдиница
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|							ВидОперации,
			|							КодСтроки
			|						ИЗ
			|							РегистрСведений.КодыСтрокДекларацииПоНДС.СрезПоследних(&ДатаКон) КАК КодыСтрокДекларацииПоНДС) КАК КодыСтрокДекларацииПоНДС
			|		ПО ТаблицаРегистра.ВидОперацииРеализации = КодыСтрокДекларацииПоНДС.ВидОперации}";
			
			СтруктураПредставлениеПолей.Вставить("НалоговыйКомитет", "Налоговый комитет");
			СтруктураПредставлениеПолей.Вставить("КодСтрокиДекларации", "Код строки декларации");
			
			// включаем в выбранные поля и в отбор по умолчанию
			МассивВыбранныеПоляПоУмолчанию.Добавить("НалоговыйКомитет");
			МассивВыбранныеПоляПоУмолчанию.Добавить("КодСтрокиДекларации");
			
			МассивОтбора.Добавить("НалоговыйКомитет");
			МассивОтбора.Добавить("КодСтрокиДекларации");
			
		ИначеЕсли ИмяРегистра = "НДСКВозмещению" Тогда
			
			ТекстПоляНалоговогоУчета = ",
			|	ИсчислениеНалоговСтруктурныхЕдиниц.НалоговыйКомитет.* КАК НалоговыйКомитет,
			|	КодыСтрокДекларацииПоНДСКЗачету.КодСтроки КАК КодСтрокиДекларации";
			
			ТекстСоединенияНалоговогоУчета = "
			|	{ЛЕВОЕ СОЕДИНЕНИЕ (" + СтрЗаменить(ТекстИсчислениеНалоговСтруктурныхЕдиниц, "<РазделНУ>", "НДС") + ") КАК ИсчислениеНалоговСтруктурныхЕдиниц
			|		ПО ТаблицаРегистра.СтруктурнаяЕдиница = ИсчислениеНалоговСтруктурныхЕдиниц.ВспомогательнаяСтруктурнаяЕдиница
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|							ВидОперации,
			|							ВидОборота КАК ВспомогательныйВидОборота,
			|							КодСтроки
			|						ИЗ
			|							РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету.СрезПоследних(&ДатаКон) КАК КодыСтрокДекларацииПоНДСКЗачету) КАК КодыСтрокДекларацииПоНДСКЗачету
			|		ПО ТаблицаРегистра.ВидОперацииПоступления = КодыСтрокДекларацииПоНДСКЗачету.ВидОперации
			|			И ТаблицаРегистра.ВидОборота = КодыСтрокДекларацииПоНДСКЗачету.ВспомогательныйВидОборота}";
			
			СтруктураПредставлениеПолей.Вставить("НалоговыйКомитет", "Налоговый комитет");
			СтруктураПредставлениеПолей.Вставить("КодСтрокиДекларации", "Код строки декларации");
			
			// включаем в выбранные поля и в отбор по умолчанию
			МассивВыбранныеПоляПоУмолчанию.Добавить("НалоговыйКомитет");
			МассивВыбранныеПоляПоУмолчанию.Добавить("КодСтрокиДекларации");
			
			МассивОтбора.Добавить("НалоговыйКомитет");
			МассивОтбора.Добавить("КодСтрокиДекларации");
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстПоляНалоговогоУчета) Тогда
			
			ТекстПоляНалоговогоУчета = "
			|//СВОЙСТВА 
			|" + ТекстПоляНалоговогоУчета;
			
			ТекстСоединенияНалоговогоУчета = "
			|//СОЕДИНЕНИЯ
			|" + ТекстСоединенияНалоговогоУчета;
			
			Текст = СтрЗаменить(Текст, "//СВОЙСТВА", ТекстПоляНалоговогоУчета);
			Текст = СтрЗаменить(Текст, "//СОЕДИНЕНИЯ", ТекстСоединенияНалоговогоУчета);
			
		КонецЕсли;
		
	КонецЕсли;

	Если ИспользоватьСвойстваИКатегории = Истина Тогда

		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, 
				Контекст.мСоответствиеНазначений, ПостроительОтчета.Параметры
				,, ТекстПоляКатегорий, ТекстПоляСвойств,,,,,,Контекст.мСтруктураДляОтбораПоКатегориям);

	КонецЕсли;
			
	Если  ЕстьИнформацияОГородеИОбласти Тогда
		// Таблица описания видов объектов контактной информации для возможности вывода в отчет
		ТаблицаВидовОбъектовКИ = Новый ТаблицаЗначений;
		ТаблицаВидовОбъектовКИ.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляется контактная информация
		ТаблицаВидовОбъектовКИ.Колонки.Добавить("Представление");// представление поля, для которого добавляется контактная информация
		ТаблицаВидовОбъектовКИ.Колонки.Добавить("ВидОбъекта");   // вид объекта-владельца контактной информации
		ТаблицаВидовОбъектовКИ.Колонки.Добавить("СтрокаТипОбъекта");   // тип объекта-владельца контактной информации
		
		НоваяСтрока = ТаблицаВидовОбъектовКИ.Добавить();
		НоваяСтрока.ПутьКДанным = "Контрагент";
		НоваяСтрока.Представление = "Контрагент";
		НоваяСтрока.ВидОбъекта = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
		НоваяСтрока.СтрокаТипОбъекта = "Справочник.Контрагенты";
		
		// Добавим строки запроса, необходимые для выборки контактной информации
		ДобавитьВТекстПостроителяИнформациюОГородеОбласти(ТаблицаВидовОбъектовКИ, Текст, СтруктураПредставлениеПолей, Контекст.мСоответствиеНазначений, ПостроительОтчета.Параметры);
	КонецЕсли;		

	ПостроительОтчета.Текст = Текст;
	
	Для каждого Элемент Из МассивВыбранныеПоляПоУмолчанию Цикл
	
		ПостроительОтчета.ВыбранныеПоля.Добавить(Элемент);
	
	КонецЦикла;
	
	Для каждого Элемент Из МассивИзмеренияСтрокиПоУмолчанию Цикл
	
		ПостроительОтчета.ИзмеренияСтроки.Добавить(Элемент);
	
	КонецЦикла;

	Для Каждого Показатель из Контекст.мТаблицаПоказатели Цикл
		Если (ТипОтчета = "СписокКроссТаблица") Или (ТипОтчета = "Диаграмма") Тогда

			ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.ИмяПоля, ПостроительОтчета);

		ИначеЕсли ТипОтчета = "ОстаткиИОбороты" Тогда

			ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.ИмяПоля + "НачальныйОстаток", ПостроительОтчета);
			ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.ИмяПоля + "КонечныйОстаток", ПостроительОтчета);
			ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.ИмяПоля + "Приход", ПостроительОтчета);
			ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.ИмяПоля + "Расход", ПостроительОтчета);

		КонецЕсли;
	КонецЦикла;

	Если ИспользоватьСвойстваИКатегории = Истина Тогда

		УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, Контекст.мСоответствиеНазначений, СтруктураПредставлениеПолей);

	КонецЕсли;

	Для каждого Элемент Из МассивИзмеренийКолонки Цикл

		Измерение = ПостроительОтчета.ИзмеренияСтроки.Найти(Элемент);
		Если Измерение <> Неопределено Тогда
			ПостроительОтчета.ИзмеренияСтроки.Удалить(Измерение);
		КонецЕсли;

		ПостроительОтчета.ИзмеренияКолонки.Добавить(Элемент);
	
	КонецЦикла;        

КонецПроцедуры // ЗаполнитьНачальныеНастройкиПоМетаданнымРегистра()

// Формирует список регистров остатков
//
// Параметры: 
//	Нет.
//
// Возвращаемое значение: 
//	список значений, содержащийимена всех регистров остатков
//
Функция ПолучитьСписокРегистровНакопления() Экспорт

	СписокРегистровОстатков = Новый СписокЗначений;

	Для Каждого МетаданныеРегистр Из Метаданные.РегистрыНакопления Цикл
		
		Если НЕ ПравоДоступа("Просмотр", МетаданныеРегистр) Тогда
			Продолжить;
		КонецЕсли;

		СписокРегистровОстатков.Добавить(МетаданныеРегистр.Имя, МетаданныеРегистр.Представление());

	КонецЦикла;
	
	Возврат СписокРегистровОстатков;
	
Конецфункции // ПолучитьСписокРегистровОстатков()

// Формирует список регистров остатков
//
// Параметры: 
//	Нет.
//
// Возвращаемое значение: 
//	список значений, содержащийимена всех регистров остатков
//
Функция ПолучитьСписокРегистровОстатков() Экспорт

	СписокРегистровОстатков = Новый СписокЗначений;

	Для Каждого МетаданныеРегистр Из Метаданные.РегистрыНакопления Цикл
		
		Если НЕ ПравоДоступа("Просмотр", МетаданныеРегистр) Тогда
			Продолжить;
		КонецЕсли;

		Если МетаданныеРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда

			СписокРегистровОстатков.Добавить(МетаданныеРегистр.Имя, МетаданныеРегистр.Представление());

		КонецЕсли;

	КонецЦикла;
	
	Возврат СписокРегистровОстатков;
	
Конецфункции // ПолучитьСписокРегистровОстатков()

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ИНТЕРФЕЙСА ОТЧЕТОВ

// Связывает поля отбора на основной форме с данными, устанавливает представления, прячет лишние
//
Процедура ОбработатьПоляОтбораНаОсновнойФормеУниверсальногоОтчета(ЭлементыФормы, ПостроительОтчета, СтруктураСвязиЭлементовСДанными = Неопределено, ПутьКПостроителю = "ОтчетОбъект") Экспорт

	// Структура для хранения связи э.у. с данными
	СтруктураСвязиЭлементовСДанными = Новый Структура;

	КоличествоОтборов = 0;
	Для Сч = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл

		ПолеОтбора = ПостроительОтчета.Отбор[Сч];

		Если НЕ (ПустаяСтрока(ПолеОтбора.Имя) ИЛИ ПолеОтбора.Имя = "Периодичность") Тогда
		
			КоличествоОтборов=КоличествоОтборов+1;
		
		КонецЕсли; 
	КонецЦикла;
	Если КоличествоОтборов>5 Тогда
		КоличествоОтборов = 5;
	КонецЕсли;

	Сч = 0;
	Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл

		ПолеОтбора = ПостроительОтчета.Отбор[Инд];

		Если ПустаяСтрока(ПолеОтбора.Имя) ИЛИ ПолеОтбора.Имя = "Периодичность" Тогда
		
			Продолжить;
		
		КонецЕсли; 

		Сч = Сч + 1;
		Если Сч>КоличествоОтборов Тогда
			прервать;
		КонецЕсли;
		Флажок = ЭлементыФормы["ФлажокНастройки"+Сч];
		
		ПолеВыбора = ЭлементыФормы["ПолеВидаСравнения"+Сч];

//			ПолеВыбора.УстановитьДействие("ПриИзменении", ЭталонПолеВыбора.ПолучитьДействие("ПриИзменении"));
		
		ПолеВвода = ЭлементыФормы["ПолеНастройки"+Сч];

//			ПолеВвода.УстановитьДействие("ПриИзменении", ЭталонПолеВвода.ПолучитьДействие("ПриИзменении"));

		ПолеВводаС = ЭлементыФормы["ПолеНастройкиС"+Сч];

//			ПолеВводаС.УстановитьДействие("ПриИзменении", ЭталонПолеВводаС.ПолучитьДействие("ПриИзменении"));
		
		ПолеВводаПо = ЭлементыФормы["ПолеНастройкиПо"+Сч];;
//			ПолеВводаПо.УстановитьДействие("ПриИзменении", ЭталонПолеВводаПо.ПолучитьДействие("ПриИзменении"));

		ТипОтбора = ПостроительОтчета.Отбор[ПолеОтбора.Имя].ТипЗначения;

		ПолеВыбора.СписокВыбора = ПолучитьСписокВидовСравненияПоТипу(ТипОтбора);

		ЭлементыФормы["ФлажокНастройки"+Сч].Заголовок = ПолеОтбора.Представление;
		ЭлементыФормы["ФлажокНастройки"+Сч].Данные   = ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".Использование";
		ЭлементыФормы["ПолеВидаСравнения"+Сч].Данные = ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".ВидСравнения";
		ЭлементыФормы["ПолеНастройки"+Сч].Данные     = ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".Значение";
		ЭлементыФормы["ПолеНастройкиС"+Сч].Данные    = ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".ЗначениеС";
		ЭлементыФормы["ПолеНастройкиПо"+Сч].Данные   = ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".ЗначениеПо";

		СтруктураСвязиЭлементовСДанными.Вставить("ФлажокНастройки"+Сч,   ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".Использование");
		СтруктураСвязиЭлементовСДанными.Вставить("ПолеВидаСравнения"+Сч, ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".ВидСравнения");
		СтруктураСвязиЭлементовСДанными.Вставить("ПолеНастройки"+Сч,     ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".Значение");
		СтруктураСвязиЭлементовСДанными.Вставить("ПолеНастройкиС"+Сч,    ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".ЗначениеС");
		СтруктураСвязиЭлементовСДанными.Вставить("ПолеНастройкиПо"+Сч,   ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".ЗначениеПо");

		// Если только один тип, то тип выбирать не будем
		ЭлементыФормы["ПолеНастройки"+Сч].ВыбиратьТип   = НЕ (ТипОтбора.Типы().Количество()=1);
		ЭлементыФормы["ПолеНастройкиС"+Сч].ВыбиратьТип  = НЕ (ТипОтбора.Типы().Количество()=1);
		ЭлементыФормы["ПолеНастройкиПо"+Сч].ВыбиратьТип = НЕ (ТипОтбора.Типы().Количество()=1);

		Если ЭлементыФормы["ПолеВидаСравнения"+Сч].Значение = ВидСравнения.Интервал
			ИЛИ ЭлементыФормы["ПолеВидаСравнения"+Сч].Значение = ВидСравнения.ИнтервалВключаяГраницы 
			ИЛИ ЭлементыФормы["ПолеВидаСравнения"+Сч].Значение = ВидСравнения.ИнтервалВключаяНачало 
			ИЛИ ЭлементыФормы["ПолеВидаСравнения"+Сч].Значение = ВидСравнения.ИнтервалВключаяОкончание Тогда
		
			ЭлементыФормы["ПолеНастройки"+Сч].Видимость = Ложь;
			ЭлементыФормы["ПолеНастройкиС"+Сч].Видимость = Истина;
			ЭлементыФормы["ПолеНастройкиПо"+Сч].Видимость = Истина;
		
		Иначе
		
			ЭлементыФормы["ПолеНастройки"+Сч].Видимость = Истина;
			ЭлементыФормы["ПолеНастройкиС"+Сч].Видимость = Ложь;
			ЭлементыФормы["ПолеНастройкиПо"+Сч].Видимость = Ложь;
		
		КонецЕсли;
	
	КонецЦикла; 

КонецПроцедуры

// Процедура-обработчик изменения поля настройки
//
Процедура ПолеНастройкиПриИзменении(Элемент, Отбор, СтруктураСвязиЭУсДанными=Неопределено) Экспорт

	Поз = Найти(Элемент.Имя, "ПолеНастройки");
	Если Поз>0 Тогда
		
		Если ТипЗнч(СтруктураСвязиЭУсДанными)= Тип("Структура") Тогда
			
			// Имяполя отбора найдем из пути к данным
			ПутьКДанным="";
			Если СтруктураСвязиЭУсДанными.Свойство(Элемент.Имя, ПутьКДанным) Тогда
				
				ПутьКДанным = Сред(ПутьКДанным, Найти(ПутьКДанным, "Отбор.")+СтрДлина("Отбор."));
				ИмяПоля = Лев(ПутьКДанным, Найти(ПутьКДанным, ".")-1);
				
			КонецЕсли;
		Иначе
			ИмяПоля = Сред(Элемент.Имя, СтрДлина("ПолеНастройки")+1);
		КонецЕсли;
		
		МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(Элемент.Значение));
		Если МетаданныеЗначения <> Неопределено Тогда
			Если Метаданные.Справочники.Найти(МетаданныеЗначения.Имя) <> Неопределено Тогда
				Если Элемент.Значение.ЭтоГруппа Тогда
					Отбор[ИмяПоля].ВидСравнения = ВидСравнения.ВИерархии;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Элемент.ТипЗначения.Типы().Количество() = 2 Тогда
				ПустойСписок = Новый СписокЗначений;
				Если Элемент.ТипЗначения.СодержитТип(Тип("СписокЗначений")) Тогда
					ТипНеСписок = ?(Элемент.ТипЗначения.Типы()[0] = Тип("СписокЗначений"), Элемент.ТипЗначения.Типы()[1], Элемент.ТипЗначения.Типы()[0]);
					
					Если НЕ ЗначениеЗаполнено(Элемент.Значение) или (ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") и Элемент.Значение.Количество() = 0) Тогда
						Если (Отбор[ИмяПоля].ВидСравнения = ВидСравнения.ВСписке)
							Или (Отбор[ИмяПоля].ВидСравнения = ВидСравнения.ВСпискеПоИерархии)
							Или (Отбор[ИмяПоля].ВидСравнения = ВидСравнения.НеВСписке)
							Или (Отбор[ИмяПоля].ВидСравнения = ВидСравнения.НеВСпискеПоИерархии) Тогда
							МассивСТипом = Новый массив(1);
							
							МассивСТипом[0] = ТипНеСписок;
							
							ПустойСписок.ТипЗначения = Новый ОписаниеТипов(МассивСТипом);
							
							Элемент.Значение = ПустойСписок;
						Иначе
							Элемент.Значение = ОбщегоНазначения.ПустоеЗначениеТипа(ТипНеСписок);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если НЕ (НЕ ЗначениеЗаполнено(Элемент.Значение) или (ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") и Элемент.Значение.Количество() = 0)) Тогда
			Отбор[ИмяПоля].Использование = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура-обработчик изменения поля настройки С
//
Процедура ПолеНастройкиСПриИзменении(Элемент, Отбор, СтруктураСвязиЭУсДанными=Неопределено) Экспорт

	Поз = Найти(Элемент.Имя, "ПолеНастройкиC");
	Если Поз>0 Тогда
		
		Если ТипЗнч(СтруктураСвязиЭУсДанными)= Тип("Структура") Тогда
			
			// Имяполя отбора найдем из пути к данным
			ПутьКДанным="";
			Если СтруктураСвязиЭУсДанными.Свойство(Элемент.Имя, ПутьКДанным) Тогда
				
				ПутьКДанным = Сред(ПутьКДанным, Найти(ПутьКДанным, "Отбор.")+СтрДлина("Отбор."));
				ИмяПоля = Лев(ПутьКДанным, Найти(ПутьКДанным, ".")-1);
				
			КонецЕсли;
		Иначе
			ИмяПоля = Сред(Элемент.Имя, СтрДлина("ПолеНастройкиC")+1);
		КонецЕсли;

		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Отбор[ИмяПоля].Использование = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура-обработчик изменения поля настройки ПО
//
Процедура ПолеНастройкиПоПриИзменении(Элемент, Отбор, СтруктураСвязиЭУсДанными=Неопределено) Экспорт

	Поз = Найти(Элемент.Имя, "ПолеНастройкиПо");
	Если Поз>0 Тогда
		
		Если ТипЗнч(СтруктураСвязиЭУсДанными)= Тип("Структура") Тогда
			
			// Имяполя отбора найдем из пути к данным
			ПутьКДанным="";
			Если СтруктураСвязиЭУсДанными.Свойство(Элемент.Имя, ПутьКДанным) Тогда
				
				ПутьКДанным = Сред(ПутьКДанным, Найти(ПутьКДанным, "Отбор.")+СтрДлина("Отбор."));
				ИмяПоля = Лев(ПутьКДанным, Найти(ПутьКДанным, ".")-1);
				
			КонецЕсли;
		Иначе
			ИмяПоля = Сред(Элемент.Имя, СтрДлина("ПолеНастройкиПо")+1);
		КонецЕсли;

		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Отбор[ИмяПоля].Использование = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик изменения поля вида сравнения
//
Процедура ПолеВидаСравненияПриИзменении(Элемент, ЭлементыФормы) Экспорт

	ИмяОтбора = Сред(Элемент.Имя, Найти(Элемент.Имя, "ПолеВидаСравнения")+СтрДлина("ПолеВидаСравнения"));
	
	// Управление полями настройки в зависимости от вида сравнения
		Если Элемент.Значение = ВидСравнения.Интервал
			ИЛИ Элемент.Значение = ВидСравнения.ИнтервалВключаяГраницы 
			ИЛИ Элемент.Значение = ВидСравнения.ИнтервалВключаяНачало 
			ИЛИ Элемент.Значение = ВидСравнения.ИнтервалВключаяОкончание Тогда
		
			Если ЭлементыФормы.Найти("ПолеНастройки" + ИмяОтбора) <> НеОпределено Тогда
				ЭлементыФормы["ПолеНастройки"+ИмяОтбора].Видимость = Ложь;
			КонецЕсли;
			Если ЭлементыФормы.Найти("ПолеНастройкиС" + ИмяОтбора) <> НеОпределено Тогда
				ЭлементыФормы["ПолеНастройкиС"+ИмяОтбора].Видимость = Истина;
			КонецЕсли;
			Если ЭлементыФормы.Найти("ПолеНастройкиПо" + ИмяОтбора) <> НеОпределено Тогда
				ЭлементыФормы["ПолеНастройкиПо"+ИмяОтбора].Видимость = Истина;
			КонецЕсли;
		
		Иначе
		
			Если ЭлементыФормы.Найти("ПолеНастройки" + ИмяОтбора) <> НеОпределено Тогда
				ПолеНастройки = ЭлементыФормы["ПолеНастройки"+ИмяОтбора];
				// - ЗУП - начало
				ПолеНастройки.КнопкаОткрытия = Истина;
				// - ЗУП - конец
				ПолеНастройки.Видимость = Истина;
				Если Элемент.Значение = ВидСравнения.ВСписке
					ИЛИ Элемент.Значение = ВидСравнения.НеВСписке
					ИЛИ Элемент.Значение = ВидСравнения.ВСпискеПоИерархии
					ИЛИ Элемент.Значение = ВидСравнения.НеВСпискеПоИерархии Тогда
					ПолеНастройки.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
				Иначе
					ПолеНастройки.ОграничениеТипа = Новый ОписаниеТипов(ПолеНастройки.ТипЗначения,, "СписокЗначений");
				КонецЕсли;
			КонецЕсли;
			Если ЭлементыФормы.Найти("ПолеНастройкиС" + ИмяОтбора) <> НеОпределено Тогда
				ЭлементыФормы["ПолеНастройкиС"+ИмяОтбора].Видимость = Ложь;
			КонецЕсли;
			Если ЭлементыФормы.Найти("ПолеНастройкиПо" + ИмяОтбора) <> НеОпределено Тогда
				ЭлементыФормы["ПолеНастройкиПо"+ИмяОтбора].Видимость = Ложь;
			КонецЕсли;
		
		КонецЕсли;

КонецПроцедуры

// Формирует текст-заголовок формы отчета
//
Функция СформироватьЗаголовокОсновнойФормы(ДатаНач, ДатаКон, НазваниеОтчета, РежимВводаПериода) Экспорт

	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если РежимВводаПериода =  0 Тогда  // произвольный период
		Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда
			ОписаниеПериода     = "Период не установлен";

		Иначе
			Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда
				ОписаниеПериода = "" + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""...""") 
				+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

			Иначе
				Если ДатаНач <= ДатаКон Тогда
					ОписаниеПериода = "" + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
				Иначе
					ОписаниеПериода = "Неправильно задан период!"
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли РежимВводаПериода =  1 Тогда   // на дату
		Если ДатаКон = '00010101000000' Тогда
			ОписаниеПериода = "на текущее время " + Формат(ТекущаяДата(), "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

		Иначе
			ОписаниеПериода = "на конец дня " + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
			
		КонецЕсли;

	ИначеЕсли РежимВводаПериода = 2 Тогда   // месяц
		Если ДатаНач = '00010101000000' Тогда
			ОписаниеПериода     = "Период не установлен";

		Иначе
			ОписаниеПериода = "" + ПредставлениеПериода(НачалоМесяца(ДатаНач), КонецМесяца(ДатаНач), "ФП = Истина");
			
		КонецЕсли;
		
	ИначеЕсли РежимВводаПериода = 3 Тогда   // квартал
		Если ДатаНач = '00010101000000' Тогда
			ОписаниеПериода     = "Период не установлен";

		Иначе
			ОписаниеПериода = "" + ПредставлениеПериода(НачалоКвартала(ДатаНач), КонецКвартала(ДатаНач), "ФП = Истина");
			
		КонецЕсли;
		
	ИначеЕсли РежимВводаПериода = 4 Тогда   // год
		Если ДатаНач = '00010101000000' Тогда
			ОписаниеПериода     = "Период не установлен";

		Иначе
			ОписаниеПериода = "" + ПредставлениеПериода(НачалоГода(ДатаНач), КонецГода(ДатаНач), "ФП = Истина");
			
		КонецЕсли;
		
	КонецЕсли;

	// - ЗУП - начало
	
	НазваниеОтчета = СтрЗаменить(НазваниеОтчета, "работник", "сотрудник");
	
	// - ЗУП - конец
	Возврат НазваниеОтчета+" (" + ОписаниеПериода + ") ";

КонецФункции

// Отображает панель, соответствующую варианту отображения
//
Процедура УстановитьВидимостьПанелиОтчета(ЭлементыФормы, ВариантОтображения)  Экспорт

	// поправим видимость страниц панели результатов
	СтраницыПанелиИзображений = ЭлементыФормы.ПанельИзображений.Страницы;
	Для Сч = 0 По СтраницыПанелиИзображений.Количество() - 1 Цикл
		Если ВариантОтображения = СтраницыПанелиИзображений[Сч].Имя Тогда
			ЭлементыФормы.ПанельИзображений.ТекущаяСтраница = СтраницыПанелиИзображений[Сч];
			Прервать
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьВидимостьПанелиОтчета

// Заполняет подменю Отображение панели действий отчета
//
// Параметры: 
//  Отчет - объект отчета. 
//  ФормаОтчета - основная форма отчета, чья панель заполняется
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьМенюОтчетаОтображение(Отчет, ФормаОтчета) Экспорт

	СписокВариантовОтображения = Отчет.ПолучитьСписокВариантовОтображенияОтчета();

	#Если Клиент Тогда

	// удалим кнопки подменю Отображение
	КнопкиОтображение = ФормаОтчета.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отображение.Кнопки;
	КнопкиОтображение.Очистить();
	// удалим кнопки подменю Действия, начиная с кнопки Таблица и до разделителя
	КнопкиДействия = ФормаОтчета.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки;
    ПерваяКнопка = КнопкиДействия.Найти("Действия" + СписокВариантовОтображения[СписокВариантовОтображения.Количество() - 1].Значение);
	Если ПерваяКнопка <> Неопределено Тогда
		НомерКнопкиТаблица = КнопкиДействия.Индекс(ПерваяКнопка);
	    ТипКнопки = КнопкиДействия[НомерКнопкиТаблица].ТипКнопки;
	    Пока ТипКнопки = ТипКнопкиКоманднойПанели.Действие Цикл
			КнопкиДействия.Удалить(НомерКнопкиТаблица);
			ТипКнопки = КнопкиДействия[НомерКнопкиТаблица].ТипКнопки;
		КонецЦикла;
	Иначе
		НомерКнопкиТаблица = 6
	КонецЕсли;

	// добавим нужные кнопки и выставим пометку
	ДействиеКнопок = Новый Действие("КоманднаяПанельФормыОтображение");
	Для каждого Значение Из СписокВариантовОтображения Цикл
        НадоПометитьКнопку = Значение.Значение = Отчет.ВариантОтображения;
		Кнопка = КнопкиОтображение.Вставить(0,Значение.Значение,ТипКнопкиКоманднойПанели.Действие,Значение.Представление,ДействиеКнопок);
		Кнопка.Пометка = НадоПометитьКнопку;
		Кнопка = КнопкиДействия.Вставить(НомерКнопкиТаблица,"Действия" + Значение.Значение,ТипКнопкиКоманднойПанели.Действие,Значение.Представление,ДействиеКнопок);
		Кнопка.Пометка = НадоПометитьКнопку;
	КонецЦикла;
	#КонецЕсли

	
КонецПроцедуры // ЗаполнитьМенюОтчетОтображение

// Повторяем поведение переключателя на кнопках из меню
//
// Параметры: 
//  Отчет - объект отчета. 
//  ФормаОтчета - основная форма отчета, чья панель заполняется
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПометитьКнопкиОтображения(Отчет, ФормаОтчета) Экспорт

	// все возможные варианты отображения
	СписокВариантовОтображения = Отчет.ПолучитьСписокВариантовОтображенияОтчета();
	КоличествоВариантовОтображения = СписокВариантовОтображения.Количество();
	ВариантОтображения = Отчет.ВариантОтображения;

	// кнопки подменю Отображение
	Кнопки = ФормаОтчета.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отображение.Кнопки;
	Для каждого КнопкаИзМеню Из Кнопки Цикл
		КнопкаИзМеню.Пометка = КнопкаИзМеню.Имя = ВариантОтображения
	КонецЦикла;

	// кнопки подменю Действия
	Кнопки = ФормаОтчета.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки;
	НомерКнопкиТаблица = Кнопки.Индекс(Кнопки.Найти("Действия" + СписокВариантовОтображения[КоличествоВариантовОтображения - 1].Значение));
	Для Сч = НомерКнопкиТаблица По НомерКнопкиТаблица - 1 + СписокВариантовОтображения.Количество() Цикл
		Кнопки[Сч].Пометка = Кнопки[Сч].Имя = "Действия" + ВариантОтображения;
	КонецЦикла;

КонецПроцедуры // ПометитьКнопкиОтображения

// Действия при нажатии на кнопку "Отображение".
//
// Параметры
//  Отчет	     – объект отчета.
//  ФормаОтчета  – основная форма отчета.
//  ВыбраннаяКнопка – элемент командной панели.
//
Процедура ДействияПриИзмененииОтображения(Отчет, ФормаОтчета, ВыбраннаяКнопка) Экспорт

	Если Не ВыбраннаяКнопка.Пометка Тогда

		// все возможные варианты отображения
		СписокВариантовОтображения = Отчет.ПолучитьСписокВариантовОтображенияОтчета();
        КоличествоВариантовОтображения = СписокВариантовОтображения.Количество();
		
		// устанавливаем реквизит отчета
		Отчет.ВариантОтображения = СтрЗаменить(ВыбраннаяКнопка.Имя,"Действия","");
		// скорректируем реквизит отчета, если установленный недопустим
		Если СписокВариантовОтображения.НайтиПоЗначению(Отчет.ВариантОтображения) = Неопределено Тогда
			Отчет.ВариантОтображения = СписокВариантовОтображения[КоличествоВариантовОтображения - 1].Значение
		КонецЕсли;

		// видимость страниц панели результатов
		УстановитьВидимостьПанелиОтчета(ФормаОтчета.ЭлементыФормы, Отчет.ВариантОтображения);

		// сбросим пометку с ранее помеченных кнопок и выставим у выбранной
        ПометитьКнопкиОтображения(Отчет,ФормаОтчета);
		
		Если Отчет.Метаданные().Имя = "УдалитьСтатистикаКадров" Тогда
			// если отчет уже формировался - отображем полученные результаты по-новому
			Отчет.ОбновитьОтчет(Отчет, ФормаОтчета, Ложь, Отчет.ВариантОтображения);
			
		Иначе
		
			Если Отчет.ВариантОтображения = "Таблица" Тогда
			
				ФормаОтчета.ОбновитьТаблицуОтчета();
			
			ИначеЕсли Отчет.ВариантОтображения = "Диаграмма" Тогда
			
				ФормаОтчета.ОбновитьДиаграмму();
			
			ИначеЕсли Отчет.ВариантОтображения = "СводнаяТаблица" Тогда
			
				ФормаОтчета.ОбновитьСводнуюТаблицу();
			
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДействияПриИзмененииОтображения()

// Процедура используется в формах настройки отчетов для выбора категории
// или для подбора категорий в список. Использование обусловлено тем,
// что Категории при выборе надо указывать владельца
//
// Параметры:
//	Элемент - элемент управления, в который выбирают категорию
//	Назначение - элемент ПВХ, назначение для категории, известное форме настройки
//	ФормаНастройки - сама форма
//	СтандартнаяОбработка - необходимый параметр процедуры - обработчика события
//
Процедура ОсуществитьВыборКатегории(Элемент, Назначение, ФормаНастройки, СтандартнаяОбработка) Экспорт

	Если ТипЗнч(Элемент.Значение) <> ТипЗнч(Новый СписокЗначений) Тогда

		СтандартнаяОбработка = Ложь;

		ФормаВыбораКатегории= Справочники.КатегорииОбъектов.ПолучитьФормуВыбора(, Элемент,);
		ФормаВыбораКатегории.РежимВыбора = Истина;
		ФормаВыбораКатегории.Отбор.НазначениеКатегории.Установить(Назначение);
		ФормаВыбораКатегории.Открыть();
		
	КонецЕсли;
КонецПроцедуры // ОсуществитьВыборКатегории()

// Процедура используется в формах настройки отчетов для выбора значения свойства
// или для подбора значений свойств в список. Использование обусловлено тем,
// что свойству при выборе надо указывать не только тип значения, но еще и владельца
//
// Параметры:
//	Элемент - элемент управления, в который выбирают свойство
//	Назначение - элемент ПВХ, назначение для свойства, известное форме настройки
//	ФормаНастройки - сама форма
//	СтандартнаяОбработка - необходимый параметр процедуры - обработчика события
//
Процедура ОсуществитьВыборСвойства(Элемент, Свойство, ФормаНастройки, СтандартнаяОбработка) Экспорт
// Ограничение списка свойств
	Если ТипЗнч(Элемент.Значение) <> Тип("СписокЗначений") Тогда

		Если Свойство.ТипЗначения.СодержитТип(ТипЗнч(Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка())) Тогда
			Попытка
				Элемент.ВыборПоВладельцу = Свойство;
				СтандартнаяОбработка = Истина;
			Исключение
				МенеджерДанных = Новый("СправочникМенеджер."+Элемент.Значение.Метаданные().Имя);
				ФормаДанных = МенеджерДанных.ПолучитьФормуВыбора(, Элемент);
				ФормаДанных.РежимВыбора = Истина;
				ФормаДанных.МножественныйВыбор = Ложь;
				ФормаДанных.ЭлементыФормы.СправочникСписок.Значение.Отбор.Владелец.Значение = Свойство;
				ФормаДанных.ЭлементыФормы.СправочникСписок.Значение.Отбор.Владелец.Использование = Истина;
				ФормаДанных.Открыть();
				СтандартнаяОбработка = Ложь;
			КонецПопытки;
		Иначе
			СтандартнаяОбработка = истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОсуществитьВыборСвойства()

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОТЧЕТОВ НА ПОСТРОИТЕЛЕ ОТЧЕТОВ

// Устанавливает связь полей отбора на основной форме с отбором
//
Процедура УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, Отбор, СтруктураСвязиЭлементовСДанными = Неопределено, ПутьКОтбору = "ОтчетОбъект.ПостроительОтчета.Отбор") Экспорт

	Инд=0;
	СтруктураНаборовСвязываемыхЭлементов = Новый Структура;
	//Перебираем элементы формы
	Пока Инд<ЭлементыФормы.Количество() Цикл

		Элемент = ЭлементыФормы[Инд];
		
		Если (Найти(Элемент.Имя, "ПолеНастройки")
			ИЛИ Найти(Элемент.Имя, "ФлажокНастройки")
			ИЛИ Найти(Элемент.Имя, "ПолеВидаСравнения")) Тогда

			//Если имя элемента формы содержит что-то, нас интересующее,
			//добавляем его в соответствующую структуру

			//Это может плохо работать, например, для "ПолеНастройкиПоПорядку"
			//процедура решит, что это "ПолеНастройкиПо" для "Порядку". Вывод - используем маленькую
			//букву - "ПолеНастройкиПопопрядку"!!!
			Если (Найти(Элемент.Имя, "ПолеНастройкиПо")) и (ВРег(Сред(Элемент.Имя, 16, 1)) = Сред(Элемент.Имя, 16, 1)) Тогда
				ИмяПоляОтбора = СтрЗаменить(Элемент.Имя, "ПолеНастройкиПо", "");
			ИначеЕсли Найти(Элемент.Имя, "ПолеНастройкиС") и (ВРег(Сред(Элемент.Имя, 15, 1)) = Сред(Элемент.Имя, 15, 1)) Тогда
				ИмяПоляОтбора = СтрЗаменить(Элемент.Имя, "ПолеНастройкиС", "");
			ИначеЕсли Найти(Элемент.Имя, "ПолеНастройки") Тогда
				ИмяПоляОтбора = СтрЗаменить(Элемент.Имя, "ПолеНастройки", "");
			ИначеЕсли Найти(Элемент.Имя, "ПолеВидаСравнения") Тогда
				ИмяПоляОтбора = СтрЗаменить(Элемент.Имя, "ПолеВидаСравнения", "");
			Иначе
				ИмяПоляОтбора = СтрЗаменить(Элемент.Имя, "ФлажокНастройки", "");
			КонецЕсли;
			
			СтрНабор = "";
			Если НЕ СтруктураНаборовСвязываемыхЭлементов.Свойство(ИмяПоляОтбора) Тогда
				//Ключами структуры "СтруктураНаборовСвязываемыхЭлементов" являются 
				//идентификаторы полей отбора, значениями - структуры СтрНабор.
				СтрНабор = Новый Структура;
				СтруктураНаборовСвязываемыхЭлементов.Вставить(ИмяПоляОтбора, СтрНабор);
				Иначе СтрНабор = СтруктураНаборовСвязываемыхЭлементов[ИмяПоляОтбора];
			КонецЕсли;
			//В СтрНабор мы складываем в качестве ключа, например, "ПолеНастройки", 
			//значение - ЭУ формы. В общем, откусываем идентификатор отбора
			СтрНабор.Вставить(СтрЗаменить(Элемент.Имя, ИмяПоляОтбора, ""), Элемент);
			
		КонецЕсли;
		
		Инд=Инд+1;
	
	КонецЦикла; 

	// Структура для хранения связи э.у. с данными
	СтруктураСвязиЭлементовСДанными = Новый Структура;

	Для Сч = 0 По Отбор.Количество()-1 Цикл

		ПолеОтбора = Отбор[Сч];
		
		Если ПустаяСтрока(ПолеОтбора.Имя) Тогда
			Продолжить;
		КонецЕсли; 

		Если СтруктураНаборовСвязываемыхЭлементов.Свойство(ПолеОтбора.Имя) Тогда
			//Тогда имеет место комплект (возможно, неполный) контролов для него
			
			КомплектКонтролов = СтруктураНаборовСвязываемыхЭлементов[ПолеОтбора.Имя];
			//напоминаю - ключи - тип ЭУ, значения - сами ЭУ
			//Связываем их с данными.
			
			ТипОтбора = Отбор[ПолеОтбора.Имя].ТипЗначения;
			
			Если КомплектКонтролов.Свойство("ФлажокНастройки") Тогда
				КомплектКонтролов.ФлажокНастройки.Данные = ПутьКОтбору+"."+ПолеОтбора.Имя+".Использование";
				СтруктураСвязиЭлементовСДанными.Вставить("ФлажокНастройки"+ПолеОтбора.Имя,   ПутьКОтбору+"."+ПолеОтбора.Имя+".Использование");
			КонецЕсли;
			
			Если КомплектКонтролов.Свойство("ПолеНастройки") Тогда
				КомплектКонтролов.ПолеНастройки.Данные = ПутьКОтбору+"."+ПолеОтбора.Имя+".Значение";
				СтруктураСвязиЭлементовСДанными.Вставить("ПолеНастройки"+ПолеОтбора.Имя,     ПутьКОтбору+"."+ПолеОтбора.Имя+".Значение");
			КонецЕсли;

			Если КомплектКонтролов.Свойство("ПолеНастройкиС") Тогда
				КомплектКонтролов.ПолеНастройкиС.Данные = ПутьКОтбору+"."+ПолеОтбора.Имя+".ЗначениеС";
				СтруктураСвязиЭлементовСДанными.Вставить("ПолеНастройкиС"+ПолеОтбора.Имя,    ПутьКОтбору+"."+ПолеОтбора.Имя+".ЗначениеС");
			КонецЕсли;

			Если КомплектКонтролов.Свойство("ПолеНастройкиПо") Тогда
				КомплектКонтролов.ПолеНастройкиПо.Данные = ПутьКОтбору+"."+ПолеОтбора.Имя+".ЗначениеПо";
				СтруктураСвязиЭлементовСДанными.Вставить("ПолеНастройкиПо"+ПолеОтбора.Имя,   ПутьКОтбору+"."+ПолеОтбора.Имя+".ЗначениеПо");
			КонецЕсли;

			Если КомплектКонтролов.Свойство("ПолеВидаСравнения") Тогда
				КомплектКонтролов.ПолеВидаСравнения.СписокВыбора = ПолучитьСписокВидовСравненияПоТипу(ТипОтбора);
				КомплектКонтролов.ПолеВидаСравнения.Данные = ПутьКОтбору+"."+ПолеОтбора.Имя+".ВидСравнения";
				СтруктураСвязиЭлементовСДанными.Вставить("ПолеВидаСравнения"+ПолеОтбора.Имя, ПутьКОтбору+"."+ПолеОтбора.Имя+".ВидСравнения");

				//Установим видимость ЭУ "ПолеНастройки*" в зависимости от 
				//уже установленного вида сравнения
				ПолеВидаСравненияПриИзменении(КомплектКонтролов.ПолеВидаСравнения, ЭлементыФормы);

			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

// Заполняет отборы ПостроителяОтчета
//
// Параметры:
//	МассивОтбора - Массив, содержащий идентификаторы отборов
Процедура ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета) Экспорт
	Для Каждого Элемент Из МассивОтбора Цикл

		ПолеОтбора = ПостроительОтчета.Отбор.Добавить(Элемент);

	КонецЦикла; 
КонецПроцедуры

// Упорядочивает коллекцию ДоступныеПоля ПостроителяОтчета по представлению
//
// Параметры:
//	ПостроительОтчета 			- постротель отчета, с которым работать
//
Процедура УпорядочитьПоляПостроителяОтчета(ПостроительОтчета) Экспорт

	ТЗДоступныеПоля = Новый ТаблицаЗначений;
	ТЗДоступныеПоля.Колонки.Добавить("Имя");
	ТЗДоступныеПоля.Колонки.Добавить("Представление");

	ДоступныеПоляПостроителя = ПостроительОтчета.ДоступныеПоля;

	// считаем имена и представление полей в таблицу значений для сортировки
	Для Каждого ПоляПостроителя Из ДоступныеПоляПостроителя Цикл
		Строка = ТЗДоступныеПоля.Добавить();
		Строка.Имя = ПоляПостроителя.Имя;
		Строка.Представление = ПоляПостроителя.Представление;
	КонецЦикла;
	
	ТЗДоступныеПоля.Сортировать("Представление");
	
	// сдвигаем поля построителя так, чтобы они в результате оказались упорядочены по представлению
	Для Каждого Строка Из ТЗДоступныеПоля Цикл
		ПолеПостроителя = ДоступныеПоляПостроителя[Строка.Имя];
		ИсходныеИндекс 	= ДоступныеПоляПостроителя.Индекс(ПолеПостроителя);
		ЦелевойИндекс  	= ТЗДоступныеПоля.Индекс(Строка);
		
		ДоступныеПоляПостроителя.Сдвинуть(ПолеПостроителя, ЦелевойИндекс - ИсходныеИндекс);
	КонецЦикла;			

КонецПроцедуры

// В текст для построителя отчета вставляет свойства и категории
Процедура ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, мСоответствиеНазначений, 
	                                          СтруктураПараметры, ТекстИсточникиСведений="", ТекстПоляКатегорий="", 
	                                          ТекстПоляСвойств="", ТекстПоляСгруппироватьПо = "", 
	                                          ЗаменятьСвойства = "//СВОЙСТВА", ЗаменятьКатегории = "//КАТЕГОРИИ", 
	                                          ЗаменятьСоединения = "//СОЕДИНЕНИЯ", ЗаменятьСгруппироватьПо = "//СГРУППИРОВАТЬПО",
	                                          ИдентификаторыПараметровДляОтборовПоКатегориям = "") Экспорт

	// Добавляемые фрагменты запроса
	ТекстПоляКатегорийДляГруппировки = "";
	ТекстПоляСвойствДляГруппировки = "";
	ТекстИсточникиСведений = "";
	ТекстПоляКатегорий = "";
	ТекстПоляСвойств = "";
	
	Если НЕ ТипЗнч(ИдентификаторыПараметровДляОтборовПоКатегориям) = Тип("Структура") Тогда
		
		ИдентификаторыПараметровДляОтборовПоКатегориям = Новый Структура;
		
	КонецЕсли;

	Индекс = 0;

	СвойстваОбъектов = ПланыВидовХарактеристик.СвойстваОбъектов.Выбрать();
	
	Пока СвойстваОбъектов.Следующий() Цикл

		Если СвойстваОбъектов.ЭтоГруппа ИЛИ СвойстваОбъектов.ПометкаУдаления Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СвойстваОбъектов.ТипЗначения.Типы().Количество() > 1 Тогда
			
			ПараметрПустоеЗначениеСвойства = "Неопределено";
			
		Иначе
			
			ТипСвойства = СвойстваОбъектов.ТипЗначения.Типы()[0];
			ВозможныеТипыСвойств = Метаданные.ПланыВидовХарактеристик.СвойстваОбъектов.Тип.Типы();
			
			ИндексТекущегоВозможногоТипа = 0;
			
			Для каждого ВозможныйТипСвойства из ВозможныеТипыСвойств Цикл
				
				Если ВозможныйТипСвойства = ТипСвойства Тогда
					
					ПараметрПустоеЗначениеСвойства = "&ПараметрПустоеЗначениеСвойства" + ИндексТекущегоВозможногоТипа;
					
				КонецЕсли;
				
				ИндексТекущегоВозможногоТипа = ИндексТекущегоВозможногоТипа + 1;
				
			КонецЦикла;
			
		КонецЕсли;

		Поля = ТаблицаПолей.НайтиСтроки(Новый Структура("Назначение", СвойстваОбъектов.НазначениеСвойства));
		
		Для каждого Поле из Поля Цикл

			
			// Для списка всех полей
			ТекстПоляСвойств = ТекстПоляСвойств + ",
			|	ЕСТЬNULL (Свойство" + Индекс + ".Значение, " + ПараметрПустоеЗначениеСвойства + ") КАК Свойство" + Индекс + "Значение";
			
			ТекстПоляСвойствДляГруппировки = ТекстПоляСвойствДляГруппировки + ",
			|	Свойство" + Индекс + ".Значение";

			// Источник для свойств
			ТекстИсточникиСведений = ТекстИсточникиСведений + Символы.ПС + 
			"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК Свойство" + Индекс + "
			|	ПО Свойство" + Индекс + ".Объект = " + Поле.ПутьКДанным + "
			|	И  Свойство" + Индекс + ".Свойство = &ПараметрСвойство" + Индекс + "}";

			СтруктураПараметры.Вставить("ПараметрСвойство" + Индекс, СвойстваОбъектов.Ссылка);

			СтруктураПредставлениеПолей.Вставить("Свойство" + Индекс + "Значение", СвойстваОбъектов.Наименование + " (св-во " + Поле.Представление + ")");

			мСоответствиеНазначений.Вставить(СвойстваОбъектов.Наименование + " (св-во " + Поле.Представление + ")", СвойстваОбъектов.Ссылка);

			Индекс = Индекс + 1;

		КонецЦикла;	

	КонецЦикла;

	Для каждого Строка Из ТаблицаПолей Цикл

		Если НЕ (Строка.НетКатегорий = Истина) Тогда

			ТекстИсточникиСведений = ТекстИсточникиСведений + Символы.ПС + 
			"	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК Категории" + Индекс + "
			|	ПО Категории" + Индекс + ".Объект = " + Строка.ПутьКДанным + "
			|	И  Категории" + Индекс + ".Категория В (&ПараметрКатегории" + Индекс + ")}";

			ТекстПоляКатегорий = ТекстПоляКатегорий + ",
			|	ЕСТЬNULL(Категории" + Индекс + ".Категория, " + Строка.ПутьКДанным + ") КАК Категории" + Индекс + "Категория";

         	ТекстПоляКатегорийДляГруппировки = ТекстПоляКатегорийДляГруппировки + ",
			|	Категории" + Индекс + ".Категория";

			СтруктураПредставлениеПолей.Вставить("Категории" + Индекс + "Категория", "Категории " + Строка.Представление);

			ИдентификаторыПараметровДляОтборовПоКатегориям.Вставить("Категории" + Индекс + "Категория", "ПараметрКатегории" + Индекс);

			мСоответствиеНазначений.Вставить("Категории " + Строка.Представление, Строка.Назначение);

			Индекс = Индекс + 1;

		КонецЕсли; 
	
	КонецЦикла; 

	//ВЫБРАТЬ РАЗЛИЧНЫЕ съедает достаточно много ресурсов - поэтому если 
	//не надо, то обойдемся без него.
	Если ТекстПоляКатегорийДляГруппировки <> "" Тогда

		Текст = СтрЗаменить(Текст, "//РАЗЛИЧНЫЕ", "РАЗЛИЧНЫЕ");

	КонецЕсли;
	
	Текст = СтрЗаменить(Текст, ЗаменятьСвойства, ТекстПоляСвойств);
	Текст = СтрЗаменить(Текст, ЗаменятьКатегории, ТекстПоляКатегорий);
	Текст = СтрЗаменить(Текст, ЗаменятьСоединения, ТекстИсточникиСведений);
	Текст = СтрЗаменить(Текст, ЗаменятьСгруппироватьПо, ТекстПоляСвойствДляГруппировки + ТекстПоляКатегорийДляГруппировки);

КонецПроцедуры // ДобавитьВТекстСвойстваИКатегории()

// В текст для построителя отчета вставляет поля и источники контактной информации
//
Процедура ДобавитьВТекстПостроителяКонтактнуюИнформацию(ТаблицаВидовОбъектовКИ, Текст, СтруктураПредставлениеПолей, мСоответствиеНазначений, 
	                                          СтруктураПараметры, 
	                                          ЗаменятьПоля = "//КОНТАКТНАЯ ИНФОРМАЦИЯ: ПОЛЯ", 
	                                          ЗаменятьСоединения = "//КОНТАКТНАЯ ИНФОРМАЦИЯ: СОЕДИНЕНИЯ") Экспорт

											  
	// Добавляемые фрагменты запроса
	ТекстИсточникиСведений ="";
	ТекстПоля = "";
	
	
	НомерВидаКИ = 0;
	// Для каждого объекта-владельца контактной информации получим список видов контактной информации
	// и присоединим их к запросу
	Для Каждого СтрокаТаблицыВидовОбъектов ИЗ ТаблицаВидовОбъектовКИ Цикл
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации", СтрокаТаблицыВидовОбъектов.ВидОбъекта);
		
		// Текст выборки всех видов контактной информации для заданного вида объекта: Произвольные + Заданные в справочнике "ВидыКонтактнойИнформации"
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	""#ПроизвольныйВид#"" КАК Ссылка,
		|	0 КАК Код,
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Вид КАК Наименование
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|
		|ГДЕ
		|	(НЕ(КонтактнаяИнформация.Вид В (ВЫБРАТЬ РАЗЛИЧНЫЕ 	ВидыКонтактнойИнформации.Ссылка ИЗ Справочник.ВидыКонтактнойИнформации ВидыКонтактнойИнформации ))) И
		|	((ВЫРАЗИТЬ(КонтактнаяИнформация.Объект КАК " + СтрокаТаблицыВидовОбъектов.СтрокаТипОбъекта + ")) = КонтактнаяИнформация.Объект)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка,
		|	ВидыКонтактнойИнформации.Код,
		|	ВидыКонтактнойИнформации.Тип,
		|	ВидыКонтактнойИнформации.Наименование
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|
		|ГДЕ
		|	(ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ) И
		|	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ВидОбъектаКонтактнойИнформации";
		
		ВыборкаВидовИнформации = Запрос.Выполнить().Выбрать();	
		
		Пока ВыборкаВидовИнформации.Следующий() цикл
			НомерВидаКИ = НомерВидаКИ + 1;
			ИмяПоля = "КИ_" + НомерВидаКИ;
			Если ВыборкаВидовИнформации.Ссылка = "#ПроизвольныйВид#" тогда
				ИдентификаторВидаИнформации = ВыборкаВидовИнформации.Наименование;
			Иначе	
				ИдентификаторВидаИнформации = ВыборкаВидовИнформации.Ссылка;
			КонецЕсли;	 
			
			// Формируем описание полей запроса
			ТекстПоля = ТекстПоля + ",
			|	Выборка"+ИмяПоля+".Представление" + " КАК " + ИмяПоля;
			
			// Формируем описание источников данных
			ТекстИсточникиСведений = ТекстИсточникиСведений + Символы.ПС + 
			"{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК Выборка" + ИмяПоля + "
			|ПО Выборка" + ИмяПоля + ".Объект = " + СтрокаТаблицыВидовОбъектов.ПутьКДанным + "
			|И  Выборка" + ИмяПоля + ".Вид = &Параметр" + ИмяПоля + "}";
			
			// параметр для выборки значений по текущему виду информации
			СтруктураПараметры.Вставить("Параметр" + ИмяПоля, ИдентификаторВидаИнформации);
			
			// представление вида контактной информации
			ПредставлениеПоля = СокрЛП(ВыборкаВидовИнформации.Наименование);
			СтруктураПредставлениеПолей.Вставить(ИмяПоля, ПредставлениеПоля);
			
		КонецЦикла;	
		
	КонецЦикла; 
	
											  
	Текст = СтрЗаменить(Текст, ЗаменятьПоля, ТекстПоля);
	Текст = СтрЗаменить(Текст, ЗаменятьСоединения, ТекстИсточникиСведений);

КонецПроцедуры

// Добавляет в параметры построителя отчета использованные в отборах категории
//
// Параметры:
//	ПостроительОтчета              - Построитель, отбор которого обрабатывается, и в Параметры 
//                                    которого добавляются категории
//	СтруктураДляОтбораПоКатегориям - структура, связывающая пути к данным Отборов Построителя и 
//                                    идентицфикаторы параметров
//
// Возвращаемое значение:
//	Истина, если добавление параметров произошло успешно
//	Ложь, если есть повторный отбор по одной и той же категории.
//
// Вообще-то, повторный отбор по одной и той же категории невозможен не всегда - 
//  можно отобрать два раза с видом сравнения "не равно". Контроль возвращаемого
//  этой функцией значения отключить можно, но нужно после этого понимать,
//  что два отбора по одной категории с видом сравнения "Равно" приведут к тому,
//  что отчет окажется пустым.
//
Функция ЗадатьПараметрыОтбораПоКатегориям(ПостроительОтчета, СтруктураДляОтбораПоКатегориям) Экспорт

	Если ТипЗнч(СтруктураДляОтбораПоКатегориям) = ТипЗнч(Новый Структура) Тогда

		Для Каждого ЭлементОтбора Из ПостроительОтчета.Отбор Цикл
			
			Если Не ЗначениеЗаполнено(ЭлементОтбора.ПутьКДанным) Тогда
				Продолжить;
			КонецЕсли;
			
			//Прочищаем все, независимо от использования элемента отбора
			НазваниеПараметра = "";
			Если Найти(ЭлементОтбора.ПутьКДанным, ".") = 0 Тогда
				Если СтруктураДляОтбораПоКатегориям.Свойство(ЭлементОтбора.ПутьКДанным, НазваниеПараметра) Тогда
					Если ПостроительОтчета.Параметры.Свойство(НазваниеПараметра) Тогда
						ПостроительОтчета.Параметры.Удалить(НазваниеПараметра);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Для Каждого ЭлементОтбора Из ПостроительОтчета.Отбор Цикл
			
			Если НЕ ЗначениеЗаполнено(ЭлементОтбора.ПутьКДанным)
				ИЛИ Найти(ЭлементОтбора.ПутьКДанным, ".") > 0 Тогда

				Продолжить;

			КонецЕсли;

			Если ЭлементОтбора.Использование Тогда

				ИдентификаторПараметра = "";

				Если СтруктураДляОтбораПоКатегориям.Свойство(ЭлементОтбора.ПутьКДанным, ИдентификаторПараметра) Тогда

					МассивЗначенийКатегорий = НеОпределено;

					Если НЕ ПостроительОтчета.Параметры.Свойство(ИдентификаторПараметра, МассивЗначенийКатегорий) Тогда

						МассивЗначенийКатегорий = Новый Массив;

					Иначе

                        #Если Клиент Тогда
						Предупреждение("Нельзя использовать несколько отборов по одной и той же категории!");
						#КонецЕсли
						Возврат Ложь;

					КонецЕсли;

					Если ТипЗнч(ЭлементОтбора.Значение) = ТипЗнч(Новый СписокЗначений) Тогда
						Для Каждого ЗначениеКатегории Из ЭлементОтбора.Значение Цикл
							МассивЗначенийКатегорий.Добавить(ЗначениеКатегории.Значение);
						КонецЦикла;
					Иначе
						МассивЗначенийКатегорий.Добавить(ЭлементОтбора.Значение);
					КонецЕсли;

					ПостроительОтчета.Параметры.Вставить(ИдентификаторПараметра, МассивЗначенийКатегорий);

				КонецЕсли;
				
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;

	Возврат Истина;

КонецФункции // ЗадатьПараметрыОтбораПоКатегориям()

// Устанавливает типы значений доступных полей отбора, соответствующих свойствам и категориям
//
// Параметры:
//	ПостроительОтчета      - ПостроительОтчета, его доступные поля анализируются
//	ТекстПоляКатегорий,
//	ТекстПоляСвойств       - Строки, используются для определений того, является ли
//                            ДоступноеПоле значением свойства или категрии
//	мСоотвествиеНазначений - Соответствие между представлениями и ПВХ,
//                            используется для установки правильных типов Свойств
//
Процедура УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, мСоответствиеНазначений, СтруктураПредставлениеПолей) Экспорт
	
	Для Каждого КлючИЗначение из СтруктураПредставлениеПолей Цикл
		
		Если Найти(ТекстПоляСвойств, "КАК " + КлючИЗначение.Ключ)>0 Тогда

			Назначение = мСоответствиеНазначений.Получить(КлючИЗначение.Значение);
			

			Если Назначение = Неопределено Тогда
				Продолжить;
				
			КонецЕсли;

			ДоступноеПоле = ПостроительОтчета.ДоступныеПоля.Найти(КлючИЗначение.Ключ);
			
			Если ДоступноеПоле = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;

			Если ДоступноеПоле.Отбор Тогда
				
				ДоступноеПоле.ТипЗначения = Назначение.ТипЗначения;
				
			КонецЕсли;

		ИначеЕсли Найти(ТекстПоляКатегорий, "КАК " + КлючИЗначение.Ключ)>0 Тогда
			
			ДоступноеПоле = ПостроительОтчета.ДоступныеПоля.Найти(КлючИЗначение.Ключ);

			Если ДоступноеПоле <> Неопределено Тогда
				
				ДоступноеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.КатегорииОбъектов");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВозможныеТипыСвойств = Метаданные.ПланыВидовХарактеристик.СвойстваОбъектов.Тип.Типы();
	
	ИндексТекущегоВозможногоТипа = 0;
			
	Для каждого ВозможныйТипСвойства из ВозможныеТипыСвойств Цикл
				
		ПостроительОтчета.Параметры.Вставить("ПараметрПустоеЗначениеСвойства" + ИндексТекущегоВозможногоТипа, ОбщегоНазначения.ПустоеЗначениеТипа(ВозможныйТипСвойства));
		ИндексТекущегоВозможногоТипа = ИндексТекущегоВозможногоТипа + 1;
				
	КонецЦикла;
	
КонецПроцедуры // УстановитьТипыЗначенийСвойствИКатегорийДляОтбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПЕРИОДАМИ

// Функция формирует представление периода по дате начала и дате окончания.
//
// Параметры
//  ДатаНачала	   – Дата – дата начала периода.
//  ДатаОкончания  – Дата – дата окончания периода.
//  ДатаНачала	   – Булево – признак того, что описание периода будет сформирован 
//					 без указания чисел месяца.
//
// Возвращаемое значение:
//   Строка   – строковое представление периода.
//
Функция ОписаниеПериода(ДатаНачала, ДатаОкончания, СДатами = Истина) Экспорт
	
	ЧислоНачала		= День(ДатаНачала);
	ЧислоОкончания	= День(ДатаОкончания);
	ОписаниеМесяцаГода = Лев(Формат(ДатаНачала,   "ДФ = 'MMMM'"),3)+" "+ Формат(ДатаНачала,    "ДФ = 'гг'");
	ОписаниеМесяца2    = Лев(Формат(ДатаОкончания,"ДФ = 'MMMM'"),3)+" "+ Формат(ДатаОкончания, "ДФ = 'гг'");
	
	Если НачалоМесяца(ДатаНачала) <> НачалоМесяца(ДатаОкончания) Тогда  
		
		Если (НачалоДня(ДатаНачала) = НачалоМесяца(ДатаНачала)) Тогда
			Перваяполовинадат = "" + ОписаниеМесяцаГода;
		Иначе
			Перваяполовинадат = ?(СДатами, "" + ЧислоНачала, "") + " " + ОписаниеМесяцаГода; 
		КонецЕсли;
		
		Если (КонецДня(ДатаОкончания) = КонецМесяца(ДатаОкончания)) Тогда
			ВтораяПоловинаДат = ОписаниеМесяца2 ;
		Иначе
			ВтораяПоловинаДат = ?(СДатами, "" + ЧислоОкончания, "") + " " + ОписаниеМесяца2;
		КонецЕсли;
		
		Возврат Перваяполовинадат + "-" + ВтораяПоловинаДат;
		
	Иначе
		
		Если (НачалоДня(ДатаНачала) = НачалоМесяца(ДатаНачала)) И (КонецДня(ДатаОкончания) = КонецМесяца(ДатаОкончания)) Тогда
			Возврат ОписаниеМесяцаГода;
		ИначеЕсли ЧислоНачала = ЧислоОкончания Тогда
			Возврат ?(СДатами, "" + ЧислоНачала, "") + " " + ОписаниеМесяцаГода;
		Иначе
			Возврат ?(СДатами ,"" + ЧислоНачала + "-" + ЧислоОкончания, "") + " " + ОписаниеМесяцаГода;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции	// ОписаниеПериода 

// Функция формирует полное представление периода по дате начала и дате окончания
// (полное название месяца и 4 цифры года)
//
// Параметры
//  ДатаНачала	   – Дата – дата начала периода.
//  ДатаОкончания  – Дата – дата окончания периода.
//  СДатами		   – Булево – признак того, что описание периода будет сформирован 
//					 без указания чисел месяца.
//
// Возвращаемое значение:
//   Строка   – строковое представление периода.
//
Функция ПолноеОписаниеПериода(ДатаНачала, ДатаОкончания, СДатами = Истина) Экспорт
	
	Возврат куфиб_ЗащитаОтчеты.ПолноеОписаниеПериода(ДатаНачала, ДатаОкончания, СДатами);
	
КонецФункции	// ПолноеОписаниеПериода 

#Если Клиент Тогда
// Функция открывает диалог для настройки периода
//
// Параметры
//  ДатаНач - Дата, начало периода
//  ДатаКон - Дата, конец периода
//
// Возвращаемое значение:
//   Массив - массив с датами начала и окончания выбранного периода
//
Функция ВвестиПериод(ДатаНач, ДатаКон) Экспорт
	
	Период = Новый НастройкаПериода;

	Период.ВариантНастройки = ВариантНастройкиПериода.Интервал;
	Период.УстановитьПериод(НачалоДня(ДатаНач), ?(НачалоДня(ДатаНач) = Дата("00010101000000"), НачалоДня(ДатаНач), КонецДня(ДатаКон)));
	
	Если ДатаНач = Дата("00010101000000") Тогда
		Период.ВариантНачала = ВариантГраницыИнтервала.БезОграничения;
	ИначеЕсли НачалоДня(ДатаНач) = НачалоГода(ТекущаяДата()) Тогда
		Период.ВариантНачала = ВариантГраницыИнтервала.Год;
	ИначеЕсли НачалоДня(ДатаНач) = НачалоКвартала(ТекущаяДата()) Тогда
		Период.ВариантНачала = ВариантГраницыИнтервала.Квартал;
	ИначеЕсли НачалоДня(ДатаНач) = НачалоМесяца(ТекущаяДата()) Тогда
		Период.ВариантНачала = ВариантГраницыИнтервала.Месяц;
	ИначеЕсли НачалоДня(ДатаНач) = НачалоНедели(ТекущаяДата()) Тогда
		Период.ВариантНачала = ВариантГраницыИнтервала.Неделя;
	ИначеЕсли НачалоДня(ДатаНач) = НачалоДня(ТекущаяДата()) Тогда
		Период.ВариантНачала = ВариантГраницыИнтервала.РабочаяДата;
	Иначе
		Период.ДатаНачала        = ДатаНач;
		Период.ВариантНачала     = ВариантГраницыИнтервала.КонкретнаяДата;
	КонецЕсли; 

	Если ДатаКон = Дата("00010101000000") Тогда
		Период.ВариантОкончания = ВариантГраницыИнтервала.БезОграничения;
	ИначеЕсли КонецДня(ДатаКон) = КонецГода(ТекущаяДата()) Тогда
		Период.ВариантОкончания = ВариантГраницыИнтервала.Год;
	ИначеЕсли КонецДня(ДатаКон) = КонецКвартала(ТекущаяДата()) Тогда
		Период.ВариантОкончания = ВариантГраницыИнтервала.Квартал;
	ИначеЕсли КонецДня(ДатаКон) = КонецМесяца(ТекущаяДата()) Тогда
		Период.ВариантОкончания = ВариантГраницыИнтервала.Месяц;
	ИначеЕсли КонецДня(ДатаКон) = КонецНедели(ТекущаяДата()) Тогда
		Период.ВариантОкончания = ВариантГраницыИнтервала.Неделя;
	ИначеЕсли КонецДня(ДатаКон) = КонецДня(ТекущаяДата()) Тогда
		Период.ВариантОкончания = ВариантГраницыИнтервала.РабочаяДата;
	Иначе
		Период.ДатаОкончания    = ДатаКон;
		Период.ВариантОкончания = ВариантГраницыИнтервала.КонкретнаяДата;
	КонецЕсли; 

	Если НЕ Период.Редактировать() Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Период.ВариантНачала = ВариантГраницыИнтервала.БезОграничения Тогда
		ДатаНач = Дата("00010101000000");
	ИначеЕсли Период.ВариантНачала = ВариантГраницыИнтервала.Год Тогда
		ДатаНач = НачалоГода(ТекущаяДата());
	ИначеЕсли Период.ВариантНачала = ВариантГраницыИнтервала.Квартал Тогда
		ДатаНач = НачалоКвартала(ТекущаяДата());
	ИначеЕсли Период.ВариантНачала = ВариантГраницыИнтервала.Месяц Тогда
		ДатаНач = НачалоМесяца(ТекущаяДата());
	ИначеЕсли Период.ВариантНачала = ВариантГраницыИнтервала.Неделя Тогда
		ДатаНач = НачалоНедели(ТекущаяДата());
	ИначеЕсли Период.ВариантНачала = ВариантГраницыИнтервала.РабочаяДата Тогда
		ДатаНач = НачалоДня(ТекущаяДата());
	Иначе
		ДатаНач = НачалоДня(Период.ДатаНачала);
	КонецЕсли; 

	Если Период.ВариантОкончания = ВариантГраницыИнтервала.БезОграничения Тогда
		ДатаКон = Дата("00010101000000");
	ИначеЕсли Период.ВариантОкончания = ВариантГраницыИнтервала.Год Тогда
		ДатаКон = КонецГода(ТекущаяДата());
	ИначеЕсли Период.ВариантОкончания = ВариантГраницыИнтервала.Квартал Тогда
		ДатаКон = КонецКвартала(ТекущаяДата());
	ИначеЕсли Период.ВариантОкончания = ВариантГраницыИнтервала.Месяц Тогда
		ДатаКон = КонецМесяца(ТекущаяДата());
	ИначеЕсли Период.ВариантОкончания = ВариантГраницыИнтервала.Неделя Тогда
		ДатаКон = КонецНедели(ТекущаяДата());
	ИначеЕсли Период.ВариантОкончания = ВариантГраницыИнтервала.РабочаяДата Тогда
		ДатаКон = КонецДня(ТекущаяДата());
	Иначе
		ДатаКон = ?((Период.ДатаОкончания = Дата("000101010000")), Период.ДатаОкончания,(КонецДня(Период.ДатаОкончания)));
	КонецЕсли; 
	
	МассивВозврата = Новый Массив;

	МассивВозврата.Добавить(ДатаНач);
	МассивВозврата.Добавить(ДатаКон);

	Возврат МассивВозврата;
	
КонецФункции // ВвестиПериод()
#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С СКД

Процедура ЗаменитьЗапросККалендарю(НаборыДанных, ТекстЗапросККалендарю, ТекстЗапросЗамены, СоответствиеНаборовДанныхИЗапросов)
	
	Для Каждого НаборДанных Из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") тогда
			СоответствиеНаборовДанныхИЗапросов.Вставить(НаборДанных.Имя, НаборДанных.Запрос);
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос, ТекстЗапросККалендарю, ТекстЗапросЗамены);
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") тогда
			ЗаменитьЗапросККалендарю(НаборДанных.Элементы, ТекстЗапросККалендарю, ТекстЗапросЗамены, СоответствиеНаборовДанныхИЗапросов)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заменяет шаблон запроса к регламентированному календарю на автосгенерированный запрос.
//
Процедура ЗаменитьВСКДТекстЗапросКалендаря(СКД, НачалоПериода, КонецПериода, СоответствиеНаборовДанныхИЗапросов) Экспорт
	
	СоответствиеНаборовДанныхИЗапросов =  Новый Соответствие;
	
	ТекстЗапПоКалендарю = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК ПериодРегистрации
		|ПОМЕСТИТЬ Периоды
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоПериода И &КонецПериода";
					   
	ДтНачМесяца = НачалоМесяца(НачалоПериода);
	
	ТекстЗапросаЗамены = "ВЫБРАТЬ
	|	ДАТАВРЕМЯ(" + Формат(ДтНачМесяца, "ДФ=yyyy") + ", " + Месяц(ДтНачМесяца) + ", " + День(ДтНачМесяца) + ") КАК ПериодРегистрации
	|ПОМЕСТИТЬ Периоды";
	ДтНачМесяца = ДобавитьМесяц(ДтНачМесяца, 1);
	
	Пока ДтНачМесяца <= КонецПериода Цикл
		
		ТекстЗапросаЗамены =  ТекстЗапросаЗамены + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ(" + Формат(ДтНачМесяца, "ДФ=yyyy") + ", " + Месяц(ДтНачМесяца) + ", " + День(ДтНачМесяца) + ") КАК ПериодРегистрации
		|";
		ДтНачМесяца = ДобавитьМесяц(ДтНачМесяца, 1);
		
	КонецЦикла;
	
	ЗаменитьЗапросККалендарю(СКД.НаборыДанных, ТекстЗапПоКалендарю, ТекстЗапросаЗамены, СоответствиеНаборовДанныхИЗапросов);
	
КонецПроцедуры

Процедура УстановитьЗапросыСКДПоСоответсвию(НаборыДанных, СоответствиеНаборовДанныхИЗапросов) Экспорт
	
	Для Каждого НаборДанных Из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") тогда
			НаборДанных.Запрос = 	СоответствиеНаборовДанныхИЗапросов.Получить(НаборДанных.Имя);
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") тогда
			УстановитьЗапросыСКДПоСоответсвию(НаборДанных.Элементы, СоответствиеНаборовДанныхИЗапросов);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура меняет название полей, содержащих название организации, на учереждение
 //
Процедура ЗаменитьНазваниеПолейСхемыКомпоновкиДанных(СхемаКомпоновкиДанных) Экспорт
	 
	Для Каждого НаборДанных Из СхемаКомпоновкиДанных.НаборыДанных Цикл
		Для Каждого Поле Из НаборДанных.Поля Цикл
			Поле.Заголовок = ПроцедурыУправленияПерсоналом.ПреобразоватьСтрокуИнтерфейса(Поле.Заголовок);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Поле Из СхемаКомпоновкиДанных.ВычисляемыеПоля Цикл
		Поле.Заголовок = ПроцедурыУправленияПерсоналом.ПреобразоватьСтрокуИнтерфейса(Поле.Заголовок);
	КонецЦикла;
	
	Для Каждого Параметр Из СхемаКомпоновкиДанных.Параметры Цикл
		Параметр.Заголовок = ПроцедурыУправленияПерсоналом.ПреобразоватьСтрокуИнтерфейса(Параметр.Заголовок);
	КонецЦикла;
	
	Параметр = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title"));
	Параметр.Значение = ПроцедурыУправленияПерсоналом.ПреобразоватьСтрокуИнтерфейса(Параметр.Значение);
	
Конецпроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//  ДИАГРАММА ГАНТА

// Вывод отрезков диаграммы.
// Параметры:
//	Выборка -       Выборка из результата запроса по периоду
//	СтруктураПараметров - структура общих параметров
//	ИмяПоказателя - Имя поля показателя. По умолчанию "РесурсЧисло".
//	ЦветОтрезка - Цвет. Если задан, отрезки будут окрашены таким цветом, иначе - цветом из макета
//
Процедура ВывестиИнтервалы(Выборка, СтруктураПараметров, Точка, ПараметрыОтчета)

	Диаграмма = СтруктураПараметров.Диаграмма;
	
	Пока Выборка.СледующийПоЗначениюПоля("Серия") Цикл
		
		Серия = СтруктураПараметров["Серия" + Выборка.Серия];
		МассивТочек = Диаграмма.ПолучитьЗначение(Точка, Серия);										
		
		НачалоИнтервалов = ПараметрыОтчета.ДатаКон;
		КонецИнтервалов = Дата(1,1,1);
		
		ТекстПодсказки = "";
		Сч = 3;
		
		Пока Выборка.Следующий() Цикл
			
			Сч = Сч - 1;
			Если ТекстПодсказки <> "" и Сч <> 0 Тогда
				ТекстПодсказки = ТекстПодсказки + ";";
			КонецЕсли;
			// Если построение слишком долгое, например, выбрана слишком мелкая периодичность, 
			// то его можно прервать (Ctrl+Break)
			#Если Клиент тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
		
			НачИнтервала = Макс(Выборка.НачалоИнтервала, ПараметрыОтчета.ДатаНач);
			
			КонИнтервала = ?(Выборка.КонецИнтервала = NULL, ПараметрыОтчета.ДатаКон, Мин(Выборка.КонецИнтервала, ПараметрыОтчета.ДатаКон));
			
			НачалоИнтервалов = Мин(НачалоИнтервалов,НачИнтервала);
			КонецИнтервалов = Макс(КонецИнтервалов,КонИнтервала);
			
			Интервал = МассивТочек.Добавить();
			Интервал.Начало = НачИнтервала;
			Интервал.Конец 	= КонИнтервала;
			Если Выборка.Серия = "План" Тогда
				//Интервал.Цвет = ПараметрыОтчета.мСтильДиаграммыПланУтвержденный;
			Иначе
				//Интервал.Цвет = ПараметрыОтчета.мСтильДиаграммыФакт;
			КонецЕсли;
			Интервал.Значение.ДополнительныйЦвет = Интервал.Цвет;
			Интервал.Расшифровка = Выборка.Регистратор;
			Если ПараметрыОтчета.Периодичность = 1 Тогда
				Если Сч > 0 тогда
					ТекстПодсказки = ТекстПодсказки + "" + Формат(НачИнтервала, "ДФ='ЧЧ:мм дд.ММ'") + " - " + Формат(КонИнтервала, "ДФ='ЧЧ:мм дд.ММ'");
				ИначеЕсли Сч = 0 Тогда
					ТекстПодсказки = ТекстПодсказки + "..."
				КонецЕсли;	
				Интервал.Текст = "" + Формат(НачИнтервала, "ДФ='ЧЧ:мм дд.ММ'") + " - " + Формат(КонИнтервала, "ДФ='ЧЧ:мм дд.ММ'");;
			Иначе	
				Если Сч > 0 тогда
					ТекстПодсказки = ТекстПодсказки + "" + Формат(НачИнтервала, "ДФ=dd.MM.yyyy") + " - " + Формат(КонИнтервала, "ДФ=dd.MM.yyyy");
				ИначеЕсли Сч = 0 Тогда
					ТекстПодсказки = ТекстПодсказки + "..."
				КонецЕсли;
				Интервал.Текст = ""  + Формат(НачИнтервала, "ДФ=dd.MM.yyyy") + " - " + Формат(КонИнтервала, "ДФ=dd.MM.yyyy");
			КонецЕсли; 
			
			// добавим текущий интервал во все родительские точки
			ТочкаРодитель = Точка.Родитель;
			Пока ТочкаРодитель <> Неопределено Цикл
				
				МассивТочекРодителя = Диаграмма.ПолучитьЗначение(ТочкаРодитель, Серия);										
				ТочкаРодитель = ТочкаРодитель.Родитель;
			КонецЦикла; 
		КонецЦикла;
		
		МассивТочек.Текст = ТекстПодсказки;
		
	КонецЦикла; 

КонецПроцедуры

// Вывод строки отчета (с проверкой необходимости этого вывода)
//
// Параметры:
//	Выборка       - выборка из результата отчета, которая обходится в процедуре
//	СтруктураПараметров - структура параметров, необходимых для вывода строки
//	Номер         - число, номер обходимой группировки
//	ДопСтрока 	  - строка, выводится справа от группировки. по умолчанию пустая
//
Функция ВывестиСтрокуГруппировки(Выборка, СтруктураПараметров, ТочкаРодитель)

	Если ТочкаРодитель = Неопределено Тогда
		СтруктураРодитель = Новый Структура;
	Иначе
		СтруктураРодитель = ТочкаРодитель.Значение
	КонецЕсли;

	СтруктураГруппировок = Новый Структура;
	Для Каждого Элемент Из СтруктураРодитель Цикл
	    СтруктураГруппировок.Вставить(Элемент.Ключ,Элемент.Значение)
	КонецЦикла;
	
	ИмяГруппировки  = Выборка.Группировка();
	ЗначениеГруппировки = Выборка[ИмяГруппировки];
	СтруктураГруппировок.Вставить(ИмяГруппировки,ЗначениеГруппировки);
	
	Попытка 
		ПредставлениеГруппировки = "" + Выборка[ИмяГруппировки + "Представление"];
	Исключение
		ПредставлениеГруппировки = "" + Выборка[ИмяГруппировки];
	КонецПопытки;	
	
	Если ПустаяСтрока(ПредставлениеГруппировки) Тогда
		ПредставлениеГруппировки = "<...>";
	КонецЕсли;
	
	Диаграмма = СтруктураПараметров.Диаграмма;
	Точка = Диаграмма.УстановитьТочку(СтруктураГруппировок, СтруктураРодитель);
	Точка.Расшифровка = ЗначениеГруппировки;
	Точка.Цвет               = WebЦвета.СветлоЗеленый;
	Точка.ДополнительныйЦвет = WebЦвета.СветлоЗеленый;
	Точка.Текст = ПредставлениеГруппировки;
	
	Возврат Точка;
	
КонецФункции // ВывестиСтрокуГруппировки()

// Обход выборки из результата запроса по группировкам для вывода строк отчета
//
// Параметры:
//
//	Выборка       - выборка из результата отчета, которая обходится в процедуре,
//	СтруктураПараметров - структура параметров, передеваемых в процедуру вывода
//	                строки отчета,
//	Номер         - число, номер обходимой группировки
//
Процедура ВывестиВыборку(Выборка, СтруктураПараметров, Номер, ТочкаРодитель = Неопределено, ПараметрыОтчета)
	
	#Если Клиент тогда
 	Состояние("Вывод отчета");
	ОбработкаПрерыванияПользователя();
	#КонецЕсли

	ВсегоГруппировок = СтруктураПараметров.ВсегоГруппировок;
	
	// Берутся группировки все подряд
	Пока Выборка.Следующий() Цикл

		ПоследняяГруппировка = (Номер = ВсегоГруппировок-1);
		
		// Для каждого значения группировки строим строку диаграммы
		Точка = ВывестиСтрокуГруппировки(Выборка, СтруктураПараметров, ТочкаРодитель);
		
		Если НЕ ПоследняяГруппировка Тогда
			ВывестиВыборку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, Номер + 1, Точка, ПараметрыОтчета);
		Иначе	
			ВыборкаДетальныхЗаписей = Выборка.Выбрать(ОбходРезультатаЗапроса.Прямой);
			ВывестиИнтервалы(ВыборкаДетальныхЗаписей, СтруктураПараметров, Точка, ПараметрыОтчета);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиВыборку(

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьДиаграмму(ДиаграммаГанта, ПараметрыОтчета) Экспорт
	
	мЧасДень 			= 0;
	мДеньНеделяМесяц	= 1;
	мНеделяМесяцГод		= 2;
	мМесяцГод		    = 3;
	
	Если ПараметрыОтчета.Периодичность < 0 ИЛИ ПараметрыОтчета.Периодичность > 3 Тогда
		#Если Клиент тогда
			Предупреждение("Не выбрана периодичность!");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтчета.ДатаНач > ПараметрыОтчета.ДатаКон И ПараметрыОтчета.ДатаКон <> '00010101000000' Тогда
		#Если Клиент тогда
		Предупреждение("Дата начала периода не может быть больше даты конца периода");
		#КонецЕсли
		Возврат;
	КонецЕсли; 

	Если ПараметрыОтчета.ПостроительОтчета.ИзмеренияСтроки.Количество() = 0 Тогда
		#Если Клиент тогда
		Предупреждение("Не выбрано ни одной группировки!");
		#КонецЕсли
		Возврат;
	КонецЕсли;

	Если ПараметрыОтчета.ДатаНач <> Дата('00010101') Тогда
		ПараметрыОтчета.ДатаНач = НачалоДня(ПараметрыОтчета.ДатаНач);
	КонецЕсли; 
	Если ПараметрыОтчета.ДатаКон <> Дата('00010101') Тогда
		ПараметрыОтчета.ДатаКон = КонецДня(ПараметрыОтчета.ДатаКон);
	КонецЕсли; 
	
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("НачалоПериода", НачалоДня(ПараметрыОтчета.ДатаНач));
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("КонецПериода",  КонецДня(ПараметрыОтчета.ДатаКон));
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("ДатаНач", НачалоДня(ПараметрыОтчета.ДатаНач));
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("ДатаКон", НачалоМинуты(КонецДня(ПараметрыОтчета.ДатаКон)));
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("ДатаСведений", ПараметрыОтчета.ДатаКон);
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("ДатаПослеНачала", ПараметрыОтчета.ДатаНач + 1);
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("ТекущаяДата", КонецДня(ОбщегоНазначения.ПолучитьРабочуюДату()));
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("РаботникОрганизацииВОтпуске", Перечисления.СостоянияРаботникаОрганизации.ОтпускЕжегодный);
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("Свободен", Перечисления.ТипыПериодическихЗадачРаботника.Свободен);
	ПараметрыОтчета.ПостроительОтчета.Параметры.Вставить("Отпуск", Перечисления.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный);
	
	ПараметрыОтчета.ПостроительОтчета.Выполнить();
	РезультатЗапроса = ПараметрыОтчета.ПостроительОтчета.Результат;
	
	ДиаграммаГанта.Обновление = Ложь;
	ДиаграммаГанта.ОтображениеИнтервала = ОтображениеИнтервалаДиаграммыГанта.Плоский;
	ДиаграммаГанта.Очистить();
	
	// Оформление шкалы времени
	ЭлементыШкалыВремени = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы;
	
	// очистим коллекцию
	ПервыйЭлемент = ЭлементыШкалыВремени[0];// нельзя полностью очитить коллекцию (один элемент будет всегда)
	Для Н = 1 по ЭлементыШкалыВремени.Количество() - 1 Цикл
		ЭлементыШкалыВремени.Удалить(ЭлементыШкалыВремени[1]);
	КонецЦикла; 
	
	// заполним коллекцию
	Если ПараметрыОтчета.Периодичность = мДеньНеделяМесяц Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.Месяц;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Неделя;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.День;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Пунктир, 1);
		Элемент.ФорматДня =  ФорматДняШкалыВремени.ДеньМесяца;
		
	ИначеЕсли ПараметрыОтчета.Периодичность = мЧасДень Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.День;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		ПервыйЭлемент.ФорматДня =  ФорматДняШкалыВремени.ДеньМесяца;
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Час;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
		
	ИначеЕсли ПараметрыОтчета.Периодичность = мНеделяМесяцГод Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.Год;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Месяц;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Неделя;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Пунктир, 1);
		
	ИначеЕсли ПараметрыОтчета.Периодичность = мМесяцГод Тогда
		
		ПервыйЭлемент.Единица = ТипЕдиницыШкалыВремени.Год;
		ПервыйЭлемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
		
		Элемент = ЭлементыШкалыВремени.Добавить();
		Элемент.Единица = ТипЕдиницыШкалыВремени.Месяц;
		Элемент.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Точечная, 1);
	КонецЕсли;

	// Вывод данных
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Диаграмма", ДиаграммаГанта);
	СтруктураПараметров.Вставить("ВсегоГруппировок", ПараметрыОтчета.ПостроительОтчета.ИзмеренияСтроки.Количество());
	
	Для Каждого Серия Из ПараметрыОтчета.мМассивПараметров Цикл
		Если ТипЗнч(Серия) = Тип("СписокЗначений") Тогда
			СтруктураПараметров.Вставить("СерияПлан", ДиаграммаГанта.УстановитьСерию(Серия));
			СтруктураПараметров.Вставить("СерияФакт", ДиаграммаГанта.УстановитьСерию(Серия));
			СтруктураПараметров.СерияПлан.Цвет = ПараметрыОтчета.мСтильДиаграммыПланУтвержденный;
			СтруктураПараметров.СерияФакт.Цвет = ПараметрыОтчета.мСтильДиаграммыФакт;
		Иначе
			СтруктураПараметров.Вставить("Серия" + Серия, ДиаграммаГанта.УстановитьСерию(Серия));
			Если Серия = "План" Тогда
				СтруктураПараметров.СерияПлан.Цвет = ПараметрыОтчета.мСтильДиаграммыПланУтвержденный;
			ИначеЕсли Серия = "Факт" Тогда
				СтруктураПараметров.СерияФакт.Цвет = ПараметрыОтчета.мСтильДиаграммыФакт;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ВывестиВыборку(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), СтруктураПараметров, 0, , ПараметрыОтчета);
	
	ДиаграммаГанта.ПоказатьУровеньТочек(0);
	ДиаграммаГанта.Обновление = Истина;
	
КонецПроцедуры // СформироватьОтчет()


////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ИЗМЕРЕНИЯМИ, ПОКАЗАТЕЛЯМИ И ПОЛЯМИ ОТЧЕТОВ

Процедура ДобавитьВТекстПостроителяИнформациюОГородеОбласти(ТаблицаВидовОбъектовКИ, Текст, СтруктураПредставлениеПолей, мСоответствиеНазначений, 
	                                          СтруктураПараметры, 
	                                          ЗаменятьПоля = "//ОБЛАСТЬ_ГОРОД: ПОЛЯ", 
	                                          ЗаменятьСоединения = "//ОБЛАСТЬ_ГОРОД: СОЕДИНЕНИЯ") Экспорт

											  
	// Добавляемые фрагменты запроса
	ТекстИсточникиСведений ="";
	ТекстПоля = "";
	
	
	НомерВидаКИО = 0;
	// Для каждого объекта-владельца контактной информации получим список видов контактной информации
	// и присоединим их к запросу
	Для Каждого СтрокаТаблицыВидовОбъектов ИЗ ТаблицаВидовОбъектовКИ Цикл
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации", СтрокаТаблицыВидовОбъектов.ВидОбъекта);
		Запрос.УстановитьПараметр("ТипОбъектаКонтактнойИнформации", Перечисления.ТипыКонтактнойИнформации.Адрес);
		
		// Текст выборки всех видов контактной информации для заданного вида объекта:  Заданные в справочнике "ВидыКонтактнойИнформации"
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ВидыКонтактнойИнформации.Наименование КАК Наименование,
		               |	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации КАК Вид,
		               |	ВидыКонтактнойИнформации.Ссылка КАК Объект
		               |ИЗ
		               |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		               |ГДЕ
		               |	ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
		               |	И ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ВидОбъектаКонтактнойИнформации
		               |	И ВидыКонтактнойИнформации.Тип = &ТипОбъектаКонтактнойИнформации";
		
		
		ВыборкаВидовИнформации = Запрос.Выполнить().Выбрать();	
		
		Пока ВыборкаВидовИнформации.Следующий() цикл
			НомерВидаКИО= НомерВидаКИО + 1;
			ИмяПоля = "КИ_" + НомерВидаКИО;
			ИдентификаторВидаИнформации = ВыборкаВидовИнформации.Объект;
						
			// Формируем описание полей запроса
				ТекстПоля = ТекстПоля + ",   				
			|	Выборка"+ИмяПоля+ ".Поле2 КАК " + ИмяПоля+"Область, 
			|	Выборка"+ИмяПоля+ ".Поле4 КАК " + ИмяПоля+"Город";
				
				ТекстИсточникиСведений = ТекстИсточникиСведений + Символы.ПС + 
				"{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК Выборка" + ИмяПоля + "
				|ПО Выборка" + ИмяПоля + ".Объект = " + СтрокаТаблицыВидовОбъектов.ПутьКДанным + "
				|И  Выборка" + ИмяПоля + ".Вид = &Параметр" + ИмяПоля + "}";
								
			// параметр для выборки значений по текущему виду информации
			СтруктураПараметры.Вставить("Параметр" + ИмяПоля, ИдентификаторВидаИнформации);
			
			// представление вида контактной информации
			ПредставлениеПоляОбласть = СокрЛП(ВыборкаВидовИнформации.Наименование) + ":Область";
			ПредставлениеПоляГород   = СокрЛП(ВыборкаВидовИнформации.Наименование) + ":Город";
			СтруктураПредставлениеПолей.Вставить(ИмяПоля +"Область", ПредставлениеПоляОбласть);
			СтруктураПредставлениеПолей.Вставить(ИмяПоля + "Город", ПредставлениеПоляГород);
			
		КонецЦикла;			
	КонецЦикла;     
											  
	Текст = СтрЗаменить(Текст, ЗаменятьПоля, ТекстПоля);
	Текст = СтрЗаменить(Текст, ЗаменятьСоединения, ТекстИсточникиСведений);

КонецПроцедуры // ДобавитьВТекстПостроителяИнформациюОГородеОбласти()

// Процедура заполнения начальных настроек по макету для универсального отчета или отчета на базе универсального
Процедура ЗаполнитьНачальныеНастройкиПоМакету(МакетПараметрыОтчетов, СтруктураПредставлениеПолей, МассивОтбора, Контекст, ТипОтчета) Экспорт

	ИмяРегистра = Контекст.ИмяРегистра;
	ПОстроительОтчета = Контекст.ПостроительОтчета;

	Контекст.Показатели.Очистить();

	//Очистим отбор
	Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
		ПостроительОтчета.Отбор.Удалить(0);
	КонецЦикла; 

	//Очистим порядок
	Пока ПостроительОтчета.Порядок.Количество()>0 Цикл
		ПостроительОтчета.Порядок.Удалить(0);
	КонецЦикла; 

	ТекстПоляЗапроса = "";
	ТекстПоляИтоговЗапроса = "";
	ТекстПоляПоказатели = "";
	ТекстПоляИтогов = "";
	ТекстВыводимыеПоляЗапроса = "";
	ТекстПоляУпорядочивания = "";
	ТекстПоляИзмерений = "";

	ТекстВыводимыеПоляПериоды = "";
	ТекстПоляИтоговПериоды = "";

	ТекстИсточникиСведений ="";
	ТекстПоляКатегорий = "";
	ТекстПоляГруппировки = "";

	Если НЕ ЗначениеЗаполнено(Контекст.мНазваниеОтчета) И Не ПустаяСтрока(ИмяРегистра) Тогда

		Контекст.мНазваниеОтчета = Метаданные.РегистрыНакопления[ИмяРегистра].Представление() + ?(ТипОтчета = "ОстаткиИОбороты", ": остатки и обороты", "");

	КонецЕсли; 

	ОбластьПоказатели = МакетПараметрыОтчетов.ПолучитьОбласть("Показатели");

	ОбластьПоказателиВысота = ОбластьПоказатели.ВысотаТаблицы;

	ВидРегистра = Метаданные.РегистрыНакопления[ИмяРегистра].ВидРегистра;

	МассивИзмеренийКолонки = Новый Массив;
	
	МассивВыбранныеПоляПоУмолчанию = Новый Массив;
	
	МассивИзмеренияСтрокиПоУмолчанию = Новый Массив;
	
	ЕстьИнформацияОГородеИОбласти = ?(Метаданные.РегистрыНакопления[ИмяРегистра].Измерения.Найти("Контрагент")<>Неопределено,Истина,Ложь);
	
	Если (ТипОтчета = "СписокКроссТаблица") или (ТипОтчета = "Диаграмма") Тогда

		Если ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			ТипПоляРегистра="Остаток";

			// Отчеты по остаткам - на дату
			Контекст.мРежимВводаПериода = 1;
			
		ИначеЕсли ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
			ТипПоляРегистра="Оборот";

			Контекст.мРежимВводаПериода = 0;
		КонецЕсли;
	КонецЕсли;

	Для НСтр = 1 По ОбластьПоказателиВысота Цикл

		// Добавляем строки, если возможен вывод не только оборотов, но и остатков
		Если НЕ Булево(СокрЛП(ОбластьПоказатели.Область(НСтр, 4).Текст)) Тогда

			ИмяПоля           = СокрЛП(ОбластьПоказатели.Область(НСтр, 1).Текст);
			ПредставлениеПоля = СокрЛП(ОбластьПоказатели.Область(НСтр, 2).Текст);
			ОписаниеПоля      = СокрЛП(ОбластьПоказатели.Область(НСтр, 3).Текст);
			ВклПоУмолчанию    = Булево(СокрЛП(ОбластьПоказатели.Область(НСтр, 5).Текст));
			ФорматнаяСтрока   = СокрЛП(ОбластьПоказатели.Область(НСтр, 6).Текст);
			СтрИзмерения      = СокрЛП(ОбластьПоказатели.Область(НСтр, 7).Текст);
			СтдВалюта         = СокрЛП(ОбластьПоказатели.Область(НСтр, 8).Текст);

			Если Врег(СтдВалюта) = "УПР" Тогда
				ПредставлениеПоля = ПредставлениеПоля + " в " +глЗначениеПеременной("ВалютаУправленческогоУчета");
			ИначеЕсли Врег(СтдВалюта) = "РЕГЛ" Тогда
				ПредставлениеПоля = ПредставлениеПоля + " в " +глЗначениеПеременной("ВалютаРегламентированногоУчета");
			КонецЕсли;

			Контекст.мСтруктураСвязиПоказателейИИзмерений.Вставить(ИмяПоля, Новый Структура(СтрИзмерения));

			Если ПустаяСтрока(ОписаниеПоля) Тогда
				ОписаниеПоля = ИмяПоля;
			КонецЕсли;

			Если (ТипОтчета = "СписокКроссТаблица") Или (ТипОтчета = "Диаграмма") Тогда
				ТекстПоляПоказатели = ТекстПоляПоказатели + ",
				|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", ТипПоляРегистра) + " КАК " + ИмяПоля;

				ТекстПоляИтоговЗапроса = ТекстПоляИтоговЗапроса + ",
				|	СУММА(" + ИмяПоля + ")";

				ТекстПоляУпорядочивания = ТекстПоляУпорядочивания + ",
				|	" + ИмяПоля;

				СтруктураПредставлениеПолей.Вставить(ИмяПоля, ПредставлениеПоля);
			ИначеЕсли ТипОтчета = "ОстаткиИОбороты" Тогда

				ТекстПоляПоказатели = ТекстПоляПоказатели + ",
				|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "НачальныйОстаток") + " КАК " + ИмяПоля + "НачальныйОстаток,
				|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "КонечныйОстаток")  + " КАК " + ИмяПоля + "КонечныйОстаток,
				|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "Приход") 		  + " КАК " + ИмяПоля + "Приход,
				|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "Расход") 		  + " КАК " + ИмяПоля + "Расход";

				ТекстПоляИтоговЗапроса = ТекстПоляИтоговЗапроса + ",
				|	СУММА(" + ИмяПоля + "НачальныйОстаток),
				|	СУММА(" + ИмяПоля + "КонечныйОстаток),
				|	СУММА(" + ИмяПоля + "Приход),
				|	СУММА(" + ИмяПоля + "Расход)";

				ТекстПоляУпорядочивания = ТекстПоляУпорядочивания + ",
				|	" + ИмяПоля + "НачальныйОстаток,
				|	" + ИмяПоля + "КонечныйОстаток,
				|	" + ИмяПоля + "Приход,
				|	" + ИмяПоля + "Расход";

				СтруктураПредставлениеПолей.Вставить(ИмяПоля+"НачальныйОстаток", ПредставлениеПоля + " нач.ост.");
				СтруктураПредставлениеПолей.Вставить(ИмяПоля+"КонечныйОстаток", ПредставлениеПоля + " кон.ост." );
				СтруктураПредставлениеПолей.Вставить(ИмяПоля+"Приход", ПредставлениеПоля+" приход");
				СтруктураПредставлениеПолей.Вставить(ИмяПоля+"Расход", ПредставлениеПоля+" расход");
			КОнецЕсли;

			// Показатели заносятся в специальную таблицу 
			СтрПоказатели = Контекст.мТаблицаПоказатели.Добавить();
			СтрПоказатели.ИмяПоля           = ИмяПоля;
			СтрПоказатели.ПредставлениеПоля = ПредставлениеПоля;
			СтрПоказатели.ФорматнаяСтрока   = ФорматнаяСтрока;

			// ... и добавляются в список
			Показатель = Контекст.Показатели.Добавить();
			Показатель.Имя           = ИмяПоля;
			Показатель.Представление = ПредставлениеПоля;
			Показатель.Использование = ВклПоУмолчанию;

		КонецЕсли; 
	КонецЦикла;

	ОбластьГруппировки = МакетПараметрыОтчетов.ПолучитьОбласть("Группировки");

	ОбластьГруппировкиВысота = ОбластьГруппировки.ВысотаТаблицы;

	ОписаниеТиповКатегории = Новый ОписаниеТипов("СправочникСсылка.КатегорииОбъектов");

	Запрос = Новый Запрос;

	Запрос.Текст = "";

	ТаблицаПолей = Новый ТаблицаЗначений;
	ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и
	                                               // категории. Используется в условии соединения с регистром сведений,
	                                               // хранящим значения свойств или категорий
	ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
	ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
//	ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории.
	                                               // Не используется.
	ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта

	Для НСтр = 1 По ОбластьГруппировкиВысота Цикл

		// Добавляем строки, если возможен вывод не только оборотов но и остатков.
		Если НЕ Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 4).Текст)) Тогда

			ИмяПоля           = СокрЛП(ОбластьГруппировки.Область(НСтр, 1).Текст);
			ПредставлениеПоля = СокрЛП(ОбластьГруппировки.Область(НСтр, 2).Текст);
			ОписаниеПоля      = СокрЛП(ОбластьГруппировки.Область(НСтр, 3).Текст);
			ВклПоУмолчанию    = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 5).Текст));
			Если (ТипОтчета = "Диаграмма") Тогда
				РассчитыватьИтоги = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 6).Текст));
				РассчитыватьИтогиПоИерархии = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 7).Текст));
				ВклВОтбор    = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 13).Текст));
			Иначе
				ФорматнаяСтрока   = СокрЛП(ОбластьГруппировки.Область(НСтр, 6).Текст);
				РассчитыватьИтоги = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 7).Текст));
				РассчитыватьИтогиПоИерархии = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 8).Текст));
				ВклВОтбор    = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 11).Текст));
			КонецЕсли;
			
			Если (ТипОтчета = "СписокКроссТаблица") Или (ТипОтчета = "Диаграмма") Тогда
				ИтогВКолонке      = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 9).Текст));
			КонецЕсли;


			Если НЕ ПустаяСтрока(ФорматнаяСтрока) Тогда
				Контекст.СтруктураФорматаПолей.Вставить(ИмяПоля, ФорматнаяСтрока);
			КонецЕсли;

			Если ПустаяСтрока(ОписаниеПоля) Тогда
				ОписаниеПоля = ИмяПоля;
			КонецЕсли;

			// Для итогов
			ТекстПоляИтогов = ТекстПоляИтогов + ",
			|	" + ОписаниеПоля + ".* КАК " + ИмяПоля;

			// Для списка всех полей
			ТекстВыводимыеПоляЗапроса = ТекстВыводимыеПоляЗапроса + ",
			|	" + ОписаниеПоля + ".* КАК " + ИмяПоля;

			Если ВклПоУмолчанию Тогда // добавим сразу в список полей

				МассивВыбранныеПоляПоУмолчанию.Добавить(ИмяПоля);

				Если РассчитыватьИтоги Тогда // добавим сразу в итоги

					МассивИзмеренияСтрокиПоУмолчанию.Добавить(ИмяПоля);

				КонецЕсли;

				Если (ТипОтчета = "СписокКроссТаблица") Или (ТипОтчета = "Диаграмма") Тогда
					Если ИтогВКолонке Тогда
						МассивИзмеренийКолонки.Добавить(ИмяПоля);
					КонецЕсли;
				КонецЕсли;

			КонецЕсли; 

			Если ВклВОтбор Тогда

				МассивОтбора.Добавить(ИмяПоля);

			КонецЕсли;

			СтруктураПредставлениеПолей.Вставить(ИмяПоля, ПредставлениеПоля);

			СтрНазначение = СокрЛП(ОбластьГруппировки.Область(НСтр, 10).Текст);

			Индекс = Нстр-1;

			Если Не ПустаяСтрока(СтрНазначение) Тогда
				Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов[Лев(СтрНазначение, Найти(СтрНазначение+",", ",")-1)];
			Иначе
				Назначение = Неопределено;
			КонецЕсли;

			Если Контекст.ИспользоватьСвойстваИКатегории И Назначение <> Неопределено Тогда

				НоваяСтрока = ТаблицаПолей.Добавить();
				НоваяСтрока.ПутьКДанным = ОписаниеПоля;
				НоваяСтрока.Представление = ПредставлениеПоля;
				НоваяСтрока.Назначение = Назначение;

			КонецЕсли;

		КонецЕсли;
	КонецЦикла;

	// Предопределенные группировки по стандартным периодам
	
	ТекстПоляГде = Сред(ТекстВыводимыеПоляЗапроса, 2);

	Если ((ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты) И ((ТипОтчета = "СписокКроссТаблица")ИЛИ(ТипОтчета = "Диаграмма"))) ИЛИ (ТипОтчета = "ОстаткиИОбороты") Тогда

		// Для списка всех полей
		ТекстПоляИтоговПериоды = ТекстПоляИтоговПериоды + ",
		|	НачалоПериода(Период, День) КАК ПериодДень ,
		|	НачалоПериода(Период, Неделя) КАК ПериодНеделя ,
		|	НачалоПериода(Период, Декада) КАК ПериодДекада ,
		|	НачалоПериода(Период, Месяц) КАК ПериодМесяц ,
		|	НачалоПериода(Период, Квартал) КАК ПериодКвартал ,
		|	НачалоПериода(Период, Полугодие) КАК ПериодПолугодие ,
		|	НачалоПериода(Период, Год) КАК ПериодГод";

		ТекстВыводимыеПоляПериоды = ТекстВыводимыеПоляПериоды + ",
		|	НачалоПериода(Период, День) КАК ПериодДень ,
		|	НачалоПериода(Период, Неделя) КАК ПериодНеделя ,
		|	НачалоПериода(Период, Декада) КАК ПериодДекада ,
		|	НачалоПериода(Период, Месяц) КАК ПериодМесяц ,
		|	НачалоПериода(Период, Квартал) КАК ПериодКвартал ,
		|	НачалоПериода(Период, Полугодие) КАК ПериодПолугодие ,
		|	НачалоПериода(Период, Год) КАК ПериодГод";

		СтруктураПредставлениеПолей.Вставить("Период", "Период");
		СтруктураПредставлениеПолей.Вставить("ПериодДень", "По дням");
		СтруктураПредставлениеПолей.Вставить("ПериодНеделя", "По неделям");
		СтруктураПредставлениеПолей.Вставить("ПериодДекада", "По декадам");
		СтруктураПредставлениеПолей.Вставить("ПериодМесяц", "По месяцам");
		СтруктураПредставлениеПолей.Вставить("ПериодКвартал", "По кварталам");
		СтруктураПредставлениеПолей.Вставить("ПериодПолугодие", "По полугодиям");
		СтруктураПредставлениеПолей.Вставить("ПериодГод", "По годам");

		// Для списка всех полей
		ТекстВыводимыеПоляЗапроса = ТекстВыводимыеПоляЗапроса + ",
		|	Период ,
		|	Регистратор.* КАК Регистратор";

		СтруктураПредставлениеПолей.Вставить("Регистратор", "Документ движения (Регистратор)");
	КонецЕсли;

	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ //РАЗЛИЧНЫЕ" 
	+ Сред(ТекстПоляЗапроса + ТекстПоляПоказатели,2) 
	+ Символы.ПС + "{ВЫБРАТЬ " + Сред(ТекстВыводимыеПоляЗапроса+ТекстПоляПоказатели+"
	|//ОБЛАСТЬ_ГОРОД: ПОЛЯ
	|	//СВОЙСТВА
	|"+ТекстВыводимыеПоляПериоды, 2) + "}"
	;
	
	Если (ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты И ((ТипОтчета = "СписокКроссТаблица")ИЛИ(ТипОтчета = "Диаграмма"))) Тогда
		Текст =  Текст +
		"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".Обороты(&ДатаНач, &ДатаКон, {&Периодичность}, ";

		СтруктураПредставлениеПолей.Вставить("Периодичность", "Периодичность разворота итогов");

	ИначеЕсли (ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки И ((ТипОтчета = "СписокКроссТаблица")ИЛИ(ТипОтчета = "Диаграмма"))) Тогда
		Текст =  Текст +
		"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".Остатки(&ДатаКон, ";
	ИначеЕсли ТипОтчета = "ОстаткиИОбороты" Тогда
		Текст = Текст+
		"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".ОстаткиИОбороты(&ДатаНач, &ДатаКон, {&Периодичность}";

		СтруктураПредставлениеПолей.Вставить("Периодичность", "Периодичность разворота итогов");

		Текст = Текст + ", ";

		// Пропуск - неиспользуемый параметр дополнения
		Текст = Текст + ", ";
	КонецЕсли;

	Текст = Текст + "{"+ТекстПоляГде+"}) КАК ТаблицаРегистра
	|//ОБЛАСТЬ_ГОРОД: СОЕДИНЕНИЯ
	|//СОЕДИНЕНИЯ";

	Если Не ПустаяСтрока(ТекстПоляГруппировки) Тогда

		Текст = Текст + Символы.ПС + "СГРУППИРОВАТЬ ПО " + Сред(ТекстПоляГруппировки, 2) + "
		|//СГРУППИРОВАТЬПО
		|";

	КонецЕсли; 

	// Отбор
	Текст = Текст + Символы.ПС + "{ГДЕ " + Сред(ТекстВыводимыеПоляЗапроса, 2) + "
	|//ОБЛАСТЬ_ГОРОД: ПОЛЯ
	|//СВОЙСТВА
	|//КАТЕГОРИИ
	|}";

	// Порядок
	Текст = Текст + Символы.ПС + "{УПОРЯДОЧИТЬ ПО " + Сред(ТекстВыводимыеПоляЗапроса+ТекстПоляУпорядочивания, 2) + "
	|//ОБЛАСТЬ_ГОРОД: ПОЛЯ
	|//СВОЙСТВА
	|}";

	Если Не ПустаяСтрока(ТекстПоляИтогов) Тогда 
		Текст = Текст + Символы.ПС +  
		"{ИТОГИ ПО " + Сред(ТекстПоляИтогов+ТекстПоляИтоговПериоды, 2) + "
		|//ОБЛАСТЬ_ГОРОД: ПОЛЯ
		|//СВОЙСТВА
		|}";
	КонецЕсли;

	Текст = Текст + Символы.ПС +  
	"ИТОГИ  " + Сред(ТекстПоляИтоговЗапроса, 2) + Символы.ПС + 
	"ПО ОБЩИЕ " + ТекстПоляИзмерений;

	// Автоупорядочивание
	Текст = Текст + Символы.ПС + "АВТОУПОРЯДОЧИВАНИЕ ";
	
	ТекстПоляКатегорий = "";
	ТекстПоляСвойств = "";
	
	Если Контекст.ИспользоватьСвойстваИКатегории = Истина Тогда

		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, 
				Контекст.мСоответствиеНазначений, ПостроительОтчета.Параметры
				,, ТекстПоляКатегорий, ТекстПоляСвойств,,,,,,Контекст.мСтруктураДляОтбораПоКатегориям);

	КонецЕсли;

	Если  ЕстьИнформацияОГородеИОбласти Тогда
		// Таблица описания видов объектов контактной информации для возможности вывода в отчет
		ТаблицаВидовОбъектовКИ = Новый ТаблицаЗначений;
		ТаблицаВидовОбъектовКИ.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляется контактная информация
		ТаблицаВидовОбъектовКИ.Колонки.Добавить("Представление");// представление поля, для которого добавляется контактная информация
		ТаблицаВидовОбъектовКИ.Колонки.Добавить("ВидОбъекта");   // вид объекта-владельца контактной информации
		ТаблицаВидовОбъектовКИ.Колонки.Добавить("СтрокаТипОбъекта");   // тип объекта-владельца контактной информации
		
		НоваяСтрока = ТаблицаВидовОбъектовКИ.Добавить();
		НоваяСтрока.ПутьКДанным = "Контрагент";
		НоваяСтрока.Представление = "Контрагент";
		НоваяСтрока.ВидОбъекта = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
		НоваяСтрока.СтрокаТипОбъекта = "Справочник.Контрагенты";
		
		// Добавим строки запроса, необходимые для выборки контактной информации
		ДобавитьВТекстПостроителяИнформациюОГородеОбласти(ТаблицаВидовОбъектовКИ, Текст, СтруктураПредставлениеПолей, Контекст.мСоответствиеНазначений, ПостроительОтчета.Параметры);
	КонецЕсли;
	
		
	ПостроительОтчета.Текст = Текст;
	
	Для каждого Элемент Из МассивВыбранныеПоляПоУмолчанию Цикл
	
		ПостроительОтчета.ВыбранныеПоля.Добавить(Элемент);
	
	КонецЦикла;
	
	Для каждого Элемент Из МассивИзмеренияСтрокиПоУмолчанию Цикл
	
		ПостроительОтчета.ИзмеренияСтроки.Добавить(Элемент);
	
	КонецЦикла;

	Для Каждого Показатель из Контекст.мТаблицаПоказатели Цикл
		Если (ТипОтчета = "СписокКроссТаблица") Или (ТипОтчета = "Диаграмма") Тогда

			ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.ИмяПоля, ПостроительОтчета);

		ИначеЕсли ТипОтчета = "ОстаткиИОбороты" Тогда

			ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.ИмяПоля + "НачальныйОстаток", ПостроительОтчета);
			ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.ИмяПоля + "КонечныйОстаток", ПостроительОтчета);
			ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.ИмяПоля + "Приход", ПостроительОтчета);
			ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.ИмяПоля + "Расход", ПостроительОтчета);

		КонецЕсли;
	КонецЦикла;

	Если Контекст.ИспользоватьСвойстваИКатегории = Истина Тогда

		УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, Контекст.мСоответствиеНазначений, СтруктураПредставлениеПолей);
		
	КонецЕсли;

	Если (ТипОтчета = "СписокКроссТаблица") ИЛИ (ТипОтчета = "Диаграмма") Тогда
		Для каждого Элемент Из МассивИзмеренийКолонки Цикл

			Измерение = ПостроительОтчета.ИзмеренияСтроки.Найти(Элемент);
			Если Измерение <> Неопределено Тогда
				ПостроительОтчета.ИзмеренияСтроки.Удалить(Измерение);
			КонецЕсли;

			ПостроительОтчета.ИзмеренияКолонки.Добавить(Элемент);
		
		КонецЦикла; 
	КонецЕсли;

КонецПроцедуры // ЗаполнитьНачальныеНастройкиПоМакету()

// Процедура настройки вывода данных по валютам
//
Функция НастройкаВыводаДанныхПоВалютам(Счет) Экспорт
	
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ФормироватьОтчетыБезДанныхПоВалютам") Тогда
		Возврат Ложь;
	Иначе
		Возврат Счет.Валютный; 
	КонецЕсли;
	
КонецФункции

//Процедура проверяет ведение однофирменности и при необходимости запрещает изменять организацию в ограничениях
Процедура ПроизвестиПроверкуНаВедениеОднофирменности(Организация, УчетПоВсемОрганизациям=Истина) Экспорт
	
	ОргПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяОрганизация");
	Если ЗначениеЗаполнено(ОргПоУмолчанию) Тогда
		Если ТипЗнч(Организация) = Тип("СписокЗначений") Тогда
			Если (Организация.Количество() = 0) Или (Не УчетПоВсемОрганизациям) Тогда
				Организация = Новый СписокЗначений;
				Организация.Добавить(ОргПоУмолчанию);
			КонецЕсли;
		Иначе
			Организация = ОргПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
    
КонецПроцедуры

// процедура поддержка одновирменности для БухОтчетов
Процедура ПоддержкаОднофирменностиДляБухОтчетов(Форма, Организация, УчетПоВсемОрганизациям) Экспорт
	
	//Если (Форма.ИмяРегистраБухгалтерии = "Налоговый") И (Форма.ЭтотОбъект.Метаданные().Имя <> "ОборотноСальдоваяВедомостьНалоговый")
	//												  И (Форма.ЭтотОбъект.Метаданные().Имя <> "ОборотноСальдоваяВедомостьПоСчетуНалоговый")Тогда
	Если Форма.Метаданные().Реквизиты.Найти("ПредставлениеСпискаСтруктурныхЕдиниц") = Неопределено Тогда
		ПроизвестиПроверкуНаВедениеОднофирменности(Организация);
		Форма.ЭлементыФормы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
	Иначе
		ПроизвестиПроверкуНаВедениеОднофирменности(Организация, УчетПоВсемОрганизациям);
		Форма.ЭлементыФормы.ПредставлениеСпискаСтруктурныхЕдиниц.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
		Форма.ПредставлениеСпискаСтруктурныхЕдиниц = РаботаСДиалогами.ВыгрузитьСписокВСтроку(Организация);
	КонецЕсли;
	
КонецПроцедуры

// процедура поддержка одновирменности для формы настроек БухОтчетов
Процедура ПоддержкаОднофирменностиДляФормыНастроекБухОтчетов(Форма, УчетПоВсемОрганизациям) Экспорт
	
	//Если (Форма.ИмяРегистраБухгалтерии = "Налоговый") И (Форма.ЭтотОбъект.Метаданные().Имя <> "ОборотноСальдоваяВедомостьНалоговый") 
	//												  И (Форма.ЭтотОбъект.Метаданные().Имя <> "ОборотноСальдоваяВедомостьПоСчетуНалоговый")Тогда
	Если Форма.Метаданные().Реквизиты.Найти("ПредставлениеСпискаСтруктурныхЕдиниц") = Неопределено Тогда
		Форма.ЭлементыФормы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
	Иначе
		Форма.ЭлементыФормы.ПредставлениеСпискаСтруктурныхЕдиниц.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВТекстСВойстваОбщие(Текст, Знач ТекстПоляСвойств, ЗаменятьСвойстваОбщие="//СВОЙСТВА_ОБЩИЕ") Экспорт
	
	ТекстПоляСвойств=ТекстПоляСвойств+",";
	ТекстПсевдонимыСвойств = "";
	
	Пока Найти(ТекстПоляСвойств, "КАК")>0 Цикл
		
		// Псевдоним поля свойства находится между КАК и ,
		ПсевдонимПоляСвойства = Сред(ТекстПоляСвойств, Найти(ТекстПоляСвойств, "КАК")+4);
		
		ПсевдонимПоляСвойства = Лев(ПсевдонимПоляСвойства, Найти(ПсевдонимПоляСвойства, ",")-1);
		
		ТекстПсевдонимыСвойств = ТекстПсевдонимыСвойств + ", " + ПсевдонимПоляСвойства;
		
		ТекстПоляСвойств = Сред(ТекстПоляСвойств, Найти(ТекстПоляСвойств, "КАК") + СтрДлина(ПсевдонимПоляСвойства)+2)
		
	КонецЦикла;
	
	Текст = СтрЗаменить(Текст, ЗаменятьСвойстваОбщие, ТекстПсевдонимыСвойств);
	
КонецПроцедуры // ДобавитьВТекстСВойстваОбщие()

// Функция определяет дату начала периода определяемого количеством месяцев и датой окончания
//
// Параметры
//  
//  ДатаОкончания - Дата, дата окончания периода
//  КолМесяцев    - Число, количество месяцев периода
//
// Возвращаемое значение:
//   Дата
//
Функция НайтиНачальнуюДатуПериодаМесяцев(ДатаОкончания, КолМесяцев) Экспорт
	
	НомерМесяца = Месяц(ДатаОкончания);
	
	НомерНовогоМесяца = НомерМесяца - КолМесяцев + 1;
	Если НомерНовогоМесяца <= 0 Тогда
		ЧислоГода = Год(ДатаОкончания) - 1;
		НомерНовогоМесяца = 12 - НомерНовогоМесяца;
	Иначе
		ЧислоГода = Год(ДатаОкончания);
	КонецЕсли;
	
	Попытка
		ДатыНачала = НачалоДня(Дата(СтрЗаменить(Строка(ЧислоГода), Символы.НПП, "") + ?(НомерНовогоМесяца < 10, ("0" + Строка(НомерНовогоМесяца)), Строка(НомерНовогоМесяца)) + "01000000"));
	Исключение
		ДатыНачала = '00010101000000';
	КонецПопытки;
	
	Возврат ДатыНачала;
	
КонецФункции // НайтиНачальнуюДатуПериодаМесяцев()

// Функция определяет количество секунд периода по типу периода
//
// Параметры
//  ПериодСсылка - Тип периода, ПеречислениеСсылка
//
// Возвращаемое значение:
//   Число, количество секунд периода
//
Функция КоличествоСекундПериода(ПериодСсылка) Экспорт

	Если ПериодСсылка = Перечисления.Периодичность.День Тогда
	
		Возврат 60*60*24;

	ИначеЕсли ПериодСсылка = Перечисления.Периодичность.Неделя Тогда
	
		Возврат 60*60*24*7;
	
	ИначеЕсли ПериодСсылка = Перечисления.Периодичность.Месяц Тогда

		Возврат 60*60*24*7*4;
	
	ИначеЕсли ПериодСсылка = Перечисления.Периодичность.Квартал Тогда
	
		Возврат 60*60*24*7*4*3;
	
	ИначеЕсли ПериодСсылка = Перечисления.Периодичность.Год Тогда
	
		Возврат 60*60*24*7*4*3*4;

	Иначе

		Возврат 0;
		
	КонецЕсли; 

КонецФункции // КоличествоСекундПериода()

// Функция определяет границу периода, вторую, по отношению к переданному параметру
//
// Параметры
//  ПериодСсылка  - тип периода, ПеречислениеСсылка
//  НачалоПериода - Булево, если истина то определяем начало периода, иначе конец
//  ДатаПериода   - Дата, относительно которой будет определяться вторая граница
//
// Возвращаемое значение:
//  Дата - вторая граница периода
//
Функция ОпределитьВторуюГраницуПериода(ПериодСсылка, НачалоПериода, ДатаПериода) Экспорт

	Если НачалоПериода Тогда
		ДатаПериода = КонецДня(ДатаПериода);
	Иначе
		ДатаПериода = НачалоДня(ДатаПериода);
	КонецЕсли; 
	
	Если ПериодСсылка = Перечисления.Периодичность.День Тогда

		Если НачалоПериода Тогда
			Возврат (ДатаПериода - 60*60*24 + 1);
		Иначе
			Возврат (ДатаПериода + 60*60*24 - 1);
		КонецЕсли; 

	ИначеЕсли ПериодСсылка = Перечисления.Периодичность.Неделя Тогда

		Если НачалоПериода Тогда
			Возврат (ДатаПериода - 60*60*24*7 + 1);
		Иначе
			Возврат (ДатаПериода + 60*60*24*7 - 1);
		КонецЕсли; 

	ИначеЕсли ПериодСсылка = Перечисления.Периодичность.Месяц Тогда

		Если НачалоПериода Тогда
			Возврат ДобавитьМесяц(ДатаПериода, -1) + 1;
		Иначе
			Возврат ДобавитьМесяц(ДатаПериода, 1) - 1;
		КонецЕсли; 

	ИначеЕсли ПериодСсылка = Перечисления.Периодичность.Квартал Тогда

		Если НачалоПериода Тогда
			Возврат ДобавитьМесяц(ДатаПериода, -3) + 1;
		Иначе
			Возврат ДобавитьМесяц(ДатаПериода, 3) - 1;
		КонецЕсли; 

	ИначеЕсли ПериодСсылка = Перечисления.Периодичность.Год Тогда

		Если НачалоПериода Тогда
			Возврат ДобавитьМесяц(ДатаПериода, -12) + 1;
		Иначе
			Возврат ДобавитьМесяц(ДатаПериода, 12) - 1;
		КонецЕсли; 

	Иначе

		Возврат '00010101000000';

	КонецЕсли; 

КонецФункции // КоличествоСекундПериода()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С НАСТРОЙКАМИ

// Функция формирует структуру с данными отбора
//
// Параметры
//  Отбор - Отбор
//
// Возвращаемое значение:
//   Структура
//
Функция ПолучитьСтруктуруОтбора(Отбор) Экспорт

	СтруктураОтбора = Новый Структура();
	Для каждого ЭлементОтбора Из Отбор Цикл
		СтрктураЭлементаОтбора = Новый Структура;
		СтрктураЭлементаОтбора.Вставить("ВидСравнения" , ЭлементОтбора.ВидСравнения);
		СтрктураЭлементаОтбора.Вставить("Значение"     , ЭлементОтбора.Значение);
		СтрктураЭлементаОтбора.Вставить("ЗначениеПо"   , ЭлементОтбора.ЗначениеПо);
		СтрктураЭлементаОтбора.Вставить("ЗначениеС"    , ЭлементОтбора.ЗначениеС);
		СтрктураЭлементаОтбора.Вставить("Имя"          , ЭлементОтбора.Имя);
		СтрктураЭлементаОтбора.Вставить("Использование", ЭлементОтбора.Использование);
		СтрктураЭлементаОтбора.Вставить("Представление", ЭлементОтбора.Представление);
		СтрктураЭлементаОтбора.Вставить("ПутьКДанным"  , ЭлементОтбора.ПутьКДанным);
		СтрктураЭлементаОтбора.Вставить("ТипЗначения"  , ЭлементОтбора.ТипЗначения);
		СтруктураОтбора.Вставить("Отбор" + Строка(Отбор.Индекс(ЭлементОтбора)), СтрктураЭлементаОтбора);
	КонецЦикла; 

	Возврат СтруктураОтбора;
	
КонецФункции // ПолучитьСтруктуруОтбора()

// Функция сохраняет реквизиты отчета в структуре. Данные можно восстановить процедурой ВосстановитьРеквизитыОтчета().
// Используется для передачи реквизитов отчета при расшифровке.
// По умолчанию сохраняются все реквизиты отчета, кроме реквизитов имеющих тип Строка, Отчет или Обработка.
// Табличные части также сохраняются.
// Если список реквизитов для сохранения задан явно, список исключений игнорируется.
// Данные передаются в структуре с ключом "_РеквизитыОтчета", значением является структура с сохраненными значениями, ключ - имя реквизита отчета.
// Если передан параметр СтруктНастройка, то данные сохраняются в переданной структуре (под указанным ключом), иначе в новой.
//
Функция СохранитьРеквизитыОтчета(ОтчетОбъект, СтруктНастройка = Неопределено, Знач СтрСохранять = "", Знач СтрНеСохранять = "") Экспорт
	
	СтруктПараметры = ?(СтруктНастройка = Неопределено, Новый Структура, СтруктНастройка);
	
	МетаОтчет = ОтчетОбъект.Метаданные();
	Если ПустаяСтрока(СтрСохранять) Тогда
	
		СтруктДанные = Новый Структура;
		СтруктИсключений = ?(ПустаяСтрока(СтрНеСохранять), Новый Структура, Новый Структура(СтрНеСохранять));
		
		МетаОтчеты    = Метаданные.Отчеты;
		МетаОбработки = Метаданные.Обработки;
		Для Каждого МетаРекв Из МетаОтчет.Реквизиты Цикл
		
			Если СтруктИсключений.Свойство(МетаРекв.Имя) Тогда
				Продолжить; // Реквизит содержится в списке исключений
			КонецЕсли;
			
			ТипыРекв = ОтчетОбъект.Метаданные().Реквизиты[МетаРекв.Имя].Тип.Типы();
			Если ТипыРекв.Количество() = 1 Тогда
			
				// Исключим реквизиты типа Отчет и Обработка (например Унинверсальный отчет)
				МетаНайтиПоТипу = Метаданные.НайтиПоТипу(ТипыРекв[0]);
				Если НЕ МетаНайтиПоТипу = Неопределено  // Реквизит простого типа (число, булево)
				     И (МетаОтчеты.Содержит(МетаНайтиПоТипу) ИЛИ МетаОбработки.Содержит(МетаНайтиПоТипу)) Тогда
					Продолжить; // Отчеты и обработки пропускаем
				КонецЕсли;
				
				// Добавим реквизит в структуру
				СтруктДанные.Вставить(МетаРекв.Имя, ОтчетОбъект[МетаРекв.Имя]);
				
			Иначе // составной тип. считаем что это реквизит, который надо сохранять.
			
				СтруктДанные.Вставить(МетаРекв.Имя, ОтчетОбъект[МетаРекв.Имя]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Сохраним табличные части
		Для Каждого МетаРекв Из МетаОтчет.ТабличныеЧасти Цикл
		
			Если СтруктИсключений.Свойство(МетаРекв.Имя) Тогда
				Продолжить; // Реквизит содержится в списке исключений
			КонецЕсли;
			
			СтруктДанные.Вставить(МетаРекв.Имя, ОтчетОбъект[МетаРекв.Имя].Выгрузить());
			
		КонецЦикла;
		
	Иначе // Список реквизитов задан явно. Их и сохраняем
	
		СтруктДанные = Новый Структура(СтрСохранять);
		Для Каждого ТекРекв Из СтруктДанные Цикл
		
			Если МетаОтчет.Реквизиты.Найти(ТекРекв.Ключ) <> Неопределено Тогда
				СтруктДанные.Вставить(ТекРекв.Ключ, ОтчетОбъект[ТекРекв.Ключ]);
			ИначеЕсли МетаОтчет.ТабличныеЧасти.Найти(ТекРекв.Ключ) <> Неопределено Тогда
				СтруктДанные.Вставить(ТекРекв.Ключ, ОтчетОбъект[ТекРекв.Ключ].Выгрузить());
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктПараметры.Вставить("_РеквизитыОтчета", СтруктДанные);
	
	Возврат СтруктПараметры;

КонецФункции // СохранитьРеквизитыОтчета()

// Функция восстанавливает значения реквизитов отчета, сохраненные в структуре функцией СохранитьРеквизитыОтчета()
//
Процедура ВосстановитьРеквизитыОтчета(ОтчетОбъект, СтруктНастройка) Экспорт
	
	Если ТипЗнч(СтруктНастройка) <> Тип("Структура")
	 ИЛИ НЕ СтруктНастройка.Свойство("_РеквизитыОтчета") Тогда
		Возврат;
	КонецЕсли;
	
	МетаОтчет = ОтчетОбъект.Метаданные();
	Для Каждого СохрРекв Из СтруктНастройка["_РеквизитыОтчета"] Цикл
		Если МетаОтчет.Реквизиты.Найти(СохрРекв.Ключ) <> Неопределено Тогда
			ОтчетОбъект[СохрРекв.Ключ] = СохрРекв.Значение;
		ИначеЕсли МетаОтчет.ТабличныеЧасти.Найти(СохрРекв.Ключ) <> Неопределено Тогда
			ОтчетОбъект[СохрРекв.Ключ].Загрузить(СохрРекв.Значение);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ВосстановитьРеквизитыОтчета()

Функция ПроверкаПериода(Период) Экспорт
	
	Если Период < ПараметрыСеанса.ДатаНачалаЗапретаДляАудиторов И РольДоступна("Аудитор") Тогда
		ДатаОтчета = ПараметрыСеанса.ДатаНачалаЗапретаДляАудиторов;
	ИначеЕсли Период < ПараметрыСеанса.ДатаОкончанияЗапретаДляАудиторов И РольДоступна("Аудитор") Тогда
		ДатаОтчета = ПараметрыСеанса.ДатаОкончанияЗапретаДляАудиторов;
	Иначе
		ДатаОтчета = Период;
	КонецЕсли;
	
	Возврат ДатаОтчета;
	
КонецФункции

#КонецЕсли
