&НаКлиенте
Процедура ОбновитьКарту(Команда) // Обработчик команды формы 
	ОбновитьКартуСервер();  	
КонецПроцедуры  

&НаСервере
Процедура ОбновитьКартуСервер() // Серверная контекстная процедура получения карты маршрута 
	// Конвертируем объект формы в объект бизнес-процесса
	ОбъектБП = РеквизитФормыВЗначение("Объект"); 
	// Вызываем метод получения карты маршрута текущего бизнес-процесса
	Карта = ОбъектБП.ПолучитьКартуМаршрута();      	
КонецПроцедуры

Процедура ПолучитьПлатежноеПоручение()
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлатежноеПоручениеИсходящее.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.ДокументОснование = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПлатежноеПоручение = ВыборкаДетальныеЗаписи.ссылка;
	КонецЦикла;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА 	
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТекущееСостояниеБП()
	ОбновитьКартуСервер();
	Если не ЗначениеЗаполнено(ТекущаяТочка) тогда		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.ТочкаМаршрута,
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителяПоСогласованиюПлатежей КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &Ссылка
		|	И НЕ ЗадачаИсполнителя.Выполнена";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекущаяТочка 	= ВыборкаДетальныеЗаписи.точкамаршрута;
			Задача 			= ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	 УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);	
	Если параметры.Свойство("Задача") тогда
		Задача 			= Параметры.Задача;
		ТекущаяТочка 	= Параметры.Задача.ТочкаМаршрута;	
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() тогда
		ПолучитьТекущееСостояниеБП();
		ПодготовитьФорму(ЭтаФорма);
	КонецЕсли;

	ПолучитьПлатежноеПоручение(); 
	
	
	Если Объект.Ссылка.Пустая() Тогда

		ТекущийИсполнитель = ПараметрыСеанса.ТекущийПользователь;
		Сотрудник = Справочники.СотрудникиОрганизаций.НайтиПоРеквизиту("Физлицо", ТекущийИсполнитель.ФизЛицо); 
		Объект.Подразделение = Сотрудник.ТекущееПодразделениеОрганизации; 
		
	КонецЕсли;

КонецПроцедуры


Процедура ОбновитьИсториюИзменений()
	
	ИсторияИсполнения = "";
	Комментарии.Очистить();
	Для Каждого СтрокаТЧ из Объект.КомментарииПроцесса Цикл
		ИсторияИсполнения = ИсторияИсполнения + Символы.ПС +"["+ СтрокаТЧ.Автор +"]"+ " *** " +СтрокаТЧ.Дата + Символы.Таб + СтрокаТЧ.Комментарий+Символы.ПС;	
	КонецЦикла;
	Макет = БизнесПроцессы.РасчетПоХранениюЗерна.ПолучитьМакет("Макет");
	Обл = Макет.ПолучитьОбласть("Заголовок");
	Комментарии.Вывести(Обл);
	Обл = Макет.ПолучитьОбласть("Строка");
	
	Для каждого СтрокаТЧ Из объект.КомментарииПроцесса Цикл
		Обл.Параметры.Заполнить(СтрокаТЧ);
		Комментарии.Вывести(Обл);
	КонецЦикла;
	
	
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
  УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура ПодготовитьФорму(Форма)
	         
	Объект 			= Форма.Объект;
	Элементы 		= Форма.Элементы;	
	ТекущаяТочка 	= Форма.ТекущаяТочка;
	Задача			= Форма.Задача;
	
	Если задача.Выполнена тогда
		Форма.ТолькоПросмотр = Истина;
		Сообщить("Текущий этап выполнен. Редактирование формы невозможно");
		возврат;
	КонецЕсли;
	Если объект.Завершен тогда
		Форма.Элементы.Группа1.Видимость = ложь; 
		Форма.ТолькоПросмотр = Истина;
		Сообщить("Бизнес-процесс завершен. Редактирование формы невозможно");
		возврат;
	КонецЕсли;
	
	Если Объект.стартован 
		и не ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.РасчетПоХранениюЗерна.ТочкаМаршрута.РаботаСЗаявкойАвтором") Тогда
		элементы.левая.толькопросмотр 		= истина;
		Элементы.правая.Толькопросмотр		= Истина;
				
	КонецЕсли;
	
	 //Элементы.Подразделение.Видимость = Ложь;
	 //Элементы.РуководительСТП.Видимость = Ложь;

	//Элементы.РасчетнаяТаблицаРасчетныйСчет.Доступность 		= Ложь;
	
	Если ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.РасчетПоХранениюЗерна.ТочкаМаршрута.СогласованиеСДиректорОбластноеПредставительство")			тогда
		Элементы.ЗаявкаПрошлаСогласованиеДиректорОбластноеПредставительство.Доступность 		= истина;
		//Элементы.ПроверкаНаПолнотуСведенийВыполнена.Доступность = истина;
		//Элементы.РасчетнаяТаблицаРасчетныйСчет.Доступность 		= Истина;
		
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.РасчетПоХранениюЗерна.ТочкаМаршрута.СогласованиеСОбластноеПредставительство")			тогда       
		Элементы.ОбластноеПредставительство.Доступность 		= истина;
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.РасчетПоХранениюЗерна.ТочкаМаршрута.СогласованиеСДепартаментУчетаИХранения")			тогда
		Элементы.ЗаявкаПрошлаСогласованиеДепартаментУчетаИХранения.Доступность 		= истина;
		
	//ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.РасчетПоХранениюЗерна.ТочкаМаршрута.СогласованиеСРуководителемКД")	тогда
	//	Элементы.ПроверкаДиректоромКДВыполнена.Доступность 		= Истина;
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.РасчетПоХранениюЗерна.ТочкаМаршрута.РаботаСЗаявкойАвтором")
		или не ЗначениеЗаполнено(ТекущаяТочка) тогда
		Элементы.вернутьнадоработку.видимость 				= ложь;
		Элементы.ОтказатьВПоставленнойЗадаче.видимость 		= ложь;
		Элементы.ВыполнитьЭтап.Заголовок = "Выполнено";
	//ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.РасчетПоХранениюЗерна.ТочкаМаршрута.СозданиеПП")	тогда
	//	Элементы.ВыполнитьЭтап.Заголовок = "Ознакомлен";
	//	Элементы.ВернутьНаДоработку.Видимость = Ложь;
	//	Элементы.ОтказатьВПоставленнойЗадаче.Видимость = Ложь;	
	КонецЕсли;
	
	Польз = ПараметрыСеанса.ТекущийПользователь;
	
	Если Польз.ПодачаЗаявокЗаДругиеПодразделения = Истина Тогда
		 Элементы.Подразделение.Видимость = Истина;
		 //Элементы.РуководительСТП.Видимость = Истина;
		
	КонецЕсли;
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьЭтап(Команда)
	ОбработатьБП("ОК");
	ОповеститьОбИзменении(ПредопределенноеЗначение("БизнесПроцесс.РасчетПоХранениюЗерна.ПустаяСсылка"));
	ОповеститьОбИзменении(ПредопределенноеЗначение("Задача.ЗадачаИсполнителяПоСогласованиюПлатежей.ПустаяСсылка"));
	//Таблица = Объект.Подписи.Добавить();
	//Таблица.Статус = ("что то") ;
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВернутьНаДоработку(Команда)
	ОбработатьБП("Возврат");// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьВПоставленнойЗадаче(Команда)
	ОбработатьБП("Отказ");
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьБП(РезультатВозврата)
	
	Если ЭтотОбъект.Объект.ПометкаУдаления = Истина Тогда
		Сообщить("Данный объект помечен на удаление и не может быть изменен!");
		Возврат;
	КонецЕсли;

		
	Если не ОбработатьЭтап(РезультатВозврата) тогда
		Возврат;
	КонецЕсли;
	
	Если КомментарийИсполнителя <> "" тогда
		НС = объект.КомментарииПроцесса.Добавить();
		НС.Автор = ТекущийИсполнитель;
		НС.Дата = ТекущаяДата();
		НС.Комментарий = КомментарийИсполнителя ;
		НС.Этап = ТекущаяТочка;
	КонецЕсли;
	
	Если РезультатВозврата = "ОК" Тогда
		СтатусДокумента = "Согласовано"
	ИначеЕсли РезультатВозврата = "Возврат"  Тогда
		СтатусДокумента = "Возвращено"
	ИначеЕсли РезультатВозврата = "Отказ" Тогда
		СтатусДокумента = "Отказано"
	КонецЕсли;
		
	НоваяЗапись = Объект.Подписи.Добавить();
	НоваяЗапись.Дата				= ТекущаяДата();
	НоваяЗапись.Статус			    = СтатусДокумента;
	НоваяЗапись.Автор				= Пользователи.ТекущийПользователь();
	НоваяЗапись.Этап			    = ТекущаяТочка;
	

	Записать();
	
	
	Если не Задача.Пустая() тогда
		ВыполнитьЗадачу(Задача);
	Иначе
		Стартовать();
	КонецЕсли;
	ОповеститьОбИзменении(ПредопределенноеЗначение("Задача.ЗадачаИсполнителяПоСогласованиюПлатежей.ПустаяСсылка"));
	Закрыть();	
	  
КонецПроцедуры

Процедура Стартовать()
	БП = РеквизитФормыВЗначение("Объект");
	БП.Старт();
	ЗначениеВРеквизитФормы(БП,"Объект");
КонецПроцедуры

&НаКлиенте
Функция ОбработатьЭтап(РезультатВозврата)
	
	Если РезультатВозврата = "ОК" тогда
		ЗначениеВозврата = Истина;
	ИначеЕсли РезультатВозврата = "Возврат" или РезультатВозврата = "Отказ" Тогда
		Если КомментарийИсполнителя = "" тогда
			Предупреждение("Не указана причина в комментарии текущего исполнителя");
			ЗначениеВозврата = Ложь;
		Иначе
			ЗначениеВозврата = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатВозврата = "ОК" тогда 
		ЗначениеПоля = "Разрешено";
	ИначеЕсли РезультатВозврата = "Возврат" Тогда
		ЗначениеПоля = "Возвращено";
	Иначе
		ЗначениеПоля = "Отказано";
	КонецЕсли;
		
	Если ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.РасчетПоХранениюЗерна.ТочкаМаршрута.СогласованиеСДиректорОбластноеПредставительство")			тогда
		Объект.ЗаявкаПрошлаСогласованиеДиректорОбластноеПредставительство = ЗначениеПоля;
		Объект.ПроверкаНаПолнотуСведенийВыполнена = ЗначениеПоля;		
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.РасчетПоХранениюЗерна.ТочкаМаршрута.СогласованиеССогласующим")			тогда
		Объект.ЗаявкаПрошлаСогласованиеСогласующим = ЗначениеПоля;	
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.РасчетПоХранениюЗерна.ТочкаМаршрута.СогласованиеСОбластноеПредставительство")			тогда      
		Объект.ЗаявкаПрошлаСогласованиеОбластноеПредставительство = ЗначениеПоля;
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.РасчетПоХранениюЗерна.ТочкаМаршрута.СогласованиеСДепартаментУчетаИХранения")			тогда     
		Объект.ЗаявкаПрошлаСогласованиеДепартаментУчетаИХранения = ЗначениеПоля;
	КонецЕсли;	
	
	 Возврат ЗначениеВозврата;
	 
КонецФункции


&НаСервереБезКонтекста
Функция ВыполнитьЗадачу(Задача)
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.ВыполнитьЗадачу();
КонецФункции

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПолучитьТекущееСостояниеБП();
	ПодготовитьФорму(ЭтаФорма);
	ОбновитьИсториюИзменений();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦС_АдресацияБизнесПроцессов.Пользователь,
	|	ЦС_АдресацияБизнесПроцессов.Подразделение
	|ИЗ
	|	РегистрСведений.ЦС_АдресацияБизнесПроцессов КАК ЦС_АдресацияБизнесПроцессов
	|ГДЕ
	|	ЦС_АдресацияБизнесПроцессов.Пользователь = &глТекущийПользователь";
	
	Запрос.УстановитьПараметр("глТекущийПользователь", параметрысеанса.текущийпользователь);	
	
	ТолькоПросмотр								= истина;
	элементы.Группа1.Доступность				= Ложь;
	элементы.ФормаКоманднаяПанель.Доступность	= Ложь;	
	
	Если (Не ТекущийОбъект.стартован)  
		Или параметрысеанса.текущийпользователь = Задача.Пользователь
		Или Запрос.Выполнить().Выгрузить().НайтиСтроки(Новый Структура("Пользователь, Подразделение", параметрысеанса.текущийпользователь, Задача.Подразделение)).Количество() <> 0
		Или РольДоступна("ПолныеПрава") тогда
		
		Если (НЕ ТекущийОбъект.Завершен) Тогда
			
			ТолькоПросмотр = ложь;
			элементы.Группа1.Доступность = Истина;
			элементы.ФормаКоманднаяПанель.Доступность = Истина;
		КонецЕсли;
		
	Иначе
		Сообщить("Этап не предусматривает исполнение текущим пользователем. Форма заблокирована");
	КонецЕсли;
	
	//+++ Oleg SmartT. 2021-04-13	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ Файлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий()  Цикл
		
		ОбъектФайла = Выборка.Ссылка;

		Если ОбъектФайла.ТекущаяВерсияРасширение = "pdf" Тогда
			АдресЛоготипа = ОбъектФайла.ТекущаяВерсияТом.ПолныйПутьWindows+ОбъектФайла.ТекущаяВерсияПутьКФайлу;
		ИначеЕсли ОбъектФайла.ТекущаяВерсияРасширение = "jpg" Тогда
			ЭтаФорма.Элементы.АдресЛоготипа.Вид = ВидПоляФормы.ПолеКартинки;
			АдресЛоготипа = НавигационнаяСсылкаКартинки(ОбъектФайла, УникальныйИдентификатор);
		КонецЕсли;
	
	КонецЦикла;
	//--- Oleg SmartT. 2021-04-13		

КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайлаБИТ(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,ЭлементФормы,);

	//// Владельца менять по умолчанию не даем.
	//ФормаВыбора.ПараметрОтборПоВладельцу = Контрагент;

КонецПроцедуры

&НаСервере
Процедура БанковскийСчетКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ФормаСчета = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент);
	              	
	ФормаСчета.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
	ФормаСчета.Отбор.Владелец.Значение      = объект.Контрагент;
	ФормаСчета.Отбор.Владелец.Использование = Истина;
	
	Если не объект.ВалютаДокумента.Пустая() тогда
		ФормаСчета.Отбор.ВалютаДенежныхСредств.Значение	= объект.ВалютаДокумента;
		ФормаСчета.Отбор.ВалютаДенежныхСредств.Использование = Истина;
		ФормаСчета.Отбор.ВалютаДенежныхСредств.ВидСравнения  = ВидСравнения.Равно;
	КонецЕсли;    	
	
	ФормаСчета.РежимВыбора = Истина;
	объект.БанковскийСчетКонтрагента =ФормаСчета.ОткрытьМодально();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Если РольДоступна("СкрытыеПапкиСогласованиеПлатежей") Тогда
	//	ЭтаФорма.Элементы.РуководительСТП.Видимость = Ложь;
	//	ЭтаФорма.Элементы.КурирующийЧП.Видимость = Ложь;
	//	ЭтаФорма.Элементы.ФормируемыйБюджет.Видимость = Ложь;
	//	ЭтаФорма.Элементы.РасчетнаяДатаПлатежа.Видимость = Ложь;
	//	ЭтаФорма.Элементы.Подразделение.Видимость = Ложь;
	//	ЭтаФорма.Элементы.ЗаявкаПрошлаСогласованиеРук.Видимость = Ложь;
	//	ЭтаФорма.Элементы.ЗаявкаПрошлаСогласованиеКурирующимЧП.Видимость = Ложь;
	//	ЭтаФорма.Элементы.РасчетнаяТаблицаКодСтрокиБюджета.Видимость = Ложь;
	//	ЭтаФорма.Элементы.РасчетнаяТаблицаСтатьяБюджета.Видимость = Ложь;
	//	ЭтаФорма.Элементы.РасчетнаяТаблицаВалютаДокумента.Видимость = Ложь;
	//	ЭтаФорма.Элементы.РасчетнаяТаблицаОплаченоПоДоговору.Видимость = Ложь;
	//	ЭтаФорма.Элементы.РасчетнаяТаблицаСуммаДоговора.Видимость = Ложь;
	//	ЭтаФорма.Элементы.РасчетнаяТаблицаГодовойПлан.Видимость = Ложь;
	//	ЭтаФорма.Элементы.РасчетнаяТаблицаФактПредыдущегоПериода.Видимость = Ложь;
	//	ЭтаФорма.Элементы.РасчетнаяТаблицаСуммыПредыдущихПлатежей.Видимость = Ложь;
	//	ЭтаФорма.Элементы.РасчетнаяТаблицаОстатокПланаСУчетомФакта.Видимость = Ложь;
	//	ЭтаФорма.Элементы.СтраницаКарта.Видимость = Ложь;
	//	ЭтаФорма.Элементы.Комментарии1.Видимость = Ложь;

	//КонецЕсли;

	ЭлементОтбора = СписокФайлов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.СписокФайлов.ТекущаяСтрока;
	
	Если СокрЛП(ТекСтрока.Наименование) = "" Тогда
	 	СтандартнаяОбработка = Истина;
		Сообщить("Введите описание файла");
	Иначе
		СтандартнаяОбработка = Ложь;
		УниверсальныеМеханизмы.ОткрытьФайлы(Элементы.СписокФайлов.ТекущиеДанные, глТекущийПользователь, Элементы.СписокФайлов.ВыделенныеСтроки);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаписьФайла(ПолноеИмяФайла, Каталог)
	
	НовОбъектХранилища = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
	НовОбъектХранилища.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяФайла), Новый СжатиеДанных);
	НовОбъектХранилища.ИмяФайла = Сред(ПолноеИмяФайла, СтрДлина(Каталог) + 1);
	НовОбъектХранилища.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
	Если Объект.Ссылка.Пустая() Тогда
		Записать();
	КонецЕсли;
	НовОбъектХранилища.Объект = Объект.Ссылка;
	НовОбъектХранилища.Записать();
		
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Диалог = УниверсальныеМеханизмы.ПолучитьДиалогВыбораФайлов(Ложь);
		
	Если Не Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;

	Попытка  		
		СоздатьЗаписьФайла(Диалог.ПолноеИмяФайла, Диалог.Каталог); 		
		Элементы.СписокФайлов.Обновить();
	Исключение
		Сообщить("" + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СписокФайлов.Отбор.Элементы.Очистить();
	ЭлементОтбора = СписокФайлов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура РасчетнаяТаблицаСтатьяБюджетаПриИзмененииНаСервере()
	
	РассчитатьГодовойПлан();	
	РассчитатьОтклонение();	
		
КонецПроцедуры

&НаКлиенте
Процедура РасчетнаяТаблицаСтатьяБюджетаПриИзменении(Элемент)   
	ТекСтрока = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	ТекСтрока.КодСтрокиБюджета = ТекСтрока.СтатьяБюджета.КодСтрокиБюджета;

	РасчетнаяТаблицаСтатьяБюджетаПриИзмененииНаСервере();
КонецПроцедуры

Процедура РассчитатьГодовойПлан() Экспорт
	
	ПериодПланирования = Объект.Дата;
	
	//План на год
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.УстановитьПараметр("ФормируемыйБюджет", Объект.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("НачалоПериода",НачалоГода(ПериодПланирования));
	Запрос.УстановитьПараметр("КонецПериода",КонецГода(ПериодПланирования));
	Запрос.УстановитьПараметр("Статус",Перечисления.СостоянияОбъектов.Утвержден);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	б_БюджетОбороты.СтатьяБюджета,
	|	б_БюджетОбороты.СуммаОборот
	|ИЗ
	|	РегистрНакопления.б_Бюджет.Обороты(
	|			&Началопериода,
	|			&Конецпериода,
	|			,
	|			Организация = &Организация
	|				И Бюджет = &ФормируемыйБюджет
	|				И Статус = &Статус) КАК б_БюджетОбороты
	|";
	
	тзПлан = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ ИЗ Объект.РасчетнаяТаблица Цикл
		Если СтрокаТЧ.СтатьяБюджета.ЭтоГруппа тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ.ГодовойПлан =  0;
		
		СтрокаТЗ 				= тзПлан.Найти(СтрокаТЧ.СтатьяБюджета, "СтатьяБюджета");
		
		СтрокаТЧ.ГодовойПлан = ?(СтрокаТЗ = НЕОПРЕДЕЛЕНО,0,СтрокаТЗ.СуммаОборот);
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура РассчитатьОтклонение() Экспорт
	
	мСубконтоДоходы = Новый Массив;
	мСубконтоДоходы.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Доходы);
	
	мСубконтоТипыОпераций = Новый Массив;
	мСубконтоТипыОпераций.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ТипыОпераций);
	
	мСубконтоСтатьиЗатрат = Новый Массив;
	мСубконтоСтатьиЗатрат.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиЗатрат);
	
	мСубконтоОС = Новый Массив;
	мСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	
	мСубконтоНМА = Новый Массив;
	мСубконтоНМА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НематериальныеАктивы);
	
	мСписокСчетовПоставщиков = Новый Массив;
	мСписокСчетовПоставщиков.Добавить(ПланыСчетов.Типовой.КраткосрочнаяКредиторскаяЗадолженность);
	
	НачалоПериода = НачалоДня(НачалоГода(Объект.Дата));
	КонецПериода  = КонецМесяца(ДобавитьМесяц(Объект.Дата,-1));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.УстановитьПараметр("мСписокСчетовПоставщиков", мСписокСчетовПоставщиков);
	Запрос.УстановитьПараметр("мСубконтоОС", мСубконтоОС);
	Запрос.УстановитьПараметр("мСубконтоНМА", мСубконтоНМА);
	Запрос.УстановитьПараметр("мСубконтоСтатьиЗатрат", мСубконтоСтатьиЗатрат);
	Запрос.УстановитьПараметр("мСубконтоДоходы", мСубконтоДоходы);
	Запрос.УстановитьПараметр("мСубконтоТипыОпераций", мСубконтоТипыОпераций);
	Запрос.УстановитьПараметр("ФормируемыйБюджет", Объект.ФормируемыйБюджет);
	Запрос.УстановитьПараметр("НачалоПериода",НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",КонецПериода);
	Запрос.УстановитьПараметр("Статус",Перечисления.СостоянияОбъектов.Утвержден);
		
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ОборотПоБУ.СтатьяБюджета КАК СтатьяБюджета,
	|	ОборотПоБУ.Организация КАК Организация,
	|	ОборотПоБУ.Сумма КАК Сумма,
	|	ОборотПоБУ.Регистратор КАК Регистратор,
	|	ОборотПоБУ.ПериодМесяц КАК ПериодМесяц,
	|	ОборотПоБУ.ПериодКвартал КАК ПериодКвартал
	|ПОМЕСТИТЬ ФактическийОборот
	|ИЗ
	|	(ВЫБРАТЬ
	|		б_СоответствияСтатейБюджетаСчетамБУ.СтатьяБюджета КАК СтатьяБюджета,
	|		ЕСТЬNULL(ТиповойОбороты.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|		ВЫБОР
	|			КОГДА б_СоответствияСтатейБюджетаСчетамБУ.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ТОГДА ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) * б_СоответствияСтатейБюджетаСчетамБУ.ПризнакСуммы
	|			ИНАЧЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) * б_СоответствияСтатейБюджетаСчетамБУ.ПризнакСуммы
	|		КОНЕЦ КАК Сумма,
	|		ТиповойОбороты.Регистратор КАК Регистратор,
	|		ТиповойОбороты.ПериодМесяц КАК ПериодМесяц,
	|		ТиповойОбороты.ПериодКвартал КАК ПериодКвартал
	|	ИЗ
	|		РегистрСведений.б_СоответствияСтатейБюджетаСчетамБУ КАК б_СоответствияСтатейБюджетаСчетамБУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					Авто,
	|					Счет В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СоответствияСтатейБюджетаСчетамБУ.Счет
	|						ИЗ
	|							РегистрСведений.б_СоответствияСтатейБюджетаСчетамБУ КАК СоответствияСтатейБюджетаСчетамБУ),
	|					,
	|					,
	|					,
	|					) КАК ТиповойОбороты
	|			ПО (ТиповойОбороты.Счет = б_СоответствияСтатейБюджетаСчетамБУ.Счет)
	|	ГДЕ
	|		б_СоответствияСтатейБюджетаСчетамБУ.СтатьяБюджета.Владелец = &ФормируемыйБюджет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		б_СоответствияСтатейБюджетаДоходамБУ.СтатьяБюджета,
	|		ЕСТЬNULL(ТиповойОбороты.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
	|		ВЫБОР
	|			КОГДА б_СоответствияСтатейБюджетаДоходамБУ.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ТОГДА ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) * б_СоответствияСтатейБюджетаДоходамБУ.ПризнакСуммы
	|			ИНАЧЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) * б_СоответствияСтатейБюджетаДоходамБУ.ПризнакСуммы
	|		КОНЕЦ,
	|		ТиповойОбороты.Регистратор,
	|		ТиповойОбороты.ПериодМесяц,
	|		ТиповойОбороты.ПериодКвартал
	|	ИЗ
	|		РегистрСведений.б_СоответствияСтатейБюджетаДоходамБУ КАК б_СоответствияСтатейБюджетаДоходамБУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					Авто,
	|					Счет В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СоответствияСтатейБюджетаДоходамБУ.Счет
	|						ИЗ
	|							РегистрСведений.б_СоответствияСтатейБюджетаДоходамБУ КАК СоответствияСтатейБюджетаДоходамБУ),
	|					&мСубконтоДоходы,
	|					,
	|					,
	|					) КАК ТиповойОбороты
	|			ПО (ТиповойОбороты.Счет = б_СоответствияСтатейБюджетаДоходамБУ.Счет)
	|				И (ТиповойОбороты.Субконто1 = б_СоответствияСтатейБюджетаДоходамБУ.Доход)
	|	ГДЕ
	|		б_СоответствияСтатейБюджетаДоходамБУ.СтатьяБюджета.Владелец = &ФормируемыйБюджет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		б_СоответствияСтатейБюджетаТипамОперацийБУ.СтатьяБюджета,
	|		ЕСТЬNULL(ТиповойОбороты.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
	|		ВЫБОР
	|			КОГДА б_СоответствияСтатейБюджетаТипамОперацийБУ.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ТОГДА ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) * б_СоответствияСтатейБюджетаТипамОперацийБУ.ПризнакСуммы
	|			ИНАЧЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) * б_СоответствияСтатейБюджетаТипамОперацийБУ.ПризнакСуммы
	|		КОНЕЦ,
	|		ТиповойОбороты.Регистратор,
	|		ТиповойОбороты.ПериодМесяц,
	|		ТиповойОбороты.ПериодКвартал
	|	ИЗ
	|		РегистрСведений.б_СоответствияСтатейБюджетаТипамОперацийБУ КАК б_СоответствияСтатейБюджетаТипамОперацийБУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					Авто,
	|					Счет В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СоответствияСтатейБюджетаТипамОперацийБУ.Счет
	|						ИЗ
	|							РегистрСведений.б_СоответствияСтатейБюджетаТипамОперацийБУ КАК СоответствияСтатейБюджетаТипамОперацийБУ),
	|					&мСубконтоТипыОпераций,
	|					,
	|					,
	|					) КАК ТиповойОбороты
	|			ПО (ТиповойОбороты.Счет = б_СоответствияСтатейБюджетаТипамОперацийБУ.Счет)
	|				И (ТиповойОбороты.Субконто1 = б_СоответствияСтатейБюджетаТипамОперацийБУ.ТипОперации)
	|	ГДЕ
	|		б_СоответствияСтатейБюджетаТипамОперацийБУ.СтатьяБюджета.Владелец = &ФормируемыйБюджет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		б_СоответствияСтатейБюджетаСтатьямЗатратБУ.СтатьяБюджета,
	|		ЕСТЬNULL(ТиповойОбороты.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
	|		ВЫБОР
	|			КОГДА б_СоответствияСтатейБюджетаСтатьямЗатратБУ.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ТОГДА ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) * б_СоответствияСтатейБюджетаСтатьямЗатратБУ.ПризнакСуммы
	|			ИНАЧЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) * б_СоответствияСтатейБюджетаСтатьямЗатратБУ.ПризнакСуммы
	|		КОНЕЦ,
	|		ТиповойОбороты.Регистратор,
	|		ТиповойОбороты.ПериодМесяц,
	|		ТиповойОбороты.ПериодКвартал
	|	ИЗ
	|		РегистрСведений.б_СоответствияСтатейБюджетаСтатьямЗатратБУ КАК б_СоответствияСтатейБюджетаСтатьямЗатратБУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					Авто,
	|					Счет В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СоответствияСтатейБюджетаСтатьямЗатратБУ.Счет
	|						ИЗ
	|							РегистрСведений.б_СоответствияСтатейБюджетаСтатьямЗатратБУ КАК СоответствияСтатейБюджетаСтатьямЗатратБУ),
	|					&мСубконтоСтатьиЗатрат,
	|					,
	|					,
	|					) КАК ТиповойОбороты
	|			ПО (ТиповойОбороты.Счет = б_СоответствияСтатейБюджетаСтатьямЗатратБУ.Счет)
	|				И (ТиповойОбороты.Субконто1 = б_СоответствияСтатейБюджетаСтатьямЗатратБУ.СтатьяЗатрат)
	|	ГДЕ
	|		б_СоответствияСтатейБюджетаСтатьямЗатратБУ.СтатьяБюджета.Владелец = &ФормируемыйБюджет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		б_СоответствияСтатейБюджетаГруппамОСБУ.СтатьяБюджета,
	|		ЕСТЬNULL(ТиповойОбороты.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
	|		ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) * б_СоответствияСтатейБюджетаГруппамОСБУ.ПризнакСуммы,
	|		ТиповойОбороты.Регистратор,
	|		ТиповойОбороты.ПериодМесяц,
	|		ТиповойОбороты.ПериодКвартал
	|	ИЗ
	|		РегистрСведений.б_СоответствияСтатейБюджетаГруппамОСБУ КАК б_СоответствияСтатейБюджетаГруппамОСБУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					Авто,
	|					Счет В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СоответствияСтатейБюджетаГруппамОСБУ.Счет
	|						ИЗ
	|							РегистрСведений.б_СоответствияСтатейБюджетаГруппамОСБУ КАК СоответствияСтатейБюджетаГруппамОСБУ),
	|					&мСубконтоОС,
	|					,
	|					КорСчет В ИЕРАРХИИ (&мСписокСчетовПоставщиков),
	|					) КАК ТиповойОбороты
	|			ПО (ТиповойОбороты.Счет = б_СоответствияСтатейБюджетаГруппамОСБУ.Счет)
	|				И (ТиповойОбороты.Субконто1.ГруппаОС = б_СоответствияСтатейБюджетаГруппамОСБУ.ГруппаОС)
	|	ГДЕ
	|		б_СоответствияСтатейБюджетаГруппамОСБУ.СтатьяБюджета.Владелец = &ФормируемыйБюджет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		б_СоответствияСтатейБюджетаВидамНМАБУ.СтатьяБюджета,
	|		ЕСТЬNULL(ТиповойОбороты.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
	|		ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) * б_СоответствияСтатейБюджетаВидамНМАБУ.ПризнакСуммы,
	|		ТиповойОбороты.Регистратор,
	|		ТиповойОбороты.ПериодМесяц,
	|		ТиповойОбороты.ПериодКвартал
	|	ИЗ
	|		РегистрСведений.б_СоответствияСтатейБюджетаВидамНМАБУ КАК б_СоответствияСтатейБюджетаВидамНМАБУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(
	|					&НачалоПериода,
	|					&КонецПериода,
	|					Авто,
	|					Счет В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СоответствияСтатейБюджетаВидамНМАБУ.Счет
	|						ИЗ
	|							РегистрСведений.б_СоответствияСтатейБюджетаВидамНМАБУ КАК СоответствияСтатейБюджетаВидамНМАБУ),
	|					&мСубконтоНМА,
	|					,
	|					КорСчет В ИЕРАРХИИ (&мСписокСчетовПоставщиков),
	|					) КАК ТиповойОбороты
	|			ПО (ТиповойОбороты.Счет = б_СоответствияСтатейБюджетаВидамНМАБУ.Счет)
	|				И (ТиповойОбороты.Субконто1.ВидНМА = б_СоответствияСтатейБюджетаВидамНМАБУ.ВидНМА)
	|	ГДЕ
	|		б_СоответствияСтатейБюджетаВидамНМАБУ.СтатьяБюджета.Владелец = &ФормируемыйБюджет) КАК ОборотПоБУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыБУ.Организация КАК Организация,
	|	СУММА(ОборотыБУ.Сумма) КАК СуммаФакт,
	|	СУММА(ОборотыБУ.СуммаПлан) КАК СуммаПлан,
	|	ОборотыБУ.СтатьяБюджета,
	|	СУММА(ОборотыБУ.СуммаПлан - ОборотыБУ.Сумма) КАК Отклонение
	|ИЗ
	|	(ВЫБРАТЬ
	|		ФактическийОборотБУ.СтатьяБюджета КАК СтатьяБюджета,
	|		ФактическийОборотБУ.Организация КАК Организация,
	|		ФактическийОборотБУ.Сумма КАК Сумма,
	|		0 КАК СуммаПлан,
	|		ФактическийОборотБУ.Регистратор КАК Регистратор,
	|		ФактическийОборотБУ.ПериодМесяц КАК ПериодМесяц,
	|		ФактическийОборотБУ.ПериодКвартал КАК ПериодКвартал
	|	ИЗ
	|		ФактическийОборот КАК ФактическийОборотБУ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		б_БюджетОбороты.СтатьяБюджета,
	|		б_БюджетОбороты.Организация,
	|		0,
	|		б_БюджетОбороты.СуммаОборот,
	|		б_БюджетОбороты.Регистратор,
	|		б_БюджетОбороты.ПериодМесяц,
	|		б_БюджетОбороты.ПериодКвартал
	|	ИЗ
	|		РегистрНакопления.б_Бюджет.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Авто,
	|				Бюджет = &ФормируемыйБюджет
	|					И Статус = &Статус) КАК б_БюджетОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗависимостиСтатейБюджета.ЗависимаяСтатьяБюджета,
	|		ЕСТЬNULL(ФактическийОборотПоБУ.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
	|		ЕСТЬNULL(ФактическийОборотПоБУ.Сумма, 0) * ЗависимостиСтатейБюджета.Коэффициент,
	|		0,
	|		ЕСТЬNULL(ФактическийОборотПоБУ.Регистратор, NULL),
	|		ЕСТЬNULL(ФактическийОборотПоБУ.ПериодМесяц, NULL),
	|		ЕСТЬNULL(ФактическийОборотПоБУ.ПериодКвартал, NULL)
	|	ИЗ
	|		РегистрСведений.ЗависимостиСтатейБюджета КАК ЗависимостиСтатейБюджета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФактическийОборот КАК ФактическийОборотПоБУ
	|			ПО ЗависимостиСтатейБюджета.ВлияющаяСтатьяБюджета = ФактическийОборотПоБУ.СтатьяБюджета
	|	ГДЕ
	|		ЗависимостиСтатейБюджета.ЗависимыйБюджет = &ФормируемыйБюджет) КАК ОборотыБУ
	|ГДЕ
	|	ОборотыБУ.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыБУ.СтатьяБюджета,
	|	ОборотыБУ.Организация";
	
	тзОтклонение = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ ИЗ Объект.РасчетнаяТаблица Цикл
		Если СтрокаТЧ.СтатьяБюджета.ЭтоГруппа тогда
			Продолжить;
		КонецЕсли;
		
		
		СтрокаТЧ.Отклонение = 0;
		
		СтрокаТЗОтклонение	 	= тзОтклонение.Найти(СтрокаТЧ.СтатьяБюджета, "СтатьяБюджета");
		
		СтрокаТЧ.ОстатокПланаСУчетомФакта = ?(СтрокаТЗОтклонение = НЕОПРЕДЕЛЕНО,0,СтрокаТЧ.ГодовойПлан - СтрокаТЗОтклонение.СуммаФакт);
		СтрокаТЧ.ФактПредыдущегоПериода = ?(СтрокаТЗОтклонение = НЕОПРЕДЕЛЕНО,0,СтрокаТЗОтклонение.СуммаФакт);

		
	
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//	"ВЫБРАТЬ
		//	|	б_ЗаявкаНаФинансированиеРасчетнаяТаблица.СтатьяБюджета,
		//	|	СУММА(б_ЗаявкаНаФинансированиеРасчетнаяТаблица.СуммаППИБезНдс) КАК СуммаППИБезНдс
		//	|ИЗ
		//	|	Документ.б_ЗаявкаНаФинансирование.РасчетнаяТаблица КАК б_ЗаявкаНаФинансированиеРасчетнаяТаблица
		//	|ГДЕ
		//	|	б_ЗаявкаНаФинансированиеРасчетнаяТаблица.СтатьяБюджета = &СтатьяБюджета
		//	|	И б_ЗаявкаНаФинансированиеРасчетнаяТаблица.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		//	|	И б_ЗаявкаНаФинансированиеРасчетнаяТаблица.ППИ <> ЗНАЧЕНИЕ(Документ.ПлатежноеПоручениеИсходящее.ПустаяСсылка)
		//	|	И б_ЗаявкаНаФинансированиеРасчетнаяТаблица.Ссылка <> &Ссылка
		//	|	И б_ЗаявкаНаФинансированиеРасчетнаяТаблица.Ссылка.Организация = &Организация
		//	|
		//	|СГРУППИРОВАТЬ ПО
		//	|	б_ЗаявкаНаФинансированиеРасчетнаяТаблица.СтатьяБюджета";
		//
		//Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
		//Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		//Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		//Запрос.УстановитьПараметр("СтатьяБюджета", СтрокаТЧ.СтатьяБюджета);
		//Запрос.УстановитьПараметр("Организация",Объект.Организация);

		//РезультатЗапроса = Запрос.Выполнить();
		//
		//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		//
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//	
		//	НеРазнесенныеСуммы = ВыборкаДетальныеЗаписи.СуммаППИБезНдс - СтрокаТЗОтклонение.СуммаФакт;
		//	СтрокаТЧ.СуммыПредыдущихПлатежей = ?(НеРазнесенныеСуммы < 0,0,НеРазнесенныеСуммы);
		//КонецЦикла;
		
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетнаяТаблицаДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец, Организация", ТекСтрока.Контрагент, Объект.Организация));
		
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура РасчетнаяТаблицаСтатьяБюджетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", Объект.ФормируемыйБюджет));
		
	ОткрытьФорму("Справочник.фин_СтатьиБюджета.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура РасчетнаяТаблицаДокументПоступленияПриИзменении(Элемент)
	
	ТекСтрока = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	ТекСтрока.Контрагент = ТекСтрока.ДокументПоступления.Контрагент;
	ТекСтрока.Договор = ТекСтрока.ДокументПоступления.ДоговорКонтрагента;
	ТекСтрока.ВалютаДокумента = ТекСтрока.ДокументПоступления.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ТекСтрока.СуммаПоЗаявке = ТекСтрока.ДокументПоступления.СуммаДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетнаяТаблицаДоговорПриИзменении(Элемент)
	
	ТекСтрока = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	ТекСтрока.ВалютаДокумента = ТекСтрока.Договор.ВалютаВзаиморасчетов;
	ТекСтрока.СуммаДоговора = ТекСтрока.Договор.СуммаДоговора;

	
	Счета = Новый СписокЗначений;
	Счета.Добавить(ПланыСчетов.Типовой.КраткосрочныеАвансыВыданные);
	Счета.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам);
	Счета.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоАренде);
	Счета.Добавить(ПланыСчетов.Типовой.ПрочиеАвансывыданныеСоб);
	
	КорСчета = Новый СписокЗначений;
	КорСчета.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах);
	КорСчета.Добавить(ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПредставительств);

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТиповойОбороты.СуммаОборот,
		|	ТиповойОбороты.Субконто1,
		|	ТиповойОбороты.Субконто2,
		|	ЕСТЬNULL(дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.ОбщаяСуммаДоговора, ТиповойОбороты.Субконто2.СуммаДоговора) КАК СуммаДоговора
		|ИЗ
		|	РегистрСведений.дог_ДоговорыИДополнительныеСоглашения.СрезПоследних(&КонецПериода, ) КАК дог_ДоговорыИДополнительныеСоглашенияСрезПоследних
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Обороты(&НачалоПериода, &КонецПериода, , Счет В ИЕРАРХИИ (&Счета), , Организация = &Организация, КорСчет В ИЕРАРХИИ (&КорСчета), ) КАК ТиповойОбороты
		|		ПО дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.Договор = ТиповойОбороты.Субконто2
		|ГДЕ
		|	ТиповойОбороты.Субконто1 = &Контрагент
		|	И ТиповойОбороты.Субконто2 = &Договор";
	
	Запрос.УстановитьПараметр("КонецПериода", Объект.Дата);
	Запрос.УстановитьПараметр("КорСчета", КорСчета);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(Объект.Дата));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Счета", Счета);
	Запрос.УстановитьПараметр("Контрагент", ТекСтрока.Контрагент);
	Запрос.УстановитьПараметр("Договор", ТекСтрока.Договор);

	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекСтрока.ОплаченоПоДоговору = Выборка.СуммаОборот;
		ТекСтрока.СуммаДоговора = Выборка.СуммаДоговора;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РасчетнаяТаблицаДокументПоступленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Контрагент, ДоговорКонтрагента", ТекСтрока.Контрагент, ТекСтрока.Договор));
		
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура РасчетнаяТаблицаОбъемПриИзменении(Элемент)
	ТекСтрока = Элементы.РасчетнаяТаблица.ТекущиеДанные; 
	ТекСтрока.СуммаДоговора = ТекСтрока.Объем * ТекСтрока.Цена;
КонецПроцедуры

&НаКлиенте
Процедура РасчетнаяТаблицаНомерДоговораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекСтрока = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец, Организация", ТекСтрока.Контрагент, Объект.Организация));
		
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РасчетнаяТаблицаНомерДоговораПриИзменении(Элемент)
	Текстрока = Элементы.РасчетнаяТаблица.ТекущиеДанные;
	Текстрока.ДатаДоговора = Текстрока.НомерДоговора.ДатаДоговора
КонецПроцедуры

&НаКлиенте
Процедура РасчетнаяТаблицаРасчетныйСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", Объект.Организация));
		
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура РасчетнаяТаблицаПоле1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//ТекСтрока = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;

	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("Отбор", Новый Структура("Контрагент, ДоговорКонтрагента", ТекСтрока.Контрагент, ТекСтрока.НомерДоговора));
	//	
	//ОткрытьФорму("Справочник.зм_Гарантии.ФормаСписка", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура РасчетСуммыУдалить(Команда)
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ден_ДвиженияДенежныхСредствОбороты.СуммаОборот КАК СуммаОборот
	|ИЗ
	|	РегистрНакопления.ден_ДвиженияДенежныхСредств.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Контрагент = &Контрагент
	|				И ДоговорКонтрагента = &ДоговорКонтрагента
	|				И ПриходРасход = &Расход) КАК ден_ДвиженияДенежныхСредствОбороты";
		
	Если Объект.РасчетнаяТаблица.Количество() > 1 Тогда
		Для Каждого строка из Объект.РасчетнаяТаблица Цикл
			Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ТекущаяДата()));
			Запрос.УстановитьПараметр("КонецПериода", Дата("20200801000000"));
			Запрос.УстановитьПараметр("Контрагент", строка.Контрагент);
			Запрос.УстановитьПараметр("ДоговорКонтрагента", строка.НомерДоговора);
			Запрос.УстановитьПараметр("Расход", Перечисления.ден_ВидыДвиженийПриходРасход.Расход);	 
			Результат = Запрос.Выполнить().Выбрать();
			Пока Результат.Следующий() цикл
				строка.СуммаПредварительнойОплаты = Результат.СуммаОборот;	 
			КонецЦикла;
			Запрос.УстановитьПараметр("НачалоПериода", Дата("20200801000000"));
			Запрос.УстановитьПараметр("КонецПериода", КонецГода(ТекущаяДата()));
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					строка.СуммаДополнительнойОплаты = Выборка.СуммаОборот;
				КонецЦикла;
			КонецЕсли;
			
			строка.СуммаПогашенияСельхозПродукцией = ?(строка.ФактическиЗачтенныйВес, строка.ФактическиЗачтенныйВес,0) * ?(строка.ПрогнознаяЦена, строка.ПрогнознаяЦена,строка.ЗакупочнаяЦена);
			Если строка.СуммаДополнительнойОплаты > 0 Тогда	
				строка.СуммаДоплаты = ?(строка.СуммаПогашенияСельхозПродукцией, строка.СуммаПогашенияСельхозПродукцией,0) - ?(строка.СуммаШтрафа, строка.СуммаШтрафа,0);
			Иначе
				строка.СуммаДоплаты = ?(строка.СуммаПогашенияСельхозПродукцией, строка.СуммаПогашенияСельхозПродукцией,0) - строка.СуммаПредварительнойОплаты - ?(строка.СуммаДополнительнойОплаты, строка.СуммаДополнительнойОплаты,0) - ?(строка.СуммаШтрафа, строка.СуммаШтрафа,0);	
			КонецЕсли;
	
		КонецЦикла; 
	Иначе
		Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ТекущаяДата()));
		Запрос.УстановитьПараметр("КонецПериода", Дата("20200801000000"));
		Запрос.УстановитьПараметр("Контрагент", Объект.РасчетнаяТаблица[0].Контрагент);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.РасчетнаяТаблица[0].НомерДоговора);	
		Запрос.УстановитьПараметр("Расход", Перечисления.ден_ВидыДвиженийПриходРасход.Расход);	 
		Результат = Запрос.Выполнить().Выбрать();		
		Пока Результат.Следующий() цикл
			Объект.РасчетнаяТаблица[0].СуммаПредварительнойОплаты = Результат.СуммаОборот;	 
		КонецЦикла;
		Запрос.УстановитьПараметр("НачалоПериода", Дата("20200801000000"));
		Запрос.УстановитьПараметр("КонецПериода", КонецГода(ТекущаяДата()));
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Объект.РасчетнаяТаблица[0].СуммаДополнительнойОплаты = Выборка.СуммаОборот;
			КонецЦикла;
		КонецЕсли;
		Объект.РасчетнаяТаблица[0].СуммаПогашенияСельхозПродукцией = ?(Объект.РасчетнаяТаблица[0].ФактическиЗачтенныйВес, Объект.РасчетнаяТаблица[0].ФактическиЗачтенныйВес,0) * ?(Объект.РасчетнаяТаблица[0].ПрогнознаяЦена, Объект.РасчетнаяТаблица[0].ПрогнознаяЦена, Объект.РасчетнаяТаблица[0].ЗакупочнаяЦена);
		Если Объект.РасчетнаяТаблица[0].СуммаДополнительнойОплаты > 0 Тогда	
			Объект.РасчетнаяТаблица[0].СуммаДоплаты = ?(Объект.РасчетнаяТаблица[0].СуммаПогашенияСельхозПродукцией, Объект.РасчетнаяТаблица[0].СуммаПогашенияСельхозПродукцией,0) - ?(Объект.РасчетнаяТаблица[0].СуммаШтрафа, Объект.РасчетнаяТаблица[0].СуммаШтрафа,0);
		Иначе			
			Объект.РасчетнаяТаблица[0].СуммаДоплаты = ?(Объект.РасчетнаяТаблица[0].СуммаПогашенияСельхозПродукцией, Объект.РасчетнаяТаблица[0].СуммаПогашенияСельхозПродукцией,0) - Объект.РасчетнаяТаблица[0].СуммаПредварительнойОплаты - ?(Объект.РасчетнаяТаблица[0].СуммаДополнительнойОплаты, Объект.РасчетнаяТаблица[0].СуммаДополнительнойОплаты,0) - ?(Объект.РасчетнаяТаблица[0].СуммаШтрафа, Объект.РасчетнаяТаблица[0].СуммаШтрафа,0);
		КонецЕсли;

	КонецЕсли;
	
	//РасчетСуммыНаСервере();
КонецПроцедуры

&НаСервере
Процедура РасчетСуммыНаСервере()
	УправлениеРесурсами.РасчетХранения(Объект);
КонецПроцедуры

&НаКлиенте
Процедура РасчетСуммы(Команда)
	Если Объект.Расчет.Количество() > 0 Тогда
	
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Объект.Расчет.Очистить();
	КонецЕсли;
	
	РасчетСуммыНаСервере();
КонецПроцедуры


&НаСервере
Процедура РасчетЗалогаНаСервере()
	УправлениеРесурсами.РасчетХраненияЗалога(Объект);
КонецПроцедуры


&НаКлиенте
Процедура РасчетЗалога(Команда)
	Если Объект.РасчетЗалог.Количество() > 0 Тогда
	
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Объект.РасчетЗалог.Очистить();
	КонецЕсли;
	
	РасчетЗалогаНаСервере();
КонецПроцедуры
