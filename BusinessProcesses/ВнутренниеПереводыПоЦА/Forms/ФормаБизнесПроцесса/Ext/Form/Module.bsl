&НаКлиенте
Процедура ОбновитьКарту(Команда) // Обработчик команды формы 
	ОбновитьКартуСервер();  	
КонецПроцедуры  

&НаСервере
Процедура ОбновитьКартуСервер() // Серверная контекстная процедура получения карты маршрута 
	// Конвертируем объект формы в объект бизнес-процесса
	ОбъектБП = РеквизитФормыВЗначение("Объект"); 
	// Вызываем метод получения карты маршрута текущего бизнес-процесса
	Карта = ОбъектБП.ПолучитьКартуМаршрута();      	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТекущееСостояниеБП()
	ОбновитьКартуСервер();
	Если не ЗначениеЗаполнено(ТекущаяТочка) тогда		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.ТочкаМаршрута,
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителяПоСогласованиюПлатежей КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &Ссылка
		|	И НЕ ЗадачаИсполнителя.Выполнена";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекущаяТочка 	= ВыборкаДетальныеЗаписи.точкамаршрута;
			Задача 			= ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
			
	Если параметры.Свойство("Задача") тогда
		Задача 			= Параметры.Задача;
		ТекущаяТочка 	= Параметры.Задача.ТочкаМаршрута;	
	КонецЕсли;
	Если Параметры.Ключ.Пустая() тогда
		ПолучитьТекущееСостояниеБП();
		ПодготовитьФорму(ЭтаФорма);
	КонецЕсли;
		
	ТекущийИсполнитель = ПараметрыСеанса.ТекущийПользователь;
КонецПроцедуры


Процедура ОбновитьИсториюИзменений()
	
	ИсторияИсполнения = "";
	Комментарии.Очистить();
	Для Каждого СтрокаТЧ из Объект.КомментарииПроцесса Цикл
		ИсторияИсполнения = ИсторияИсполнения + Символы.ПС +"["+ СтрокаТЧ.Автор +"]"+ " *** " +СтрокаТЧ.Дата + Символы.Таб + СтрокаТЧ.Комментарий+Символы.ПС;	
	КонецЦикла;
	Макет = БизнесПроцессы.ВнутренниеПереводыПоЦА.ПолучитьМакет("Макет");
	Обл = Макет.ПолучитьОбласть("Заголовок");
	Комментарии.Вывести(Обл);
	Обл = Макет.ПолучитьОбласть("Строка");
	
	Для каждого СтрокаТЧ Из объект.КомментарииПроцесса Цикл
		Обл.Параметры.Заполнить(СтрокаТЧ);
		Комментарии.Вывести(Обл);
	КонецЦикла;
	
	
КонецПроцедуры
	

&НаКлиенте
Процедура ПлатежноеПоручениеНажатие(Элемент, СтандартнаяОбработка)
	
	ОткрытьЗначение(ПлатежноеПоручение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПодготовитьФорму(Форма)
	         
	Объект 			= Форма.Объект;
	Элементы 		= Форма.Элементы;	
	ТекущаяТочка 	= Форма.ТекущаяТочка;
	Задача			= Форма.Задача;
	
	Если Объект.стартован 
		и не ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ВнутренниеПереводыПоЦА.ТочкаМаршрута.РаботаСЗаявкойАвтором") тогда
		элементы.левая.толькопросмотр 		= истина;
		Элементы.правая.Толькопросмотр		= Истина;
				
	КонецЕсли;

	Если задача.Выполнена тогда
		Форма.ТолькоПросмотр = Истина;
		Сообщить("Текущий этап выполнен. Редактирование формы невозможно");
		возврат;
	КонецЕсли;
	Если объект.Завершен тогда
		Форма.ТолькоПросмотр = Истина;
		Форма.Элементы.Группа1.Видимость = ложь;
		
		Сообщить("Бизнес-процесс завершен. Редактирование формы невозможно");
		возврат;
	КонецЕсли;
	
	
	
	Если ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ВнутренниеПереводыПоЦА.ТочкаМаршрута.СогласованиеСДиректоромФД")	тогда
		Элементы.ПроверкаДиректоромФДВыполнена.Доступность 		= истина;
	//ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ВнутренниеПереводыПоЦА.ТочкаМаршрута.ПроверкаВР")				тогда
	//	Элементы.ПодписанПредседателем.Доступность 				= истина;
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ВнутренниеПереводыПоЦА.ТочкаМаршрута.РаботаСЗаявкойАвтором")
		или не ЗначениеЗаполнено(ТекущаяТочка) тогда
		Элементы.вернутьнадоработку.видимость 				= ложь;
		Элементы.ОтказатьВПоставленнойЗадаче.видимость 		= ложь;
	//ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ВнутренниеПереводыПоЦА.ТочкаМаршрута.СозданиеПП")	тогда
	//	Элементы.ВыполнитьЭтап.Заголовок = "Ознакомлен";
	//	Элементы.ВернутьНаДоработку.Видимость = Ложь;
	//	Элементы.ОтказатьВПоставленнойЗадаче.Видимость = Ложь;

	КонецЕсли;
	
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьЭтап(Команда)
	ОбработатьБП("ОК");
	ОповеститьОбИзменении(ПредопределенноеЗначение("БизнесПроцесс.ВнутренниеПереводыПоЦА.ПустаяСсылка"));
	ОповеститьОбИзменении(ПредопределенноеЗначение("Задача.ЗадачаИсполнителяПоСогласованиюПлатежей.ПустаяСсылка"));
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВернутьНаДоработку(Команда)
	ОбработатьБП("Возврат");// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьВПоставленнойЗадаче(Команда)
	ОбработатьБП("Отказ");// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьБП(РезультатВозврата)
	
	Если не ОбработатьЭтап(РезультатВозврата) тогда
		Возврат;
	КонецЕсли;
	
	//-=-=
	Если Не РольДоступна("axm_ОтключитьКонтрольСоотвествияИсполнителейВСогласованиях")
		И глТекущийПользователь <> ЭтотОбъект.Задача.Пользователь Тогда
		Сообщить("На текущем этапе согласовывать должен " + ЭтотОбъект.Задача.Пользователь + "!");
		Возврат;
	КонецЕсли;
	//-=-=
	
	Если КомментарийИсполнителя <> "" тогда
		НС = объект.КомментарииПроцесса.Добавить();
		НС.Автор = ТекущийИсполнитель;
		НС.Дата = ТекущаяДата();
		НС.Комментарий = КомментарийИсполнителя ;
		НС.Этап = ТекущаяТочка;
	КонецЕсли;
	
	НоваяЗапись = Объект.Подписи.Добавить();
	НоваяЗапись.Дата				= ТекущаяДата();
	НоваяЗапись.Этап			    = ТекущаяТочка;
	НоваяЗапись.Автор				= Пользователи.ТекущийПользователь();

	Записать();
	
	
	Если не Задача.Пустая() тогда
		ВыполнитьЗадачу(Задача);
	Иначе
		Стартовать();
	КонецЕсли;
	ОповеститьОбИзменении(ПредопределенноеЗначение("Задача.ЗадачаИсполнителяПоСогласованиюПлатежей.ПустаяСсылка"));
	Закрыть();	
	  
КонецПроцедуры

Процедура Стартовать()
	БП = РеквизитФормыВЗначение("Объект");
	БП.Старт();
	ЗначениеВРеквизитФормы(БП,"Объект");
КонецПроцедуры

&НаКлиенте
Функция ОбработатьЭтап(РезультатВозврата)
	
	Если РезультатВозврата = "ОК" тогда
		ЗначениеВозврата = Истина;
	ИначеЕсли РезультатВозврата = "Возврат" или РезультатВозврата = "Отказ" Тогда
		Если КомментарийИсполнителя = "" тогда
			Предупреждение("Не указана причина в комментарии текущего исполнителя");
			ЗначениеВозврата = Ложь;
		Иначе
			ЗначениеВозврата = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатВозврата = "ОК" тогда 
		ЗначениеПоля = "Разрешено";
	ИначеЕсли РезультатВозврата = "Возврат" Тогда
		ЗначениеПоля = "Возвращено";
	Иначе
		ЗначениеПоля = "Отказано";
	КонецЕсли;
		
	Если ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ВнутренниеПереводыПоЦА.ТочкаМаршрута.СогласованиеСДиректоромФД")	тогда
		Объект.ПроверкаДиректоромФДВыполнена = ЗначениеПоля;
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ВнутренниеПереводыПоЦА.ТочкаМаршрута.СозданиеПП")				тогда
		Объект.ПроверкаПередачаНаОплату = ЗначениеПоля;
	//-=-=
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ВнутренниеПереводыПоЦА.ТочкаМаршрута.СогласованиеСКурирующимЧП") Тогда
		Объект.ЗаявкаПрошлаСогласованиеКурирующимЧП = ЗначениеПоля;
	//-=-=
	КонецЕсли;	
	
	 Возврат ЗначениеВозврата;
	 
КонецФункции


&НаСервереБезКонтекста
Функция ВыполнитьЗадачу(Задача)
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.ВыполнитьЗадачу();
КонецФункции

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПолучитьТекущееСостояниеБП();
	ПодготовитьФорму(ЭтаФорма);
	ОбновитьИсториюИзменений();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦС_АдресацияБизнесПроцессов.Пользователь,
	|	ЦС_АдресацияБизнесПроцессов.Подразделение
	|ИЗ
	|	РегистрСведений.ЦС_АдресацияБизнесПроцессов КАК ЦС_АдресацияБизнесПроцессов
	|ГДЕ
	|	ЦС_АдресацияБизнесПроцессов.Пользователь = &глТекущийПользователь";
	
	Запрос.УстановитьПараметр("глТекущийПользователь", параметрысеанса.текущийпользователь);	
	
	ТолькоПросмотр								= истина;
	элементы.Группа1.Доступность				= Ложь;
	элементы.ФормаКоманднаяПанель.Доступность	= Ложь;	
	
	Если (Не ТекущийОбъект.стартован)
		Или параметрысеанса.текущийпользователь = Задача.Пользователь
		Или Запрос.Выполнить().Выгрузить().НайтиСтроки(Новый Структура("Пользователь, Подразделение", параметрысеанса.текущийпользователь, Задача.Подразделение)).Количество() <> 0
		Или РольДоступна("ПолныеПрава") тогда
		
		Если (НЕ ТекущийОбъект.Завершен) Тогда
			
			ТолькоПросмотр = ложь;
			элементы.Группа1.Доступность = Истина;
			элементы.ФормаКоманднаяПанель.Доступность = Истина;
		КонецЕсли;
		
	иначе
		Сообщить("Этап не предусматривает исполнение текущим пользователем. Форма заблокирована");
	КонецЕсли;
	
	//Если Параметры.Задача.Выполнена тогда
	//	ЭтаФорма.ТолькоПросмотр	= Истина;
	//	ЭтаФорма.Элементы.Группа1.Доступность = Ложь;
	//КонецЕсли;
	 
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ФормаСчета = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент);
	              	
	ФормаСчета.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
	ФормаСчета.Отбор.Владелец.Значение      = объект.Контрагент;
	ФормаСчета.Отбор.Владелец.Использование = Истина;
	
	Если не объект.ВалютаДокумента.Пустая() тогда
		ФормаСчета.Отбор.ВалютаДенежныхСредств.Значение	= объект.ВалютаДокумента;
		ФормаСчета.Отбор.ВалютаДенежныхСредств.Использование = Истина;
		ФормаСчета.Отбор.ВалютаДенежныхСредств.ВидСравнения  = ВидСравнения.Равно;
	КонецЕсли;    	
	
	ФормаСчета.РежимВыбора = Истина;
	объект.БанковскийСчетКонтрагента =ФормаСчета.ОткрытьМодально();

КонецПроцедуры

&НаСервере
Процедура БанковскийСчетОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаСчета = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент);
	
	ФормаСчета.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
	ФормаСчета.Отбор.Владелец.Значение      = объект.Организация;
	ФормаСчета.Отбор.Владелец.Использование = Истина;
	ФормаСчета.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
	
	ФормаСчета.Отбор.Источникфинансирования.ВидСравнения  = ВидСравнения.Равно;
	ФормаСчета.Отбор.Источникфинансирования.Использование = Истина;
	ФормаСчета.отбор.Источникфинансирования.Значение = Объект.источникфинансирования;
	
	Если не объект.ВалютаДокумента.Пустая() тогда
		ФормаСчета.Отбор.ВалютаДенежныхСредств.Значение	= объект.ВалютаДокумента;
		ФормаСчета.Отбор.ВалютаДенежныхСредств.Использование = Истина;
		ФормаСчета.Отбор.ВалютаДенежныхСредств.ВидСравнения  = ВидСравнения.Равно;
	КонецЕсли;    	
	
	ФормаСчета.РежимВыбора = Истина;
	объект.БанковскийСчетОрганизации = ФормаСчета.ОткрытьМодально();
	
// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭлементОтбора = СписокФайлов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	
		
	Если Объект.Согласован = Истина И ТекущаяТочка <> ПредопределенноеЗначение("БизнесПроцесс.ВнутренниеПереводыПоЦА.ТочкаМаршрута.СозданиеПП") Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;	
		Сообщить("Документ согласован и не может быть изменен");
	КонецЕсли;
	
	Если Объект.ТипПлатежа = Перечисления.ВидыВнутреннихПереводов.ВнутреннийПеревод Тогда
		ЭтаФорма.Элементы.ПлатежиКурсНацбанка.Видимость = Ложь;
		ЭтаФорма.Элементы.ПлатежиКурсТекущегоБанка.Видимость = Ложь;
		ЭтаФорма.Элементы.ПлатежиСуммаВВалюте.Видимость = Ложь;
	Иначе
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.СписокФайлов.ТекущаяСтрока;
	
	Если СокрЛП(ТекСтрока.Наименование) = "" Тогда
	 	СтандартнаяОбработка = Истина;
		Сообщить("Введите описание файла");
	Иначе
		СтандартнаяОбработка = Ложь;
		УниверсальныеМеханизмы.ОткрытьФайлы(Элементы.СписокФайлов.ТекущиеДанные, глТекущийПользователь, Элементы.СписокФайлов.ВыделенныеСтроки);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаписьФайла(ПолноеИмяФайла, Каталог)
	
	НовОбъектХранилища = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
	НовОбъектХранилища.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяФайла), Новый СжатиеДанных);
	НовОбъектХранилища.ИмяФайла = Сред(ПолноеИмяФайла, СтрДлина(Каталог) + 1);
	НовОбъектХранилища.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
	Если Объект.Ссылка.Пустая() Тогда
		Записать();
	КонецЕсли;
	НовОбъектХранилища.Объект = Объект.Ссылка;
	НовОбъектХранилища.Записать();
		
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Диалог = УниверсальныеМеханизмы.ПолучитьДиалогВыбораФайлов(Ложь);
		
	Если Не Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;

	Попытка  		
		СоздатьЗаписьФайла(Диалог.ПолноеИмяФайла, Диалог.Каталог); 		
		Элементы.СписокФайлов.Обновить();
	Исключение
		Сообщить("" + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СписокФайлов.Отбор.Элементы.Очистить();
	ЭлементОтбора = СписокФайлов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	
КонецПроцедуры


&НаКлиенте
Процедура ТипПлатежаПриИзменении(Элемент)
	
	Если Объект.ТипПлатежа = Перечисления.ВидыВнутреннихПереводов.ВнутреннийПеревод Тогда
		ЭтаФорма.Элементы.ПлатежиКурсНацбанка.Видимость = Ложь;
		ЭтаФорма.Элементы.ПлатежиКурсТекущегоБанка.Видимость = Ложь;
		ЭтаФорма.Элементы.ПлатежиСуммаВВалюте.Видимость = Ложь;
	Иначе
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПлатежиРасчетныйСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", Объект.Организация));
		
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПрисоединенныеФайлы(Команда)
		
	ТекСтрока = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;

	ПараметрыФ = Новый Структура;
	ПараметрыФ.Вставить("ВладелецФайла", ТекСтрока.ЗаявкаНаФинансирование);
	Заголовок = НСтр("ru = 'Присоединенные файлы'");
	ПараметрыФ.Вставить("ЗаголовокФормы", Заголовок);
	
	ОткрытьФорму(
		"Справочник.Файлы.Форма.ФормаСпискаПрисоединенныхФайлов", 
		ПараметрыФ,
		ТекСтрока.ЗаявкаНаФинансирование, 
		ТекСтрока.ЗаявкаНаФинансирование, 
		);

КонецПроцедуры

&НаКлиенте
Процедура ПлатежиКурсТекущегоБанкаПриИзменении(Элемент)
	ТекСтрока = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;

	Если ТекСтрока.Валюта.Наименование <> "KZT" Тогда
		ТекСтрока.СуммаВВалюте = ТекСтрока.СуммаПлатежа / ТекСтрока.КурсТекущегоБанка;
	Иначе
		ТекСтрока.СуммаВВалюте = ТекСтрока.СуммаПлатежа * ТекСтрока.КурсТекущегоБанка;
	КонецЕсли;
		
КонецПроцедуры








