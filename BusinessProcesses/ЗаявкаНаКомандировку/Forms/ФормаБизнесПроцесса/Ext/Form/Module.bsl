Перем СертификатЭЦП Экспорт;

&НаКлиенте
Процедура ОбновитьКарту(Команда) // Обработчик команды формы 
	ОбновитьКартуСервер();  	
КонецПроцедуры  

&НаСервере
Процедура ОбновитьКартуСервер() // Серверная контекстная процедура получения карты маршрута 
	// Конвертируем объект формы в объект бизнес-процесса
	ОбъектБП = РеквизитФормыВЗначение("Объект"); 
	// Вызываем метод получения карты маршрута текущего бизнес-процесса
	Карта = ОбъектБП.ПолучитьКартуМаршрута();      	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТекущееСостояниеБП()
	ОбновитьКартуСервер();
	Если не ЗначениеЗаполнено(ТекущаяТочка) тогда		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.ТочкаМаршрута,
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителяПоСогласованиюПлатежей КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &Ссылка
		|	И НЕ ЗадачаИсполнителя.Выполнена";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекущаяТочка 	= ВыборкаДетальныеЗаписи.точкамаршрута;
			Задача 			= ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
			
	Если параметры.Свойство("Задача") тогда
		Задача 			= Параметры.Задача;
		ТекущаяТочка 	= Параметры.Задача.ТочкаМаршрута;	
	КонецЕсли;
	Если Параметры.Ключ.Пустая() тогда
		ПолучитьТекущееСостояниеБП();
		ПодготовитьФорму(ЭтаФорма);
	КонецЕсли;
		
	ТекущийИсполнитель = ПараметрыСеанса.ТекущийПользователь;
	
	Если Не ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		Объект.ФизЛицо = ПараметрыСеанса.ТекущийПользователь.ФизЛицо;
		Объект.СтранаНазначения = Справочники.КлассификаторСтранМира.Казахстан;
		Объект.ПриказПодписывает = Справочники.ФизическиеЛица.НайтиПоНаименованию("Байнаков Рахмет Газизович");
	КонецЕсли;
			
КонецПроцедуры


Процедура ОбновитьИсториюИзменений()
	
	ИсторияИсполнения = "";
	Комментарии.Очистить();
	Для Каждого СтрокаТЧ из Объект.КомментарииПроцесса Цикл
		ИсторияИсполнения = ИсторияИсполнения + Символы.ПС +"["+ СтрокаТЧ.Автор +"]"+ " *** " +СтрокаТЧ.Дата + Символы.Таб + СтрокаТЧ.Комментарий+Символы.ПС;	
	КонецЦикла;
	Макет = БизнесПроцессы.ЗаявкаНаКомандировку.ПолучитьМакет("Макет");
	Обл = Макет.ПолучитьОбласть("Заголовок");
	Комментарии.Вывести(Обл);
	Обл = Макет.ПолучитьОбласть("Строка");
	
	Для каждого СтрокаТЧ Из объект.КомментарииПроцесса Цикл
		Обл.Параметры.Заполнить(СтрокаТЧ);
		Комментарии.Вывести(Обл);
	КонецЦикла;
	
	
КонецПроцедуры
	

&НаКлиенте
Процедура ПлатежноеПоручениеНажатие(Элемент, СтандартнаяОбработка)
	
	ОткрытьЗначение(ПлатежноеПоручение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПодготовитьФорму(Форма)
	         
	Объект 			= Форма.Объект;
	Элементы 		= Форма.Элементы;	
	ТекущаяТочка 	= Форма.ТекущаяТочка;
	Задача			= Форма.Задача;

	Если Задача.Выполнена Тогда
		Форма.ТолькоПросмотр = Истина;
		Сообщить("Текущий этап выполнен. Редактирование формы невозможно");
		Возврат;
	КонецЕсли;
	
	Если Объект.Завершен Тогда
		Форма.ТолькоПросмотр = Истина;
		Форма.Элементы.Группа1.Видимость = Ложь;
		Сообщить("Бизнес-процесс завершен. Редактирование формы невозможно");
		Возврат;
	КонецЕсли;
	
	Если Объект.Стартован 
		И Не ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.РаботаСЗаявкойАвтором") Тогда
		Элементы.Левая.ТолькоПросмотр 		= Истина;
		Элементы.Правая.ТолькоПросмотр		= Истина;
		
	КонецЕсли;
	
	Если ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.СогласованиеСРП") Тогда
		Элементы.ЗаявкаСогласованаСДиректоромСТП.Доступность 		= Истина;   
		Элементы.Страницы.ТекущаяСтраница = Элементы.СогласованиеЗаявки;
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.СогласованиеСКурирующимЧП")	Тогда
		Элементы.ЗаявкаСогласованаСКурирующимЧП.Доступность 		= Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СогласованиеЗаявки;
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.СогласованиеСПП") Тогда
		Элементы.ЗаявкаСогласованаСПП.Доступность 		= Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СогласованиеЗаявки;
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.СогласованиеПроектаПриказаСПД")	Тогда
		Элементы.ПроектПриказаСогласованСДиректоромПД.Доступность 	= Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СогласованиеПриказа;
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.СогласованиеПроектаПриказаСФД") Тогда
		Элементы.ПроектПриказаСогласованСДиректоромФД.Доступность 	= Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СогласованиеПриказа;
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.ПодписаниеПроектаПриказаУДЧП") Тогда
		Элементы.ЗаявкаСогласованаСПП.Доступность 		= Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СогласованиеПриказа;
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.РегистрацияПриказа") Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СогласованиеПриказа;
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.СогласованиеРасчетаСЗамГБ")	Тогда
		Элементы.РасчетКомандировочныхСогласованСЗамГБ.Доступность 	= Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СогласованиеРасчетаКомандировочных;
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.СогласованиеРасчетаСГБ") Тогда
		Элементы.РасчетКомандировочныхСогласованСГБ.Доступность 	= Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СогласованиеРасчетаКомандировочных;
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьЭтап(Команда)
	
	ОбработатьБП("ОК");
	ОповеститьОбИзменении(ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ПустаяСсылка"));
	ОповеститьОбИзменении(ПредопределенноеЗначение("Задача.ЗадачаИсполнителяПоСогласованиюПлатежей.ПустаяСсылка"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьНаДоработку(Команда)
	ОбработатьБП("Возврат");
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьВПоставленнойЗадаче(Команда)
	ОбработатьБП("Отказ");
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьБП(РезультатВозврата)
	
	Если не ОбработатьЭтап(РезультатВозврата) тогда
		Возврат;
	КонецЕсли;
	
	Если КомментарийИсполнителя <> "" тогда
		НС = объект.КомментарииПроцесса.Добавить();
		НС.Автор = ТекущийИсполнитель;
		НС.Дата = ТекущаяДата();
		НС.Комментарий = КомментарийИсполнителя ;
		НС.Этап = ТекущаяТочка;
	КонецЕсли;
	Записать();
	
	
	Если не Задача.Пустая() тогда
		ВыполнитьЗадачу(Задача);
	Иначе
		Стартовать();
	КонецЕсли;
	ОповеститьОбИзменении(ПредопределенноеЗначение("Задача.ЗадачаИсполнителяПоСогласованиюПлатежей.ПустаяСсылка"));
	Закрыть();	
	  
КонецПроцедуры

Процедура Стартовать()
	БП = РеквизитФормыВЗначение("Объект");
	БП.Старт();
	ЗначениеВРеквизитФормы(БП,"Объект");
КонецПроцедуры

&НаКлиенте
Функция ОбработатьЭтап(РезультатВозврата)
	
	Если РезультатВозврата = "ОК" тогда
		ЗначениеВозврата = Истина;
	ИначеЕсли РезультатВозврата = "Возврат" или РезультатВозврата = "Отказ" Тогда
		Если КомментарийИсполнителя = "" тогда
			Предупреждение("Не указана причина в комментарии текущего исполнителя");
			ЗначениеВозврата = Ложь;
		Иначе
			ЗначениеВозврата = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатВозврата = "ОК" тогда 
		ЗначениеПоля = "Согласовано";
	ИначеЕсли РезультатВозврата = "Возврат" Тогда
		ЗначениеПоля = "Возвращено";
	Иначе
		ЗначениеПоля = "Отказано";
	КонецЕсли;
		
	Если ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.СогласованиеСРП") Тогда
		Объект.ЗаявкаСогласованаСДиректоромСТП = ЗначениеПоля;
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.СогласованиеСКурирующимЧП")	Тогда
		Объект.ЗаявкаСогласованаСКурирующимЧП = ЗначениеПоля;
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.СогласованиеСПП") Тогда
		Объект.ЗаявкаСогласованаСПП = ЗначениеПоля;
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.СогласованиеПроектаПриказаСПД")	Тогда
		Объект.ПроектПриказаСогласованСДиректоромПД = ЗначениеПоля;
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.СогласованиеПроектаПриказаСФД") Тогда
		Объект.ПроектПриказаСогласованСДиректоромФД = ЗначениеПоля;
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.ПодписаниеПроектаПриказаУДЧП") Тогда
		Объект.ПроектПриказаПодписанУДЧП = ЗначениеПоля;
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.СогласованиеРасчетаСЗамГБ")	Тогда
		Объект.РасчетКомандировочныхСогласованСЗамГБ = ЗначениеПоля;
	ИначеЕсли ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.СогласованиеРасчетаСГБ") Тогда
		Объект.РасчетКомандировочныхСогласованСГБ = ЗначениеПоля;
	КонецЕсли;	
	
	 Возврат ЗначениеВозврата;
	 
КонецФункции


&НаСервереБезКонтекста
Функция ВыполнитьЗадачу(Задача)
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.ВыполнитьЗадачу();
КонецФункции

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПолучитьТекущееСостояниеБП();
	ПодготовитьФорму(ЭтаФорма);
	ОбновитьИсториюИзменений();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦС_АдресацияБизнесПроцессов.Пользователь,
	|	ЦС_АдресацияБизнесПроцессов.Подразделение
	|ИЗ
	|	РегистрСведений.ЦС_АдресацияБизнесПроцессов КАК ЦС_АдресацияБизнесПроцессов
	|ГДЕ
	|	ЦС_АдресацияБизнесПроцессов.Пользователь = &глТекущийПользователь";
	
	Запрос.УстановитьПараметр("глТекущийПользователь", параметрысеанса.текущийпользователь);	
	
	ТолькоПросмотр								= истина;
	элементы.Группа1.Доступность				= Ложь;
	элементы.ФормаКоманднаяПанель.Доступность	= Ложь;	
	
	Если (Не ТекущийОбъект.стартован)
		Или параметрысеанса.текущийпользователь = Задача.Пользователь
		Или Запрос.Выполнить().Выгрузить().НайтиСтроки(Новый Структура("Пользователь, Подразделение", параметрысеанса.текущийпользователь, Задача.Подразделение)).Количество() <> 0 
		Или РольДоступна("ПолныеПрава") тогда           
		
		Если (НЕ ТекущийОбъект.Завершен) Тогда
			
			ТолькоПросмотр = ложь;
			элементы.Группа1.Доступность = Истина;
			элементы.ФормаКоманднаяПанель.Доступность = Истина;
		КонецЕсли;

	иначе
		Сообщить("Этап не предусматривает исполнение текущим пользователем. Форма заблокирована");
	КонецЕсли;
			
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭлементОтбора = СписокФайлов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	
	//Список = ПолучитьСписокСертификатов(75, Ложь);

	ЭтаФорма.Элементы.СоздатьПриказНаКомандировку.Видимость = Ложь;
	ЭтаФорма.Элементы.СоздатьДокументРасчетаКомандировочных.Видимость = Ложь;
	ЭтаФорма.Элементы.СоздатьАвансовыйОтчет.Видимость = Ложь;
	ЭтаФорма.Элементы.СоздатьППИ.Видимость = Ложь;
	Элементы.ОзнакомитьСОтчетом.Видимость = Ложь;

	
	ЭтаФорма.Элементы.ПриказНаКомандировку.ТолькоПросмотр = Истина;
	ЭтаФорма.Элементы.РасчетКомандировочных.ТолькоПросмотр = Истина; 
	ЭтаФорма.Элементы.ПлатежноеПоручениеИсходящее.ТолькоПросмотр = Истина;
	ЭтаФорма.Элементы.АвансовыйОтчет.ТолькоПросмотр = Истина;
	
	Элементы.Согласующий1.ТолькоПросмотр = Истина;
	Элементы.Согласующий2.ТолькоПросмотр = Истина;
	
	
	Если ЭтотОбъект.ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.СозданиеПроектаПриказаНаКомандировку") Тогда
		ЭтаФорма.Элементы.СоздатьПриказНаКомандировку.Видимость = Истина;
		ЭтаФорма.Элементы.ПриказНаКомандировку.ТолькоПросмотр = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СогласованиеПриказа;
	ИначеЕсли ЭтотОбъект.ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.ДБУРасчетКомандировочных") Тогда
		ЭтаФорма.Элементы.СоздатьДокументРасчетаКомандировочных.Видимость = Истина;
		ЭтаФорма.Элементы.РасчетКомандировочных.ТолькоПросмотр = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СогласованиеРасчетаКомандировочных;
	ИначеЕсли ЭтотОбъект.ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.ДБУЗаполнениеАвансовогоОтчета") Тогда
		ЭтаФорма.Элементы.СоздатьАвансовыйОтчет.Видимость = Истина;
		ЭтаФорма.Элементы.АвансовыйОтчет.ТолькоПросмотр = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СогласованиеРасчетаКомандировочных;
	ИначеЕсли ЭтотОбъект.ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.ДБУПеречислениеДенег") Тогда
		ЭтаФорма.Элементы.СоздатьППИ.Видимость = Истина;
		ЭтаФорма.Элементы.ПлатежноеПоручениеИсходящее.ТолькоПросмотр = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СогласованиеРасчетаКомандировочных;
	КонецЕсли;
	
	Если ЭтотОбъект.ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.ПустаяСсылка") Тогда
		Элементы.ВыполнитьЭтап.Видимость = Ложь;
		Элементы.ВернутьНаДоработку.Видимость = Ложь;
		Элементы.ОтказатьВПоставленнойЗадаче.Видимость = Ложь;

		Элементы.Согласующий1.ТолькоПросмотр = Ложь;
		Элементы.Согласующий2.ТолькоПросмотр = Ложь;	
		Элементы.Страницы.ТекущаяСтраница = Элементы.СогласованиеЗаявки;

		
	ИначеЕсли ЭтотОбъект.ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.СозданиеПроектаПриказаНаКомандировку") 
		ИЛИ ЭтотОбъект.ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.ДБУРасчетКомандировочных") 
		ИЛИ ЭтотОбъект.ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.ДБУЗаполнениеАвансовогоОтчета")
		ИЛИ ЭтотОбъект.ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.РегистрацияПриказа") 
		ИЛИ ЭтотОбъект.ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.ДБУПеречислениеДенег") 
		ИЛИ ЭтотОбъект.ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.ОзнакомлениеСАвансовымотчетом") 
		ИЛИ ЭтотОбъект.ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.ЗаполнениеРаботникомОтчетаОКомандировке") Тогда
	   
			Элементы.ВыполнитьЭтап.Заголовок = "Выполнено";
			Элементы.ВернутьНаДоработку.Видимость = Ложь;
			Элементы.ОтказатьВПоставленнойЗадаче.Видимость = Ложь;
			
	ИначеЕсли ЭтотОбъект.ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.ПодписаниеПроектаПриказаУДЧП") Тогда
		
		Элементы.ВыполнитьЭтап.Заголовок = "Подписать";

	КонецЕсли;
	
	
	Сотрудник = Справочники.СотрудникиОрганизаций.НайтиПоРеквизиту("Физлицо", Объект.ФизЛицо);
	
	Если Сотрудник.ТекущееПодразделениеОрганизации.Наименование = "Руководство" Тогда
		Элементы.Согласующий1.Видимость = Ложь;
		Элементы.Согласующий2.Видимость = Ложь;
	КонецЕсли;

	Если Сотрудник.ТекущееПодразделениеОрганизации.Наименование = "Руководство"
		ИЛИ Объект.ВидТранспорта = Справочники.бит_ВидыТранспорта.ЖДСкоростной 
		ИЛИ Объект.ВидТранспорта = Справочники.бит_ВидыТранспорта.Самолет Тогда
        Элементы.ЗаявкаСогласованаСПП.Видимость = Истина;
	Иначе
		Элементы.ЗаявкаСогласованаСПП.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтотОбъект.ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.ЗаполнениеРаботникомОтчетаОКомандировке") Тогда
		 Элементы.ЗамечанияИсполнителя.Заголовок = "Отчет о командировке";
		 Элементы.ОзнакомитьСОтчетом.Видимость = Истина;
		 Элементы.Страницы.ТекущаяСтраница = Элементы.Комментарии;
	КонецЕсли;
	
	//Если ЭтотОбъект.ТекущаяТочка = ПредопределенноеЗначение("БизнесПроцесс.ЗаявкаНаКомандировку.ТочкаМаршрута.ЗаполнениеРаботникомОтчетаОКомандировке") Тогда
	//	Элементы.Страницы.ТекущаяСтраница = Элементы.Комментарии;
	//КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СписокФайлов.Отбор.Элементы.Очистить();
	ЭлементОтбора = СписокФайлов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПриказНаКомандировкуНаСервере()
	
	Приказ = Документы.КомандировкиОрганизаций.СоздатьДокумент();
	Приказ.Автор = ПараметрыСеанса.ТекущийПользователь;
	Приказ.Дата = ТекущаяДата();
	Приказ.Организация = Объект.Организация;
	Приказ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Приказ.СтранаНазначения = Объект.СтранаНазначения;
	Приказ.ГородНазначения = Объект.ГородНазначения;
	Приказ.СотрудникЗамена = Объект.СотрудникЗамена;
	Приказ.ПриказПодписывает = Объект.ПриказПодписывает;
	
	Для Каждого Стр Из Объект.Таблица Цикл 
		
		СтрокаРаб = Приказ.РаботникиОрганизации.Добавить();
		СтрокаРаб.ДатаНачала = Стр.ДатаНачала;
		СтрокаРаб.ДатаОкончания = Стр.ДатаОкончания;
		СтрокаРаб.ФизЛицо = Объект.ФизЛицо;
		СтрокаРаб.Сотрудник = Справочники.СотрудникиОрганизаций.НайтиПоРеквизиту("Физлицо", Объект.ФизЛицо);
		СтрокаРаб.Цель = Объект.Цель;
		СтрокаРаб.ГородНазначения = Стр.ГородНазначения;
		СтрокаРаб.ВидТранспорта = Стр.ВидТранспорта;
		СтрокаРаб.ПроизошедшееСобытие = Истина;
		
	КонецЦикла;
	
	Если Объект.СтранаНазначения <> Справочники.КлассификаторСтранМира.Казахстан Тогда
		Приказ.ЗаПределамиРК = Истина;
	КонецЕсли;
			
	Приказ.Записать(РежимЗаписиДокумента.Запись, );
	
	Объект.ПриказНаКомандировку = Приказ.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПриказНаКомандировку(Команда)
	СоздатьПриказНаКомандировкуНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументРасчетаКомандировочныхНаСервере()
	
	Расчет = Документы.РасчетКомандировочных.СоздатьДокумент();
	Расчет.ОбработкаЗаполнения(Объект.ПриказНаКомандировку,);
	Расчет.ВидТранспорта = Объект.ВидТранспорта;
	Расчет.ФизЛицо = Объект.ФизЛицо;
	Расчет.Записать(РежимЗаписиДокумента.Запись, );
	
	Объект.РасчетКомандировочных = Расчет.Ссылка;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументРасчетаКомандировочных(Команда)
	СоздатьДокументРасчетаКомандировочныхНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодписатьЭЦПНаСервере()
		
	//МК = Новый МенеджерКриптографии("Microsoft Enhanced Cryptographic Provider v1.0", "", 1);
	//ДвоичныеДанныеСертификата = СертификатЭЦП.Сертификат.ДанныеСертификата.Получить();
	//
	//Если ДвоичныеДанныеСертификата = Неопределено Тогда
	//	Сообщить("Необходимо выбрать сертификат для подписи");
	//	Возврат;
	//КонецЕсли;

	//Структура = Новый Структура;
	////СертификатДляПодписи = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	////
	////МенеджерКриптографии.Подписать(ПутьПодписи, СертификатДляПодписи);
	////
	////Сообщить(ПутьПодписи);

	//ЭлектроннаяЦифроваяПодписьКлиент.СформироватьДанныеПодписи(МК, Объект.Ссылка, ДвоичныеДанныеСертификата, Структура);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЭЦП(Команда)
		
	//МК = Новый МенеджерКриптографии("Microsoft Enhanced Cryptographic Provider v1.0", "", 1);
	//
	//Хранилище = Объект.Сертификат.СертификатАутентификации;
	//МассивВыбора = Хранилище.ПолучитьВсе();

	//Для Каждого стр из МассивВыбора Цикл
	//	Попытка
	//		ЭтаФорма.Элементы.Сертификат.СписокВыбора.Добавить(стр, стр.Субъект.CN);
	//		////СертификатЭЦП = стр;
	//	Исключение
	//	КонецПопытки;
	//КонецЦикла;
	 
	//Если ДвоичныеДанныеСертификата = Неопределено Тогда
	//	Сообщить("Необходимо выбрать сертификат для подписи");
	//	Возврат;
	//КонецЕсли;
	
	 //Список = ПолучитьСписокСертификатов(75, Ложь);

	//Сертификаты = НОвый СписокЗначений();
	
	АдресСертификата = ПоместитьВоВременноеХранилище(Объект.Сертификат.СертификатАутентификации, УникальныйИдентификатор);

	ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(АдресСертификата);
	КлючBase64 = ДвоичныеДанныеСертификата.Получить();
	КлючBase64 =  Объект.Сертификат.СертификатАутентификации.Получить();
	Пароль = "nfif62";

	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();
	Подпись = Контейнер.СоздатьЭЦП("строка", КлючBase64, Пароль);	

	//Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);

	МК = Новый МенеджерКриптографии("Microsoft Enhanced Cryptographic Provider v1.0", "", 1);
	//ДвоичныеДанныеСертификата = Объект.Сертификат.СертификатАутентификации.Получить();
	//
	//Если ДвоичныеДанныеСертификата = Неопределено Тогда
	//	Сообщить("Необходимо выбрать сертификат для подписи");
	//	Возврат;
	//КонецЕсли;

	//СертификатДляПодписи = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);

	
	         			
		 
	Пароль = "";
	Комментарий = "";
	
	//Структура = Новый Структура("Сертификат, Пароль,Комментарий",Сертификат, Пароль, Комментарий);
	//
	////ПредставлениеДокумента = СформироватьПредставлениеДокумента();
	//	
	//ДвоичныеДанныеСертификата = Объект.Сертификат.СертификатАутентификации.Получить();
	//
	//ДанныеПодписи = ЭлектроннаяЦифроваяПодписьКлиент.СформироватьДанныеПодписи(МК, Объект.Ссылка, ДвоичныеДанныеСертификата, Структура);
		
	//НоваяЗапись = Объект.Подписи.Добавить();
	//
	//НоваяЗапись.Дата				= ДанныеПодписи.ДатаПодписи;
	//НоваяЗапись.Этап			    = ТекущаяТочка;
	////НоваяЗапись.Отпечаток			= Отпечаток;
	//НоваяЗапись.Подпись				= ДанныеПодписи.НоваяПодписьДвоичныеДанные;
	//НоваяЗапись.Автор				= Пользователи.ТекущийПользователь();
	////НоваяЗапись.ЭЦП 				= Новый ХранилищеЗначения(стр.ОткрытыйКлюч);

	////ЭтотОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокСертификатов(ТипМенеджераКриптографии, ПроверятьДатуОкончания)
	
	МассивТипов = Новый Массив;
    МассивТипов.Добавить(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
    МассивТипов.Добавить(ТипХранилищаСертификатовКриптографии.СертификатыПолучателей);
   	
	// Список сертификатов
    СписокСертификатов = Новый Массив;
    МенеджерКриптографии = Новый МенеджерКриптографии("Microsoft Enhanced Cryptographic Provider v1.0", "", 1);
    Для Каждого ТипХранилища Из МассивТипов Цикл
        // Получаем сертификаты для каждого типа хранилища сертификатов
        Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилища);
        // Выбираем все сертификаты
        СертификатыХранилища = Хранилище.ПолучитьВсе();
        ТекущаяДата = ТекущаяДата();
        Для Каждого Сертификат Из СертификатыХранилища Цикл
            Если ПроверятьДатуОкончания И Сертификат.ДатаОкончания < ТекущаяДата Тогда
                // Пропускаем истекшие сертификаты, если нужно
                Продолжить;
            КонецЕсли;
            СписокСертификатов.Добавить(Сертификат);
        КонецЦикла;
	КонецЦикла;
	
	ЭтаФорма.СпСертификатов.ЗагрузитьЗначения(СписокСертификатов);
	Возврат СписокСертификатов;
КонецФункции

Функция СоздатьСтрокуBase64(Строка) Экспорт

	 ВременныйФайл = ПолучитьИмяВременногоФайла();
	 
	 ЗаписьТекста = Новый ЗаписьТекста(ВременныйФайл, "CESU-8");
	 ЗаписьТекста.Записать(Строка);
	 ЗаписьТекста.Закрыть();
	 
	 ДД_Файла = Новый ДвоичныеДанные(ВременныйФайл);
	 //СтрокаBase64 = Base64Строка(ДД_Файла);
	 
	 УдалитьФайлы(ВременныйФайл);
	 
	 Возврат ДД_Файла;

КонецФункции // СоздатьСтрокуBase64()

Функция СформироватьПредставлениеДокумента()
	
	РеквизитыВТекст = "" + Объект.Дата + "," + Объект.Номер + ","+ Объект.ФизЛицо +Объект.ГородНазначения +Объект.ДатаНачала+ Объект.ДатаОкончания + Объект.ВидТранспорта +Объект.Цель + Объект.ПриказНаКомандировку +Объект.РасчетКомандировочных+ТекущийИсполнитель;
		
	//Для Каждого СтрТабличнойЧасти Из  Цикл
	//	
	//	СтрКоличество = Строка(СтрТабличнойЧасти.Количество);
	//	
	//	РеквизитыВТекст  = РеквизитыВТекст + "," + СтрТабличнойЧасти.Товар
	//										+ "," + СтрКоличество;
	//										//+ "," + Строка(СтрТабличнойЧасти.Сумма);
	//КонецЦикла;
										
	Возврат РеквизитыВТекст;
		
КонецФункции

&НаСервере
Процедура СоздатьАвансовыйОтчетНаСервере()
	
	АванОтчет = Документы.АвансовыйОтчет.СоздатьДокумент();
		
	АванОтчет.Автор = ПараметрыСеанса.ТекущийПользователь;
	АванОтчет.Дата = ТекущаяДата();
	АванОтчет.Организация = Объект.Организация;
	АванОтчет.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	АванОтчет.ВалютаДокумента = Объект.РасчетКомандировочных.ВалютаДокумента;
	АванОтчет.ГородНазначения = Объект.ГородНазначения;
	АванОтчет.КратностьДокумента = 1;
	//АванОтчет.КурсДокумента = Объект.РасчетКомандировочных.КурсВалюты;
	АванОтчет.СчетРасчетовСПодотчетнымЛицом = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц;
	АванОтчет.ПриказНаКомандировку = Объект.ПриказНаКомандировку;
	АванОтчет.ФизЛицо = Объект.ФизЛицо;
	АванОтчет.УчитыватьКПН = Истина;
	АванОтчет.УчитыватьНДС = Истина;
	АванОтчет.СуммаВключаетНДС = Истина;
	АванОтчет.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;

	НоваяСтрокаАвансы = АванОтчет.ВыданныеАвансы.Добавить();
	НоваяСтрокаАвансы.Документ = Объект.ПлатежноеПоручениеИсходящее;
	НоваяСтрокаАвансы.Сумма = Объект.ПлатежноеПоручениеИсходящее.СуммаДокумента;


	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетКомандировочныхРаботникиОрганизации.Сотрудник,
		|	СУММА(РасчетКомандировочныхРаботникиОрганизации.Проезд) КАК Проезд,
		|	СУММА(РасчетКомандировочныхРаботникиОрганизации.Проживание) КАК Проживание,
		|	СУММА(РасчетКомандировочныхРаботникиОрганизации.Суточные) КАК Суточные
		|ИЗ
		|	Документ.РасчетКомандировочных.РаботникиОрганизации КАК РасчетКомандировочныхРаботникиОрганизации
		|ГДЕ
		|	РасчетКомандировочныхРаботникиОрганизации.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетКомандировочныхРаботникиОрганизации.Сотрудник";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.РасчетКомандировочных);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Проезд > 0 Тогда
			НоваяСтрока = АванОтчет.Прочее.Добавить();
			//НоваяСтрока.Сумма = ТекСтрокаРаботникиОрганизации.Проезд;
			НоваяСтрока.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.РасходыНаПроезд;
		КонецЕсли;
			                                                                  
		Если Выборка.Проживание > 0 Тогда
			НоваяСтрока = АванОтчет.Прочее.Добавить();
			//НоваяСтрока.СуммаПлатежа = ТекСтрокаРаботникиОрганизации.Проживание;
			НоваяСтрока.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.РасходыПоНаймуЖилья;
		КонецЕсли;

		Если Выборка.Суточные > 0 Тогда
			НоваяСтрока = АванОтчет.Прочее.Добавить();
			НоваяСтрока.Сумма = Выборка.Суточные;
			НоваяСтрока.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Суточные;
		КонецЕсли;
		
	КонецЦикла;
	
				
	АванОтчет.Записать(РежимЗаписиДокумента.Запись, );
	
	Объект.АвансовыйОтчет = АванОтчет.Ссылка;
	ЭтотОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАвансовыйОтчет(Команда)
	СоздатьАвансовыйОтчетНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьППИНаСервере()
	
	ППИ = Документы.ПлатежноеПоручениеИсходящее.СоздатьДокумент();
	Основание = Объект.РасчетКомандировочных;
	
	ППИ.Автор = ПараметрыСеанса.ТекущийПользователь;
	ППИ.ВалютаДокумента = Основание.ВалютаДокумента;
		
	ППИ.Организация = Основание.Организация;
	ППИ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ППИ.УчитыватьКПН = Истина;
	ППИ.ОтражатьВБухгалтерскомУчете = Истина;
	ППИ.ОтраженоВОперУчете = Истина;
	ППИ.Дата = ТекущаяДата();
	ППИ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику;
	ППИ.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ;
	ППИ.КодНазначенияПлатежа = "871";
	ППИ.ДатаВалютирования = ТекущаяДата();
	
	СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Прочие выплаты по операционной деятельности");
	СчетПодоотчета = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПодотчетныхЛиц;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетКомандировочныхРаботникиОрганизации.Сотрудник,
		|	СУММА(РасчетКомандировочныхРаботникиОрганизации.Проезд) КАК Проезд,
		|	СУММА(РасчетКомандировочныхРаботникиОрганизации.Проживание) КАК Проживание,
		|	СУММА(РасчетКомандировочныхРаботникиОрганизации.Суточные) КАК Суточные,
		|	РасчетКомандировочныхРаботникиОрганизации.ФизЛицо
		|ИЗ
		|	Документ.РасчетКомандировочных.РаботникиОрганизации КАК РасчетКомандировочныхРаботникиОрганизации
		|ГДЕ
		|	РасчетКомандировочныхРаботникиОрганизации.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетКомандировочныхРаботникиОрганизации.Сотрудник,
		|	РасчетКомандировочныхРаботникиОрганизации.ФизЛицо";
	
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	    Пока Выборка.Следующий() Цикл

			ФизЛицоПодотчетник = Выборка.ФизЛицо;
			
			НаборЗаписейКартСчета = РегистрыСведений.КартСчетаФизЛиц.СоздатьНаборЗаписей();
		
			НаборЗаписейКартСчета.Отбор.ФизЛицо.Значение = ФизЛицоПодотчетник;
			НаборЗаписейКартСчета.Отбор.ФизЛицо.Использование = Истина;
			НаборЗаписейКартСчета.Прочитать();
			
			Если НаборЗаписейКартСчета.Количество() > 0 Тогда
				НомерКартСчета = НаборЗаписейКартСчета[0].НомерКартСчета;
			Иначе
				НомерКартСчета = Справочники.КартСчета.ПустаяСсылка();
			КонецЕсли;

			Если Выборка.Проезд > 0 Тогда
				НоваяСтрока = ППИ.ПеречислениеВПодотчет.Добавить();
				НоваяСтрока.СуммаПлатежа = Выборка.Проезд;
				НоваяСтрока.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.РасходыНаПроезд;
				НоваяСтрока.СчетУчета = СчетПодоотчета;
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДС;
				НоваяСтрока.ФизЛицо = ФизЛицоПодотчетник;
				НоваяСтрока.НомерКартСчета = НомерКартСчета;
			КонецЕсли;
			                                                                  
			Если Выборка.Проживание > 0 Тогда
				НоваяСтрока = ППИ.ПеречислениеВПодотчет.Добавить();
				НоваяСтрока.СуммаПлатежа = Выборка.Проживание;
				НоваяСтрока.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.РасходыПоНаймуЖилья;
				НоваяСтрока.СчетУчета = СчетПодоотчета;
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДС;
				НоваяСтрока.ФизЛицо = ФизЛицоПодотчетник;
				НоваяСтрока.НомерКартСчета = НомерКартСчета;
			КонецЕсли;

			Если Выборка.Суточные > 0 Тогда
				НоваяСтрока = ППИ.ПеречислениеВПодотчет.Добавить();
				НоваяСтрока.СуммаПлатежа = Выборка.Суточные;
				НоваяСтрока.ВидЗадолженностиПодотчетногоЛица = Перечисления.ВидыЗадолженностиПодотчетныхЛиц.Суточные;
				НоваяСтрока.СчетУчета = СчетПодоотчета;
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДС;
				НоваяСтрока.ФизЛицо = ФизЛицоПодотчетник;
				НоваяСтрока.НомерКартСчета = НомерКартСчета;
			КонецЕсли;

		КонецЦикла;

		ППИ.Записать(РежимЗаписиДокумента.Запись, );
	
		Объект.ПлатежноеПоручениеИсходящее = ППИ.Ссылка;
		ЭтотОбъект.Записать();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьППИ(Команда)
	СоздатьППИНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	//ОткрытьФорму("БизнесПроцесс.ЗаявкаНаКомандировку.Форма.ФормаЭЦП",,,,,, );

КонецПроцедуры
 






