
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.Свойство("Документ",Объект.Документ);
	Если НЕ Параметры.Свойство("Организация",Объект.Организация) И ЗначениеЗаполнено(Объект.Документ) Тогда
		Объект.Организация = Объект.Документ.Организация;
	КонецЕсли;
	Если НЕ Параметры.Свойство("Дата",Объект.Дата) И ЗначениеЗаполнено(Объект.Документ) Тогда
		Объект.Дата = Объект.Документ.Дата;
	КонецЕсли;
	Параметры.Свойство("Сценарий",Объект.Сценарий);
	Если Параметры.Свойство("АдресДанных") Тогда
		Объект.БюджетныеОперации.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресДанных));
	ИначеЕсли ЗначениеЗаполнено(Объект.Документ) Тогда
	
		Обработки.фин_КонтрольПрогнозныхТранзакций.ИнициализироватьДанныеДокумента(Объект);

	КонецЕсли;
	Обработки.фин_КонтрольПрогнозныхТранзакций.ИнициализироватьДанныеОбработки(Объект);
	
	ПодготовитьФормуНаСервере();
	
	ОбновитьДанныеКонтроля();
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоБюджетныйКонтроль

&НаКлиенте
Процедура АктуальныйМониторингПриИзменении(Элемент)
	
	ОбновитьДанныеКонтроля();
	
	Для Каждого СтрокаДерева Из ДеревоБюджетныйКонтроль.ПолучитьЭлементы() Цикл
		Элементы.ДеревоБюджетныйКонтроль.Развернуть(СтрокаДерева.ПолучитьИдентификатор(),Истина);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоБюджетныйКонтрольКИсполнениюПоПрочимЗаявкамОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Идентификатор = Элементы.ДеревоБюджетныйКонтроль.ТекущиеДанные.Идентификатор;
	Валюта = Элементы.ДеревоБюджетныйКонтроль.ТекущиеДанные.Валюта;
	Период = Элементы.ДеревоБюджетныйКонтроль.ТекущиеДанные.Период;
	
	Попытка
		ТабличныйДокумент = ТаблицаРасшифровки(Идентификатор,Валюта,Период);
		Если ТабличныйДокумент <> Неопределено Тогда
			ТабличныйДокумент.Защита = Истина;
			ТабличныйДокумент.ТолькоПросмотр = Истина;
			ТабличныйДокумент.Показать("Прочие заявки");
		КонецЕсли;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Если Найти(ТекстОшибки,"недостаточно прав") <> 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Недостаточно прав для выполнения расшифровки!'"));
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'При расшифровке возникла ошибка: '" + ТекстОшибки));
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОбновитьБюджетныйКонтроль(Команда) Экспорт
	
	ОбновитьДанныеКонтроля();
	
	Для Каждого СтрокаДерева Из ДеревоБюджетныйКонтроль.ПолучитьЭлементы() Цикл
		Элементы.ДеревоБюджетныйКонтроль.Развернуть(СтрокаДерева.ПолучитьИдентификатор(),Истина);	
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	
	Обработки.фин_КонтрольПрогнозныхТранзакций.ИнициализироватьДанныеРазрезов(Объект);
	
	ВалютаРегламентированногоУчета 		= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	ВалютаУправленческогоУчета 			= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.ДеревоБюджетныйКонтроль);
		
	Элементы.ДеревоБюджетныйКонтрольСценарий.Видимость = Объект.СценарииКонтроля.Количество()>1;
	
	//фин_РаботаСДополнительнымиРазрезамиБюджетирования.НастроитьПредставлениеРазрезов(ЭтаФорма,,"БюджетныеПараметры",Ложь);
	НастроитьРазрезыБюджета(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов"));
	
	ИмяРазреза = "ФинансовыйПоказатель";
	Элементы["ДеревоБюджетныйКонтроль"+ИмяРазреза].Видимость = Объект.СписокПолейСНесколькимиЗначениями.НайтиПоЗначению(ИмяРазреза)<>Неопределено;
	
	ИмяРазреза = "Период";
	Элементы["ДеревоБюджетныйКонтроль"+ИмяРазреза].Видимость = Объект.СписокПолейСНесколькимиЗначениями.НайтиПоЗначению(ИмяРазреза)<>Неопределено;
	
	ИмяРазреза = "Валюта";
	Элементы["ДеревоБюджетныйКонтроль"+ИмяРазреза].Видимость = Объект.СписокПолейСНесколькимиЗначениями.НайтиПоЗначению(ИмяРазреза)<>Неопределено;
	
	Элементы.ДеревоБюджетныйКонтрольКИсполнениюПоТекущейСтрокеЗаявки.Видимость = Объект.БюджетныеОперации.Количество()>1;
	
	Если Объект.РегистрНакопления="" Тогда
		Элементы.ДеревоБюджетныйКонтрольКИсполнениюПоПрочимЗаявкам.Видимость=Ложь;
	КонецЕсли;
	
КонецПроцедуры 

//настраивает дополнительные разрезы
//
&НаСервере
Процедура НастроитьРазрезыБюджета(ПереченьРазрезов)
	ОбработанныеРазрезы=Новый Массив;
	Для Каждого Разрез Из ПереченьРазрезов Цикл
		ИмяРазреза = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяРазреза(Разрез.Значение);
		
		Элементы["ДеревоБюджетныйКонтроль"+ИмяРазреза].Видимость = Объект.СписокПолейСНесколькимиЗначениями.НайтиПоЗначению(ИмяРазреза)<>Неопределено;
		
		Если Найти(ИмяРазреза,"Разрез")=0 Тогда
			Продолжить;
		КонецЕсли;
		НомерРазреза = Сред(ИмяРазреза,СтрДлина("Разрез")+1);
		Элементы["ДеревоБюджетныйКонтрольРазрез"+НомерРазреза].Заголовок = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПредставлениеРазреза(Разрез.Значение);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеКонтроля()
	
	// подготовка данных для расчета
	ТаблицаБюджетныйКонтроль = ДанныеФормыВЗначение(ДеревоБюджетныйКонтроль, Тип("ДеревоЗначений"));
	СоответствиеРасшифровка = Новый Соответствие;
	
	Обработки.фин_КонтрольПрогнозныхТранзакций.ЗаполнитьБюджетныйКонтроль(Объект,ТаблицаБюджетныйКонтроль,СоответствиеРасшифровка,АктуальныйМониторинг);	
		
	ЗначениеВДанныеФормы(ТаблицаБюджетныйКонтроль,ДеревоБюджетныйКонтроль);
	
	АдресРасшифровок = ПоместитьВоВременноеХранилище(СоответствиеРасшифровка, УникальныйИдентификатор);
	
	Обновлено = ТекущаяДата();
	
КонецПроцедуры



&НаСервере
Функция ТаблицаРасшифровки(Идентификатор, Валюта,Период)
	
	СтрокаКонтроля = ДеревоБюджетныйКонтроль.НайтиПоИдентификатору(Идентификатор);
	
	СоответствиеРасшифровка = ПолучитьИзВременногоХранилища(АдресРасшифровок);
	СписокЗаявок = СоответствиеРасшифровка.Получить(Идентификатор);
	Если СписокЗаявок <> Неопределено И СписокЗаявок.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкиОстатки."+Объект.ИзмерениеРегистраДокумент+" КАК Заявка,
		|	ЗаявкиОстатки.СуммаУпр"+?(Объект.ВидРегистра="Остатки","Остаток","Оборот")+" КАК Сумма,
		|	ЗаявкиОстатки.ВалютнаяСумма"+?(Объект.ВидРегистра="Остатки","Остаток","Оборот")+" КАК СуммаЗаявки
		|ИЗ
		|	РегистрНакопления."+Объект.РегистрНакопления+"."+Объект.ВидРегистра+"("+?(АктуальныйМониторинг=0 ИЛИ Объект.РегистрНакопления="фин_ПрогнозИсполненияБюджетов","","&Дата")+", "+?(Объект.ВидРегистра="Остатки","",",,")+Объект.ИзмерениеРегистраДокумент+" В (&Ссылка)) КАК ЗаявкиОстатки";
		
		Запрос.УстановитьПараметр("Дата", ?(АктуальныйМониторинг=2,КонецДня(Период),Период));
		Запрос.УстановитьПараметр("Ссылка", СписокЗаявок);
		
		Результат = Запрос.Выполнить();
		ТабличныйДокумент = Новый ТабличныйДокумент;
		Макет = Обработки.фин_КонтрольПрогнозныхТранзакций.ПолучитьМакет("РасшифровкаПоЗаявкам");
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.ТекстСумма = "Сумма, "+Строка(Валюта);
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		ВыборкаДетальныеЗаписи = Результат.Выгрузить();
		ВыборкаДетальныеЗаписи.Колонки.Добавить("Разрезы",Новый ОписаниеТипов("Строка"));
		
		Для Каждого СтрокаЗаявка Из ВыборкаДетальныеЗаписи Цикл
            СтрокаЗаявка.Сумма = СтрокаЗаявка.СуммаЗаявки;
			Заявка = СтрокаЗаявка.Заявка;
			Для Каждого СтрокаПараметров Из Объект.СписокРазрезовКонтроля Цикл
				СтрокаЗаявка.Разрезы = СтрокаЗаявка.Разрезы+?(СтрокаЗаявка.Разрезы="","",";"+Символы.ПС)+фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Перечисления.фин_ФактическиеПоказателиБюджетирования[СтрокаПараметров.Значение])+": "+?(ЗначениеЗаполнено(СтрокаКонтроля[СтрокаПараметров.Значение]),Строка(СтрокаКонтроля[СтрокаПараметров.Значение]),"<пустое значение>");
			КонецЦикла;
			ОбластьСтрока.Параметры.Заполнить(СтрокаЗаявка);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

