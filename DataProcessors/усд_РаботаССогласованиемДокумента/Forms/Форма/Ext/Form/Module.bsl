////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("ДокументОбъект") Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Форма не предназначена для работы в самостоятельном режиме!");
		Возврат;
	КонецЕсли;
	
	Объект.ДокументОбъект = Параметры.ДокументОбъект;
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОбъект) Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Форма не предназначена для работы в самостоятельном режиме!");
		Возврат;
	КонецЕсли;
	
	НадписьКомментарий 			= "Комментарий";
	НадписьМониторСогласования 	= "Монитор согласования";
	НадписьПодходящиеМаршруты 	= "Подходящие маршруты";
	ОбновитьСведенияФормы();
	Элементы.ДекорацияВерсии.Видимость=РольДоступна("ПолныеПрава") ИЛИ РольДоступна("усд_УправлениеСогласованиемИУтверждениемДокументов") ИЛИ РольДоступна("ЧтениеВерсийОбъектов");
	Если НЕ (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("усд_УправлениеСогласованиемИУтверждениемДокументов")) Тогда
		Элементы.ПодходящиеМаршрутыПоставитьНаМаршрут.Видимость	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_РежимПостановкиДокументовНаМаршрут")<>Перечисления.усд_РежимыПостановкиДокументовНаМаршрут.Автоматический;
		Элементы.ПодходящиеМаршрутыСнятьСМаршрута.Видимость		= Ложь;
		Элементы.ПодходящиеМаршрутыНаНачалоТекущего.Видимость	= Ложь;
		Если НЕ РольДоступна("усд_УчастникПроцессаСогласованияИУтвержденияДокументов") Тогда
			Элементы.ГруппаМаршруты.Видимость 					= Ложь;
			Элементы.ДекорацияКарта.Видимость 					= Ложь;
			Элементы.ДекорацияЛистСогласования.Видимость 		= Ложь;
			Элементы.ДекорацияНаКонтроль.Видимость 				= Ложь;
			Элементы.ДекорацияСведения.Видимость 				= Ложь;
			Элементы.ДекорацияУтвердить.Видимость 				= Ложь;
		КонецЕсли;
	КонецЕсли;
	РежимИнтеграции = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Элементы.ДекорацияПрикрепленныеФайлы.Видимость = (РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана ИЛИ РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный ИЛИ РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3) И (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("усд_УправлениеСогласованиемИУтверждениемДокументов") ИЛИ РольДоступна("РаботаСПапкамиФайлов"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПослеЗаписи_усд_РеестрЗаметок" Или ИмяСобытия = "ПослеУдаления_усд_РеестрЗаметок" Тогда
		ОбновитьЗаметки();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДекорацияСоздатьЗаметкуНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.усд_РеестрЗаметок.Форма.ЗаметкиПоОбъекту",Новый Структура("НазваниеОбъект,НазваниеДополнительно,Объект","Документ","Этап",Объект.ДокументОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартаНажатие(Элемент)
    ОткрытьФорму("Отчет.усд_КартаСостоянияДокумента.Форма",Новый Структура("Документ,СформироватьПриОткрытии",Объект.ДокументОбъект,Истина),ЭтотОбъект,Объект.ДокументОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСведенияНажатие(Элемент)
    ОткрытьФорму("Отчет.усд_ИсторияДвиженияДокументаПоМаршрутам.Форма",Новый Структура("Документ,СформироватьПриОткрытии,НеВосстанавливатьНастройки",Объект.ДокументОбъект,Истина,Истина),ЭтотОбъект,Объект.ДокументОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбновитьНажатие(Элемент)
	ОбновитьСведенияФормы();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУтвердитьНажатие(Элемент)
	ОткрытьФорму("Обработка.усд_УтверждениеДокументов.Форма.Форма",Новый Структура("Документ",Объект.ДокументОбъект),ЭтотОбъект,Объект.ДокументОбъект)
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНаКонтрольНажатие(Элемент)
	ПоставитьНаКонтроль();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЛистСогласованияНажатие(Элемент)
    ОткрытьФорму("Отчет.усд_ЛистСогласования.Форма",Новый Структура("Документ,СформироватьПриОткрытии,НеВосстанавливатьНастройки",Объект.ДокументОбъект,Истина,Истина),ЭтотОбъект,Объект.ДокументОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрикрепленныеФайлыНажатие(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОбъект) Тогда
		ПоказатьПредупреждение(, "Документ не выбран!");
		Возврат;
	КонецЕсли;	
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ВладелецФайла", Объект.ДокументОбъект);
	мЗаголовок = НСтр("ru = 'Присоединенные файлы'");
	мПараметры.Вставить("ЗаголовокФормы", мЗаголовок);
	
	ОткрытьФорму(
		"Справочник.Файлы.Форма.ФормаСпискаПрисоединенныхФайлов", 
		мПараметры,
		ЭтотОбъект, 
		УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВерсииНажатие(Элемент)
	СписокВерсий = ОткрытьФорму("РегистрСведений.ВерсииОбъектов.Форма.ВыборХранимыхВерсий",
								Новый Структура("Ссылка", Объект.ДокументОбъект),
								ЭтотОбъект,
								УникальныйИдентификатор);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать
	
&НаКлиенте
Процедура СнятьСМаршрута(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСнятьСМаршрута", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, "Снять документ с текущего маршрута с потерей всей истории согласования?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставитьНаМаршрут(Команда)
	
	Если Элементы.ПодходящиеМаршруты.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, "Не выбран маршрут!");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Маршрут) Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоставитьНаМаршрут", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Снять документ с текущего маршрута с потерей всей истории согласования?", РежимДиалогаВопрос.ДаНет);
	Иначе 
		ПослеЗакрытияВопросаПоставитьНаМаршрут(КодВозвратаДиалога.Да, Неопределено);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаНачалоТекущего(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Маршрут) Тогда
		ПоказатьПредупреждение(, "Документ не находится на маршруте!");
		Возврат;
	КонецЕсли;	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаНаНачалоТекущего", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, "Вернуть документ на начало текущего маршрута с потерей всей истории согласования?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ОбновитьЗаметки()
	
	Объект.Заметок = усд_ПроцедурыСогласованияДокументов.ВывестиЗаметкиПоДокументу(Объект.ДокументОбъект,ПолеЗаметок,фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"))>0;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияФормы()
	// получаем заметки
	ОбновитьЗаметки();
	// прочее
	РучнойВыборМаршрута = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_РежимПостановкиДокументовНаМаршрут")<>Перечисления.усд_РежимыПостановкиДокументовНаМаршрут.Автоматический;
	/////////////
	Объект.Информация = "Документу не назначен маршрут";
	мДеревоПодписей = ДанныеФормыВЗначение(ДеревоПодписей,Тип("ДеревоЗначений"));
	мДеревоПодписей.Строки.Очистить();
	Объект.Состояние 	= Справочники.усд_СостоянияДокументов.ПустаяСсылка();
	Объект.Маршрут 		= Справочники.усд_МаршрутыДвиженияДокументов.ПустаяСсылка();
	Объект.Этап 		= Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ПустаяСсылка();
	Объект.Исполнитель	= Справочники.Пользователи.ПустаяСсылка();
	ИмяДокумента = Объект.ДокументОбъект.Метаданные().Имя;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыДокументов.Ссылка
	|ИЗ
	|	Справочник.фин_ВидыДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.ПрограммныйИдентификатор = &ПрограммныйИдентификатор
	|	И (НЕ ВидыДокументов.ПометкаУдаления)";
	Запрос.УстановитьПараметр("ПрограммныйИдентификатор",ИмяДокумента);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Если ИмяДокумента = "усд_ВходящийДокумент" Тогда
			ВидДокументов = Объект.ДокументОбъект.ПозицияКлассификатора;
		Иначе	
			ВидДокументов = Выборка.Ссылка;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	НазначенияМаршрутов.Маршрут
		|ИЗ
		|	РегистрСведений.усд_НазначенияМаршрутов КАК НазначенияМаршрутов
		|ГДЕ
		|	НазначенияМаршрутов.Документ = &Документ";
		Запрос.УстановитьПараметр("Документ", Объект.ДокументОбъект);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.Маршрут = Выборка.Маршрут;
			Объект.Информация = "Документ ожидает подписей на маршруте согласования и утверждения";
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Этап,
			               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Состояние,
			               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Статус,
			               |	ДвижениеДокументовПоМаршрутамСрезПоследних.ПричинаВозврата,
			               |	ДвижениеДокументовПоМаршрутамСрезПоследних.ОтветственноеЛицо,
			               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Приоритет
			               |ИЗ
			               |	РегистрСведений.усд_АктивныеЭтапыРассмотренияДокументов.СрезПоследних(, Документ = &Документ) КАК ДвижениеДокументовПоМаршрутамСрезПоследних";
			Запрос.УстановитьПараметр("Документ", Объект.ДокументОбъект);
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Объект.Этап = Выборка.Этап;
				Объект.Состояние = Выборка.Состояние;
				Объект.Приоритет = Выборка.Приоритет;
				Объект.Исполнитель = Выборка.ОтветственноеЛицо;
				Если Выборка.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Отклоненный Тогда
					Объект.Информация = "Документ отклонен по причине: "+Выборка.ПричинаВозврата;
				ИначеЕсли Выборка.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Согласованный Тогда
					Объект.Информация = "Документ согласован и утвержден";
				ИначеЕсли Выборка.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Возвращенный Тогда
					Объект.Информация = "Документ возвращен по причине: "+Выборка.ПричинаВозврата;
				КонецЕсли;
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Этап,
				               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Статус,
				               |	ДвижениеДокументовПоМаршрутамСрезПоследних.ПричинаВозврата,
				               |	ДвижениеДокументовПоМаршрутамСрезПоследних.ОтветственноеЛицо,
				               |	ДвижениеДокументовПоМаршрутамСрезПоследних.Приоритет
				               |ИЗ
				               |	РегистрСведений.усд_ДвижениеДокументовПоМаршрутам.СрезПоследних(, Документ = &Документ) КАК ДвижениеДокументовПоМаршрутамСрезПоследних";
				Запрос.УстановитьПараметр("Документ", Объект.ДокументОбъект);
				РезультатЗапроса = Запрос.Выполнить();
				Выборка = РезультатЗапроса.Выбрать();
				Если Выборка.Следующий() Тогда
					Объект.Этап = Выборка.Этап;
					Объект.Приоритет = Выборка.Приоритет;
					Объект.Исполнитель = Выборка.ОтветственноеЛицо;
					Если Выборка.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Отклоненный Тогда
						Объект.Информация = "Документ отклонен по причине: "+Выборка.ПричинаВозврата;
					ИначеЕсли Выборка.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Согласованный Тогда
						Объект.Информация = "Документ согласован и утвержден";
					ИначеЕсли Выборка.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Возвращенный Тогда
						Объект.Информация = "Документ возвращен по причине: "+Выборка.ПричинаВозврата;
					КонецЕсли;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	// заполнение списка маршрутов
	мПодходящиеМаршруты = ДанныеФормыВЗначение(ПодходящиеМаршруты,Тип("ДеревоЗначений"));
	мПодходящиеМаршруты.Строки.Очистить();
	СписокМаршрутов = СписокМаршрутов();
	ВыбиратьИсполнителя = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("РазрешитьВыборИсполнителейПоУсмотрениюПользователя");
	Для Каждого Маршрут Из СписокМаршрутов Цикл
		НоваяСтрока = мПодходящиеМаршруты.Строки.Добавить();	
		НоваяСтрока.Маршрут  = Маршрут;
		Если ВыбиратьИсполнителя Тогда
			СписокИсполнителей = ПолучитьСписокИсполнителей(Маршрут);
			Для Каждого Исполнитель Из СписокИсполнителей Цикл
				СтрокаИсполнитель = НоваяСтрока.Строки.Добавить();
				СтрокаИсполнитель.Маршрут  = Исполнитель;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ЗначениеВДанныеФормы(мПодходящиеМаршруты,ПодходящиеМаршруты);
	Если НЕ РучнойВыборМаршрута Тогда
		Элементы.ПодходящиеМаршрутыПоставитьНаМаршрут.Видимость = Ложь;
	КонецЕсли;
	
	Объект.ОжидаемыйМаршрут = усд_УправлениеСогласованиемДокументов.НазначитьМаршрут(,Объект.ДокументОбъект);
	
КонецПроцедуры

//устанавливает для документа маршрут утверждения и возвращает присвоенный маршрут
//
&НаСервере
Функция СписокМаршрутов() Экспорт
	ВидДокументов = Неопределено;
	Если Объект.ДокументОбъект.Метаданные().Имя = "усд_ВходящийДокумент" Тогда
		ВидДокументов = Объект.ДокументОбъект.ПозицияКлассификатора;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПрограммныйИдентификатор",Объект.ДокументОбъект.Метаданные().Имя);
		Запрос.Текст="ВЫБРАТЬ
		|	ВидыДокументов.Ссылка КАК ВидДокументов
		|ИЗ
		|	Справочник.фин_ВидыДокументов КАК ВидыДокументов
		|ГДЕ
		|	ВидыДокументов.ПрограммныйИдентификатор = &ПрограммныйИдентификатор";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ВидДокументов = Выборка.ВидДокументов;
		Иначе
			Возврат Новый Массив;
		КонецЕсли;
	КонецЕсли;	
	Дата = Объект.ДокументОбъект.Дата;
	Если Дата = '00010101' Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидДокументов",		ВидДокументов);
	Запрос.УстановитьПараметр("Дата",				Дата);
	Запрос.Текст="ВЫБРАТЬ
	             |	АктуальныеМаршруты.Маршрут КАК Маршрут,
	             |	АктуальныеМаршруты.Маршрут.УсловиеПопаданияНаМаршрут КАК УсловиеИспользования,
	             |	АктуальныеМаршруты.Маршрут.ИспользоватьПоУмолчанию КАК ИспользоватьПоУмолчанию
	             |ИЗ
	             |	РегистрСведений.усд_АктуальныеМаршрутыСогласованияДокументов КАК АктуальныеМаршруты
	             |ГДЕ
	             |	АктуальныеМаршруты.ВидДокументов = &ВидДокументов
	             |	И АктуальныеМаршруты.Маршрут.Владелец = &ВидДокументов";
	ТаблицаМаршрутовИУсловий = Запрос.Выполнить().Выгрузить();
	СписокМаршрутов = Новый Массив;
	Если ТаблицаМаршрутовИУсловий.Количество()=0 Тогда
		Возврат Новый Массив;
	Иначе
		Фильтр = Новый Структура("ИспользоватьПоУмолчанию");
		Фильтр.ИспользоватьПоУмолчанию = Истина;
		МаршрутПоУмолчанию = Неопределено;
		СтрокиПоУмолчанию = ТаблицаМаршрутовИУсловий.НайтиСтроки(Фильтр);
		Если СтрокиПоУмолчанию.Количество()>0 Тогда
			Для Каждого СтрокаСписка Из СтрокиПоУмолчанию Цикл
				СписокМаршрутов.Добавить(СтрокаСписка.Маршрут);
			КонецЦикла;
		КонецЕсли;
		Фильтр.ИспользоватьПоУмолчанию = Ложь;
		СтрокиСУсловиями = ТаблицаМаршрутовИУсловий.НайтиСтроки(Фильтр);
		Если СтрокиСУсловиями.Количество()>0 Тогда
			Для Каждого СтрокаСУсловием Из СтрокиСУсловиями Цикл
				СтруктураДанныхДокумента = усд_УправлениеСогласованиемДокументов.СоздатьСтруктуруПоДаннымДокумента(Объект.ДокументОбъект);
				Если усд_ПроцедурыСогласованияДокументов.УсловиеВыполняется(СтрокаСУсловием.УсловиеИспользования,Объект.ДокументОбъект,,СтруктураДанныхДокумента) Тогда
					СписокМаршрутов.Добавить(СтрокаСУсловием.Маршрут);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат СписокМаршрутов;
КонецФункции //НазначитьМаршрут

&НаСервере
Функция ПолучитьСписокИсполнителей(Маршрут)
    ПервыйЭтап = усд_ПроцедурыСогласованияДокументов.ПолучитьПервыйЭтап(Маршрут,,Объект.ДокументОбъект);
	Если ПервыйЭтап = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	усд_ПраваПодписиНаЭтапахМаршрутов.Пользователь
		|ПОМЕСТИТЬ ВТ_Права
		|ИЗ
		|	РегистрСведений.усд_ПраваПодписиНаЭтапахМаршрутов КАК усд_ПраваПодписиНаЭтапахМаршрутов
		|ГДЕ
		|	усд_ПраваПодписиНаЭтапахМаршрутов.Маршрут = &Маршрут
		|	И усд_ПраваПодписиНаЭтапахМаршрутов.Этап = &Этап
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Права.Пользователь
		|ПОМЕСТИТЬ ВТ_Итоги
		|ИЗ
		|	ВТ_Права КАК ВТ_Права
		|ГДЕ
		|	ВТ_Права.Пользователь ССЫЛКА Справочник.Пользователи
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	усд_СоставГруппСогласованияДокументов.Пользователь
		|ИЗ
		|	ВТ_Права КАК ВТ_Права
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.усд_СоставГруппСогласованияДокументов КАК усд_СоставГруппСогласованияДокументов
		|		ПО ВТ_Права.Пользователь = усд_СоставГруппСогласованияДокументов.ГруппаСогласования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Итоги.Пользователь
		|ИЗ
		|	ВТ_Итоги КАК ВТ_Итоги
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Итоги.Пользователь.Наименование";

	Запрос.УстановитьПараметр("Маршрут", Маршрут);
	Запрос.УстановитьПараметр("Этап", ПервыйЭтап.Этап);

	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
    Возврат Результат;

КонецФункции

&НаСервере
Процедура ПоставитьНаКонтроль()
	НаборЗаписей = РегистрыСведений.усд_ДокументыНаКонтроле.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Объект.ДокументОбъект);
	НаборЗаписей.Отбор.ОтветственноеЛицо.Установить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"));
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество()=0 Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.Документ = Объект.ДокументОбъект;
		Запись.ОтветственноеЛицо = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь");
		Попытка
			НаборЗаписей.Записать();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ поставлен на контроль");
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось поставить документ на контроль: "+ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПостановкуНаМаршрут(Маршрут, Исполнитель)
	НачатьТранзакцию();
	Если усд_ПроцедурыСогласованияДокументов.СнятьСМаршрута(Объект.ДокументОбъект) Тогда
		Если НЕ усд_ПроцедурыСогласованияДокументов.ПоставитьНаМаршрут(Объект.ДокументОбъект,ВидДокументов,Маршрут) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		ОбновитьСведенияФормы();
	Иначе
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСнятиеСМаршрута()
	НачатьТранзакцию();
	Если усд_ПроцедурыСогласованияДокументов.СнятьСМаршрута(Объект.ДокументОбъект) Тогда
		ОбновитьСведенияФормы();
	КонецЕсли;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаСнятьСМаршрута(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьСнятиеСМаршрута();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоставитьНаМаршрут(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Маршрут = ПредопределенноеЗначение("Справочник.усд_МаршрутыДвиженияДокументов.ПустаяСсылка");
		Исполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		Если ТипЗнч(Элементы.ПодходящиеМаршруты.ТекущиеДанные.Маршрут) = Тип("СправочникСсылка.Пользователи") Тогда
			Исполнитель = Элементы.ПодходящиеМаршруты.ТекущиеДанные.Маршрут;
			Маршрут = Элементы.ПодходящиеМаршруты.ТекущиеДанные.ПолучитьРодителя().Маршрут;
		Иначе
			Маршрут = Элементы.ПодходящиеМаршруты.ТекущиеДанные.Маршрут;
		КонецЕсли;
		ВыполнитьПостановкуНаМаршрут(Маршрут, Исполнитель);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаНаНачалоТекущего(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьПостановкуНаМаршрут(Объект.Маршрут, ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));	
	КонецЕсли;
	
КонецПроцедуры

