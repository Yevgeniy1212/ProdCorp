
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если НЕ Параметры.Свойство("ФормаОплаты") ИЛИ Не ЗначениеЗаполнено(Параметры.ФормаОплаты) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указана форма оплаты.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ВалютаДокумента") ИЛИ Не ЗначениеЗаполнено(Параметры.ВалютаДокумента) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указана валюта документа.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ФормаОплаты",					ФормаОплаты);
	Параметры.Свойство("ВалютаДокумента",				ВалютаДокумента);
	Параметры.Свойство("КурсДокумента",					КурсДокумента);
	Параметры.Свойство("КратностьДокумента",			КратностьДокумента);
	Параметры.Свойство("ДатаДок",						ДатаДокумента);
	Параметры.Свойство("ИмяРегистра",					ИмяРегистраПлан);
	Параметры.Свойство("СуммаДокумента",				Объект.СуммаДляПодбора);
	Параметры.Свойство("ВидОперации",					ВидОперацииПлан);
	Параметры.Свойство("БанковскийСчетКасса",			БанковскийСчетКасса);
	Параметры.Свойство("Организация",					Организация);
	Параметры.Свойство("Проект",						Проект);
	Параметры.Свойство("СтатьяДвиженияДенежныхСредств",	СтатьяДвиженияДенежныхСредств);
	Параметры.Свойство("Контрагент",					Контрагент);
	Параметры.Свойство("ДоговорКонтрагента",			ДоговорКонтрагента);
	Параметры.Свойство("Сделка",						Сделка);
	Параметры.Свойство("ПлатежПоСуммеВзаиморасчетов",	Объект.ПлатежПоСуммеВзаиморасчетов);
	Параметры.Свойство("РасшифровкаПлатежаДок",			РасшифровкаПлатежаАдрес);
	Параметры.Свойство("ОтражатьВБухгалтерскомУчете",	ОтражатьВБухгалтерскомУчете);
	Параметры.Свойство("ДокументСсылка",				ДокументСсылка);	
	Параметры.Свойство("СтруктурноеПодразделение",		СтруктурноеПодразделение);	
	
	ЕстьПодбор = Не Параметры.ЗакрыватьПриВыборе;
	
	Если Параметры.Свойство("МножественныйВыбор") Тогда
		МножественныйВыбор = Параметры.МножественныйВыбор;
	Иначе
		МножественныйВыбор = Ложь;
	КонецЕсли;
	Элементы.ПланируемыеДвижения.МножественныйВыбор = МножественныйВыбор;
	Элементы.НадписьВыбрано.Видимость = МножественныйВыбор;
	
	РежимВыделения = ?(МножественныйВыбор, РежимВыделенияТаблицы.Множественный, РежимВыделенияТаблицы.Одиночный);
	Элементы.ПланируемыеДвижения.РежимВыделения = РежимВыделения;
	
	Если ИмяРегистраПлан = "ден_ЗаявкиНаРасходованиеСредств" Тогда
		ИмяДокумента = "ЗаявкаНаРасходование";
		ПредставлениеДокумента = "Заявки на расходование средств";
	Иначе
		ИмяДокумента = "ДокументПланирования";
		ПредставлениеДокумента = "Планируемые поступления денежных средств";
	КонецЕсли;
	
	Заголовок = ПредставлениеДокумента + ". Вид операции: " + Строка(ВидОперацииПлан);
		
	СформироватьСписокПланируемыхДвижений(ИмяДокумента);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПланируемыеДвижения

&НаКлиенте
Процедура ПланируемыеДвиженияПриАктивизацииСтроки(Элемент)
	
	СуммаВыделено = 0;
	
	Для Каждого Строка Из Элементы.ПланируемыеДвижения.ВыделенныеСтроки Цикл
		СуммаВыделено = СуммаВыделено + Объект.ПланируемыеДвижения.НайтиПоИдентификатору(Строка).СуммаПлатежа;
	КонецЦикла;
	
	НадписьВыбрано = "Всего отмечено: " + Формат(СуммаВыделено,"ЧЦ=15; ЧДЦ=2; ЧРГ=") + " " + Строка(ВалютаДокумента);
	
КонецПроцедуры  

&НаКлиенте
Процедура ПланируемыеДвиженияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("Массив") Тогда
		ОбработатьВыбор(ВыбраннаяСтрока);
	Иначе
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ВыбраннаяСтрока);
		ОбработатьВыбор(МассивСтрок);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Выбрать(Команда)
	
	МассивСтрок = Элементы.ПланируемыеДвижения.ВыделенныеСтроки;
	ОбработатьВыбор(МассивСтрок);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Отбирает неоплаченные задолженности по переданным контрагенту и типу задолженности
// и формирует таблицу для подбора.
//
&НаСервере
Процедура СформироватьСписокПланируемыхДвижений(ДокументПланирования) Экспорт
	
	ТаблицаПлатежи = общ_ПроцедурыМеханизмаЗащиты.СформироватьТаблицуПодбораДокументовПланирования(ДокументПланирования, ИмяРегистраПлан,
		ФормаОплаты, Организация, СтруктурноеПодразделение, БанковскийСчетКасса, Контрагент, ДоговорКонтрагента, СтатьяДвиженияДенежныхСредств,
		ВидОперацииПлан, Проект, Сделка, ДокументСсылка, ВалютаДокумента, КурсДокумента, КратностьДокумента, ДатаДокумента, Объект.СуммаДляПодбора);
	
	Если ЕстьПодбор Тогда
		// убираем из таблицы значения, уже присутствующие в форме документа
		РасшифровкаПлатежаДок = ПолучитьИзВременногоХранилища(РасшифровкаПлатежаАдрес);
		Для Каждого СтрокаДок Из РасшифровкаПлатежаДок Цикл
			МассивКУдалению = Новый Массив;
			СуммаПлатежаДок = СтрокаДок.СуммаПлатежа;
			СуммаВзаиморасчетовДок = СтрокаДок.СуммаВзаиморасчетов;
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ДокументПланирования",СтрокаДок.ДокументПланированияПлатежа);
			СтруктураПоиска.Вставить("ДоговорКонтрагента",СтрокаДок.ДоговорКонтрагента);
			МассивПодбора = ТаблицаПлатежи.НайтиСтроки(СтруктураПоиска);
			Для Индекс = 0 По МассивПодбора.Количество() - 1 Цикл
				СтрокаПодбор = МассивПодбора[Индекс];
				Если (Не (СтрокаПодбор.Сделка = Неопределено Или СтрокаПодбор.Сделка = СтрокаДок.Сделка)) Тогда
					Продолжить;
				КонецЕсли;
				Если (СтрокаПодбор.СуммаПлатежа >= СуммаПлатежаДок И СтрокаПодбор.СуммаВзаиморасчетов >= СуммаВзаиморасчетовДок
					И СуммаПлатежаДок > 0 И СуммаВзаиморасчетовДок > 0) Или (СтрокаПодбор.СуммаПлатежа <= СуммаПлатежаДок И СтрокаПодбор.СуммаВзаиморасчетов <= СуммаВзаиморасчетовДок
					И СуммаПлатежаДок < 0 И СуммаВзаиморасчетовДок < 0) Тогда
					СтрокаПодбор.СуммаПлатежа = СтрокаПодбор.СуммаПлатежа - СуммаПлатежаДок;
					СтрокаПодбор.СуммаВзаиморасчетов = СтрокаПодбор.СуммаВзаиморасчетов - СуммаВзаиморасчетовДок;
					СуммаПлатежаДок = 0;
					СуммаВзаиморасчетовДок = 0;
				ИначеЕсли СтрокаПодбор.СуммаПлатежа > 0 И СтрокаПодбор.СуммаВзаиморасчетов > 0 
					И СуммаПлатежаДок > 0 И СуммаВзаиморасчетовДок > 0 Тогда
					СуммаСписанияПлатеж = Мин(СуммаПлатежаДок, СтрокаПодбор.СуммаПлатежа);
					СуммаСписанияРасчеты = Мин(СуммаВзаиморасчетовДок, СтрокаПодбор.СуммаВзаиморасчетов);
					СтрокаПодбор.СуммаПлатежа = СтрокаПодбор.СуммаПлатежа - СуммаСписанияПлатеж;
					СтрокаПодбор.СуммаВзаиморасчетов = СтрокаПодбор.СуммаВзаиморасчетов - СуммаСписанияРасчеты;
					СуммаПлатежаДок = СуммаПлатежаДок-СуммаСписанияПлатеж;
					СуммаВзаиморасчетовДок = СуммаВзаиморасчетовДок - СуммаСписанияРасчеты;
				ИначеЕсли СтрокаПодбор.СуммаПлатежа < 0 И СтрокаПодбор.СуммаВзаиморасчетов < 0 
					И СуммаПлатежаДок < 0 И СуммаВзаиморасчетовДок < 0 Тогда
					СуммаСписанияПлатеж = Макс(СуммаПлатежаДок, СтрокаПодбор.СуммаПлатежа);
					СуммаСписанияРасчеты = Макс(СуммаВзаиморасчетовДок, СтрокаПодбор.СуммаВзаиморасчетов);
					СтрокаПодбор.СуммаПлатежа = СтрокаПодбор.СуммаПлатежа - СуммаСписанияПлатеж;
					СтрокаПодбор.СуммаВзаиморасчетов = СтрокаПодбор.СуммаВзаиморасчетов - СуммаСписанияРасчеты;
					СуммаПлатежаДок = СуммаПлатежаДок - СуммаСписанияПлатеж;
					СуммаВзаиморасчетовДок = СуммаВзаиморасчетовДок - СуммаСписанияРасчеты;
				КонецЕсли;
				Если Не (СтрокаПодбор.СуммаВзаиморасчетов = 0 Или СтрокаПодбор.СуммаПлатежа = 0) Тогда
					СтрокаПодбор.КурсВзаиморасчетов = ?(Не КратностьДокумента=0,Окр((СтрокаПодбор.СуммаПлатежа * КурсДокумента*СтрокаПодбор.КратностьВзаиморасчетов/(СтрокаПодбор.СуммаВзаиморасчетов*КратностьДокумента)),4),0);
					КурсПлан = СтрокаПодбор.ДокументПланирования.КурсДокумента;
					КратностьПлан = СтрокаПодбор.ДокументПланирования.КратностьДокумента;
					СтрокаПодбор.КурсВзаиморасчетовПлан = ?(Не КратностьПлан=0,Окр((СтрокаПодбор.СуммаПлатежа * КурсПлан*СтрокаПодбор.КратностьВзаиморасчетов/(СтрокаПодбор.СуммаВзаиморасчетов*КратностьПлан)),4),0);
				Иначе
					МассивКУдалению.Добавить(СтрокаПодбор);
				КонецЕсли;
				Если СуммаПлатежаДок = 0 И СуммаВзаиморасчетовДок = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Для Каждого Строка Из МассивКУдалению Цикл
				ТаблицаПлатежи.Удалить(Строка);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Объект.ПланируемыеДвижения.Загрузить(ТаблицаПлатежи);
	Объект.ПланируемыеДвижения.Сортировать("ДатаДвижения Возр");
	
КонецПроцедуры // СформироватьСписокПланируемыхДвижений()

&НаКлиенте
Процедура ОбработатьВыбор(МассивСтрок)
	
	Перем КурсВзаиморасчетов;
	Перем КратностьВзаиморасчетов;
	Перем СуммаПлатежа;
	Перем СуммаВзаиморасчетов;
	
	Если МассивСтрок.Количество() > 1 Тогда
        ДополнитьТаблицуРасшифровки(МассивСтрок);
		Пока МассивСтрок.Количество() > 0 Цикл
			Объект.ПланируемыеДвижения.Удалить(МассивСтрок[0])
		КонецЦикла;
		ОповеститьОВыборе(РасшифровкаПлатежаАдрес);
	ИначеЕсли МассивСтрок.Количество() > 0 Тогда
		СтрокаДоговор = Объект.ПланируемыеДвижения.НайтиПоИдентификатору(МассивСтрок[0]);
		Если ЕстьПодбор Тогда
        	ДополнитьТаблицуРасшифровки(МассивСтрок);
			Объект.ПланируемыеДвижения.Удалить(СтрокаДоговор);
			ОповеститьОВыборе(РасшифровкаПлатежаАдрес);
		Иначе	
			СтруктураПодбора = Новый Структура;
			СтруктураПодбора.Вставить("ДоговорКонтрагента",				СтрокаДоговор.ДоговорКонтрагента);
			СтруктураПодбора.Вставить("Сделка",							СтрокаДоговор.Сделка);
			СтруктураПодбора.Вставить("ДокументПланирования",			СтрокаДоговор.ДокументПланирования);
			СтруктураПодбора.Вставить("Проект",							СтрокаДоговор.Проект);
			СтруктураПодбора.Вставить("СтатьяДвиженияДенежныхСредств",	СтрокаДоговор.СтатьяДвиженияДенежныхСредств);
			СтруктураПодбора.Вставить("СуммаПлатежаПлан",				СтрокаДоговор.СуммаПлатежа);
			СтруктураПодбора.Вставить("СуммаПлатежа",					СтрокаДоговор.СуммаПлатежа);
			СтруктураПодбора.Вставить("КурсВзаиморасчетов",				СтрокаДоговор.КурсВзаиморасчетов);
			СтруктураПодбора.Вставить("КратностьВзаиморасчетов",		СтрокаДоговор.КратностьВзаиморасчетов);
			СтруктураПодбора.Вставить("СуммаВзаиморасчетов",			СтрокаДоговор.СуммаВзаиморасчетов);
			СтруктураПодбора.Вставить("КурсВзаиморасчетовПлан",			СтрокаДоговор.КурсВзаиморасчетовПлан);
			ОповеститьОВыборе(СтруктураПодбора);
		КонецЕсли;
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуРасшифровки(МассивДополнений)
	
	РасшифровкаПлатежаДок = ПолучитьИзВременногоХранилища(РасшифровкаПлатежаАдрес);
	СтавкаНДС = ?(Не ЗначениеЗаполнено(РасшифровкаПлатежаДок[0].СтавкаНДС),фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(,"ОсновнаяСтавкаНДС"),РасшифровкаПлатежаДок[0].СтавкаНДС);
	
	Для Каждого Строка Из МассивДополнений Цикл
		НоваяСтрока = РасшифровкаПлатежаДок.Добавить();
		НоваяСтрока.ДоговорКонтрагента = Строка.ДоговорКонтрагента;
		НоваяСтрока.Сделка = Строка.Сделка;
		НоваяСтрока.СуммаПлатежа = Строка.СуммаПлатежа;
		НоваяСтрока.КурсВзаиморасчетов = Строка.КурсВзаиморасчетов;
		НоваяСтрока.КратностьВзаиморасчетов = Строка.КратностьВзаиморасчетов;
		НоваяСтрока.СуммаВзаиморасчетов = Строка.СуммаВзаиморасчетов;
		НоваяСтрока.ДокументПланированияПлатежа = Строка.ДокументПланирования;
		НоваяСтрока.СтатьяДвиженияДенежныхСредств = Строка.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.Проект = Строка.Проект;
		НоваяСтрока.КурсВзаиморасчетовПлан = Строка.КурсВзаиморасчетовПлан;
		НоваяСтрока.СуммаПлатежаПлан = Строка.СуммаПлатежа;
		Если (Не ОтражатьВБухгалтерскомУчете = Неопределено) И ОтражатьВБухгалтерскомУчете Тогда
			ЗаполнитьРеквизитыРеглУчета(НоваяСтрока,СтавкаНДС);
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(РасшифровкаПлатежаДок, РасшифровкаПлатежаАдрес);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыРеглУчета(СтрокаПлатеж,НДСПоУмолчанию) Экспорт;
	
	Если СтрокаПлатеж.СтавкаНДС.Пустая() Тогда
		СтрокаПлатеж.СтавкаНДС = НДСПоУмолчанию;
	КонецЕсли;
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры // ЗаполнитьРеквизитыРеглУчета()

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт    
	
	ЗначениеСтавкиНДС 	  = дог_УправлениеДоговорамиСерверПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
КонецПроцедуры // ПересчитатьСуммуНДС()

