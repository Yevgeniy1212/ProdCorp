
&НаКлиенте
Процедура ВыполнитьКонтроль(Команда)
	ПроизвестиКонтроль();
КонецПроцедуры

&НаСервере
Процедура ПроизвестиКонтроль()
	// факт
	ОшибокВстраивания=0;
	ПровереноДокументов=0;
	РегистрируютФактическиеДанные=0;
	РазрешеноПриЗаписи = (Метаданные.ПодпискиНаСобытия.Найти("фин_БюджетированиеФормированиеПроводокПриПроведенииПервичныхДокументов")<>Неопределено);
	Результат.Очистить();
	Макет = Обработки.фин_ПроверкаКорректностиМетаданныхДополнения.ПолучитьМакет("Макет");
	Шапка = Макет.ПолучитьОбласть("ФактШапка");
	СтрокаРезультат = Макет.ПолучитьОбласть("ФактСтрока");
	Подвал = Макет.ПолучитьОбласть("ФактПодвал");
	Результат.Вывести(Шапка);
	Номер = 0;
	Для Каждого Документ Из Метаданные.Документы Цикл
		Если Найти(Документ.Имя,"фин_")<>0 ИЛИ 
				Найти(Документ.Имя,"усд_")<>0 //ИЛИ 
				//Найти(Документ.Имя,"ВводНачальныхОстатков")<>0 ИЛИ 
				//Найти(Документ.Имя,"ВводСведенийО")<>0 ИЛИ 
				//Найти(Документ.Имя,"ИзменениеГрафиков")<>0 ИЛИ 
				//Найти(Документ.Имя,"ИзменениеПараметров")<>0 ИЛИ 
				//Найти(Документ.Имя,"ИзменениеСостояния")<>0 ИЛИ 
				//Найти(Документ.Имя,"ИзменениеСпособов")<>0 ИЛИ 
				//Найти(Документ.Имя,"Инвентаризация")<>0 ИЛИ 
				//Найти(Документ.Имя,"Установка")<>0 ИЛИ 
				//Найти(Документ.Имя,"ЭлектронноеПисьмо")<>0 
				Тогда
			Продолжить;
		КонецЕсли;
		НС = СтрокаРезультат.Параметры;
		НС.Имя = Документ.Имя;
		НС.Синоним = Документ.Синоним;
		НС.ПроведениеДоступно = (Строка(Документ.Проведение)="Разрешить");
		НС.ПодпискаПриПроведении = Метаданные.ПодпискиНаСобытия.фин_БюджетированиеФормированиеПроводокПриПроведенииПервичныхДокументов.Источник.СодержитТип(Тип("ДокументОбъект."+Документ.Имя));
		Если РазрешеноПриЗаписи Тогда
			НС.ПодпискаПриЗаписи = Метаданные.ПодпискиНаСобытия.фин_БюджетированиеФормированиеПроводокПриЗаписиПервичныхДокументов.Источник.СодержитТип(Тип("ДокументОбъект."+Документ.Имя));
		КонецЕсли;
		РегистрацияФакта = фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрФактическихДанныхДляДокумента(Документ.Имя);
		НС.РегистрОборотыБюджетов = ?(НЕ ЗначениеЗаполнено(РегистрацияФакта.ИмяРегистра),ЛОЖЬ,Документ.Движения.Содержит(Метаданные.РегистрыНакопления[РегистрацияФакта.ИмяРегистра]));
		НС.РегистрКонтролируемыеЗначения = Документ.Движения.Содержит(Метаданные.РегистрыНакопления.фин_КонтролируемыеФинансовыеПоказатели);
		Если ПолучитьФункциональнуюОпцию("фин_УчетПоПлануСчетовБюджетирования") Тогда
			НС.РегистрБюджетирование = Документ.Движения.Содержит(Метаданные.РегистрыБухгалтерии.фин_Бюджетирование);
		КонецЕсли;
		
		ПровереноДокументов = ПровереноДокументов + 1;
		Ошибка = Ложь;
		КоличествоОшибок = 0;
		ТекстОшибки = "";
		Если НС.ПроведениеДоступно Тогда
			Если НС.ПодпискаПриЗаписи Тогда
				Ошибка = Истина;
				ДополнитьТекстОшибки(ТекстОшибки,"документ следует исключить из состава подписки на событие ""фин_БюджетированиеФормированиеПроводокПриЗаписиПервичныхДокументов""",КоличествоОшибок);
			КонецЕсли;
		Иначе
			Если НС.ПодпискаПриПроведении Тогда
				Ошибка = Истина;
				ДополнитьТекстОшибки(ТекстОшибки,"документ следует исключить из состава подписки на событие ""фин_БюджетированиеФормированиеПроводокПриПроведенииПервичныхДокументов""",КоличествоОшибок);
			КонецЕсли;
		КонецЕсли;
		Если НС.ПодпискаПриЗаписи ИЛИ НС.ПодпискаПриПроведении Тогда
			Если РегистрацияФакта.РегистрацияРучнойОперацией Тогда
				Если НС.РегистрОборотыБюджетов Тогда
					Ошибка = Истина;
					ДополнитьТекстОшибки(ТекстОшибки,"документу следует запретить формирование движений по регистру накопления """+РегистрацияФакта.ИмяРегистра+"""",КоличествоОшибок);
				КонецЕсли;
			Иначе
				Если НЕ НС.РегистрОборотыБюджетов Тогда
					Ошибка = Истина;
					ДополнитьТекстОшибки(ТекстОшибки,"документу следует разрешить формирование движений по регистру накопления """+РегистрацияФакта.ИмяРегистра+"""",КоличествоОшибок);
				КонецЕсли;
			КонецЕсли;
			Если НЕ НС.РегистрКонтролируемыеЗначения Тогда
				Ошибка = Истина;
				ДополнитьТекстОшибки(ТекстОшибки,"документу следует разрешить формирование движений по регистру накопления ""фин_КонтролируемыеФинансовыеПоказатели""",КоличествоОшибок);
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("фин_УчетПоПлануСчетовБюджетирования") Тогда
				Если НЕ НС.РегистрБюджетирование Тогда
					Ошибка = Истина;
					ДополнитьТекстОшибки(ТекстОшибки,"документу следует разрешить формирование движений по регистру бухгалтерии ""фин_Бюджетирование""",КоличествоОшибок);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если НС.РегистрОборотыБюджетов Тогда
				Ошибка = Истина;
				ДополнитьТекстОшибки(ТекстОшибки,"документу следует запретить формирование движений по регистру накопления """+РегистрацияФакта.ИмяРегистра+"""",КоличествоОшибок);
			КонецЕсли;
			Если НС.РегистрКонтролируемыеЗначения Тогда
				Ошибка = Истина;
				ДополнитьТекстОшибки(ТекстОшибки,"документу следует запретить формирование движений по регистру накопления ""фин_КонтролируемыеФинансовыеПоказатели""",КоличествоОшибок);
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("фин_УчетПоПлануСчетовБюджетирования") Тогда
				Если НС.РегистрБюджетирование Тогда
					Ошибка = Истина;
					ДополнитьТекстОшибки(ТекстОшибки,"документу следует запретить формирование движений по регистру бухгалтерии ""фин_Бюджетирование""",КоличествоОшибок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НС.Комментарий = "";
		Если Ошибка Тогда
			НС.Статус = "Ошибка";
			НС.Комментарий = "("+Строка(КоличествоОшибок)+") "+ТекстОшибки;
			ОшибокВстраивания = ОшибокВстраивания + 1;
		ИначеЕсли НС.ПодпискаПриЗаписи ИЛИ НС.ПодпискаПриПроведении Тогда
			НС.Статус = "Отражается";
			РегистрируютФактическиеДанные = РегистрируютФактическиеДанные + 1;
		Иначе
			НС.Статус = "Не отражается";
		КонецЕсли;
		Если НС.Статус <> "Не отражается" Тогда
			Номер = Номер + 1;
			СтрокаРезультат.Параметры.НомерСтроки = Номер;
			Если Ошибка Тогда
				СтрокаРезультат.Область("R1C2:R2C13").ЦветФона = Новый Цвет(255,228,225);
			Иначе
				СтрокаРезультат.Область().ЦветФона = Новый Цвет(255,255,255);
			КонецЕсли;
			Результат.Вывести(СтрокаРезультат);
		КонецЕсли;
	КонецЦикла;
	Подвал.Параметры.ПровереноДокументов = ПровереноДокументов;
	Подвал.Параметры.РегистрируютФактическиеДанные = РегистрируютФактическиеДанные;
	Подвал.Параметры.ОшибокВстраивания = ОшибокВстраивания;
	Результат.Вывести(Подвал);
	// согласование
	ОшибокВстраивания=0;
	ПровереноДокументов=0;
	РегистрируютФактическиеДанные=0;
	Шапка = Макет.ПолучитьОбласть("СогласованиеШапка");
	СтрокаРезультат = Макет.ПолучитьОбласть("СогласованиеСтрока");
	Результат.Вывести(Шапка);
	Номер = 0;
	Для Каждого Документ Из Метаданные.Документы Цикл
		НС = СтрокаРезультат.Параметры;
		НС.Имя = Документ.Имя;
		НС.Синоним = Документ.Синоним;
		НС.ПодпискаПередЗаписью = Метаданные.ПодпискиНаСобытия.усд_ПередЗаписьюДокументаРегистрацияВСистемеСогласования.Источник.СодержитТип(Тип("ДокументОбъект."+Документ.Имя));
		НС.ПодпискаПриЗаписи = Метаданные.ПодпискиНаСобытия.усд_ПриЗаписиДокументаРегистрацияВСистемеСогласования.Источник.СодержитТип(Тип("ДокументОбъект."+Документ.Имя));
		
		ПровереноДокументов = ПровереноДокументов + 1;
		Ошибка = Ложь;
		КоличествоОшибок = 0;
		ТекстОшибки = "";
		Если НС.ПодпискаПередЗаписью ИЛИ НС.ПодпискаПриЗаписи Тогда
			Если НЕ НС.ПодпискаПередЗаписью Тогда
				Ошибка = Истина;
				ДополнитьТекстОшибки(ТекстОшибки,"документ следует включить в состав подписки на событие ""усд_ПередЗаписьюДокументаРегистрацияВСистемеСогласования""",КоличествоОшибок);
			КонецЕсли;
			Если НЕ НС.ПодпискаПриЗаписи Тогда
				Ошибка = Истина;
				ДополнитьТекстОшибки(ТекстОшибки,"документ следует включить в состав подписки на событие ""усд_ПриЗаписиДокументаРегистрацияВСистемеСогласования""",КоличествоОшибок);
			КонецЕсли;
		КонецЕсли;
		НС.Комментарий = "";
		Если Ошибка Тогда
			НС.Статус = "Ошибка";
			НС.Комментарий = "("+Строка(КоличествоОшибок)+") "+ТекстОшибки;
			ОшибокВстраивания = ОшибокВстраивания + 1;
		ИначеЕсли НС.ПодпискаПередЗаписью ИЛИ НС.ПодпискаПриЗаписи Тогда
			НС.Статус = "Согласуется";
			РегистрируютФактическиеДанные = РегистрируютФактическиеДанные + 1;
		Иначе
			НС.Статус = "Не согласуется";
		КонецЕсли;
		Если НС.Статус <> "Не согласуется" Тогда
			Номер = Номер + 1;
			СтрокаРезультат.Параметры.НомерСтроки = Номер;
			Если Ошибка Тогда
				СтрокаРезультат.Область("R1C2:R2C13").ЦветФона = Новый Цвет(255,228,225);
			Иначе
				СтрокаРезультат.Область().ЦветФона = Новый Цвет(255,255,255);
			КонецЕсли;
			Результат.Вывести(СтрокаРезультат);
		КонецЕсли;
	КонецЦикла;
	Подвал.Параметры.ПровереноДокументов = ПровереноДокументов;
	Подвал.Параметры.РегистрируютФактическиеДанные = РегистрируютФактическиеДанные;
	Подвал.Параметры.ОшибокВстраивания = ОшибокВстраивания;
	Результат.Вывести(Подвал);
	// план обмена Полный
	ТаблицаНеРегистрируемых = Новый ТаблицаЗначений;
	ТаблицаНеРегистрируемых.Колонки.Добавить("ГруппаМетаданных");
	ТаблицаНеРегистрируемых.Колонки.Добавить("Объект");
	НС = ТаблицаНеРегистрируемых.Добавить();
	НС.ГруппаМетаданных = "Константы";
	НС.Объект = "усд_УдалятьЗадачиОтветственныхПриЗавершенииМаршрута";
	НС = ТаблицаНеРегистрируемых.Добавить();
	НС.ГруппаМетаданных = "Константы";
	НС.Объект = "усд_ФормироватьЗадачиОтветственнымПриЗавершенииМаршрута";
	НС = ТаблицаНеРегистрируемых.Добавить();
	НС.ГруппаМетаданных = "Константы";
	НС.Объект = "усд_ФормироватьЗадачиПоИсполнителямСогласования";
	НС = ТаблицаНеРегистрируемых.Добавить();
	НС.ГруппаМетаданных = "Константы";
	НС.Объект = "фин_АдресСервераСЛК";
	НС = ТаблицаНеРегистрируемых.Добавить();
	НС.ГруппаМетаданных = "Константы";
	НС.Объект = "фин_ПортСервераСЛК";
	НС = ТаблицаНеРегистрируемых.Добавить();
	НС.ГруппаМетаданных = "Константы";
	НС.Объект = "ИзвлекатьТекстыФайловНаСервере";
	НС = ТаблицаНеРегистрируемых.Добавить();
	НС.ГруппаМетаданных = "Константы";
	НС.Объект = "усд_ИнтервалПроверкиНапоминанийВСекундах";
	НС = ТаблицаНеРегистрируемых.Добавить();
	НС.ГруппаМетаданных = "Константы";
	НС.Объект = "фин_ИнтервалПроверкиНапоминанийВСекундах";
	НС = ТаблицаНеРегистрируемых.Добавить();
	НС.ГруппаМетаданных = "Константы";
	НС.Объект = "МаксимальныйРазмерФайла";
	НС = ТаблицаНеРегистрируемых.Добавить();
	НС.ГруппаМетаданных = "Константы";
	НС.Объект = "ХранитьФайлыВТомахНаДиске";
	НС = ТаблицаНеРегистрируемых.Добавить();
	НС.ГруппаМетаданных = "Константы";
	НС.Объект = "ИспользоватьПочтовыйКлиент";
	НС = ТаблицаНеРегистрируемых.Добавить();
	НС.ГруппаМетаданных = "Константы";
	НС.Объект = "ИспользоватьПризнакРассмотрено";
	НС = ТаблицаНеРегистрируемых.Добавить();
	НС.ГруппаМетаданных = "Константы";
	НС.Объект = "усд_УчетнаяЗаписьРассылкиЗадачСогласования";
	НС = ТаблицаНеРегистрируемых.Добавить();
	НС.ГруппаМетаданных = "Справочники";
	НС.Объект = "общ_СохраненныеНастройки";
	НС = ТаблицаНеРегистрируемых.Добавить();
	НС.ГруппаМетаданных = "РегистрыСведений";
	НС.Объект = "усд_ДокументыНаКонтроле";
	
	ТаблицаБезПрефиксов = Новый ТаблицаЗначений;
	ТаблицаБезПрефиксов.Колонки.Добавить("ГруппаМетаданных");
	ТаблицаБезПрефиксов.Колонки.Добавить("Объект");
	НС = ТаблицаБезПрефиксов.Добавить();
	НС.ГруппаМетаданных = "Константы";
	НС.Объект = "ВалютаУправленческогоУчета";
	НС = ТаблицаБезПрефиксов.Добавить();
	НС.ГруппаМетаданных = "Справочники";
	НС.Объект = "Проекты";
	НС = ТаблицаБезПрефиксов.Добавить();
	НС.ГруппаМетаданных = "Справочники";
	НС.Объект = "СценарииПланирования";
	НС = ТаблицаБезПрефиксов.Добавить();
	НС.ГруппаМетаданных = "Справочники";
	НС.Объект = "Подразделения";
	НС = ТаблицаБезПрефиксов.Добавить();
	НС.ГруппаМетаданных = "Справочники";
	НС.Объект = "ВидыРаспределенияПоПроектам";
	НС = ТаблицаБезПрефиксов.Добавить();
	НС.ГруппаМетаданных = "Справочники";
	НС.Объект = "ГрафикиРаботы";
	НС = ТаблицаБезПрефиксов.Добавить();
	НС.ГруппаМетаданных = "Справочники";
	НС.Объект = "Смены";
	НС = ТаблицаБезПрефиксов.Добавить();
	НС.ГруппаМетаданных = "Справочники";
	НС.Объект = "ЯзыкиНародовМира";
	НС = ТаблицаБезПрефиксов.Добавить();
	НС.ГруппаМетаданных = "Документы";
	НС.Объект = "УстановкаДолейРаспределенияПоПроектам";
	НС = ТаблицаБезПрефиксов.Добавить();
	НС.ГруппаМетаданных = "РегистрыСведений";
	НС.Объект = "ГрафикиРаботыПоВидамВремени";
	НС = ТаблицаБезПрефиксов.Добавить();
	НС.ГруппаМетаданных = "РегистрыСведений";
	НС.Объект = "КурсыВалютПоСценариям";
	НС = ТаблицаБезПрефиксов.Добавить();
	НС.ГруппаМетаданных = "РегистрыСведений";
	НС.Объект = "РаспределениеПоПроектам";
	НС = ТаблицаБезПрефиксов.Добавить();
	НС.ГруппаМетаданных = "РегистрыСведений";
	НС.Объект = "СоответствиеПодразделенийИПодразделенийОрганизаций";
	НС = ТаблицаБезПрефиксов.Добавить();
	НС.ГруппаМетаданных = "РегистрыСведений";
	НС.Объект = "УстановкаВидовРаспределенияДляСтатейДДС";
			
	ОшибокВстраивания=0;
	ПровереноОбъектов=0;
	ВключеноВПлан=0;
	Шапка = Макет.ПолучитьОбласть("ОбменПолныйШапка");
	ШапкаТаблицы = Макет.ПолучитьОбласть("ОбменПолныйШапкаТаблицы");
	СтрокаРезультат = Макет.ПолучитьОбласть("ОбменПолныйСтрока");
	Подвал = Макет.ПолучитьОбласть("ОбменПолныйПодвал");
	Результат.Вывести(Шапка);
	Если Метаданные.ПланыОбмена.Найти("Полный")<>Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Полный.Ссылка
		               |ИЗ
		               |	ПланОбмена.Полный КАК Полный
		               |ГДЕ
		               |	Полный.Ссылка <> &ЭтотУзел";
					   
		Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.Полный.ЭтотУзел());
		
		ИспользованиеРИБ = НЕ Запрос.Выполнить().Пустой();
		Если ИспользованиеРИБ Тогда
 			Результат.Вывести(ШапкаТаблицы);
           	СписокРазделовМетаданных = Новый СписокЗначений;
			СписокРазделовМетаданных.Добавить("Константы");
			СписокРазделовМетаданных.Добавить("Справочники");
			СписокРазделовМетаданных.Добавить("Документы");
			СписокРазделовМетаданных.Добавить("ПланыВидовХарактеристик");
			СписокРазделовМетаданных.Добавить("ПланыСчетов");
			СписокРазделовМетаданных.Добавить("РегистрыСведений");
			СписокРазделовМетаданных.Добавить("РегистрыНакопления");
			СписокРазделовМетаданных.Добавить("РегистрыБухгалтерии");
			Номер = 0;
			КоличествоОшибок = 0;
			Для Каждого РазделМетаданных Из СписокРазделовМетаданных Цикл
				Для Каждого ОбъектМетаданных Из Метаданные[РазделМетаданных.Значение] Цикл
					Если Найти(ОбъектМетаданных.Имя,"фин_")=0 И Найти(ОбъектМетаданных.Имя,"усд_")=0 И Найти(ОбъектМетаданных.Имя,"общ_")=0 И ТаблицаБезПрефиксов.НайтиСтроки(Новый Структура("ГруппаМетаданных,Объект",РазделМетаданных.Значение,ОбъектМетаданных.Имя)).Количество()=0 Тогда
						Продолжить;
					КонецЕсли;
					Если ТаблицаНеРегистрируемых.НайтиСтроки(Новый Структура("ГруппаМетаданных,Объект",РазделМетаданных.Значение,ОбъектМетаданных.Имя)).Количество()>0 Тогда
						Продолжить;
					КонецЕсли;
					НС = СтрокаРезультат.Параметры;
					НС.Имя = ОбъектМетаданных.ПолноеИмя();
					НС.Синоним = РазделМетаданных.Значение+"."+ОбъектМетаданных.Синоним;
					ЭлементПО = Метаданные.ПланыОбмена.Полный.Состав.Найти(ОбъектМетаданных);
					Если ЭлементПО=Неопределено Тогда
						НС.Включен = Ложь;
						НС.Авторегистрация = Ложь;
					Иначе
						НС.Включен = Истина;
						НС.Авторегистрация = (ЭлементПО.АвтоРегистрация=АвтоРегистрацияИзменений.Разрешить);
					КонецЕсли;
					ПровереноОбъектов = ПровереноОбъектов + 1;
					Ошибка = Ложь;
					ТекстОшибки = "";
					НС.Комментарий = "";
					Если НС.Включен =Ложь Тогда
						Ошибка = Истина;
						ДополнитьТекстОшибки(ТекстОшибки,"объект следует включить в состав плана обмена ""Полный""",КоличествоОшибок);
					ИначеЕсли НС.Авторегистрация=Ложь Тогда		
						Ошибка = Истина;
						ДополнитьТекстОшибки(ТекстОшибки,"объекту следует назначить авторегистрацию в плане обмена ""Полный""",КоличествоОшибок);
					КонецЕсли;
					Если Ошибка Тогда
						НС.Статус = "Ошибка";
						НС.Комментарий = ТекстОшибки;
						ОшибокВстраивания = ОшибокВстраивания + 1;
					ИначеЕсли НС.Включен Тогда
						НС.Статус = "Регистрируется";
						ВключеноВПлан = ВключеноВПлан + 1;
					Иначе
						НС.Статус = "Не регистрируется";
					КонецЕсли;
					Если НС.Статус <> "Регистрируется" Тогда
						Номер = Номер + 1;
						СтрокаРезультат.Параметры.НомерСтроки = Номер;
						Если Ошибка Тогда
							СтрокаРезультат.Область("R1C2:R2C13").ЦветФона = Новый Цвет(255,228,225);
						Иначе
							СтрокаРезультат.Область().ЦветФона = Новый Цвет(255,255,255);
						КонецЕсли;
						Результат.Вывести(СтрокаРезультат);
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		
			Подвал.Параметры.РезультатПроверки = ?(КоличествоОшибок=0,"ошибок не обнаружено. В план обмена включено "+Строка(ВключеноВПлан)+" объектов дополнения","Обнаружено "+Строка(КоличествоОшибок)+" ошибок настройки плана обмена");
			Результат.Вывести(Подвал);
		Иначе
			Подвал.Параметры.РезультатПроверки = "План обмена ""Полный"" не используется - проверка не проводилась";
			Результат.Вывести(Подвал);
		КонецЕсли;
	Иначе
		Подвал.Параметры.РезультатПроверки = "План обмена ""Полный"" отсутствует в прикладном решении - проверка не проводилась";
		Результат.Вывести(Подвал);
	КонецЕсли;
	// план обмена По организации
	ОшибокВстраивания=0;
	ПровереноОбъектов=0;
	ВключеноВПлан=0;
	Шапка = Макет.ПолучитьОбласть("ОбменПоОрганизацииШапка");
	ШапкаТаблицы = Макет.ПолучитьОбласть("ОбменПоОрганизацииШапкаТаблицы");
	СтрокаРезультат = Макет.ПолучитьОбласть("ОбменПоОрганизацииСтрока");
	Подвал = Макет.ПолучитьОбласть("ОбменПолныйПодвал");
	Результат.Вывести(Шапка);
	Если Метаданные.ПланыОбмена.Найти("ПоОрганизации")<>Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Полный.Ссылка
		               |ИЗ
		               |	ПланОбмена.ПоОрганизации КАК Полный
		               |ГДЕ
		               |	Полный.Ссылка <> &ЭтотУзел";
					   
		Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ПоОрганизации.ЭтотУзел());
		
		ИспользованиеРИБ = НЕ Запрос.Выполнить().Пустой();
		Если ИспользованиеРИБ Тогда
 			Результат.Вывести(ШапкаТаблицы);
           	СписокРазделовМетаданных = Новый СписокЗначений;
			СписокРазделовМетаданных.Добавить("Константы");
			СписокРазделовМетаданных.Добавить("Справочники");
			СписокРазделовМетаданных.Добавить("Документы","ДокументОбъект");
			СписокРазделовМетаданных.Добавить("ПланыВидовХарактеристик");
			СписокРазделовМетаданных.Добавить("ПланыСчетов");
			СписокРазделовМетаданных.Добавить("РегистрыСведений","РегистрСведенийНаборЗаписей");
			СписокРазделовМетаданных.Добавить("РегистрыНакопления","РегистрНакопленияНаборЗаписей");
			СписокРазделовМетаданных.Добавить("РегистрыБухгалтерии","РегистрБухгалтерииНаборЗаписей");
			ТаблицаПодписок = Новый ТаблицаЗначений;
			ТаблицаПодписок.Колонки.Добавить("ГруппаМетаданных");
			ТаблицаПодписок.Колонки.Добавить("Подписка");
			НС = ТаблицаПодписок.Добавить();
			НС.ГруппаМетаданных = "Документы";
			НС.Подписка = "фин_ПередЗаписьюДокументаДляОбменаПоОрганизации";
			НС = ТаблицаПодписок.Добавить();
			НС.ГруппаМетаданных = "Документы";
			НС.Подписка = "фин_ПередУдалениемДокументаДляОбменаПоОрганизации";
			НС = ТаблицаПодписок.Добавить();
			НС.ГруппаМетаданных = "РегистрыСведений";
			НС.Подписка = "фин_ПередЗаписьюРегистраСведенийДляОбменаПоОрганизации";
			НС = ТаблицаПодписок.Добавить();
			НС.ГруппаМетаданных = "РегистрыНакопления";
			НС.Подписка = "фин_ПередЗаписьюРегистраНакопленийДляОбменаПоОрганизации";
			НС = ТаблицаПодписок.Добавить();
			НС.ГруппаМетаданных = "РегистрыБухгалтерии";
			НС.Подписка = "фин_ПередЗаписьюРегистраБухгалтерииДляОбменаПоОрганизации";
			
			
			Номер = 0;
			КоличествоОшибок = 0;
			Для Каждого РазделМетаданных Из СписокРазделовМетаданных Цикл
				Для Каждого ОбъектМетаданных Из Метаданные[РазделМетаданных.Значение] Цикл
					Если Найти(ОбъектМетаданных.Имя,"фин_")=0 И Найти(ОбъектМетаданных.Имя,"усд_")=0 И Найти(ОбъектМетаданных.Имя,"общ_")=0 И ТаблицаБезПрефиксов.НайтиСтроки(Новый Структура("ГруппаМетаданных,Объект",РазделМетаданных.Значение,ОбъектМетаданных.Имя)).Количество()=0  Тогда
						Продолжить;
					КонецЕсли;
					Если ТаблицаНеРегистрируемых.НайтиСтроки(Новый Структура("ГруппаМетаданных,Объект",РазделМетаданных.Значение,ОбъектМетаданных.Имя)).Количество()>0 Тогда
						Продолжить;
					КонецЕсли;
					НС = СтрокаРезультат.Параметры;
					НС.Имя = ОбъектМетаданных.ПолноеИмя();
					НС.Синоним = РазделМетаданных.Значение+"."+ОбъектМетаданных.Синоним;
					ЭлементПО = Метаданные.ПланыОбмена.ПоОрганизации.Состав.Найти(ОбъектМетаданных);
					Если ЭлементПО=Неопределено Тогда
						НС.Включен = Ложь;
						НС.Авторегистрация = Ложь;
					Иначе
						НС.Включен = Истина;
						НС.Авторегистрация = (ЭлементПО.АвтоРегистрация=АвтоРегистрацияИзменений.Разрешить);
					КонецЕсли;
					Если РазделМетаданных.Значение = "Документы" Тогда
						НС.ПоОрганизации = ОбъектМетаданных.Реквизиты.Найти("Организация")<>Неопределено;
					ИначеЕсли РазделМетаданных.Значение = "РегистрыСведений" И 
						(ОбъектМетаданных.Имя="усд_ДвижениеДокументовПоМаршрутам" ИЛИ ОбъектМетаданных.Имя="усд_НазначенияМаршрутов"
							ИЛИ ОбъектМетаданных.Имя="фин_ЗначенияДополнительныхРеквизитовБюджетирования"  ИЛИ ОбъектМетаданных.Имя="фин_НастройкаСоответствийДляИзмеренийБюджетирования"	
							ИЛИ ОбъектМетаданных.Имя="фин_СоставНастроекРасчетаЗависимостейБюджетирования"  ИЛИ ОбъектМетаданных.Имя="фин_СловарьТерминовБюджетирования") Тогда
						НС.ПоОрганизации = Истина;
					ИначеЕсли Найти(РазделМетаданных.Значение,"Регистры")<>0 Тогда
						НС.ПоОрганизации = ОбъектМетаданных.Измерения.Найти("Организация")<>Неопределено;
					Иначе
						НС.ПоОрганизации = Ложь;
					КонецЕсли;
					ПровереноОбъектов = ПровереноОбъектов + 1;
					Ошибка = Ложь;
					ТекстОшибки = "";
					НС.Комментарий = "";
					Если НС.Включен =Ложь Тогда
						Ошибка = Истина;
						ДополнитьТекстОшибки(ТекстОшибки,"объект следует включить в состав плана обмена ""По организации""",КоличествоОшибок);
					ИначеЕсли НС.Авторегистрация=Ложь И НЕ НС.ПоОрганизации Тогда		
						Ошибка = Истина;
						ДополнитьТекстОшибки(ТекстОшибки,"объекту следует назначить авторегистрацию в плане обмена ""По организации""",КоличествоОшибок);
					ИначеЕсли НС.Авторегистрация И НС.ПоОрганизации Тогда		
						Ошибка = Истина;
						ДополнитьТекстОшибки(ТекстОшибки,"для объекта следует отключить авторегистрацию в плане обмена ""По организации""",КоличествоОшибок);
					КонецЕсли;
					НС.Подписки = "";
					Подписки = ТаблицаПодписок.НайтиСтроки(Новый Структура("ГруппаМетаданных",РазделМетаданных.Значение));
					Для Каждого СтрокаПодписка Из Подписки Цикл
						Если Метаданные.ПодпискиНаСобытия[СтрокаПодписка.Подписка].Источник.СодержитТип(Тип(РазделМетаданных.Представление+"."+ОбъектМетаданных.Имя)) Тогда
							НС.Подписки = НС.Подписки+?(НС.Подписки="","",";"+Символы.ПС)+СтрокаПодписка.Подписка;
							Если НЕ НС.ПоОрганизации Тогда
								Ошибка = Истина;
								ДополнитьТекстОшибки(ТекстОшибки,"объект следует исключить из состава подписки """+СтрокаПодписка.Подписка+"""",КоличествоОшибок);
							КонецЕсли;
						ИначеЕсли НС.ПоОрганизации Тогда
							Ошибка = Истина;
							ДополнитьТекстОшибки(ТекстОшибки,"объект следует включить в состав подписки """+СтрокаПодписка.Подписка+"""",КоличествоОшибок);
						КонецЕсли;
					КонецЦикла;
					Если Ошибка Тогда
						НС.Статус = "Ошибка";
						НС.Комментарий = ТекстОшибки;
						ОшибокВстраивания = ОшибокВстраивания + 1;
					ИначеЕсли НС.Включен Тогда
						НС.Статус = "Регистрируется";
						ВключеноВПлан = ВключеноВПлан + 1;
					Иначе
						НС.Статус = "Не регистрируется";
					КонецЕсли;
					Если НС.Статус <> "Регистрируется" Тогда
						Номер = Номер + 1;
						СтрокаРезультат.Параметры.НомерСтроки = Номер;
						Если Ошибка Тогда
							СтрокаРезультат.Область("R1C2:R2C13").ЦветФона = Новый Цвет(255,228,225);
						Иначе
							СтрокаРезультат.Область().ЦветФона = Новый Цвет(255,255,255);
						КонецЕсли;
						Результат.Вывести(СтрокаРезультат);
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		
			Подвал.Параметры.РезультатПроверки = ?(КоличествоОшибок=0,"ошибок не обнаружено. В план обмена включено "+Строка(ВключеноВПлан)+" объектов дополнения","Обнаружено "+Строка(КоличествоОшибок)+" ошибок настройки плана обмена");
			Результат.Вывести(Подвал);
		Иначе
			Подвал.Параметры.РезультатПроверки = "План обмена ""По организации"" не используется - проверка не проводилась";
			Результат.Вывести(Подвал);
		КонецЕсли;
	Иначе
		Подвал.Параметры.РезультатПроверки = "План обмена ""По организации"" отсутствует в прикладном решении - проверка не проводилась";
		Результат.Вывести(Подвал);
	КонецЕсли;
	// разное
	Макет = Обработки.фин_ПроверкаКорректностиМетаданныхДополнения.ПолучитьМакет("Макет");
	Шапка = Макет.ПолучитьОбласть("ПрочееШапка");
	СтрокаРезультат = Макет.ПолучитьОбласть("ПрочееДетали");
	Результат.Вывести(Шапка);
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ИспользоватьРеквизитПлановаяЕдиницаИзмеренияПриПланировании") Тогда
		СтрокаРезультат.Параметры.Имя = "Реквизит ""ПлановаяЕдиницаИзмерения"" справочника ""Номенклатура""";
		СтрокаРезультат.Параметры.Результат = ?(Метаданные.Справочники.Номенклатура.Реквизиты.Найти("ПлановаяЕдиницаИзмерения")=Неопределено,Ложь,Истина);
		Результат.Вывести(СтрокаРезультат);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнитьТекстОшибки(ТекстОшибки,ДобавляемыйФрагмент,КоличествоОшибок)
	ТекстОшибки = ТекстОшибки + ?(ТекстОшибки="","",";"+Символы.ПС)+" - "+ДобавляемыйФрагмент;
	КоличествоОшибок = КоличествоОшибок + 1;
КонецПроцедуры
