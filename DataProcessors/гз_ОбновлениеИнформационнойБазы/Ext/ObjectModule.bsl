// текущая версия конфигурации
Перем ТекущаяВерсия Экспорт;  // передается из внешних источников

#Если Клиент Тогда

//////////////////////////////////////////////////////////////////////////////// 
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 
//

// Процедура выполняет обновление информационной базы
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьОбновление() Экспорт 
	
	// Подготовка к выводу формы описания обновлений.
	ФормаОписаниеОбновлений    = ПолучитьФорму("ОписаниеОбновлений");
	МакетОписаниеОбновлений    = ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений);
	ДокументОписаниеОбновлений = ФормаОписаниеОбновлений.ЭлементыФормы.ДокументОписаниеОбновлений;
	ДокументОписаниеОбновлений.Очистить();
	
	// Обновление информационной базы.
	// Последовательно вызываются функции для обновления с соответствующей версии.
	
	ТекущаяВерсияИБ = Константы.гз_НомерВерсииКонфигурации.Получить();
	
	//Вызов функций заполнения данных для пустой информационной базы
	Если ПустаяСтрока(ТекущаяВерсияИБ) Тогда
		
		СтрСообщения = "начальное заполнение подсистемы ""Управление государственными закупками"" версии " + ТекущаяВерсия;
		Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		НачатьТранзакцию();
		
		ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
		// Установка номера версии информационной базы
		Константы.гз_НомерВерсииКонфигурации.Установить(ТекущаяВерсия); // после заполнения пустой ИБ установим последний номер версии
		
		ОбновитьХранилищеЗначений();
		
		ЗафиксироватьТранзакцию();
		
		#Если Клиент Тогда
			Если ДокументОписаниеОбновлений.ВысотаТаблицы > 0 Тогда
				ФормаОписаниеОбновлений.Открыть();
			КонецЕсли;
		#КонецЕсли
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.гз_НомерВерсииКонфигурации.Получить();
	
	Если НЕ ПустаяСтрока(ТекущаяВерсия) 
		И ТекущаяВерсияИБ <> ТекущаяВерсия Тогда
		
		НоваяВерсияИБ = "1.0.2.8";
		
		Если (гз_ОбщегоНазначения.мПолучитьНомерРелиза(ТекущаяВерсияИБ) = "1.0.1" ИЛИ  гз_ОбщегоНазначения.мПолучитьНомерРелиза(ТекущаяВерсияИБ) = "1.0.2") И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
			
			НачатьТранзакцию();
			
			// Установка номера версии информационной базы
			Константы.гз_НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			Сообщить("-----------------------------------");
			Сообщить("Корректировка документов ""ГЗ: Объявление о проведении государственных закупок""");
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Ссылка КАК Ссылка,
			               |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.НомерСтроки КАК НомерСтроки
			               |ИЗ
			               |	Документ.гз_ОбъявлениеОПроведенииГосударственныхЗакупок.Товары КАК гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары
			               |ГДЕ
			               |	гз_ОбъявлениеОПроведенииГосударственныхЗакупокТовары.Состояние = ЗНАЧЕНИЕ(Перечисление.гз_СостоянияЗаказа.Отменена)
			               |ИТОГИ
			               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НомерСтроки)
			               |ПО
			               |	Ссылка";
			Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.Следующий() Цикл
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
				ВыборкаСтрокДокумента = Выборка.Выбрать();
				Пока ВыборкаСтрокДокумента.Следующий() Цикл
					
					ДокументОбъект.Товары[ВыборкаСтрокДокумента.НомерСтроки-1].ОтменаПозиции = Истина;
					
				КонецЦикла;
				
				ДокументОбъект.ДополнительныеСвойства.Вставить("ВнешняяОбработка",Истина);
				   Попытка
					   ДокументОбъект.Записать();
				   Исключение
					   Сообщить("Не удалось исправить документ "+Выборка.Ссылка);
				   КонецПопытки;
			КонецЦикла;
			   
			Сообщить("-----------------------------------");
			Сообщить("Корректировка документов ""ГЗ: План закупок подразделения""");
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	гз_ПланЗакупокПодразделения.Ссылка
			               |ИЗ
			               |	Документ.гз_ПланЗакупокПодразделения КАК гз_ПланЗакупокПодразделения
			               |ГДЕ
			               |	гз_ПланЗакупокПодразделения.ВидПланаЗакупок = ЗНАЧЕНИЕ(Справочник.гз_ВидыПлановЗакупок.ПустаяСсылка)";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.Ссылка.ВидПланаЗакупок.Пустая() Тогда 
					ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ДокументОбъект.ВидПланаЗакупок = Справочники.гз_ВидыПлановЗакупок.ГосударственныйПланЗакупок;
					
					ДокументОбъект.ДополнительныеСвойства.Вставить("ВнешняяОбработка",Истина);
					   Попытка
						   ДокументОбъект.Записать();
					   Исключение
						   Сообщить("Не удалось исправить документ "+Выборка.Ссылка);
					   КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			   
			Сообщить("-----------------------------------");
			Сообщить("Корректировка документов ""ГЗ: Годовой план государственных закупок товаров, работ и услуг""");
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	гз_ГодовойПлан.Ссылка
			               |ИЗ
			               |	Документ.гз_ГодовойПлан КАК гз_ГодовойПлан
			               |ГДЕ
			               |	гз_ГодовойПлан.ВидПланаЗакупок = ЗНАЧЕНИЕ(Справочник.гз_ВидыПлановЗакупок.ПустаяСсылка)";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.Ссылка.ВидПланаЗакупок.Пустая() Тогда 
					ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ДокументОбъект.ВидПланаЗакупок = Справочники.гз_ВидыПлановЗакупок.ГосударственныйПланЗакупок;
					
					ДокументОбъект.ДополнительныеСвойства.Вставить("ВнешняяОбработка",Истина);
					   Попытка
						   ДокументОбъект.Записать();
					   Исключение
						   Сообщить("Не удалось исправить документ "+Выборка.Ссылка);
					   КонецПопытки;
			   КонецЕсли;
				   				   
			КонецЦикла;
			   
			Сообщить("-----------------------------------");
			Сообщить("Корректировка движений по регистру ""ГЗ: Используемые виды планов закупок""");
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	гз_ГодовойПлан.Ссылка
			               |ИЗ
			               |	Документ.гз_ГодовойПлан КАК гз_ГодовойПлан
			               |ГДЕ
			               |	гз_ГодовойПлан.ВидОперации = ЗНАЧЕНИЕ(Перечисление.гз_ВидыОперацийДокументовПланированияЗакупок.Планирование)";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				   				   
			  НаборДвижений = РегистрыСведений.гз_ИспользуемыеВидыПлановЗакупок.СоздатьНаборЗаписей();
			  НаборДвижений.Отбор.Регистратор.Использование = Истина;
			  НаборДвижений.Отбор.Регистратор.Значение 		= Выборка.Ссылка;
			  НаборДвижений.Прочитать();
			  Для Каждого СтрокаДвижений Из НаборДвижений Цикл
					СтрокаДвижений.Период 			= Выборка.Ссылка.Год;
					СтрокаДвижений.Организация 		= Выборка.Ссылка.Организация;
					СтрокаДвижений.ВидПланаЗакупок 	= Выборка.Ссылка.ВидПланаЗакупок;
			  КонецЦикла;
			   Попытка
				   НаборДвижений.Записать();
			   Исключение
				   Сообщить("Не удалось исправить движения документа "+Выборка.Ссылка+" по регистру",СтатусСообщения.Важное);
			   КонецПопытки;
				   
			КонецЦикла;
			   
			Сообщить("-----------------------------------");
			Сообщить("Корректировка движений по регистру ""ГЗ: Годовой план закупок товаров,работ и услуг""");
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	гз_ГодовойПланЗакупок.Регистратор
			               |ИЗ
			               |	РегистрНакопления.гз_ГодовойПланЗакупок КАК гз_ГодовойПланЗакупок
			               |ГДЕ
			               |	гз_ГодовойПланЗакупок.ВидПланаЗакупок = ЗНАЧЕНИЕ(Справочник.гз_ВидыПлановЗакупок.ПустаяСсылка)";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				  НаборДвижений = РегистрыНакопления.гз_ГодовойПланЗакупок.СоздатьНаборЗаписей();
				  НаборДвижений.Отбор.Регистратор.Использование = Истина;
				  НаборДвижений.Отбор.Регистратор.Значение 		= Выборка.Регистратор;
				  НаборДвижений.Прочитать();
				  Для Каждого СтрокаДвижений Из НаборДвижений Цикл
					   СтрокаДвижений.ВидПланаЗакупок = Справочники.гз_ВидыПлановЗакупок.ГосударственныйПланЗакупок;
				  КонецЦикла;
				   Попытка
					   НаборДвижений.Записать();
				   Исключение
					   Сообщить("Не удалось исправить движения документа "+Выборка.Регистратор+" по регистру",СтатусСообщения.Важное);
				   КонецПопытки;
			КонецЦикла;
			   
			Сообщить("-----------------------------------");
			Сообщить("Корректировка движений по регистру ""ГЗ: Движение номенклатуры по годовому плану""");
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	гз_ДвижениеНоменклатурыПоГодовомуПлану.Регистратор
			               |ИЗ
			               |	РегистрНакопления.гз_ДвижениеНоменклатурыПоГодовомуПлану КАК гз_ДвижениеНоменклатурыПоГодовомуПлану
			               |ГДЕ
			               |	гз_ДвижениеНоменклатурыПоГодовомуПлану.ВидПланаЗакупок = ЗНАЧЕНИЕ(Справочник.гз_ВидыПлановЗакупок.ПустаяСсылка)";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				  НаборДвижений = РегистрыНакопления.гз_ДвижениеНоменклатурыПоГодовомуПлану.СоздатьНаборЗаписей();
				  НаборДвижений.Отбор.Регистратор.Использование = Истина;
				  НаборДвижений.Отбор.Регистратор.Значение 		= Выборка.Регистратор;
				  НаборДвижений.Прочитать();
				  Для Каждого СтрокаДвижений Из НаборДвижений Цикл
					   СтрокаДвижений.ВидПланаЗакупок = Справочники.гз_ВидыПлановЗакупок.ГосударственныйПланЗакупок;
				  КонецЦикла;
				   Попытка
					   НаборДвижений.Записать();
				   Исключение
					   Сообщить("Не удалось исправить движения документа "+Выборка.Регистратор+" по регистру",СтатусСообщения.Важное);
				   КонецПопытки;
			КонецЦикла;
			   
			Сообщить("-----------------------------------");
			Сообщить("Корректировка движений по регистру ""ГЗ: Планы закупок подразделений""");
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	гз_ПланыЗакупок.Регистратор
			               |ИЗ
			               |	РегистрНакопления.гз_ПланыЗакупок КАК гз_ПланыЗакупок
			               |ГДЕ
			               |	гз_ПланыЗакупок.ВидПланаЗакупок = ЗНАЧЕНИЕ(Справочник.гз_ВидыПлановЗакупок.ПустаяСсылка)";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				  НаборДвижений = РегистрыНакопления.гз_ПланыЗакупок.СоздатьНаборЗаписей();
				  НаборДвижений.Отбор.Регистратор.Использование = Истина;
				  НаборДвижений.Отбор.Регистратор.Значение 		= Выборка.Регистратор;
				  НаборДвижений.Прочитать();
				  Для Каждого СтрокаДвижений Из НаборДвижений Цикл
					   СтрокаДвижений.ВидПланаЗакупок = Справочники.гз_ВидыПлановЗакупок.ГосударственныйПланЗакупок;
				  КонецЦикла;
				   Попытка
					   НаборДвижений.Записать();
				   Исключение
					   Сообщить("Не удалось исправить движения документа "+Выборка.Регистратор+" по регистру",СтатусСообщения.Важное);
				   КонецПопытки;
			КонецЦикла;			   
				
			ЗафиксироватьТранзакцию();
			   
			Если Константы.гз_НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			#Если Клиент Тогда
				
				ВывестиОписаниеИзменений("102", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
		КонецЕсли;
		
		НоваяВерсияИБ = "1.0.3.7";
		
		Если (гз_ОбщегоНазначения.мПолучитьНомерРелиза(ТекущаяВерсияИБ) = "1.0.2" ИЛИ  гз_ОбщегоНазначения.мПолучитьНомерРелиза(ТекущаяВерсияИБ) = "1.0.3") И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
			
			Сообщить("-----------------------------------");
			Сообщить("Выполняется установка константы ""ГЗ: Режим встраивания""");
			Если Константы.гз_РежимВстраивания.Получить().Пустая() Тогда 
				Если Найти(Метаданные.Имя,"БухгалтерияДляКазахстана") <>0 Тогда
					Константы.гз_РежимВстраивания.Установить(Перечисления.гз_РежимыВстраивания.БухгалтерияДляКазахстана);
				ИначеЕсли Найти(Метаданные.Имя,"БухгалтерияДляГосударственныхПредприятийКазахстана") <>0 Тогда
					Константы.гз_РежимВстраивания.Установить(Перечисления.гз_РежимыВстраивания.БухгалтерияДляГосударственныхПредприятийКазахстана);
				ИначеЕсли Найти(Метаданные.Имя,"КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана") <>0 Тогда
					Константы.гз_РежимВстраивания.Установить(Перечисления.гз_РежимыВстраивания.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана);
				ИначеЕсли Найти(Метаданные.Имя,"УправлениеГосударственнымиЗакупками") <>0 Тогда
					Константы.гз_РежимВстраивания.Установить(Перечисления.гз_РежимыВстраивания.АвтономныйРежим);
				ИначеЕсли Найти(Метаданные.Имя,"БухгалтерияДляГосударственныхУчрежденийКазахстана") <>0 Тогда
					Константы.гз_РежимВстраивания.Установить(Перечисления.гз_РежимыВстраивания.БухгалтерияДляГосударственныхУчрежденийКазахстана);
				ИначеЕсли Найти(Метаданные.Имя,"БухгалтерияГосударственногоПредприятия") <>0 Тогда
					Константы.гз_РежимВстраивания.Установить(Перечисления.гз_РежимыВстраивания.РейтингБухгалтерияГосударственногоПредприятия);
				КонецЕсли;
			Иначе 
				Если Константы.гз_РежимВстраивания.Получить() = Перечисления.гз_РежимыВстраивания.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана Тогда 
					Константы.гз_РежимВстраивания.Установить(Перечисления.гз_РежимыВстраивания.БухгалтерияДляКазахстана);
				КонецЕсли;
			КонецЕсли;
						
			Сообщить("-----------------------------------");
			Сообщить("Выполняется установка роли ""ГЗ: Инициализация системы защиты"" пользователям, 
			|для которых установлены роли ""ГЗ: Менеджер по государственным закупкам"",""ГЗ:Подача заявок по государственным закупкам"" или ""Полные права""");
			
			ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
			
			Для Каждого ПользовательИБ Из ПользователиИБ Цикл 
				Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.гз_МенеджерПоГосЗакупкам) ИЛИ ПользовательИБ.Роли.Содержит(Метаданные.Роли.гз_ПодачаЗаявокПоГосЗакупкам) ИЛИ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
					ПользовательИБ.Роли.Добавить(Метаданные.Роли.гз_ИнициализацияСистемыЗащиты);
				КонецЕсли;
			    Попытка
				    ПользовательИБ.Записать();
			    Исключение
				    Сообщить("Не удалось установить роль ""ГЗ: Инициализация системы защиты"" для пользователя "+ПользователиИБ.ПолноеИмя);
			    КонецПопытки;
				
			КонецЦикла;
			
			// Установка номера версии информационной базы
			Константы.гз_НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			Если Константы.гз_НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			#Если Клиент Тогда
				
				ВывестиОписаниеИзменений("103", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
		КонецЕсли;
		
	КонецЕсли;
	
	#Если Клиент Тогда
		Если ДокументОписаниеОбновлений.ВысотаТаблицы > 0 Тогда
			ФормаОписаниеОбновлений.Открыть();
		КонецЕсли
	#КонецЕсли
	
КонецПроцедуры //ВыполнитьОбновление()

// Процедура выполняет обновление информационной базы
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт 
	ТекстВопроса = "Произвести первоначальное заполнение информационной базы для конфигурации ""Управление государственными закупками"" ?";
	Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		//------
		// пропишем эти значения по умолчанию текущему пользователю
		ЗаполнитьСправочникЭКР();
		НовыйВидКИ = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		НовыйВидКИ.Наименование = "Адрес/время приема конкурсной документации по гос. закупкам";
		НовыйВидКИ.ВидОбъектаКонтактнойИнформации = Перечисления["ВидыОбъектовКонтактнойИнформации"].Организации;
		НовыйВидКИ.Тип = Перечисления["ТипыКонтактнойИнформации"].Другое;
		НовыйВидКИ.Записать();
		Константы.гз_ВидКонтактнойИнформацииПриемаКонкурсныхЗаявок.Установить(НовыйВидКИ.Ссылка);
		//заполнение вида предопределенных элементов справочника виды контактной информации
		ЗаполнитьСправочникВидыКонтактнойИнформации();
	КонецЕсли;
	
	Сообщить("-----------------------------------");
	Сообщить("Выполняется установка константы ""ГЗ: Режим встраивания""");
	Если Найти(Метаданные.Имя,"БухгалтерияДляКазахстана") <>0 Тогда
		Константы.гз_РежимВстраивания.Установить(Перечисления.гз_РежимыВстраивания.БухгалтерияДляКазахстана);
	ИначеЕсли Найти(Метаданные.Имя,"БухгалтерияДляГосударственныхПредприятийКазахстана") <>0 Тогда
		Константы.гз_РежимВстраивания.Установить(Перечисления.гз_РежимыВстраивания.БухгалтерияДляГосударственныхПредприятийКазахстана);
	ИначеЕсли Найти(Метаданные.Имя,"КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана") <>0 Тогда
		Константы.гз_РежимВстраивания.Установить(Перечисления.гз_РежимыВстраивания.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана);
	ИначеЕсли Найти(Метаданные.Имя,"УправлениеГосударственнымиЗакупками") <>0 Тогда
		Константы.гз_РежимВстраивания.Установить(Перечисления.гз_РежимыВстраивания.АвтономныйРежим);
	ИначеЕсли Найти(Метаданные.Имя,"БухгалтерияДляГосударственныхУчрежденийКазахстана") <>0 Тогда
		Константы.гз_РежимВстраивания.Установить(Перечисления.гз_РежимыВстраивания.БухгалтерияДляГосударственныхУчрежденийКазахстана);
	ИначеЕсли Найти(Метаданные.Имя,"БухгалтерияГосударственногоПредприятия") <>0 Тогда
		Константы.гз_РежимВстраивания.Установить(Перечисления.гз_РежимыВстраивания.РейтингБухгалтерияГосударственногоПредприятия);
	КонецЕсли;
	
	// Вывод строк описания обновлений.
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("ШапкаЗаполнениеПустойИБ"));
	ДокументОписаниеОбновлений.НачатьГруппуСтрок("Заполнение пустой подсистемы УПРАВЛЕНИЕ ГОСУДАРСТВЕННЫМИ ЗАКУПКАМИ");
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("ЗаполнениеПустойИБ"));
	ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
	
КонецПроцедуры //ВыполнитьПервыйЗапуск()

// Функция получает макет описания обновлений и заполняет его параметры расшифровок.
//
// Параметры:
//  ФормаОписаниеОбновлений - форма обработки "ОписаниеОбновлений", 
//                            назначается владельцем открываемых из нее форм.
//
// Возвращаемое значение:
//  ТабличныйДокумент - макет "ОписаниеОбновлений" с заполненными параметрами расшифровок.
//
Функция ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений) Экспорт
	
	МакетОписаниеОбновлений = ПолучитьМакет("ОписаниеОбновлений");
	Параметры               = МакетОписаниеОбновлений.Параметры;
	
	Организации = Справочники.Организации.Выбрать();
	Организация = Неопределено;
	
	Если Организации.Следующий() Тогда
		Организация = Организации.ПолучитьОбъект();
	КонецЕсли;
	
	Если Организация = Неопределено Тогда
		Параметры.ФормаНовойОрганизации = "ФормаНовойОрганизации";
	Иначе                                                                  
		Параметры.ФормаНовойОрганизации = Организация.ПолучитьФорму();
	КонецЕсли;
	
	Параметры.ФормаСпискаОрганизаций    = Справочники.Организации.ПолучитьФормуСписка();
	Параметры.ФормаЭКР    = Справочники.гз_ЭКР.ПолучитьФормуСписка();
	Параметры.ФормаСпособовЗакупки    = Справочники.гз_СпособыЗакупки.ПолучитьФормуСписка();
	
	Параметры.ФормаНастройкПараметровУчета    = ПолучитьОбщуюФорму("гз_НастройкаПараметровУчета");
	Параметры.ФормаПодбораЕдиниц    = Справочники.КлассификаторЕдиницИзмерения.ПолучитьФорму("ФормаПодбораИзКлассификатора");
	Параметры.ФормаСпискаЕдиниц    = Справочники.КлассификаторЕдиницИзмерения.ПолучитьФормуСписка();
	
	Параметры.ФормаПодбораОКСМ    = Справочники.КлассификаторСтранМира.ПолучитьФорму("ФормаПодбораИзКлассификатора");
	Параметры.ФормаСпискаОКСМ    = Справочники.КлассификаторСтранМира.ПолучитьФормуСписка();
	
	Параметры.ФормаСпискаПользователей  = Справочники.Пользователи.ПолучитьФормуСписка();
	
	Возврат МакетОписаниеОбновлений;
	
КонецФункции

// процедура актуализирует хранимые в ИБ материалы системы защиты
//
Процедура ОбновитьХранилищеЗначений() Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлам) Тогда
		ПутьКФайлам = ПолучитьПутьККаталогуВнешнихФайлов("1C-Rating\StatePurchases\" + СтрЗаменить(ТекущаяВерсия, ".", "_") + "\ExtFiles\");
	КонецЕсли;
	
	ФайлДанных = ПутьКФайлам + "CCED.datafile";
	
	Если ФайлНеСуществует(ФайлДанных) Тогда
		Сообщить("Обновление библиотек ключа защиты не выполнено.");
	Иначе
		Регистр = РегистрыСведений.гз_БиблиотекиКлюча;
		
		Выборка = Регистр.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Запись = Выборка.ПолучитьМенеджерЗаписи();
		Иначе
			Запись = Регистр.СоздатьМенеджерЗаписи();
		КонецЕсли;
		
		Попытка
			Запись.Версия = ТекущаяВерсия;
			Запись.ФайлДанных 		 = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ФайлДанных));					
		Исключение
			Сообщить("Обновление библиотек ключа защиты: не удалось заполнить регистр ""Библиотеки ключа""! Обратитесь к разработчику.", СтатусСообщения.Важное);
			Возврат;
		КонецПопытки;
		
		Попытка	
			Запись.Записать();	
		Исключение
			Сообщить("Обновление библиотек ключа защиты: не удалось записать изменения в регистр ""Библиотеки ключа""! Обратитесь к разработчику.", СтатусСообщения.Важное);
			Возврат;
		КонецПопытки;
		
		Сообщить("Обновление библиотек ключа защиты завершено успешно.");
	КонецЕсли;
	
	СтруктураМенеджерЛицензий = гз_Защита.ИнициализацияВнешнейКомпоненты();
	ТекСтруктура = гз_ОбщегоНазначения.мПолучитьЗначениеПеременной("СтруктураМенеджерЛицензий");
	ТекСтруктура.Вставить("гз_КодОшибки",СтруктураМенеджерЛицензий.гз_КодОшибки);
	ТекСтруктура.Вставить("гз_ОписаниеОшибки",СтруктураМенеджерЛицензий.гз_ОписаниеОшибки);
	ТекСтруктура.Вставить("гз_ИдентификаторКлюча",СтруктураМенеджерЛицензий.гз_ИдентификаторКлюча);
	гз_ОбщегоНазначения.мУстановитьЗначениеПеременной("СтруктураМенеджерЛицензий",, ТекСтруктура, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Возвращает признак отсутствия нужного файла
//
Функция ФайлНеСуществует(ПутьКФайлу)
	
	ПроверкаСуществования = Новый Файл(ПутьКФайлу);
	
	Если НЕ ПроверкаСуществования.Существует() Тогда
		Сообщить("Обновление библиотек защиты: не обнаружен файл " + ПутьКФайлу + ". Убедитесь в его наличии или укажите другой каталог.", СтатусСообщения.Важное);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ФайлНеСуществует()

// Процедура выводит описания изменений в указанном релизе
//
// Параметры
//  НомерРелиза  – Строка - номер релиза, для которого выводится описание
//
Процедура ВывестиОписаниеИзменений(НомерРелиза, ДокументОписаниеОбновлений, МакетОписаниеОбновлений)
	
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Шапка" + НомерРелиза));
	ДокументОписаниеОбновлений.НачатьГруппуСтрок("Версия" + НомерРелиза);
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Версия" + НомерРелиза));
	ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
	
КонецПроцедуры // ВывестиОписаниеИзменений()

// Возвращает путь к файлам подсистемы
//
Процедура СформироватьПутьКФайлам() Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТекущаяВерсия) Тогда
		ТекущаяВерсия = Константы.гз_НомерВерсииКонфигурации.Получить();
	КонецЕсли;
	ПутьКФайлам = СтрЗаменить(КаталогПрограммы(),"bin","tmplts");
	ПутьКФайлам = ПутьКФайлам + "1C-Rating\StatePurchases\" + СтрЗаменить(ТекущаяВерсия, ".", "_") + "\ExtFiles\";
	
КонецПроцедуры

//Процедура ЗаполнитьСправочникЭКР
//
Процедура ЗаполнитьСправочникЭКР()
	Макет = Справочники.гз_ЭКР.ПолучитьМакет("КлассификаторЭКР");
	
	Сообщить("-----------------------------------");
	Сообщить("Заполнение справочника Экономический классификатор расходов (Специфики) из классификатора");
	// Заполняем таблицу из классификатора
	НачалисьДанные = Ложь;
	НомерСтроки = 4;
	
	Группа = Справочники.гз_ЭКР.ПустаяСсылка();
	
	Пока ЗначениеЗаполнено(Макет.Область(НомерСтроки, 3).Текст) Цикл
		
		Если ЗначениеЗаполнено(Макет.Область(НомерСтроки, 1).Текст) Тогда
			Группа 					= Справочники.гз_ЭКР.СоздатьГруппу();
			Группа.Код 				= Макет.Область(НомерСтроки, 1).Текст;
			Группа.Наименование		= Макет.Область(НомерСтроки, 3).Текст;
			Попытка
				Группа.Записать();
			Исключение
				Сообщить("Не удалось создать группу с кодом "+Макет.Область(НомерСтроки, 1).Текст);
			КонецПопытки;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(Макет.Область(НомерСтроки, 2).Текст) Тогда
			НовыйЭлемент 					= Справочники.гз_ЭКР.СоздатьЭлемент();
			НовыйЭлемент.Код 				= Макет.Область(НомерСтроки, 2).Текст;
			НовыйЭлемент.Наименование		= Макет.Область(НомерСтроки, 3).Текст;
			НовыйЭлемент.Родитель			= Группа.Ссылка;
			Попытка
				НовыйЭлемент.Записать();
			Исключение
				Сообщить("Не удалось создать элемент с кодом "+Макет.Область(НомерСтроки, 2).Текст);
			КонецПопытки;
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьСправочникЭКР

// Заполнение реквизитов справочника "Виды контактной информации"
//
Процедура ЗаполнитьСправочникВидыКонтактнойИнформации()
	
	Сообщить("-----------------------------------");
	Сообщить("Заполнение справочника Виды контактной информации");
	
	// Контрагенты
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбъектВидКонтактнойИнформации.Записать();
	
	// Организации
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред.ПолучитьОбъект();
	ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбъектВидКонтактнойИнформации.Записать();
	
	СписокПредопределенныхЭлементов = Новый СписокЗначений;
	СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
	СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации);
	СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый);
	СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред);
	УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов);
	
КонецПроцедуры // ЗаполнитьСправочникВидыКонтактнойИнформации()

// Процедура изменяет ставшие неуникальными коды предопределенных элементов
//
Процедура УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов)
	
	МассивЭлементов = Новый Массив;
	
	Пока СписокПредопределенныхЭлементов.Количество()>0 Цикл
		
		МассивЭлементов.Очистить();
		КолвоЭлементовВСписке = СписокПредопределенныхЭлементов.Количество();
		ТекушийТипЗначения = ТипЗнч(СписокПредопределенныхЭлементов [КолвоЭлементовВСписке-1].Значение);
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекушийТипЗначения);
		ЕСли МетаданныеТипа.ДлинаКода = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для ОбратныйИндекс = 1 По КолвоЭлементовВСписке Цикл
			ЭлементСписка = СписокПредопределенныхЭлементов [КолвоЭлементовВСписке - ОбратныйИндекс];
			
			Если ТипЗнч(ЭлементСписка.Значение) = ТекушийТипЗначения Тогда
				МассивЭлементов.Добавить(ЭлементСписка.Значение);
				СписокПредопределенныхЭлементов.Удалить(ЭлементСписка);
			КонецЕсли;			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Предопределенные.Ссылка
		|ИЗ
		|	" + МетаданныеТипа.ПолноеИмя() + " КАК Предопределенные
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + МетаданныеТипа.ПолноеИмя() + " КАК Пользовательские
		|		ПО Предопределенные.Код = Пользовательские.Код
		|
		|ГДЕ
		|	Предопределенные.Ссылка В(&СписокЭлементов)
		|    И Пользовательские.Ссылка НЕ В(&СписокЭлементов)";
		
		Запрос.УстановитьПараметр("СписокЭлементов", МассивЭлементов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.УстановитьНовыйКод();
			Объект.Записать();
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры

// Функция, возвращает путь к каталогу внешних файлов конфигурации
//
// Параметры:
//  НеполныйПутьККаталогуВнешнихФайлов - оставшаяся часть пути к каталогу внешних файлов относительно
//  каталога шаблонов. Например "1C-Rating\Waybills\1_0_6_7\ExtFiles\".
//
Функция ПолучитьПутьККаталогуВнешнихФайлов(НеполныйПутьККаталогуВнешнихФайлов) Экспорт 

  Перем ПутьККаталогуВнешнихФайлов;
      
  // Получаем список возможных путей к каталогу шаблонов
  ПутиККаталогуШаблонов = гз_ОбщегоНазначения.ПолучитьПутиККаталогуШаблонов();
 
  // Обойдем все пути из массива, остановимся на том, который существует
  Для каждого ПутьККаталогуШаблонов из ПутиККаталогуШаблонов Цикл
        ПутьККаталогуВнешнихФайлов = ПутьККаталогуШаблонов + НеполныйПутьККаталогуВнешнихФайлов;
        Файл = Новый Файл(ПутьККаталогуВнешнихФайлов);
        Если Файл.Существует() Тогда
            // Путь существует, используем его
            Возврат ПутьККаталогуВнешнихФайлов;   
        КонецЕсли;
     
  КонецЦикла;
 
  // Если ни один из путей не существует - подставляем стандартный 
  Возврат СтрЗаменить(КаталогПрограммы(),"bin","tmplts") + НеполныйПутьККаталогуВнешнихФайлов;

КонецФункции

#КонецЕсли