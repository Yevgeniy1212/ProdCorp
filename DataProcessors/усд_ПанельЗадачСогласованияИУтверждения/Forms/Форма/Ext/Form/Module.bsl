////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПереченьВидимыхКоманд = Новый Массив;
	ПереченьВидимыхКоманд.Добавить("ДекорацияКарта");
	ПереченьВидимыхКоманд.Добавить("ДекорацияИстория");
	ПереченьВидимыхКоманд.Добавить("ДекорацияСогласование");
	ПереченьВидимыхКоманд.Добавить("ДекорацияНаКонтроль");
	ПереченьВидимыхКоманд.Добавить("ДекорацияПереадресация");
	НастроитьВидимостьКоманд(ПереченьВидимыхКоманд);	
	
	АвтообновлениеСпискаЗадачПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВыборКоманды(Элемент)
	ПереченьВидимыхКоманд = Новый Массив;
	ТекущийДокумент = Неопределено;
	Если Элементы.ДеревоЗадач.ТекущиеДанные<>Неопределено Тогда
		Если ЗначениеЗаполнено(Элементы.ДеревоЗадач.ТекущиеДанные.Документ) Тогда
			ТекущийДокумент = Элементы.ДеревоЗадач.ТекущиеДанные.Документ;
		КонецЕсли;
	КонецЕсли;
	ИмяЭлемента = Элемент.Имя;
	Если Найти(ИмяЭлемента,"Надпись")<>0 Тогда
		ИмяЭлемента = Сред(ИмяЭлемента,СтрДлина("Надпись")+1);
	Иначе
		ИмяЭлемента = Сред(ИмяЭлемента,СтрДлина("Декорация")+1);
	КонецЕсли;
	ПереченьВидимыхКоманд.Добавить("ДекорацияКарта");
	ПереченьВидимыхКоманд.Добавить("ДекорацияИстория");
	Если ИмяЭлемента = "НаУтверждении" Тогда
		РежимРаботыСпискаЗадач = ПредопределенноеЗначение("Перечисление.усд_СтатусыДокументовНаЭтапах.Активный");
		НадписьПереченьДокументов = "Перечень документов: согласуемые";
		ПереченьВидимыхКоманд.Добавить("ДекорацияСогласование");
		ПереченьВидимыхКоманд.Добавить("ДекорацияНаКонтроль");
		ПереченьВидимыхКоманд.Добавить("ДекорацияПереадресация");
	ИначеЕсли ИмяЭлемента = "Возвращено" Тогда
		РежимРаботыСпискаЗадач = ПредопределенноеЗначение("Перечисление.усд_СтатусыДокументовНаЭтапах.Возвращенный");
		НадписьПереченьДокументов = "Перечень документов: возвращенные";
		ПереченьВидимыхКоманд.Добавить("ДекорацияСогласование");
		ПереченьВидимыхКоманд.Добавить("ДекорацияНаКонтроль");
		ПереченьВидимыхКоманд.Добавить("ДекорацияПереадресация");
	ИначеЕсли ИмяЭлемента = "Согласовано" Тогда
		РежимРаботыСпискаЗадач = ПредопределенноеЗначение("Перечисление.усд_СтатусыДокументовНаЭтапах.Согласованный");
		НадписьПереченьДокументов = "Перечень документов: согласованные";
		ПереченьВидимыхКоманд.Добавить("ДекорацияОзнакомлен");
		ПереченьВидимыхКоманд.Добавить("ДекорацияСнятьСКонтроля");
	Иначе // отклонено
		РежимРаботыСпискаЗадач = ПредопределенноеЗначение("Перечисление.усд_СтатусыДокументовНаЭтапах.Отклоненный");
		НадписьПереченьДокументов = "Перечень документов: отклоненные";
		ПереченьВидимыхКоманд.Добавить("ДекорацияОзнакомлен");
		ПереченьВидимыхКоманд.Добавить("ДекорацияСнятьСКонтроля");
	КонецЕсли;
	Если ТребуетсяОбновлениеДанных Тогда
		ОбновитьДанныеФормы();
	КонецЕсли;
	НастроитьВидимостьКоманд(ПереченьВидимыхКоманд);
	ОбновитьДанныеСтраницы();
	Элементы.Страницы.ТекущаяСтраница=Элементы.Страницы.ПодчиненныеЭлементы.СтраницаЗадачи;
	ПозиционироватьсяНаВыбранномДокументе();
КонецПроцедуры

&НаКлиенте
Процедура НадписьНаКонтролеНажатие(Элемент)
	ПереченьВидимыхКоманд = Новый Массив;
	ПереченьВидимыхКоманд.Добавить("ДекорацияКарта");
	ПереченьВидимыхКоманд.Добавить("ДекорацияИстория");
	ПереченьВидимыхКоманд.Добавить("ДекорацияСнятьСКонтроля");
	НастроитьВидимостьКоманд(ПереченьВидимыхКоманд);
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаДокументыНаКонтроле;
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиНажатие(Элемент)
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаНастройки;
	ПереченьВидимыхКоманд = Новый Массив;
	ПереченьВидимыхКоманд.Добавить("ДекорацияВосстановитьНастройки");
	ПереченьВидимыхКоманд.Добавить("ДекорацияСохранитьНастройки");
	НастроитьВидимостьКоманд(ПереченьВидимыхКоманд);
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВидуДокументовПриИзменении(Элемент)
	ТребуетсяОбновлениеДанных = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументовПриИзменении(Элемент)
	ТребуетсяОбновлениеДанных = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоИсполнителюПриИзменении(Элемент)
	
	ТребуетсяОбновлениеДанных = Истина;
	Если НЕ Объект.ОтборПоИсполнителю Тогда
		Объект.ТолькоСвоиЗадачи = Ложь;
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	ТребуетсяОбновлениеДанных = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТолькоСвоиЗадачиПриИзменении(Элемент)
	ТребуетсяОбновлениеДанных = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаЭтапПриИзменении(Элемент)
	
	Если НЕ (Объект.ГруппаЭтап=ПредопределенноеЗначение("Перечисление.усд_ВариантыОтображенияРеквизитовСогласованияВСпискеЗадач.Группировка")
													ИЛИ Объект.ГруппаЭтап=ПредопределенноеЗначение("Перечисление.усд_ВариантыОтображенияРеквизитовСогласованияВСпискеЗадач.ГруппировкаИРеквизит")) Тогда
		Объект.ГрупповоеСогласование = Ложь;											
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьВремяПоступленияПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьВремяИсполненияПриИзменении(Элемент)
	
	ТребуетсяОбновлениеДанных = Истина;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаВидДокументовПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаМаршрутПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСостояниеПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура АвтообновлениеСпискаЗадачПриИзменении1(Элемент)
	Если Объект.АвтообновлениеСпискаЗадач И Объект.Секунд=0 Тогда
		Объект.Секунд = 60 * 5;
	КонецЕсли;
	АвтообновлениеСпискаЗадачПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура СекундПриИзменении(Элемент)
	Если Объект.Секунд = 0 Тогда
		Объект.АвтообновлениеСпискаЗадач = Ложь;
	КонецЕсли;
	АвтообновлениеСпискаЗадачПриИзменении();
КонецПроцедуры
 
// ПРОЦЕДУРЫ ОБРАБОТКИ СОБЫТИЙ ЭЛЕМЕНТОВ КОМАНДНОЙ ПАНЕЛИ

&НаКлиенте
Процедура ДекорацияОбновитьНажатие(Элемент)
	ОбновитьДанныеИСтраницы();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСогласованиеНажатие(Элемент)
	Если Элементы.ДеревоЗадач.ТекущиеДанные <> Неопределено Тогда
		Если Элементы.ДеревоЗадач.ВыделенныеСтроки.Количество()=1 Тогда //выбран один элемент дерева
			Если Элементы.ДеревоЗадач.ТекущиеДанные.Уровень>0 Тогда
				Если ТипЗнч(Элементы.ДеревоЗадач.ТекущиеДанные.КолонкаДерева)=Тип("СправочникСсылка.усд_ЭтапыМаршрутовДвиженияДокументов") И Объект.ГрупповоеСогласование Тогда
					ПереченьДокументов = Новый Массив;
					Для Каждого СтрокаДочерняя Из Элементы.ДеревоЗадач.ТекущиеДанные.ПолучитьЭлементы() Цикл
						Если ТипЗнч(СтрокаДочерняя.Документ)<>Тип("СправочникСсылка.усд_СостоянияДокументов") Тогда
							ПереченьДокументов.Добавить(СтрокаДочерняя.Документ);
						Иначе
							Для Каждого СтрокаДочерняя2 Из СтрокаДочерняя.ПолучитьЭлементы() Цикл
								ПереченьДокументов.Добавить(СтрокаДочерняя2.Документ);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
					ОткрытьФорму("Обработка.усд_УтверждениеДокументов.Форма.ФормаГрупповая",Новый Структура("ПереченьДокументов",ПереченьДокументов),ЭтотОбъект,Элементы.ДеревоЗадач.ТекущиеДанные.КолонкаДерева)
				ИначеЕсли НЕ Объект.ГрупповоеСогласование Тогда
					ПоказатьПредупреждение(, "Групповое согласование не разрешено в данном сеансе работы!");
				Иначе
					ПоказатьПредупреждение(, "Необходимо выбрать отдельный документ, или этап!");
				КонецЕсли;
			Иначе
				ОткрытьФорму("Обработка.усд_УтверждениеДокументов.Форма.Форма",Новый Структура("Документ",Элементы.ДеревоЗадач.ТекущиеДанные.Документ),ЭтотОбъект,Элементы.ДеревоЗадач.ТекущиеДанные.Документ)
			КонецЕсли;
		Иначе // множественный выбор
			ПереченьДокументов = Новый Массив;
			СообщеноОТипах = Ложь;
			СообщеноОбЭтапах = Ложь;
			ПодобранныйЭтап = Неопределено;
			ПодобранныйМаршрут = Неопределено;
			Для Каждого ЭлементВыделения Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
				СтрокаВыбора = ДеревоЗадач.НайтиПоИдентификатору(ЭлементВыделения);
				Если СтрокаВыбора.Уровень<>0 Тогда
					Если НЕ СообщеноОТипах Тогда
						ПоказатьПредупреждение(, "При выборе нескольких строк не учитываются выделенные группировки строк!");
						СообщеноОТипах = Истина;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				Если ПодобранныйЭтап = Неопределено Тогда
					ПодобранныйЭтап = СтрокаВыбора.Этап;
					ПодобранныйМаршрут = СтрокаВыбора.Маршрут;
				КонецЕсли;
				Если ПодобранныйЭтап <> СтрокаВыбора.Этап ИЛИ ПодобранныйМаршрут <> СтрокаВыбора.Маршрут Тогда
					Если НЕ СообщеноОбЭтапах Тогда
						ПоказатьПредупреждение(, "При выборе нескольких строк следует выбирать только документы, находящиеся на одном этапе маршрута!");
						СообщеноОбЭтапах = Истина;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				ПереченьДокументов.Добавить(СтрокаВыбора.Документ);
			КонецЦикла;
			Если ПереченьДокументов.Количество()>0 Тогда
				ОткрытьФорму("Обработка.усд_УтверждениеДокументов.Форма.ФормаГрупповая",Новый Структура("ПереченьДокументов",ПереченьДокументов),ЭтотОбъект,Элементы.ДеревоЗадач.ТекущиеДанные.КолонкаДерева)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПереадресацияНажатие(Элемент)
	Если НЕ ЕстьПраваПерадресации() Тогда
		ПоказатьПредупреждение(, "Нет права переадресации!");
		Возврат;
	КонецЕсли;
	ПереченьДокументов = Новый Массив;
	Для Каждого ЭлементВыделения Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		СтрокаВыбора = ДеревоЗадач.НайтиПоИдентификатору(ЭлементВыделения);
		Если СтрокаВыбора.Уровень>0 Тогда
			Для Каждого СтрокаДочерняя Из Элементы.ДеревоЗадач.ТекущиеДанные.ПолучитьЭлементы() Цикл
				ОбойтиСтрокиГруппы(СтрокаДочерняя,ПереченьДокументов);
			КонецЦикла;
		Иначе
			СтруктураДокумент = Новый Структура("Документ,ВидДокументов,Маршрут,Этап,Исполнитель");
			ЗаполнитьЗначенияСвойств(СтруктураДокумент,Элементы.ДеревоЗадач.ТекущиеДанные);
			ПереченьДокументов.Добавить(СтруктураДокумент);
		КонецЕсли;
	КонецЦикла;
	Если ПереченьДокументов.Количество()>0 Тогда
		ОткрытьФорму("Обработка.усд_ПереадресацияЗадачСогласования.Форма",Новый Структура("ПереченьДокументов",ПереченьДокументов),ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОзнакомленНажатие(Элемент)
	// удаление данных по задаче
	ПереченьДокументов = ПереченьДокументов();
	УдалитьДанныеПоДокументам(ПереченьДокументов);
	// обновление страницы
	ОбновитьДанныеСтраницы();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНаКонтрольНажатие(Элемент)
	ПереченьДокументов = ПереченьДокументов();
	ПоставитьНаКонтроль(ПереченьДокументов);
    Элементы.НадписьНаКонтроле.Заголовок = ?(ДокументыНаКонтроле.Количество()=0,"",Строка(ДокументыНаКонтроле.Количество()));
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСнятьСКонтроляНажатие(Элемент)
    Если Элементы.Страницы.ТекущаяСтраница=Элементы.Страницы.ПодчиненныеЭлементы.СтраницаДокументыНаКонтроле Тогда
		СписокНаКонтролеИзменен = Истина;
		Для Каждого Элемент Из Элементы.ДокументыНаКонтроле.ВыделенныеСтроки Цикл
			ДокументыНаКонтроле.Удалить(ДокументыНаКонтроле.НайтиПоИдентификатору(Элемент));
		КонецЦикла;
	Иначе
		ПереченьДокументов = ПереченьДокументов();
		СнятьСКонтроля(ПереченьДокументов);
	КонецЕсли;
   	Элементы.НадписьНаКонтроле.Заголовок = ?(ДокументыНаКонтроле.Количество()=0,"",Строка(ДокументыНаКонтроле.Количество()));
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартаНажатие(Элемент)
	ПереченьДокументов = ПереченьДокументов();
	ФормироватьКарту(ПереченьДокументов);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИсторияНажатие(Элемент)
	ПереченьДокументов = ПереченьДокументов();
	ФормироватьИсторию(ПереченьДокументов);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ДеревоЗадач>

&НаКлиенте
Процедура ДеревоЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Элементы.ДеревоЗадач.ТекущиеДанные.Документ) Тогда
		ПоказатьЗначение(, Элементы.ДеревоЗадач.ТекущиеДанные.Документ);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура АвтообновлениеСпискаЗадачПриИзменении()
	Если Объект.АвтообновлениеСпискаЗадач И Объект.Секунд=0 Тогда
		ПоказатьПредупреждение(, "Нельзя указать период обновления равный 0!");
		Объект.АвтообновлениеСпискаЗадач = Ложь;
		Возврат;
	КонецЕсли;
	Если Объект.АвтообновлениеСпискаЗадач Тогда
		ПодключитьОбработчикОжидания("ОбновитьДанныеИСтраницы",Объект.Секунд);
	Иначе
		ОтключитьОбработчикОжидания("ОбновитьДанныеИСтраницы");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеИСтраницы()
	ТекущийДокумент = Неопределено;
	Если Элементы.ДеревоЗадач.ТекущиеДанные<>Неопределено Тогда
		Если ЗначениеЗаполнено(Элементы.ДеревоЗадач.ТекущиеДанные.Документ) Тогда
			ТекущийДокумент = Элементы.ДеревоЗадач.ТекущиеДанные.Документ;
		КонецЕсли;
	КонецЕсли;
	ОбновитьДанныеФормы();
	ОбновитьДанныеСтраницы();
	ПозиционироватьсяНаВыбранномДокументе();
КонецПроцедуры

&НаКлиенте
Процедура ПозиционироватьсяНаВыбранномДокументе()
	Если ТекущийДокумент<>Неопределено Тогда
		ЭлементыДерева = ДеревоЗадач.ПолучитьЭлементы();
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			 ОбработатьЭлемент(ЭлементДерева);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЭлемент(ЭлементДерева)
	Если ЭлементДерева.Документ = ТекущийДокумент Тогда
		РодительСтроки = ЭлементДерева.ПолучитьРодителя();
		Пока РодительСтроки<>Неопределено Цикл
			Элементы.ДеревоЗадач.Развернуть(РодительСтроки.ПолучитьИдентификатор());
			РодительСтроки = РодительСтроки.ПолучитьРодителя();
		КонецЦикла;
		Элементы.ДеревоЗадач.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
	ИначеЕсли ЭлементДерева.Уровень>0 Тогда
		ВложенныеЭлементы = ЭлементДерева.ПолучитьЭлементы();
		Для Каждого ЭлементДереваВложенный Из ВложенныеЭлементы Цикл
			 ОбработатьЭлемент(ЭлементДереваВложенный);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьИсторию(Документы)
	Для Каждого Документ Из Документы Цикл
        ОткрытьФорму("Отчет.усд_ИсторияДвиженияДокументаПоМаршрутам.Форма",Новый Структура("Документ,СформироватьПриОткрытии,НеВосстанавливатьНастройки",Документ,Истина,Истина),ЭтотОбъект,Документ);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьКарту(Документы)
	Для Каждого Документ Из Документы Цикл
        ОткрытьФорму("Отчет.усд_КартаСостоянияДокумента.Форма",Новый Структура("Документ,СформироватьПриОткрытии",?(ТипЗнч(Документ)=Тип("Структура"),Документ.Документ,Документ),Истина),ЭтотОбъект,?(ТипЗнч(Документ)=Тип("Структура"),Документ.Документ,Документ));
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьСКонтроля(Документы)
	Для Каждого Документ Из Документы Цикл
		СтрокиДокумент = ДокументыНаКонтроле.НайтиСтроки(Новый Структура("Документ",Документ));
		Если СтрокиДокумент.Количество()>0 Тогда
           ДокументыНаКонтроле.Удалить(СтрокиДокумент[0]);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПереченьДокументов()
	ПереченьДокументов = Новый Массив;
	Если Элементы.Страницы.ТекущаяСтраница=Элементы.СтраницаДокументыНаКонтроле Тогда
		Для Каждого ЭлементВыделения Из Элементы.ДокументыНаКонтроле.ВыделенныеСтроки Цикл
			СтрокаВыбора = ДокументыНаКонтроле.НайтиПоИдентификатору(ЭлементВыделения);
			ПереченьДокументов.Добавить(СтрокаВыбора.Документ);
		КонецЦикла;
	Иначе
		Для Каждого ЭлементВыделения Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
			СтрокаВыбора = ДеревоЗадач.НайтиПоИдентификатору(ЭлементВыделения);
			Если СтрокаВыбора.Уровень>0 Тогда
				Для Каждого СтрокаДочерняя Из Элементы.ДеревоЗадач.ТекущиеДанные.ПолучитьЭлементы() Цикл
					ОбойтиСтрокиГруппы(СтрокаДочерняя,ПереченьДокументов,Истина);
				КонецЦикла;
			Иначе
				ПереченьДокументов.Добавить(Элементы.ДеревоЗадач.ТекущиеДанные.Документ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат ПереченьДокументов;
КонецФункции

&НаКлиенте
Процедура ПоставитьНаКонтроль(Документы)
	Для Каждого Документ Из Документы Цикл
		Если ДокументыНаКонтроле.НайтиСтроки(Новый Структура("Документ",Документ)).Количество()=0 Тогда
			НоваяЗапись = ДокументыНаКонтроле.Добавить();
			НоваяЗапись.Документ = Документ;
			НоваяЗапись.ОтветственноеЛицо = Объект.ТекПользователь;
			СписокНаКонтролеИзменен = Истина;
	    КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеПоДокументам(ПереченьДокументов)
	// из регистра активных задач
	Для Каждого Документ Из ПереченьДокументов Цикл
		НаборЗаписей = РегистрыСведений.усд_АктивныеЭтапыРассмотренияДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Документ);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось отменить активность задачи по документу "+Строка(Документ));
		КонецПопытки;
	КонецЦикла;
	// в созданных задачах пользователя
	ВидЗадачиСогласования = Новый Массив;
	ВидЗадачиСогласования.Добавить(Перечисления.усд_ВидыЗадачСогласования.РезультатОтклонение);
	ВидЗадачиСогласования.Добавить(Перечисления.усд_ВидыЗадачСогласования.РезультатУтверждение);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиСогласованияДокументов.Ссылка,
		|	ЗадачиСогласованияДокументов.Исполнитель,
		|	ЗадачиСогласованияДокументов.Объект
		|ИЗ
		|	Задача.усд_ЗадачиСогласованияДокументов КАК ЗадачиСогласованияДокументов
		|ГДЕ
		|	ЗадачиСогласованияДокументов.Объект В (&Документы)
		|	И НЕ ЗадачиСогласованияДокументов.Выполнена
		|	И НЕ ЗадачиСогласованияДокументов.ПометкаУдаления
		|	И ЗадачиСогласованияДокументов.ВидЗадачиСогласования В(&ВидЗадачиСогласования)";

	Запрос.УстановитьПараметр("ВидЗадачиСогласования", ВидЗадачиСогласования);
	Запрос.УстановитьПараметр("Документы", ПереченьДокументов);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Исполнитель<>Справочники.Пользователи.ПустаяСсылка() Тогда
			Если Объект.ОтборПоИсполнителю Тогда
				Если ВыборкаДетальныеЗаписи.Исполнитель<>Объект.Исполнитель Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				СтрокиДокумент = Объект.ДокументыНаУтверждение.НайтиСтроки(Новый Структура("Документ",ВыборкаДетальныеЗаписи.Объект));
				Если СтрокиДокумент.Количество()>0 Тогда
					Если ВыборкаДетальныеЗаписи.Исполнитель<>СтрокиДокумент[0].Исполнитель И ЗначениеЗаполнено(СтрокиДокумент[0].Исполнитель) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ОбъектЗадачи = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ОбъектЗадачи.Выполнена = Истина;
		ОбъектЗадачи.ПометкаУдаления = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("УдалятьЗадачиОтветственныхПриЗавершенииМаршрута");
		Попытка
			ОбъектЗадачи.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось закрыть автоматически задачу "+Строка(ВыборкаДетальныеЗаписи.Ссылка)+"
			|	по документу "+Строка(ВыборкаДетальныеЗаписи.Объект));
		КонецПопытки;
	КонецЦикла;
	
	// из табличной части обработки
	СтрокиУдалить = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.ДокументыНаУтверждение Цикл
		Если ПереченьДокументов.Найти(СтрокаТЧ.Документ)<>Неопределено Тогда
			СтрокиУдалить.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		Объект.ДокументыНаУтверждение.Удалить(СтрокаУдалить);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ЕстьПраваПерадресации()
	Возврат РольДоступна("ПолныеПрава") ИЛИ РольДоступна("усд_УправлениеСогласованиемИУтверждениемДокументов");	
КонецФункции

&НаКлиенте
Процедура ОбойтиСтрокиГруппы(СтрокаДочерняя, ПереченьДокументов, ТолькоДокумент = Ложь)
	Если СтрокаДочерняя.Уровень=0 Тогда
		Если ТолькоДокумент Тогда
			ПереченьДокументов.Добавить(СтрокаДочерняя.Документ);
		Иначе
			СтруктураДокумент = Новый Структура("Документ,ВидДокументов,Маршрут,Этап,Исполнитель");
			ЗаполнитьЗначенияСвойств(СтруктураДокумент,СтрокаДочерняя);
			ПереченьДокументов.Добавить(СтруктураДокумент);
		КонецЕсли;
	Иначе
		Для Каждого СтрокаДочерняя2 Из СтрокаДочерняя.ПолучитьЭлементы() Цикл
           ОбойтиСтрокиГруппы(СтрокаДочерняя2,ПереченьДокументов);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	Если СписокНаКонтролеИзменен Тогда
		СохранитьСписокНаКонтроле();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Объект.ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Если Объект.ГруппаВидДокументов.Пустая() Тогда
		Объект.ГруппаВидДокументов = Перечисления.усд_ВариантыОтображенияРеквизитовСогласованияВСпискеЗадач.НеОтображать;
	КонецЕсли;
	Если Объект.ГруппаМаршрут.Пустая() Тогда
		Объект.ГруппаМаршрут = Перечисления.усд_ВариантыОтображенияРеквизитовСогласованияВСпискеЗадач.НеОтображать;
	КонецЕсли;
	Если Объект.ГруппаЭтап.Пустая() Тогда
		Объект.ГруппаЭтап = Перечисления.усд_ВариантыОтображенияРеквизитовСогласованияВСпискеЗадач.НеОтображать;
	КонецЕсли;
	Если Объект.ГруппаСостояние.Пустая() Тогда
		Объект.ГруппаСостояние = Перечисления.усд_ВариантыОтображенияРеквизитовСогласованияВСпискеЗадач.НеОтображать;
	КонецЕсли;
	Объект.Исполнитель = ПараметрыСеанса.ТекущийПользователь;
	Если НЕ (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("усд_УправлениеСогласованиемИУтверждениемДокументов")) Тогда
		Объект.ОтборПоИсполнителю = Истина;
		Элементы.Исполнитель.Доступность =Ложь;
		Элементы.ОтборПоИсполнителю.Доступность = Ложь;
	КонецЕсли;
	
	ОбновитьДанныеФормы();
	
    РежимРаботыСпискаЗадач = Перечисления.усд_СтатусыДокументовНаЭтапах.Активный;

	НадписьДополнительныеНастройки = "Дополнительные настройки";
	НадписьОтбор = "Отбор";
	НадписьОтображениеРеквизитовСогласования = "Отображение реквизитов согласования";
	НадписьПереченьДокументов = "Перечень документов: согласуемые";
	
	УправлениеФормой(ЭтотОбъект);
	
	ОбновитьДанныеСтраницы();
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаЗадачи;
	
КонецПроцедуры

// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиенте
Процедура НастроитьВидимостьКоманд(МассивКоманд)
	
	МассивКоманд.Добавить("ДекорацияОбновить");
	Для Каждого ЭлементКоманда Из Элементы.КоманднаяПанельСтраниц.ПодчиненныеЭлементы Цикл
		Если ЭлементКоманда.Имя <> "ДекорацияОбновлено" Тогда
			ЭлементКоманда.Видимость = (МассивКоманд.Найти(ЭлементКоманда.Имя)<>Неопределено);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ДеревоЗадачПоступил.Видимость 	= Объект.УчитыватьВремяПоступления;
	Элементы.ДеревоЗадачСрок.Видимость 		= Объект.УчитыватьВремяИсполнения;
	Элементы.ДеревоЗадачВремя.Видимость 	= Объект.УчитыватьВремяИсполнения;
	Элементы.ДеревоЗадачЭтап.Видимость 		= (Объект.ГруппаЭтап=ПредопределенноеЗначение("Перечисление.усд_ВариантыОтображенияРеквизитовСогласованияВСпискеЗадач.Реквизит")
													ИЛИ Объект.ГруппаЭтап=ПредопределенноеЗначение("Перечисление.усд_ВариантыОтображенияРеквизитовСогласованияВСпискеЗадач.ГруппировкаИРеквизит"));
	Элементы.ДеревоЗадачСостояние.Видимость = (Объект.ГруппаСостояние=ПредопределенноеЗначение("Перечисление.усд_ВариантыОтображенияРеквизитовСогласованияВСпискеЗадач.Реквизит")
													ИЛИ Объект.ГруппаСостояние=ПредопределенноеЗначение("Перечисление.усд_ВариантыОтображенияРеквизитовСогласованияВСпискеЗадач.ГруппировкаИРеквизит"));
	Элементы.ДеревоЗадачВидДокументов.Видимость = (Объект.ГруппаВидДокументов=ПредопределенноеЗначение("Перечисление.усд_ВариантыОтображенияРеквизитовСогласованияВСпискеЗадач.Реквизит")
													ИЛИ Объект.ГруппаВидДокументов=ПредопределенноеЗначение("Перечисление.усд_ВариантыОтображенияРеквизитовСогласованияВСпискеЗадач.ГруппировкаИРеквизит"));
	Элементы.ДеревоЗадачМаршрут.Видимость 	= (Объект.ГруппаМаршрут=ПредопределенноеЗначение("Перечисление.усд_ВариантыОтображенияРеквизитовСогласованияВСпискеЗадач.Реквизит")
													ИЛИ Объект.ГруппаМаршрут=ПредопределенноеЗначение("Перечисление.усд_ВариантыОтображенияРеквизитовСогласованияВСпискеЗадач.ГруппировкаИРеквизит"));
													
	Элементы.ГрупповоеСогласование.Видимость 		= (Объект.ГруппаЭтап=ПредопределенноеЗначение("Перечисление.усд_ВариантыОтображенияРеквизитовСогласованияВСпискеЗадач.Группировка")
													ИЛИ Объект.ГруппаЭтап=ПредопределенноеЗначение("Перечисление.усд_ВариантыОтображенияРеквизитовСогласованияВСпискеЗадач.ГруппировкаИРеквизит"));
	Элементы.ТолькоСвоиЗадачи.Видимость				= Объект.ОтборПоИсполнителю;
	Элементы.ДекорацияТолькоСвоиЗадачи.Видимость	= Объект.ОтборПоИсполнителю;
	
КонецПроцедуры

// ПРОЦЕДУРЫ СОХРАНЕНИЯ И ВОССТАНОВЛЕНИЯ НАСТРОЕК


// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ДАННЫМИ ФОРМЫ

&НаСервере
Процедура ОбновитьДанныеСтраницы()
	ОбластьДанных = Объект.ДокументыНаУтверждение.Выгрузить(Новый Структура("Статус",РежимРаботыСпискаЗадач));
	Дерево = ДанныеФормыВЗначение(ДеревоЗадач,Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();
	МассивГруппировок = Новый Массив;
	МассивГруппировок.Добавить("ВидДокументов");
	МассивГруппировок.Добавить("Маршрут");
	МассивГруппировок.Добавить("Этап");
	МассивГруппировок.Добавить("Состояние");
	МассивПрименяемыхГруппировок = Новый Массив;
	НазваниеКолонки = "";
	Для Каждого мГруппировка Из МассивГруппировок Цикл
		Если Объект["Группа"+мГруппировка]=Перечисления.усд_ВариантыОтображенияРеквизитовСогласованияВСпискеЗадач.Группировка ИЛИ
			 Объект["Группа"+мГруппировка]=Перечисления.усд_ВариантыОтображенияРеквизитовСогласованияВСпискеЗадач.ГруппировкаИРеквизит Тогда
			МассивПрименяемыхГруппировок.Добавить(мГруппировка); 
			НазваниеКолонки = НазваниеКолонки + ?(мГруппировка="ВидДокументов","Вид документов",мГруппировка)+"/ "; 
		КонецЕсли;
	КонецЦикла;
	НазваниеКолонки = НазваниеКолонки + "Документ";
	Элементы.ДеревоЗадач.ПодчиненныеЭлементы.ДеревоЗадачДокумент.Заголовок = НазваниеКолонки;
	ВывестиДанныеУровня(Дерево,?(МассивПрименяемыхГруппировок.Количество()=0,Неопределено,МассивПрименяемыхГруппировок[0]),МассивПрименяемыхГруппировок,Новый Структура,ОбластьДанных);
	
	ЗначениеВДанныеФормы(Дерево,ДеревоЗадач);
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеУровня(Ветка,Уровень,МассивПрименяемыхГруппировок,ЗНАЧ СтруктураОтбора,ОбластьДанных)
	ИспользуемыйНабор = ?(СтруктураОтбора.Количество()=0,ОбластьДанных,ОбластьДанных.Скопировать(СтруктураОтбора));
	Если Уровень<>Неопределено Тогда
		ЗначенияНабора = ИспользуемыйНабор.Скопировать(,Уровень);
		ЗначенияНабора.Свернуть(Уровень);
		Для Каждого СтрокаЗначений Из ЗначенияНабора Цикл
			СтрокаДерева = Ветка.Строки.Добавить();
			СтрокаДерева.КолонкаДерева = СтрокаЗначений[Уровень];
			СтруктураОтбора.Вставить(Уровень,СтрокаЗначений[Уровень]);
			Индекс = МассивПрименяемыхГруппировок.Найти(Уровень);
			СтрокаДерева.Уровень = 4 - Индекс;
			СледующийУровень = ?(Индекс=МассивПрименяемыхГруппировок.Количество()-1,Неопределено,МассивПрименяемыхГруппировок[Индекс+1]);
			ВывестиДанныеУровня(СтрокаДерева,СледующийУровень,МассивПрименяемыхГруппировок,КопияСтруктуры(СтруктураОтбора),ИспользуемыйНабор);
		КонецЦикла;
	Иначе
		ИспользуемыйНабор.Сортировать("Приоритет ВОЗР");
		Для Каждого СтрокаЗначений Из ИспользуемыйНабор Цикл
			СтрокаДерева = Ветка.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева,СтрокаЗначений);
			СтрокаДерева.КолонкаДерева = СтрокаЗначений.Документ;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция КопияСтруктуры(КопируемаяСтруктура)
	НоваяСтруктура = Новый Структура;
	Для Каждого ЭлементСтруктуры Из КопируемаяСтруктура Цикл
		НоваяСтруктура.Вставить(ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
	КонецЦикла;
	Возврат НоваяСтруктура;
КонецФункции

&НаСервере
Процедура СохранитьСписокНаКонтроле()
	НаборЗаписей = РегистрыСведений.усд_ДокументыНаКонтроле.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОтветственноеЛицо.Установить(Объект.ТекПользователь);
	НаборЗаписей.Очистить();
	Для Каждого СтрокаИзФормы Из ДокументыНаКонтроле Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Документ = СтрокаИзФормы.Документ;
		НоваяЗапись.ОтветственноеЛицо = Объект.ТекПользователь;
	КонецЦикла;
	Попытка
		НаборЗаписей.Записать();
		СписокНаКонтролеИзменен = Ложь;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось сохранить новый список документов на контроле!
		|	"+ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

// обновляет отображение
//
&НаСервере
Процедура ОбновитьДанныеФормы()
	ТребуетсяОбновлениеДанных = Ложь;
	Если СписокНаКонтролеИзменен Тогда
		СохранитьСписокНаКонтроле();
	КонецЕсли;
	ДокументыНаКонтроле.Отбор.ОтветственноеЛицо.Значение = Объект.ТекПользователь;
	ДокументыНаКонтроле.Отбор.ОтветственноеЛицо.Использование = Истина;
	ДокументыНаКонтроле.Очистить();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыНаКонтроле.Документ
		|ИЗ
		|	РегистрСведений.усд_ДокументыНаКонтроле КАК ДокументыНаКонтроле
		|ГДЕ
		|	ДокументыНаКонтроле.ОтветственноеЛицо = &ОтветственноеЛицо";

	Запрос.УстановитьПараметр("ОтветственноеЛицо", Объект.ТекПользователь);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
       НоваяЗапись = ДокументыНаКонтроле.Добавить();
	   НоваяЗапись.Документ = ВыборкаДетальныеЗаписи.Документ;
   КонецЦикла;
   
   Элементы.НадписьНаКонтроле.Заголовок = ?(ДокументыНаКонтроле.Количество()=0,"",Строка(ДокументыНаКонтроле.Количество()));

	Элементы.ДокументыНаКонтроле.Обновить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отбор",					Объект.ОтборПоИсполнителю);
	Запрос.УстановитьПараметр("Пользователь",			Объект.Исполнитель);
	Запрос.УстановитьПараметр("ПоВиду",					Объект.ОтборПоВидуДокументов);
	Запрос.УстановитьПараметр("ВидДокументов",			Объект.ВидДокументов);
	Запрос.УстановитьПараметр("СтрогийОтбор",			Объект.ТолькоСвоиЗадачи);
	Запрос.МенеджерВременныхТаблиц= Новый МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ
				|	усд_ПраваПодписиНаЭтапахМаршрутов.ВидДокументов,
				|	усд_ПраваПодписиНаЭтапахМаршрутов.Маршрут,
				|	усд_ПраваПодписиНаЭтапахМаршрутов.Пользователь,
				|	усд_ПраваПодписиНаЭтапахМаршрутов.Этап
				|ПОМЕСТИТЬ ВТ_Права
				|ИЗ
				|	РегистрСведений.усд_ПраваПодписиНаЭтапахМаршрутов КАК усд_ПраваПодписиНаЭтапахМаршрутов
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ_Права.ВидДокументов,
				|	ВТ_Права.Маршрут,
				|	ВТ_Права.Пользователь,
				|	ВТ_Права.Этап
				|ПОМЕСТИТЬ ВТ_ПраваСУчетомГрупп
				|ИЗ
				|	ВТ_Права КАК ВТ_Права
				|ГДЕ
				|	ВТ_Права.Пользователь ССЫЛКА Справочник.Пользователи
				|	И ВЫБОР
				|			КОГДА &Отбор
				|				ТОГДА ВТ_Права.Пользователь = &Пользователь
				|			ИНАЧЕ ИСТИНА
				|		КОНЕЦ

				|ОБЪЕДИНИТЬ ВСЕ

				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ_Права.ВидДокументов,
				|	ВТ_Права.Маршрут,
				|	усд_СоставГруппСогласованияДокументов.Пользователь,
				|	ВТ_Права.Этап
				|ИЗ
				|	ВТ_Права КАК ВТ_Права
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.усд_СоставГруппСогласованияДокументов КАК усд_СоставГруппСогласованияДокументов
				|		ПО ВТ_Права.Пользователь = усд_СоставГруппСогласованияДокументов.ГруппаСогласования
				|ГДЕ
				|	ВТ_Права.Пользователь ССЫЛКА Справочник.усд_ГруппыСогласованияДокументов
				|	И ВЫБОР
				|			КОГДА &Отбор
				|				ТОГДА усд_СоставГруппСогласованияДокументов.Пользователь = &Пользователь
				|			ИНАЧЕ ИСТИНА
				|		КОНЕЦ
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ_ПраваСУчетомГрупп.ВидДокументов КАК ВидДокументов,
				|	ВТ_ПраваСУчетомГрупп.Маршрут,
				|	ВТ_ПраваСУчетомГрупп.Пользователь КАК Пользователь,
				|	ВТ_ПраваСУчетомГрупп.Этап КАК Этап
				|ПОМЕСТИТЬ ВТ_ПраваТекущегоПользователя
				|ИЗ
				|	ВТ_ПраваСУчетомГрупп КАК ВТ_ПраваСУчетомГрупп

				|ИНДЕКСИРОВАТЬ ПО
				|	ВидДокументов,
				|	Пользователь,
				|	Этап
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	АктивныеЭтапы.Документ,
				|	АктивныеЭтапы.Состояние,
				|	АктивныеЭтапы.Этап,
				|	АктивныеЭтапы.Маршрут,
				|	АктивныеЭтапы.ВидДокументов,
				|	АктивныеЭтапы.Статус,
				|	АктивныеЭтапы.Приоритет,
				|	АктивныеЭтапы.ПричинаВозврата,
				|	АктивныеЭтапы.ОтветственноеЛицо КАК Исполнитель,
				|	ЗНАЧЕНИЕ(Перечисление.усд_ВидыАдресацииЗадачСогласования.ПерсональнаяЗадача) КАК ВидАдресации,
				|	АктивныеЭтапы.Период
				|ПОМЕСТИТЬ ВТ_Задачи
				|ИЗ
				|	РегистрСведений.усд_АктивныеЭтапыРассмотренияДокументов.СрезПоследних(,) КАК АктивныеЭтапы
				|ГДЕ
				|	ВЫБОР
				|			КОГДА &Отбор
				|				ТОГДА АктивныеЭтапы.ОтветственноеЛицо = &Пользователь
				|			ИНАЧЕ АктивныеЭтапы.ОтветственноеЛицо <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
				|		КОНЕЦ
				|	И ВЫБОР
				|			КОГДА &ПоВиду
				|				ТОГДА АктивныеЭтапы.ВидДокументов = &ВидДокументов
				|			ИНАЧЕ ИСТИНА
				|		КОНЕЦ
//				|	И НЕ АктивныеЭтапы.Документ.ПометкаУдаления

				|ОБЪЕДИНИТЬ ВСЕ

				|ВЫБРАТЬ
				|	АктивныеЭтапы.Документ,
				|	АктивныеЭтапы.Состояние,
				|	АктивныеЭтапы.Этап,
				|	АктивныеЭтапы.Маршрут,
				|	АктивныеЭтапы.ВидДокументов,
				|	АктивныеЭтапы.Статус,
				|	АктивныеЭтапы.Приоритет,
				|	АктивныеЭтапы.ПричинаВозврата,
				|	АктивныеЭтапы.ОтветственноеЛицо,
				|	ЗНАЧЕНИЕ(Перечисление.усд_ВидыАдресацииЗадачСогласования.ОбщаяЗадача),
				|	АктивныеЭтапы.Период
				|ИЗ
				|	РегистрСведений.усд_АктивныеЭтапыРассмотренияДокументов.СрезПоследних(,) КАК АктивныеЭтапы
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПраваТекущегоПользователя КАК ВТ_ПраваТекущегоПользователя
				|		ПО АктивныеЭтапы.ВидДокументов = ВТ_ПраваТекущегоПользователя.ВидДокументов
				|			И АктивныеЭтапы.Маршрут = ВТ_ПраваТекущегоПользователя.Маршрут
				|			И АктивныеЭтапы.Этап = ВТ_ПраваТекущегоПользователя.Этап
				|			И (&Отбор)
				|ГДЕ
				|	АктивныеЭтапы.ОтветственноеЛицо = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
				|	И ВЫБОР
				|			КОГДА &Отбор
				|				ТОГДА НЕ ВТ_ПраваТекущегоПользователя.Этап ЕСТЬ NULL 
				|			ИНАЧЕ ИСТИНА
				|		КОНЕЦ
				|	И ВЫБОР
				|			КОГДА &ПоВиду
				|				ТОГДА АктивныеЭтапы.ВидДокументов = &ВидДокументов
				|			ИНАЧЕ ИСТИНА
				|		КОНЕЦ

				|ОБЪЕДИНИТЬ ВСЕ  // согласованные

				|ВЫБРАТЬ
				|	АктивныеЭтапы.Объект,
				|	ЗНАЧЕНИЕ(Справочник.усд_СостоянияДокументов.ПустаяСсылка),
				|	АктивныеЭтапы.Этап,
				|	АктивныеЭтапы.Маршрут,
				|	АктивныеЭтапы.ВидДокументов,
				|	ЗНАЧЕНИЕ(Перечисление.усд_СтатусыДокументовНаЭтапах.Согласованный),
				|	ПоследниеЭтапы.Приоритет,
				|	ПоследниеЭтапы.ПричинаВозврата,
				|	АктивныеЭтапы.Исполнитель,
				|	ЗНАЧЕНИЕ(Перечисление.усд_ВидыАдресацииЗадачСогласования.ПерсональнаяЗадача),
				|	АктивныеЭтапы.Дата
				|ИЗ
				|	Задача.усд_ЗадачиСогласованияДокументов КАК АктивныеЭтапы
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПраваТекущегоПользователя КАК ВТ_ПраваТекущегоПользователя
				|		ПО АктивныеЭтапы.ВидДокументов = ВТ_ПраваТекущегоПользователя.ВидДокументов
				|			И АктивныеЭтапы.Маршрут = ВТ_ПраваТекущегоПользователя.Маршрут
				|			И АктивныеЭтапы.Этап = ВТ_ПраваТекущегоПользователя.Этап
				|			И (&Отбор)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.усд_ДвижениеДокументовПоМаршрутам.СрезПоследних(,) КАК ПоследниеЭтапы
				|		ПО АктивныеЭтапы.Объект = ПоследниеЭтапы.Документ
				|ГДЕ АктивныеЭтапы.Выполнена = ЛОЖЬ И АктивныеЭтапы.ВидЗадачиСогласования = ЗНАЧЕНИЕ(Перечисление.усд_ВидыЗадачСогласования.РезультатУтверждение) И
				|	ВЫБОР
				|			КОГДА &Отбор
				|				ТОГДА АктивныеЭтапы.Исполнитель = &Пользователь
				|			ИНАЧЕ АктивныеЭтапы.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
				|		КОНЕЦ
				|	И ВЫБОР
				|			КОГДА &ПоВиду
				|				ТОГДА АктивныеЭтапы.ВидДокументов = &ВидДокументов
				|			ИНАЧЕ ИСТИНА
				|		КОНЕЦ

				|ОБЪЕДИНИТЬ ВСЕ  // отклоненные

				|ВЫБРАТЬ
				|	АктивныеЭтапы.Объект,
				|	ЗНАЧЕНИЕ(Справочник.усд_СостоянияДокументов.ПустаяСсылка),
				|	ПоследниеЭтапы.Этап,
				|	АктивныеЭтапы.Маршрут,
				|	АктивныеЭтапы.ВидДокументов,
				|	ЗНАЧЕНИЕ(Перечисление.усд_СтатусыДокументовНаЭтапах.Отклоненный),
				|	ПоследниеЭтапы.Приоритет,
				|	ПоследниеЭтапы.ПричинаВозврата,
				|	АктивныеЭтапы.Исполнитель,
				|	ЗНАЧЕНИЕ(Перечисление.усд_ВидыАдресацииЗадачСогласования.ПерсональнаяЗадача),
				|	АктивныеЭтапы.Дата
				|ИЗ
				|	Задача.усд_ЗадачиСогласованияДокументов КАК АктивныеЭтапы
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПраваТекущегоПользователя КАК ВТ_ПраваТекущегоПользователя
				|		ПО АктивныеЭтапы.ВидДокументов = ВТ_ПраваТекущегоПользователя.ВидДокументов
				|			И АктивныеЭтапы.Маршрут = ВТ_ПраваТекущегоПользователя.Маршрут
				|			И АктивныеЭтапы.Этап = ВТ_ПраваТекущегоПользователя.Этап
				|			И (&Отбор)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.усд_ДвижениеДокументовПоМаршрутам.СрезПоследних(,) КАК ПоследниеЭтапы
				|		ПО АктивныеЭтапы.Объект = ПоследниеЭтапы.Документ
				|ГДЕ АктивныеЭтапы.Выполнена = ЛОЖЬ И АктивныеЭтапы.ВидЗадачиСогласования = ЗНАЧЕНИЕ(Перечисление.усд_ВидыЗадачСогласования.РезультатОтклонение) И
				|	ВЫБОР
				|			КОГДА &Отбор
				|				ТОГДА АктивныеЭтапы.Исполнитель = &Пользователь
				|			ИНАЧЕ АктивныеЭтапы.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
				|		КОНЕЦ
				|	И ВЫБОР
				|			КОГДА &ПоВиду
				|				ТОГДА АктивныеЭтапы.ВидДокументов = &ВидДокументов
				|			ИНАЧЕ ИСТИНА
				|		КОНЕЦ
//				|	И НЕ АктивныеЭтапы.Документ.ПометкаУдаления
				|;

				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_Задачи.Документ,
				|	ВТ_Задачи.Состояние,
				|	ВТ_Задачи.Этап,
				|	ВТ_Задачи.Маршрут КАК Маршрут,
				|	ВТ_Задачи.ВидДокументов КАК ВидДокументов,
				|	ВТ_Задачи.Статус,
				|	ВТ_Задачи.Приоритет,
				|	ВТ_Задачи.ПричинаВозврата,
				|	ВТ_Задачи.Исполнитель,
				|	ВТ_Задачи.ВидАдресации,
				|	ВТ_Задачи.Период КАК Период
				|ИЗ
				|	ВТ_Задачи КАК ВТ_Задачи
                |ГДЕ ВЫБОР КОГДА &СтрогийОтбор ТОГДА ВТ_Задачи.ВидАдресации=ЗНАЧЕНИЕ(Перечисление.усд_ВидыАдресацииЗадачСогласования.ПерсональнаяЗадача) ИНАЧЕ ИСТИНА КОНЕЦ 
				//|   И НЕ ВТ_Задачи.Документ.ПометкаУдаления
				|УПОРЯДОЧИТЬ ПО
				|	ВидДокументов,
				|	Маршрут,
				|	Период
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	ВТ_СписокЗадачГотовый.Маршрут,
	             |	ВТ_СписокЗадачГотовый.Этап
	             |ПОМЕСТИТЬ ВТ_Фильтр
	             |ИЗ
	             |	ВТ_Задачи КАК ВТ_СписокЗадачГотовый
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	МаршрутыДвиженияДокументовЭтапыМаршрута.КонтролироватьСрокИсполнения КАК КонтролироватьСрок,
	             |	МаршрутыДвиженияДокументовЭтапыМаршрута.СрокИсполнения,
	             |	МаршрутыДвиженияДокументовЭтапыМаршрута.ЕдиницыВремени,
	             |	ВТ_Фильтр.Маршрут,
	             |	ВТ_Фильтр.Этап
	             |ИЗ
	             |	ВТ_Фильтр КАК ВТ_Фильтр
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.усд_МаршрутыДвиженияДокументов.ЭтапыМаршрута КАК МаршрутыДвиженияДокументовЭтапыМаршрута
	             |		ПО ВТ_Фильтр.Маршрут = МаршрутыДвиженияДокументовЭтапыМаршрута.Ссылка
	             |			И ВТ_Фильтр.Этап = МаршрутыДвиженияДокументовЭтапыМаршрута.Этап";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаДокументы = РезультатЗапроса[4].Выбрать();
	ТаблицаСроки = РезультатЗапроса[6].Выгрузить();
	Объект.ДокументыНаУтверждение.Очистить();
	График = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ГрафикУчетаРаботПоСогласованию");

	Если Объект.УчитыватьВремяИсполнения Тогда
		РежимВстраивания = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
		ТаблицаГрафика = усд_УправлениеСогласованиемДокументов.ПолучитьТаблицуГрафикаРаботПоСогласованию(График,ТекущаяДата());
		СообщеноОГрафике = Ложь;
	КонецЕсли;
	Пока ВыборкаДокументы.Следующий() Цикл
		СтрокаДокумент = Объект.ДокументыНаУтверждение.Добавить();
		СтрокаДокумент.Приоритет 		= ВыборкаДокументы.Приоритет;
		СтрокаДокумент.Документ 		= ВыборкаДокументы.Документ;
		СтрокаДокумент.ВидДокументов 	= ВыборкаДокументы.ВидДокументов;
		СтрокаДокумент.Маршрут 			= ВыборкаДокументы.Маршрут;
		СтрокаДокумент.Этап 			= ВыборкаДокументы.Этап;
		СтрокаДокумент.Состояние 		= ВыборкаДокументы.Состояние;
		СтрокаДокумент.Статус 			= ВыборкаДокументы.Статус;
		СтрокаДокумент.Исполнитель 		= ВыборкаДокументы.Исполнитель;
		СтрокаДокумент.Поступил 		= ВыборкаДокументы.Период;
		Если Объект.УчитыватьВремяИсполнения Тогда
			СтрокаДокумент.Срок = 0;
			СтрокиВремя = ТаблицаСроки.НайтиСтроки(Новый Структура("Маршрут,Этап",ВыборкаДокументы.Маршрут,ВыборкаДокументы.Этап));
			Если СтрокиВремя.Количество()>0 Тогда
				Если СтрокиВремя[0].КонтролироватьСрок Тогда
					УстановленныйСрок 	= СтрокиВремя[0].СрокИсполнения;
					ЕдиницаВремени 		= СтрокиВремя[0].ЕдиницыВремени;
					СтрокаДокумент.Время = ЕдиницаВремени;
					Если УстановленныйСрок>0 Тогда
						Прошло = фин_ЗащитаПривилегированныеПроцедуры.РасчетПрошедшегоВремени(График,СтрокиВремя[0].ЕдиницыВремени,СтрокаДокумент.Поступил,ТекущаяДата(),ТаблицаГрафика);
						Осталось = УстановленныйСрок - Прошло;
						СтрокаДокумент.Срок = Осталось;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураЗакладок = Новый Структура;
	СтруктураЗакладок.Вставить("НадписьНаУтверждении",	Перечисления.усд_СтатусыДокументовНаЭтапах.Активный);
	СтруктураЗакладок.Вставить("НадписьВозвращено",		Перечисления.усд_СтатусыДокументовНаЭтапах.Возвращенный);
	СтруктураЗакладок.Вставить("НадписьОтклонено",		Перечисления.усд_СтатусыДокументовНаЭтапах.Отклоненный);
	СтруктураЗакладок.Вставить("НадписьСогласовано",	Перечисления.усд_СтатусыДокументовНаЭтапах.Согласованный);
	Для Каждого ЭлементСтруктуры Из СтруктураЗакладок Цикл
		Задач = Объект.ДокументыНаУтверждение.НайтиСтроки(Новый Структура("Статус",ЭлементСтруктуры.Значение)).Количество();
		//Элементы[ЭлементСтруктуры.Ключ].Заголовок = Элементы[ЭлементСтруктуры.Ключ].Подсказка + ?(Задач=0,""," ("+Строка(Задач)+")");
		Элементы[ЭлементСтруктуры.Ключ].Заголовок = ?(Задач=0,"",Строка(Задач));
	КонецЦикла;
	ВремяОбновления = ТекущаяДата();
	Элементы.ДекорацияОбновлено.Заголовок = "Обновлено: "+Строка(Час(ВремяОбновления))+":"+?(Минута(ВремяОбновления)=0,"00",Формат(Минута(ВремяОбновления),"ЧЦ=2; ЧВН="));
КонецПроцедуры //Обновить

