
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Дата = НачалоМесяца(ТекущаяДата());
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПравилаРегламентногоНазначенияСоответствийБюджетирования.Разрез,
	               |	ПравилаРегламентногоНазначенияСоответствийБюджетирования.ИмяСправочника
	               |ИЗ
	               |	РегистрСведений.фин_ПравилаРегламентногоНазначенияСоответствийБюджетирования КАК ПравилаРегламентногоНазначенияСоответствийБюджетирования";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
			Объект.Разрез 		= Результат.Разрез;
			Объект.Справочник 	= Результат.ИмяСправочника;
			РазрезБюджета		= фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Объект.Разрез);
			Элементы.ДеревоСоответствийСоответствие.ОграничениеТипа = РазрезБюджета.ТипЗначения;
			Попытка
				СправочникПредставление = Метаданные.Справочники.Найти(Объект.Справочник).Представление();
				Элементы.ДеревоСоответствийИсходноеЗначение.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка."+Объект.Справочник);
			Исключение
				
			КонецПопытки;
	КонецЕсли;
	СписокРазрезов.Добавить(ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.СтатьиОборотов);
	ВсеРазрезы = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьПолныйСписокРазрезов();
	Для Каждого Разрез Из ВсеРазрезы Цикл
		СписокРазрезов.Добавить(фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Разрез.Значение));
	КонецЦикла;
	Для Каждого Справочник Из Метаданные.Справочники Цикл
		СписокСправочников.Добавить(Справочник.Имя,Справочник.Синоним);
	КонецЦикла;
	СписокСправочников.СортироватьПоПредставлению();
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	Форма.Элементы.ГруппаСоответствияЭлементамСправочника.Доступность = ЗначениеЗаполнено(Форма.РазрезБюджета) И ЗначениеЗаполнено(Форма.СправочникПредставление);	
	Форма.Элементы.ГруппаНастройкаСозданияФинансовыхПоказателей.Видимость = Форма.Объект.Разрез = ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.ФинансовыйПоказатель");
КонецПроцедуры

&НаКлиенте
Процедура РазрезБюджетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	ДанныеВыбора 			= СписокРазрезов;
КонецПроцедуры

&НаКлиенте
Процедура СправочникПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	ДанныеВыбора 			= СписокСправочников;
КонецПроцедуры

&НаКлиенте
Процедура РазрезБюджетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РазрезБюджета = ВыбранноеЗначение;
	РазрезБюджетаОбработкаВыбораНаСервере();
КонецПроцедуры

&НаСервере
Процедура РазрезБюджетаОбработкаВыбораНаСервере()
	Объект.Разрез = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИзмерениеПоРазрезу(РазрезБюджета);
	Если РазрезБюджета = ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.СтатьиОборотов Тогда
		Объект.Разрез =  Перечисления.фин_ФактическиеПоказателиБюджетирования.ФинансовыйПоказатель;
	КонецЕсли;
	ДеревоСоответствий.ПолучитьЭлементы().Очистить();
	Элементы.ДеревоСоответствийСоответствие.ОграничениеТипа = РазрезБюджета.ТипЗначения;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Разрез",Объект.Разрез);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПравилаРегламентногоНазначенияСоответствийБюджетирования.Разрез,
	               |	ПравилаРегламентногоНазначенияСоответствийБюджетирования.ИмяСправочника
	               |ИЗ
	               |	РегистрСведений.фин_ПравилаРегламентногоНазначенияСоответствийБюджетирования КАК ПравилаРегламентногоНазначенияСоответствийБюджетирования
	               |ГДЕ
	               |	ПравилаРегламентногоНазначенияСоответствийБюджетирования.Разрез = &Разрез";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Объект.Справочник 	= Результат.ИмяСправочника;
		Попытка
			СправочникПредставление = Метаданные.Справочники.Найти(Объект.Справочник).Представление();
			Элементы.ДеревоСоответствийИсходноеЗначение.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка."+Объект.Справочник);
		Исключение
			
		КонецПопытки;
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	Объект.Справочник 		= ВыбранноеЗначение;
	СправочникПредставление = СписокСправочников.НайтиПоЗначению(ВыбранноеЗначение).Представление;
	ДеревоСоответствий.ПолучитьЭлементы().Очистить();
	Элементы.ДеревоСоответствийИсходноеЗначение.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка."+Объект.Справочник);
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры


&НаКлиенте
Процедура Обновить(Команда)
	Если НЕ ЗначениеЗаполнено(РазрезБюджета) Тогда
		ПоказатьПредупреждение(,"Не указан разрез бюджетирования!");
		Возврат;
	ИначеЕсли Объект.Справочник = "" Тогда
		ПоказатьПредупреждение(,"Не указан справочник исходных данных!");
		Возврат;
	КонецЕсли;
	ОбновитьНаСервере();
КонецПроцедуры


&НаСервере
Процедура ОбновитьНаСервере()
	ДеревоСоответствий.ПолучитьЭлементы().Очистить();
	Дерево = ДанныеФормыВЗначение(ДеревоСоответствий,Тип("ДеревоЗначений"));
	ЗаполнитьУзел(Неопределено,Дерево);
	ЗначениеВДанныеФормы(Дерево,ДеревоСоответствий);
КонецПроцедуры

//Процедура заполнения дерева значений
//
Процедура ЗаполнитьУзел(Строка,Дерево)
	Справочник = Объект.Справочник;
    СтрокиДерева = Дерево.Строки;
    Порядок = "";
	Группа = "";	
	Иерархический = Метаданные.Справочники[Справочник].Иерархический;
	Если Иерархический Тогда
		Группа =  ", Справочник.Родитель Как Родитель";
		Порядок = " УПОРЯДОЧИТЬ ПО
                   |	ИсходноеЗначение ИЕРАРХИЯ	";
	КонецЕсли; 
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
                   |	Справочник.Ссылка КАК ИсходноеЗначение  "+Группа+"
                   |ИЗ
                   |	Справочник."+Справочник+" КАК Справочник 
                   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаСоответствийДляИзмеренийБюджетирования.СрезПоследних(, Разрез = &Разрез) КАК НастройкаСоответствийДляИзмеренийБюджетированияСрезПоследних
                   |		ПО Справочник.Ссылка = НастройкаСоответствийДляИзмеренийБюджетированияСрезПоследних.ИсходноеЗначение
                   |ГДЕ
                   |	НастройкаСоответствийДляИзмеренийБюджетированияСрезПоследних.ИсходноеЗначение ЕСТЬ NULL 
                   |
                   |"+ Порядок +"";
	
    Запрос.УстановитьПараметр("Разрез", Объект.Разрез);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать(); 
	Если Выборка.Количество() <> 0 Тогда
		СтрокиДерева.Очистить();
		Пока Выборка.Следующий() Цикл
            Если НЕ Иерархический Тогда
				СтрокаДерева = СтрокиДерева.Добавить();
				СтрокаДерева.ИсходноеЗначение = Выборка.ИсходноеЗначение;
				СтрокаДерева.Соответствие = Неопределено;
				Продолжить;
			КонецЕсли;		
            Строка = Дерево.Строки.Найти(Выборка.Родитель,"ИсходноеЗначение",Истина);
			Если Строка = Неопределено Тогда
				Строка = Дерево;
			КонецЕсли;			
			СтрокаДерева = Строка.Строки.Добавить();				
			СтрокаДерева.ИсходноеЗначение = Выборка.ИсходноеЗначение;
            СтрокаДерева.Соответствие = Неопределено;		
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры //ЗаполнитьУзел 

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	Для Каждого СтрокаДерева Из ДеревоСоответствий.ПолучитьЭлементы() Цикл
		УстановитьФлажкиВСтроках(СтрокаДерева,Истина);	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	Для Каждого СтрокаДерева Из ДеревоСоответствий.ПолучитьЭлементы() Цикл
		УстановитьФлажкиВСтроках(СтрокаДерева,Ложь);	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСоответствийФлагПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоСоответствий.ТекущиеДанные;
	УстановитьФлажкиВСтроках(ТекущиеДанные,ТекущиеДанные.Флаг);	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиВСтроках(СтрокаДерева,Пометка)
	СтрокаДерева.Флаг = Пометка;
	Для Каждого СтрокаДереваПодчиненная Из СтрокаДерева.ПолучитьЭлементы() Цикл
		УстановитьФлажкиВСтроках(СтрокаДереваПодчиненная,Пометка);	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСоответствия(Команда)
	СоздатьСоответствияНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьСоответствияНаСервере()
	Если РазрезБюджета.ТипЗначения.Типы().Количество()>1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Тип для создания значений не однозначен!");
		Возврат;
	КонецЕсли;
	ОбработатьСтроки(ДеревоСоответствий);
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтроки(СтрокаДерева)
	ТипДляСоздания = СтрЗаменить(фин_РаботаСДополнительнымиРазрезамиБюджетирования.ОпределитьТаблицуПоТипу(РазрезБюджета.ТипЗначения.Типы()[0]),"Справочник.","");
	Для Каждого СтрокаПодчиненная Из СтрокаДерева.ПолучитьЭлементы() Цикл
		Если СтрокаПодчиненная.ПолучитьЭлементы().Количество()=0 Тогда
			Если СтрокаПодчиненная.Флаг = Истина И СтрокаПодчиненная.ИсходноеЗначение.ЭтоГруппа = Ложь И СтрокаПодчиненная.ИсходноеЗначение.ПометкаУдаления = Ложь Тогда
				НовыйЭлемент = Справочники[ТипДляСоздания].СоздатьЭлемент();
				НовыйЭлемент.Наименование = СтрокаПодчиненная.ИсходноеЗначение.Наименование;
				НовыйЭлемент.УстановитьНовыйКод();
				Если Объект.Разрез = ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.ФинансовыйПоказатель") Тогда
					НовыйЭлемент.УчетПоСумме 		= УчетПоСумме;
					НовыйЭлемент.УчетПоКоличеству 	= УчетПоКоличеству;
				КонецЕсли;
				Попытка
					НовыйЭлемент.Записать();
					СтрокаПодчиненная.Флаг = Ложь;
					СтрокаПодчиненная.Соответствие = НовыйЭлемент.Ссылка;
					НаборЗаписей = РегистрыСведений.фин_НастройкаСоответствийДляИзмеренийБюджетирования.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ИсходноеЗначение.Установить(СтрокаПодчиненная.ИсходноеЗначение);
					НаборЗаписей.Отбор.Разрез.Установить(Объект.Разрез);
					НЗ = НаборЗаписей.Добавить();
					НЗ.Период 			= Дата;
					НЗ.ИсходноеЗначение = СтрокаПодчиненная.ИсходноеЗначение;
					НЗ.Разрез 			= Объект.Разрез;
					НЗ.Соответствие 	= НовыйЭлемент.Ссылка;
					НаборЗаписей.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли;
		Иначе
			ОбработатьСтроки(СтрокаПодчиненная);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
