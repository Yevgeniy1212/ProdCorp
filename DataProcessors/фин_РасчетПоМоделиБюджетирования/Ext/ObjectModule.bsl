Перем ТекущийИдентификатор;
Перем КЭШ_Разрезы;

// Возвращает таблицу с данными, сформированную по настройкам переданного
// элемента справочника "ИсточникиДанныхДляРасчетовБюджетирования"
//
// Параметры
//  ИсточникДанных: Справочник.ИсточникиДанныхДляРасчетовБюджетирования – источник, 
//				   по настройкам которого будут отбираться данные из базы
//
//  ОтборПоИзмерениям: список значений - дополнительный фильтр для источника (по профилю)
//  ИмяИзмерения: строка - имя измерения, на которое накладывается фильтр.
// 
// Возвращаемое значение:
//   ТабИсточника: таблица значений, содержащая данные базы.
//
Функция ПолучитьДанныеИсточника(ИсточникДанных, ОтборПоИзмерениям,ИзмерениеБюджетирования,СтруктураИзмеренийРасчет,СтруктураДанные) Экспорт
	
	ПостроительОтчета=Новый ПостроительОтчета;
	
	ПостроительОтчета.Текст=СтрЗаменить(ИсточникДанных.ТекстЗапроса,",День,",",,");// Убираем детализацию по периодам
	
	Если ИсточникДанных.ПроизвольныйЗапрос Тогда
		ПостроительОтчета.ЗаполнитьНастройки();
	КонецЕсли;
		
	СохраненнаяНастройка=ИсточникДанных.НастройкиПостроителя.Получить();
	
	Если ТипЗнч(СохраненнаяНастройка.НастройкиПостроителя)=Тип("НастройкиПостроителяОтчета") Тогда
		
		ПостроительОтчета.УстановитьНастройки(СохраненнаяНастройка.НастройкиПостроителя,Истина,Ложь,Истина,Истина);
		
		Для Каждого Параметр Из СохраненнаяНастройка.ПараметрыПостроителя Цикл
			УстанавливаемоеЗначение = Параметр.Значение;
			Если УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.ДокументРегистратор Тогда
				УстанавливаемоеЗначение = ДокументРасчета;
			ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.НачалоПлановогоПериода Тогда
				УстанавливаемоеЗначение = ДатаРасчета;
			ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.ОкончаниеПлановогоПериода Тогда
				УстанавливаемоеЗначение = ГраницаПериодаРасчета;
			ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.Организация Тогда
				УстанавливаемоеЗначение = Организация;
			ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.СценарийРасчета Тогда
				УстанавливаемоеЗначение = СценарийКонтекстаРасчета;
			ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.ПроектРасчета Тогда
				УстанавливаемоеЗначение = ДокументРасчета.Проект;
			ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.ПодразделениеРасчета Тогда
				УстанавливаемоеЗначение = ДокументРасчета.УправленческоеПодразделение;
			ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.ДатаРасчета Тогда
				УстанавливаемоеЗначение = ДокументРасчета.Дата;
			КонецЕсли;
			ПостроительОтчета.Параметры.Вставить(Параметр.Ключ,УстанавливаемоеЗначение);
		КонецЦикла;
		
	КонецЕсли;
	
	ПостроительОтчета.ВыбранныеПоля.Очистить();
	
	Для Каждого СтрокаСвязь Из ИсточникДанных.ИзмеренияИсточника Цикл
		ИмяИзмерения=фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СтрокаСвязь.ИзмерениеБюджетирования);
		Если СтруктураИзмеренийРасчет.Свойство(ИмяИзмерения) Тогда
			ПостроительОтчета.ВыбранныеПоля.Добавить(СтрокаСвязь.ПутьКДанным,ИмяИзмерения);
		КонецЕсли;
	КонецЦикла;
	
	Если ИсточникДанных.ПроизвольныйЗапрос Тогда
		Если СтруктураДанные.Свойство(КодОсновногоИсточника) Тогда
			Для Каждого Показатель Из СтруктураДанные[КодОсновногоИсточника] Цикл
				ПостроительОтчета.ВыбранныеПоля.Добавить(Показатель.Значение,Показатель.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
			
	Если ТипЗнч(ОтборПоИзмерениям)=Тип("СписокЗначений") И ОтборПоИзмерениям.Количество()>0 Тогда
		
		СтрокаИзмерения=ИсточникДанных.ИзмеренияИсточника.Найти(ИзмерениеБюджетирования,"ИзмерениеБюджетирования");
		Если НЕ СтрокаИзмерения=Неопределено Тогда
			
			НовыйОтбор=ПостроительОтчета.Отбор.Добавить(СтрокаИзмерения.ПутьКДанным);
			НовыйОтбор.ВидСравнения= ВидСравнения.ВСпискеПоИерархии;
			НовыйОтбор.Значение=ОтборПоИзмерениям;
			НовыйОтбор.Использование=Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Граница Из ИсточникДанных.ДатыОтбораДанныхИсточника Цикл
		
		Если Граница.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.ФиксированнаяДата Тогда
			НачальнаяДатаГраницы=Граница.ДатаНачальнойГраницыОтсчета;
		ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.НачалоПериода Тогда
			НачальнаяДатаГраницы=ДатаРасчета;
		ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.КонецПериода Тогда
			НачальнаяДатаГраницы=ГраницаПериодаРасчета;
		КонецЕсли;
		
		Если НЕ Граница.СдвигВПериодах=0 Тогда
			
			НачальнаяДатаГраницы=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(НачальнаяДатаГраницы,Граница.ПериодСмещения,Граница.СдвигВПериодах);
			
		КонецЕсли;
		
		ПостроительОтчета.Параметры.Вставить(Граница.ИмяДатаГраницы,НачальнаяДатаГраницы);
		
	КонецЦикла;
	
	ПостроительОтчета.Выполнить();
	ТабИсточника=ПостроительОтчета.Результат.Выгрузить();
			
	Возврат ТабИсточника;
	
КонецФункции // ПолучитьДанныеИсточника()

// Добавляет в текст основного запроса соединение с дополнительным источником
//
// Параметры
// 	ИсточникДанных: обрабатываемый источник данных
//  СтруктураИзмерений: структура, содержащая необходимые измерения бюджетирования
//  СтруктураПараметров: структура, в которую записываются необходимые параметры запроса
//
Процедура ПрисоединитьДополнительныйИсточник(ИсточникДанных,СтруктураИзмерений,СтруктураПараметров,ИмяТаблицы,ТекстИсточника,СтруктураПоказатели)
	
	ПостроительИсточника=Новый ПостроительОтчета;
	
	ТекстЗапроса=СтрЗаменить(ИсточникДанных.ТекстЗапроса,",День,",",,");// Убираем детализацию по периодам
		
	СохраненнаяНастройка=ИсточникДанных.НастройкиПостроителя.Получить();
	
	Если ТипЗнч(СохраненнаяНастройка.НастройкиПостроителя)=Тип("НастройкиПостроителяОтчета") Тогда
		
		Для Каждого Параметр Из СохраненнаяНастройка.ПараметрыПостроителя Цикл
			СтруктураПараметров.Вставить(Параметр.Ключ+ИмяТаблицы,Параметр.Значение);
			ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"&"+Параметр.Ключ,"&"+Параметр.Ключ+ИмяТаблицы);
		КонецЦикла;
		
		Для Каждого Граница Из ИсточникДанных.ДатыОтбораДанныхИсточника Цикл
			
			Если Граница.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.ФиксированнаяДата Тогда
				НачальнаяДатаГраницы=Граница.ДатаНачальнойГраницыОтсчета;
			ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.НачалоПериода Тогда
				НачальнаяДатаГраницы=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ДатаРасчета,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий));
			ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.КонецПериода Тогда
				НачальнаяДатаГраницы=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ДатаРасчета,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий));
			КонецЕсли;
			
			Если НЕ Граница.СдвигВПериодах=0 Тогда
				
				НачальнаяДатаГраницы=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(НачальнаяДатаГраницы,Граница.ПериодСмещения,Граница.СдвигВПериодах);
				
			КонецЕсли;
			
			ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"&"+Граница.ИмяДатаГраницы,"&"+Граница.ИмяДатаГраницы+ИмяТаблицы);
			СтруктураПараметров.Вставить(Граница.ИмяДатаГраницы+ИмяТаблицы,НачальнаяДатаГраницы);
			
		КонецЦикла;
		
		ПостроительИсточника.Текст=ТекстЗапроса;
		
		Если ИсточникДанных.ПроизвольныйЗапрос Тогда
			ПостроительИсточника.ЗаполнитьНастройки();
		КонецЕсли;
		
		ПостроительИсточника.УстановитьНастройки(СохраненнаяНастройка.НастройкиПостроителя,Истина,Ложь,Истина,Истина);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ПостроительИсточника.ВыбранныеПоля.Очистить();
	ТекстСоединение="";
	
	// Добавим измерения и связи с основным источником
	Для Каждого СтрокаСвязь Из ИсточникДанных.ИзмеренияИсточника Цикл
		
		ИмяИзмерения=Строка(СтрокаСвязь.ИзмерениеБюджетирования);
		
		Если СтруктураИзмерений.Свойство(ИмяИзмерения) Тогда
			ПостроительИсточника.ВыбранныеПоля.Добавить(СтрокаСвязь.ПутьКДанным,ИмяИзмерения);
			ТекстСоединение=ТекстСоединение+" И
			|ОсновнойИсточник."+СтруктураИзмерений[ИмяИзмерения]+"="+ИмяТаблицы+"."+ИмяИзмерения;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИсточникДанных.ПроизвольныйЗапрос Тогда
		Для Каждого Показатель Из СтруктураПоказатели Цикл
			ПостроительИсточника.ВыбранныеПоля.Добавить(Показатель.Значение,Показатель.Значение);
		КонецЦикла;
	КонецЕсли;
	
	РабочийТекст=ПостроительИсточника.ПолучитьЗапрос().Текст;
	
	// Определим параметры отбора
	
	Индекс=1;
	Для Каждого СтрокаОтбора Из ПостроительИсточника.Отбор Цикл
		
		Если СтрокаОтбора.Использование=Истина Тогда
			
			Если СтрокаОтбора.ЗначениеС=Неопределено ИЛИ Не ЗначениеЗаполнено(СтрокаОтбора.ЗначениеС) Тогда
				РабочийТекст=СтрЗаменить(РабочийТекст,"Параметр"+Индекс,"Параметр_"+ИмяТаблицы+"_"+Индекс);
				СтруктураПараметров.Вставить("Параметр_"+ИмяТаблицы+"_"+Индекс,СтрокаОтбора.Значение);
				Индекс=Индекс+1;
			Иначе
				РабочийТекст=СтрЗаменить(РабочийТекст,"Параметр"+Индекс,"Параметр_"+ИмяТаблицы+"_"+Индекс);
				СтруктураПараметров.Вставить("Параметр_"+ИмяТаблицы+"_"+Индекс,СтрокаОтбора.ЗначениеС);
				Индекс=Индекс+1;
				РабочийТекст=СтрЗаменить(РабочийТекст,"Параметр"+Индекс,"Параметр_"+ИмяТаблицы+"_"+Индекс);
				СтруктураПараметров.Вставить("Параметр_"+ИмяТаблицы+"_"+Индекс,СтрокаОтбора.ЗначениеПо);
				Индекс=Индекс+1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстИсточника=ТекстИсточника+"
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|("+РабочийТекст+") КАК "+ИмяТаблицы;
	
	Если НЕ ТекстСоединение="" Тогда
		
		ТекстИсточника=ТекстИсточника+"
		|ПО "+Сред(ТекстСоединение,3);
		
	Иначе
		
		ТекстИсточника=ТекстИсточника+"
		|ПО ИСТИНА";
		
	КонецЕсли;
	
КонецПроцедуры // ПрисоединитьДополнительныйИсточник()

// Формирует таблицу для расчета в случае, когда основной источник не указан
// (таблица формируется на основании дополнительных источников)
// Параметры:
//	СтруктураДанные: структура, ключом которой служит код источника, 
		//а значением - структура, содержащая показатели источника,
//	использующиеся в формулах строки.
//
Функция ПолучитьДанныеДляРасчетаПоДополнительнымИсточникам(СтруктураДанные)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));
	
	// В таблицу будем записывать результаты запросов по источникам
	ТаблицаРасчета=Новый ТаблицаЗначений;
	
	Для Каждого СтрокаПоказатели Из Показатели Цикл
		
		Если (НЕ СтрокаПоказатели.КодИсточника="") И СтруктураДанные.Свойство(СтрокаПоказатели.КодИсточника) Тогда
			ТаблицаРасчета.Колонки.Добавить(СтрокаПоказатели.Код,ОписаниеТиповЧисло);
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДанные=ТаблицаРасчета.Добавить();
	
	Для Каждого ГруппаПоказателей Из СтруктураДанные Цикл
		
		СтрокаИсточник=ДополнительныеИсточникиДанных.Найти(ГруппаПоказателей.Ключ,"КодИсточника");
		
		Если Не СтрокаИсточник=Неопределено Тогда
			
			Если ТипЗнч(СтрокаИсточник.ИсточникДанных)=Тип("СправочникСсылка.фин_ИсточникиДанныхДляРасчетовБюджетирования") Тогда
				
				ТабИсходныеДанные = ПолучитьДанныеИсточника(СтрокаИсточник.ИсточникДанных,,,Новый Структура,);
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
			Если ТабИсходныеДанные.Количество()>0 Тогда
				
				Для Каждого Показатель Из ГруппаПоказателей.Значение Цикл
					
					СтрокаДанные[Показатель.Ключ]=ТабИсходныеДанные[0][Показатель.Значение];
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРасчета;
	
КонецФункции // ПолучитьДанныеДляРасчетаПоДополнительнымИсточникам()

// Анализирует формульную строку и определяет показатели и источники данных, необходимые для расчета
// Параметры
//	СтруктураДанных: структура, ключом которой является код источника, а значением - структура, содержащая показатели
//	источника, используемые в расчетах.
// 
Процедура ПолучитьСтруктуруДанных(СтруктураДанных,СтрокаФормула);
	
	КоличествоСимволов=СтрДлина(СтрокаФормула);

	Если КоличествоСимволов>0 Тогда

		ТекстАргумент="";
		НачалоАргумент=Ложь;

		Для Индекс=1 По КоличествоСимволов Цикл

			ТекСимвол=Сред(СтрокаФормула,Индекс,1);

			Если ТекСимвол="[" Тогда  // Формируем текст аргумента расчета
				
				НачалоАргумент=Истина;

			ИначеЕсли ТекСимвол="]" Тогда // Устанавливаем текст аргумента расчета

				СтрокаАргумент=Показатели.Найти(ТекстАргумент,"Код");
				
				Если Не СтрокаАргумент=Неопределено Тогда
					
					//Проверяем наличие источника в структуре данных
					
					Если СтрокаАргумент.КодИсточника="" Тогда	
						НачалоАргумент=Ложь;
						ТекстАргумент="";
						Продолжить;
					КонецЕсли;
					
					Если СтруктураДанных.Свойство(СтрокаАргумент.КодИсточника) Тогда
						
						СтруктураПоказатели=СтруктураДанных[СтрокаАргумент.КодИсточника];
						
						Если НЕ СтруктураПоказатели.Свойство(ТекстАргумент) Тогда
							
							СтруктураПоказатели.Вставить(ТекстАргумент,СтрокаАргумент.Имя);
							
						КонецЕсли;
						
					Иначе
						
						СтруктураПоказатели=Новый Структура;
						СтруктураПоказатели.Вставить(ТекстАргумент,СтрокаАргумент.Имя);
						
						СтруктураДанных.Вставить(СтрокаАргумент.КодИсточника,СтруктураПоказатели);
						
					КонецЕсли;
					
				КонецЕсли;						
				
                НачалоАргумент=Ложь;
				ТекстАргумент="";

			Иначе
				
				Если НачалоАргумент Тогда
					ТекстАргумент=ТекстАргумент+ТекСимвол;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСтруктуруДанных()

// Возвращает таблицу с данными, сформированную по настройкам таблицы "Источники данных"
//
Функция ПолучитьДанныеДляРасчетаПоИсточнику(СтруктураДанные,СтруктураИзмеренийРасчет)
		 	
	ПостроительОтчета=Новый ПостроительОтчета;
	СтруктураПараметров=Новый Структура;
	
	ТекстЗапроса=СтрЗаменить(ОсновнойИсточникДанных.ТекстЗапроса,",День,",",,");// Убираем детализацию по периодам
	
	СохраненнаяНастройка=ОсновнойИсточникДанных.НастройкиПостроителя.Получить();
	
	Если ТипЗнч(СохраненнаяНастройка.НастройкиПостроителя)=Тип("НастройкиПостроителяОтчета") Тогда
		
		Для Каждого Параметр Из СохраненнаяНастройка.ПараметрыПостроителя Цикл
			СтруктураПараметров.Вставить(Параметр.Ключ+"ОсновнойИсточник",Параметр.Значение);
			ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"&"+Параметр.Ключ,"&"+Параметр.Ключ+"ОсновнойИсточник");
		КонецЦикла;
		
		Для Каждого Граница Из ОсновнойИсточникДанных.ДатыОтбораДанныхИсточника Цикл
			
			Если Граница.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.ФиксированнаяДата Тогда
				НачальнаяДатаГраницы=Граница.ДатаНачальнойГраницыОтсчета;
			ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.НачалоПериода Тогда
				НачальнаяДатаГраницы=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ДатаРасчета,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий));
			ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.фин_ВидыГраницОтбораИсточникаПланирования.КонецПериода Тогда
				НачальнаяДатаГраницы=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ДатаРасчета,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий));
			КонецЕсли;
			
			Если НЕ Граница.СдвигВПериодах=0 Тогда
				
				НачальнаяДатаГраницы=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(НачальнаяДатаГраницы,Граница.ПериодСмещения,Граница.СдвигВПериодах);
				
			КонецЕсли;
			
			ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"&"+Граница.ИмяДатаГраницы,"&"+Граница.ИмяДатаГраницы+"ОсновнойИсточник");
			СтруктураПараметров.Вставить(Граница.ИмяДатаГраницы+"ОсновнойИсточник",НачальнаяДатаГраницы);
			
		КонецЦикла;
		
		ПостроительОтчета.Текст=ТекстЗапроса;
		ПостроительОтчета.УстановитьНастройки(СохраненнаяНастройка.НастройкиПостроителя,Истина,Ложь,Истина,Истина);
	Иначе
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;


	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям") Тогда
	    СтрокиИзмерениеОрганизация = ОсновнойИсточникДанных.ИзмеренияИсточника.НайтиСтроки(Новый Структура("ИзмерениеБюджетирования",Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация));
		Если СтрокиИзмерениеОрганизация.Количество() <> 0 Тогда
			ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(СтрокиИзмерениеОрганизация[0].ПутьКДанным);
			ЭлементОтбора.ВидСравнения 		= ВидСравнения.Равно;
			ЭлементОтбора.Значение 			= Организация;
			ЭлементОтбора.Использование 	= Истина;
		КонецЕсли;
	КонецЕсли;
    СтрокиИзмерениеСценарий = ОсновнойИсточникДанных.ИзмеренияИсточника.НайтиСтроки(Новый Структура("ИзмерениеБюджетирования",Перечисления.фин_ФактическиеПоказателиБюджетирования.Сценарий));
	Если СтрокиИзмерениеСценарий.Количество() <> 0 Тогда
		ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(СтрокиИзмерениеСценарий[0].ПутьКДанным);
		ЭлементОтбора.ВидСравнения 		= ВидСравнения.Равно;
		ЭлементОтбора.Значение 			= СценарийКонтекстаРасчета;
		ЭлементОтбора.Использование 	= Истина;
	КонецЕсли;
	
	ПостроительОтчета.ВыбранныеПоля.Очистить();
	СтруктураИзмерений=Новый Структура;
	
	Для Каждого СтрокаСвязь Из ОсновнойИсточникДанных.ИзмеренияИсточника Цикл
		ИмяИзмерения=фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СтрокаСвязь.ИзмерениеБюджетирования);
		Если СтруктураИзмеренийРасчет.Свойство(ИмяИзмерения) Тогда
			ПостроительОтчета.ВыбранныеПоля.Добавить(СтрокаСвязь.ПутьКДанным,ИмяИзмерения);
			СтруктураИзмерений.Вставить(ИмяИзмерения,СтрокаСвязь.ПутьКДанным);
		КонецЕсли;
	КонецЦикла;
	
	ЗапросПостроителя = ПостроительОтчета.ПолучитьЗапрос();
	РабочийТекст=ЗапросПостроителя.Текст;

	// Определим параметры отбора
	Индекс=1;
	Для Каждого СтрокаОтбора Из ПостроительОтчета.Отбор Цикл
		
		Если СтрокаОтбора.Использование=Истина Тогда
			
			Если СтрокаОтбора.ЗначениеС=Неопределено ИЛИ НЕ ЗначениеЗаполнено(СтрокаОтбора.ЗначениеС) Тогда
				РабочийТекст=СтрЗаменить(РабочийТекст,"Параметр"+Индекс,"Параметр_ОсновнойИсточник_"+Индекс);
				СтруктураПараметров.Вставить("Параметр_ОсновнойИсточник_"+Индекс,СтрокаОтбора.Значение);
				Индекс=Индекс+1;
			Иначе
				РабочийТекст=СтрЗаменить(РабочийТекст,"Параметр"+Индекс,"Параметр_ОсновнойИсточник_"+Индекс);
				СтруктураПараметров.Вставить("Параметр_ОсновнойИсточник_"+Индекс,СтрокаОтбора.ЗначениеС);
				Индекс=Индекс+1;
				РабочийТекст=СтрЗаменить(РабочийТекст,"Параметр"+Индекс,"Параметр_ОсновнойИсточник_"+Индекс);
				СтруктураПараметров.Вставить("Параметр_ОсновнойИсточник_"+Индекс,СтрокаОтбора.ЗначениеПо);
				Индекс=Индекс+1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	Для Индекс = ПостроительОтчета.Отбор.Количество()+1 По ЗапросПостроителя.Параметры.Количество()  Цикл
		
		Если СтрокаОтбора.Использование=Истина Тогда
			
			РабочийТекст=СтрЗаменить(РабочийТекст,"Параметр"+Индекс,"Параметр_ОсновнойИсточник_"+Индекс);
			СтруктураПараметров.Вставить("Параметр_ОсновнойИсточник_"+Индекс,ЗапросПостроителя.Параметры["Параметр"+Индекс]);
			Индекс=Индекс+1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Разбираем текст запроса по секциям
	
	ТекущийТекст=Новый ТекстовыйДокумент;
	ТекущийТекст.УстановитьТекст(РабочийТекст);
	
	ТекстРасчет="";
	ТекстУсловие="";
	ТекстИсточник="";
	ТекстГруппировка="";
	
	ЕстьУсловие=Ложь;
	ЕстьИсточник=Ложь;
	ЕстьГруппировка=Ложь;
	
	Для Индекс=1 По ТекущийТекст.КоличествоСтрок() Цикл
		
		СтрокаЗапроса=ТекущийТекст.ПолучитьСтроку(Индекс);
		
		Если Врег(СокрЛП(СтрокаЗапроса))="ИЗ" Тогда
			ЕстьИсточник=Истина;
		ИначеЕсли Врег(СокрЛП(СтрокаЗапроса))="ГДЕ" Тогда
			ЕстьУсловие=Истина;
			ЕстьИсточник=Ложь;
		ИначеЕсли Врег(СокрЛП(СтрокаЗапроса))="СГРУППИРОВАТЬ ПО" Тогда
			ЕстьГруппировка=Истина;
			ЕстьУсловие=Ложь;
			ЕстьИсточник=Ложь;
		КонецЕсли;
		
		Если ЕстьИсточник Тогда
			ТекстИсточник=ТекстИсточник+"
			|"+СтрокаЗапроса;
		ИначеЕсли ЕстьУсловие Тогда
			ТекстУсловие=ТекстУсловие+"
			|"+СтрокаЗапроса;
		ИначеЕсли ЕстьГруппировка Тогда
			ТекстГруппировка=ТекстГруппировка+"
			|"+СтрокаЗапроса;
		Иначе
			ТекстРасчет=ТекстРасчет+"
			|"+СтрокаЗапроса;
		КонецЕсли;	
			
	КонецЦикла;
				
	ТекстДополнение="";
	ТекстСоединение="";
	
	Для Каждого Аргумент Из СтруктураДанные Цикл
		
		Если НЕ Аргумент.Ключ=КодОсновногоИсточника Тогда
			
			СтрокаИсточник=ДополнительныеИсточникиДанных.Найти(Аргумент.Ключ,"КодИсточника");
			
			Если ТипЗнч(СтрокаИсточник.ИсточникДанных)=Тип("СправочникСсылка.фин_ИсточникиДанныхДляРасчетовБюджетирования") Тогда
				
				ПрисоединитьДополнительныйИсточник(СтрокаИсточник.ИсточникДанных,СтруктураИзмерений,СтруктураПараметров,Аргумент.Ключ,ТекстСоединение,Аргумент.Значение);
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
				
			Для Каждого Показатель Из Аргумент.Значение Цикл
				
				ТекстДополнение=ТекстДополнение+",
				|СУММА(ВЫБОР
				|		КОГДА НЕ "+Аргумент.Ключ+"."+Показатель.Значение+" ЕСТЬ NULL 
				|		ТОГДА "+Аргумент.Ключ+"."+Показатель.Значение+"
				|		ИНАЧЕ 0 КОНЕЦ) КАК "+Показатель.Ключ;
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого Показатель Из Аргумент.Значение Цикл
				
				ТекстРасчет=СтрЗаменить(ТекстРасчет,"КАК "+Показатель.Значение,"КАК "+Показатель.Ключ);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ТекстДополнение="" Тогда
	
		ТекстРасчет=ТекстРасчет+",
		|"+Сред(ТекстДополнение,2);
		
	КонецЕсли;
		
	ТекстРасчет=СтрЗаменить(ТекстРасчет,"ТаблицаРегистра","ОсновнойИсточник");
	ТекстИсточник=СтрЗаменить(ТекстИсточник,"ТаблицаРегистра","ОсновнойИсточник");
    ТекстУсловие=СтрЗаменить(ТекстУсловие,"ТаблицаРегистра","ОсновнойИсточник");
	ТекстГруппировка=СтрЗаменить(ТекстГруппировка,"ТаблицаРегистра","ОсновнойИсточник");
	
	Запрос=Новый Запрос;
	Запрос.Текст=ТекстРасчет+ТекстИсточник+ТекстСоединение+ТекстУсловие+ТекстГруппировка;
	
	Для Каждого Параметр Из СтруктураПараметров Цикл
		УстанавливаемоеЗначение = Параметр.Значение;
		Если УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.ДокументРегистратор Тогда
			УстанавливаемоеЗначение = ДокументРасчета;
		ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.НачалоПлановогоПериода Тогда
			УстанавливаемоеЗначение = ДатаРасчета;
		ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.ОкончаниеПлановогоПериода Тогда
			УстанавливаемоеЗначение = ГраницаПериодаРасчета;
		ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.Организация Тогда
			УстанавливаемоеЗначение = Организация;
		ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.СценарийРасчета Тогда
			УстанавливаемоеЗначение = СценарийКонтекстаРасчета;
		ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.ПроектРасчета Тогда
			УстанавливаемоеЗначение = ДокументРасчета.Проект;
		ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.ПодразделениеРасчета Тогда
			УстанавливаемоеЗначение = ДокументРасчета.УправленческоеПодразделение;
		ИначеЕсли УстанавливаемоеЗначение = Перечисления.фин_ПередаваемыеПараметрыИсточниковДанныхПриРасчетеМоделей.ДатаРасчета Тогда
			УстанавливаемоеЗначение = ДокументРасчета.Дата;
		КонецЕсли;
		Запрос.УстановитьПараметр(Параметр.Ключ,УстанавливаемоеЗначение);
	КонецЦикла;
	
	ТабРезультат=Запрос.Выполнить().Выгрузить();
	
	Возврат ТабРезультат;
			
КонецФункции // ПолучитьДанныеДляРасчетаПоИсточнику()

// Формирует таблицу бюджетных операций на основании реквизитов документа
//
// Параметры: нет
//
Процедура ВыполнитьРасчет(СтруктураТаблицы=Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаРасчета) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана дата расчета!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодОсновногоИсточника) Тогда // Данные, введенные вручную
		КодОсновногоИсточника="РучнойВвод";
	КонецЕсли;
			
	РасчетыПоМоделям.Очистить();
	
	Для Каждого СтрокаРасчет Из ОборотыПоСтатьямБюджетов Цикл
		
		Если РассчитываемыеСтатьи.НайтиПоЗначению(СтрокаРасчет.ФинансовыйПоказатель)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВыполненногоРасчета = ТаблицаВыполненныхРасчетов.Добавить();
		СтрокаВыполненногоРасчета.Модель = НаименованиеМодели;
		СтрокаВыполненногоРасчета.Расчет = СтрокаРасчет.ИмяРасчета;
		СтрокаВыполненногоРасчета.Период = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(ДатаРасчета,Строка(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(СценарийКонтекстаРасчета)));
		СтрокаВыполненногоРасчета.Дата 	 = ДатаРасчета;
		
		НомерСтрокиРасчет=ОборотыПоСтатьямБюджетов.Индекс(СтрокаРасчет)+1;
		
		Если СтрокаРасчет.ФинансовыйПоказатель.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке расчета "+НомерСтрокиРасчет+" не указан Финансовый показатель!");
			Продолжить;
		КонецЕсли;
		
		Если ((СтрокаРасчет.ВидИзмененияВалюта=Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ФиксированноеЗначение 
			И НЕ ЗначениеЗаполнено(СтрокаРасчет.ЗначениеИзмененияВалюта)) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасчет.ВидИзмененияВалюта))
			И СтрокаРасчет.ФинансовыйПоказатель.УчетПоСумме Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке расчета "+НомерСтрокиРасчет+" не указана валюта транзакции!");
			Продолжить;
		КонецЕсли;
		
		// Формируем структуру необходимых для расчета измерений бюджетирования
		СтруктураИзмеренийРасчет=Новый Структура;
		СтруктураИзмеренийРасчет.Вставить("Сценарий");
		СтруктураИзмеренийРасчет.Вставить("ФинансовыйПоказатель");
		
		СтруктураРазрезов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов");
		Для Каждого РазрезЭлемент Из СтруктураРазрезов Цикл
			ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
			Если СтрокаРасчет["ВидИзменения"+ИмяРазреза]=Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ПоИсточникуДанныхРасчета Тогда
				СтруктураИзмеренийРасчет.Вставить(ИмяРазреза);
			КонецЕсли;
		КонецЦикла;
		// определим поля для кор. аналитики
		Если СтрокаРасчет.ФормироватьПроводки Тогда
			Если НЕ (ЗначениеЗаполнено(СтрокаРасчет.СчетДт) И ЗначениеЗаполнено(СтрокаРасчет.СчетКт) И ЗначениеЗаполнено(СтрокаРасчет.СторонаПроводкиКор)) Тогда
				СтрокаРасчет.ФормироватьПроводки = Ложь;
			Иначе
				КорСчет = ?(СтрокаРасчет.СторонаПроводкиКор=Перечисления.фин_СтороныПроводки.Дт,СтрокаРасчет.СчетДт,СтрокаРасчет.СчетКт);
				Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.фин_КорреспондирующиеПоказателиБюджетирования.ЗначенияПеречисления Цикл
					Если ОсновнойИсточникДанных.ИзмеренияИсточника.НайтиСтроки(Новый Структура("ИзмерениеБюджетирования",Перечисления.фин_КорреспондирующиеПоказателиБюджетирования[ЗначениеПеречисления.Имя])).Количество()<>0
						И КорСчет.ВидыСубконто.Найти(фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Перечисления.фин_ФактическиеПоказателиБюджетирования[Сред(ЗначениеПеречисления.Имя,1,Найти(ЗначениеПеречисления.Имя,"Кор")-1)],КЭШ_Разрезы))<>Неопределено Тогда
						СтруктураИзмеренийРасчет.Вставить(ЗначениеПеречисления.Имя);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаРасчет.ВидИзмененияВалюта=Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ПоИсточникуДанныхРасчета Тогда
			СтруктураИзмеренийРасчет.Вставить("Валюта");
		КонецЕсли;
		Если СтрокаРасчет.ПериодИзИсточника Тогда
			СтруктураИзмеренийРасчет.Вставить("ПериодПланирования");
		КонецЕсли;
		
		//Формируем структуру данных для расчета	
		СтруктураДанные=Новый Структура;
		ПолучитьСтруктуруДанных(СтруктураДанные,СтрокаРасчет.ФормулаКоличество);
		ПолучитьСтруктуруДанных(СтруктураДанные,СтрокаРасчет.ФормулаСумма);
		
		Если ОсновнойИсточникДанных.Пустая() Тогда
			
			  ТаблицаРасчета=ПолучитьДанныеДляРасчетаПоДополнительнымИсточникам(СтруктураДанные);
		
		Иначе
			
			Если ОсновнойИсточникДанных.ПроизвольныйЗапрос Тогда
				
				ТаблицаРасчета=ПолучитьДанныеИсточника(ОсновнойИсточникДанных,,,СтруктураИзмеренийРасчет,СтруктураДанные);
				Если СтруктураДанные.Свойство(КодОсновногоИсточника) Тогда
					Для Каждого Показатель Из СтруктураДанные[КодОсновногоИсточника] Цикл
						ТаблицаРасчета.Колонки[Показатель.Значение].Имя=Показатель.Ключ;
					КонецЦикла;
				КонецЕсли;
				
				
			Иначе
				
				ТаблицаРасчета=ПолучитьДанныеДляРасчетаПоИсточнику(СтруктураДанные,СтруктураИзмеренийРасчет);
				
			КонецЕсли;
			
			Для Каждого СтрокаИзмерениеРасчет Из СтруктураИзмеренийРасчет Цикл
				
				Если ТаблицаРасчета.Колонки.Найти(СтрокаИзмерениеРасчет.Ключ)=Неопределено Тогда
					
					НайденоИзмерение=Ложь;
					
					Для Каждого СтрокаИзмерение Из ОсновнойИсточникДанных.ИзмеренияИсточника Цикл
						Если фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СтрокаИзмерение.ИзмерениеБюджетирования)= СтрокаИзмерениеРасчет.Ключ И 
							(НЕ ТаблицаРасчета.Колонки.Найти(СтрокаИзмерение.ИмяПоляИсточника)=Неопределено) Тогда
							
							ТаблицаРасчета.Колонки[СтрокаИзмерение.ИмяПоляИсточника].Имя=СтрокаИзмерениеРасчет.Ключ;
							НайденоИзмерение=Истина;
							
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если(НЕ НайденоИзмерение) И СтрокаИзмерениеРасчет.Ключ <>"ФинансовыйПоказатель" Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Строка "+НомерСтрокиРасчет+" в таблице источника не найдено измерение "+СтрокаИзмерениеРасчет.Ключ);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		мТаблицаРасчета = ?(ТаблицаРасчета.Колонки.Найти("ФинансовыйПоказатель")=Неопределено,ТаблицаРасчета.Скопировать(),ТаблицаРасчета.Скопировать(Новый Структура("ФинансовыйПоказатель",СтрокаРасчет.ФинансовыйПоказатель)));
		СформироватьОперации(СтрокаРасчет,мТаблицаРасчета,НомерСтрокиРасчет, СтруктураИзмеренийРасчет);
		
		Если СтруктураТаблицы<>Неопределено Тогда
			СтруктураТаблицы.Вставить("Наименование",СтрокаРасчет.ИмяРасчета);
			СтруктураТаблицы.Вставить("ПолныеИсходныеДанные",ТаблицаРасчета.Скопировать());
			СтруктураТаблицы.Вставить("ИсходныеДанные",мТаблицаРасчета.Скопировать());
			СтруктураТаблицы.Вставить("ДанныеДокумента",РасчетыПоМоделям.Выгрузить());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьРасчет()

// Дополняет таблицу операций строками, рассчитанными по профилям изменений по измерениям
//
// Параметры
//  ТабОперации: 		таблица значений  – формируемая таблица операций
//  ВидИзменения: 		Перечисления.фин_ВидыИзмененияПлановПоИзмерениям - вид изменения по профилю 
//  ЗначениеИзменения: 	СправочникСсылка.фин_ПрофилиИзмененияПлановПоИзмерениям - настроенные правила распределения
//  ИмяКолонки: 		Строка - имя колонки таблицы операций, для которой настраивается аналитика
//  НомерСтроки:		Число - номер строки ТЧ "ОборотыПоСтатьямБюджетов"
//  ИзмерениеБюджетирования: Перечисление.УдалитьИзмеренияБюджетирования - измерение, по которому выполняется распределение 
//
Процедура ИзмеренияПоПрофилю(ТабОперации,ВидИзменения,ЗначениеИзменения,ИзмерениеБюджетирования,НомерСтроки)
	
	ИмяКолонки=фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ИзмерениеБюджетирования);
	Если ИмяКолонки="Валюта" Тогда
		ИмяКолонки="ВалютаОперации";
	КонецЕсли;
	КопияТабОперации=ТабОперации.Скопировать();
	
	// Колонки, которые не должны копироваться из обрабатываемой строки
	СтруктураИсключаемыхКолонок=Новый Структура;
	СтруктураИсключаемыхКолонок.Вставить(ИмяКолонки);
	СтруктураИсключаемыхКолонок.Вставить("Количество");
	СтруктураИсключаемыхКолонок.Вставить("Сумма");
	СтруктураИсключаемыхКолонок.Вставить("НомерСтроки");
	
	ЕстьРаспределение=Ложь;
	
	Если (ВидИзменения=Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ПоПрофилю_Распределение
		ИЛИ ВидИзменения=Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ПоПрофилю_Умножение) Тогда
		
		Если (НЕ (ТипЗнч(ЗначениеИзменения)=Тип("СправочникСсылка.фин_ПрофилиИзмененияПлановПоИзмерениям")))
			ИЛИ (НЕ ЗначениеИзменения.ИзмерениеБюджетирования=ИзмерениеБюджетирования) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Некорректно указан профиль изменения по измерениям");
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеИзменения) Тогда
			
			Для Каждого ТекущаяОперация Из КопияТабОперации Цикл
				
				Если ЗначениеИзменения.ВидРаспределения=Перечисления.фин_ВидыРаспределенийПоИзмерениямБюджетирования.Фиксированное Тогда
					
					ЭлементыДляРаспределения = ЗначениеИзменения.ЭлементыДляРаспределения.Выгрузить();
					СпособУказанияБазы = ЗначениеИзменения.СпособУказанияБазы;
					ИтогДолей = ЭлементыДляРаспределения.Итог("ПроцентДляРаспределения");
					
					РаспределяемоеКоличество 	= ТекущаяОперация.Количество;
					РаспределяемаяСумма 		= ТекущаяОперация.Сумма;
					
					
					Для Каждого Элемент Из ЭлементыДляРаспределения Цикл
						
						ЕстьРаспределение=Истина;
						
						НоваяОперация=ТабОперации.Добавить();
						
						Для Каждого Колонка Из ТабОперации.Колонки Цикл
							
							Если НЕ СтруктураИсключаемыхКолонок.Свойство(Колонка.Имя) Тогда			
								НоваяОперация[Колонка.Имя] = ТекущаяОперация[Колонка.Имя];
							КонецЕсли;
							
						КонецЦикла;
						
						//Коэффициент = ?(СпособУказанияБазы = Перечисления.фин_СпособыУказанияБазы.Доля,?(ИтогДолей=0,0,Элемент.ПроцентДляРаспределения/ИтогДолей),Элемент.ПроцентДляРаспределения/100);
						//
						Если ВидИзменения=Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ПоПрофилю_Умножение Тогда
							
							Если СпособУказанияБазы = Перечисления.фин_СпособыУказанияБазы.Доля	Тогда
								Коэффициент=Элемент.ПроцентДляРаспределения;
							Иначе
								Коэффициент=Элемент.ПроцентДляРаспределения/100;
							КонецЕсли;
							
						Иначе
							
							Если СпособУказанияБазы = Перечисления.фин_СпособыУказанияБазы.Процент	Тогда
								
								Коэффициент=Элемент.ПроцентДляРаспределения/100;
								
							ИначеЕсли ИтогДолей<>0 Тогда
								
								Коэффициент=Элемент.ПроцентДляРаспределения/ИтогДолей;
								
							Иначе
								
								Коэффициент=0;
								
							КонецЕсли;
							
						КонецЕсли;
						
						НоваяОперация[ИмяКолонки]	= Элемент.ЭлементУправленческойАналитики;
						НоваяОперация.Количество	= ТекущаяОперация.Количество * Коэффициент;
						РаспределяемоеКоличество 	= РаспределяемоеКоличество - НоваяОперация.Количество;
						НоваяОперация.Сумма			= ТекущаяОперация.Сумма * Коэффициент;
						РаспределяемаяСумма 		= РаспределяемаяСумма - НоваяОперация.Сумма;
						
						Если ЭлементыДляРаспределения.Индекс(Элемент)=ЭлементыДляРаспределения.Количество()-1 И ВидИзменения=Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ПоПрофилю_Распределение
							И (СпособУказанияБазы = Перечисления.фин_СпособыУказанияБазы.Доля ИЛИ ИтогДолей=100) Тогда
							НоваяОперация.Количество	= НоваяОперация.Количество + РаспределяемоеКоличество;
							НоваяОперация.Сумма			= НоваяОперация.Сумма + РаспределяемаяСумма;
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					ПоказательРаспределения=ЗначениеИзменения.ПоказательИсточника;
					СпособУказанияБазы = ЗначениеИзменения.СпособУказанияБазы;
					
					Если НЕ ЗначениеИзменения.ПоВсемЭлементам Тогда
						
						СписокФильтра=Новый СписокЗначений;
						СписокФильтра.ЗагрузитьЗначения(ЗначениеИзменения.ЭлементыДляРаспределения.ВыгрузитьКолонку("ЭлементУправленческойАналитики"));
						
					КонецЕсли;
					
					// Структура выбранных полей источника
					СтруктураИзмеренийРасчет=Новый Структура;
					СтруктураИзмеренийРасчет.Вставить(ИмяКолонки,ИмяКолонки);
					
					СтруктураПоказатели=Новый Структура;
					СтруктураПоказатели.Вставить(ПоказательРаспределения,ПоказательРаспределения);
					
					СтруктураДанные=Новый Структура;
					СтруктураДанные.Вставить(КодОсновногоИсточника,СтруктураПоказатели);
					
					ТабДляРаспределения = ПолучитьДанныеИсточника(ЗначениеИзменения.ИсточникДанных, СписокФильтра,ИзмерениеБюджетирования, СтруктураИзмеренийРасчет,СтруктураДанные);
					
					Если ТипЗнч(ТабДляРаспределения) <> Тип("ТаблицаЗначений") Тогда
						Возврат;
					КонецЕсли; 
					
					Если ТабДляРаспределения.Колонки.Найти(ИмяКолонки)=Неопределено Тогда
						
						НайденоИзмерение=Ложь;
						
						Для Каждого СтрокаИзмерение Из ЗначениеИзменения.ИсточникДанных.ИзмеренияИсточника Цикл
							Если Строка(СтрокаИзмерение.ИзмерениеБюджетирования)= ИмяКолонки И 
								(НЕ ТабДляРаспределения.Колонки.Найти(СтрокаИзмерение.ИмяПоляИсточника)=Неопределено) Тогда
								
								ТабДляРаспределения.Колонки[СтрокаИзмерение.ИмяПоляИсточника].Имя=ИмяКолонки;
								НайденоИзмерение=Истина;
								
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если ТабДляРаспределения.Колонки.Найти(ПоказательРаспределения)=Неопределено ИЛИ Не НайденоИзмерение   Тогда 
												
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Проверьте настройку профиля "+ЗначениеИзменения);
							Возврат;
						
						КонецЕсли;
						
					КонецЕсли;					
					
					СуммаВсего=ТабДляРаспределения.Итог(ПоказательРаспределения);
					РаспределяемоеКоличество 	= ТекущаяОперация.Количество;
					РаспределяемаяСумма 		= ТекущаяОперация.Сумма;
					
					Для Каждого СтрокаДанных Из ТабДляРаспределения Цикл
						
						ЕстьРаспределение=Истина;
						
						НоваяОперация=ТабОперации.Добавить();
						
						Для Каждого Колонка Из ТабОперации.Колонки Цикл
							
							Если НЕ СтруктураИсключаемыхКолонок.Свойство(Колонка.Имя) Тогда			
								НоваяОперация[Колонка.Имя] = ТекущаяОперация[Колонка.Имя];
							КонецЕсли;
							
						КонецЦикла;
						
						Если ВидИзменения=Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ПоПрофилю_Умножение Тогда
							
							Если СпособУказанияБазы = Перечисления.фин_СпособыУказанияБазы.Доля	Тогда
								Коэффициент=СтрокаДанных[ПоказательРаспределения];
							Иначе
								Коэффициент=СтрокаДанных[ПоказательРаспределения]/100;
							КонецЕсли;
							
						Иначе
							
							Если СпособУказанияБазы = Перечисления.фин_СпособыУказанияБазы.Процент	Тогда
								
								Коэффициент=СтрокаДанных[ПоказательРаспределения]/100;
								
							ИначеЕсли СуммаВсего<>0 Тогда
								
								Коэффициент=СтрокаДанных[ПоказательРаспределения]/СуммаВсего;
								
							Иначе
								
								Коэффициент=0;
								
							КонецЕсли;
							
						КонецЕсли;
						
						НоваяОперация[ИмяКолонки]	= СтрокаДанных[ИмяКолонки];
						НоваяОперация.Количество	= ТекущаяОперация.Количество*Коэффициент;
						НоваяОперация.Сумма			= ТекущаяОперация.Сумма*Коэффициент;
						
						РаспределяемоеКоличество 	= РаспределяемоеКоличество - НоваяОперация.Количество;
						РаспределяемаяСумма 		= РаспределяемаяСумма - НоваяОперация.Сумма;
						
						Если ТабДляРаспределения.Индекс(СтрокаДанных)=ТабДляРаспределения.Количество()-1 И ВидИзменения=Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ПоПрофилю_Распределение
							И (СпособУказанияБазы = Перечисления.фин_СпособыУказанияБазы.Доля ИЛИ СуммаВсего=100) Тогда
							НоваяОперация.Количество	= НоваяОперация.Количество + РаспределяемоеКоличество;
							НоваяОперация.Сумма			= НоваяОперация.Сумма + РаспределяемаяСумма;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если ЕстьРаспределение Тогда
					
					ТабОперации.Удалить(0); //Строка таблицы операций, по которой строится распределение,
					//всегда первая.
					
				КонецЕсли;
				
			КонецЦикла;		
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Строка "+НомерСтроки+": не указан профиль изменения. Операция не выполнена!");
			Возврат;
			
		КонецЕсли;
		
		Если НЕ ЕстьРаспределение Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для измерения "+Строка(ИзмерениеБюджетирования)+": распределение не произведено");
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ИзмеренияПоПрофилю()

// Дополняет таблицу операций строками, рассчитанными по профилям изменений по периодам
//
// Параметры
//  ТабОперации: 		таблица значений  – формируемая таблица операций 
//  ЗначениеИзменения: 	СправочникСсылка.фин_ПрофилиИзмененияПлановПоПериодам - настроенные правила распределения
//                      по периодам
//
Процедура ПериодыПоПрофилю(ТабОперации,ЗначениеИзменения)
	
	ПериодСмещения=ЗначениеИзменения.ПериодСмещения;
	ПериодПланирования=фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий);
	КопияТабОперации=ТабОперации.Скопировать();	
	ВидПрофиля = ЗначениеИзменения.ВидПрофиля;
	ПериодЦикла=ЗначениеИзменения.ПериодЦикла;
	
	СуммаКоэффициентов = ЗначениеИзменения.ПрофильИзменения.Итог("Коэффициент");
	Для Каждого ТекущаяОперация Из КопияТабОперации Цикл
		
		СтруктураРазрезов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовСтатьи(ТекущаяОперация.ФинансовыйПоказатель);
		СписокИменРазрезов = Новый Массив;
		Для Каждого Разрез Из СтруктураРазрезов Цикл
			СписокИменРазрезов.Добавить(фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(Разрез.Значение));
		КонецЦикла;
		
		КоличествоНераспределенное 	= ТекущаяОперация.Количество;
		СуммаНераспределенная 		= ТекущаяОперация.Сумма;
		
		Для Каждого Элемент Из ЗначениеИзменения.ПрофильИзменения Цикл
			
			НоваяОперация=ТабОперации.Добавить();
			
			НоваяОперация.ФинансовыйПоказатель	= ТекущаяОперация.ФинансовыйПоказатель;
			НоваяОперация.ВалютаОперации		= ТекущаяОперация.ВалютаОперации;
			Для Каждого ИмяРазреза Из СписокИменРазрезов Цикл
				НоваяОперация[ИмяРазреза]	= ТекущаяОперация[ИмяРазреза];
			КонецЦикла;
						
			Если ВидПрофиля = Перечисления.фин_ВидыПрофилейИзмененияПоПериодам.Периодический Тогда
				ДатаПериодаЦикла = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ТекущаяОперация.ПериодПланирования,ПериодЦикла);
				НоваяОперация.ПериодПланирования	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(ДатаПериодаЦикла,ПериодСмещения,Элемент.НомерПериода),ПериодПланирования);
			Иначе
				НоваяОперация.ПериодПланирования	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(ТекущаяОперация.ПериодПланирования,ПериодСмещения,Элемент.НомерПериода),ПериодПланирования);
			КонецЕсли;
			НоваяОперация.Количество			= ТекущаяОперация.Количество*?(СуммаКоэффициентов=0,0,Элемент.Коэффициент/СуммаКоэффициентов);
			КоличествоНераспределенное 			= КоличествоНераспределенное - НоваяОперация.Количество;
			НоваяОперация.Сумма					= ТекущаяОперация.Сумма*?(СуммаКоэффициентов=0,0,Элемент.Коэффициент/СуммаКоэффициентов);
			СуммаНераспределенная 				= СуммаНераспределенная - НоваяОперация.Сумма;
			
			Если Элемент = ЗначениеИзменения.ПрофильИзменения[ЗначениеИзменения.ПрофильИзменения.Количество()-1] Тогда
				НоваяОперация.Количество		= НоваяОперация.Количество + КоличествоНераспределенное;
				НоваяОперация.Сумма				= НоваяОперация.Сумма + СуммаНераспределенная;
			КонецЕсли;
			
		КонецЦикла;
		
		ТабОперации.Удалить(0); //Строка таблицы операций, по которой строится распределение,
								//всегда первая.
		
	КонецЦикла;
	
КонецПроцедуры // ПериодыПоПрофилю() 

// Заполняет колонку переданной таблицы фиксированными значениями
//
// Параметры
//  ТабОперации: 		таблица значений  – формируемая таблица операций
//  ВидИзменения: 		Перечисления.фин_ВидыИзмененияПлановПоИзмерениям - способ заполнения колонки 
//  ЗначениеИзменения: 	Фиксированное значение для заполнения
//  ИмяКолонки: 		Строка - имя колонки таблицы операций, которую нужно заполнить.
//
Процедура ЗаполнитьФиксированныеЗначения(ТабОперации,ВидИзменения,ЗначениеИзменения,ИмяКолонки)
	
	Если ВидИзменения=Перечисления.фин_ВидыИзмененияПлановПоИзмерениям.ФиксированноеЗначение Тогда
		ТабОперации.ЗаполнитьЗначения(ЗначениеИзменения,ИмяКолонки);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьФиксированныеЗначения()

// Формирует бюджетные операции по переданным исходным данным
//
// Параметры
//  ТабИсходныеДанные: таблица значений, содержащая исходные данные для расчета
//                 <продолжение описания параметра>
//
Процедура СформироватьОперации(Оборот,РабочиеДанные,НомерСтрокиРасчет, СтруктураИзмеренийРасчет)
		
	// Заполняем движения , рассчитываемые по профилям изменений по периодам
	Если Оборот.ПериодИзИсточника И ОсновнойИсточникДанных.ИзмеренияИсточника.НайтиСтроки(Новый Структура("ИзмерениеБюджетирования",Перечисления.фин_ФактическиеПоказателиБюджетирования.ПериодПланирования)).Количество()<>0 Тогда
		ПериодИзИсточника = Истина;	
	Иначе	
		ПериодИзИсточника = Ложь;	
	КонецЕсли;
	
	ТабОперации=РасчетыПоМоделям.Выгрузить();
	ТабОперации.Очистить();
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,2));
	ОписаниеТиповКоличество   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15,5));
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);
	
	Если РабочиеДанные.Количество()=0 Тогда
		
		РабочиеДанные=Новый ТаблицаЗначений;
		
		// Добавляем колонки для показателей
		
		Для Каждого СтрокаПоказатели Из Показатели Цикл
			
			Если НЕ СтрокаПоказатели.КодИсточника="" Тогда
				РабочиеДанные.Колонки.Добавить(СтрокаПоказатели.Код,ОписаниеТиповЧисло);
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока=РабочиеДанные.Добавить();
		
	КонецЕсли;
	
	РабочиеДанные.Колонки.Добавить("Количество",ОписаниеТиповКоличество);
	РабочиеДанные.Колонки.Добавить("Сумма",ОписаниеТиповЧисло);
	
	// Колонка для информации об успешности выполнения расчета
	РабочиеДанные.Колонки.Добавить("РасчетВыполнен",ОписаниеТиповБулево);
	РабочиеДанные.ЗаполнитьЗначения(Истина,"РасчетВыполнен");
	
	РабочиеДанные.Колонки.Добавить("АналитикаКор",Новый ОписаниеТипов("СправочникСсылка.фин_НаборыРазрезовПоЗависимостям"));
	МассивКорИзмерений = Новый Массив;
	СоответствиеОписанийТипов = Новый Соответствие;
	Если Оборот.ФормироватьПроводки Тогда
		Для Каждого ЭлементСтруктуры Из СтруктураИзмеренийРасчет Цикл
			Позиция = Найти(ЭлементСтруктуры.Ключ,"Кор");
			Если Позиция <> 0 И РабочиеДанные.Колонки.Найти(ЭлементСтруктуры.Ключ)<>Неопределено Тогда
				МассивКорИзмерений.Добавить(Сред(ЭлементСтруктуры.Ключ,1,Позиция-1));
				СоответствиеОписанийТипов.Вставить(Сред(ЭлементСтруктуры.Ключ,1,Позиция-1),фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(Перечисления.фин_ФактическиеПоказателиБюджетирования[Сред(ЭлементСтруктуры.Ключ,1,Позиция-1)],КЭШ_Разрезы).ТипЗначения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Добавляем показатели, введенные вручную
	Для Каждого СтрокаПоказатели Из Показатели Цикл
		Если СтрокаПоказатели.КодИсточника="" Тогда
			РабочиеДанные.Колонки.Добавить(СтрокаПоказатели.Код,ОписаниеТиповЧисло);
			РабочиеДанные.ЗаполнитьЗначения(СтрокаПоказатели.Значение,СтрокаПоказатели.Код);
		КонецЕсли;
	КонецЦикла;
	
	Если РабочиеДанные.Колонки.Найти("Валюта")<>Неопределено Тогда
		РабочиеДанные.Колонки.Валюта.Имя = "ВалютаОперации";
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из РабочиеДанные Цикл
		
		// Убираем пустые значения
		
		Для Каждого Колонка Из РабочиеДанные.Колонки Цикл
			
			Если СтрокаДанных[Колонка.Имя]=NULL Тогда
				СтрокаДанных[Колонка.Имя]=0;
			КонецЕсли;
			
		КонецЦикла;
		
		//Формируем строку для сообщения об ошибке
		
		СтрокаИзмерение="";
		
		Для Каждого Измерение Из СтруктураИзмеренийРасчет Цикл
			Если Не РабочиеДанные.Колонки.Найти(Измерение.Ключ)=Неопределено Тогда
				СтрокаИзмерение=СтрокаИзмерение+" "+Измерение.Ключ+": "+СокрЛП(СтрокаДанных[Измерение.Ключ])+";";
			КонецЕсли;
		КонецЦикла;
				
				
		//Рассчитываем значения по формулам
		
		Если НЕ Оборот.ФормулаКоличество="" Тогда
			
			ВыражениеКоличество=СтрЗаменить(Оборот.ФормулаКоличество,"[","СтрокаДанных.");
			ВыражениеКоличество=СтрЗаменить(ВыражениеКоличество,"]","");
			// работа с доп функциями
			ВыражениеКоличество=СтрЗаменить(ВыражениеКоличество,"КореньКв","Sqrt");
			ВыражениеКоличество=СтрЗаменить(ВыражениеКоличество,"Степень","Pow");
			
			Попытка
				
				СтрокаДанных.Количество=Вычислить(ВыражениеКоличество);
				
			Исключение
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Расчет по строке "+НомерСтрокиРасчет+", "+СтрокаИзмерение+"
				|показатель ""Количество"": "+ОписаниеОшибки());
				СтрокаДанных.Количество=0;
				СтрокаДанных.РасчетВыполнен=Ложь;
				
			КонецПопытки
			
		Иначе
			
			СтрокаДанных.Количество=0;
			
		КонецЕсли;
		
		Если НЕ Оборот.ФормулаСумма="" Тогда
			
			ВыражениеСумма=СтрЗаменить(Оборот.ФормулаСумма,"[","СтрокаДанных.");
			ВыражениеСумма=СтрЗаменить(ВыражениеСумма,"]","");
			
			Попытка
				
				СтрокаДанных.Сумма=Вычислить(ВыражениеСумма);
				
			Исключение
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Расчет по строке "+НомерСтрокиРасчет+", "+СтрокаИзмерение+"
				|показатель ""Сумма"": "+ОписаниеОшибки());
				СтрокаДанных.Сумма=0;
				СтрокаДанных.РасчетВыполнен=Ложь;
				
			КонецПопытки
			
		Иначе
			
			СтрокаДанных.Сумма=0;
			
		КонецЕсли;
		
		Если СтрокаДанных.Сумма=0 И СтрокаДанных.Количество=0 Тогда
			СтрокаДанных.РасчетВыполнен=Ложь;
		КонецЕсли;
		
		// определяем значение кор. аналитики
		Если Оборот.ФормироватьПроводки Тогда
			СтруктураПараметров = Новый Структура();
			Для Каждого Параметр Из МассивКорИзмерений Цикл
				СтруктураПараметров.Вставить("Отбор"+Параметр,Истина);
				СтруктураПараметров.Вставить(Параметр,СоответствиеОписанийТипов.Получить(Параметр).ПривестиЗначение(СтрокаДанных[Параметр+"Кор"]));
			КонецЦикла;
			СтрокаДанных.АналитикаКор = фин_УправлениеЗависимостямиСтатейБюджетов.ОпределитьПозициюНабораПоЗависимостям(Истина,СтруктураПараметров);
		КонецЕсли;
		
	КонецЦикла; 
	
	// Удаляем строки с нулевыми значениями количества и суммы: в дальнейших расчетах они не используются.
	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("РасчетВыполнен",Ложь);
	
	МассивНулевыхСтрок=РабочиеДанные.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаНоль Из МассивНулевыхСтрок Цикл
		РабочиеДанные.Удалить(СтрокаНоль);
	КонецЦикла;
	
	Если РабочиеДанные.Количество()=0 Тогда // Дальнейшие расчеты не имеют смысла
		Возврат;
	КонецЕсли;
	
	фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(РабочиеДанные, ТабОперации);
	
	СтруктураРазрезов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПолучитьСписокРазрезовСтатьи(Оборот.ФинансовыйПоказатель);
	СтруктураРазрезов.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта);
	
	СписокИменРазрезов = Новый Массив;
	// Заполняем фиксированные значения изменений
	Для Каждого РазрезЭлемент Из СтруктураРазрезов Цикл
		ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
		СписокИменРазрезов.Добавить(ИмяРазреза);
		ЗаполнитьФиксированныеЗначения(ТабОперации,Оборот["ВидИзменения"+ИмяРазреза],Оборот["ЗначениеИзменения"+ИмяРазреза],?(ИмяРазреза="Валюта","ВалютаОперации",ИмяРазреза));
	КонецЦикла;
	
	ТабОперации.ЗаполнитьЗначения(Оборот.ФинансовыйПоказатель,		"ФинансовыйПоказатель");
	// по доп. проводкам
	ТабОперации.ЗаполнитьЗначения(Оборот.ФормироватьПроводки,		"ФормироватьПроводки");
	Если Оборот.ФормироватьПроводки Тогда
		ТабОперации.ЗаполнитьЗначения(Оборот.СторонаПроводкиКор,	"СторонаПроводкиКор");
		ТабОперации.ЗаполнитьЗначения(Оборот.СчетДт,				"СчетДт");
		ТабОперации.ЗаполнитьЗначения(Оборот.СчетКт,				"СчетКт");
	КонецЕсли;
	
	Если ПериодИзИсточника Тогда
		Для Каждого СтрокаОперации Из ТабОперации Цикл
			Если СтрокаОперации.ПериодПланирования = '00010101' Тогда
				СтрокаОперации.ПериодПланирования = ДатаРасчета;
			Иначе
				СтрокаОперации.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаОперации.ПериодПланирования,СценарийКонтекстаРасчета);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТабОперации.ЗаполнитьЗначения(ДатаРасчета,"ПериодПланирования");
	КонецЕсли;
	Если ТабОперации.Колонки.Найти("КомментарийРасчета")<>Неопределено Тогда
		ТабОперации.ЗаполнитьЗначения(Оборот.ИмяРасчета,"КомментарийРасчета");
	КонецЕсли;
	
	// Заполняем движения, рассчитываемые по профилям изменений по измерениям
	Для Каждого ИмяРазреза Из СписокИменРазрезов Цикл
		ИзмеренияПоПрофилю(ТабОперации,Оборот["ВидИзменения"+ИмяРазреза],Оборот["ЗначениеИзменения"+ИмяРазреза],Перечисления.фин_ФактическиеПоказателиБюджетирования[ИмяРазреза],Оборот.НомерСтроки);
	КонецЦикла;
	
	Если НЕ Оборот.ЗначениеИзмененияПериод.Пустая() Тогда
		
		ПериодыПоПрофилю(ТабОперации,Оборот.ЗначениеИзмененияПериод);
		
	КонецЕсли;
	
	Если ДокументРасчета.ВидОперации<>Перечисления.фин_ВидыОперацийБюджет.Корректировка И ДокументРасчета.ВидОперации<>Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
		// Добавляем зависимые обороты
		
		КопияТабОперации=ТабОперации.Скопировать();
		
		ВестиУчетПоПроектам 			= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПроектам");
		БюджетированиеПоОрганизациям 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям");
		
		Для Каждого СтрокаОперация Из ТабОперации Цикл
			ТекущийИдентификатор 				= ТекущийИдентификатор+1;
			СтрокаОперация.НомерСтроки			= ТекущийИдентификатор;
			СтрокаОперация.ИдентификаторСтроки 	= ТекущийИдентификатор;
		КонецЦикла;
		
		ТаблицаРасчетныхДанных = РасчетыПоМоделям.Выгрузить();	
		фин_УправлениеЗависимостямиСтатейБюджетов.РассчитатьЗависимыеОбороты(,ТабОперации,ТаблицаРасчетныхДанных,Сценарий,Организация,БюджетированиеПоОрганизациям,ПериодПланированияДокумента,ВестиУчетПоПроектам,,Истина,"ИдентификаторСтроки",ТекущийИдентификатор);
		//РасчетыПоМоделям.Загрузить(ТаблицаРасчетныхДанных);
		фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(ТаблицаРасчетныхДанных,ТабОперации);
	КонецЕсли;
		
	фин_ОбщегоНазначенияСервер.ЗагрузитьВТаблицуЗначений(ТабОперации,РасчетыПоМоделям);
КонецПроцедуры // СформироватьОперации()


ТекущийИдентификатор = 0;
КЭШ_Разрезы = Новый Соответствие;