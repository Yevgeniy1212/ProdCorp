
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДеревоЗаполнения = ДанныеФормыВЗначение(Дерево,Тип("ДеревоЗначений"));
    ЗаполнитьУзел(Неопределено,ДеревоЗаполнения);
	ЗначениеВДанныеФормы(ДеревоЗаполнения,Дерево);
	фин_РаботаСДополнительнымиРазрезамиБюджетирования.НастроитьПредставлениеРазрезов(ЭтотОбъект,,,Ложь);
	фин_РаботаСДополнительнымиРазрезамиБюджетирования.ЗаполнитьСписокРазрезовУчета(СписокРазрезов);
	НадписьБюджетыИСтатьиБюджетов = "Бюджеты и статьи бюджетов";
	НадписьРазрезыКонтроля = "Разрезы контроля";
	Если НЕ Параметры.Свойство("Сценарий") Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Форма не предназначена для самостоятельной работы");
		Возврат;
	КонецЕсли;
	Сценарий = Параметры.Сценарий;
	Организация = Параметры.Организация;
	Адрес = Параметры.Адрес;
	ИспользованиеКонтролируемыхЗначений = Параметры.ИспользованиеКонтролируемыхЗначений;
	Элементы.ГруппаОтклонение.Видимость = НЕ (Параметры.ВидОграниченияОборотов = Перечисления.фин_ВидыОграниченийОборотовБюджета.ПредварительныйБюджет);
	Предварительный =  Параметры.ВидОграниченияОборотов = Перечисления.фин_ВидыОграниченийОборотовБюджета.ПредварительныйБюджет;
	Объект.ВидОтклоненияКонтролируемыхЗначений = Перечисления.фин_ВидыОтклоненийКонтролируемыхЗначенийБюджетов.Относительное;
  	Объект.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекущаяДата(),Сценарий);
	фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.УстановитьГоризонтПланированияИПредставлениеБюджетногоПериода(НадписьПериодПланирования,,Объект.ПериодПланирования,Сценарий);
КонецПроцедуры

//Процедура заполняет дерево значений 
//
Процедура ЗаполнитьУзел(Строка,ДеревоЗаполнения)	
	СтрокиДерева = ДеревоЗаполнения.Строки;
	Флаг = 0;
    Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИспользованиеКонтролируемыхЗначений",ИспользованиеКонтролируемыхЗначений);
    Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
                   |	СтатьиБюджета.Ссылка КАК СтатьяБюджета,
                   |	СтатьиБюджета.Владелец КАК Бюджет,
                   |	СтатьиБюджета.ЭтоГруппа,
                   |	СтатьиБюджета.Родитель
                   |ИЗ
                   |	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
                   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкиРегулярногоКонтроляПоказателей.СрезПоследних(, ИспользованиеКонтролируемыхЗначений = &ИспользованиеКонтролируемыхЗначений) КАК НастройкиРегулярногоКонтроля
                   |		ПО СтатьиБюджета.ФинансовыйПоказатель = НастройкиРегулярногоКонтроля.ФинансовыйПоказатель
                   |ГДЕ
                   |	СтатьиБюджета.ЭтоГруппа = ЛОЖЬ
                   |	И СтатьиБюджета.ФинансовыйПоказатель.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.фин_ВидыФинансовыхПоказателей.Оборотный)
                   |	И ЕСТЬNULL(НастройкиРегулярногоКонтроля.ПрименятьКонтроль, ЛОЖЬ) = ЛОЖЬ
                   |
                   |СГРУППИРОВАТЬ ПО
                   |	СтатьиБюджета.Ссылка,
                   |	СтатьиБюджета.Владелец,
                   |	СтатьиБюджета.ЭтоГруппа,
                   |	СтатьиБюджета.Родитель
                   |ИТОГИ ПО
                   |	Бюджет,
                   |	СтатьяБюджета ИЕРАРХИЯ";
    Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если Выборка.Количество() <> 0 Тогда
		СтрокиДерева.Очистить();
		Пока Выборка.Следующий() Цикл
			СтрокаДерева = СтрокиДерева.Добавить();
            СтрокаДерева.СтатьяБюджета = Выборка.Бюджет;
            СтрокаДерева.Флаг = Флаг;
			ПодВыборка = Выборка.Выбрать();
			Пока ПодВыборка.Следующий() Цикл
				Если ПодВыборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
					Продолжить;
				КонецЕсли;			
				Строка = ДеревоЗаполнения.Строки.Найти(ПодВыборка.Родитель,"СтатьяБюджета",Истина);
				Если Строка = Неопределено Тогда
					Строка = ДеревоЗаполнения.Строки.Найти(ПодВыборка.Бюджет,"СтатьяБюджета");
				КонецЕсли;			
				СтрокаДерева = Строка.Строки.Добавить();				
			  	СтрокаДерева.СтатьяБюджета = ПодВыборка.СтатьяБюджета;
            	СтрокаДерева.Флаг = Флаг;						
			КонецЦикла;						
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазрезыУчетаИзмерениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокРазрезов;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	ДеревоЗаполнения = ДанныеФормыВЗначение(Дерево,Тип("ДеревоЗначений"));
    ЗаполнитьУзел(Неопределено,ДеревоЗаполнения);
	ЗначениеВДанныеФормы(ДеревоЗаполнения,Дерево);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФлагПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные.Флаг = 2 Тогда
		ТекущиеДанные.Флаг = 0;
	КонецЕсли;	
	Если ТекущиеДанные.Флаг = 0 Тогда
		Если ТекущиеДанные.ПолучитьЭлементы().Количество()>0 Тогда
			УстановитьФлагПодСтрокам(ТекущиеДанные.ПолучитьЭлементы(),0)	
		КонецЕсли;
		Если НЕ ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			ПроверитьФлагиПодчиненныхСтрок(ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы(),0);
		КонецЕсли;		
	ИначеЕсли ТекущиеДанные.Флаг = 1 Тогда
		Если ТекущиеДанные.ПолучитьЭлементы().Количество()>0 Тогда
			УстановитьФлагПодСтрокам(ТекущиеДанные.ПолучитьЭлементы(),1)	
		КонецЕсли;
        Если НЕ ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			ПроверитьФлагиПодчиненныхСтрок(ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы(),1);
		КонецЕсли; 	
	КонецЕсли;	
КонецПроцедуры

//Процедура устанавливает значение флага подчиненным строкам дерева
//
&НаКлиенте
Процедура УстановитьФлагПодСтрокам(Строки,Флаг)
	Для Каждого Строка Из Строки Цикл
		Строка.Флаг = Флаг;
		Если Строка.ПолучитьЭлементы().Количество()>0 Тогда
			УстановитьФлагПодСтрокам(Строка.ПолучитьЭлементы(),Флаг)	
		КонецЕсли;
	КонецЦикла;;	
КонецПроцедуры //УстановитьФлагПодСтрокам

//Процедура контролирует значение флага у родительских строк
//
&НаКлиенте
Процедура ПроверитьФлагиПодчиненныхСтрок(Строки,ФлагПроверки)
	Флаг = Ложь;
	Если ФлагПроверки = 2 Тогда
		РодСтрока = Строки[0].ПолучитьРодителя();
		РодСтрока.Флаг = 2;
		Если НЕ РодСтрока.ПолучитьРодителя() = Неопределено Тогда
			ПроверитьФлагиПодчиненныхСтрок(РодСтрока.ПолучитьРодителя().ПолучитьЭлементы(),РодСтрока.Флаг);
		КонецЕсли;
	Иначе	
		Для Каждого Строка Из Строки Цикл 
			Если НЕ Строка.Флаг = ФлагПроверки Тогда 
				Флаг = Истина;
				Прервать;
			КонецЕсли;			
		КонецЦикла;
		РодСтрока = Строка.ПолучитьРодителя();
		Если ФлагПроверки = 0 И Флаг Тогда			
			РодСтрока.Флаг = 2;
		ИначеЕсли ФлагПроверки = 0 И НЕ Флаг Тогда
			РодСтрока.Флаг = 0;
		ИначеЕсли ФлагПроверки = 1 И Флаг Тогда
			РодСтрока.Флаг = 2;
		ИначеЕсли ФлагПроверки = 1 И НЕ Флаг Тогда
			РодСтрока.Флаг = 1;
		КонецЕсли;
		Если НЕ РодСтрока.ПолучитьРодителя() = Неопределено Тогда
			ПроверитьФлагиПодчиненныхСтрок(РодСтрока.ПолучитьРодителя().ПолучитьЭлементы(),РодСтрока.Флаг);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ПроверитьФлагиПодчиненныхСтрок

&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
	Закрыть(ВыполнитьНаСервере());
КонецПроцедуры

//Процедура формирует список установленных пользователем соответствий
//
Процедура СформироватьСписокСоответствий(СписокСоответствий,Строки)
	Для Каждого Строка Из Строки Цикл 
		Если Строка.Флаг = 1 И Строка.Родитель <> Неопределено Тогда
			СписокСоответствий.Добавить(Строка.СтатьяБюджета);		
		КонецЕсли;		
		Если Строка.Строки.Количество()>0 Тогда
			СформироватьСписокСоответствий(СписокСоответствий,Строка.Строки);
		КонецЕсли;		
	КонецЦикла;	
КонецПроцедуры //СформироватьСписокСоответствий

&НаСервере
Функция ВыполнитьНаСервере()
	ДеревоЗаполнения = ДанныеФормыВЗначение(Дерево,Тип("ДеревоЗначений"));
	СписокСоответствий = Новый Массив;	
	СформироватьСписокСоответствий(СписокСоответствий,ДеревоЗаполнения.Строки);	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатьиБюджета.ФинансовыйПоказатель
	               |ПОМЕСТИТЬ ВТ_Статьи
	               |ИЗ
	               |	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
	               |ГДЕ
	               |	СтатьиБюджета.Ссылка В(&Ссылки)
	               |	И СтатьиБюджета.ЭтоГруппа = ЛОЖЬ";
	Запрос.УстановитьПараметр("Ссылки",СписокСоответствий);
	Запрос.Выполнить();	
	Запрос2 = Новый Запрос;
	Запрос2.МенеджерВременныхТаблиц = МенеджерВТ;
	ЗАпрос2.Текст = "ВЫБРАТЬ
	                |						ВТ_Статьи.ФинансовыйПоказатель
	                |					ИЗ
	                |						ВТ_Статьи";
	ТЗ = Запрос2.Выполнить().Выгрузить();
	Запрос1 = Новый Запрос;
	ТекстГруппировки = "";
	Запрос1.МенеджерВременныхТаблиц = МенеджерВТ;
	Текст = "ВЫБРАТЬ
	      |	&Отклонение КАК Отклонение,
	      |	ОборотыБюджетовОбороты.ФинансовыйПоказатель,
		  | ОборотыБюджетовОбороты.ПериодПланирования КАК Период";
	ТекстГруппировки = "
		|	СГРУППИРОВАТЬ ПО
		|	ОборотыБюджетовОбороты.ФинансовыйПоказатель,
		|	ОборотыБюджетовОбороты.ПериодПланирования";
	Для Каждого РазрезЭлемент Из фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПолучитьПолныйСписокРазрезов") Цикл
		Если Объект.РазрезыУчета.НайтиСтроки(Новый Структура("Измерение",РазрезЭлемент.Значение)).Количество()>0 Тогда
			ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(РазрезЭлемент.Значение);
			Текст = Текст + ",
		    |	ОборотыБюджетовОбороты."+?(Найти(ИмяРазреза,"Разрез")=0,"","ДополнительныеРазрезы.")+ИмяРазреза+" КАК "+ИмяРазреза;
			ТекстГруппировки = ТекстГруппировки + ",
		    |	ОборотыБюджетовОбороты."+?(Найти(ИмяРазреза,"Разрез")=0,"","ДополнительныеРазрезы.")+ИмяРазреза;
		КонецЕсли;
	КонецЦикла;
	Условие = "";
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям") Тогда
		Условие = " Организация = &Организация И ";
		Запрос1.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	Если Предварительный Тогда
		Текст = Текст +",
	    |	СУММА(ЕстьNull(ОборотыБюджетовОбороты.СуммаСценарияОборот,0)) КАК СуммаСценарияКонтроль";		
	Иначе
		Текст = Текст +",
	    |	&ВидОтклонения КАК ВидОтклоненияКонтролируемыхЗначений ";
    	Запрос1.УстановитьПараметр("ВидОтклонения",Объект.ВидОтклоненияКонтролируемыхЗначений);
	КонецЕсли;	
	Текст = Текст +"
	                |ИЗ 
	                |	РегистрНакопления.фин_ОборотыБюджетов.Обороты(
	                |			,
	                |			,
	                |			"+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)+", ПериодПланирования>=&НачалоПериода И ПериодПланирования<=&КонецПериода И
					|			Сценарий = &Сценарий
	                |				И "+Условие+"
	                |				ФинансовыйПоказатель В
	                |					(ВЫБРАТЬ
	                |						ВТ_Статьи.ФинансовыйПоказатель
	                |					ИЗ
	                |						ВТ_Статьи)) КАК ОборотыБюджетовОбороты  "+ТекстГруппировки;
	Запрос1.Текст = Текст;
	Запрос1.УстановитьПараметр("Сценарий",Сценарий);
	Запрос1.УстановитьПараметр("Отклонение",Объект.Отклонение);
	НачалоПериода = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий));
	Если Объект.РучнойВыборПериода Тогда
		КонецПериода = Объект.ГоризонтПланирования;
	Иначе
		КонецПериода  = ?(Сценарий.ПродолжительностьЦикла<2,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Объект.ПериодПланирования,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),Сценарий.ПродолжительностьЦикла-1));
	КонецЕсли;
	Запрос1.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос1.УстановитьПараметр("КонецПериода",  КонецПериода );
	НачалоКонцаПериода = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(КонецПериода,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий));
	Выборка = Запрос1.Выполнить().Выгрузить();	
	Если Предварительный Тогда 
		Для Каждого СтатьяБюджета Из ТЗ Цикл
			Период = НачалоПериода;
			Пока Период <= НачалоКонцаПериода Цикл 
				Отбор = Новый Структура;
				Отбор.Вставить("ФинансовыйПоказатель",СтатьяБюджета.ФинансовыйПоказатель);
				Отбор.Вставить("Период",Период);
				Строки = Выборка.НайтиСтроки(Отбор);
				Если Строки.Количество() = 0 Тогда
					СтрВыборки = Выборка.Добавить();	
					СтрВыборки.Период = Период;
					СтрВыборки.ФинансовыйПоказатель = СтатьяБюджета.ФинансовыйПоказатель;
					СтрВыборки.СуммаСценарияКонтроль = 0;
				КонецЕсли;
				Период = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Период,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий)),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий),1);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Выборка.Сортировать("Период возр, ФинансовыйПоказатель возр");
	Возврат ПоместитьВоВременноеХранилище(Выборка,Адрес);
	
КонецФункции


&НаКлиенте
Процедура НадписьПериодПланированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораПериодаПланирования",ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.фин_ВыборБюджетногоПериода",Новый Структура("НачалоПериодаПланирования,КонецПериодаПланирования,Периодичность,РазрешитьПроизвольныйПериод",Объект.ПериодПланирования,Объект.ГоризонтПланирования,Сценарий,Истина),ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПериодаПланирования(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		Объект.ПериодПланирования 	= РезультатВыбора.НачалоПериода;
		Объект.ГоризонтПланирования = РезультатВыбора.КонецПериода;
		фин_УправлениеОтчетамиКлиентСервер.УстановитьТекстПериодаПоВыбраннойПериодичности(НадписьПериодПланирования,Сценарий,Объект.ПериодПланирования,Объект.ГоризонтПланирования,Ложь);
	КонецЕсли;
КонецПроцедуры

