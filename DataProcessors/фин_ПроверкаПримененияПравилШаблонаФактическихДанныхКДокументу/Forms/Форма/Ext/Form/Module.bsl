
&НаКлиенте
Процедура ДекорацияЗакрытьНажатие(Элемент)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура НадписьПроверкаНажатие(Элемент)
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	ВыполнитьПроверку();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверку()
	ТаблицаПереданныхДвижений = Новый Структура;
	фин_ПроцедурыМеханизмовБюджетирования.ЗаполнитьПередаваемыеДвиженияВсемиНаборами(Объект.Документ.ПолучитьОбъект(),ТаблицаПереданныхДвижений);
	ПозицияКолонкиРезультата = 0;
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Добавить();
	СтруктураДанныхДокумента = усд_УправлениеСогласованиемДокументов.СоздатьСтруктуруПоДаннымДокумента(Объект.Документ.ПолучитьОбъект());
	ТаблицаРезультат.Колонки.Вставить(0,"Правило");
	ТаблицаРезультат.Колонки.Вставить(1,"Данные",Новый ОписаниеТипов("Строка"));
	
	ТаблицаРезультатИтоговая = Новый ДеревоЗначений;
	Для Каждого Колонка Из ТаблицаРезультат.Колонки Цикл
		ТаблицаРезультатИтоговая.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения,Колонка.Заголовок);
	КонецЦикла;
	
	Шаблон 		= Объект.Шаблон;
	Источник 	= Объект.Документ.ПолучитьОбъект();
	ГруппыШаблонов 		= фин_РегистрацияФактическихДанныхПоБюджетированию.ПолучитьГруппыПравилСхемы(Объект.Шаблон);
	НастройкиШаблона 	= фин_РегистрацияФактическихДанныхПоБюджетированию.ПолучитьПравилаСхемы(Шаблон,Объект.Документ.Дата);
	Для Каждого ГруппаШаблонов Из ГруппыШаблонов Цикл
		СтрокаТЗ_Группа 		= ТаблицаРезультатИтоговая.Строки.Добавить();
		СтрокаТЗ_Группа.Правило	= ГруппаШаблонов.Группа;
		мШаблоныГруппы 	= НастройкиШаблона.НайтиСтроки(Новый Структура("Владелец",ГруппаШаблонов.Группа));
		ШаблоныГруппы 	= НастройкиШаблона.СкопироватьКолонки();
		Для Каждого СтрокаШаблон Из мШаблоныГруппы Цикл
			Если СтрокаШаблон.СпособИспользования <> Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиНеНайденУдовлетворяющийУсловиюШаблон Тогда
				НоваяСтрокаШаблона = ШаблоныГруппы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаШаблона,СтрокаШаблон);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаШаблон Из мШаблоныГруппы Цикл
			Если СтрокаШаблон.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиНеНайденУдовлетворяющийУсловиюШаблон Тогда
				НоваяСтрокаШаблона = ШаблоныГруппы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаШаблона,СтрокаШаблон);
			КонецЕсли;
		КонецЦикла;
		Если ГруппаШаблонов.Группа = Объект.Шаблон Тогда
			Для Каждого Правило Из ШаблоныГруппы Цикл
				СтрокаТЗ_Правило 			= СтрокаТЗ_Группа.Строки.Добавить();
				СтрокаТЗ_Правило.Правило	= Правило.Ссылка;
				ПараметрыПравила = Правило;
				Если Правило.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента Тогда
					Если ЗначениеЗаполнено(Правило.Условие) Тогда
						Если Не усд_ПроцедурыСогласованияДокументов.УсловиеПоСтрокеВыполняется(Правило.Условие,Источник.Ссылка,,,Источник.Ссылка) Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					НоваяСтрока = СтрокаТЗ_Правило.Строки.Добавить();
					НоваяСтрока.Данные = "Шапка документа";
				ИначеЕсли Правило.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти Тогда	
					ИмяТабличнойЧасти	= Правило.ИмяИсточника;
					мТабличнаяЧасть		= Источник[ИмяТабличнойЧасти];
					ТабличнаяЧасть		= мТабличнаяЧасть.Выгрузить();
					Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
						Если ЗначениеЗаполнено(Правило.Условие) Тогда
							Если Не усд_ПроцедурыСогласованияДокументов.УсловиеПоСтрокеВыполняется(Правило.Условие,Источник.Ссылка,СтрокаТабличнойЧасти,,Источник.Ссылка) Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						НоваяСтрока = СтрокаТЗ_Правило.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);
						НоваяСтрока.Данные = "Таб. часть: "+Источник.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним+", строка №"+Строка(СтрокаТабличнойЧасти.НомерСтроки);
					КонецЦикла;
				ИначеЕсли Правило.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах Тогда	
					ИмяТабличнойЧасти 	= Сред(Правило.ИмяИсточника,Найти(Правило.ИмяИсточника,".")+1);
					ТабличнаяЧасть = Неопределено;
					Если НЕ ТаблицаПереданныхДвижений.Свойство(ИмяТабличнойЧасти,ТабличнаяЧасть) Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проведении документа "+Источник.Ссылка+" по данным бюджетирования
						| 	возникнет ошибка при исполнении шаблона "+Шаблон+", строка №"+Строка(Правило.НомерСтроки)+": 
						|	не найден набор движений документа "+ИмяТабличнойЧасти);
						Возврат;
					КонецЕсли;
					Если ТабличнаяЧасть.Количество() = 0 Тогда
						Если Найти(Правило.ИмяИсточника,"РегистрБухгалтерии.") Тогда
							ОбъектНабора = РегистрыБухгалтерии;
						ИначеЕсли Найти(Правило.ИмяИсточника,"РегистрНакопления.") Тогда
							ОбъектНабора = РегистрыНакопления;
						ИначеЕсли Найти(Правило.ИмяИсточника,"РегистрСведений.") Тогда
							ОбъектНабора = РегистрыСведений;
						ИначеЕсли Найти(Правило.ИмяИсточника,"РегистрРасчета.") Тогда
							ОбъектНабора = РегистрыРасчета;
						КонецЕсли;
						НаборЗаписейДвижений = ОбъектНабора[ИмяТабличнойЧасти].СоздатьНаборЗаписей();
						НаборЗаписейДвижений.Отбор.Регистратор.Установить(Источник);
						НаборЗаписейДвижений.Прочитать();
						ТабличнаяЧасть = НаборЗаписейДвижений.Выгрузить();
					КонецЕсли;
					СинонимРегистра = "";
					Для Каждого РегистрДвижений Из Источник.Метаданные().Движения Цикл
						Если РегистрДвижений.Имя = ИмяТабличнойЧасти Тогда
							СинонимРегистра = РегистрДвижений.Синоним;
						КонецЕсли;
					КонецЦикла;
					Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
						Если ЗначениеЗаполнено(Правило.Условие) Тогда
							Если Не усд_ПроцедурыСогласованияДокументов.УсловиеПоСтрокеВыполняется(Правило.Условие,Источник.Ссылка,СтрокаТабличнойЧасти,,Источник.Ссылка) Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						НоваяСтрока = СтрокаТЗ_Правило.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);
						НоваяСтрока.Данные = "Набор движений: "+СинонимРегистра+", строка №"+Строка(СтрокаТабличнойЧасти.НомерСтроки);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		Иначе
		 	Если ЗначениеЗаполнено(ГруппаШаблонов.Условие) Тогда
				Если ГруппаШаблонов.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента И Не усд_ПроцедурыСогласованияДокументов.УсловиеПоСтрокеВыполняется(ГруппаШаблонов.Условие,Источник.Ссылка,,,Источник.Ссылка) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если ГруппаШаблонов.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента Тогда
				ПодходящееПравилоНайдено = Ложь;
				Для Каждого Правило Из ШаблоныГруппы Цикл
					СтрокаТЗ_Правило 			= СтрокаТЗ_Группа.Строки.Добавить();
					СтрокаТЗ_Правило.Правило	= Правило.Ссылка;
					ПараметрыПравила = Правило;
					Если Правило.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию Тогда
						Если ПодходящееПравилоНайдено Тогда
							Продолжить;
						КонецЕсли;
					ИначеЕсли Правило.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиНеНайденУдовлетворяющийУсловиюШаблон Тогда
						Если ПодходящееПравилоНайдено Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(Правило.Условие) Тогда
						Если Не усд_ПроцедурыСогласованияДокументов.УсловиеПоСтрокеВыполняется(Правило.Условие,Источник.Ссылка,,,Источник.Ссылка) Тогда
							Продолжить;
						ИначеЕсли Правило.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию Тогда
							ПодходящееПравилоНайдено = Истина;
						КонецЕсли;
					КонецЕсли;
					НоваяСтрока = СтрокаТЗ_Правило.Строки.Добавить();
					НоваяСтрока.Данные = "Шапка документа";
				КонецЦикла;
			ИначеЕсли ГруппаШаблонов.ВидДанных = Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоТабличнойЧасти Тогда 
				ИмяТабличнойЧасти 	= ГруппаШаблонов.ИмяИсточника;
				мТабличнаяЧасть 		= Источник[ИмяТабличнойЧасти];
				ТабличнаяЧасть = мТабличнаяЧасть.Выгрузить();
				Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
					Если Не усд_ПроцедурыСогласованияДокументов.УсловиеПоСтрокеВыполняется(ГруппаШаблонов.Условие,Источник.Ссылка,СтрокаТабличнойЧасти,,Источник.Ссылка) Тогда
						Продолжить;
					КонецЕсли;
					ПодходящееПравилоНайдено = Ложь;
					Для Каждого Правило Из ШаблоныГруппы Цикл
						СтрокиПравило = СтрокаТЗ_Группа.Строки.НайтиСтроки(Новый Структура("Правило",Правило.Ссылка));
						Если СтрокиПравило.Количество()=0 Тогда
							СтрокаТЗ_Правило 			= СтрокаТЗ_Группа.Строки.Добавить();
							СтрокаТЗ_Правило.Правило	= Правило.Ссылка;
						Иначе
							СтрокаТЗ_Правило 			= СтрокиПравило[0];
						КонецЕсли;
						ПараметрыПравила = фин_РегистрацияФактическихДанныхПоБюджетированию.ПолучитьНастройкиСтрокиШаблона(Правило.БазовыйИдентификатор,НастройкиШаблона);
						Если Правило.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию Тогда
							Если ПодходящееПравилоНайдено Тогда
								Продолжить;
							КонецЕсли;
						ИначеЕсли Правило.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиНеНайденУдовлетворяющийУсловиюШаблон Тогда
							Если ПодходящееПравилоНайдено Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						Если ЗначениеЗаполнено(Правило.Условие) Тогда
							Если Не усд_ПроцедурыСогласованияДокументов.УсловиеПоСтрокеВыполняется(Правило.Условие,Источник.Ссылка,СтрокаТабличнойЧасти,,Источник.Ссылка) Тогда
								Продолжить;
							ИначеЕсли Правило.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию Тогда
								ПодходящееПравилоНайдено = Истина;
							КонецЕсли;
						КонецЕсли;
						НоваяСтрока = СтрокаТЗ_Правило.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);
						НоваяСтрока.Данные = "Таб. часть: "+Источник.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Синоним+", строка №"+Строка(СтрокаТабличнойЧасти.НомерСтроки);
					КонецЦикла;	
				КонецЦикла;
			Иначе	
				ИмяТабличнойЧасти 	= Сред(ГруппаШаблонов.ИмяИсточника,Найти(ГруппаШаблонов.ИмяИсточника,".")+1);
				Попытка
					ТабличнаяЧасть = Неопределено;
					Если НЕ ТаблицаПереданныхДвижений.Свойство(ИмяТабличнойЧасти,ТабличнаяЧасть) Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проведении документа "+Источник.Ссылка+" по данным бюджетирования
						| 	возникнет ошибка при исполнении шаблона "+Шаблон+", группа шаблонов "+ГруппаШаблонов.Группа+": 
						|	не найден набор движений документа "+ИмяТабличнойЧасти);
						Отказ = Истина;
						Возврат;
					КонецЕсли;
					Если ТабличнаяЧасть.Количество() = 0 Тогда
						Если Найти(ГруппаШаблонов.ИмяИсточника,"РегистрБухгалтерии.") Тогда
							ОбъектНабора = РегистрыБухгалтерии;
						ИначеЕсли Найти(ГруппаШаблонов.ИмяИсточника,"РегистрНакопления.") Тогда
							ОбъектНабора = РегистрыНакопления;
						ИначеЕсли Найти(ГруппаШаблонов.ИмяИсточника,"РегистрСведений.") Тогда
							ОбъектНабора = РегистрыСведений;
						ИначеЕсли Найти(ГруппаШаблонов.ИмяИсточника,"РегистрРасчета.") Тогда
							ОбъектНабора = РегистрыРасчета;
						КонецЕсли;
						НаборЗаписейДвижений = ОбъектНабора[ИмяТабличнойЧасти].СоздатьНаборЗаписей();
						НаборЗаписейДвижений.Отбор.Регистратор.Установить(Источник);
						НаборЗаписейДвижений.Прочитать();
						ТабличнаяЧасть = НаборЗаписейДвижений.Выгрузить();
					КонецЕсли;
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проведении документа "+Источник.Ссылка+" по данным бюджетирования
					| 	возникнет ошибка при исполнении шаблона "+Шаблон+", группа шаблонов "+ГруппаШаблонов.Группа+": 
					|	не найден набор движений документа "+ИмяТабличнойЧасти);
					Отказ = Истина;
					Возврат;
				КонецПопытки;
				СинонимРегистра = "";
				Для Каждого РегистрДвижений Из Источник.Метаданные().Движения Цикл
					Если РегистрДвижений.Имя = ИмяТабличнойЧасти Тогда
						СинонимРегистра = РегистрДвижений.Синоним;
					КонецЕсли;
				КонецЦикла;
				Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
					Если Не усд_ПроцедурыСогласованияДокументов.УсловиеПоСтрокеВыполняется(ГруппаШаблонов.Условие,Источник.Ссылка,СтрокаТабличнойЧасти,,Источник.Ссылка) Тогда
						Продолжить;
					КонецЕсли;
					ПодходящееПравилоНайдено = Ложь;
					Для Каждого Правило Из ШаблоныГруппы Цикл
						СтрокиПравило = СтрокаТЗ_Группа.Строки.НайтиСтроки(Новый Структура("Правило",Правило.Ссылка));
						Если СтрокиПравило.Количество()=0 Тогда
							СтрокаТЗ_Правило 			= СтрокаТЗ_Группа.Строки.Добавить();
							СтрокаТЗ_Правило.Правило	= Правило.Ссылка;
						Иначе
							СтрокаТЗ_Правило 			= СтрокиПравило[0];
						КонецЕсли;
						ПараметрыПравила = фин_РегистрацияФактическихДанныхПоБюджетированию.ПолучитьНастройкиСтрокиШаблона(Правило.БазовыйИдентификатор,НастройкиШаблона);
						Если Правило.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию Тогда
							Если ПодходящееПравилоНайдено Тогда
								Продолжить;
							КонецЕсли;
						ИначеЕсли Правило.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиНеНайденУдовлетворяющийУсловиюШаблон Тогда
							Если ПодходящееПравилоНайдено Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						Если ЗначениеЗаполнено(Правило.Условие) Тогда
							Если Не усд_ПроцедурыСогласованияДокументов.УсловиеПоСтрокеВыполняется(Правило.Условие,Источник.Ссылка,СтрокаТабличнойЧасти,,Источник.Ссылка) Тогда
								Продолжить;
							КонецЕсли;
						ИначеЕсли Правило.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ЕслиУдовлетворяетУсловию Тогда
							ПодходящееПравилоНайдено = Истина;
						КонецЕсли;
						НоваяСтрока = СтрокаТЗ_Правило.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);
						НоваяСтрока.Данные = "Набор движений: "+СинонимРегистра+", строка №"+Строка(СтрокаТабличнойЧасти.НомерСтроки);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МассивУдалить = Новый Массив;
	Для Каждого РеквизитФормы Из ЭтотОбъект.ПолучитьРеквизиты() Цикл
		Если РеквизитФормы.Имя = "РеквизитТаблица" Тогда
			МассивУдалить.Добавить(РеквизитФормы.Имя);
			Если Элементы.Найти("РеквизитТаблица") <>Неопределено Тогда
				Элементы.Удалить(Элементы["РеквизитТаблица"]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Попытка
		ИзменитьРеквизиты(,МассивУдалить);
	Исключение
	КонецПопытки;
	РеквизитТаблица 	= Новый РеквизитФормы("РеквизитТаблица",Новый ОписаниеТипов("ДеревоЗначений"),,"Результат проверки");
	МассивДобавить = Новый Массив;
	МассивДобавить.Добавить(РеквизитТаблица);
	ИзменитьРеквизиты(МассивДобавить);
	МассивДобавить = Новый Массив;
	Для Каждого Колонка Из ТаблицаРезультат.Колонки Цикл
		Если Колонка.ТипЗначения.СодержитТип(Тип("МоментВремени")) Тогда
			Продолжить;
		КонецЕсли;
		РеквизитКолонка 	= Новый РеквизитФормы(Колонка.Имя,Колонка.ТипЗначения,"РеквизитТаблица",Колонка.Заголовок);
		МассивДобавить.Добавить(РеквизитКолонка);
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавить);
	
	ГруппаКолонок = Неопределено;
	ЭлементФормы = Элементы.Добавить("РеквизитТаблица",Тип("ТаблицаФормы"),Элементы.РезультатыПроверки);
	ЭлементФормы.ПутьКДанным = "РеквизитТаблица";
	Для Каждого Колонка Из ТаблицаРезультатИтоговая.Колонки Цикл
		РеквизитКолонка 			= Элементы.Добавить("РеквизитТаблица"+Колонка.Имя,Тип("ПолеФормы"),?(Найти(Колонка.Имя,"Результат")<>0 И Колонка.Имя<>"Результат",ГруппаКолонок,ЭлементФормы));
		РеквизитКолонка.ПутьКДанным	= "РеквизитТаблица."+Колонка.Имя;
		РеквизитКолонка.ТолькоПросмотр = Истина;
		Если Колонка.Имя="Результат" Тогда
			ГруппаКолонок = Элементы.Добавить("РеквизитТаблицаГруппаПравил",Тип("ГруппаФормы"),ЭлементФормы);
			ГруппаКолонок.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаКолонок.Видимость = Истина;
			ГруппаКолонок.Заголовок = "Составные условия";
			ГруппаКолонок.ОтображатьВШапке = Истина;
			ГруппаКолонок.Группировка = ГруппировкаКолонок.Горизонтальная;
		КонецЕсли;
		РеквизитКолонка.ЦветФона = ?(Колонка.Имя="Результат",Новый Цвет(176,196,222),?(Найти(Колонка.Имя,"Результат")<>0,Новый Цвет(240,248,255),Новый Цвет(255,255,255)));
	КонецЦикла;
	
	// перенесем данные в таблицу
	ЗначениеВРеквизитФормы(ТаблицаРезультатИтоговая,"РеквизитТаблица");
	ЭлементФормы.ИзменятьСоставСтрок = Ложь;
	ЭлементФормы.КоманднаяПанель.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументовПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ВидДокументов) Тогда
		НастроитьТипДокумента();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастроитьТипДокумента()
	Элементы.Документ.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка."+Объект.ВидДокументов.ПрограммныйИдентификатор);	
	Объект.Документ = Элементы.Документ.ОграничениеТипа.ПривестиЗначение(Объект.Документ);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	РеквизитТаблица 	= Новый РеквизитФормы("РеквизитТаблица",Новый ОписаниеТипов("ДеревоЗначений"),,"Результат проверки");
	МассивДобавить = Новый Массив;
	МассивДобавить.Добавить(РеквизитТаблица);
	ИзменитьРеквизиты(МассивДобавить);
	МассивДобавить = Новый Массив;
	РеквизитКолонка 	= Новый РеквизитФормы("Документ",Новый ОписаниеТипов("Неопределено"),"РеквизитТаблица","Документ");
	МассивДобавить.Добавить(РеквизитКолонка);
	
	ИзменитьРеквизиты(МассивДобавить);
	
	ГруппаКолонок = Неопределено;
	ЭлементФормы = Элементы.Добавить("РеквизитТаблица",Тип("ТаблицаФормы"),Элементы.РезультатыПроверки);
	ЭлементФормы.ПутьКДанным = "РеквизитТаблица";
	
	РеквизитКолонка 			= Элементы.Добавить("РеквизитТаблицаДокумент",Тип("ПолеФормы"),ЭлементФормы);
	РеквизитКолонка.ПутьКДанным	= "РеквизитТаблица.Документ";
	РеквизитКолонка.ТолькоПросмотр = Истина;
	
КонецПроцедуры
