
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Корень = ДеревоСтатей.ПолучитьЭлементы().Добавить();
	Корень.Наименование = "Статьи бюджета";
	Корень.ЭтоГруппа = Истина;
	Корень.Идентификатор = -1000;
	НадписьДополнительно = "Дополнительно";
	НадписьИспользование = "Использование";
	НадписьКомментарий = "Комментарий";
	НадписьОсновное = "Основное";
	НадписьОформление = "Оформление";
	НадписьПараметрыСтатейБюджетаПоУмолчанию = "Параметры статей бюджета по-умолчанию";
	НадписьРазрезыУчетаБюджета = "Разрезы учета бюджета";
	НадписьПризнакиУчетаБюджета = "Признаки учета бюджета";
	НадписьСтруктураСтатейБюджета = "Структура статей бюджета";
	фин_РаботаСДополнительнымиРазрезамиБюджетирования.ЗаполнитьСписокРазрезовУчета(СписокРазрезов);
	КопированиеСуществующего = Параметры.Свойство("Копирование") И Параметры.Копирование=Истина;
	Если Параметры.Свойство("Бюджет") Тогда
		Объект.Бюджет=Параметры.Бюджет;

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_Бюджеты.Наименование,
			|	фин_Бюджеты.НаименованиеПолное,
			|	фин_Бюджеты.ПодразделениеПоУмолчанию,
			|	фин_Бюджеты.ПроектПоУмолчанию,
			|	фин_Бюджеты.СпособСортировкиСтатей,
			|	фин_Бюджеты.СпособСортировкиСтатейПредставление,
			|	фин_Бюджеты.ИспользоватьКодыСтрокБюджета,
			|	фин_Бюджеты.УровеньДетализацииБюджета,
			|	фин_Бюджеты.ПозицияКлассификатора,
			|	фин_Бюджеты.ДоступноФормированиеНаОснованииПлановЗакупок,
			|	фин_Бюджеты.ДоступноФормированиеНаОснованииПлановДвиженияДенежныхСредств,
			|	фин_Бюджеты.ТочностьКоличественныхПоказателей,
			|	фин_Бюджеты.ФормулаКоличество,
			|	фин_Бюджеты.Код,
			|	фин_Бюджеты.Родитель,
			|	фин_Бюджеты.Комментарий,
			|	фин_ПараметрыСтатейБюджетаПоУмолчанию.ВерсионироватьПоУмолчанию,
			|	фин_Бюджеты.УчетПоСумме,
			|	фин_Бюджеты.УчетПоКоличеству,
			|	фин_ПараметрыСтатейБюджетаПоУмолчанию.СпособЦенообразования,
		//	|	фин_ПараметрыСтатейБюджетаПоУмолчанию.ОсновнаяВалюта,
			|	фин_ПараметрыСтатейБюджетаПоУмолчанию.Контрагент,
			|	фин_ПараметрыСтатейБюджетаПоУмолчанию.Проект,
			|	фин_ПараметрыСтатейБюджетаПоУмолчанию.Номенклатура,
			|	фин_ПараметрыСтатейБюджетаПоУмолчанию.Разрез1,
			|	фин_ПараметрыСтатейБюджетаПоУмолчанию.Разрез2,
			|	фин_ПараметрыСтатейБюджетаПоУмолчанию.Разрез3,
			|	фин_ПараметрыСтатейБюджетаПоУмолчанию.Разрез4,
			|	фин_ПараметрыСтатейБюджетаПоУмолчанию.Разрез5,
			|	фин_ПараметрыСтатейБюджетаПоУмолчанию.Разрез6,
			|	фин_ПараметрыСтатейБюджетаПоУмолчанию.Разрез7,
			|	фин_ПараметрыСтатейБюджетаПоУмолчанию.Разрез8,
			|	фин_ПараметрыСтатейБюджетаПоУмолчанию.Разрез9,
			|	фин_ПараметрыСтатейБюджетаПоУмолчанию.Разрез10,
			|	фин_ПараметрыСтатейБюджетаПоУмолчанию.УправленческоеПодразделение,
			|	фин_Бюджеты.ДляСпискаПодразделений,
			|	фин_Бюджеты.ВключаяПодчиненныеПодразделения,
			|	фин_ПараметрыСтатейБюджетаПоУмолчанию.ПоказательИсточникаДанныхДляЦены,
			|	фин_ПараметрыСтатейБюджетаПоУмолчанию.ИспользуемыйТипЦен,
			|	фин_ПараметрыСтатейБюджетаПоУмолчанию.ИсточникДанныхДляЦены,
			|	фин_Бюджеты.РежимыРасчетаИтоговойСтрокиБюджета,
			|	фин_Бюджеты.ИтоговаяФункция,
			|	фин_Бюджеты.Формула,
			|	фин_Бюджеты.РучнаяНастройкаИтоговПоГруппам
			|ИЗ
			|	Справочник.фин_Бюджеты КАК фин_Бюджеты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_ПараметрыСтатейБюджетаПоУмолчанию КАК фин_ПараметрыСтатейБюджетаПоУмолчанию
			|		ПО фин_Бюджеты.Ссылка = фин_ПараметрыСтатейБюджетаПоУмолчанию.Бюджет
			|ГДЕ
			|	фин_Бюджеты.Ссылка = &Бюджет";

		Запрос.УстановитьПараметр("Бюджет", Объект.Бюджет);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
            ЗаполнитьЗначенияСвойств(Объект,ВыборкаДетальныеЗаписи);
		КонецЕсли;

		Объект.РазрезыУчета.Загрузить(Объект.Бюджет.РазрезыУчета.Выгрузить());
		Для Каждого СтрокаРазрез Из Объект.РазрезыУчета Цикл
			СтрокаРазрез.ИспользоватьПоУмолчанию = Объект[фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(СтрокаРазрез.Измерение)];
		КонецЦикла;
		
		НастроитьРазрезыУчета();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СтатьиБюджета.Версия,
			|	ВерсииБюджетов.ПериодАктуальности КАК ПериодАктуальности
			|ИЗ
			|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ВерсииБюджетов КАК ВерсииБюджетов
			|		ПО СтатьиБюджета.Версия = ВерсииБюджетов.Ссылка
			|ГДЕ
			|	СтатьиБюджета.Владелец = &Владелец
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПериодАктуальности УБЫВ";

		Запрос.УстановитьПараметр("Владелец", Объект.Бюджет);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Версия = ВыборкаДетальныеЗаписи.Версия;
			мВерсия = Версия;
		КонецЕсли;
		ВерсионированиеСтатейИспользуется = (НЕ КопированиеСуществующего) И ВерсионированиеБюджетаИспользуется(Объект.Бюджет);
		Элементы.ФормаКомандаВерсионированиеСтатейИспользуется.Пометка 		= ВерсионированиеСтатейИспользуется;
		Элементы.ФормаКомандаВерсионированиеСтатейИспользуется.Доступность 	= НЕ ВерсионированиеСтатейИспользуется;
		
		ИндивидуальнаяНастройкаПризнаковУчетаДляСтатей = РазличныеПризнакиУчета(Объект.Бюджет);
		Элементы.ИндивидуальнаяНастройкаПризнаковУчетаДляСтатей.Доступность = (НЕ ИндивидуальнаяНастройкаПризнаковУчетаДляСтатей) ИЛИ (НЕ ВерсионированиеСтатейИспользуется);
		
		ИндивидуальнаяНастройкаЦенообразованияДляСтатей = ИндивидуальнаяНастройкаПризнаковУчетаДляСтатей ИЛИ РазличныеСпособыЦенообразования(Объект.Бюджет);
		Элементы.ИндивидуальнаяНастройкаЦенообразованияДляСтатей.Доступность = (НЕ ИндивидуальнаяНастройкаЦенообразованияДляСтатей) ИЛИ (НЕ ВерсионированиеСтатейИспользуется);
		
		ИндивидуальнаяНастройкаРазрезовУчетаДляСтатей = РазличныеРазрезыУчета(Объект.Бюджет);
		Элементы.ИндивидуальнаяНастройкаРазрезовУчетаДляСтатей.Доступность = (НЕ ИндивидуальнаяНастройкаРазрезовУчетаДляСтатей) ИЛИ (НЕ ВерсионированиеСтатейИспользуется);
		Если НЕ ИндивидуальнаяНастройкаРазрезовУчетаДляСтатей Тогда
			Для Каждого СтрокаРазрез Из Объект.РазрезыУчета Цикл
				СтрокаРазрез.ИспользоватьПоУмолчанию = Истина;
				попытка
					Объект[ПолучитьИмя(СтрокаРазрез.Измерение)]=Истина;
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
		
		РасширеннаяНастройкаИтоговПоСтатьямИГруппамСтатей = РазличныеНастройкиИтогов(Объект.Бюджет);
		Элементы.РасширеннаяНастройкаИтоговПоСтатьямИГруппамСтатей.Доступность = (НЕ РасширеннаяНастройкаИтоговПоСтатьямИГруппамСтатей) ИЛИ (НЕ ВерсионированиеСтатейИспользуется);

		ЗаполнитьСтатьиБюджета(КопированиеСуществующего);
		
		Если Объект.УровеньДетализацииБюджета= Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения Тогда
			Если Объект.ДляСпискаПодразделений Тогда

				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	фин_СписокБюджетовПоПодразделениям.УправленческоеПодразделение
					|ИЗ
					|	РегистрСведений.фин_СписокБюджетовПоПодразделениям КАК фин_СписокБюджетовПоПодразделениям
					|ГДЕ
					|	фин_СписокБюджетовПоПодразделениям.Бюджет = &Бюджет";

				Запрос.УстановитьПараметр("Бюджет", Объект.Бюджет);

				Результат = Запрос.Выполнить();

				ВыборкаДетальныеЗаписи = Результат.Выбрать();

				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					СписокПодразделений.Добавить(ВыборкаДетальныеЗаписи.УправленческоеПодразделение);
					ПредставлениеПодразделения = ПредставлениеПодразделения + Строка(ВыборкаДетальныеЗаписи.УправленческоеПодразделение)+"; ";
				КонецЦикла;

			ИначеЕсли Объект.ВключаяПодчиненныеПодразделения Тогда
				ПредставлениеПодразделения = "в группе: "+Объект.ПодразделениеПоУмолчанию;
			Иначе
				ПредставлениеПодразделения = Объект.ПодразделениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		ОбновитьСпискиВыбора();
	КонецЕсли;
	Если КопированиеСуществующего Тогда
		Объект.Бюджет=Справочники.фин_Бюджеты.ПустаяСсылка();
		Объект.Код = "";
		Модифицированность = Истина;
		Версия = Справочники.фин_ВерсииБюджетов.ПустаяСсылка();
		мВерсия = Версия;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Бюджет) Тогда
		Объект.ТочностьКоличественныхПоказателей = 2;
	КонецЕсли;
	ЭкспертныйРежим = Объект.РучнаяНастройкаИтоговПоГруппам ИЛИ  РасширеннаяНастройкаИтоговПоСтатьямИГруппамСтатей
						ИЛИ ИндивидуальнаяНастройкаПризнаковУчетаДляСтатей ИЛИ ИндивидуальнаяНастройкаЦенообразованияДляСтатей ИЛИ ИндивидуальнаяНастройкаРазрезовУчетаДляСтатей;
	Элементы.ФормаЭкспертныйРежим.Пометка = ЭкспертныйРежим;
	Элементы.ДекорацияСпособЦенообразования.Заголовок = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеСпособаЦенообразования(Объект,Истина);
	УправлениеФормой(ЭтотОбъект);
	фин_РаботаСДополнительнымиРазрезамиБюджетирования.НастроитьПредставлениеРазрезов(ЭтотОбъект,,,Ложь);
	Элементы.ДоступноФормированиеНаОснованииПлановДвиженияДенежныхСредств.Видимость = Метаданные.Документы.Найти("ден_ПланДвиженияДенежныхСредств")<>Неопределено;
	Элементы.ДоступноФормированиеНаОснованииПлановЗакупок.Видимость = Метаданные.Документы.Найти("узп_ПланЗакупок")<>Неопределено;
	Заголовок = Объект.Наименование;
	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПроектам") Тогда
		Элементы.УровеньДетализацииБюджета.СписокВыбора.Удалить(Элементы.УровеньДетализацииБюджета.СписокВыбора.НайтиПоЗначению(Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта));
	КонецЕсли;
	РежимИнтеграции = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Элементы.ФормаКнопкаПрисоединенныеФайлы.Видимость = РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана ИЛИ РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный ИЛИ РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3;
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазличныеСпособыЦенообразования(Бюджет)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатьиБюджета.ссылка
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|		ПО СтатьиБюджета.ФинансовыйПоказатель = фин_ФинансовыеПоказатели.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_ПараметрыСтатейБюджетаПоУмолчанию КАК ПараметрыСтатейБюджетаПоУмолчанию
		|			ПО ПараметрыСтатейБюджетаПоУмолчанию.Бюджет = &Владелец
		|ГДЕ
		|	СтатьиБюджета.Владелец = &Владелец
		|	И НЕ СтатьиБюджета.ПометкаУдаления
		|	И НЕ СтатьиБюджета.ЭтоГруппа
		|	И фин_ФинансовыеПоказатели.УчетПоСумме
		|	И фин_ФинансовыеПоказатели.УчетПоКоличеству
		|	И (фин_ФинансовыеПоказатели.СпособЦенообразования <> ПараметрыСтатейБюджетаПоУмолчанию.СпособЦенообразования
		|			ИЛИ фин_ФинансовыеПоказатели.ИсточникДанныхДляЦены <> ПараметрыСтатейБюджетаПоУмолчанию.ИсточникДанныхДляЦены
		|			ИЛИ фин_ФинансовыеПоказатели.ПоказательИсточникаДанныхДляЦены <> ПараметрыСтатейБюджетаПоУмолчанию.ПоказательИсточникаДанныхДляЦены
		|			ИЛИ фин_ФинансовыеПоказатели.ИспользуемыйТипЦен <> ПараметрыСтатейБюджетаПоУмолчанию.ИспользуемыйТипЦен)";

	Запрос.УстановитьПараметр("Владелец", 			Бюджет);
	Запрос.УстановитьПараметр("УчетПоСумме", 		Бюджет.УчетПоСумме);
	Запрос.УстановитьПараметр("УчетПоКоличеству", 	Бюджет.УчетПоКоличеству);

	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
КонецФункции

&НаСервереБезКонтекста
Функция РазличныеНастройкиИтогов(Бюджет)
	Возврат Справочники.фин_Бюджеты.РазличныеНастройкиИтоговВСтатьяхБюджета(Бюджет);
КонецФункции

&НаСервереБезКонтекста
Функция РазличныеПризнакиУчета(Бюджет)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатьиБюджета.Ссылка
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|		ПО СтатьиБюджета.ФинансовыйПоказатель = фин_ФинансовыеПоказатели.Ссылка
		|ГДЕ
		|	СтатьиБюджета.Владелец = &Владелец
		|	И НЕ СтатьиБюджета.ПометкаУдаления
		|	И НЕ СтатьиБюджета.ЭтоГруппа
		|	И (фин_ФинансовыеПоказатели.УчетПоСумме <> &УчетПоСумме
		|			ИЛИ фин_ФинансовыеПоказатели.УчетПоКоличеству <> &УчетПоКоличеству)";

	Запрос.УстановитьПараметр("Владелец", 			Бюджет);
	Запрос.УстановитьПараметр("УчетПоСумме", 		Бюджет.УчетПоСумме);
	Запрос.УстановитьПараметр("УчетПоКоличеству", 	Бюджет.УчетПоКоличеству);

	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
КонецФункции

&НаСервереБезКонтекста
Функция РазличныеРазрезыУчета(Бюджет)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатьиБюджета.Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТЧ_РазрезыУчета.Измерение) КАК Измерение
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|		ПО СтатьиБюджета.ФинансовыйПоказатель = фин_ФинансовыеПоказатели.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели.РазрезыУчета КАК ТЧ_РазрезыУчета
		|		ПО (фин_ФинансовыеПоказатели.Ссылка = ТЧ_РазрезыУчета.Ссылка)
		|ГДЕ
		|	СтатьиБюджета.Владелец = &Владелец
		|	И НЕ СтатьиБюджета.ПометкаУдаления
		|	И НЕ СтатьиБюджета.ЭтоГруппа
		|	И ТЧ_РазрезыУчета.Измерение В(&РазрезыУчета)
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатьиБюджета.Ссылка
		|ИМЕЮЩИЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТЧ_РазрезыУчета.Измерение)<&КоличествоРазрезов";

	ТЧ_Разрезы = Бюджет.РазрезыУчета.Выгрузить();
	Запрос.УстановитьПараметр("Владелец", 			Бюджет);
	Запрос.УстановитьПараметр("РазрезыУчета", 		ТЧ_Разрезы.ВыгрузитьКолонку("Измерение"));
	Запрос.УстановитьПараметр("КоличествоРазрезов",	ТЧ_Разрезы.Количество());

	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
КонецФункции

&НаСервереБезКонтекста
Функция ВерсионированиеБюджетаИспользуется(Бюджет)
	Возврат Справочники.фин_Бюджеты.ВерсионированиеБюджетаИспользуется(Бюджет);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	Элементы 	= Форма.Элементы;
	Объект 		= Форма.Объект;
	Элементы.ТочностьКоличественныхПоказателей.Видимость= Объект.УчетПоКоличеству;
	//Элементы.ОсновнаяВалюта.Видимость					= Объект.УчетПоСумме;
	Элементы.ДеревоСтатейУчетПоСумме.Видимость    		= Объект.УчетПоСумме;
	//Элементы.ДеревоСтатейОсновнаяВалюта.Видимость		= Объект.УчетПоСумме;
	Элементы.ДекорацияСпособЦенообразования.Видимость 			= Объект.УчетПоКоличеству И Объект.УчетПоСумме;
	//Элементы.СпособЦенообразования.Видимость 			= Объект.УчетПоКоличеству И Объект.УчетПоСумме;
	Элементы.ИндивидуальнаяНастройкаЦенообразованияДляСтатей.Видимость 	= Объект.УчетПоКоличеству И Объект.УчетПоСумме И Форма.ЭкспертныйРежим И НЕ Форма.ИндивидуальнаяНастройкаПризнаковУчетаДляСтатей;
	Элементы.ДеревоСтатейГруппаПризнакиУчета.Видимость 	= Форма.ИндивидуальнаяНастройкаПризнаковУчетаДляСтатей;
	Элементы.ДеревоСтатейГруппаРазрезыУчета.Видимость 	= Форма.ИндивидуальнаяНастройкаРазрезовУчетаДляСтатей;
	Элементы.ДеревоСтатейИтогиПредставление.Видимость 	= Форма.РасширеннаяНастройкаИтоговПоСтатьямИГруппамСтатей;
	Элементы.РазрезыУчетаИспользоватьПоУмолчанию.Видимость	= Форма.ИндивидуальнаяНастройкаРазрезовУчетаДляСтатей;
	Элементы.ДеревоСтатейУчетПоКоличеству.Видимость		= Объект.УчетПоКоличеству;
	Элементы.ДеревоСтатейСпособЦенообразования.Видимость= Объект.УчетПоКоличеству И Объект.УчетПоСумме И Форма.ИндивидуальнаяНастройкаЦенообразованияДляСтатей;
//	Элементы.ДеревоСтатейИсключитьИзИтогов.Видимость	= НЕ Объект.РучнаяНастройкаИтоговПоГруппам;
	Элементы.Формула.Видимость 							= Объект.УчетПоСумме И Объект.РежимыРасчетаИтоговойСтрокиБюджета=ПредопределенноеЗначение("Перечисление.фин_РежимыРасчетаИтоговойСтрокиБюджета.ПоФормуле");
	Элементы.ФормулаКоличество.Видимость 				= Объект.УчетПоКоличеству И Объект.РежимыРасчетаИтоговойСтрокиБюджета=ПредопределенноеЗначение("Перечисление.фин_РежимыРасчетаИтоговойСтрокиБюджета.ПоФормуле");
	Элементы.ИтоговаяФункция.Видимость 					= Объект.РежимыРасчетаИтоговойСтрокиБюджета=ПредопределенноеЗначение("Перечисление.фин_РежимыРасчетаИтоговойСтрокиБюджета.ПоИтоговойФункции");
	Элементы.ДеревоСтатейКодСтрокиБюджета.Видимость 	= Объект.ИспользоватьКодыСтрокБюджета;
	//Элементы.ИсточникДанныхДляЦены.Видимость 			= Объект.СпособЦенообразования=ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоДаннымИсточникаРасчетов");
	//Элементы.ПоказательИсточникаДанныхДляЦены.Видимость = Объект.СпособЦенообразования=ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоДаннымИсточникаРасчетов");
	//Элементы.ИспользуемыйТипЦен.Видимость 				= Объект.СпособЦенообразования=ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоПрогнознымЦенамНоменклатуры") ИЛИ Объект.СпособЦенообразования=ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоБухгалтерскимЦенамНоменклатуры") ИЛИ Объект.СпособЦенообразования=ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоЦенамПоставщиков");
	
	Элементы.Версия.Видимость							= Форма.ВерсионированиеСтатейИспользуется;
	Элементы.ВерсионироватьПоУмолчанию.Видимость		= Форма.ВерсионированиеСтатейИспользуется;
	Элементы.ДеревоСтатейВерсия.Видимость				= Форма.ВерсионированиеСтатейИспользуется;
	Элементы.ФормаКнопкаСтруктураВерсий.Видимость		= Форма.ВерсионированиеСтатейИспользуется;
	
	Элементы.РучнаяНастройкаИтоговПоГруппам.Видимость						= Форма.ЭкспертныйРежим;
	Элементы.РасширеннаяНастройкаИтоговПоСтатьямИГруппамСтатей.Видимость	= Форма.ЭкспертныйРежим;
	Элементы.ИндивидуальнаяНастройкаПризнаковУчетаДляСтатей.Видимость		= Форма.ЭкспертныйРежим;
	Элементы.ИндивидуальнаяНастройкаРазрезовУчетаДляСтатей.Видимость		= Форма.ЭкспертныйРежим;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьРазрезыУчета()
	ПолныйСписокРазрезов = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ВсеРазрезы();
	Для Каждого Разрез Из ПолныйСписокРазрезов Цикл
		НаличиеРазреза 								= Объект.РазрезыУчета.НайтиСтроки(Новый Структура("Измерение",Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез])).Количество()>0;
		Элементы["ДеревоСтатей"+Разрез].Видимость 	= НаличиеРазреза;
		Элементы[Разрез].Видимость 					= НаличиеРазреза;
		Представление 								= фин_РаботаСДополнительнымиРазрезамиБюджетирования.ПредставлениеРазреза(Перечисления.фин_ФактическиеПоказателиБюджетирования[Разрез]);
		Элементы["ДеревоСтатей"+Разрез].Заголовок 	= Представление;
		Элементы[Разрез].Заголовок 					= Представление;
	КонецЦикла;
	Элементы.ДеревоСтатейУправленческоеПодразделение.ТолькоПросмотр = Ложь;
	Элементы.ДеревоСтатейПроект.ТолькоПросмотр 						= Ложь;
	Элементы.УправленческоеПодразделение.ТолькоПросмотр				= Ложь;
	Элементы.Проект.ТолькоПросмотр									= Ложь;
	Если Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") Тогда
		Элементы.ДеревоСтатейУправленческоеПодразделение.ТолькоПросмотр	= Истина;
		Элементы.УправленческоеПодразделение.ТолькоПросмотр				= Истина;
		Элементы.ПодразделениеПоУмолчанию.ТолькоПросмотр				= Ложь;
		Элементы.ПроектПоУмолчанию.ТолькоПросмотр						= Истина;
	ИначеЕсли Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта") Тогда
		Элементы.ДеревоСтатейПроект.ТолькоПросмотр			= Истина;
		Элементы.Проект.ТолькоПросмотр						= Истина;
		Элементы.ПодразделениеПоУмолчанию.ТолькоПросмотр	= Истина;
		Элементы.ПроектПоУмолчанию.ТолькоПросмотр			= Ложь;
	Иначе
		Элементы.ПодразделениеПоУмолчанию.ТолькоПросмотр	= Ложь;
		Элементы.ПроектПоУмолчанию.ТолькоПросмотр			= Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатьиБюджета(КопированиеСуществующего=Ложь)
	МаксимальныйИдентификатор = 0;
    Дерево = ДанныеФормыВЗначение(ДеревоСтатей,Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();
    фин_ЗащитаПривилегированныеПроцедуры.ЗаполнитьСтатьиБюджета(Дерево,Объект.Бюджет,Объект.РазрезыУчета,МаксимальныйИдентификатор,Версия,Объект.СпособСортировкиСтатей,КопированиеСуществующего);
	
	ЗначениеВДанныеФормы(Дерево,ДеревоСтатей);
	Элементы.ДеревоСтатей.Обновить();
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияВСтрокеИВПодчиненных(СтрокаДерева,Реквизит,Значение)
	СтрокаДерева[Реквизит] = Значение;
	Для Каждого Элемент Из СтрокаДерева.Строки Цикл
		Если НЕ Элемент.ЭтоГруппа Тогда
			Элемент.Модифицирована = (Элемент[Реквизит] <> Значение);
			Элемент[Реквизит] = Значение;
		Иначе
			Элемент.Модифицирована = (Элемент[Реквизит] <> Значение);
			УстановитьЗначенияВСтрокеИВПодчиненных(Элемент,Реквизит,Значение);
		КонецЕсли;
	КонецЦикла;
 КонецПроцедуры

&НаСервере
Функция ОпределитьРодителя(СсылкаНаРодителя,Дерево)
	Если ЗначениеЗаполнено(СсылкаНаРодителя) Тогда
		СуществующиеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Ссылка",СсылкаНаРодителя),Истина);
		Если СуществующиеСтроки.Количество()>0 Тогда
			Возврат СуществующиеСтроки[0];
		Иначе
			РодительНовойСтроки = ОпределитьРодителя(СсылкаНаРодителя.Родитель,Дерево);
			НоваяСтрока = РодительНовойСтроки.Строки.Добавить();
			НоваяСтрока.Идентификатор = МаксимальныйИдентификатор;
			МаксимальныйИдентификатор = МаксимальныйИдентификатор + 1;
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СсылкаНаРодителя);
			НоваяСтрока.Картинка = ?(СсылкаНаРодителя.ПометкаУдаления,3,0);
			Возврат НоваяСтрока;
		КонецЕсли;
	Иначе
		Возврат Дерево.Строки[0];
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ДекорацияОсновноеНажатие(Элемент)
	Элементы.ДекорацияОсновное.Рамка=Новый Рамка(ТипРамкиЭлементаУправления.Выпуклая,1);
	Элементы.ДекорацияСтруктураСтатей.Рамка=Новый Рамка(ТипРамкиЭлементаУправления.Выпуклая,1);
	Элементы.ДекорацияРазрезыБюджета.Рамка=Новый Рамка(ТипРамкиЭлементаУправления.Выпуклая,1);
	Элементы.ДекорацияДополнительно.Рамка=Новый Рамка(ТипРамкиЭлементаУправления.Выпуклая,1);
	Элемент.Рамка=Новый Рамка(ТипРамкиЭлементаУправления.Вдавленная,2);
	Элементы.Страницы.ТекущаяСтраница=Элементы.Страницы.ПодчиненныеЭлементы[Сред(Элемент.Имя,СтрДлина("Декорация")+1)];
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтатью(Команда)
	НоваяСтрока = НоваяСтрока();
	Если НоваяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НоваяСтрока.Картинка = 1;
	НоваяСтрока.ВидПоказателя = ПредопределенноеЗначение("Перечисление.фин_ВидыФинансовыхПоказателей.Оборотный");
	НоваяСтрока.Модифицирована = Истина;
	ЗаполнитьЗначенияСвойств(НоваяСтрока,Объект,"УчетПоСумме,УчетПоКоличеству,СпособЦенообразования,Контрагент,Проект,Номенклатура,УправленческоеПодразделение,Разрез1,Разрез2,Разрез3,Разрез4,Разрез5,Разрез6,Разрез7,Разрез8,Разрез9,Разрез10,ИспользуемыйТипЦен,ИсточникДанныхДляЦены,ПоказательИсточникаДанныхДляЦены");
	НоваяСтрока.ЦенообразованиеПредставление = ТекстЦены(НоваяСтрока);
	НоваяСтрока.ИтоговаяФункция = ПредопределенноеЗначение("Перечисление.фин_ИтоговыеФункции.Сумма");
	НоваяСтрока.ИсключитьИзИтогов = Объект.РучнаяНастройкаИтоговПоГруппам;
	НоваяСтрока.ИтогиПредставление = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеНастроекИтогов(НоваяСтрока);
	НоваяСтрока.ВидСтрокиБюджета = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокБюджета.Первичная");
	НоваяСтрока.РасчетыПредставление = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеНастроекРасчетов(НоваяСтрока);
	Если Объект.ВерсионироватьПоУмолчанию Тогда
		НоваяСтрока.Версия = Версия;
	КонецЕсли;
	Если Объект.ИспользоватьКодыСтрокБюджета Тогда
		НоваяСтрока.КодСтрокиБюджета = ПолучитьКодСтроки(НоваяСтрока.ПолучитьИдентификатор()); 
	КонецЕсли;
	Элементы.ДеревоСтатей.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Функция ТекстЦены(СтрокаДерева)
	Возврат фин_ОбщегоНазначенияКлиентСервер.ПредставлениеСпособаЦенообразования(СтрокаДерева);
КонецФункции

&НаСервере
Функция ТекстЦеныСервер(СтрокаДерева)
	Возврат фин_ОбщегоНазначенияКлиентСервер.ПредставлениеСпособаЦенообразования(СтрокаДерева);
КонецФункции

&НаКлиенте
Функция НоваяСтрока(Ид=Неопределено)
	Если Ид = Неопределено И Элементы.ДеревоСтатей.ТекущиеДанные=Неопределено Тогда
		Если ДеревоСтатей.ПолучитьЭлементы().Количество()=0 Тогда
			ПоказатьПредупреждение(,"Невозможно добавить статью! Требуется указать группу для добавления");
			Возврат Неопределено;
		Иначе
			НоваяСтрока = ДеревоСтатей.ПолучитьЭлементы()[0].ПолучитьЭлементы().Добавить();
		КонецЕсли;
	Иначе
		ВыбраннаяСтрока = ДеревоСтатей.НайтиПоИдентификатору(?(Ид=Неопределено,Элементы.ДеревоСтатей.ТекущаяСтрока,Ид));
		Если ВыбраннаяСтрока.ЭтоГруппа Тогда
			Если ВыбраннаяСтрока.ПометкаУдаления Тогда
				ПоказатьПредупреждение(,"Невозможно добавить статью в помеченную на удаление группу!");
				Возврат Неопределено;
			КонецЕсли;
			НоваяСтрока = ВыбраннаяСтрока.ПолучитьЭлементы().Добавить();
		Иначе
			РодительСтроки = ВыбраннаяСтрока.ПолучитьРодителя();
			Если РодительСтроки = Неопределено Тогда
				НоваяСтрока = ДеревоСтатей.ПолучитьЭлементы().Добавить();
			Иначе
				Если РодительСтроки.ПометкаУдаления Тогда
					ПоказатьПредупреждение(,"Невозможно добавить статью в помеченную на удаление группу!");
					Возврат Неопределено;
				КонецЕсли;
				НоваяСтрока = РодительСтроки.ПолучитьЭлементы().Добавить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	НоваяСтрока.Идентификатор = МаксимальныйИдентификатор;
	МаксимальныйИдентификатор = МаксимальныйИдентификатор + 1;
	Возврат НоваяСтрока;
КонецФункции

&НаСервере
Функция НоваяСтрокаНаСервере(Ид=Неопределено)
	Если Ид = Неопределено И Элементы.ДеревоСтатей.ТекущиеДанные=Неопределено Тогда
		НоваяСтрока = ДеревоСтатей.ПолучитьЭлементы().Добавить();
	Иначе
		ВыбраннаяСтрока = ДеревоСтатей.НайтиПоИдентификатору(?(Ид=Неопределено,Элементы.ДеревоСтатей.ТекущаяСтрока,Ид));
		Если ВыбраннаяСтрока.ЭтоГруппа Тогда
			Если ВыбраннаяСтрока.ПометкаУдаления Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Невозможно добавить статью в помеченную на удаление группу!");
				Возврат Неопределено;
			КонецЕсли;
			НоваяСтрока = ВыбраннаяСтрока.ПолучитьЭлементы().Добавить();
		Иначе
			РодительСтроки = ВыбраннаяСтрока.ПолучитьРодителя();
			Если РодительСтроки = Неопределено Тогда
				НоваяСтрока = ДеревоСтатей.ПолучитьЭлементы().Добавить();
			Иначе
				Если РодительСтроки.ПометкаУдаления Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Невозможно добавить статью в помеченную на удаление группу!");
					Возврат Неопределено;
				КонецЕсли;
				НоваяСтрока = РодительСтроки.ПолучитьЭлементы().Добавить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	НоваяСтрока.Идентификатор = МаксимальныйИдентификатор;
	МаксимальныйИдентификатор = МаксимальныйИдентификатор + 1;
	Возврат НоваяСтрока;
КонецФункции


&НаСервере
Функция ПолучитьКодСтроки(СтрокаДерева)
	 ВыбраннаяСтрока = ДеревоСтатей.НайтиПоИдентификатору(СтрокаДерева);
	 Если ВыбраннаяСтрока.ПолучитьРодителя()=Неопределено Тогда
		 Возврат "";
	 Иначе
		 Возврат ВыбраннаяСтрока.ПолучитьРодителя().КодСтрокиБюджета;
	 КонецЕсли;
КонецФункции


&НаКлиенте
Процедура ДобавитьГруппуСтатей(Команда)
	НоваяСтрока = НоваяСтрока();
	Если НоваяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НоваяСтрока.Картинка = 0;
	НоваяСтрока.ЭтоГруппа = Истина;
	НоваяСтрока.Модифицирована = Истина;
	НоваяСтрока.ИтоговаяФункция = ПредопределенноеЗначение("Перечисление.фин_ИтоговыеФункции.Сумма");
	Если Объект.ИспользоватьКодыСтрокБюджета Тогда
		НоваяСтрока.КодСтрокиБюджета = ПолучитьКодСтроки(НоваяСтрока.ПолучитьИдентификатор()); 
	КонецЕсли;
	Элементы.ДеревоСтатей.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Модифицированность = Истина;
КонецПроцедуры


&НаКлиенте
Процедура Удалить(Команда)
	Если Элементы.ДеревоСтатей.ТекущиеДанные<>Неопределено Тогда
		ВыбраннаяСтрока = ДеревоСтатей.НайтиПоИдентификатору(Элементы.ДеревоСтатей.ТекущаяСтрока);
		Если ВыбраннаяСтрока.Идентификатор = -1000 Тогда
			Возврат;
		КонецЕсли;
		Если ВыбраннаяСтрока.ПометкаУдаления И ВыбраннаяСтрока.ПолучитьРодителя()<>Неопределено И ВыбраннаяСтрока.ПолучитьРодителя().ПометкаУдаления Тогда
			ПоказатьПредупреждение(,"Невозможно снять пометку удаления с элемента в помеченной на удаление группе!");
			Возврат;
		КонецЕсли;
		Удалять = (Не ЗначениеЗаполнено(ВыбраннаяСтрока.Ссылка)) И ВыбраннаяСтрока.ПолучитьЭлементы().Количество()=0;
		ОписаниеОбработкаСнятияПометки = Новый ОписаниеОповещения("ОбработкаСнятияПометки",ЭтотОбъект,ВыбраннаяСтрока);
		ПоказатьВопрос(ОписаниеОбработкаСнятияПометки,?(ВыбраннаяСтрока.ПометкаУдаления,"Снять пометку удаления с элемента?",?(Удалять,"Удалить элемент?","Пометить элемент на удаление?")),РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСнятияПометки(Ответ,ВыбраннаяСтрока) Экспорт
	Если Ответ = Неопределено ИЛИ Ответ=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Удалять = (Не ЗначениеЗаполнено(ВыбраннаяСтрока.Ссылка)) И ВыбраннаяСтрока.ПолучитьЭлементы().Количество()=0;
	Если Удалять Тогда
		РодительСтроки = ВыбраннаяСтрока.ПолучитьРодителя();
		Если РодительСтроки = Неопределено Тогда
			ДеревоСтатей.ПолучитьЭлементы().Удалить(ВыбраннаяСтрока);
		Иначе
			РодительСтроки.ПолучитьЭлементы().Удалить(ВыбраннаяСтрока);
		КонецЕсли;
	Иначе
		ВыбраннаяСтрока.ПометкаУдаления = НЕ ВыбраннаяСтрока.ПометкаУдаления;
		ВыбраннаяСтрока.Модифицирована 	= Истина;
		ВыбраннаяСтрока.Картинка = ?(ВыбраннаяСтрока.ЭтоГруппа,?(ВыбраннаяСтрока.ПометкаУдаления,3,0),?(ВыбраннаяСтрока.ПометкаУдаления,2,1));
		УстановитьПометкуУдаленияВПодчиненных(ВыбраннаяСтрока);
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьПометкуУдаленияВПодчиненных(ВыбраннаяСтрока)
	Для Каждого Элемент Из ВыбраннаяСтрока.ПолучитьЭлементы() Цикл
		Элемент.ПометкаУдаления = ВыбраннаяСтрока.ПометкаУдаления;
		Элемент.Картинка = ?(Элемент.ЭтоГруппа,?(Элемент.ПометкаУдаления,3,0),?(Элемент.ПометкаУдаления,2,1));
		УстановитьПометкуУдаленияВПодчиненных(Элемент);
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ПереместитьВГруппу(Команда)
	ДанныеВыбора = Новый Массив;
	ПереносимаяСтрока = ДеревоСтатей.НайтиПоИдентификатору(Элементы.ДеревоСтатей.ТекущаяСтрока);
	Для Каждого Элемент Из ДеревоСтатей.ПолучитьЭлементы() Цикл
		Если Элемент.ЭтоГруппа И ПереносимаяСтрока<>Элемент Тогда
			Если Элемент.Идентификатор<>-1000 Тогда
				ДанныеВыбора.Добавить(Новый Структура("Наименование,Идентификатор,ИдентификаторРодителя",Элемент.Наименование,Элемент.ПолучитьИдентификатор(),-1));
			КонецЕсли;
			ДобавитьДанныеПоПодчиненным(ДанныеВыбора,Элемент,ПереносимаяСтрока);
		КонецЕсли;
	КонецЦикла;
	ОписаниеОбработкаВыборГруппы = Новый ОписаниеОповещения("ОбработкаВыборГруппы",ЭтотОбъект,ПереносимаяСтрока);
	ОткрытьФорму("Обработка.фин_УправлениеСтруктуройБюджета.Форма.ФормаВыбораГруппы",Новый Структура("ЭлементыДерева",ДанныеВыбора),ЭтотОбъект,,,,ОписаниеОбработкаВыборГруппы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыборГруппы(РезультатВыбора,ПереносимаяСтрока) Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		ПереносимаяСтрока.Модифицирована = Истина;
		СтрокаПриемник = ?(РезультатВыбора=-1,ДеревоСтатей.ПолучитьЭлементы()[0],ДеревоСтатей.НайтиПоИдентификатору(РезультатВыбора));
		НоваяСтрока = ПеренестиДанныеСтроки(ПереносимаяСтрока,СтрокаПриемник);
		Элементы.ДеревоСтатей.ТекущаяСтрока = НоваяСтрока;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПеренестиДанныеСтроки(ПереносимаяСтрока,СтрокаПриемник)
	НоваяСтрока = СтрокаПриемник.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ПереносимаяСтрока);
	ЭлементыСтроки = ПереносимаяСтрока.ПолучитьЭлементы();
	Пока ЭлементыСтроки.Количество()>0 Цикл
		ПодчиненнаяСтрока = ЭлементыСтроки[0];
		ПеренестиДанныеСтроки(ПодчиненнаяСтрока,НоваяСтрока);
	КонецЦикла;
	Набор = ?(ПереносимаяСтрока.ПолучитьРодителя()=Неопределено,ДеревоСтатей,ПереносимаяСтрока.ПолучитьРодителя());
	Набор.ПолучитьЭлементы().Удалить(ПереносимаяСтрока);
	Возврат НоваяСтрока.ПолучитьИдентификатор();
КонецФункции

&НаКлиенте
Процедура ДобавитьДанныеПоПодчиненным(ДанныеВыбора,ЭлементСтрока,ПереносимаяСтрока)
	Для Каждого Элемент Из ЭлементСтрока.ПолучитьЭлементы() Цикл
		Если Элемент.ЭтоГруппа И ПереносимаяСтрока<>Элемент Тогда
			ДанныеВыбора.Добавить(Новый Структура("Наименование,Идентификатор,ИдентификаторРодителя",Элемент.Наименование,Элемент.ПолучитьИдентификатор(),?(ЭлементСтрока.Идентификатор=-1000,-1,ЭлементСтрока.ПолучитьИдентификатор())));
			ДобавитьДанныеПоПодчиненным(ДанныеВыбора,Элемент,ПереносимаяСтрока);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ИерархическийПросмотр(Команда)
	Элементы.ДеревоСтатейИерархическийПросмотр.Пометка = НЕ Элементы.ДеревоСтатейИерархическийПросмотр.Пометка;
	Элементы.ДеревоСтатей.Отображение=?(Элементы.ДеревоСтатейИерархическийПросмотр.Пометка,ОтображениеТаблицы.Дерево,ОтображениеТаблицы.Список);
КонецПроцедуры


&НаКлиенте
Процедура ДеревоСтатейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	//Элементы.ДеревоСтатей.ТекущиеДанные.Модифицирована = Истина;
	Модифицированность = Истина;
КонецПроцедуры


&НаКлиенте
Процедура ВерсияПриИзменении(Элемент)
	Если мВерсия<>Версия Тогда
		Если Объект.Бюджет.Пустая() Тогда
			мВерсия=Версия;
		ИначеЕсли Модифицированность И ДеревоСтатей.ПолучитьЭлементы().Количество()<>0 Тогда
			ОписаниеВопросОбИзмененииВерсии = Новый ОписаниеОповещения("ОбработкаВопросОбИзмененииВерсии",ЭтотОбъект);
			ПоказатьВопрос(ОписаниеВопросОбИзмененииВерсии,"Если были изменения в составе статей текущей версии, при выборе другой версии они не будут сохранены. Продолжить без сохранения?",РежимДиалогаВопрос.ДаНет);
		Иначе
			ЗаполнитьСтатьиБюджета();
			РазвернутьСтатьи();
			мВерсия=Версия;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросОбИзмененииВерсии(Ответ,ДополнительныеПараметры) Экспорт
	Если Ответ=Неопределено Тогда
		Возврат;
	ИначеЕсли Ответ=КодВозвратаДиалога.Нет Тогда
		Версия = мВерсия;
		Возврат;
	КонецЕсли;
	ЗаполнитьСтатьиБюджета();
	РазвернутьСтатьи();
	мВерсия=Версия;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НЕ ЗначениеЗаполнено(Объект.Бюджет) Тогда
		ДекорацияОсновноеНажатие(Элементы.ДекорацияОсновное);
	КонецЕсли;
	РазвернутьСтатьи();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтатьи()
	Для Каждого Элемент Из ДеревоСтатей.ПолучитьЭлементы() Цикл
		Элементы.ДеревоСтатей.Развернуть(Элемент.ПолучитьИдентификатор(),Истина);
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура УровеньДетализацииБюджетаПриИзменении(Элемент)
	Если Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") Тогда
		Объект.Проект=фин_ОбщегоНазначенияКлиентПовтИсп.ПустоеЗначениеПроект();
		Объект.УправленческоеПодразделение=Истина;
		Если Объект.РазрезыУчета.НайтиСтроки(Новый Структура("Измерение",ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение"))).Количество()=0 Тогда
			НоваяСтрока = Объект.РазрезыУчета.Добавить();
			НоваяСтрока.Измерение = ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение");
			НоваяСтрока.Разрез = ПредопределенноеЗначение("ПланВидовХарактеристик.фин_ВидыСубконтоБюджетирования.ЦФО");
		КонецЕсли;
		Для Каждого Элемент Из ДеревоСтатей.ПолучитьЭлементы() Цикл
			Если НЕ Элемент.ЭтоГруппа Тогда
				Элемент.УправленческоеПодразделение = Истина;
				Элемент.Модифицирована = Истина;
			Иначе
				УстановитьЗначенияВПодчиненных(Элемент,"УправленческоеПодразделение",Истина);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта") Тогда
		Объект.УправленческоеПодразделение = фин_ОбщегоНазначенияКлиентПовтИсп.ПустоеЗначениеУправленческоеПодразделение();
		Объект.ВключаяПодчиненныеПодразделения = Ложь;
		Объект.ДляСпискаПодразделений=Ложь;
		СписокПодразделений.Очистить();
		ПредставлениеПодразделения = "";
		Объект.Проект=Истина;
		Если Объект.РазрезыУчета.НайтиСтроки(Новый Структура("Измерение",ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.Проект"))).Количество()=0 Тогда
			НоваяСтрока = Объект.РазрезыУчета.Добавить();
			НоваяСтрока.Измерение = ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.Проект");
			НоваяСтрока.Разрез = ПредопределенноеЗначение("ПланВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Проекты");
		КонецЕсли;	
		Для Каждого Элемент Из ДеревоСтатей.ПолучитьЭлементы() Цикл
			Если НЕ Элемент.ЭтоГруппа Тогда
				Элемент.Проект = Истина;
				Элемент.Модифицирована = Истина;
			Иначе
				УстановитьЗначенияВПодчиненных(Элемент,"Проект",Истина);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Объект.Проект=фин_ОбщегоНазначенияКлиентПовтИсп.ПустоеЗначениеПроект();
		Объект.УправленческоеПодразделение = фин_ОбщегоНазначенияКлиентПовтИсп.ПустоеЗначениеУправленческоеПодразделение();
		Объект.ВключаяПодчиненныеПодразделения = Ложь;
		Объект.ДляСпискаПодразделений=Ложь;
		СписокПодразделений.Очистить();
		ПредставлениеПодразделения = "";
	КонецЕсли;
	НастроитьРазрезыУчета();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияВПодчиненных(СтрокаДерева,Реквизит,Значение,мТекущийРазрез=Неопределено)
	Для Каждого Элемент Из СтрокаДерева.ПолучитьЭлементы() Цикл
		Если НЕ Элемент.ЭтоГруппа Тогда
			Элемент.Модифицирована = (Элемент[Реквизит] <> Значение);
			Элемент[Реквизит] = ?(мТекущийРазрез=Неопределено ИЛИ НЕ ЗначениеЗаполнено(Элемент.ФинансовыйПоказатель),Значение,?(ИндивидуальнаяНастройкаРазрезовУчетаДляСтатей,ВедетсяУчет(Элемент.ФинансовыйПоказатель,мТекущийРазрез),Значение));
		Иначе
			УстановитьЗначенияВПодчиненных(Элемент,Реквизит,Значение,мТекущийРазрез);
		КонецЕсли;
	КонецЦикла;
 КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияВПодчиненныхНаСервере(СтрокаДерева,Реквизит,Значение,мТекущийРазрез=Неопределено)
	Для Каждого Элемент Из СтрокаДерева.ПолучитьЭлементы() Цикл
		Если НЕ Элемент.ЭтоГруппа Тогда
			Элемент.Модифицирована = Элемент.Модифицирована ИЛИ (Элемент[Реквизит] <> Значение);
			Элемент[Реквизит] = ?(мТекущийРазрез=Неопределено ИЛИ НЕ ЗначениеЗаполнено(Элемент.ФинансовыйПоказатель),Значение,?(ИндивидуальнаяНастройкаРазрезовУчетаДляСтатей,ВедетсяУчет(Элемент.ФинансовыйПоказатель,мТекущийРазрез),Значение));
		Иначе
			УстановитьЗначенияВПодчиненныхНаСервере(Элемент,Реквизит,Значение,мТекущийРазрез);
		КонецЕсли;
	КонецЦикла;
 КонецПроцедуры


&НаКлиенте
 Процедура ИспользоватьКодыСтрокБюджетаПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
	 Если Объект.СпособСортировкиСтатей = "КодСтрокиБюджета" И НЕ Объект.ИспользоватьКодыСтрокБюджета Тогда
		 Объект.СпособСортировкиСтатей="";
		 Объект.СпособСортировкиСтатейПредставление="";
	 КонецЕсли;
 	Модифицированность = Истина;
КонецПроцедуры


&НаКлиенте
Процедура СпособСортировкиСтатейПредставлениеПриИзменении(Элемент)
	 Если Объект.СпособСортировкиСтатей<>"" Тогда
		ВыполнитьСортировку();
	 КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьСортировку() 
	Дерево = ДанныеФормыВЗначение(ДеревоСтатей,Тип("ДеревоЗначений"));
	Дерево.Строки.Сортировать(Объект.СпособСортировкиСтатей,Истина);
	ЗначениеВДанныеФормы(Дерево,ДеревоСтатей);
КонецПроцедуры

&НаКлиенте
Процедура СпособСортировкиСтатейПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	Если Объект.ИспользоватьКодыСтрокБюджета Тогда
		ДанныеВыбора.Добавить("КодСтрокиБюджета","Код строки бюджета");
	КонецЕсли;
	ДанныеВыбора.Добавить("Наименование");
	ДанныеВыбора.Добавить("Код");
КонецПроцедуры

&НаКлиенте
Процедура СпособСортировкиСтатейПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Объект.СпособСортировкиСтатей = ВыбранноеЗначение;
	Если ВыбранноеЗначение = "КодСтрокиБюджета" Тогда
		СтандартнаяОбработка = Ложь;
		Объект.СпособСортировкиСтатейПредставление = "Код строки бюджета";
		ВыполнитьСортировку();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатейКодСтрокиБюджетаПриИзменении(Элемент)
	Если Объект.СпособСортировкиСтатей="КодСтрокиБюджета" Тогда
		Идентификатор = Элементы.ДеревоСтатей.ТекущиеДанные.Идентификатор;
		Развернута = Элементы.ДеревоСтатей.Развернут(Элементы.ДеревоСтатей.ТекущаяСтрока);
		ВыполнитьСортировку();
		УстановитьТекущийЭлемент(Идентификатор);
		Если Развернута И Элементы.ДеревоСтатей.ТекущиеДанные<>Неопределено Тогда
			Элементы.ДеревоСтатей.Развернуть(Элементы.ДеревоСтатей.ТекущаяСтрока,Истина);
		КонецЕсли;
	КонецЕсли;
	Элементы.ДеревоСтатей.ТекущиеДанные.Модифицирована = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатейНаименованиеПриИзменении(Элемент)
	Если Объект.СпособСортировкиСтатей="Наименование" Тогда
		Идентификатор = Элементы.ДеревоСтатей.ТекущиеДанные.Идентификатор;
		Развернута = Элементы.ДеревоСтатей.Развернут(Элементы.ДеревоСтатей.ТекущаяСтрока);
		ВыполнитьСортировку();
		УстановитьТекущийЭлемент(Идентификатор);
		Если Развернута И Элементы.ДеревоСтатей.ТекущиеДанные<>Неопределено Тогда
			Элементы.ДеревоСтатей.Развернуть(Элементы.ДеревоСтатей.ТекущаяСтрока,Истина);
		КонецЕсли;
	КонецЕсли;
	Элементы.ДеревоСтатей.ТекущиеДанные.Модифицирована = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлемент(Идентификатор)
   ТекущийЭлементДерева = ПолучитьТекущийЭлемент(ДеревоСтатей,Идентификатор);
   Если ТекущийЭлементДерева<>Неопределено Тогда
	  Элементы.ДеревоСтатей.ТекущаяСтрока = ТекущийЭлементДерева; 
   КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущийЭлемент(СтрокаДерева,Идентификатор)
	Текущий = Неопределено;
	Для Каждого Элемент Из СтрокаДерева.ПолучитьЭлементы() Цикл
		Если Элемент.Идентификатор = Идентификатор Тогда
			Возврат Элемент.ПолучитьИдентификатор();
		Иначе
			Найдено = ПолучитьТекущийЭлемент(Элемент,Идентификатор);
			Если Найдено <>Неопределено Тогда
				Возврат Найдено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура РазрезыУчетаПередУдалением(Элемент, Отказ)
	Если Элементы.РазрезыУчета.ТекущиеДанные.Измерение = ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение") И Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") Тогда
		ПоказатьПредупреждение(,"Данный разрез контролируется системой!");
		Отказ = Истина;
	КонецЕсли;
	Если Элементы.РазрезыУчета.ТекущиеДанные.Измерение = ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.Проект") И Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта") Тогда
		ПоказатьПредупреждение(,"Данный разрез контролируется системой!");
		Отказ = Истина;
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ИмяРазреза = ПолучитьИмя(Элементы.РазрезыУчета.ТекущиеДанные.Измерение);
	Если ИмяРазреза = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Элемент Из ДеревоСтатей.ПолучитьЭлементы() Цикл
		Если НЕ Элемент.ЭтоГруппа Тогда
			Если Элемент[ИмяРазреза] <> Ложь Тогда
				Элемент[ИмяРазреза] = Ложь;
				Элемент.Модифицирована = Истина;
			КонецЕсли;
		Иначе
			УстановитьЗначенияВПодчиненных(Элемент,ИмяРазреза,Ложь);
		КонецЕсли;
	КонецЦикла;
	Объект[ИмяРазреза]=Ложь
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмя(Измерение)
	 Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(Измерение);
КонецФункции

&НаКлиенте
Процедура РазрезыУчетаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	НастроитьРазрезыУчета();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РазрезыУчетаПередНачаломИзменения(Элемент, Отказ)
	ТекущийРазрез = Элементы.РазрезыУчета.ТекущиеДанные.Измерение;
	Если Элементы.РазрезыУчета.ТекущиеДанные.Измерение = ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение") И Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПодразделения") Тогда
		ПоказатьПредупреждение(,"Данный разрез контролируется системой!");
		Отказ = Истина;
	КонецЕсли;
	Если Элементы.РазрезыУчета.ТекущиеДанные.Измерение = ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.Проект") И Объект.УровеньДетализацииБюджета=ПредопределенноеЗначение("Перечисление.фин_УровниДетализацииБюджета.БюджетПроекта") Тогда
		ПоказатьПредупреждение(,"Данный разрез контролируется системой!");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Объект.УчетПоСумме И НЕ ПроверитьФормулу(Объект.Формула) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если Объект.УчетПоКоличеству И НЕ ПроверитьФормулу(Объект.ФормулаКоличество) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если Модифицированность И НЕ ПринудительноеЗакрытие Тогда
		ОписаниеВопросаОСохранении = Новый ОписаниеОповещения("ОбработкаВопросаОСохранении",ЭтотОбъект);
		ПоказатьВопрос(ОписаниеВопросаОСохранении,"Сохранить изменения?",РежимДиалогаВопрос.ДаНетОтмена);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если ВладелецФормы<>Неопределено Тогда
		Попытка
			ОповеститьОбИзменении(Объект.Бюджет);
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаОСохранении(Ответ,ДополнительныеПараметры) Экспорт
	Если Ответ=Неопределено Тогда
		Возврат;
	ИначеЕсли Ответ=КодВозвратаДиалога.Отмена Тогда
		Отказ = Истина;
		Возврат;
	ИначеЕсли Ответ=КодВозвратаДиалога.Нет Тогда
		ПринудительноеЗакрытие = Истина;
		Закрыть();
		Возврат;
	КонецЕсли;
	Отказ = НЕ СохранениеДанных();
	Если НЕ Отказ Тогда
		ПринудительноеЗакрытие = Истина;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПоУмолчаниюПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПроектПоУмолчаниюПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Модифицированность = Истина;
	Заголовок = Объект.Наименование;
	Если Объект.НаименованиеПолное="" Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РазрезыУчетаПослеУдаления(Элемент)
	НастроитьРазрезыУчета();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПозицияКлассификатораПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Разрез1ПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УчетПоСуммеПриИзменении(Элемент)
	Если НЕ Объект.УчетПоСумме Тогда
		//Объект.ОсновнаяВалюта=ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
		Объект.СпособЦенообразования			= ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПустаяСсылка");
		Объект.ПоказательИсточникаДанныхДляЦены	= "";
		Объект.ИспользуемыйТипЦен				= фин_ОбщегоНазначенияКлиентПовтИсп.ПустойТипПлановыхЦен();
		Объект.ИсточникДанныхДляЦены			= ПредопределенноеЗначение("Справочник.фин_ИсточникиДанныхДляРасчетовБюджетирования.ПустаяСсылка");
	КонецЕсли;
	Элементы.ДекорацияСпособЦенообразования.Заголовок = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеСпособаЦенообразования(Объект,Истина);
	Если НЕ ИндивидуальнаяНастройкаПризнаковУчетаДляСтатей Тогда
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"УчетПоСумме",Объект.УчетПоСумме);
		Если Объект.УчетПоСумме Тогда
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,"СпособЦенообразования",			Объект.СпособЦенообразования);
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ПоказательИсточникаДанныхДляЦены",	Объект.ПоказательИсточникаДанныхДляЦены);
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ИспользуемыйТипЦен",				Объект.ИспользуемыйТипЦен);
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ИсточникДанныхДляЦены",			Объект.ИсточникДанныхДляЦены);
			ТекстЦены = ТекстЦены(Объект);
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ЦенообразованиеПредставление",		ТекстЦены);
		КонецЕсли;
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура УчетПоКоличествуПриИзменении(Элемент)
	Модифицированность = Истина;
	Если НЕ Объект.УчетПоКоличеству Тогда
		Объект.СпособЦенообразования			= ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПустаяСсылка");
		Объект.ПоказательИсточникаДанныхДляЦены	= "";
		Объект.ИспользуемыйТипЦен				= фин_ОбщегоНазначенияКлиентПовтИсп.ПустойТипПлановыхЦен();
		Объект.ИсточникДанныхДляЦены			= ПредопределенноеЗначение("Справочник.фин_ИсточникиДанныхДляРасчетовБюджетирования.ПустаяСсылка");
	КонецЕсли;
	Элементы.ДекорацияСпособЦенообразования.Заголовок = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеСпособаЦенообразования(Объект,Истина);
	Если НЕ ИндивидуальнаяНастройкаПризнаковУчетаДляСтатей Тогда
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"УчетПоКоличеству",Объект.УчетПоКоличеству);
		Если Объект.УчетПоКоличеству Тогда
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,"СпособЦенообразования",			Объект.СпособЦенообразования);
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ПоказательИсточникаДанныхДляЦены",	Объект.ПоказательИсточникаДанныхДляЦены);
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ИспользуемыйТипЦен",				Объект.ИспользуемыйТипЦен);
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ИсточникДанныхДляЦены",			Объект.ИсточникДанныхДляЦены);
			ТекстЦены = ТекстЦены(Объект);
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ЦенообразованиеПредставление",		ТекстЦены);
		КонецЕсли;
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	Если Объект.УчетПоСумме И НЕ ПроверитьФормулу(Объект.Формула) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если Объект.УчетПоКоличеству И НЕ ПроверитьФормулу(Объект.ФормулаКоличество) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если Элементы.ДеревоСтатей.ТекущиеДанные<>Неопределено Тогда
		Ид = Элементы.ДеревоСтатей.ТекущиеДанные.Идентификатор;
	Иначе
		Ид = Неопределено;
	КонецЕсли;
	Если СохранениеДанных() И ВерсионированиеСтатейИспользуется Тогда
		мВерсионированиеСтатейИспользуется = ВерсионированиеБюджетаИспользуется(Объект.Бюджет);
		Элементы.ФормаКомандаВерсионированиеСтатейИспользуется.Доступность 	= НЕ мВерсионированиеСтатейИспользуется;
	КонецЕсли;
	Если Ид <>Неопределено Тогда
		НужнаяСтрока = НайтиСтроку(Ид,ДеревоСтатей.ПолучитьЭлементы());
		Если НужнаяСтрока<>Неопределено Тогда
			
			Элементы.ДеревоСтатей.ТекущаяСтрока = НужнаяСтрока;
		КонецЕсли;
	КонецЕсли;
	Если ВладелецФормы<>Неопределено Тогда
		Попытка
			ВладелецФормы.Обновить();
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция НайтиСтроку(Ид,Строки)
	Для Каждого Строка Из Строки Цикл
		Если Строка.Идентификатор = Ид Тогда
			Возврат Строка.ПолучитьИдентификатор();
		Иначе
			СредиВложенных = НайтиСтроку(Ид,Строка.ПолучитьЭлементы());
			Если СредиВложенных<>Неопределено Тогда
				Возврат СредиВложенных;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Если СохранениеДанных() Тогда
      	Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СохранениеДанных(ЗаполнениеФинансовыхПоказателей=Ложь)
	Если ПровереноЗаполнение() Тогда
		Возврат ВыполнитьСохранение(ЗаполнениеФинансовыхПоказателей);
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПровереноЗаполнение()
	Успешно = Истина;
	Если Объект.УчетПоСумме И НЕ ПроверитьФормулу(Объект.Формула) Тогда
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	Если Объект.УчетПоКоличеству И НЕ ПроверитьФормулу(Объект.ФормулаКоличество) Тогда
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат ПроверитьЗаполнениеСтрок(ДеревоСтатей);
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеСтрок(СтрокаДерева,РасширеннаяПроверка=Ложь)
	Успешно = Истина;
	Для Каждого СтрокаДочерняя Из СтрокаДерева.ПолучитьЭлементы() Цикл
		Если СтрокаДочерняя.Наименование = "" Тогда
			Элементы.ДеревоСтатей.ТекущаяСтрока = СтрокаДочерняя.ПолучитьИдентификатор();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указано наименование для статьи бюджета!");
			Если (НЕ РасширеннаяПроверка) Тогда
				Возврат Ложь;
            Иначе
				Успешно = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если РасширеннаяПроверка Тогда
			Если (НЕ СтрокаДочерняя.ЭтоГруппа) И НЕ ЗначениеЗаполнено(СтрокаДочерняя.ФинансовыйПоказатель) Тогда
				Элементы.ДеревоСтатей.ТекущаяСтрока = СтрокаДочерняя.ПолучитьИдентификатор();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан финансовый показатель для статьи бюджета """+СтрокаДочерняя.Наименование+"""!");
				Успешно = Ложь;
			КонецЕсли;
			Если (НЕ СтрокаДочерняя.ЭтоГруппа) И НЕ (СтрокаДочерняя.УчетПоКоличеству ИЛИ СтрокаДочерняя.УчетПоСумме) Тогда
				Элементы.ДеревоСтатей.ТекущаяСтрока = СтрокаДочерняя.ПолучитьИдентификатор();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не включен ни один из признаков учета (по сумме или по количеству) для статьи бюджета """+СтрокаДочерняя.Наименование+"""!");
				Успешно = Ложь;
			КонецЕсли;
		КонецЕсли;
		Успешно = Успешно И ПроверитьЗаполнениеСтрок(СтрокаДочерняя,РасширеннаяПроверка);
		Если (НЕ Успешно) И (НЕ РасширеннаяПроверка) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Успешно;
КонецФункции

&НаСервере
Функция ВыполнитьСохранение(ЗаполнениеФинансовыхПоказателей=Ложь)
	НачатьТранзакцию();
	Если НЕ ЗначениеЗаполнено(Объект.Бюджет) Тогда
		БюджетОбъект = Справочники.фин_Бюджеты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(БюджетОбъект,Объект);
	Иначе
		БюджетОбъект = Объект.Бюджет.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(БюджетОбъект,Объект);
	КонецЕсли;
	БюджетОбъект.РазрезыУчета.Загрузить(Объект.РазрезыУчета.Выгрузить());
	Попытка
		БюджетОбъект.Записать();
		Объект.Бюджет = БюджетОбъект.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать элемент справочника ""Бюджеты"" по причине: "+ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	Дерево = ДанныеФормыВЗначение(ДеревоСтатей,Тип("ДеревоЗначений"));
	Результат = ОбработатьЗаписьСтрок(Дерево,Истина,ЗаполнениеФинансовыхПоказателей);
	Если НЕ Результат Тогда
		Возврат Ложь;
	КонецЕсли;
	НаборЗаписей = РегистрыСведений.фин_ПараметрыСтатейБюджетаПоУмолчанию.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Бюджет.Установить(Объект.Бюджет);
	НаборЗаписей.Очистить();
	НоваяЗапись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись,Объект);
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось сохранить параметры статей по умолчанию по причине: "+ОписаниеОшибки());
	КонецПопытки;
	НаборЗаписей = РегистрыСведений.фин_СписокБюджетовПоПодразделениям.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Бюджет.Установить(Объект.Бюджет);
	НаборЗаписей.Очистить();
	Если Объект.ДляСпискаПодразделений Тогда
		Обработанные = Новый Массив;
		Для Каждого ЭлементПодразделение Из СписокПодразделений Цикл
			Если Обработанные.Найти(ЭлементПодразделение.Значение)<>Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Бюджет = Объект.Бюджет;
			НоваяЗапись.УправленческоеПодразделение = ЭлементПодразделение.Значение;
			Обработанные.Добавить(ЭлементПодразделение.Значение);
		КонецЦикла;
	КонецЕсли;
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось сохранить настройки подразделений для бюджета по причине: "+ОписаниеОшибки());
	КонецПопытки;
	ЗначениеВДанныеФормы(Дерево,ДеревоСтатей);
	ЗафиксироватьТранзакцию();
	Модифицированность = Ложь;
	Если ВерсионированиеСтатейИспользуется Тогда
		Элементы.ФормаКомандаВерсионированиеСтатейИспользуется.Доступность = Ложь;
	КонецЕсли;
	ОбновитьПовторноИспользуемыеЗначения();
	Возврат Истина;
КонецФункции

&НаСервере
Функция ОбработатьЗаписьСтрок(СтрокаДерева,Корневая=Ложь,ЗаполнениеФинансовыхПоказателей=Ложь)
	Возврат фин_ЗащитаПривилегированныеПроцедуры.ОбработатьЗаписьСтрокБюджета(Объект.Бюджет,СтрокаДерева,Корневая,ЗаполнениеФинансовыхПоказателей);
КонецФункции

&НаСервере
Процедура УстановитьРазрезыУчетаВСтроке(ИндексСтроки,ФинансовыйПоказатель,ЗаполнитьВсеСвойства=Ложь)
	СтрокаДерева = ?(ТипЗнч(ИндексСтроки)=Тип("Число"),ДеревоСтатей.НайтиПоИдентификатору(ИндексСтроки),ИндексСтроки);
	Для Каждого Разрез Из ФинансовыйПоказатель.РазрезыУчета Цикл
		Если Объект.РазрезыУчета.НайтиСтроки(Новый Структура("Измерение",Разрез.Измерение)).Количество()<>0 Тогда
			ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(Разрез.Измерение);
			СтрокаДерева[ИмяРазреза]=Истина;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Разрез Из Объект.РазрезыУчета Цикл
		Если НЕ ЗначениеЗаполнено(Разрез.Измерение) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран разрез учета бюджета в строке № "+Строка(Разрез.НомерСтроки));
			Продолжить;
		КонецЕсли;
		Если ФинансовыйПоказатель.РазрезыУчета.НайтиСтроки(Новый Структура("Измерение",Разрез.Измерение)).Количество()=0 Тогда
			ИмяРазреза = фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(Разрез.Измерение);
			СтрокаДерева[ИмяРазреза]=Ложь;
		КонецЕсли;
	КонецЦикла;
	Если ЗаполнитьВсеСвойства Тогда
		ЗаполнитьЗначенияСвойств(СтрокаДерева,ФинансовыйПоказатель,"ВидПоказателя,ПоказательИсточникаДанныхДляЦены,УчетПоКоличеству,УчетПоСумме,СпособЦенообразования,ИспользуемыйТипЦен,Формула,ИсточникДанныхДляЦены");
		СтрокаДерева.ЦенообразованиеПредставление = ТекстЦеныСервер(СтрокаДерева);
		Если СокрЛП(СтрокаДерева.Наименование) = "" Тогда
			СтрокаДерева.Наименование = ФинансовыйПоказатель.Наименование;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатейФинансовыйПоказательПриИзменении(Элемент)
	УстановитьРазрезыУчетаВСтроке(Элементы.ДеревоСтатей.ТекущаяСтрока,Элементы.ДеревоСтатей.ТекущиеДанные.ФинансовыйПоказатель,Истина);	
	Элементы.ДеревоСтатей.ТекущиеДанные.ВидСтрокиБюджета = ПолучитьВидСтроки(Элементы.ДеревоСтатей.ТекущиеДанные.ФинансовыйПоказатель,Объект.Бюджет); 
	Элементы.ДеревоСтатей.ТекущиеДанные.Модифицирована = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    СтруктураВыбора = Новый Структура("ВключаяПодчиненныеПодразделения,ДляСпискаПодразделений,СписокПодразделений,ПодразделениеПоУмолчанию",Объект.ВключаяПодчиненныеПодразделения,Объект.ДляСпискаПодразделений,СписокПодразделений,Объект.ПодразделениеПоУмолчанию);
	ОписаниеВыбораПодразделенияПоУмолчанию = Новый ОписаниеОповещения("ОбработкаВыбораПодразделенияПоУмолчанию",ЭтотОбъект);
	ОткрытьФорму("Обработка.фин_УправлениеСтруктуройБюджета.Форма.ФормаНастройкиПодразделения",СтруктураВыбора,ЭтотОбъект,,,,ОписаниеВыбораПодразделенияПоУмолчанию,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодразделенияПоУмолчанию(Результат,ДополнительныеПараметры) Экспорт
	Если Результат<>Неопределено Тогда
		Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(Объект,Результат);
		СписокПодразделений.Очистить();
		СписокПодразделений.ЗагрузитьЗначения(Результат.СписокПодразделений.ВыгрузитьЗначения());
		Если Объект.ДляСпискаПодразделений Тогда
			
			Для Каждого Подразделение Из СписокПодразделений Цикл
				ПредставлениеПодразделения = ПредставлениеПодразделения + Строка(Подразделение.Значение)+"; ";
			КонецЦикла;
			
		ИначеЕсли Объект.ВключаяПодчиненныеПодразделения Тогда
			ПредставлениеПодразделения = "в группе: "+Объект.ПодразделениеПоУмолчанию;
		Иначе
			ПредставлениеПодразделения = Объект.ПодразделениеПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПоУмолчаниюОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПорядокФормированияЗаявокПоПодразделениям(Команда)
	Если Объект.Бюджет.Пустая() ИЛИ Модифицированность Тогда
		ПоказатьПредупреждение(,"Элемент еще не записан! Сохраните изменения для продолжения");
		Возврат;	
	КонецЕсли;
	ОткрытьФорму("Обработка.фин_УправлениеСтруктуройБюджета.Форма.ФормаНастройкиПодачиЗаявок",Новый Структура("Бюджет,Версия",Объект.Бюджет,Версия),ЭтотОбъект,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно),,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//ОткрытьФорму("РегистрСведений.фин_ПорядокФормированияЗаявокПоБюджетамПоПодразделениям.ФормаСписка",Новый Структура("Отбор",Новый Структура("Бюджет",Объект.Бюджет)),ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РазрезыУчетаИзмерениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокРазрезов;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатейУчетПоКоличествуПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоСтатей.ТекущиеДанные;
	ТекущиеДанные.Модифицирована = Истина;
	Если ТекущиеДанные.УчетПоКоличеству =Ложь Тогда
		ТекущиеДанные.Формула = ПредопределенноеЗначение("Справочник.фин_ФормулыРасчетаФинансовыхПоказателей.ПустаяСсылка");
		ТекущиеДанные.РасчетыПредставление = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеНастроекРасчетов(Элементы.ДеревоСтатей.ТекущиеДанные);
		ТекущиеДанные.ЦенообразованиеПредставление = "";
		ТекущиеДанные.ИсточникДанныхДляЦены            = "";
		ТекущиеДанные.ПоказательИсточникаДанныхДляЦены = "";
		ТекущиеДанные.СпособЦенообразования 			= ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.НеРассчитывать");
	    ТекущиеДанные.ИспользуемыйТипЦен				= фин_ОбщегоНазначенияКлиентПовтИсп.ПустойТипПлановыхЦен();
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатейУчетПоСуммеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоСтатей.ТекущиеДанные;
	ТекущиеДанные.Модифицирована = Истина;
	Если ТекущиеДанные.УчетПоСумме =Ложь Тогда
		ТекущиеДанные.Формула = ПредопределенноеЗначение("Справочник.фин_ФормулыРасчетаФинансовыхПоказателей.ПустаяСсылка");
		ТекущиеДанные.РасчетыПредставление = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеНастроекРасчетов(Элементы.ДеревоСтатей.ТекущиеДанные);
		ТекущиеДанные.ЦенообразованиеПредставление = "";
		ТекущиеДанные.ИсточникДанныхДляЦены            = "";
		ТекущиеДанные.ПоказательИсточникаДанныхДляЦены = "";
		ТекущиеДанные.СпособЦенообразования 			= ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.НеРассчитывать");
	    ТекущиеДанные.ИспользуемыйТипЦен				= фин_ОбщегоНазначенияКлиентПовтИсп.ПустойТипПлановыхЦен();
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатейОсновнаяВалютаПриИзменении(Элемент)
	Элементы.ДеревоСтатей.ТекущиеДанные.Модифицирована = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатейСпособЦенообразованияПриИзменении(Элемент)
	Элементы.ДеревоСтатей.ТекущиеДанные.Модифицирована = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатейВидПоказателяПриИзменении(Элемент)
	Элементы.ДеревоСтатей.ТекущиеДанные.Модифицирована = Истина;
	Если Элементы.ДеревоСтатей.ТекущиеДанные.ВидПоказателя <>ПредопределенноеЗначение("Перечисление.фин_ВидыФинансовыхПоказателей.Рассчитываемый") Тогда
		Элементы.ДеревоСтатей.ТекущиеДанные.Формула = ПредопределенноеЗначение("Справочник.фин_ФормулыРасчетаФинансовыхПоказателей.ПустаяСсылка");
		Элементы.ДеревоСтатей.ТекущиеДанные.ФормулаКоличество = ПредопределенноеЗначение("Справочник.фин_ФормулыРасчетаФинансовыхПоказателей.ПустаяСсылка");
		Элементы.ДеревоСтатей.ТекущиеДанные.ТолькоДляПлановыхДанных = Ложь;
		Элементы.ДеревоСтатей.ТекущиеДанные.ОтносительныйПоказатель = Ложь;
		Элементы.ДеревоСтатей.ТекущиеДанные.ПоРасценкам = Ложь;
		Элементы.ДеревоСтатей.ТекущиеДанные.ПризнакПеретекающегоОстатка = ПредопределенноеЗначение("Перечисление.фин_ПризнакиПеретекающихОстатковМеждуПериодами.ПустаяСсылка");
		Элементы.ДеревоСтатей.ТекущиеДанные.РасчетыПредставление = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеНастроекРасчетов(Элементы.ДеревоСтатей.ТекущиеДанные);
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатейПризнакВнутригрупповогоОборотаПриИзменении(Элемент)
	Элементы.ДеревоСтатей.ТекущиеДанные.Модифицирована = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатейВерсияПриИзменении(Элемент)
	Элементы.ДеревоСтатей.ТекущиеДанные.Модифицирована = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатейРазрез1ПриИзменении(Элемент)
	Элементы.ДеревоСтатей.ТекущиеДанные.Модифицирована = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРазрезы(Команда)
	ВыполнитьОбновлениеРазрезов();
	НастроитьРазрезыУчета();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбновлениеРазрезов()
	Дерево = ДанныеФормыВЗначение(ДеревоСтатей,Тип("ДеревоЗначений"));
	Строки = Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа",Ложь),Истина);
	МассивФП = Новый Массив;
	Для Каждого СтрокаДерева Из Строки Цикл
		МассивФП.Добавить(СтрокаДерева.ФинансовыйПоказатель);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ФинансовыеПоказателиРазрезыУчета.Измерение
		|ИЗ
		|	Справочник.фин_ФинансовыеПоказатели.РазрезыУчета КАК фин_ФинансовыеПоказателиРазрезыУчета
		|ГДЕ
		|	фин_ФинансовыеПоказателиРазрезыУчета.Ссылка В(&Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	фин_ФинансовыеПоказателиРазрезыУчета.Измерение";

	Запрос.УстановитьПараметр("Ссылка", МассивФП);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
    Объект.РазрезыУчета.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НС = Объект.РазрезыУчета.Добавить();
		НС.Измерение 	= ВыборкаДетальныеЗаписи.Измерение;
		ИмяРазреза 		= фин_РаботаСДополнительнымиРазрезамиБюджетирования.ИмяРазреза(ВыборкаДетальныеЗаписи.Измерение);
		НС.Разрез 		= фин_РаботаСДополнительнымиРазрезамиБюджетирования.РазрезПоИзмерению(ВыборкаДетальныеЗаписи.Измерение);
		НС.ИспользоватьПоУмолчанию = НЕ ИндивидуальнаяНастройкаПризнаковУчетаДляСтатей;
		Объект[ИмяРазреза]=НЕ ИндивидуальнаяНастройкаПризнаковУчетаДляСтатей;
		Если НЕ ИндивидуальнаяНастройкаПризнаковУчетаДляСтатей Тогда
			Для Каждого Элемент Из ДеревоСтатей.ПолучитьЭлементы() Цикл
				Если НЕ Элемент.ЭтоГруппа Тогда
					Если Элемент[ИмяРазреза] <> Ложь Тогда
						Элемент[ИмяРазреза] = ?(ИндивидуальнаяНастройкаРазрезовУчетаДляСтатей,?(ЗначениеЗаполнено(Элемент.ФинансовыйПоказатель),ВедетсяУчет(Элемент.ФинансовыйПоказатель,ТекущийРазрез),Ложь),Истина);
						Элемент.Модифицирована = Истина;
					КонецЕсли;
				Иначе
					УстановитьЗначенияВПодчиненныхНаСервере(Элемент,ИмяРазреза,НЕ ИндивидуальнаяНастройкаПризнаковУчетаДляСтатей,ТекущийРазрез);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СпособЦенообразованияПриИзменении(Элемент)
	Модифицированность = Истина;
	Объект.ИспользуемыйТипЦен 				= фин_ОбщегоНазначенияКлиентПовтИсп.ПустойТипПлановыхЦен();
	Объект.ИсточникДанныхДляЦены 			= ПредопределенноеЗначение("Справочник.фин_ИсточникиДанныхДляРасчетовБюджетирования.ПустаяСсылка");
	Объект.ПоказательИсточникаДанныхДляЦены	= "";
	Если НЕ ИндивидуальнаяНастройкаЦенообразованияДляСтатей Тогда
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"СпособЦенообразования",			Объект.СпособЦенообразования);
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ПоказательИсточникаДанныхДляЦены",	Объект.ПоказательИсточникаДанныхДляЦены);
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ИспользуемыйТипЦен",				Объект.ИспользуемыйТипЦен);
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ИсточникДанныхДляЦены",			Объект.ИсточникДанныхДляЦены);
		ТекстЦены = ТекстЦены(Объект);
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ЦенообразованиеПредставление",		ТекстЦены);
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПоказательИсточникаДанныхДляЦеныНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ДанныеВыбора = СписокВыбораПоказательЦены;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанныхДляЦеныПриИзменении(Элемент)
	Модифицированность = Истина;
	Объект.ПоказательИсточникаДанныхДляЦены = "";
	Если НЕ ИндивидуальнаяНастройкаЦенообразованияДляСтатей Тогда
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ПоказательИсточникаДанныхДляЦены",	Объект.ПоказательИсточникаДанныхДляЦены);
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ИсточникДанныхДляЦены",			Объект.ИсточникДанныхДляЦены);
		ТекстЦены = ТекстЦены(Объект);
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ЦенообразованиеПредставление",		ТекстЦены);
	КонецЕсли;
	ОбновитьСпискиВыбора();
КонецПроцедуры

// Обновляет списки выбора для показателей источников данных
//
//
&НаСервере
Процедура ОбновитьСпискиВыбора()
	
	Если НЕ Объект.ИсточникДанныхДляЦены.Пустая() Тогда

		СписокВыбораПоказательЦены.Очистить();

		Для Каждого Показатель Из Объект.ИсточникДанныхДляЦены.Показатели Цикл

			Если Показатель.Использование Тогда
				СписокВыбораПоказательЦены.Добавить(Показатель.Имя, Показатель.Представление);
			КонецЕсли;

		КонецЦикла; 

	КонецЕсли;
	
КонецПроцедуры // ОбновитьСпискиВыбора()


&НаКлиенте
Процедура ДеревоСтатейСпособЦенообразованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = ДеревоСтатей.НайтиПоИдентификатору(Элементы.ДеревоСтатей.ТекущаяСтрока);
	Если ТекущаяСтрока.УчетПоСумме = Ложь ИЛИ ТекущаяСтрока.УчетПоКоличеству = Ложь Тогда
		ПоказатьПредупреждение(,"Для данной строки цена не может использоваться");
		Возврат;
	КонецЕсли;
	ПараметрыЦены = Новый Структура("СпособЦенообразования,ИспользуемыйТипЦен,ИсточникДанныхДляЦены,ПоказательИсточникаДанныхДляЦены");
	ЗаполнитьЗначенияСвойств(ПараметрыЦены,ТекущаяСтрока);
	ОписаниеПараметрыРасчетаЦеныПриВыборе = Новый ОписаниеОповещения("ОбработчикПараметрыРасчетаЦеныПриВыборе",ЭтотОбъект,ТекущаяСтрока);
	ОткрытьФорму("Обработка.фин_УправлениеСтруктуройБюджета.Форма.ФормаНастройкиЦены",ПараметрыЦены,ЭтотОбъект,,,,ОписаниеПараметрыРасчетаЦеныПриВыборе,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
КонецПроцедуры

&НаКлиенте
Функция ОбработчикПараметрыРасчетаЦеныПриВыборе(РезультатВыбора,ТекущаяСтрока) Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		ТекущаяСтрока.Модифицирована = Истина;
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,РезультатВыбора);
		ТекущаяСтрока.ЦенообразованиеПредставление = ТекстЦены(ТекущаяСтрока);
	КонецЕсли;
КонецФункции


&НаКлиенте
Процедура РазрезыУчетаИзмерениеПриИзменении(Элемент)
	Если ТекущийРазрез = Элементы.РазрезыУчета.ТекущиеДанные.Измерение Тогда
		Возврат;
	КонецЕсли;
	Если Объект.РазрезыУчета.НайтиСтроки(Новый Структура("Измерение",Элементы.РазрезыУчета.ТекущиеДанные.Измерение)).Количество()>1 Тогда
		Элементы.РазрезыУчета.ТекущиеДанные.Измерение = ТекущийРазрез;
		ПоказатьПредупреждение(,"Выбранный разрез уже добавлен!");
		Возврат;
	КонецЕсли;
	Элементы.РазрезыУчета.ТекущиеДанные.ИспользоватьПоУмолчанию = НЕ ИндивидуальнаяНастройкаПризнаковУчетаДляСтатей;
	ИмяРазреза = ПолучитьИмя(ТекущийРазрез);
	Если ИмяРазреза = Неопределено Тогда
		Перейти ~УстановкаНовогоРазреза;
	КонецЕсли;
	Для Каждого Элемент Из ДеревоСтатей.ПолучитьЭлементы() Цикл
		Если НЕ Элемент.ЭтоГруппа Тогда
			Если Элемент[ИмяРазреза] <> Ложь Тогда
				Элемент[ИмяРазреза] = Ложь;
				Элемент.Модифицирована = Истина;
			КонецЕсли;
		Иначе
			УстановитьЗначенияВПодчиненных(Элемент,ИмяРазреза,Ложь);
		КонецЕсли;
	КонецЦикла;
	Объект[ИмяРазреза]=Ложь;
	~УстановкаНовогоРазреза:
	ТекущийРазрез = Элементы.РазрезыУчета.ТекущиеДанные.Измерение;
	ИмяРазреза = ПолучитьИмя(ТекущийРазрез);
	Для Каждого Элемент Из ДеревоСтатей.ПолучитьЭлементы() Цикл
		Если НЕ Элемент.ЭтоГруппа Тогда
			Если Элемент[ИмяРазреза] <> Ложь Тогда
				Элемент[ИмяРазреза] = ?(ИндивидуальнаяНастройкаРазрезовУчетаДляСтатей,?(ЗначениеЗаполнено(Элемент.ФинансовыйПоказатель),ВедетсяУчет(Элемент.ФинансовыйПоказатель,ТекущийРазрез),Ложь),Истина);
				Элемент.Модифицирована = Истина;
			КонецЕсли;
		Иначе
			УстановитьЗначенияВПодчиненных(Элемент,ИмяРазреза,НЕ ИндивидуальнаяНастройкаПризнаковУчетаДляСтатей,ТекущийРазрез);
		КонецЕсли;
	КонецЦикла;
	Объект[ИмяРазреза]=НЕ ИндивидуальнаяНастройкаПризнаковУчетаДляСтатей;
	НастроитьРазрезыУчета();
//	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция ВедетсяУчет(ФинансовыйПоказатель,Разрез)
	Возврат фин_РаботаСДополнительнымиРазрезамиБюджетирования.УчетПоСтатьеПоРазрезу(ФинансовыйПоказатель,Разрез);	
КонецФункции

&НаКлиенте
Процедура РежимыРасчетаИтоговойСтрокиБюджетаПриИзменении(Элемент)
	Если Объект.РежимыРасчетаИтоговойСтрокиБюджета<>ПредопределенноеЗначение("Перечисление.фин_РежимыРасчетаИтоговойСтрокиБюджета.ПоФормуле") Тогда
		Объект.Формула				= ПредопределенноеЗначение("Справочник.фин_ФормулыРасчетаФинансовыхПоказателей.ПустаяСсылка");
		Объект.ФормулаКоличество	= ПредопределенноеЗначение("Справочник.фин_ФормулыРасчетаФинансовыхПоказателей.ПустаяСсылка");
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатейФормулаПриИзменении(Элемент)
	Элементы.ДеревоСтатей.ТекущиеДанные.Модифицирована = Истина;
	Модифицированность = Истина;
	Если Элементы.ДеревоСтатей.ТекущиеДанные.ЭтоГруппа Тогда
		Если НЕ ПроверитьФормулуПоГруппеСтатей(Элементы.ДеревоСтатей.ТекущиеДанные.Формула,Элементы.ДеревоСтатей.ТекущиеДанные.Наименование) Тогда
			Элементы.ДеревоСтатей.ТекущиеДанные.Формула = ПредопределенноеЗначение("Справочник.фин_ФормулыРасчетаФинансовыхПоказателей.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатейИтоговаяФункцияПриИзменении(Элемент)
	Элементы.ДеревоСтатей.ТекущиеДанные.Модифицирована = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатейИсключитьИзИтоговПриИзменении(Элемент)
	Элементы.ДеревоСтатей.ТекущиеДанные.Модифицирована = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпособЦенообразованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокСпособов();
КонецПроцедуры

&НаСервере
Функция СписокСпособов()
	Возврат фин_ПроцедурыУправленияПлановымЦенообразованием.СписокСпособов();
КонецФункции

&НаКлиенте
Процедура ДеревоСтатейПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ТипЗнч(ПараметрыПеретаскивания.Значение)=Тип("Массив") И ПараметрыПеретаскивания.Значение.Количество()>0 Тогда
		ПеретаскиваемыйОбъект = ПараметрыПеретаскивания.Значение[0];
		Если ТипЗнч(ПеретаскиваемыйОбъект)=Тип("СправочникСсылка.фин_ФинансовыеПоказатели") Тогда
			Если ЭтоГруппаФП(ПеретаскиваемыйОбъект) Тогда
				НоваяСтрока = НоваяСтрока(Строка);
				Если НоваяСтрока = Неопределено Тогда
					Возврат;
				КонецЕсли;
				НоваяСтрока.Картинка = 0;
				НоваяСтрока.ЭтоГруппа = Истина;
				НоваяСтрока.Модифицирована = Истина;
				НоваяСтрока.ИтоговаяФункция = ПредопределенноеЗначение("Перечисление.фин_ИтоговыеФункции.Сумма");
				Если Объект.ИспользоватьКодыСтрокБюджета Тогда
					НоваяСтрока.КодСтрокиБюджета = ПолучитьКодСтроки(НоваяСтрока.ПолучитьИдентификатор()); 
				КонецЕсли;
				НоваяСтрока.Наименование = Строка(ПеретаскиваемыйОбъект);
				Элементы.ДеревоСтатей.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				Модифицированность = Истина;
				ОписаниеОтветаНаВопросОДобавленииПоказателей = Новый ОписаниеОповещения("ОбработчикОтветаНаВопросОДобавленииПоказателей",ЭтотОбъект,Новый Структура("ПеретаскиваемыйОбъект,Идентификатор",ПеретаскиваемыйОбъект,НоваяСтрока.ПолучитьИдентификатор()));
				ПоказатьВопрос(ОписаниеОтветаНаВопросОДобавленииПоказателей,"Добавить в структуру бюджета все вложенные показатели?",РежимДиалогаВопрос.ДаНет,,,"Перенос группы показателей");
			Иначе
				Если ПоказательИмеетсяВСтруктуре(ПеретаскиваемыйОбъект) Тогда
					Возврат;
				КонецЕсли;
				НоваяСтрока = НоваяСтрока(Строка);
				Если НоваяСтрока = Неопределено Тогда
					Возврат;
				КонецЕсли;
				НоваяСтрока.Картинка = 1;
				НоваяСтрока.ВидПоказателя = ПредопределенноеЗначение("Перечисление.фин_ВидыФинансовыхПоказателей.Оборотный");
				НоваяСтрока.Модифицирована = Истина;
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Объект,"УчетПоСумме,УчетПоКоличеству,СпособЦенообразования,Контрагент,Проект,Номенклатура,УправленческоеПодразделение,Разрез1,Разрез2,Разрез3,Разрез4,Разрез5,Разрез6,Разрез7,Разрез8,Разрез9,Разрез10,ИспользуемыйТипЦен,ИсточникДанныхДляЦены,ПоказательИсточникаДанныхДляЦены");
				НоваяСтрока.ЦенообразованиеПредставление = ТекстЦены(НоваяСтрока);
				НоваяСтрока.ИтоговаяФункция = ПредопределенноеЗначение("Перечисление.фин_ИтоговыеФункции.Сумма");
				НоваяСтрока.ИтогиПредставление = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеНастроекИтогов(НоваяСтрока);
				НоваяСтрока.ВидСтрокиБюджета = ПолучитьВидСтроки(ПеретаскиваемыйОбъект,Объект.Бюджет); 
				НоваяСтрока.РасчетыПредставление = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеНастроекРасчетов(НоваяСтрока);
				Если Объект.ВерсионироватьПоУмолчанию Тогда
					НоваяСтрока.Версия = Версия;
				КонецЕсли;
				Если Объект.ИспользоватьКодыСтрокБюджета Тогда
					НоваяСтрока.КодСтрокиБюджета = ПолучитьКодСтроки(НоваяСтрока.ПолучитьИдентификатор()); 
				КонецЕсли;
				Элементы.ДеревоСтатей.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				НоваяСтрока.ФинансовыйПоказатель = ПеретаскиваемыйОбъект;
				УстановитьРазрезыУчетаВСтроке(НоваяСтрока.ПолучитьИдентификатор(),НоваяСтрока.ФинансовыйПоказатель,Истина);	
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоГруппаФП(Показатель)
	Возврат Показатель.ЭтоГруппа;
КонецФункции

&НаКлиенте
Процедура ОбработчикОтветаНаВопросОДобавленииПоказателей(Ответ,ДополнительныеПараметры) Экспорт
	Если Ответ=КодВозвратаДиалога.Да Тогда
		ДобавитьПодчиненныеПоказатели(ДополнительныеПараметры.ПеретаскиваемыйОбъект,ДополнительныеПараметры.Идентификатор);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидСтроки(ФинансовыйПоказатель,Бюджет)
	Возврат Справочники.фин_ФинансовыеПоказатели.ВидРасчетнойСтроки(ФинансовыйПоказатель,Бюджет);	
КонецФункции

&НаСервере
Процедура ДобавитьПодчиненныеПоказатели(ГруппаПоказателей,ИдентификаторСтроки)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ФинансовыеПоказатели.Ссылка,
		|	фин_ФинансовыеПоказатели.ЭтоГруппа,
		|	фин_ФинансовыеПоказатели.Наименование
		|ИЗ
		|	Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
		|ГДЕ
		|	фин_ФинансовыеПоказатели.Родитель = &Родитель
		|	И НЕ фин_ФинансовыеПоказатели.ПометкаУдаления";

	Запрос.УстановитьПараметр("Родитель", ГруппаПоказателей);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ЭтоГруппа Тогда
			НоваяСтрока = НоваяСтрокаНаСервере(ИдентификаторСтроки);
			Если НоваяСтрока = Неопределено Тогда
				Возврат;
			КонецЕсли;
			НоваяСтрока.Картинка = 0;
			НоваяСтрока.ЭтоГруппа = Истина;
			НоваяСтрока.Модифицирована = Истина;
			НоваяСтрока.ИтоговаяФункция = ПредопределенноеЗначение("Перечисление.фин_ИтоговыеФункции.Сумма");
			Если Объект.ИспользоватьКодыСтрокБюджета Тогда
				НоваяСтрока.КодСтрокиБюджета = ПолучитьКодСтроки(НоваяСтрока.ПолучитьИдентификатор()); 
			КонецЕсли;
			НоваяСтрока.Наименование = Строка(ВыборкаДетальныеЗаписи.Ссылка);
			Элементы.ДеревоСтатей.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Модифицированность = Истина;
			ДобавитьПодчиненныеПоказатели(ВыборкаДетальныеЗаписи.Ссылка,НоваяСтрока.ПолучитьИдентификатор());
		Иначе
			Если ПоказательИмеетсяВСтруктуре(ВыборкаДетальныеЗаписи.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = НоваяСтрокаНаСервере(ИдентификаторСтроки);
			Если НоваяСтрока = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока.Картинка = 1;
			НоваяСтрока.ВидПоказателя = ПредопределенноеЗначение("Перечисление.фин_ВидыФинансовыхПоказателей.Оборотный");
			НоваяСтрока.Модифицирована = Истина;
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Объект,"УчетПоСумме,УчетПоКоличеству,СпособЦенообразования,Контрагент,Проект,Номенклатура,УправленческоеПодразделение,Разрез1,Разрез2,Разрез3,Разрез4,Разрез5,Разрез6,Разрез7,Разрез8,Разрез9,Разрез10,ИспользуемыйТипЦен,ИсточникДанныхДляЦены,ПоказательИсточникаДанныхДляЦены");
			НоваяСтрока.ЦенообразованиеПредставление = ТекстЦеныСервер(НоваяСтрока);
			НоваяСтрока.ИтоговаяФункция = ПредопределенноеЗначение("Перечисление.фин_ИтоговыеФункции.Сумма");
			НоваяСтрока.ИтогиПредставление = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеНастроекИтогов(НоваяСтрока);
			НоваяСтрока.ВидСтрокиБюджета = ПолучитьВидСтроки(ВыборкаДетальныеЗаписи.Ссылка,Объект.Бюджет); 
			НоваяСтрока.РасчетыПредставление = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеНастроекРасчетов(НоваяСтрока);
			Если Объект.ВерсионироватьПоУмолчанию Тогда
				НоваяСтрока.Версия = Версия;
			КонецЕсли;
			Если Объект.ИспользоватьКодыСтрокБюджета Тогда
				НоваяСтрока.КодСтрокиБюджета = ПолучитьКодСтроки(НоваяСтрока.ПолучитьИдентификатор()); 
			КонецЕсли;
			Элементы.ДеревоСтатей.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			НоваяСтрока.ФинансовыйПоказатель = ВыборкаДетальныеЗаписи.Ссылка;
			УстановитьРазрезыУчетаВСтроке(НоваяСтрока.ПолучитьИдентификатор(),НоваяСтрока.ФинансовыйПоказатель,Истина);	
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПоказательИмеетсяВСтруктуре(ПроверяемыйПоказатель)
	Дерево = ДанныеФормыВЗначение(ДеревоСтатей,Тип("ДеревоЗначений"));
	Возврат Дерево.Строки.НайтиСтроки(Новый Структура("ФинансовыйПоказатель",ПроверяемыйПоказатель),Истина).Количество()>0;
КонецФункции

&НаКлиенте
Процедура ДеревоСтатейПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РазрезыУчетаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекущийРазрез = Элементы.РазрезыУчета.ТекущиеДанные.Измерение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФормулаПриИзменении(Элемент)
	Модифицированность = Истина;
	ПроверитьФормулу(Объект.Формула);
КонецПроцедуры

&НаСервере
Функция ПроверитьФормулу(Формула)
	Если Объект.РежимыРасчетаИтоговойСтрокиБюджета<>Перечисления.фин_РежимыРасчетаИтоговойСтрокиБюджета.ПоФормуле Тогда
		Возврат Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Формула) Тогда
		Возврат Истина;
	КонецЕсли;
	ФинПоказателиБюджета = Новый СписокЗначений;
	Дерево = ДанныеФормыВЗначение(ДеревоСтатей,Тип("ДеревоЗначений"));
	ЗаполнитьПоказатели(Дерево.Строки,ФинПоказателиБюджета);
	Запрос = Новый Запрос;
	Запрос.Текст=
    "ВЫБРАТЬ
    |	ВходящиеПоказатели.НомерСтроки,
    |	ВходящиеПоказатели.ВидПоказателя,
    |	ВходящиеПоказатели.Показатель,
    |	ВходящиеПоказатели.ПериодСбораДанных,
    |	ВходящиеПоказатели.Идентификатор,
    |	ВходящиеПоказатели.Показатель.Владелец
    |ИЗ
    |	Справочник.фин_ФормулыРасчетаФинансовыхПоказателей.ВходящиеПоказатели КАК ВходящиеПоказатели
    |ГДЕ
    |	ВходящиеПоказатели.Ссылка = &Ссылка";
 	Запрос.УстановитьПараметр("Ссылка",Формула);
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьОшибки = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидПоказателя = Перечисления.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.РасчетныйПоказатель Тогда
			ЕстьОшибки = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Показатель № "+Строка(Выборка.НомерСтроки)+" формулы не является финансовым показателем! Формула не может быть использована для расчета итогов бюджета");
		ИначеЕсли Выборка.ПериодСбораДанных = Перечисления.ден_СпособыОпределенияПериодов.ПредшествующийПериод Тогда
			ЕстьОшибки = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Показатель № "+Строка(Выборка.НомерСтроки)+" формулы использует данные предыдущего периода! Формула не может быть использована для расчета итогов бюджета");
		ИначеЕсли Выборка.ВидПоказателя = Перечисления.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.ГруппаСтатейБюджета Тогда
			Если Выборка.ПоказательВладелец<> Объект.Бюджет Тогда
				ЕстьОшибки = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Показатель № "+Строка(Выборка.НомерСтроки)+" формулы использует группу статей другого бюджета! Формула не может быть использована для расчета итогов бюджета");
			КонецЕсли;
		ИначеЕсли Выборка.ВидПоказателя = Перечисления.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.СтатьиБюджета Тогда
			Если Выборка.Показатель<> Объект.Бюджет Тогда
				ЕстьОшибки = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Показатель № "+Строка(Выборка.НомерСтроки)+" формулы использует группу статей другого бюджета! Формула не может быть использована для расчета итогов бюджета");
			КонецЕсли;
		ИначеЕсли ФинПоказателиБюджета.НайтиПоЗначению(Выборка.Показатель)=Неопределено Тогда
			ЕстьОшибки = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Показатель № "+Строка(Выборка.НомерСтроки)+" формулы использует финансовый показатель другого бюджета! Формула не может быть использована для расчета итогов бюджета");
		КонецЕсли;
	КонецЦикла;
	Возврат НЕ ЕстьОшибки;
КонецФункции

&НаСервере
Функция ПроверитьФормулуПоГруппеСтатей(Формула,ГруппаСтатей)
	Если НЕ ЗначениеЗаполнено(Формула) Тогда
		Возврат Истина;
	КонецЕсли;
	ФинПоказателиБюджета = Новый СписокЗначений;
	Дерево = ДанныеФормыВЗначение(ДеревоСтатей,Тип("ДеревоЗначений"));
	ЗаполнитьПоказатели(Дерево.Строки,ФинПоказателиБюджета);
	Запрос = Новый Запрос;
	Запрос.Текст=
    "ВЫБРАТЬ
    |	ВходящиеПоказатели.НомерСтроки,
    |	ВходящиеПоказатели.ВидПоказателя,
    |	ВходящиеПоказатели.Показатель,
    |	ВходящиеПоказатели.ПериодСбораДанных,
    |	ВходящиеПоказатели.Идентификатор,
    |	ВходящиеПоказатели.Показатель.Владелец
    |ИЗ
    |	Справочник.фин_ФормулыРасчетаФинансовыхПоказателей.ВходящиеПоказатели КАК ВходящиеПоказатели
    |ГДЕ
    |	ВходящиеПоказатели.Ссылка = &Ссылка";
 	Запрос.УстановитьПараметр("Ссылка",Формула);
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьОшибки = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидПоказателя = Перечисления.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.РасчетныйПоказатель Тогда
			ЕстьОшибки = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Показатель № "+Строка(Выборка.НомерСтроки)+" формулы расчета итога группы "+ГруппаСтатей+" не является финансовым показателем! Формула не может быть использована для расчета итогов бюджета");
		ИначеЕсли Выборка.ПериодСбораДанных = Перечисления.ден_СпособыОпределенияПериодов.ПредшествующийПериод Тогда
			ЕстьОшибки = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Показатель № "+Строка(Выборка.НомерСтроки)+" формулы расчета итога группы "+ГруппаСтатей+" использует данные предыдущего периода! Формула не может быть использована для расчета итогов бюджета");
		ИначеЕсли Выборка.ВидПоказателя = Перечисления.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.ГруппаСтатейБюджета Тогда
			Если Выборка.ПоказательВладелец<> Объект.Бюджет Тогда
				ЕстьОшибки = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Показатель № "+Строка(Выборка.НомерСтроки)+" формулы расчета итога группы "+ГруппаСтатей+" использует группу статей другого бюджета! Формула не может быть использована для расчета итогов бюджета");
			КонецЕсли;
		ИначеЕсли Выборка.ВидПоказателя = Перечисления.фин_ВидыПоказателейФормулРасчетаФинансовыхПоказателей.СтатьиБюджета Тогда
			Если Выборка.Показатель<> Объект.Бюджет Тогда
				ЕстьОшибки = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Показатель № "+Строка(Выборка.НомерСтроки)+" формулы расчета итога группы "+ГруппаСтатей+" использует группу статей другого бюджета! Формула не может быть использована для расчета итогов бюджета");
			КонецЕсли;
		ИначеЕсли ФинПоказателиБюджета.НайтиПоЗначению(Выборка.Показатель)=Неопределено Тогда
			ЕстьОшибки = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Показатель № "+Строка(Выборка.НомерСтроки)+" формулы расчета итога группы "+ГруппаСтатей+" использует финансовый показатель другого бюджета! Формула не может быть использована для расчета итогов бюджета");
		КонецЕсли;
	КонецЦикла;
	Возврат НЕ ЕстьОшибки;
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказатели(Строки,Список)
	Для Каждого СтрокаНабора Из Строки Цикл
		Если ЗначениеЗаполнено(СтрокаНабора.Финансовыйпоказатель) Тогда
			Список.Добавить(СтрокаНабора.Финансовыйпоказатель);
		КонецЕсли;
		ЗаполнитьПоказатели(СтрокаНабора.Строки,Список);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИтоговаяФункцияПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыйТипЦенПриИзменении(Элемент)
	Модифицированность = Истина;
	Если НЕ ИндивидуальнаяНастройкаЦенообразованияДляСтатей Тогда
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ИспользуемыйТипЦен",				Объект.ИспользуемыйТипЦен);
		ТекстЦены = ТекстЦены(Объект);
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ЦенообразованиеПредставление",		ТекстЦены);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказательИсточникаДанныхДляЦеныПриИзменении(Элемент)
	Модифицированность = Истина;
	Если НЕ ИндивидуальнаяНастройкаЦенообразованияДляСтатей Тогда
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ПоказательИсточникаДанныхДляЦены",	Объект.ПоказательИсточникаДанныхДляЦены);
		ТекстЦены = ТекстЦены(Объект);
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ЦенообразованиеПредставление",		ТекстЦены);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РучнаяНастройкаИтоговПоГруппамПриИзменении(Элемент)
	ОтветНаВопросРучнаяНастройкаИтоговПоГруппамПриИзменении = Новый ОписаниеОповещения("ОбработчикОтветаНаВопросРучнаяНастройкаИтоговПоГруппамПриИзменении",ЭтотОбъект);
	ПоказатьВопрос(ОтветНаВопросРучнаяНастройкаИтоговПоГруппамПриИзменении,"Будет изменен порядок влючения строк бюджета в итоги. Продолжить?",РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОтветаНаВопросРучнаяНастройкаИтоговПоГруппамПриИзменении(Ответ,ДополнительныеПараметры) Экспорт
	Если Ответ=Неопределено Тогда
		Возврат;
	ИначеЕсли Ответ=КодВозвратаДиалога.Нет Тогда
		Объект.РучнаяНастройкаИтоговПоГруппам = НЕ Объект.РучнаяНастройкаИтоговПоГруппам;
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	Если Объект.РучнаяНастройкаИтоговПоГруппам Тогда
		РасширеннаяНастройкаИтоговПоСтатьямИГруппамСтатей = Истина;
		УстановитьПризнакУчастияВИтогах(Ложь);
		Если Объект.РежимыРасчетаИтоговойСтрокиБюджета=ПредопределенноеЗначение("Перечисление.фин_РежимыРасчетаИтоговойСтрокиБюджета.ПоИтоговойФункции") Тогда
			Объект.РежимыРасчетаИтоговойСтрокиБюджета=ПредопределенноеЗначение("Перечисление.фин_РежимыРасчетаИтоговойСтрокиБюджета.НеРассчитывать");
			Сообщить("Изменен режим расчета итоговой строки бюджета");
		КонецЕсли;
	Иначе
		УстановитьПризнакУчастияВИтогах(Истина);
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакУчастияВИтогах(Признак)
	Дерево = РеквизитФормыВЗначение("ДеревоСтатей",Тип("ДеревоЗначений"));
	УстановитьПризнакУчастияВИтогахВСтроках(Дерево.Строки,Признак);
	ЗначениеВРеквизитФормы(Дерево,"ДеревоСтатей");
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакУчастияВИтогахВСтроках(Строки,Признак)
	Для Каждого СтрокаДерева Из Строки Цикл
		Если СтрокаДерева.ЭтоГруппа Тогда
			УстановитьПризнакУчастияВИтогахВСтроках(СтрокаДерева.Строки,Признак);
		Иначе
			СтрокаДерева.ИсключитьИзИтогов = НЕ Признак;
			СтрокаДерева.Модифицирована = Истина;
			СтрокаДерева.ИтогиПредставление = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеНастроекИтогов(СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеСтатей(Команда)
	Если ПроверитьЗаполнениеСтрок(ДеревоСтатей,Истина) Тогда
		ПоказатьПредупреждение(,"Проверка выполнена успешно!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФинансовыеПоказатели(Команда)
	Если Элементы.ДеревоСтатей.ТекущиеДанные<>Неопределено Тогда
		Ид = Элементы.ДеревоСтатей.ТекущиеДанные.Идентификатор;
	Иначе
		Ид = Неопределено;
	КонецЕсли;
	СохранениеДанных(Истина);
	Если Ид <>Неопределено Тогда
		НужнаяСтрока = НайтиСтроку(Ид,ДеревоСтатей.ПолучитьЭлементы());
		Если НужнаяСтрока<>Неопределено Тогда
			
			Элементы.ДеревоСтатей.ТекущаяСтрока = НужнаяСтрока;
		КонецЕсли;
	КонецЕсли;
	Если ВладелецФормы<>Неопределено Тогда
		Попытка
			ВладелецФормы.Обновить();
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатейТолькоДляПлановыхДанныхПриИзменении(Элемент)
	Элементы.ДеревоСтатей.ТекущиеДанные.Модифицирована = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиФактическихДанныхOnLine(Команда)
	Если Элементы.ДеревоСтатей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.ДеревоСтатей.ТекущиеДанные.ЭтоГруппа = Истина Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Элементы.ДеревоСтатей.ТекущиеДанные.Финансовыйпоказатель) Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Отчет.фин_НастройкиФактическихДанныхПоФинансовомуПоказателю.Форма",Новый Структура("НеВосстанавливатьНастройки,СформироватьПриОткрытии,ФинансовыйПоказатель,Дата",Истина,Истина,Элементы.ДеревоСтатей.ТекущиеДанные.Финансовыйпоказатель,ТекущаяДата()),,УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура СвязиСДругимиПоказателями(Команда)
	Если Элементы.ДеревоСтатей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.ДеревоСтатей.ТекущиеДанные.ЭтоГруппа = Истина Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Элементы.ДеревоСтатей.ТекущиеДанные.Финансовыйпоказатель) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("Адрес",АдресПараметров(Элементы.ДеревоСтатей.ТекущиеДанные.Финансовыйпоказатель,УникальныйИдентификатор,?(Найти(Команда.Имя,"Полный")<>0,Истина,Ложь)));
	ОткрытьФорму("Обработка.фин_ПостроениеЦепочкиСвязей.Форма", ПараметрыФормы, ЭтотОбъект, Элементы.ДеревоСтатей.ТекущиеДанные.Финансовыйпоказатель);//, ПараметрыВыполненияКоманды.Окно);
КонецПроцедуры

&НаСервере
Функция АдресПараметров(ПараметрКоманды,УникальныйИдентификатор,ВсеУровни)
	Возврат фин_ПроцедурыМеханизмовБюджетирования.ПередатьДанныеАнализаСтруктуры(ПараметрКоманды,УникальныйИдентификатор,ВсеУровни);	
КонецФункции

&НаКлиенте
Процедура ДеревоСтатейВидПоказателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыФинансовыхПоказателей.Оборотный"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыФинансовыхПоказателей.Рассчитываемый"));
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатейФормулаКоличествоПриИзменении(Элемент)
	Элементы.ДеревоСтатей.ТекущиеДанные.Модифицирована = Истина;
	Модифицированность = Истина;
	Если Элементы.ДеревоСтатей.ТекущиеДанные.ЭтоГруппа Тогда
		Если НЕ ПроверитьФормулуПоГруппеСтатей(Элементы.ДеревоСтатей.ТекущиеДанные.ФормулаКоличество,Элементы.ДеревоСтатей.ТекущиеДанные.Наименование) Тогда
			Элементы.ДеревоСтатей.ТекущиеДанные.ФормулаКоличество = ПредопределенноеЗначение("Справочник.фин_ФормулыРасчетаФинансовыхПоказателей.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФормулаКоличествоПриИзменении(Элемент)
	Модифицированность = Истина;
	ПроверитьФормулу(Объект.ФормулаКоличество);
КонецПроцедуры

&НаКлиенте
Процедура РежимыРасчетаИтоговойСтрокиБюджетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.РучнаяНастройкаИтоговПоГруппам Тогда
		СтандартнаяОбработка = Ложь;
		Список = Новый СписокЗначений;
		Список.Добавить(ПредопределенноеЗначение("Перечисление.фин_РежимыРасчетаИтоговойСтрокиБюджета.НеРассчитывать"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.фин_РежимыРасчетаИтоговойСтрокиБюджета.ПоФормуле"));
		ДанныеВыбора = Список;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФинансовыйПоказатель(Команда)
	Если Элементы.ДеревоСтатей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.ДеревоСтатей.ТекущиеДанные.ЭтоГруппа = Истина Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Элементы.ДеревоСтатей.ТекущиеДанные.Финансовыйпоказатель) Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.фин_ФинансовыеПоказатели.ФормаОбъекта",Новый Структура("Ключ",Элементы.ДеревоСтатей.ТекущиеДанные.Финансовыйпоказатель),,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСоответствийСтатьиПозициямОтчетовПоФинансовымБюджетам(Команда)
	Если Элементы.ДеревоСтатей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.ДеревоСтатей.ТекущиеДанные.ЭтоГруппа = Истина Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Элементы.ДеревоСтатей.ТекущиеДанные.Ссылка) Тогда
		ПоказатьПредупреждение(,"Статья еще не записана!");
		Возврат;
	КонецЕсли;
	ОткрытьФорму("РегистрСведений.фин_НастройкаСоответствийСтатейБюджетовПозициямОтчетовПоФинансовымБюджетам.ФормаСписка",Новый Структура("Отбор",Новый Структура("СтатьяБюджета",Элементы.ДеревоСтатей.ТекущиеДанные.Ссылка)),,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры

&НаКлиенте
Процедура КомандаВерсионированиеСтатейИспользуется(Команда)
	Модифицированность = Истина;
	ВерсионированиеСтатейИспользуется = НЕ ВерсионированиеСтатейИспользуется;
	Элементы.ФормаКомандаВерсионированиеСтатейИспользуется.Пометка = ВерсионированиеСтатейИспользуется;
	УстановитьЗначенияВПодчиненных(ДеревоСтатей,"Версия",ПредопределенноеЗначение("Справочник.фин_ВерсииБюджетов.ПустаяСсылка"));
	//Для Каждого ЭлементДерева Из ДеревоСтатей.ПолучитьЭлементы() Цикл
	//	Если НЕ ЭлементДерева.ЭтоГруппа Тогда
	//		ЭлементДерева.Модифицирована = (Элемент[Реквизит] <> Значение);
	//		ЭлементДерева[Реквизит] = ?(мТекущийРазрез=Неопределено ИЛИ НЕ ЗначениеЗаполнено(Элемент.ФинансовыйПоказатель),Значение,ВедетсяУчет(Элемент.ФинансовыйПоказатель,мТекущийРазрез));
	//	Иначе
	//		УстановитьЗначенияВПодчиненных(Элемент,Реквизит,Значение,мТекущийРазрез);
	//	КонецЕсли;
	//	УстановитьЗначенияВПодчиненных(ЭлементДерева,"Версия",ПредопределенноеЗначение("Справочник.фин_ВерсииБюджетов.ПустаяСсылка"));
	//КонецЦикла;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальнаяНастройкаПризнаковУчетаДляСтатейПриИзменении(Элемент)
	Модифицированность = Истина;
	Если НЕ ИндивидуальнаяНастройкаПризнаковУчетаДляСтатей Тогда
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"УчетПоСумме",Объект.УчетПоСумме);
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"УчетПоКоличеству",Объект.УчетПоКоличеству);
		Если НЕ (Объект.УчетПоСумме И Объект.УчетПоКоличеству) Тогда
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,"СпособЦенообразования",			ПредопределенноеЗначение("Перечисление.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПустаяСсылка"));
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ПоказательИсточникаДанныхДляЦены",	"");
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ИспользуемыйТипЦен",				фин_ОбщегоНазначенияКлиентПовтИсп.ПустойТипПлановыхЦен());
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ИсточникДанныхДляЦены",			ПредопределенноеЗначение("Справочник.фин_ИсточникиДанныхДляРасчетовБюджетирования.ПустаяСсылка"));
			ТекстЦены = ТекстЦены(Объект);
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ЦенообразованиеПредставление",		ТекстЦены);
		КонецЕсли;
	Иначе
		ИндивидуальнаяНастройкаЦенообразованияДляСтатей = Истина;
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальнаяНастройкаЦенообразованияДляСтатейПриИзменении(Элемент)
	Модифицированность = Истина;
	Если НЕ ИндивидуальнаяНастройкаЦенообразованияДляСтатей Тогда
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"СпособЦенообразования",			Объект.СпособЦенообразования);
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ПоказательИсточникаДанныхДляЦены",	Объект.ПоказательИсточникаДанныхДляЦены);
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ИспользуемыйТипЦен",				Объект.ИспользуемыйТипЦен);
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ИсточникДанныхДляЦены",			Объект.ИсточникДанныхДляЦены);
		ТекстЦены = ТекстЦены(Объект);
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ЦенообразованиеПредставление",		ТекстЦены);
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РазрезыУчетаИспользоватьПоУмолчаниюПриИзменении(Элемент)
	ТекущиеДанные = Элементы.РазрезыУчета.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Измерение) Тогда
		ТекущиеДанные.ИспользоватьПоУмолчанию = Ложь;
	Иначе
		Объект[ПолучитьИмя(ТекущиеДанные.Измерение)] = ТекущиеДанные.ИспользоватьПоУмолчанию;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазрезыУчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Копирование;
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальнаяНастройкаРазрезовУчетаДляСтатейПриИзменении(Элемент)
	Модифицированность = Истина;
	Если НЕ ИндивидуальнаяНастройкаРазрезовУчетаДляСтатей Тогда
		Для Каждого СтрокаРазрез Из Объект.РазрезыУчета Цикл
			ИмяРазреза = ПолучитьИмя(СтрокаРазрез.Измерение);
			СтрокаРазрез.ИспользоватьПоУмолчанию = Истина;
			Объект[ИмяРазреза] = Истина;
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,ИмяРазреза,Истина);
		КонецЦикла;
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьФинансовыеПоказателиСтатей(Команда)
	ОтображатьФинансовыеПоказатели = НЕ ОтображатьФинансовыеПоказатели;
	Элементы.ФормаОтображатьФинансовыеПоказателиСтатей.Пометка = ОтображатьФинансовыеПоказатели;
	Элементы.ДеревоСтатейФинансовыйПоказатель.Видимость = ОтображатьФинансовыеПоказатели;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатейИтогиПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ДеревоСтатей.ТекущиеДанные;
	ОписаниеОповещенияНастройкаИтогов = Новый ОписаниеОповещения("ОбработатьНастройкуИтогов",ЭтотОбъект,ТекущиеДанные.ПолучитьИдентификатор());
	ПараметрыНастройкаИтогов = Новый Структура("ИтоговаяФункция,ИсключитьИзИтогов,ПризнакВнутригрупповогоОборота,РучнаяНастройкаИтоговПоГруппам");
	ЗаполнитьЗначенияСвойств(ПараметрыНастройкаИтогов,ТекущиеДанные);
	ОткрытьФорму("Обработка.фин_УправлениеСтруктуройБюджета.Форма.ФормаНастройкиИтогов",ПараметрыНастройкаИтогов,ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещенияНастройкаИтогов,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНастройкуИтогов(РезультатВыбора,ИдентификаторСтроки) Экспорт 
	Если РезультатВыбора<>Неопределено Тогда
		ТекущиеДанные = ДеревоСтатей.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные,РезультатВыбора);
		ТекущиеДанные.ИтогиПредставление = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеНастроекИтогов(ТекущиеДанные);
		ТекущиеДанные.Модифицирована = Истина;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасширеннаяНастройкаИтоговПоСтатьямИГруппамСтатейПриИзменении(Элемент)
	Если НЕ РасширеннаяНастройкаИтоговПоСтатьямИГруппамСтатей Тогда
		Модифицированность = Истина;
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ИсключитьИзИтогов",				Ложь);
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ПризнакВнутригрупповогоОборота",	ПредопределенноеЗначение("Перечисление.фин_ТипыВнутригрупповыхОборотовПоБюджету.ПустаяСсылка"));
		УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ИтоговаяФункция",					ПредопределенноеЗначение("Перечисление.фин_ИтоговыеФункции.ПустаяСсылка"));
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатейРасчетыПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ДеревоСтатей.ТекущиеДанные;
	ОписаниеОповещенияНастройкаРасчетов = Новый ОписаниеОповещения("ОбработатьНастройкуРасчетов",ЭтотОбъект,ТекущиеДанные.ПолучитьИдентификатор());
	ПараметрыНастройкаРасчетов = Новый Структура("ВидСтрокиБюджета,УчетПоСумме,УчетПоКоличеству,ИспользоватьРасчетыТолькоДляПервоначальногоЗаполнения,ЧастотаВыполненияРасчетовПоФормулам,ПериодичностьВыполненияРасчетов,ЭтоГруппа,Формула,ФормулаКоличество,ТолькоДляПлановыхДанных,ВидПоказателя,ПоРасценкам,ОтносительныйПоказатель,ПризнакПеретекающегоОстатка");
	ЗаполнитьЗначенияСвойств(ПараметрыНастройкаРасчетов,ТекущиеДанные);
	ПараметрыНастройкаРасчетов.Вставить("РучнаяНастройкаИтоговПоГруппам",Объект.РучнаяНастройкаИтоговПоГруппам);
	Если ТекущиеДанные.ЭтоГруппа И Объект.РучнаяНастройкаИтоговПоГруппам Тогда
		ПараметрыНастройкаРасчетов.Вставить("УчетПоКоличеству",Объект.УчетПоКоличеству);
		ПараметрыНастройкаРасчетов.Вставить("УчетПоСумме",Объект.УчетПоСумме);
	КонецЕсли;
	ОткрытьФорму("Обработка.фин_УправлениеСтруктуройБюджета.Форма.ФормаНастройкиРасчетов",ПараметрыНастройкаРасчетов,ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещенияНастройкаРасчетов,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНастройкуРасчетов(РезультатВыбора,ИдентификаторСтроки) Экспорт 
	Если РезультатВыбора<>Неопределено Тогда
		ТекущиеДанные = ДеревоСтатей.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные,РезультатВыбора);
		ТекущиеДанные.РасчетыПредставление = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеНастроекРасчетов(ТекущиеДанные);
		ТекущиеДанные.Модифицирована = Истина;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭкспертныйРежим(Команда)
	ТребуетсяЭкспертныйРежим = Объект.РучнаяНастройкаИтоговПоГруппам ИЛИ  РасширеннаяНастройкаИтоговПоСтатьямИГруппамСтатей
						ИЛИ ИндивидуальнаяНастройкаПризнаковУчетаДляСтатей ИЛИ ИндивидуальнаяНастройкаЦенообразованияДляСтатей ИЛИ ИндивидуальнаяНастройкаРазрезовУчетаДляСтатей;
	Если ЭкспертныйРежим И ТребуетсяЭкспертныйРежим Тогда
		ТекстСообщения = "Экспертный режим не может быть отключен, пока используются следующие настройки:";
		Если Объект.РучнаяНастройкаИтоговПоГруппам Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС+Символы.Таб+" - Ручная настройка формул итогов по группам статей;";
		КонецЕсли;
		Если РасширеннаяНастройкаИтоговПоСтатьямИГруппамСтатей Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС+Символы.Таб+" - Расширенная настройка итогов по статьям и группам статей;";
		КонецЕсли;
		Если ИндивидуальнаяНастройкаПризнаковУчетаДляСтатей Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС+Символы.Таб+" - Индивидуальная настройка признаков учета для статей;";
		КонецЕсли;
		Если ИндивидуальнаяНастройкаРазрезовУчетаДляСтатей Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС+Символы.Таб+" - Индивидуальная настройка разрезов учета для статей;";
		КонецЕсли;
		Если ИндивидуальнаяНастройкаЦенообразованияДляСтатей Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС+Символы.Таб+" - Индивидуальная настройка ценообразования для статей;";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Элементы.ФормаЭкспертныйРежим.Пометка = ЭкспертныйРежим;
		Возврат;
	КонецЕсли;
	ЭкспертныйРежим = НЕ ЭкспертныйРежим;
	Элементы.ФормаЭкспертныйРежим.Пометка = ЭкспертныйРежим;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатейСпособЦенообразованияОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ДеревоСтатей.ТекущиеДанные;
	Если ТекущиеДанные.УчетПоСумме = Ложь ИЛИ ТекущиеДанные.УчетПоКоличеству = Ложь Тогда
		ПоказатьПредупреждение(,"Для данной строки цена не может использоваться");
		Возврат;
	КонецЕсли;
	ОписаниеОповещенияНастройкаИтогов = Новый ОписаниеОповещения("ОбработатьНастройкуЦенообразования",ЭтотОбъект,ТекущиеДанные.ПолучитьИдентификатор());
	ПараметрыЦены = Новый Структура("СпособЦенообразования,ИспользуемыйТипЦен,ИсточникДанныхДляЦены,ПоказательИсточникаДанныхДляЦены");
	ЗаполнитьЗначенияСвойств(ПараметрыЦены,ТекущиеДанные);
	ОткрытьФорму("Обработка.фин_УправлениеСтруктуройБюджета.Форма.ФормаНастройкиЦены",ПараметрыЦены,ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещенияНастройкаИтогов,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНастройкуЦенообразования(РезультатВыбора,ИдентификаторСтроки) Экспорт 
	Если РезультатВыбора<>Неопределено Тогда
		ТекущиеДанные = ДеревоСтатей.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные,РезультатВыбора);
		ТекущиеДанные.ЦенообразованиеПредставление = ТекстЦены(ТекущиеДанные);
		ТекущиеДанные.Модифицирована = Истина;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ДекорацияСпособЦенообразованияНажатие(Элемент)
	ОписаниеОповещенияНастройкаИтогов = Новый ОписаниеОповещения("ОбработатьНастройкуЦенообразованияБюджета",ЭтотОбъект);
	ПараметрыЦены = Новый Структура("СпособЦенообразования,ИспользуемыйТипЦен,ИсточникДанныхДляЦены,ПоказательИсточникаДанныхДляЦены");
	ЗаполнитьЗначенияСвойств(ПараметрыЦены,Объект);
	ОткрытьФорму("Обработка.фин_УправлениеСтруктуройБюджета.Форма.ФормаНастройкиЦены",ПараметрыЦены,ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещенияНастройкаИтогов,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьНастройкуЦенообразованияБюджета(РезультатВыбора,ИдентификаторСтроки) Экспорт 
	Если РезультатВыбора<>Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Объект,РезультатВыбора);
		Элементы.ДекорацияСпособЦенообразования.Заголовок = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеСпособаЦенообразования(Объект,Истина);
		Модифицированность = Истина;
		Если НЕ ИндивидуальнаяНастройкаЦенообразованияДляСтатей Тогда
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,"СпособЦенообразования",			Объект.СпособЦенообразования);
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ПоказательИсточникаДанныхДляЦены",	Объект.ПоказательИсточникаДанныхДляЦены);
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ИспользуемыйТипЦен",				Объект.ИспользуемыйТипЦен);
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ИсточникДанныхДляЦены",			Объект.ИсточникДанныхДляЦены);
			УстановитьЗначенияВПодчиненных(ДеревоСтатей,"ЦенообразованиеПредставление",		Элементы.ДекорацияСпособЦенообразования.Заголовок);
		КонецЕсли;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОтраженияФактаПоПоказателю(Команда)
	Если Элементы.ДеревоСтатей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.ДеревоСтатей.ТекущиеДанные.ЭтоГруппа = Истина Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Элементы.ДеревоСтатей.ТекущиеДанные.Финансовыйпоказатель) Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.фин_ПравилаОтраженияФактическихДанных.Форма.ФормаПравилПоФинансовомуПоказателю",Новый Структура("ФинансовыйПоказатель",Элементы.ДеревоСтатей.ТекущиеДанные.Финансовыйпоказатель),,УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединенныеФайлы(Команда)
	мПараметры = Новый Структура;
	мПараметры.Вставить("ВладелецФайла", Объект.Бюджет);
	Заголовок = НСтр("ru = 'Присоединенные файлы'");
	мПараметры.Вставить("ЗаголовокФормы", Заголовок);
	
	ОткрытьФорму(
		"Справочник.Файлы.Форма.ФормаСпискаПрисоединенныхФайлов", 
		мПараметры,ЭтотОбъект, 
		УникальныйИдентификатор, 
		ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатейПозицияКлассификатораСтатейПриИзменении(Элемент)
	Элементы.ДеревоСтатей.ТекущиеДанные.Модифицирована = Истина;
	Модифицированность = Истина;
КонецПроцедуры
