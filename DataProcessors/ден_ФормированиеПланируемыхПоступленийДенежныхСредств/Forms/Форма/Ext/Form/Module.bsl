////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УстановитьЗначенияРеквизитовППДС" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Массив = Новый Массив();
			Если Параметр.ФинПоказательИспользовать Тогда
				Массив.Добавить("ФинансовыйПоказатель");
			КонецЕсли;
						
			Если Параметр.ПодразделениеИспользовать Тогда
				Массив.Добавить("Подразделение");
			КонецЕсли;	
			Если Параметр.СтатьяДДСИспользовать Тогда
				Массив.Добавить("СтатьяДДС");
            КонецЕсли;
			ЗаполнитьРеквизитыДерева(ДеревоЗаявок.ПолучитьЭлементы(), Массив, Параметр);
		
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_РаботаСоСтруктурнымиПодразделениями.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВключаяПодчиненныеПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ДеревоЗаявок>

&НаКлиенте
Процедура ДеревоЗаявокПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество()>0 Тогда
		УстановитьФлажкиВПодчиненных(Элемент.ТекущиеДанные.ПолучитьЭлементы(),Элемент.ТекущиеДанные.Применить);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаявокППДСОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаявокППДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Период.ДатаОкончания = '00010101' ИЛИ Период.ДатаНачала = '00010101' Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен период формирования заявок!'"), , "Период");
		Возврат;
	ИначеЕсли Период.ДатаОкончания < Период.ДатаНачала Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата окончания периода не может быть больше даты начала периода!'"), , "Период");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Организация не выбрана!'"), , "Организация");
		Возврат;
	КонецЕсли;
	ЗаполнитьНаСервере();
	УстановитьФлажкиВПодчиненных(ДеревоЗаявок.ПолучитьЭлементы(), Истина);
    РазвернутьДерево("ДеревоЗаявок", ДеревоЗаявок.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьФлажкиВПодчиненных(ДеревоЗаявок.ПолучитьЭлементы(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьФлажкиВПодчиненных(ДеревоЗаявок.ПолучитьЭлементы(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаявки(Команда)
	
	СформироватьЗаявкиСерв();
	РазвернутьДерево("ДеревоЗаявок", ДеревоЗаявок.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизиты(Команда)
	
	ОткрытьФорму("Обработка.ден_ФормированиеПланируемыхПоступленийДенежныхСредств.Форма.ФормаЗаполненияРеквизитов", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	ПровестиНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
		
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		//
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Период.ДатаНачала = НачалоМесяца(ТекущаяДата());
	Период.ДатаОкончания = КонецМесяца(ТекущаяДата());
	МинимальнаяДатаПлатежа = ТекущаяДата();
	
	Если Параметры.Свойство("Договор") Тогда
		Объект.Договор = Параметры.Договор;
	КонецЕсли;
	Если Параметры.Свойство("Контрагент") Тогда
		Объект.Контрагент = Параметры.Контрагент;
	КонецЕсли;
	Если Параметры.Свойство("Организация") Тогда
		Объект.Организация = Параметры.Организация;
	Иначе
		Объект.Организация = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
	КонецЕсли;
	Если Параметры.Свойство("ОтображатьДанныеПоПодчиненнымДоговорамКонтрагента") Тогда 
		ОтображатьДанныеПоПодчиненнымДоговорамКонтрагента = Параметры.ОтображатьДанныеПоПодчиненнымДоговорамКонтрагента;
	Иначе 
		ОтображатьДанныеПоПодчиненнымДоговорамКонтрагента = Ложь;
	КонецЕсли;	

	НадписьПериод 			= "Период";
	НадписьОтбор			= "Отбор";
	НадписьСписокПлатежей 	= "Список платежей";	
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
		
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;	
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурноеПодразделение) И Объект.ВключаяПодчиненные Тогда
		Объект.ВключаяПодчиненные = Ложь;
	КонецЕсли;
	Элементы.ВключаяПодчиненные.Видимость			= ЗначениеЗаполнено(Объект.СтруктурноеПодразделение);
	
	Если Объект.ВключаяПодчиненные Тогда
		Элементы.ДеревоЗаявокВидОплаты.Заголовок = "Вид оплаты/ Структурное подразделение/ Контрагент/ Договор/ Дата оплаты";
	Иначе
		Элементы.ДеревоЗаявокВидОплаты.Заголовок = "Вид оплаты/ Контрагент/ Договор/ Дата оплаты";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьНаСервере()

	РезультатЗаявок = дог_УправлениеДоговорами.СформироватьСписокПлатежей(Период.ДатаНачала,Период.ДатаОкончания,Объект.Организация,Объект.СтруктурноеПодразделение,Объект.ВключаяПодчиненные,Объект.Контрагент,Объект.Договор,ОтображатьДанныеПоПодчиненнымДоговорамКонтрагента,Истина,МинимальнаяДатаПлатежа);
	Дерево = РеквизитФормыВЗначение("ДеревоЗаявок");
	Дерево.Строки.Очистить();
	ВыборкаВидОплаты = РезультатЗаявок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВидОплаты.Следующий() Цикл
		Строка = Дерево.Строки.Добавить();
		Строка.ВидОплатыОрг = ВыборкаВидОплаты.ВидОплаты;
		ВыборкаОрганизация = ВыборкаВидОплаты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОрганизация.Следующий() Цикл
			ВыборкаСП = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСП.Следующий() Цикл
				Если Объект.ВключаяПодчиненные Тогда
					СтрокаСП = Строка.Строки.Добавить();
					СтрокаСП.ВидОплатыОрг = ВыборкаСП.СтруктурноеПодразделение;
					СтрокаДляДобавленияКонтрагента = СтрокаСП;
				Иначе
					СтрокаДляДобавленияКонтрагента = Строка;
				КонецЕсли;
		        ВыборкаКонтрагент = ВыборкаСП.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаКонтрагент.Следующий() Цикл
					СтрокаК = СтрокаДляДобавленияКонтрагента.Строки.Добавить();
					СтрокаК.ВидОплатыОрг = ВыборкаКонтрагент.Контрагент;
			        ВыборкаДоговор = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаДоговор.Следующий() Цикл
						СтрокаД = СтрокаК.Строки.Добавить();
						СтрокаД.ВидОплатыОрг = ВыборкаДоговор.Договор;
					    ВыборкаДатаОплаты = ВыборкаДоговор.Выбрать();
						Пока ВыборкаДатаОплаты.Следующий() Цикл
							СтрокаДО = СтрокаД.Строки.Добавить();
							СтрокаДО.ВидОплатыОрг = ВыборкаДатаОплаты.ДатаОплаты;
							СтрокаДО.Валюта = ВыборкаДатаОплаты.Валюта;
							СтрокаДО.Организация = ВыборкаДатаОплаты.Организация;
							СтрокаДО.СтруктурноеПодразделение = ВыборкаДатаОплаты.СтруктурноеПодразделение;
					        СтрокаДО.Сумма = ВыборкаДатаОплаты.Сумма;
							СтрокаДО.СуммаПени = ВыборкаДатаОплаты.СуммаПени;
							СтрокаДО.СуммаЗаявки = ВыборкаДатаОплаты.СуммаОстаточнойОплаты+СтрокаДО.СуммаПени;
							СтрокаДО.ЭтапОплаты = ВыборкаДатаОплаты.ЭтапОплаты;
							СтрокаДО.ДокументСобытия = ВыборкаДатаОплаты.ДокументСобытия;
							СтрокаДО.Сценарий = ВыборкаДатаОплаты.Сценарий;
							СтрокаДО.ВидОплатыПоДоговору = ВыборкаДатаОплаты.ВидОплатыПоДоговору;
							СтрокаДО.ВидОплаты = ВыборкаДатаОплаты.ВидОплаты;
							СтрокаДО.ФинансовыйПоказатель = ВыборкаДатаОплаты.ФинансовыйПоказатель;
							СтрокаДО.СчетКасса = ВыборкаДатаОплаты.СчетКасса;
							СтрокаДО.СтатьяДДС = ВыборкаДатаОплаты.СтатьяДДС;
							СтрокаДО.Подразделение = ВыборкаДатаОплаты.Подразделение;
							СтрокаДО.ВидОперацииЗаявки = ВыборкаДатаОплаты.ВидОперацииЗаявки;
						КонецЦикла;

					КонецЦикла;

				КонецЦикла;

			КонецЦикла;
			

		КонецЦикла;
		
	КонецЦикла;
		
	ЗначениеВРеквизитФормы(Дерево, "ДеревоЗаявок");
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(ИмяДерева, СтрокиДерева)
	
	Для Каждого Строка Из  СтрокиДерева Цикл
    	Элементы[ИмяДерева].Развернуть(Строка.ПолучитьИдентификатор() ,Истина);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиВПодчиненных(Строки, Пометка)
	
	Для Каждого СтрокаПодчиненная Из Строки Цикл
		СтрокаПодчиненная.Применить = Пометка;
		УстановитьФлажкиВПодчиненных(СтрокаПодчиненная.ПолучитьЭлементы(),Пометка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаявкиСерв()
	
	Дерево = РеквизитФормыВЗначение("ДеревоЗаявок");
	ПолучитьСтрокиФормированияЗаявок(Дерево.Строки,МинимальнаяДатаПлатежа);
	ЗначениеВРеквизитФормы(Дерево,"ДеревоЗаявок");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьЗаявкиНаСервере(СтрокаДерева, ДатаПлатежа)
	
	Попытка
		Документ = Документы.ден_ПланируемоеПоступлениеДенежныхСредств.СоздатьДокумент();
		Документ.Дата = ТекущаяДата();
		
		Документ.Автор = ПараметрыСеанса.ТекущийПользователь;
		
		Документ.Ответственный = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнойОтветственный");
		Документ.Контрагент = СтрокаДерева.Контрагент;
		Документ.ДатаПоступления = ?(СтрокаДерева.ДатаОплаты<ДатаПлатежа,ДатаПлатежа,СтрокаДерева.ДатаОплаты);
		Документ.ВидОперации = СтрокаДерева.ВидОперацииЗаявки;
		Документ.ВключатьВПлатежныйКалендарь = Истина;
		Документ.Организация = СтрокаДерева.Организация;
		Документ.СтруктурноеПодразделение = СтрокаДерева.СтруктурноеПодразделение;
		Документ.ЦФО = СтрокаДерева.Подразделение;
		Документ.ФормаОплаты = СтрокаДерева.ВидОплаты;
	    Документ.ФинансовыйПоказатель = СтрокаДерева.ФинансовыйПоказатель;
		
		Если СтрокаДерева.ВидОплатыПоДоговору = Перечисления.дог_ВидыОплатыПоДоговору.ПоГрафику ИЛИ СтрокаДерева.ВидОплатыПоДоговору = Перечисления.дог_ВидыОплатыПоДоговору.ПоИндивидуальномуГрафику Тогда
			Документ.ЭтапОплаты = СтрокаДерева.ЭтапОплаты;
			Документ.ДокументСобытия = СтрокаДерева.ДокументСобытия;
		ИначеЕсли СтрокаДерева.ВидОплатыПоДоговору = Перечисления.дог_ВидыОплатыПоДоговору.Регулярная Тогда
			Документ.РасчетнаяДатаПрихода = СтрокаДерева.ДатаОплаты;
		КонецЕсли;
		
		Документ.БанковскийСчетКасса = СтрокаДерева.СчетКасса;
		Документ.ВалютаДокумента = Документ.БанковскийСчетКасса.ВалютаДенежныхСредств;
		СтруктураКурсаВалютаДокумента = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(Документ.ВалютаДокумента,СтрокаДерева.ДатаОплаты);
	    Документ.КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
		Документ.КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;

		Документ.Состояние = Перечисления.СостоянияОбъектов.Подготовлен;
		СтруктураКурсаВалютаПлатежа = фин_ОбщегоНазначенияСервер.ПолучитьКурсВалюты(СтрокаДерева.Валюта,СтрокаДерева.ДатаОплаты);

		СтрокаТЧ = Документ.РасшифровкаПлатежа.Добавить();
		СтрокаТЧ.ДоговорКонтрагента = СтрокаДерева.Договор;
		СтрокаТЧ.СтатьяДвиженияДенежныхСредств = СтрокаДерева.СтатьяДДС;
		СтрокаТЧ.СуммаВзаиморасчетов = СтрокаДерева.Сумма;
		СтрокаТЧ.КратностьВзаиморасчетов = СтруктураКурсаВалютаПлатежа.Кратность;
		СтрокаТЧ.КурсВзаиморасчетов = СтруктураКурсаВалютаПлатежа.Курс;
		ВалютаВзаиморасчетов = СтрокаДерева.Валюта;
		
		Если ВалютаВзаиморасчетов=Документ.ВалютаДокумента Тогда
			СтрокаТЧ.СуммаПлатежа=СтрокаТЧ.СуммаВзаиморасчетов;
		
		ИначеЕсли (Документ.КурсДокумента <> 0) И (СтрокаТЧ.КратностьВзаиморасчетов <> 0) И (СтрокаТЧ.КурсВзаиморасчетов <> 0) Тогда
			СтрокаТЧ.СуммаПлатежа=фин_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
			Документ.ВалютаДокумента,
			СтрокаТЧ.КурсВзаиморасчетов,Документ.КурсДокумента,
			СтрокаТЧ.КратностьВзаиморасчетов,Документ.КратностьДокумента);	
		Иначе
			СтрокаТЧ.СуммаПлатежа = 0;
		КонецЕсли;

		Документ.СуммаДокумента = СтрокаТЧ.СуммаПлатежа;
		Документ.Записать();
		Возврат Документ.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось сформировать заявку по договору """ + СтрокаДерева.Договор + """ на дату " + СтрокаДерева.ДатаОплаты + "
															| по причине: " + ОписаниеОшибки());

		Возврат Документы.ден_ПланируемоеПоступлениеДенежныхСредств.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьСтрокиФормированияЗаявок(Строки,ДатаПлатежа)
	
	Для Каждого СтрокаПодчиненная Из Строки Цикл
		Если СтрокаПодчиненная.Применить 
			И СтрокаПодчиненная.СуммаЗаявки > 0 
			И НЕ ЗначениеЗаполнено(СтрокаПодчиненная.ППДС) Тогда
			
			СтруктураСтроки = Новый Структура("Контрагент,ДатаОплаты,Организация,СтруктурноеПодразделение,ВидОплаты,ФинансовыйПоказатель,Сценарий,Договор,СтатьяДДС,Сумма,СчетКасса,Валюта,Подразделение,ЭтапОплаты,ДокументСобытия, ВидОплатыПоДоговору, ВидОперацииЗаявки");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки,СтрокаПодчиненная,"ФинансовыйПоказатель,Сценарий,СтатьяДДС,СчетКасса,Валюта,ВидОплаты,Подразделение,Организация,СтруктурноеПодразделение, ЭтапОплаты,ДокументСобытия, ВидОплатыПоДоговору, ВидОперацииЗаявки");
			СтруктураСтроки.ДатаОплаты = СтрокаПодчиненная.ВидОплатыОрг;
			СтруктураСтроки.Сумма = СтрокаПодчиненная.СуммаЗаявки;
			СтруктураСтроки.Договор = СтрокаПодчиненная.Родитель.ВидОплатыОрг;
			СтруктураСтроки.Контрагент = СтрокаПодчиненная.Родитель.Родитель.ВидОплатыОрг;
			СтрокаПодчиненная.ППДС = СформироватьЗаявкиНаСервере(СтруктураСтроки,ДатаПлатежа);
		КонецЕсли;
		
		ПолучитьСтрокиФормированияЗаявок(СтрокаПодчиненная.Строки,ДатаПлатежа);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыДерева(Строки, Массив, Параметр)

	Для Каждого СтрокаПодчиненная Из Строки Цикл
		Если ТипЗнч(СтрокаПодчиненная.ВидОплатыОрг) = Тип("Дата") Тогда
			Для Каждого ЭлМас Из Массив Цикл
			
				Если СтрокаПодчиненная.Применить Тогда
					СтрокаПодчиненная[Элмас] = Параметр[Элмас];	
				КонецЕсли;
					
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьРеквизитыДерева(СтрокаПодчиненная.ПолучитьЭлементы(), Массив, Параметр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПровестиНаСервере()
	
	Дерево = РеквизитФормыВЗначение("ДеревоЗаявок");
	ОбходДереваСПроведениемЗаявок(Дерево.Строки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбходДереваСПроведениемЗаявок(Строки)
	
	Для Каждого СтрокаПодчиненная Из Строки Цикл
		Если СтрокаПодчиненная.Применить 
			И ЗначениеЗаполнено(СтрокаПодчиненная.ППДС) Тогда
			Попытка
				ДокументОбъект = СтрокаПодчиненная.ППДС.ПолучитьОбъект();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Невозможно провести документ: " + СтрокаПодчиненная.ППДС + " " + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		ОбходДереваСПроведениемЗаявок(СтрокаПодчиненная.Строки);
	КонецЦикла;
	
КонецПроцедуры
