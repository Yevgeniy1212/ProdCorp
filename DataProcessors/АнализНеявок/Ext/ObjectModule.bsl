Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

Функция ВернутьТекстВТПоСостояниюРаботников()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСостояний.Период КАК Период,
	|	ТаблицаСостояний.Регистратор КАК Регистратор,
	|	ТаблицаСостояний.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСостояний.Активность,
	|	ТаблицаСостояний.Сотрудник КАК Сотрудник,
	|	ТаблицаСостояний.Организация,
	|	ТаблицаСостояний.Состояние КАК Состояние,
	|	ТаблицаСостояний.ПериодЗавершения КАК ПериодЗавершения,
	|	ТаблицаСостояний.СостояниеЗавершения
	|ПОМЕСТИТЬ ВТТаблицаСостояний
	|ИЗ
	|	РегистрСведений.СостояниеРаботниковОрганизаций КАК ТаблицаСостояний
	|ГДЕ
	|	(НЕ ТаблицаСостояний.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров)";
    Если ОтбиратьСобытияПоДокументу Тогда
	    ТекстЗапроса = ТекстЗапроса + "
    	|	И ТаблицаСостояний.Регистратор = &Регистратор";
	КонецЕсли;
    ТекстЗапроса = ТекстЗапроса + "
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Период,
	|	НомерСтроки,
	|	Сотрудник,
	|	Состояние,
	|	ПериодЗавершения
	|";
	
	Возврат ТекстЗапроса;

КонецФункции
	
Функция ВернутьТекстВТПоИсправляемымДокументам(ПараметрыЗапроса, СоответствиеДокументовИсправлений)
	
	МДСостояний = Метаданные.РегистрыСведений.СостояниеРаботниковОрганизаций;
	
	ТаблицаСостояний = Новый ТаблицаЗначений;
	ТаблицаСостояний.Колонки.Добавить("Регистратор",	Новый ОписаниеТипов("ДокументСсылка.ВозвратНаРаботуОрганизаций,
																			|ДокументСсылка.КомандировкиОрганизаций,
																			|ДокументСсылка.ОтзывИзОтпусковОрганизаций,
																			|ДокументСсылка.ОтпускаОрганизаций,
																			|ДокументСсылка.ОтсутствиеНаРаботеОрганизаций,
																			|ДокументСсылка.ТрудовыеОтпускаОрганизаций,
																			|ДокументСсылка.КорректировкаЗаписейРегистров"));
																			
	ТаблицаСостояний.Колонки.Добавить("Период",			Новый ОписаниеТипов("Дата"));
	ТаблицаСостояний.Колонки.Добавить("НомерСтроки",	Новый ОписаниеТипов("Число"));
	Для Каждого Измерение Из МДСостояний.Измерения Цикл
		ТаблицаСостояний.Колонки.Добавить(Измерение.Имя, Измерение.Тип);
	КонецЦикла;
	Для Каждого Ресурс Из МДСостояний.Ресурсы Цикл
		ТаблицаСостояний.Колонки.Добавить(Ресурс.Имя, Ресурс.Тип);
	КонецЦикла;
	Для Каждого Реквизит Из МДСостояний.Реквизиты Цикл
		ТаблицаСостояний.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СоответствиеДокументовИсправлений Цикл
		ДвиженияИсправляемогоДокумента = КлючИЗначение.Значение.ДвиженияИсправляемогоДокумента.Получить();
		
		Если ДвиженияИсправляемогоДокумента = Неопределено ИЛИ ДвиженияИсправляемогоДокумента.Получить("СостояниеРаботниковОрганизаций") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СостоянияРаботников = ДвиженияИсправляемогоДокумента["СостояниеРаботниковОрганизаций"];
		Для Каждого Состояние Из СостоянияРаботников Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаСостояний.Добавить(), Состояние);
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыЗапроса.Вставить("ТаблицаСостояний",	ТаблицаСостояний);
	
	Возврат
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблицаСостояний
	|ИЗ
	|	&ТаблицаСостояний КАК ТаблицаСостояний
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Период,
	|	НомерСтроки,
	|	Сотрудник,
	|	Состояние,
	|	ПериодЗавершения";
	
КонецФункции

// Формирует запрос по регистру СостояниеРаботниковОрганизаций
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапрос(Организации, МассивДокументовИсправлений = Неопределено, СоответствиеДокументовИсправлений = Неопределено) Экспорт  

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ОтбиратьСобытияПоДокументу Тогда
		ДатаН = КадровыйДокумент.Дата;
		Запрос.УстановитьПараметр("Регистратор",	КадровыйДокумент);
		Запрос.УстановитьПараметр("ДатаНачала",		НачалоМесяца(ДатаН));
		Запрос.УстановитьПараметр("ДатаОкончания",	КонецМесяца(ДатаН));
	Иначе
		Запрос.УстановитьПараметр("Регистратор",	МассивДокументовИсправлений);
		Запрос.УстановитьПараметр("ДатаНачала",		НачалоМесяца(ДатаНачала));
		Запрос.УстановитьПараметр("ДатаОкончания",	КонецМесяца(ДатаОкончания));
	КонецЕсли;
	Запрос.УстановитьПараметр("Организации",			    Организации);	
	Запрос.УстановитьПараметр("ПустаяОрганизация",		    Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПодразделениеОрганизации",   ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("ВыбНеявка",				    Неявка);
	Запрос.УстановитьПараметр("ОтбиратьСобытияПоДокументу", ОтбиратьСобытияПоДокументу ИЛИ МассивДокументовИсправлений <> Неопределено);
	
	Если ЗначениеЗаполнено(Организации) Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВЫБОР
			|		КОГДА Организации.ГоловнаяОрганизация = Организации.Ссылка
			|			ТОГДА Организации.Ссылка
			|		ИНАЧЕ Организации.ГоловнаяОрганизация
			|	КОНЕЦ КАК ГоловнаяОрганизация
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка В(&Организации)";
			
		Запрос.УстановитьПараметр("ГоловнаяОрганизации", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ГоловнаяОрганизация"));
		
	КонецЕсли;

	// Все возможные значения перечисления СостоянияРаботникаОрганизации
	// И сразу же составим список допустимых намеченных событий, которые надо анализировать
	СписокНамеченныхСобытий = Новый СписокЗначений;	
	ЗначенияПеречисления = Метаданные.Перечисления.СостоянияРаботникаОрганизации.ЗначенияПеречисления;	
	ЗначенияНамеченныхСобытий = Метаданные.Перечисления.НамеченныеСобытияПоПерсоналуОрганизаций.ЗначенияПеречисления;
	Для Каждого ТекущееЗначение Из ЗначенияПеречисления Цикл
		ИмяЗначения = ТекущееЗначение.Имя;
		ЗначениеСостояние = Перечисления.СостоянияРаботникаОрганизации[ИмяЗначения];
		Запрос.УстановитьПараметр(ИмяЗначения, ЗначениеСостояние);
		
		Если ЗначенияНамеченныхСобытий.Найти(ИмяЗначения) <> Неопределено Тогда
			
			НамеченноеСобытие = Перечисления.НамеченныеСобытияПоПерсоналуОрганизаций[ИмяЗначения];
			СписокНамеченныхСобытий.Добавить(НамеченноеСобытие);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Запрос.УстановитьПараметр("СписокНамеченныхСобытий", СписокНамеченныхСобытий);

	// Элементы из классификатора использования рабочего времени
	МассивНеоплачиваемыеОтпуска = Новый Массив();
	МассивНеоплачиваемыеОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпуск);
	МассивНеоплачиваемыеОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйДополнительныйОтпуск);
	Запрос.УстановитьПараметр("УчетВремениНеоплачиваемыеОтпуска", 		   МассивНеоплачиваемыеОтпуска);
	Запрос.УстановитьПараметр("УчетВремениОтпускНаОбучениеНеоплачиваемый", Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый);
	Запрос.УстановитьПараметр("УчетВремениВынужденныйПрогул",			   Справочники.КлассификаторИспользованияРабочегоВремени.ВынужденныйПрогул);
	Запрос.УстановитьПараметр("УчетВремениГосударственныеОбязанности",	   Справочники.КлассификаторИспользованияРабочегоВремени.ГосударственныеОбязанности);
	Запрос.УстановитьПараметр("УчетВремениПрогулы",						   Справочники.КлассификаторИспользованияРабочегоВремени.Прогулы);
	
	МассивОплачиваемыеПростои = Новый Массив;
	МассивОплачиваемыеПростои.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Простой);
	МассивОплачиваемыеПростои.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботодателя);
	Запрос.УстановитьПараметр("УчетВремениОплачиваемыеПростои", МассивОплачиваемыеПростои);

	Запрос.УстановитьПараметр("УчетВремениПростойПоВинеРаботника", Справочники.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботника);

	МассивОплачиваемыеУчебныеОтпуска = Новый Массив();
	МассивОплачиваемыеУчебныеОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение);
	МассивОплачиваемыеУчебныеОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификации);
	МассивОплачиваемыеУчебныеОтпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификацииВДругойМестности);
	Запрос.УстановитьПараметр("УчетВремениОплачиваемыеУчебныеОтпуска", МассивОплачиваемыеУчебныеОтпуска);
	Запрос.УстановитьПараметр("УчетВремениДополнительныйОтпуск", Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск);

	Запрос.УстановитьПараметр("УчетВремениКомандировка", Справочники.КлассификаторИспользованияРабочегоВремени.Командировка);
	
	// Пустые типы документов для дальнейшей привязки к типу документа
	Запрос.УстановитьПараметр("ПустаяСсылкаБольничныйЛист",      Документы.НачислениеПоБольничномуЛисту.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаНачислениеОтпуска",   Документы.НачислениеОтпускаРаботникамОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаНевыходы", 			 Документы.НевыходыВОрганизациях.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаОплатаПоСреднему", 	 Документы.ОплатаПоСреднемуЗаработку.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаОтпускПоУходу", 		 Документы.ОтпускПоУходуЗаРебенком.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаРегистрацияПростоев", Документы.РегистрацияПростоевВОрганизациях.ПустаяСсылка());
	
	// Виды расчета
	Запрос.УстановитьПараметр("ВРОтпускБезОплаты", 				 ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплаты);
	Запрос.УстановитьПараметр("ВРОтпускБезОплатыУчебный", 		 ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыУчебный);
	Запрос.УстановитьПараметр("ВРНевыход",						 ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Невыход);
	Запрос.УстановитьПараметр("ВРПрогул",						 ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Прогул);
		
	// Способы расчета
	Запрос.УстановитьПараметр("РасчетПоСреднемуЗаработку", 		 Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	
	Запрос.УстановитьПараметр("Уволен",							 Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("ПустаяДата", 					 '00010101');
	
	// Значения, подставляемые по умолчанию в дополнительные реквизиты
	Запрос.УстановитьПараметр("НетрудоспособностьОбщееЗаболевание",     Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание);
	Запрос.УстановитьПараметр("НетрудоспособностьПоБеременностиИРодам", Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам);
	Запрос.УстановитьПараметр("ОбщееОграничениеПособия",				Перечисления.ВидыОграниченияПособия.ОбщееОграничение);
	Запрос.УстановитьПараметр("БезОграниченияПособия", 					Перечисления.ВидыОграниченияПособия.БезОграничений);
	Запрос.УстановитьПараметр("ВидПростояПоВинеРаботодателя", 			Перечисления.ВидыПростояРаботника.ПоВинеРаботодателя);
	Запрос.УстановитьПараметр("ПустойСпособБУ", 						Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка());
	Запрос.УстановитьПараметр("ЧасовоеНеотработанное", 					Перечисления.ВидыВремени.ЧасовоеНеотработанное);
    
    // Определим периоды смены (реальные или намеченные) состояния работников за указанный пользователем интервал.
	// Выбираем намеченные события, зарегистрированные тем же регистратором.

	Если СоответствиеДокументовИсправлений = Неопределено Тогда
		Запрос.Текст = ВернутьТекстВТПоСостояниюРаботников();
	Иначе
		Запрос.Текст = ВернутьТекстВТПоИсправляемымДокументам(Запрос.Параметры, СоответствиеДокументовИсправлений);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	СостояниеРаботниковТекст = 
		"ВЫБРАТЬ
		|	СостоянияРаботников.Период КАК Период,
		|	СостоянияРаботников.Регистратор КАК Регистратор,
		|	СостоянияРаботников.НомерСтроки КАК НомерСтроки,
		|	СостоянияРаботников.Сотрудник КАК Сотрудник,
		|	СостоянияРаботников.Организация,
		|	СостоянияРаботников.Состояние КАК Состояние,
		|	СостоянияРаботников.ПериодЗавершения КАК ПериодЗавершения,
		|	СостоянияРаботников.СостояниеЗавершения
		|ПОМЕСТИТЬ ВТ_СостоянияРаботников
		|ИЗ
		|	ВТТаблицаСостояний КАК СостоянияРаботников
		|ГДЕ
		|	НЕ СостоянияРаботников.Состояние В (&Работает, &НеРаботает)
		|	И СостоянияРаботников.Организация В(&ГоловнаяОрганизации)
		|	И ВЫБОР
		|			КОГДА НЕ &ОтбиратьСобытияПоДокументу
		|				ТОГДА СостоянияРаботников.Регистратор.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			ИНАЧЕ СостоянияРаботников.Регистратор В (&Регистратор)
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Период,
		|	НомерСтроки,
		|	Сотрудник,
		|	Состояние,
		|	ПериодЗавершения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостояниеРаботников.Регистратор КАК Регистратор,
		|	СостояниеРаботников.НомерСтроки КАК НомерСтроки,
		|	МИНИМУМ(СостояниеБудущее.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_ДатыБудущихСостояний
		|ИЗ
		|	ВТ_СостоянияРаботников КАК СостояниеРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаСостояний КАК СостояниеБудущее
		|		ПО СостояниеРаботников.Организация = СостояниеБудущее.Организация
		|			И СостояниеРаботников.Сотрудник = СостояниеБудущее.Сотрудник
		|			И СостояниеРаботников.Период < СостояниеБудущее.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	СостояниеРаботников.Регистратор,
		|	СостояниеРаботников.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостояниеРаботников.Регистратор КАК Регистратор,
		|	СостояниеРаботников.НомерСтроки КАК НомерСтроки,
		|	МАКСИМУМ(РаботникиОрганизации.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_ПоследниеДатыНазначений
		|ИЗ
		|	ВТ_СостоянияРаботников КАК СостояниеРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|		ПО СостояниеРаботников.Сотрудник = РаботникиОрганизации.Сотрудник
		|			И СостояниеРаботников.Организация = РаботникиОрганизации.Организация
		|			И (РаботникиОрганизации.Период <= СостояниеРаботников.Период)
		|
		|СГРУППИРОВАТЬ ПО
		|	СостояниеРаботников.Регистратор,
		|	СостояниеРаботников.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СостояниеРаботников.Регистратор КАК КадровыйДокумент,
		|	СостояниеРаботников.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА СостояниеРаботников.Период >= ДАТАВРЕМЯ(2008, 1, 1)
		|				И СостояниеРаботников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком)
		|		ИНАЧЕ СостояниеРаботников.Состояние
		|	КОНЕЦ КАК Состояние,
		|	СостояниеРаботников.Период КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА СостояниеРаботников.ПериодЗавершения <> &ПустаяДата
		|				И СостояниеРаботников.ПериодЗавершения < ЕСТЬNULL(СостояниеБудущее.Период, ДОБАВИТЬКДАТЕ(СостояниеРаботников.ПериодЗавершения, ДЕНЬ, -1))
		|			ТОГДА ДОБАВИТЬКДАТЕ(СостояниеРаботников.ПериодЗавершения, ДЕНЬ, -1)
		|		КОГДА НЕ СостояниеБудущее.Период ЕСТЬ NULL 
		|			ТОГДА ДОБАВИТЬКДАТЕ(СостояниеБудущее.Период, ДЕНЬ, -1)
		|		КОГДА СостояниеРаботников.ПериодЗавершения <> &ПустаяДата
		|			ТОГДА ДОБАВИТЬКДАТЕ(СостояниеРаботников.ПериодЗавершения, ДЕНЬ, -1)
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НамеченныеСобытия.ДатаИзменения, ДЕНЬ, -1)
		|	КОНЕЦ КАК ДатаОкончания,
		|	СостояниеРаботников.Организация КАК Организация
		|ПОМЕСТИТЬ ВТСостояниеРаботников
		|ИЗ
		|	ВТ_СостоянияРаботников КАК СостояниеРаботников
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследниеДатыНазначений КАК ПоследниеДатыНазначений
		|		ПО СостояниеРаботников.Регистратор = ПоследниеДатыНазначений.Регистратор
		|			И СостояниеРаботников.НомерСтроки = ПоследниеДатыНазначений.НомерСтроки
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|		ПО СостояниеРаботников.Сотрудник = РаботникиОрганизации.Сотрудник
		|			И СостояниеРаботников.Организация = РаботникиОрганизации.Организация
		|			И (ПоследниеДатыНазначений.Период = РаботникиОрганизации.Период)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДатыБудущихСостояний КАК ДатыБудущихСостояний
		|		ПО СостояниеРаботников.Регистратор = ДатыБудущихСостояний.Регистратор
		|			И СостояниеРаботников.НомерСтроки = ДатыБудущихСостояний.НомерСтроки
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаСостояний КАК СостояниеБудущее
		|		ПО СостояниеРаботников.Организация = СостояниеБудущее.Организация
		|			И СостояниеРаботников.Сотрудник = СостояниеБудущее.Сотрудник
		|			И (ДатыБудущихСостояний.Период = СостояниеБудущее.Период)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НамеченныеСобытияПоПерсоналуОрганизаций КАК НамеченныеСобытия
		|		ПО СостояниеРаботников.Регистратор = НамеченныеСобытия.Регистратор
		|			И СостояниеРаботников.Сотрудник = НамеченныеСобытия.Сотрудник
		|			И (НамеченныеСобытия.ПланируемоеСобытие В (&СписокНамеченныхСобытий))
		|
		|ГДЕ
		|	РаботникиОрганизации.ОбособленноеПодразделение В(&Организации)
		|	И (СостояниеРаботников.ПериодЗавершения <> &ПустаяДата
		|			ИЛИ НЕ СостояниеБудущее.Период ЕСТЬ NULL 
		|			ИЛИ НЕ НамеченныеСобытия.ДатаИзменения ЕСТЬ NULL )
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Состояние,
		|	ДатаНачала";
	                     
	Запрос.Текст = СостояниеРаботниковТекст;
	Запрос.Выполнить();
    СостояниеРаботниковТекст = "ВТСостояниеРаботников";
    
	// Составим список возможных расчетных документов за соответствующий период регистрации
	СписокРасчетныхДокументовТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.ДатаНачала,
	|	БольничныйЛист.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА БольничныйЛист.ПричинаНетрудоспособности = &НетрудоспособностьПоБеременностиИРодам
	|			ТОГДА &ОтпускПоБеременностиИРодам
	|		ИНАЧЕ &Заболевание
	|	КОНЕЦ КАК Неявка,
	|	БольничныйЛист.Ссылка КАК РасчетныйДокумент,
	|	NULL КАК ВидРасчета,
	|	БольничныйЛист.ПричинаНетрудоспособности,
	|	БольничныйЛист.ПроцентОплаты,
	|	БольничныйЛист.ПервичныйБольничныйЛист,
	|	БольничныйЛист.ОграничениеПособия,
	|	NULL КАК ВидПростоя,
	|	БольничныйЛист.СпособОтраженияВБухучете,
	|	БольничныйЛист.ПериодРегистрации,
	|	БольничныйЛист.Организация
	|ПОМЕСТИТЬ ВТСписокРасчетныхДокументов
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту КАК БольничныйЛист
	|ГДЕ
	|	(БольничныйЛист.ПериодРегистрации МЕЖДУ &ДатаНачала И &ДатаОкончания ИЛИ &ОтбиратьСобытияПоДокументу)
	|	И БольничныйЛист.Организация В (&Организации)
	|	И (НЕ БольничныйЛист.ПометкаУдаления)
	|	И (НЕ БольничныйЛист.Ссылка В
	|				(ВЫБРАТЬ
	|					БольничныйЛист.ПерерассчитываемыйДокумент
	|				ИЗ
	|					Документ.НачислениеПоБольничномуЛисту КАК БольничныйЛист
	|				ГДЕ
	|					БольничныйЛист.ПерерассчитываемыйДокумент <> ЗНАЧЕНИЕ(Документ.НачислениеПоБольничномуЛисту.ПустаяСсылка)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НевыходыНачисления.Сотрудник,
	|	МИНИМУМ(НевыходыНачисления.ДатаНачала),
	|	МАКСИМУМ(НевыходыНачисления.ДатаОкончания),
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НевыходыНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&УчетВремениНеоплачиваемыеОтпуска)
	|				ТОГДА &ОтпускБезСохраненияЗарплаты
	|			КОГДА НевыходыНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = &УчетВремениОтпускНаОбучениеНеоплачиваемый
	|				ТОГДА &ОтпускУчебныйНеоплачиваемый
	|			КОГДА НевыходыНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = &УчетВремениПрогулы
	|				ТОГДА &Прогулы
	|			КОГДА НевыходыНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = &УчетВремениПростойПоВинеРаботника
	|				ТОГДА &Простой
	|			ИНАЧЕ &ОтсутствуетПоНевыясненнойПричине
	|		КОНЕЦ),
	|	НевыходыНачисления.Ссылка,
	|	НевыходыНачисления.ВидРасчета,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	МАКСИМУМ(НевыходыНачисления.СпособОтраженияВБухучете),
	|	НевыходыНачисления.Ссылка.ПериодРегистрации,
	|	НевыходыНачисления.Ссылка.Организация
	|ИЗ
	|	Документ.НевыходыВОрганизациях.Начисления КАК НевыходыНачисления
	|ГДЕ
	|	(НевыходыНачисления.Ссылка.ПериодРегистрации МЕЖДУ &ДатаНачала И &ДатаОкончания ИЛИ &ОтбиратьСобытияПоДокументу)
	|	И НевыходыНачисления.Ссылка.Организация В (&Организации)
	|	И (НЕ НевыходыНачисления.Ссылка.ПометкаУдаления)
	|	И (НЕ НевыходыНачисления.Сторно)
	|	И НевыходыНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ВидВремени <> &ЧасовоеНеотработанное
	|	И (НЕ НевыходыНачисления.Ссылка В
	|				(ВЫБРАТЬ
	|					НевыходыВОрганизациях.ПерерассчитываемыйДокумент
	|				ИЗ
	|					Документ.НевыходыВОрганизациях КАК НевыходыВОрганизациях
	|				ГДЕ
	|					НевыходыВОрганизациях.ПерерассчитываемыйДокумент <> ЗНАЧЕНИЕ(Документ.НевыходыВОрганизациях.ПустаяСсылка)))
	|
	|СГРУППИРОВАТЬ ПО
	|	НевыходыНачисления.Сотрудник,
	|	НевыходыНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени,
	|	НевыходыНачисления.Ссылка,
	|	НевыходыНачисления.ВидРасчета,
	|	НевыходыНачисления.Ссылка.ПериодРегистрации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачислениеОтпуска.Сотрудник,
	|	НачислениеОтпускаОтпуска.ДатаНачалаОтпуска,
	|	НачислениеОтпускаОтпуска.ДатаОкончанияОтпуска,
	|	&ОтпускЕжегодный,
	|	НачислениеОтпуска.Ссылка,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	НачислениеОтпуска.СпособОтраженияВБухучете,
	|	НачислениеОтпуска.ПериодРегистрации,
	|	НачислениеОтпуска.Организация
	|ИЗ
	|	Документ.НачислениеОтпускаРаботникамОрганизаций КАК НачислениеОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НачислениеОтпуска.Ссылка КАК Ссылка,
	|			МИНИМУМ(НачислениеОтпуска.ДатаНачала) КАК ДатаНачалаОтпуска,
	|			МАКСИМУМ(НачислениеОтпуска.ДатаОкончания) КАК ДатаОкончанияОтпуска
	|		ИЗ
	|			Документ.НачислениеОтпускаРаботникамОрганизаций.Отпуска КАК НачислениеОтпуска
	|		ГДЕ
	|			(НачислениеОтпуска.Ссылка.ПериодРегистрации МЕЖДУ &ДатаНачала И &ДатаОкончания ИЛИ &ОтбиратьСобытияПоДокументу)
	|			И ВЫБОР
	|					КОГДА НачислениеОтпуска.Ссылка.Организация.ГоловнаяОрганизация = НачислениеОтпуска.Ссылка.Организация
	|						ТОГДА НачислениеОтпуска.Ссылка.Организация
	|					ИНАЧЕ НачислениеОтпуска.Ссылка.Организация.ГоловнаяОрганизация
	|				КОНЕЦ В (&ГоловнаяОрганизации)
	|			И (НЕ НачислениеОтпуска.Ссылка.ПометкаУдаления)
	|			И (НЕ НачислениеОтпуска.Сторно)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НачислениеОтпуска.Ссылка) КАК НачислениеОтпускаОтпуска
	|		ПО (НачислениеОтпускаОтпуска.Ссылка = НачислениеОтпуска.Ссылка)
	|ГДЕ
	|	(НачислениеОтпуска.ПериодРегистрации МЕЖДУ &ДатаНачала И &ДатаОкончания ИЛИ &ОтбиратьСобытияПоДокументу)
	|	И НачислениеОтпуска.Организация В (&Организации)
	|	И (НЕ НачислениеОтпуска.ПометкаУдаления)
	|	И (НЕ НачислениеОтпуска.Ссылка В
	|				(ВЫБРАТЬ
	|					НачислениеОтпускаРаботникамОрганизаций.ПерерассчитываемыйДокумент
	|				ИЗ
	|					Документ.НачислениеОтпускаРаботникамОрганизаций КАК НачислениеОтпускаРаботникамОрганизаций
	|				ГДЕ
	|					НачислениеОтпускаРаботникамОрганизаций.ПерерассчитываемыйДокумент <> ЗНАЧЕНИЕ(Документ.НачислениеОтпускаРаботникамОрганизаций.ПустаяСсылка)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОплатаПоСреднему.Сотрудник,
	|	ОплатаПоСреднему.ДатаНачала,
	|	ОплатаПоСреднему.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднему.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = &УчетВремениКомандировка
	|			ТОГДА &Командировка
	|		КОГДА ОплатаПоСреднему.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (&УчетВремениОплачиваемыеУчебныеОтпуска)
	|			ТОГДА &ОтпускУчебный
	|		КОГДА ОплатаПоСреднему.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = &УчетВремениДополнительныйОтпуск
	|			ТОГДА &ОтпускДляПрохожденияСкрининговыхИсследований
	|		КОГДА ОплатаПоСреднему.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = &УчетВремениВынужденныйПрогул
	|			ТОГДА &ВынужденныйПрогул
	|		КОГДА ОплатаПоСреднему.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = &УчетВремениГосударственныеОбязанности
	|			ТОГДА &ГосударственныеОбязанности
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ОплатаПоСреднему.Ссылка,
	|	ОплатаПоСреднему.ВидРасчета,
	|	NULL,
	|	ОплатаПоСреднему.ПроцентОплаты,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ОплатаПоСреднему.СпособОтраженияВБухучете,
	|	ОплатаПоСреднему.ПериодРегистрации,
	|	ОплатаПоСреднему.Организация
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку КАК ОплатаПоСреднему
	|ГДЕ
	|	(ОплатаПоСреднему.ПериодРегистрации МЕЖДУ &ДатаНачала И &ДатаОкончания ИЛИ &ОтбиратьСобытияПоДокументу)
	|	И ОплатаПоСреднему.Организация В (&Организации)
	|	И (НЕ ОплатаПоСреднему.ПометкаУдаления)
	|	И ОплатаПоСреднему.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ВидВремени <> &ЧасовоеНеотработанное
	|	И (НЕ ОплатаПоСреднему.Ссылка В
	|				(ВЫБРАТЬ
	|					ОплатаПоСреднему.ПерерассчитываемыйДокумент
	|				ИЗ
	|					Документ.ОплатаПоСреднемуЗаработку КАК ОплатаПоСреднему
	|				ГДЕ
	|					ОплатаПоСреднему.ПерерассчитываемыйДокумент <> ЗНАЧЕНИЕ(Документ.ОплатаПоСреднемуЗаработку.ПустаяСсылка)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускПоУходу.Сотрудник,
	|	ОтпускПоУходу.ДатаНачала,
	|	ОтпускПоУходу.ДатаОкончания,
	|	&ОтпускПоУходуЗаРебенком,
	|	ОтпускПоУходу.Ссылка,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	&ПустойСпособБУ,
	|	NULL,
	|	ОтпускПоУходу.Организация
	|ИЗ
	|	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходу
	|ГДЕ
	|	(ОтпускПоУходу.ДатаДействия МЕЖДУ &ДатаНачала И &ДатаОкончания ИЛИ &ОтбиратьСобытияПоДокументу)
	|	И ОтпускПоУходу.Организация В (&Организации)
	|	И (НЕ ОтпускПоУходу.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрацияПростоев.Сотрудник,
	|	РегистрацияПростоев.ДатаНачала,
	|	РегистрацияПростоев.ДатаОкончания,
	|	&Простой,
	|	РегистрацияПростоев.Ссылка,
	|	NULL,
	|	NULL,
	|	РегистрацияПростоев.ПроцентОплаты,
	|	NULL,
	|	NULL,
	|	РегистрацияПростоев.ВидПростоя,
	|	РегистрацияПростоев.СпособОтраженияВБухучете,
	|	РегистрацияПростоев.ПериодРегистрации,
	|	РегистрацияПростоев.Организация
	|ИЗ
	|	Документ.РегистрацияПростоевВОрганизациях КАК РегистрацияПростоев
	|ГДЕ
	|	(РегистрацияПростоев.ПериодРегистрации МЕЖДУ &ДатаНачала И &ДатаОкончания ИЛИ &ОтбиратьСобытияПоДокументу)
	|	И РегистрацияПростоев.Организация В (&Организации)
	|	И (НЕ РегистрацияПростоев.ПометкаУдаления)
	|	И (НЕ РегистрацияПростоев.НеЦелодневныйПростой)
	|	И (НЕ РегистрацияПростоев.Ссылка В
	|				(ВЫБРАТЬ
	|					РегистрацияПростоевВОрганизациях.ПерерассчитываемыйДокумент
	|				ИЗ
	|					Документ.РегистрацияПростоевВОрганизациях КАК РегистрацияПростоевВОрганизациях
	|				ГДЕ
	|					РегистрацияПростоевВОрганизациях.ПерерассчитываемыйДокумент <> ЗНАЧЕНИЕ(Документ.РегистрацияПростоевВОрганизациях.ПустаяСсылка)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.ДатаНачала,
	|	Неявка";
	
	Запрос.Текст = СписокРасчетныхДокументовТекст;
	Запрос.Выполнить();
	СписокРасчетныхДокументовТекст = "ВТСписокРасчетныхДокументов";
	
	// Шаблон запроса для выбора подходящего вида расчета
	ТекстЗапросаВидРасчета = "
	|(ВЫБРАТЬ
	|	МИНИМУМ(ОсновныеНачисления.Ссылка) КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	ОсновныеНачисления.СпособРасчета = <<СпособРасчета>> И
	|	ОсновныеНачисления.ОбозначениеВТабелеУчетаРабочегоВремени <<Обозначение>>)
	|";
	
	// Соединяем кадровые и расчетные документы
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР 
	|		КОГДА НЕ (РасчетныйДокумент.Ссылка ЕСТЬ NULL) И РасчетныйДокумент.Проведен ТОГДА ЛОЖЬ 
	|		КОГДА НЕ (КадровыйДокумент.Ссылка ЕСТЬ NULL) ТОГДА ИСТИНА 
	|		ИНАЧЕ ЛОЖЬ 
	|	КОНЕЦ КАК Отметка,
	|
	|	ЕСТЬNULL(КадровыеДанные.Сотрудник.ФизЛицо, РасчетныеДанные.Сотрудник.ФизЛицо) КАК ФизЛицо,
	|	ЕСТЬNULL(КадровыеДанные.Сотрудник, РасчетныеДанные.Сотрудник) КАК Сотрудник,
	|	ЕСТЬNULL(КадровыеДанные.ДатаНачала, РасчетныеДанные.ДатаНачала) КАК ДатаНачала,
	|	ЕСТЬNULL(КадровыеДанные.ДатаОкончания, РасчетныеДанные.ДатаОкончания) КАК ДатаОкончания,
	|	ЕСТЬNULL(КадровыеДанные.Состояние, РасчетныеДанные.Неявка) КАК Неявка,
	|	ЕСТЬNULL(КадровыеДанные.Организация, РасчетныеДанные.Организация) КАК Организация,
	|	КадровыеДанные.КадровыйДокумент,
	|
	|	ВЫБОР 
	|		КОГДА НЕ (РасчетныеДанные.РасчетныйДокумент ЕСТЬ NULL) ТОГДА РасчетныеДанные.РасчетныйДокумент
	|		КОГДА КадровыеДанные.Состояние В (&Заболевание, &ОтпускПоБеременностиИРодам) ТОГДА &ПустаяСсылкаБольничныйЛист
	|		КОГДА КадровыеДанные.Состояние В (&ОтпускЕжегодный) ТОГДА &ПустаяСсылкаНачислениеОтпуска
	|		КОГДА КадровыеДанные.Состояние = &ОтпускПоУходуЗаРебенком ТОГДА &ПустаяСсылкаОтпускПоУходу
	|		КОГДА КадровыеДанные.Состояние В (&Командировка, &ВынужденныйПрогул, &ГосударственныеОбязанности, &ОтпускУчебный, &ОтпускДляПрохожденияСкрининговыхИсследований, &ОтпускНаПостановкуНаМедицинскийУчетПоБеременностиДоДвенадцатиНедель) ТОГДА &ПустаяСсылкаОплатаПоСреднему
	|		КОГДА КадровыеДанные.Состояние = &Простой ТОГДА &ПустаяСсылкаРегистрацияПростоев
	|		ИНАЧЕ &ПустаяСсылкаНевыходы
	|	КОНЕЦ КАК РасчетныйДокумент,
	|
	|	ВЫБОР 
	|		КОГДА НЕ (РасчетныеДанные.РасчетныйДокумент ЕСТЬ NULL) ТОГДА РасчетныеДанные.ВидРасчета 
	|		КОГДА КадровыеДанные.Состояние = &Заболевание ТОГДА NULL
	|		КОГДА КадровыеДанные.Состояние = &Командировка ТОГДА ПВРКомандировка.ВидРасчета
	|		КОГДА КадровыеДанные.Состояние = &ОтпускЕжегодный ТОГДА NULL
	|		КОГДА КадровыеДанные.Состояние = &ОтпускУчебный ТОГДА ПВРОтпускУчебный.ВидРасчета
	|		КОГДА КадровыеДанные.Состояние = &ОтпускУчебныйНеоплачиваемый ТОГДА &ВРОтпускБезОплатыУчебный
	|		КОГДА КадровыеДанные.Состояние = &ОтпускБезСохраненияЗарплаты ТОГДА &ВРОтпускБезОплаты
	|		КОГДА КадровыеДанные.Состояние = &ОтпускПоБеременностиИРодам ТОГДА NULL
	|		КОГДА КадровыеДанные.Состояние = &ОтпускПоУходуЗаРебенком ТОГДА NULL
	|		КОГДА КадровыеДанные.Состояние = &ОтсутствуетПоНевыясненнойПричине ТОГДА &ВРНевыход
	|		КОГДА КадровыеДанные.Состояние = &ВынужденныйПрогул ТОГДА ПВРВынужденныйПрогул.ВидРасчета
	|		КОГДА КадровыеДанные.Состояние = &ГосударственныеОбязанности ТОГДА ПВРГосударственныеОбязанности.ВидРасчета
	|		КОГДА КадровыеДанные.Состояние = &Прогулы ТОГДА &ВРПрогул
	|		КОГДА КадровыеДанные.Состояние = &Простой ТОГДА NULL
	|		КОГДА КадровыеДанные.Состояние В (&ОтпускДляПрохожденияСкрининговыхИсследований, &ОтпускНаПостановкуНаМедицинскийУчетПоБеременностиДоДвенадцатиНедель) ТОГДА NULL
	|	КОНЕЦ КАК ВидРасчета,
	|
	|	ВЫБОР 
	|		КОГДА НЕ (РасчетныеДанные.ПричинаНетрудоспособности ЕСТЬ NULL) ТОГДА РасчетныеДанные.ПричинаНетрудоспособности 
	|		КОГДА КадровыеДанные.Состояние = &Заболевание ТОГДА &НетрудоспособностьОбщееЗаболевание 
	|		КОГДА КадровыеДанные.Состояние = &ОтпускПоБеременностиИРодам ТОГДА &НетрудоспособностьПоБеременностиИРодам 
	|		ИНАЧЕ NULL 
	|	КОНЕЦ КАК ПричинаНетрудоспособности,
	|
	|	ВЫБОР
	|		КОГДА НЕ (РасчетныеДанные.ПроцентОплаты ЕСТЬ NULL) ТОГДА РасчетныеДанные.ПроцентОплаты
	|		КОГДА КадровыеДанные.Состояние = &Простой ТОГДА 50
	|		ИНАЧЕ 100
	|	КОНЕЦ КАК ПроцентОплаты,
	|	РасчетныеДанные.ПервичныйБольничныйЛист,
	|
	|	ВЫБОР 
	|		КОГДА НЕ (РасчетныеДанные.ОграничениеПособия ЕСТЬ NULL) ТОГДА РасчетныеДанные.ОграничениеПособия 
	|		КОГДА КадровыеДанные.Состояние = &Заболевание ТОГДА &ОбщееОграничениеПособия 
	|		КОГДА КадровыеДанные.Состояние = &ОтпускПоБеременностиИРодам ТОГДА &БезОграниченияПособия
	|		ИНАЧЕ NULL 
	|	КОНЕЦ КАК ОграничениеПособия,
	|
	|	ВЫБОР 
	|		КОГДА НЕ (РасчетныеДанные.ВидПростоя ЕСТЬ NULL) ТОГДА РасчетныеДанные.ВидПростоя 
	|		КОГДА КадровыеДанные.Состояние = &Простой ТОГДА &ВидПростояПоВинеРаботодателя 
	|		ИНАЧЕ NULL 
	|	КОНЕЦ КАК ВидПростоя,
	|
	|	ЕСТЬNULL(РасчетныеДанные.СпособОтраженияВБухучете, &ПустойСпособБУ) КАК СпособОтраженияВБухучете,
	|	ЕСТЬNULL(РасчетныеДанные.ПериодРегистрации, &ПустаяДата) КАК ПериодРегистрации
	|
	|ИЗ
	|	" + СостояниеРаботниковТекст + " КАК КадровыеДанные
	|	" + ?(ОтбиратьСобытияПоДокументу, "ЛЕВОЕ", "ПОЛНОЕ") + " СОЕДИНЕНИЕ " + СписокРасчетныхДокументовТекст + " КАК РасчетныеДанные
	|		ПО КадровыеДанные.Сотрудник = РасчетныеДанные.Сотрудник 
	|		   И (КадровыеДанные.Состояние = РасчетныеДанные.Неявка 
	|		     ИЛИ КадровыеДанные.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускНаПостановкуНаМедицинскийУчетПоБеременностиДоДвенадцатиНедель))
	|		   И КадровыеДанные.ДатаНачала = РасчетныеДанные.ДатаНачала
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СтрЗаменить(СтрЗаменить(ТекстЗапросаВидРасчета, "<<СпособРасчета>>", "&РасчетПоСреднемуЗаработку"), "<<Обозначение>>", " = &УчетВремениКомандировка") + " КАК ПВРКомандировка
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СтрЗаменить(СтрЗаменить(ТекстЗапросаВидРасчета, "<<СпособРасчета>>", "&РасчетПоСреднемуЗаработку"), "<<Обозначение>>", "В (&УчетВремениОплачиваемыеУчебныеОтпуска, &УчетВремениДополнительныйОтпуск)") + " КАК ПВРОтпускУчебный
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СтрЗаменить(СтрЗаменить(ТекстЗапросаВидРасчета, "<<СпособРасчета>>", "&РасчетПоСреднемуЗаработку"), "<<Обозначение>>", " = &УчетВремениВынужденныйПрогул") + " КАК ПВРВынужденныйПрогул
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СтрЗаменить(СтрЗаменить(ТекстЗапросаВидРасчета, "<<СпособРасчета>>", "&РасчетПоСреднемуЗаработку"), "<<Обозначение>>", " = &УчетВремениГосударственныеОбязанности") + " КАК ПВРГосударственныеОбязанности
	|		ПО ИСТИНА
	|";
	
	// Условие на подразделение 
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаОкончания, Организация В (&ГоловнаяОрганизации)) КАК РаботникиОрганизации
		|		ПО ЕСТЬNULL(КадровыеДанные.Сотрудник, РасчетныеДанные.Сотрудник) = РаботникиОрганизации.Сотрудник 
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	(НЕ (КадровыеДанные.Состояние ЕСТЬ NULL) ИЛИ НЕ (РасчетныеДанные.Неявка ЕСТЬ NULL))
		|";
		
	// Условие на подразделение 
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И РаботникиОрганизации.ПодразделениеОрганизации В ИЕРАРХИИ (&ПодразделениеОрганизации)
		|";
	КонецЕсли;
	
	// Условие на вид неявки
	Если ЗначениеЗаполнено(Неявка) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И ЕСТЬNULL(КадровыеДанные.Состояние, РасчетныеДанные.Неявка) = &ВыбНеявка
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	ЕСТЬNULL(КадровыеДанные.Сотрудник.Наименование, РасчетныеДанные.Сотрудник.Наименование),
	|	ЕСТЬNULL(КадровыеДанные.Состояние, РасчетныеДанные.Неявка),
	|	ЕСТЬNULL(КадровыеДанные.ДатаНачала, РасчетныеДанные.ДатаНачала),
	|	КадровыеДанные.КадровыйДокумент,
	|	РасчетныйДокумент.Проведен УБЫВ // сначала проведенные документы
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	                
КонецФункции // СформироватьЗапрос()	

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ

// Заполняет т.ч. обработки кадровыми и расчетными документами
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Булево - Истина, если успешно выполнено заполнение, иначе Ложь
//
Функция Автозаполнение() Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо указать организацию!");
		Возврат Ложь;
	КонецЕсли;
	
	Если ДатаОкончания < ДатаНачала ИЛИ ДатаНачала > ДатаОкончания Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Неверно введены даты!");
		Возврат Ложь;
	КонецЕсли;
	
	РезультатЗапроса = СформироватьЗапрос(Организация);

	Неявки.Загрузить(РезультатЗапроса.Выгрузить());
	
	МассивКадровыхДокументов = Неявки.ВыгрузитьКолонку("КадровыйДокумент");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", 	 МассивКадровыхДокументов);
	Запрос.УстановитьПараметр("ДатаНачала",			 НачалоМесяца(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",		 КонецМесяца(ДатаОкончания));
	Запрос.УстановитьПараметр("ПустаяОрганизация",	 Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ПустаяДата", 		 '00010101');
	Запрос.УстановитьПараметр("ПустойСпособБУ", 	 Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка());
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(ТрудовыеОтпуска.Ссылка, НачислениеОтпуска.Ссылка) КАК Документ,
	               |	ЕСТЬNULL(ТрудовыеОтпуска.Сотрудник, НачислениеОтпуска.Сотрудник) КАК Сотрудник,
	               |	ЕСТЬNULL(ТрудовыеОтпуска.Сотрудник.Физлицо, НачислениеОтпуска.Сотрудник.Физлицо) КАК ФизЛицо,
	               |	ЕСТЬNULL(ТрудовыеОтпуска.ВидРасчета, НачислениеОтпуска.ВидРасчета) КАК ВидРасчета,
	               |	ЕСТЬNULL(ТрудовыеОтпуска.ДатаНачала, НачислениеОтпуска.ДатаНачала) КАК ДатаНачала,
	               |	ЕСТЬNULL(ТрудовыеОтпуска.ДатаОкончания, НачислениеОтпуска.ДатаОкончания) КАК ДатаОкончания,
	               |	ЕСТЬNULL(ТрудовыеОтпуска.ДатаНачалаВсего, НачислениеОтпуска.ДатаНачалаВсего) КАК ДатаНачалаВсего,
				   |	ЕСТЬNULL(ТрудовыеОтпуска.Сторно, НачислениеОтпуска.Сторно) КАК Сторно,
	               |	ЕСТЬNULL(НачислениеОтпуска.СпособОтраженияВБухучете, &ПустойСпособБУ) КАК СпособОтраженияВБухучете
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТрудовыеОтпуска.Ссылка КАК Ссылка,
	               |		ТрудовыеОтпуска.Сотрудник КАК Сотрудник,
	               |		ТрудовыеОтпуска.ВидТрудовогоОтпуска.ВидНачисления КАК ВидРасчета,
	               |		ТрудовыеОтпуска.ДатаНачала КАК ДатаНачала,
	               |		ТрудовыеОтпуска.ДатаОкончания КАК ДатаОкончания,
	               |		ТрудовыеОтпуска.ДатаНачалаВсего КАК ДатаНачалаВсего,
	               |		ТрудовыеОтпуска.Сторно КАК Сторно
	               |	ИЗ
	               |		Документ.ТрудовыеОтпускаОрганизаций.Отпуска КАК ТрудовыеОтпуска
	               |	ГДЕ
	               |		ТрудовыеОтпуска.Ссылка В(&СписокДокументов)
	               |		И ТрудовыеОтпуска.ДатаНачала <> &ПустаяДата) КАК ТрудовыеОтпуска
	               |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			НачислениеОтпуска.Ссылка КАК Ссылка,
	               |			НачислениеОтпуска.Сотрудник КАК Сотрудник,
	               |			НачислениеОтпускаОтпуска.ВидРасчета КАК ВидРасчета,
	               |			НачислениеОтпускаОтпуска.ДатаНачала КАК ДатаНачала,
	               |			НачислениеОтпускаОтпуска.ДатаОкончания КАК ДатаОкончания,
	               |			ДатыНачалаОтпусков.ДатаНачала КАК ДатаНачалаВсего,
	               |			НачислениеОтпускаОтпуска.СпособОтраженияВБухучете КАК СпособОтраженияВБухучете,
	               |			НачислениеОтпускаОтпуска.Сторно КАК Сторно
	               |		ИЗ
	               |			Документ.НачислениеОтпускаРаботникамОрганизаций КАК НачислениеОтпуска
	               |				ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеОтпускаРаботникамОрганизаций.Отпуска КАК НачислениеОтпускаОтпуска
	               |				ПО НачислениеОтпуска.Ссылка = НачислениеОтпускаОтпуска.Ссылка
	               |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |					НачислениеОтпуска.Ссылка КАК Ссылка,
	               |					МИНИМУМ(НачислениеОтпуска.ДатаНачала) КАК ДатаНачала
	               |				ИЗ
	               |					Документ.НачислениеОтпускаРаботникамОрганизаций.Отпуска КАК НачислениеОтпуска
	               |				ГДЕ
	               |					НачислениеОтпуска.Ссылка.ПериодРегистрации МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |					И ВЫБОР
	               |							КОГДА НачислениеОтпуска.Ссылка.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
	               |								ТОГДА НачислениеОтпуска.Ссылка.Организация
	               |							ИНАЧЕ НачислениеОтпуска.Ссылка.Организация.ГоловнаяОрганизация
	               |						КОНЕЦ = &ГоловнаяОрганизация
	               |					И (НЕ НачислениеОтпуска.Ссылка.ПометкаУдаления)
	               |				
	               |				СГРУППИРОВАТЬ ПО
	               |					НачислениеОтпуска.Ссылка) КАК ДатыНачалаОтпусков
	               |				ПО (ДатыНачалаОтпусков.Ссылка = НачислениеОтпуска.Ссылка)
	               |		ГДЕ
	               |			НачислениеОтпуска.ПериодРегистрации МЕЖДУ &ДатаНачала И &ДатаОкончания 
	               |			И ВЫБОР
	               |					КОГДА НачислениеОтпуска.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
	               |						ТОГДА НачислениеОтпуска.Организация
	               |					ИНАЧЕ НачислениеОтпуска.Организация.ГоловнаяОрганизация
	               |				КОНЕЦ = &ГоловнаяОрганизация
	               |			И (НЕ НачислениеОтпуска.ПометкаУдаления)
	               |			И НачислениеОтпуска.ПерерассчитываемыйДокумент = ЗНАЧЕНИЕ(Документ.НачислениеОтпускаРаботникамОрганизаций.ПустаяСсылка)) КАК НачислениеОтпуска
	               |		ПО (НачислениеОтпуска.Сотрудник = ТрудовыеОтпуска.Сотрудник)
	               |			И (НачислениеОтпуска.ДатаНачала = ТрудовыеОтпуска.ДатаНачала)
	               |			И (НачислениеОтпуска.Сторно = ТрудовыеОтпуска.Сторно)
	               |ГДЕ
	               |	((НЕ ТрудовыеОтпуска.ДатаНачала ЕСТЬ NULL )
	               |			ИЛИ (НЕ НачислениеОтпуска.ДатаНачала ЕСТЬ NULL ))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаНачала";

	РезультатЗапроса = Запрос.Выполнить();
	
	Отпуска.Загрузить(РезультатЗапроса.Выгрузить());
	
	// обработаем табличную часть, проверяя на дублирование документов
	ПредыдущийКадровыйДокумент = Неопределено;
	ПредыдущийСотрудник  	   = Неопределено;
	ПредыдущаяНеявка  		   = Неопределено;
	ПредыдущаяДатаНачала  	   = Неопределено;
	
	Для Каждого СтрокаТаблицы Из Неявки Цикл
		Если ПредыдущийКадровыйДокумент = СтрокаТаблицы.КадровыйДокумент 
			 И ПредыдущийСотрудник = СтрокаТаблицы.Сотрудник
			 И ПредыдущаяНеявка = СтрокаТаблицы.Неявка 
			 И ПредыдущаяДатаНачала = СтрокаТаблицы.ДатаНачала Тогда
			
			// полностью повторились ключевые реквизиты - отметим как дубль
			СтрокаТаблицы.ДублирующаясяСтрока = Истина;
			СтрокаТаблицы.Отметка = Ложь;
		КонецЕсли;
		
		// Запоминаем текущие значения ключевых реквизитов
		ПредыдущийКадровыйДокумент = СтрокаТаблицы.КадровыйДокумент;
		ПредыдущийСотрудник = СтрокаТаблицы.Сотрудник;
		ПредыдущаяНеявка = СтрокаТаблицы.Неявка;
		ПредыдущаяДатаНачала = СтрокаТаблицы.ДатаНачала;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Процедура создает документы по пустым строкам табличной части
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
Процедура СоздатьДокументы() Экспорт

	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	КоллекцияКолонокТЧНачисленияНевыходы = Неопределено;
	
#Если Клиент Тогда
	КоличествоОтмеченных = 0;
	Для Каждого СтрокаТаблицы Из Неявки Цикл
		Если СтрокаТаблицы.Отметка 
			 И ЗначениеЗаполнено(СтрокаТаблицы.КадровыйДокумент) 
			 И НЕ ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент) Тогда
			КоличествоОтмеченных = КоличествоОтмеченных + 1;
		КонецЕсли;		
	КонецЦикла;

	ФормаПрогрессора = ПолучитьОбщуюФорму("ФормаИндикатора");
	ФормаПрогрессора.СтрокаСостоянияПрогрессора = "Формируются расчетные документы...";
	ФормаПрогрессора.МаксимальноеЗначение = КоличествоОтмеченных;
	ФормаПрогрессора.ЗначениеИндикатора = 0;
	ФормаПрогрессора.Открыть();
	Индекс = 0;	
#КонецЕсли

	Запрос  						  = Новый Запрос;
	МассивДокументовИсправлений 	  = Новый Массив;
	СоответствиеДокументовИсправлений = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из Неявки Цикл
		
		Если СтрокаТаблицы.КадровыйДокумент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеРегистратора = СтрокаТаблицы.КадровыйДокумент.Метаданные();
		Если МетаданныеРегистратора.Реквизиты.Найти("ИсправляемыйДокумент") <> Неопределено Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Док.ИсправляемыйДокумент,
			|	Док.ДвиженияИсправляемогоДокумента
			|ИЗ
			|	Документ." + МетаданныеРегистратора.Имя + " КАК Док
			|ГДЕ
			|	Док.Ссылка = &Ссылка";
			
			Ссылка = СтрокаТаблицы.КадровыйДокумент;
			Пока Ссылка <> Неопределено И НЕ Ссылка.Пустая() Цикл
				Запрос.УстановитьПараметр("Ссылка",	Ссылка);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Ссылка = Выборка.ИсправляемыйДокумент;
					Если НЕ Ссылка.Пустая() Тогда
						МассивДокументовИсправлений.Добавить(Ссылка);
						ДокументИсправление = Новый Структура;
						ДокументИсправление.Вставить("ИсходныйДокумент",				СтрокаТаблицы.КадровыйДокумент);
						ДокументИсправление.Вставить("ДвиженияИсправляемогоДокумента",	Выборка.ДвиженияИсправляемогоДокумента);
						СоответствиеДокументовИсправлений.Вставить(Ссылка, ДокументИсправление);
					КонецЕсли;
				Иначе
					Ссылка = Неопределено;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	РасчетныеДокументыДляИсправления = Новый Соответствие;
	Если МассивДокументовИсправлений.Количество() > 0 Тогда
		РезультатЗапроса = СформироватьЗапрос(Организация, МассивДокументовИсправлений, СоответствиеДокументовИсправлений);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.Отметка
				И ЗначениеЗаполнено(Выборка.КадровыйДокумент)
				И ЗначениеЗаполнено(Выборка.РасчетныйДокумент) Тогда
				
				ИсходныйДокумент = СоответствиеДокументовИсправлений[Выборка.КадровыйДокумент].ИсходныйДокумент;
				
				СтруктураРасчетногоДокумента = Новый Структура;
				СтруктураРасчетногоДокумента.Вставить("КадровыйДокумент",			Выборка.КадровыйДокумент);
				СтруктураРасчетногоДокумента.Вставить("РасчетныйДокумент",			Выборка.РасчетныйДокумент);
				СтруктураРасчетногоДокумента.Вставить("СовпадаетПериодРегистрации",	Выборка.ПериодРегистрации = ПериодРегистрации);
				
				РасчетныеДокументыДляИсправления.Вставить(ИсходныйДокумент, СтруктураРасчетногоДокумента);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из Неявки Цикл

		Если НЕ СтрокаТаблицы.Отметка ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.КадровыйДокумент)
			ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент) Тогда
			Продолжить;
		КонецЕсли;
        	
	#Если Клиент Тогда
		    Индекс = Индекс + 1;
    		ФормаПрогрессора.ЗначениеИндикатора = Индекс;
			ФормаПрогрессора.НадписьСостоянияПрогрессора = СтрокаТаблицы.ФизЛицо.Наименование + " " + СтрокаТаблицы.Неявка + " (" + Формат(СтрокаТаблицы.ДатаНачала,"ДФ=дд.ММ.гггг") + " - " + Формат(СтрокаТаблицы.ДатаОкончания,"ДФ=дд.ММ.гггг") + ")";    		
	#КонецЕсли			
		СтруктураРасчетногоДокумента = РасчетныеДокументыДляИсправления.Получить(СтрокаТаблицы.КадровыйДокумент);
		Если СтруктураРасчетногоДокумента = Неопределено Тогда
			РасчетныйДокументДляИсправления = Неопределено;
			
		Иначе
			РасчетныйДокументДляИсправления = СтруктураРасчетногоДокумента.РасчетныйДокумент;
			
			Если СтруктураРасчетногоДокумента.СовпадаетПериодРегистрации Тогда
				Сообщить("Невозможно создание нового расчетного документа, так как текущий кадровый документ был исправлен, и для исправленного документа был зарегистрирован расчетный документ в текущем периоде");
				Сообщить("Текущий кадровый документ: " + СтрокаТаблицы.КадровыйДокумент);
				Сообщить("Исходный кадровый документ: " + СтруктураРасчетногоДокумента.КадровыйДокумент);
				Сообщить("Расчетный документ: " + РасчетныйДокументДляИсправления);
				Продолжить;
			КонецЕсли;
		КонецЕсли;

			ТипЗнчДокумента = ТипЗнч(СтрокаТаблицы.РасчетныйДокумент);
			ВидНеявки 		= СтрокаТаблицы.Неявка;
			ДатаДокумента 	= СтрокаТаблицы.КадровыйДокумент.Дата;
			СтрокаСообщенияОбОшибке = СтрокаТаблицы.ФизЛицо.Наименование + " " + СтрокаТаблицы.Неявка + " от " + Формат(СтрокаТаблицы.ДатаНачала,"ДФ=дд.ММ.гггг")+": ";
			
			Если ТипЗнчДокумента = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту") Тогда
				
				РасчетныйДокумент = Документы.НачислениеПоБольничномуЛисту.СоздатьДокумент();
				Если ЗначениеЗаполнено(РасчетныйДокументДляИсправления) Тогда
					РасчетныйДокумент.ЗаполнитьПоПерерассчитываемомуДокументу(РасчетныйДокументДляИсправления, СтрокаТаблицы.Сотрудник);
				КонецЕсли;
        		РасчетныйДокумент.ПериодРегистрации 		= ПериодРегистрации;
				РасчетныйДокумент.Дата						= Макс(ДатаДокумента, РасчетныйДокумент.ПериодРегистрации);
				РасчетныйДокумент.ФизЛицо 					= СтрокаТаблицы.ФизЛицо;
				РасчетныйДокумент.Сотрудник					= СтрокаТаблицы.Сотрудник;
				РасчетныйДокумент.ПричинаНетрудоспособности = СтрокаТаблицы.ПричинаНетрудоспособности;
				РасчетныйДокумент.ПроцентОплаты 			= СтрокаТаблицы.ПроцентОплаты;
				РасчетныйДокумент.ПервичныйБольничныйЛист 	= СтрокаТаблицы.ПервичныйБольничныйЛист;
				РасчетныйДокумент.ДатаНачала 				= СтрокаТаблицы.ДатаНачала;
				РасчетныйДокумент.ДатаОкончания 			= СтрокаТаблицы.ДатаОкончания;
				РасчетныйДокумент.ОграничениеПособия 		= СтрокаТаблицы.ОграничениеПособия;
				РасчетныйДокумент.СпособОтраженияВБухучете	= СтрокаТаблицы.СпособОтраженияВБухучете;
			
			ИначеЕсли ТипЗнчДокумента = Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку") Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчета) 	
					 Или СтрокаТаблицы.ВидРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщенияОбОшибке+"необходимо указать вид расчета по среднему заработку");
					Продолжить;
				КонецЕсли;
			
				РасчетныйДокумент = Документы.ОплатаПоСреднемуЗаработку.СоздатьДокумент();
				Если ЗначениеЗаполнено(РасчетныйДокументДляИсправления) Тогда
					РасчетныйДокумент.ЗаполнитьПоПерерассчитываемомуДокументу(РасчетныйДокументДляИсправления, СтрокаТаблицы.Сотрудник);
				КонецЕсли;
				РасчетныйДокумент.ПериодРегистрации 		= ПериодРегистрации;
				РасчетныйДокумент.Дата						= Макс(ДатаДокумента, РасчетныйДокумент.ПериодРегистрации);
				РасчетныйДокумент.ФизЛицо					= СтрокаТаблицы.ФизЛицо;
				РасчетныйДокумент.Сотрудник					= СтрокаТаблицы.Сотрудник;
				РасчетныйДокумент.ВидРасчета 				= СтрокаТаблицы.ВидРасчета;
				РасчетныйДокумент.ПроцентОплаты 			= СтрокаТаблицы.ПроцентОплаты;
				РасчетныйДокумент.ДатаНачала				= СтрокаТаблицы.ДатаНачала;
				РасчетныйДокумент.ДатаОкончания				= СтрокаТаблицы.ДатаОкончания;
				РасчетныйДокумент.СпособОтраженияВБухучете	= СтрокаТаблицы.СпособОтраженияВБухучете;
			
			ИначеЕсли ТипЗнчДокумента = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций") Тогда
				
				РасчетныйДокумент = Документы.НачислениеОтпускаРаботникамОрганизаций.СоздатьДокумент();
				
				Если ЗначениеЗаполнено(РасчетныйДокументДляИсправления) Тогда
					РасчетныйДокумент.ЗаполнитьПоПерерассчитываемомуДокументу(РасчетныйДокументДляИсправления, СтрокаТаблицы.Сотрудник);
				КонецЕсли;
	
				РасчетныйДокумент.ПериодРегистрации = ПериодРегистрации;
				РасчетныйДокумент.Дата				= Макс(ДатаДокумента, РасчетныйДокумент.ПериодРегистрации);
				РасчетныйДокумент.ФизЛицо 			= СтрокаТаблицы.ФизЛицо;
				РасчетныйДокумент.Сотрудник			= СтрокаТаблицы.Сотрудник;
				
				СтруктураПоиска = Новый Структура("Документ,Сотрудник,ДатаНачалаВсего,Сторно");
				СтруктураПоиска.Документ 		= СтрокаТаблицы.КадровыйДокумент;
				СтруктураПоиска.Сотрудник		= СтрокаТаблицы.Сотрудник;
				СтруктураПоиска.ДатаНачалаВсего = СтрокаТаблицы.ДатаНачала;
				СтруктураПоиска.Сторно 			= Ложь;
				
				НайденныеСтроки = Отпуска.НайтиСтроки(СтруктураПоиска);
				Для Каждого СтрокаОтпуска Из НайденныеСтроки Цикл
					НоваяСтрока = РасчетныйДокумент.Отпуска.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтпуска);
				КонецЦикла;
					
			ИначеЕсли ТипЗнчДокумента = Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") Тогда
				РасчетныйДокумент = Документы.ОтпускПоУходуЗаРебенком.СоздатьДокумент();
				
				РасчетныйДокумент.Дата 			= ДатаДокумента;
				РасчетныйДокумент.Физлицо 		= СтрокаТаблицы.ФизЛицо;
				РасчетныйДокумент.Сотрудник		= СтрокаТаблицы.Сотрудник;
				РасчетныйДокумент.ДатаДействия 	= СтрокаТаблицы.ДатаНачала;
				РасчетныйДокумент.ДатаНачала 	= СтрокаТаблицы.ДатаНачала;
				РасчетныйДокумент.ДатаОкончания	= СтрокаТаблицы.ДатаОкончания;
			
			ИначеЕсли ВидНеявки = Перечисления.СостоянияРаботникаОрганизации.Простой 
					  И ЗначениеЗаполнено(СтрокаТаблицы.ВидПростоя) Тогда
				// оплачиваемый простой
				РасчетныйДокумент = Документы.РегистрацияПростоевВОрганизациях.СоздатьДокумент();
				
				Если ЗначениеЗаполнено(РасчетныйДокументДляИсправления) Тогда
					РасчетныйДокумент.ЗаполнитьПоПерерассчитываемомуДокументу(РасчетныйДокументДляИсправления, СтрокаТаблицы.Сотрудник);
				КонецЕсли;
	
				РасчетныйДокумент.ПериодРегистрации 		= ПериодРегистрации;
				РасчетныйДокумент.Дата						= Макс(ДатаДокумента, РасчетныйДокумент.ПериодРегистрации);
				РасчетныйДокумент.Физлицо 					= СтрокаТаблицы.ФизЛицо;
				РасчетныйДокумент.Сотрудник					= СтрокаТаблицы.Сотрудник;
				РасчетныйДокумент.ВидПростоя 				= СтрокаТаблицы.ВидПростоя;
				РасчетныйДокумент.ПроцентОплаты				= СтрокаТаблицы.ПроцентОплаты;
				РасчетныйДокумент.ДатаНачала 				= СтрокаТаблицы.ДатаНачала;
				РасчетныйДокумент.ДатаОкончания				= СтрокаТаблицы.ДатаОкончания;
				РасчетныйДокумент.СпособОтраженияВБухучете	= СтрокаТаблицы.СпособОтраженияВБухучете;
				РасчетныйДокумент.НеЦелодневныйПростой		= Ложь;
					  
			Иначе // прочие невыходы
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчета)
					 И ВидНеявки = Перечисления.СостоянияРаботникаОрганизации.Простой Тогда
					// попробуем найти подходящий вид расчета для простоя
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("УчетВремениПростойПоВинеРаботника", Справочники.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботника);
					Запрос.УстановитьПараметр("РасчетНулеваяСумма", Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
					
					Запрос.Текст = "
					|ВЫБРАТЬ
					|	ОсновныеНачисления.Ссылка КАК ВидРасчета
					|ИЗ
					|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
					|ГДЕ
					|	ОсновныеНачисления.СпособРасчета = &РасчетНулеваяСумма И
					|	ОсновныеНачисления.ОбозначениеВТабелеУчетаРабочегоВремени = &УчетВремениПростойПоВинеРаботника
					|";
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						СтрокаТаблицы.ВидРасчета = Выборка.ВидРасчета;
					КонецЕсли;
				КонецЕсли;
			
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидРасчета) 
					 ИЛИ СтрокаТаблицы.ВидРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщенияОбОшибке + "необходимо выбрать вид расчета по нулевой сумме");
					Продолжить;
				КонецЕсли;
			
				РасчетныйДокумент = Документы.НевыходыВОрганизациях.СоздатьДокумент();
				
				Если ЗначениеЗаполнено(РасчетныйДокументДляИсправления) Тогда
					РасчетныйДокумент.ЗаполнитьПоПерерассчитываемомуДокументу(РасчетныйДокументДляИсправления, СтрокаТаблицы.Сотрудник);
				КонецЕсли;
	
				РасчетныйДокумент.ПериодРегистрации = ПериодРегистрации;
				РасчетныйДокумент.Дата				= Макс(ДатаДокумента, РасчетныйДокумент.ПериодРегистрации);
				
				СтрокаНачисления = РасчетныйДокумент.Начисления.Добавить();
				СтрокаНачисления.Физлицо 			= СтрокаТаблицы.ФизЛицо;
				СтрокаНачисления.Сотрудник			= СтрокаТаблицы.Сотрудник;
				СтрокаНачисления.ДатаНачала 		= СтрокаТаблицы.ДатаНачала;
				СтрокаНачисления.ДатаОкончания 		= СтрокаТаблицы.ДатаОкончания;
				СтрокаНачисления.Авторасчет 		= Истина;
				
				// Определим подразделение работника на дату события
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Сотрудник", СтрокаТаблицы.Сотрудник);
				Запрос.УстановитьПараметр("Организация", ГоловнаяОрганизация);
				Запрос.УстановитьПараметр("ДатаАктуальности", СтрокаТаблицы.ДатаНачала);
				
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	РаботникиОрганизации.ПодразделениеОрганизации
				|ИЗ
				|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
				|			&ДатаАктуальности, 
				|			Сотрудник = &Сотрудник 
				|			И Организация = &Организация) КАК РаботникиОрганизации
				|";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СтрокаНачисления.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
				КонецЕсли;
				
				СтрокаНачисления.ВидРасчета 				= СтрокаТаблицы.ВидРасчета;
				СтрокаНачисления.СпособОтраженияВБухучете 	= СтрокаТаблицы.СпособОтраженияВБухучете;
				
				Если НачалоМесяца(СтрокаТаблицы.ДатаНачала) <> НачалоМесяца(СтрокаТаблицы.ДатаОкончания) Тогда
					Если КоллекцияКолонокТЧНачисленияНевыходы = Неопределено Тогда
						// Еще ни разу не вызывалась - составим таблицу с именами колонок ТЧ Начисления документа НевыходыВОрганизациях
						КоллекцияКолонокТЧНачисленияНевыходы = Новый ТаблицаЗначений;
						КоллекцияКолонокТЧНачисленияНевыходы.Колонки.Добавить("Имя");
						МетаданныеТЧ = Метаданные.Документы.НевыходыВОрганизациях.ТабличныеЧасти.Начисления;
						Для Каждого РеквизитТЧ Из МетаданныеТЧ.Реквизиты Цикл
							СтрокаТЗ = КоллекцияКолонокТЧНачисленияНевыходы.Добавить();
							СтрокаТЗ.Имя = РеквизитТЧ.Имя;
						КонецЦикла;
					КонецЕсли;
					
					ПроведениеРасчетов.РазбитьСтрокуНачисленийНаПомесячныеЗаписи(СтрокаНачисления, РасчетныйДокумент.Начисления, КоллекцияКолонокТЧНачисленияНевыходы);
				КонецЕсли;
				
			КонецЕсли;
			
			РасчетныйДокумент.Организация	= Организация;
			РасчетныйДокумент.Ответственный	= глЗначениеПеременной("глТекущийПользователь");
			РасчетныйДокумент.Записать();
			
			Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументОбъект.ОтпускПоУходуЗаРебенком") Тогда
				РасчетныйДокумент.ЗаполнитьПлановыйНачисленияУдержания();
				РасчетныйДокумент.Записать();
			КонецЕсли;
			
			СтрокаТаблицы.РасчетныйДокумент	= РасчетныйДокумент.Ссылка;
		
	КонецЦикла;
	
#Если Клиент Тогда
	Если ФормаПрогрессора.Открыта() Тогда
		ФормаПрогрессора.Закрыть();
	КонецЕсли; 
#КонецЕсли	
	
КонецПроцедуры // СоздатьДокументы()

// Процедура рассчитывает отмеченные документы
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
Процедура РассчитатьДокументы() Экспорт
	
	КоличествоСтрок =  Неявки.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;

	РассчитываемыеТаблицы = Новый Структура("Начисления,РасчетСреднего",Истина,Истина);
	НомерТекущейСтроки = 0;

#Если Клиент Тогда
	КоличествоОтмеченных = 0;
	Для Каждого СтрокаТаблицы Из Неявки Цикл
		Если СтрокаТаблицы.Отметка И ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент) Тогда
			КоличествоОтмеченных = КоличествоОтмеченных + 1;
		КонецЕсли;		
	КонецЦикла;

	ФормаПрогрессора = ПолучитьОбщуюФорму("ФормаИндикатора");
	ФормаПрогрессора.СтрокаСостоянияПрогрессора = "Рассчитываются документы...";
	ФормаПрогрессора.МаксимальноеЗначение = КоличествоОтмеченных;
	ФормаПрогрессора.ЗначениеИндикатора = 0;
	ФормаПрогрессора.Открыть();
	Индекс = 0;	
#КонецЕсли

	Для Каждого СтрокаТаблицы Из Неявки Цикл
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		Если СтрокаТаблицы.Отметка И ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент) Тогда
			Если ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") Тогда
				Продолжить
			КонецЕсли;

#Если Клиент Тогда
		    Индекс = Индекс + 1;
    		ФормаПрогрессора.ЗначениеИндикатора = индекс;
			ФормаПрогрессора.НадписьСостоянияПрогрессора = СтрокаТаблицы.ФизЛицо.Наименование + " " + СтрокаТаблицы.Неявка + " (" + Формат(СтрокаТаблицы.ДатаНачала,"ДФ=дд.ММ.гггг") + " - " + Формат(СтрокаТаблицы.ДатаОкончания,"ДФ=дд.ММ.гггг") + ")";
#КонецЕсли			
			
			РасчетныйДокумент = СтрокаТаблицы.РасчетныйДокумент.ПолучитьОбъект();			
			Если РасчетныйДокумент.ПометкаУдаления Тогда
				РасчетныйДокумент.УстановитьПометкуУдаления(Ложь);
			ИначеЕсли РасчетныйДокумент.Проведен Тогда
				РасчетныйДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения)
			КонецЕсли;
			// авторасчет документа
			Попытка
				Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументОбъект.НевыходыВОрганизациях") Тогда
					РасчетныйДокумент.Рассчитать();
				Иначе
					РасчетныйДокумент.Рассчитать(РассчитываемыеТаблицы);
				КонецЕсли;
				РасчетныйДокумент.Записать(РежимЗаписиДокумента.Запись);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;

#Если Клиент Тогда
	Если ФормаПрогрессора.Открыта() Тогда
		ФормаПрогрессора.Закрыть();
	КонецЕсли; 
#КонецЕсли	

КонецПроцедуры // РассчитатьДокументы()

// Процедура проводит отмеченные документы
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
Процедура ПровестиДокументы() Экспорт

#Если Клиент Тогда
	КоличествоОтмеченных = 0;
	Для Каждого СтрокаТаблицы Из Неявки Цикл
		Если СтрокаТаблицы.Отметка И ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент) Тогда
			КоличествоОтмеченных = КоличествоОтмеченных + 1;
		КонецЕсли;		
	КонецЦикла;

	ФормаПрогрессора = ПолучитьОбщуюФорму("ФормаИндикатора");
	ФормаПрогрессора.СтрокаСостоянияПрогрессора = "Проводятся документы...";
	ФормаПрогрессора.МаксимальноеЗначение = КоличествоОтмеченных;
	ФормаПрогрессора.ЗначениеИндикатора = 0;
	ФормаПрогрессора.Открыть();
	Индекс = 0;	
#КонецЕсли

	НомерТекущейСтроки = 0;
	Для Каждого СтрокаТаблицы Из Неявки Цикл
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		
		Если СтрокаТаблицы.Отметка и ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент) Тогда

#Если Клиент Тогда
		    Индекс = Индекс + 1;
    		ФормаПрогрессора.ЗначениеИндикатора = индекс;
			ФормаПрогрессора.НадписьСостоянияПрогрессора = СтрокаТаблицы.ФизЛицо.Наименование + " " + СтрокаТаблицы.Неявка + " (" + Формат(СтрокаТаблицы.ДатаНачала,"ДФ=дд.ММ.гггг") + " - " + Формат(СтрокаТаблицы.ДатаОкончания,"ДФ=дд.ММ.гггг") + ")";    		
#КонецЕсли			
		
			РасчетныйДокумент = СтрокаТаблицы.РасчетныйДокумент.ПолучитьОбъект();
			Если РасчетныйДокумент.ПометкаУдаления Тогда
				РасчетныйДокумент.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			Попытка
				РасчетныйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Продолжить;
			КонецПопытки;
			СтрокаТаблицы.Отметка = Не СтрокаТаблицы.Отметка;
		КонецЕсли;
	КонецЦикла;

#Если Клиент Тогда
	Если ФормаПрогрессора.Открыта() Тогда
		ФормаПрогрессора.Закрыть();
	КонецЕсли; 
#КонецЕсли	

КонецПроцедуры // ПровестиДокументы()

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ОБЪЕКТА 

мДлинаСуток = 86400; // в секундах
