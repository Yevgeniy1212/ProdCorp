
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	
	ОпределитьОтборПоСогласованию();
		
	Если ОтборПоСогласованию Тогда
		Элементы.РежимОтбораЗаявок.Видимость = ОтборПоСогласованию;
		Объект.РежимОтбораЗаявок = Перечисления.ден_ВидыОтбораЗаявокПриФормированииПланаПлатежей.ПрошедшиеСогласованиеЛибоНеИмеющиеНазначенныхМаршрутов;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_РаботаСоСтруктурнымиПодразделениями.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеУчитыватьГрафикПлатежныхДнейПриИзменении(Элемент)
	
	ПризнакУчитыватьГрафик = НЕ НеУчитыватьГрафикПлатежныхДней;
	
	Элементы.ДеревоПлатежейДатаПлатежа.КнопкаРегулирования 	= ПризнакУчитыватьГрафик;
	Элементы.СпособПриведенияКДатеПлатежа.Видимость 		= ПризнакУчитыватьГрафик;
	Элементы.ПривестиДаты.Видимость 						= ПризнакУчитыватьГрафик;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьПлановыеПоступленияПриИзменении(Элемент)
	
	Элементы.ДеревоОстатков.ПодчиненныеЭлементы.ДеревоОстатковПоступления.Видимость = УчитыватьПлановыеПоступления;
	
	ОбновитьДеревоОстатков();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоПлатежей

&НаКлиенте
Процедура ДеревоПлатежейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
		УстановитьФлажкиВПодчиненных(Элемент.ТекущиеДанные.ПолучитьЭлементы(),Элемент.ТекущиеДанные.Применить);
	КонецЕсли;
	
	ОбновитьДеревоОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПлатежейОргКонтрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПлатежейОргКонтрОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПлатежейДатаПлатежаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ДеревоПлатежей.ТекущиеДанные;
	
	ТекДанные.ДатаПлатежа = дог_УправлениеДоговорами.ПривестиДатуПлатежа(Направление, ТекДанные.Организация, ТекДанные.ДатаПлатежа);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПлатежейПланПлатежейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПлатежейПланПлатежейОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОстаткиТолькоПоЗадействованнымСчетамКассамПриИзменении(Элемент)
	
	ОбновитьОстатки();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заполнить(Команда) Экспорт
	
	Если Период.ДатаОкончания = '00010101' Или Период.ДатаНачала = '00010101' Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен период формирования заявок!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Период");
		Возврат;
	ИначеЕсли Период.ДатаОкончания < Период.ДатаНачала Тогда
		ТекстСообщения = НСтр("ru = 'Дата окончания периода не может быть больше даты начала периода!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Период");
		Возврат;
	КонецЕсли;
	
	Если Объект.Организация.Пустая() Тогда
		ТекстСообщения = НСтр("ru = 'Не указана организация!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СтруктурноеПодразделениеОрганизация");
		Возврат;
	КонецЕсли;
	
	УстановитьФлажкиВПодчиненных(ДеревоПлатежей.ПолучитьЭлементы(), Истина);

	РазвернутьДерево("ДеревоПлатежей", ДеревоПлатежей.ПолучитьЭлементы());
	РазвернутьДерево("ДеревоОстатков", ДеревоОстатков.ПолучитьЭлементы());
	
	АвтозаполнениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДенежныйЧек(Команда) Экспорт
	
	Если Элементы.ДеревоОстатков.ТекущиеДанные<>Неопределено Тогда
		НовыйЧек = СоздатьЧек(Элементы.ДеревоОстатков.ТекущиеДанные.ВидДСКасса,Элементы.ДеревоОстатков.ТекущиеДанные.ОстатокНаКонец,Объект.Организация,Объект.СтруктурноеПодразделение);
	Иначе
		НовыйЧек = СоздатьЧек(,,Объект.Организация,Объект.СтруктурноеПодразделение);
	КонецЕсли;
	
	НовыйЧек.Открыть();
	
	ОбновитьОстатки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДетализацияПоДням(Команда) Экспорт
	
	Элементы.ДеревоОстатковДетализацияПоДням.Пометка = Не Элементы.ДеревоОстатковДетализацияПоДням.Пометка;
	Элементы.ГруппаПоДням.Видимость = Элементы.ДеревоОстатковДетализацияПоДням.Пометка;
	Если Элементы.ДеревоОстатковДетализацияПоДням.Пометка Тогда
		ПолучитьДанныеПоДням();
	КонецЕсли;
	
	ВывестиОтчетПоДням();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъявлениеНаВзносНаличными(Команда) Экспорт
	
	Если Элементы.ДеревоОстатков.ТекущиеДанные<>Неопределено Тогда
		НовоеОбъявление = СоздатьОбъявление(Элементы.ДеревоОстатков.ТекущиеДанные.ВидДСКасса,Элементы.ДеревоОстатков.ТекущиеДанные.ОстатокНаКонец,Объект.Организация,Объект.СтруктурноеПодразделение);
	Иначе
		НовоеОбъявление = СоздатьОбъявление(,,Объект.Организация,Объект.СтруктурноеПодразделение);
	КонецЕсли;
	
	НовоеОбъявление.Открыть();
	
	ОбновитьОстатки();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПривестиДаты(Команда) Экспорт
	
	Если Годы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Если СпособПриведенияКДатеПлатежа = ПредопределенноеЗначение("Перечисление.ден_СпособыПриведенияКДатеПлатежа.БлижайшаяПоследующая") Тогда
		Направление = 1;
	ИначеЕсли СпособПриведенияКДатеПлатежа = ПредопределенноеЗначение("Перечисление.ден_СпособыПриведенияКДатеПлатежа.БлижайшаяПредыдущая") Тогда
		Направление = -1;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПривестиДатыНаСервере(Направление);
	
	РазвернутьДерево("ДеревоПлатежей", ДеревоПлатежей.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда) Экспорт
	
	УстановитьФлажкиВПодчиненных(ДеревоПлатежей.ПолучитьЭлементы(),Истина);
	
	ОбновитьДеревоОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда) Экспорт
	
	УстановитьФлажкиВПодчиненных(ДеревоПлатежей.ПолучитьЭлементы(),Ложь);
	
	ОбновитьДеревоОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПланПлатежей(Команда) Экспорт
	
	ТаблицаПланаПлатежей.Очистить();
	
	СформироватьТаблицуПланаПлатежей(ДеревоПлатежей.ПолучитьЭлементы());
	
	Если ТаблицаПланаПлатежей.Количество() > 0 Тогда
		ПодготовитьДанныеДляФормированияПлановПлатежей();
	КонецЕсли;
	
	РазвернутьДерево("ДеревоПлатежей", ДеревоПлатежей.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда) Экспорт
	
	ПровестиНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	Период.ДатаНачала 				= НачалоМесяца(ТекущаяДата());
	Период.ДатаОкончания 			= КонецМесяца(ТекущаяДата());
	СпособПриведенияКДатеПлатежа 	= Перечисления.ден_СпособыПриведенияКДатеПлатежа.БлижайшаяПоследующая;
    НеУчитыватьГрафикПлатежныхДней 	= Истина;
	ТолькоНовые						= Истина;
		
	НадписьЗаявки 					= "Заявки";
	НадписьОтбор 					= "Отбор";
	НадписьСостояниеДенежныхСредств = "Состояние денежных средств";
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
	ПоказыватьОстаткиТолькоПоЗадействованнымСчетамКассам = Истина;
	
	Объект.Организация = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяОрганизация");
	
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, Истина);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаПоДням.Видимость = Элементы.ДеревоОстатковДетализацияПоДням.Пометка;
			
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтборПоСогласованию()

	ОтборПоСогласованию = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ИспользоватьПодсистемуЭлектронногоДокументооборота");
	
	Если ОтборПоСогласованию Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_ВидыДокументов.Ссылка
			|ПОМЕСТИТЬ Виды
			|ИЗ
			|	Справочник.фин_ВидыДокументов КАК фин_ВидыДокументов
			|ГДЕ
			|	фин_ВидыДокументов.ПрограммныйИдентификатор = &ПрограммныйИдентификатор
			|	И НЕ фин_ВидыДокументов.ПометкаУдаления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	усд_АктуальныеМаршрутыСогласованияДокументов.Маршрут
			|ИЗ
			|	Виды КАК Виды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.усд_АктуальныеМаршрутыСогласованияДокументов КАК усд_АктуальныеМаршрутыСогласованияДокументов
			|		ПО Виды.Ссылка = усд_АктуальныеМаршрутыСогласованияДокументов.ВидДокументов";

		Запрос.УстановитьПараметр("ПрограммныйИдентификатор", Метаданные.Документы.ден_ЗаявкаНаРасходованиеСредств.Имя);

		Результат = Запрос.Выполнить();

		ОтборПоСогласованию = Не Результат.Пустой();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзменении(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиВПодчиненных(Строки, Пометка)
	
	Для Каждого СтрокаПодчиненная Из Строки Цикл
		СтрокаПодчиненная.Применить = Пометка;
		УстановитьФлажкиВПодчиненных(СтрокаПодчиненная.ПолучитьЭлементы(), Пометка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоОстатков()
	
	ТаблицаПлатежей.Очистить();
	СформироватьТаблицуПлатежей(ДеревоПлатежей.ПолучитьЭлементы());
	СвернутьТаблицуПлатежей();
	
	ЗаполнитьПлатежВДеревеОстатков(ДеревоОстатков.ПолучитьЭлементы());
	
	ВывестиОтчетПоДням();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТаблицуПлатежей(Строки)
	
	Для Каждого СтрокаПодчиненная Из Строки Цикл
		
		Если ЗначениеЗаполнено(СтрокаПодчиненная.Организация) Тогда
			НовСтр = ТаблицаПлатежей.Добавить();
			НовСтр.Организация = СтрокаПодчиненная.Организация;
			НовСтр.СчетКасса = СтрокаПодчиненная.СчетКасса;
			НовСтр.Сумма = ?(СтрокаПодчиненная.Применить,СтрокаПодчиненная.Сумма,0);
		КонецЕсли;
		
		СформироватьТаблицуПлатежей(СтрокаПодчиненная.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СвернутьТаблицуПлатежей()
	
	Таблица = ДанныеФормыВЗначение(ТаблицаПлатежей,Тип("ТаблицаЗначений"));
	Таблица.Свернуть("Организация,СчетКасса","Сумма");
	ЗначениеВДанныеФормы(Таблица,ТаблицаПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПлатежВДеревеОстатков(Строки)
	
	Для Каждого СтрокаПодчиненная Из Строки Цикл
		Если ТипЗнч(СтрокаПодчиненная.ВидДСКасса)=Тип("СправочникСсылка.БанковскиеСчета")
			ИЛИ ТипЗнч(СтрокаПодчиненная.ВидДСКасса)=Тип("СправочникСсылка.Кассы") Тогда
			СтрокиПоКассеСчету = ТаблицаПлатежей.НайтиСтроки(Новый Структура("СчетКасса",СтрокаПодчиненная.ВидДСКасса));
			Если СтрокиПоКассеСчету.Количество()>0 Тогда
				СтрокаПодчиненная.Платеж = СтрокиПоКассеСчету[0].Сумма;
			Иначе
				СтрокаПодчиненная.Платеж = 0;
			КонецЕсли;
			СтрокаПодчиненная.ОстатокНаКонец = СтрокаПодчиненная.ОстатокНаНачало - СтрокаПодчиненная.Платеж - СтрокаПодчиненная.ПоПрочимПланамПлатежей + ?(УчитыватьПлановыеПоступления,СтрокаПодчиненная.Поступления,0);
		КонецЕсли;		
		ЗаполнитьПлатежВДеревеОстатков(СтрокаПодчиненная.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиОтчетПоДням()
	
	Обработки.ден_ФормированиеПланаПлатежей.ВывестиОтчетПоДням(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОстатки()
	       
	ЗаполнитьОстаткиНаСервере();
	
	Если Элементы.ДеревоОстатковДетализацияПоДням.Пометка Тогда
		ПолучитьДанныеПоДням();
	КонецЕсли;
	
	ВывестиОтчетПоДням();
	РазвернутьДерево("ДеревоОстатков", ДеревоОстатков.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткиНаСервере()

	Обработки.ден_ФормированиеПланаПлатежей.ЗаполнитьОстатки(ЭтаФорма);
    	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПоДням()
    
	Обработки.ден_ФормированиеПланаПлатежей.ПолучитьДанныеПоДням(ЭтаФорма);
	  
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(ИмяДерева,СтрокиДерева)
	
	Для Каждого Строка Из  СтрокиДерева Цикл
    	Элементы[ИмяДерева].Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция СоздатьЧек(СчетКасса = Неопределено, Сумма = Неопределено, Организация, СтруктурноеПодразделение)
	
	Документ = ПолучитьФорму("Документ.ден_ДенежныйЧек.ФормаОбъекта");
	Документ.Объект.Организация = Организация;
	Документ.Объект.СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделение;
	Документ.Объект.СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделение;
	Если ТипЗнч(СчетКасса) = Тип("СправочникСсылка.Кассы") Тогда
		Документ.Объект.Касса = СчетКасса;
		Документ.Объект.ВалютаДокумента = ВалютаДС(Документ.Объект.Касса);
		Если Сумма <> Неопределено И Сумма < 0 Тогда
			Документ.Объект.СуммаДокумента = -Сумма;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СчетКасса) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		Документ.Объект.СчетОрганизации = СчетКасса;
		Документ.Объект.ВалютаДокумента = ВалютаДС(Документ.Объект.СчетОрганизации);
		Документ.Объект.СуммаДокумента = Сумма;
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции

&НаКлиенте
Функция СоздатьОбъявление(СчетКасса = Неопределено, Сумма = Неопределено, Организация, СтруктурноеПодразделение)
	
	Документ = ПолучитьФорму("Документ.ден_ОбъявлениеНаВзносНаличными.ФормаОбъекта");
	Документ.Объект.Организация = Организация;
	Документ.Объект.СтруктурноеПодразделениеОтправитель = СтруктурноеПодразделение;
	Документ.Объект.СтруктурноеПодразделениеПолучатель = СтруктурноеПодразделение;
	Если ТипЗнч(СчетКасса) = Тип("СправочникСсылка.Кассы") Тогда
		Документ.Объект.Касса = СчетКасса;
		Документ.Объект.СуммаДокумента = Сумма;
		Документ.Объект.ВалютаДокумента = ВалютаДС(Документ.Объект.Касса);
	ИначеЕсли ТипЗнч(СчетКасса) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		Документ.Объект.СчетОрганизации = СчетКасса;
		Документ.Объект.ВалютаДокумента = ВалютаДС(Документ.Объект.СчетОрганизации);
		Если Сумма <> Неопределено И Сумма < 0 Тогда
			Документ.Объект.СуммаДокумента = -Сумма;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВалютаДС(Значение)
	
	Возврат фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Значение, "ВалютаДенежныхСредств");
	
КонецФункции

&НаСервере
Процедура АвтозаполнениеНаСервере()
    
    ПолучитьДанныеПоДням();
    ЗаполнитьНаСервере();
    ЗаполнитьОстаткиНаСервере();
    ПолучитьДанныеПоДням();
    ВывестиОтчетПоДням();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()

    ДатаНачала = Период.ДатаНачала;
	ДатаОкончания = КонецДня(Период.ДатаОкончания);
	Годы.Очистить();
	
	Результат = общ_ПроцедурыМеханизмаЗащиты.ПолучитьДанныеДляРасчетаПланаПлатежей(ДатаНачала,ДатаОкончания,Объект.Организация,Объект.СтруктурноеПодразделение,Объект.Контрагент,ТолькоНовые,ОтборПоСогласованию,Объект.РежимОтбораЗаявок);
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
    Дерево = РеквизитФормыВЗначение("ДеревоПлатежей");
	Дерево.Строки.Очистить();
	ВыборкаОрг = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрг.Следующий() Цикл
		ВыборкаКонтр = ВыборкаОрг.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонтр.Следующий() Цикл
			СтрокаК = Дерево.Строки.Добавить();
			СтрокаК.ОргКонтр = ВыборкаКонтр.Контрагент;
	        ВыборкаДоговор = ВыборкаКонтр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДоговор.Следующий() Цикл
				СтрокаД = СтрокаК.Строки.Добавить();
				СтрокаД.ОргКонтр = ВыборкаДоговор.ДоговорКонтрагента;
		        ВыборкаЗаявка = ВыборкаДоговор.Выбрать();
				Пока ВыборкаЗаявка.Следующий() Цикл
					СтрокаЗ = СтрокаД.Строки.Добавить();
					СтрокаЗ.ОргКонтр = ВыборкаЗаявка.Заявка;
					СтрокаЗ.Валюта = ВыборкаЗаявка.Валюта;
					СтрокаЗ.Организация = ВыборкаЗаявка.Организация;
					СтрокаЗ.СчетКасса = ВыборкаЗаявка.СчетКасса;
					СтрокаЗ.ВидОплаты = ВыборкаЗаявка.ФормаОплаты;
					СтрокаЗ.СуммаПоЗаявке = ВыборкаЗаявка.СуммаПлатежа;
					СтрокаЗ.Сумма = ВыборкаЗаявка.СуммаКОплате;
					СтрокаЗ.ДатаПлатежаПоЗаявке = ВыборкаЗаявка.ДатаРасхода;
					СтрокаЗ.ДатаПлатежа = ВыборкаЗаявка.ДатаРасхода;
					СтрокаЗ.СчетКасса = ВыборкаЗаявка.СчетКасса;
                    // Таблица дат
					Если Годы.НайтиПоЗначению(Год(ВыборкаЗаявка.ДатаРасхода))=Неопределено Тогда
						Годы.Добавить(Год(ВыборкаЗаявка.ДатаРасхода));
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоПлатежей");

    ДеревоОст = РеквизитФормыВЗначение("ДеревоОстатков");
	ДеревоОст.Строки.Очистить();
    ВыборкаО = Результат[7].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаО.Следующий() Цикл
		ВыборкаФО = ВыборкаО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаФО.Следующий() Цикл
			СтрокаФО = ДеревоОст.Строки.Добавить();	
			СтрокаФО.ВидДСКасса = ВыборкаФО.ФормаОплаты;
			ВыборкаДетали = ВыборкаФО.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				СтрокаД = СтрокаФО.Строки.Добавить();
				СтрокаД.ВидДСКасса = ВыборкаДетали.СчетКасса;
				СтрокаД.ОстатокНаНачало = ВыборкаДетали.ОстНаНач;
				СтрокаД.Платеж = ВыборкаДетали.Платеж;
				СтрокаД.ПоПрочимПланамПлатежей = ВыборкаДетали.ПоПрочимПланамПлатежей;
				СтрокаД.Поступления = ВыборкаДетали.Поступления;
				СтрокаД.ОстатокНаКонец = ВыборкаДетали.ОстНаКонец + ?(УчитыватьПлановыеПоступления,ВыборкаДетали.Поступления,0);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоОст, "ДеревоОстатков");
	
	ВывестиОтчетПоДням();
	
КонецПроцедуры

&НаСервере
Процедура ПривестиДатыНаСервере(Направление)
	
	Дерево = РеквизитФормыВЗначение("ДеревоПлатежей");
	Годы.СортироватьПоЗначению();
	ОбходДереваСПриведениемДатыПлатежа(Дерево.Строки,дог_УправлениеДоговорами.ПолучитьТаблицуПлатежныхДней(Годы[0].Значение,Годы[Годы.Количество()-1].Значение),Направление);
	ЗначениеВРеквизитФормы(Дерево,"ДеревоПлатежей");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбходДереваСПриведениемДатыПлатежа(Строки,ТабДат,Направление)
	
	Структура = Новый Структура("Организация, Дата");
	
	Для Каждого СтрокаПодчиненная Из Строки Цикл
		Если ЗначениеЗаполнено(СтрокаПодчиненная.ДатаПлатежа)
			И СтрокаПодчиненная.Применить Тогда
			Структура.Организация = СтрокаПодчиненная.Организация;
			Структура.Дата = СтрокаПодчиненная.ДатаПлатежа;
			МассивСтрок = ТабДат.НайтиСтроки(Структура);
			Если МассивСтрок.Количество()>0  Тогда
				Продолжить;
			КонецЕсли;
			СтрокаПодчиненная.ДатаПлатежа = дог_УправлениеДоговорами.ПривестиДатуПлатежа(Направление, Структура.Организация, Структура.Дата, Истина);				
		КонецЕсли;
		ОбходДереваСПриведениемДатыПлатежа(СтрокаПодчиненная.Строки,ТабДат,Направление);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПровестиНаСервере()
	
	Дерево = РеквизитФормыВЗначение("ДеревоПлатежей");
	
	ОбходДереваСПроведениемЗаявок(Дерево.Строки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбходДереваСПроведениемЗаявок(Строки)
	
	Для Каждого СтрокаПодчиненная Из Строки Цикл
		Если СтрокаПодчиненная.Применить 
			И ЗначениеЗаполнено(СтрокаПодчиненная.ПланПлатежей) Тогда			
			Попытка
				ДокументОбъект = СтрокаПодчиненная.ПланПлатежей.ПолучитьОбъект();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекстСообщения = "Невозможно провести документ: " + СтрокаПодчиненная.ПланПлатежей + " " + ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
		ОбходДереваСПроведениемЗаявок(СтрокаПодчиненная.Строки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеДляФормированияПлановПлатежей()
	
	Обработки.ден_ФормированиеПланаПлатежей.ПодготовитьДанныеДляФормированияПлановПлатежей(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТаблицуПланаПлатежей(Строки)
	
	Для Каждого СтрокаПодчиненная Из Строки Цикл
		Если ЗначениеЗаполнено(СтрокаПодчиненная.Организация) 
			И СтрокаПодчиненная.Применить
			И НЕ ЗначениеЗаполнено(СтрокаПодчиненная.ПланПлатежей) Тогда
			НовСтр = ТаблицаПланаПлатежей.Добавить();
			НовСтр.Организация = СтрокаПодчиненная.Организация;
			НовСтр.СчетКасса = СтрокаПодчиненная.СчетКасса;
			НовСтр.Сумма = СтрокаПодчиненная.Сумма;
			НовСтр.ЗРС = СтрокаПодчиненная.ОргКонтр;
			НовСтр.Валюта = СтрокаПодчиненная.Валюта;
			НовСтр.ВидОплаты = СтрокаПодчиненная.ВидОплаты;
			НовСтр.ДатаПлатежа = СтрокаПодчиненная.ДатаПлатежа;
			НовСтр.СуммаПоЗаявке = СтрокаПодчиненная.СуммаПоЗаявке;
		КонецЕсли;
		СформироватьТаблицуПланаПлатежей(СтрокаПодчиненная.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры
