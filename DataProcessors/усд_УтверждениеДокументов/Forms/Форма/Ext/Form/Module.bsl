////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь");
	НадписьРеквизитыПодлежащиеПроверке = "Реквизиты, подлежащие проверке";
	НадписьУтверждениеДокументов = "Утверждение документов";
	Объект.КоличествоВерсий = 1;
	Объект.КоличествоПрикрепленныхФайлов = 0;
	МассивТипов = Новый Массив;
	ИсточникТипа = Метаданные.ПодпискиНаСобытия.усд_ПриЗаписиДокументаРегистрацияВСистемеСогласования.Источник;
	Для Каждого ДокументМетаданные Из Метаданные.Документы Цикл
		Если ИсточникТипа.СодержитТип(Тип("ДокументОбъект."+ДокументМетаданные.Имя)) Тогда
			МассивТипов.Добавить(Тип("ДокументСсылка."+ДокументМетаданные.Имя));
		КонецЕсли;
	КонецЦикла;
	Элементы.Документ.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	Если Параметры.Свойство("Документ") Тогда
		Объект.Документ = Параметры.Документ;
	КонецЕсли;
	Элементы.ДекорацияВерсии.Видимость=РольДоступна("ПолныеПрава") ИЛИ РольДоступна("усд_УправлениеСогласованиемИУтверждениемДокументов") ИЛИ РольДоступна("ЧтениеВерсийОбъектов");
	УстановитьСведения();
	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_РанжироватьДокументыПоПриоритетам") Тогда
		Элементы.ГруппаДоп.Группировка=ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	РежимИнтеграции = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_РежимИнтеграцииСУчетнойСистемой");
	Элементы.ДекорацияПрикрепленныеФайлы.Видимость = (РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана ИЛИ РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный  ИЛИ РежимИнтеграции=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3) И (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("усд_УправлениеСогласованиемИУтверждениемДокументов") ИЛИ РольДоступна("РаботаСПапкамиФайлов"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДокументПриИзменении(Элемент)
	УстановитьСведения();
	РеквизитыМодифицированы = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Элементы.Документ.ОграничениеТипа = ОписаниеТипаВыбора();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУтвердитьНажатие(Элемент)
	
	Если РеквизитыМодифицированы Тогда		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаУтвердить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Значения проверяемых реквизитов изменены. Сохранить?", РежимДиалогаВопрос.ДаНет);		
	Иначе		
		ПослеЗакрытияВопросаУтвердить(КодВозвратаДиалога.Нет, Неопределено);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВернутьНажатие(Элемент)
	
	Если РеквизитыМодифицированы Тогда		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаВернуть", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Значения проверяемых реквизитов изменены. Сохранить?", РежимДиалогаВопрос.ДаНет);
	Иначе 
		ПослеЗакрытияВопросаВернуть(КодВозвратаДиалога.Нет, Неопределено);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтклонитьНажатие(Элемент)
	
	Если РеквизитыМодифицированы Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОтклонить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Значения проверяемых реквизитов изменены. Сохранить?",РежимДиалогаВопрос.ДаНет);		
	Иначе 
		ПослеЗакрытияВопросаОтклонить(КодВозвратаДиалога.Нет, Неопределено);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрикрепленныеФайлыНажатие(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.Документ) Тогда
		ПоказатьПредупреждение(, "Документ не выбран!");
		Возврат;
	КонецЕсли;
	мПараметры = Новый Структура;
	мПараметры.Вставить("ВладелецФайла", Объект.Документ);
	мЗаголовок = НСтр("ru = 'Присоединенные файлы'");
	мПараметры.Вставить("ЗаголовокФормы", мЗаголовок);
	
	ОткрытьФорму(
		"Справочник.Файлы.Форма.ФормаСпискаПрисоединенныхФайлов", 
		мПараметры,
		ЭтотОбъект, 
		УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСоздатьЗаметкуНажатие(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.Документ) Тогда
		ПоказатьПредупреждение(, "Не определен документ!");
		Возврат;
	КонецЕсли;
	ОткрытьФорму("РегистрСведений.усд_РеестрЗаметок.Форма.ЗаметкиПоОбъекту",Новый Структура("НазваниеОбъект,НазваниеДополнительно,Объект,Дополнительно","Документ","Этап",Объект.Документ,Объект.ТекущийЭтап));
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВерсииНажатие(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.Документ) Тогда
		ПоказатьПредупреждение(, "Не определен документ!");
		Возврат;
	КонецЕсли;
	СписокВерсий = ОткрытьФорму("РегистрСведений.ВерсииОбъектов.Форма.ВыборХранимыхВерсий",
								Новый Структура("Ссылка", Объект.Документ),
								ЭтотОбъект,
								УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартаНажатие(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.Документ) Тогда
		ПоказатьПредупреждение(, "Не определен документ!");
		Возврат;
	КонецЕсли;
    ОткрытьФорму("Отчет.усд_КартаСостоянияДокумента.Форма",Новый Структура("Документ,СформироватьПриОткрытии",Объект.Документ,Истина),ЭтотОбъект,Объект.Документ);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСведенияНажатие(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.Документ) Тогда
		ПоказатьПредупреждение(, "Не определен документ!");
		Возврат;
	КонецЕсли;
	ФормаОтчета = ПолучитьФорму("Обработка.усд_УтверждениеДокументов.Форма.ФормаИнформации",,ЭтотОбъект,Объект.Документ);
	ЗаполнитьДанныеФормыИнформации(ФормаОтчета.ТабличныйДокумент);
	ФормаОтчета.Заголовок = "Форма отчетов: "+Строка(Объект.Документ);
	Если НЕ ФормаОтчета.Открыта() Тогда
		ФормаОтчета.Открыть();
	КонецЕсли;
	ФормаОтчета.Активизировать();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПереадресоватьНажатие(Элемент)
	Если ПользовательВходитВГруппуОтветственности И ЕстьПраваПерадресации() Тогда
		ПереченьДокументов = Новый Массив;
		ПереченьДокументов.Добавить(Новый Структура("Документ,ВидДокументов,Маршрут,Этап,Исполнитель",Объект.Документ,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап,ТекущийПользователь));
		ОткрытьФорму("Обработка.усд_ПереадресацияЗадачСогласования.Форма",Новый Структура("ПереченьДокументов",ПереченьДокументов));
		Закрыть();
	Иначе
		ПоказатьПредупреждение(, "Нет права переадресации на текущем этапе!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбновитьНажатие(Элемент)
	УстановитьСведения();
	РеквизитыМодифицированы = Ложь;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ЗаполнениеРеквизитов>

&НаКлиенте
Процедура ЗаполнениеРеквизитовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Попытка
		Элемент.ПодчиненныеЭлементы.ЗаполнениеРеквизитовЗначениеРеквизита.ОграничениеТипа = ОписаниеТипаРеквизита(Элементы.ЗаполнениеРеквизитов.ТекущиеДанные.Реквизит);
	Исключение
		ПоказатьПредупреждение(, "Невозможно обработать заполнение реквизита!");
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеРеквизитовЗначениеРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Попытка
		Элемент.ОграничениеТипа = ОписаниеТипаРеквизита(Элементы.ЗаполнениеРеквизитов.ТекущиеДанные.Реквизит);
	Исключение
		ПоказатьПредупреждение(, "Невозможно обработать заполнение реквизита!");
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеРеквизитовЗначениеРеквизитаПриИзменении(Элемент)
	РеквизитыМодифицированы = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеРеквизитовЗначениеРеквизитаОчистка(Элемент, СтандартнаяОбработка)
	РеквизитыМодифицированы = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	фин_ПроцедурыРаботыСОбъектамиКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура СохранитьНовыеЗначенияРеквизитов(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Документ) Тогда
		Возврат;
	КонецЕсли;
	СохранитьРеквизиты();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// заполняет сведения о текущем и смежных этапах
//
&НаСервере
Процедура УстановитьСведения()
	Элементы.ПолеЗаметок.Видимость = Ложь;
	ИнформацияОДокументе = "Документу не назначен маршрут";
	Если НЕ ЗначениеЗаполнено(Объект.Документ) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Реквизит Из Метаданные.Обработки.усд_УтверждениеДокументов.Реквизиты Цикл
		Если Реквизит.Имя="Документ" Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			Объект[Реквизит.Имя]=Реквизит.Тип.ПривестиЗначение(Неопределено);
		Исключение
		КонецПопытки;
	КонецЦикла;
	Элементы.СледующийОтветственный.Доступность=Ложь;
	 Имя = Объект.Документ.Метаданные().Имя;
	 ЗапросПоВиду = Новый Запрос;
	 ЗапросПоВиду.УстановитьПараметр("Имя",Имя);
	 ЗапросПоВиду.Текст="ВЫБРАТЬ
	                    |	ВидыДокументов.Ссылка КАК ВидДокументов
	                    |ИЗ
	                    |	Справочник.фин_ВидыДокументов КАК ВидыДокументов
	                    |ГДЕ
	                    |	ВидыДокументов.ПрограммныйИдентификатор = &Имя";
	 Выборка = ЗапросПоВиду.Выполнить().Выбрать();
	 Если Выборка.Следующий() Тогда
		Если Имя = "усд_ВходящийДокумент" Тогда
			Объект.ВидДокумента = Объект.Документ.ПозицияКлассификатора; 
		Иначе	 
			Объект.ВидДокумента = Выборка.ВидДокументов; 
		КонецЕсли;
	 Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не используется в подсистеме документооборота!");
		Возврат;
	 КонецЕсли;
	 // получим маршрут
	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("Документ",Объект.Документ);
	 Запрос.Текст="ВЫБРАТЬ
	              |	НазначенияМаршрутов.Маршрут
	              |ИЗ
	              |	РегистрСведений.усд_НазначенияМаршрутов КАК НазначенияМаршрутов
	              |ГДЕ
	              |	НазначенияМаршрутов.Документ = &Документ";
	Выборка= Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.Маршрут = Выборка.Маршрут;
		ВыбиратьОтветственногоВозврата = (Объект.Маршрут.РежимВозвратаНаПересмотр=Перечисления.усд_РежимыВозвратаДокументовНаПересмотр.ПоВыборуИсполнителя);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для документа не назначен маршрут!");
		Возврат;
	КонецЕсли;
	ИнформацияОДокументе = "Документ на утверждении";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ",Объект.Документ);
	Запрос.Текст="ВЫБРАТЬ
	             |	ДвижениеДокументовПоМаршрутамСрезПоследних.Этап КАК ТекущийЭтап,
	             |	ДвижениеДокументовПоМаршрутамСрезПоследних.Состояние КАК ТекущееСостояние,
	             |	ДвижениеДокументовПоМаршрутамСрезПоследних.ОтветственноеЛицо КАК ТекущийОтветственный,
	             |	ДвижениеДокументовПоМаршрутамСрезПоследних.ПричинаВозврата КАК ПричинаВозвратаСПредыдущего,
	             |	ДвижениеДокументовПоМаршрутамСрезПоследних.Статус КАК Статус,
	             |	ДвижениеДокументовПоМаршрутамСрезПоследних.Период,
	             |	ДвижениеДокументовПоМаршрутамСрезПоследних.Приоритет,
	             |	ЕСТЬNULL(ЭтапыМаршрута.КонтролироватьСрокИсполнения, ЛОЖЬ) КАК КонтрольСрокаИсполнения,
	             |	ЭтапыМаршрута.ЕдиницыВремени КАК ЕдиницаИзмерения,
	             |	ЭтапыМаршрута.СрокИсполнения
	             |ИЗ
	             |	РегистрСведений.усд_АктивныеЭтапыРассмотренияДокументов.СрезПоследних(, Документ = &Документ) КАК ДвижениеДокументовПоМаршрутамСрезПоследних
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.усд_МаршрутыДвиженияДокументов.ЭтапыМаршрута КАК ЭтапыМаршрута
	             |		ПО ДвижениеДокументовПоМаршрутамСрезПоследних.Этап = ЭтапыМаршрута.Этап
	             |			И ДвижениеДокументовПоМаршрутамСрезПоследних.Маршрут = ЭтапыМаршрута.Ссылка
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	ДвижениеДокументовПоМаршрутамСрезПоследних.Этап,
	             |	NULL,
	             |	ДвижениеДокументовПоМаршрутамСрезПоследних.ОтветственноеЛицо,
	             |	ДвижениеДокументовПоМаршрутамСрезПоследних.ПричинаВозврата,
	             |	ДвижениеДокументовПоМаршрутамСрезПоследних.Статус,
	             |	ДвижениеДокументовПоМаршрутамСрезПоследних.Период,
	             |	ДвижениеДокументовПоМаршрутамСрезПоследних.Приоритет,
	             |	ЛОЖЬ,
	             |	NULL,
	             |	0
	             |ИЗ
	             |	РегистрСведений.усд_ДвижениеДокументовПоМаршрутам.СрезПоследних(, Документ = &Документ) КАК ДвижениеДокументовПоМаршрутамСрезПоследних";
	ВыборкаПоТекущемуЭтапу = Запрос.Выполнить().Выбрать();
	ПользовательВходитВГруппуОтветственности = Ложь;
	Если ВыборкаПоТекущемуЭтапу.Следующий() Тогда
		// заполняем характеристики текущего этапа
		ЗаполнитьЗначенияСвойств(Объект,ВыборкаПоТекущемуЭтапу);
		Объект.ДатаПоступления = ВыборкаПоТекущемуЭтапу.Период;
		ПользовательВходитВГруппуОтветственности = усд_ПроцедурыСогласованияДокументов.ПользовательВходитВГруппуОтветственности(ТекущийПользователь,Объект.ТекущийЭтап,Объект.Маршрут,Объект.ВидДокумента,Объект.Документ.Ссылка);

		Если Объект.Статус=Перечисления.усд_СтатусыДокументовНаЭтапах.Отклоненный Тогда
			ИнформацияОДокументе = "Документ отклонен";
		ИначеЕсли Объект.Статус=Перечисления.усд_СтатусыДокументовНаЭтапах.Согласованный Тогда
			ИнформацияОДокументе = "Документ согласован и утвержден";
		ИначеЕсли Объект.Статус=Перечисления.усд_СтатусыДокументовНаЭтапах.Возвращенный Тогда
			ИнформацияОДокументе = "Документ на пересмотре: "+Объект.ПричинаВозвратаСПредыдущего;
		КонецЕсли;
		// получаем сведения предыдущего этапа
		Запрос.УстановитьПараметр("Этап",Объект.ТекущийЭтап);
		Запрос.Текст="ВЫБРАТЬ
		             |	ДвижениеДокументовПоМаршрутам.Этап КАК ПредыдущийЭтап,
		             |	ДвижениеДокументовПоМаршрутам.ОтветственноеЛицо КАК ПредыдущийОтветственный
		             |ИЗ РегистрСведений.усд_ДвижениеДокументовПоМаршрутам.СрезПоследних(,Документ=&Документ) КАК ДвижениеДокументовПоМаршрутам";
		ВыборкаПоПредыдущемуЭтапу = Запрос.Выполнить().Выбрать();
		Если ВыборкаПоПредыдущемуЭтапу.Следующий() Тогда
			 ЗаполнитьЗначенияСвойств(Объект,ВыборкаПоПредыдущемуЭтапу);
		КонецЕсли;
		//определяем сведения для следующего этапа и этапа возврата
		Если НЕ Объект.ТекущийЭтап=ПредопределенноеЗначение("Справочник.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута") Тогда
			ХарактеристикиЭтапа = усд_ПроцедурыСогласованияДокументов.ПолучитьХарактеристикиЭтапа(Объект.ТекущийЭтап,Объект.Маршрут,Объект.ВидДокумента,усд_УправлениеСогласованиемДокументов.СоздатьСтруктуруПоДаннымДокумента(Объект.Документ));
			Если Объект.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Возвращенный И Объект.ТекущийЭтап = Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута Тогда
				ХарактеристикиЭтапа = Новый Структура("ЭтапВозврата,ОжидатьПодписиВсехОтветственных,КонтрольЗаполнения,СостояниеПриОтклонении",Неопределено,Ложь,Ложь,Неопределено);
			ИначеЕсли ХарактеристикиЭтапа = Неопределено Тогда
				Возврат;
			КонецЕсли;
			Объект.ПровестиАвтоматическиПриУтверждении			= ХарактеристикиЭтапа.ПровестиАвтоматическиПриУтверждении;
			Объект.ОжидатьПодписиВсех 							= ХарактеристикиЭтапа.ОжидатьПодписиВсехОтветственных;
			Объект.КонтрольЗаполнения 							= ХарактеристикиЭтапа.КонтрольЗаполнения;
			Объект.СостояниеПриОтклонении  						= ХарактеристикиЭтапа.СостояниеПриОтклонении;
			Элементы.ЗаполнениеРеквизитов.ТолькоПросмотр 	= НЕ Объект.КонтрольЗаполнения;
			Запрос.УстановитьПараметр("Маршрут",	Объект.Маршрут);
			Запрос.УстановитьПараметр("Этап",		Объект.ТекущийЭтап);
			Запрос.Текст = "ВЫБРАТЬ
			|	КонтролируемыеРеквизиты.Источник,
			|	КонтролируемыеРеквизиты.ПредставлениеРеквизитаИсточника,
			|	КонтролируемыеРеквизиты.РеквизитИсточника
			|ИЗ
			|	Справочник.усд_МаршрутыДвиженияДокументов.КонтролируемыеРеквизиты КАК КонтролируемыеРеквизиты
			|ГДЕ
			|	КонтролируемыеРеквизиты.Ссылка = &Маршрут
			|	И КонтролируемыеРеквизиты.Этап = &Этап";
			Объект.ЗаполнениеРеквизитов.Очистить();
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрокаЗаполнения = Объект.ЗаполнениеРеквизитов.Добавить();
				НоваяСтрокаЗаполнения.Реквизит 					= Выборка.РеквизитИсточника;
				НоваяСтрокаЗаполнения.ПредставлениеРеквизита 	= Выборка.ПредставлениеРеквизитаИсточника;
				Попытка
					НоваяСтрокаЗаполнения.ЗначениеРеквизита			= Объект.Документ[Выборка.РеквизитИсточника];
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка обработки реквизита """+Выборка.ПредставлениеРеквизитаИсточника+""", документа: "+Объект.Документ);
				КонецПопытки;
			КонецЦикла;
			Если ЗначениеЗаполнено(ХарактеристикиЭтапа.ЭтапВозврата) Тогда
				Объект.ЭтапВозврата 		= ХарактеристикиЭтапа.ЭтапВозврата;
				Объект.СостояниеВозврата 	= ХарактеристикиЭтапа.СостояниеПриВозврате;
				Запрос.УстановитьПараметр("Этап",Объект.ЭтапВозврата);
				Запрос.Текст="ВЫБРАТЬ
				             |	ДвижениеДокументовПоМаршрутам.ОтветственноеЛицо,
				             |	ДвижениеДокументовПоМаршрутам.Период КАК Период
				             |ИЗ
				             |	РегистрСведений.усд_ДвижениеДокументовПоМаршрутам КАК ДвижениеДокументовПоМаршрутам
				             |ГДЕ
				             |	ДвижениеДокументовПоМаршрутам.Документ = &Документ
				             |	И ДвижениеДокументовПоМаршрутам.Этап = &Этап
				             |
				             |УПОРЯДОЧИТЬ ПО
				             |	Период УБЫВ";
				ВыборкаДляВозврата = Запрос.Выполнить().Выбрать();
				Если ВыборкаДляВозврата.Следующий() Тогда
					Объект.ОтветственныйВозврата = ВыборкаДляВозврата.ОтветственноеЛицо;
				ИначеЕсли Объект.ЭтапВозврата =Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута Тогда
					Объект.ОтветственныйВозврата = Объект.Документ.Автор;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Объект.ТекущийЭтап = Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута Тогда
			мЭтап = усд_ПроцедурыСогласованияДокументов.ПолучитьПервыйЭтап(Объект.Маршрут,,Объект.Документ);
			Если мЭтап = Неопределено Тогда
				Возврат;
			КонецЕсли;
			Объект.СледующийЭтап = мЭтап.Этап;
			Объект.СледующееСостояние = мЭтап.СостояниеДокумента;
			ЗаполнитьСписокОтветственных();
			Объект.СледующийОтветственный = Справочники.Пользователи.ПустаяСсылка();
			Если СписокОтветственных.Количество() <>1 Тогда
				Элементы.СледующийОтветственный.Доступность 			= Истина;
			Иначе
				Элементы.СледующийОтветственный.Доступность 			= Ложь;
				Объект.СледующийОтветственный = СписокОтветственных[0].Значение;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ХарактеристикиЭтапа.СледующийЭтап) Тогда
			Объект.СледующийЭтап = ХарактеристикиЭтапа.СледующийЭтап;
			ХарактеристикиЭтапа = усд_ПроцедурыСогласованияДокументов.ПолучитьХарактеристикиЭтапа(Объект.СледующийЭтап,Объект.Маршрут,Объект.ВидДокумента,усд_УправлениеСогласованиемДокументов.СоздатьСтруктуруПоДаннымДокумента(Объект.Документ));
			Если ХарактеристикиЭтапа <> Неопределено Тогда
				Объект.СледующееСостояние = ХарактеристикиЭтапа.СостояниеДокумента;
			КонецЕсли;
			//определяем список ответственных
			ЗаполнитьСписокОтветственных();
			Объект.СледующийОтветственный =Справочники.Пользователи.ПустаяСсылка();
			Если СписокОтветственных.Количество() <>1 Тогда
				Элементы.СледующийОтветственный.Доступность 			= Истина;
			Иначе
				Элементы.СледующийОтветственный.Доступность 			= Ложь;
				Объект.СледующийОтветственный = СписокОтветственных[0].Значение;
			КонецЕсли;
		Иначе
			мЗапрос = Новый Запрос;
			мЗапрос.УстановитьПараметр("ДатаСреза",		Объект.Документ.Дата);
			мЗапрос.УстановитьПараметр("ВидДокументов",	Объект.ВидДокумента);
			мЗапрос.УстановитьПараметр("Маршрут",		Объект.Маршрут);
			мЗапрос.Текст="ВЫБРАТЬ
			              |	МаршрутыДвиженияДокументов.ФинальноеСостояние,
			              |	МаршрутыДвиженияДокументов.ФинальныйКонтрольРеквизитовДокумента
			              |ИЗ
			              |	Справочник.усд_МаршрутыДвиженияДокументов КАК МаршрутыДвиженияДокументов
			              |ГДЕ
			              |	МаршрутыДвиженияДокументов.Ссылка = &Маршрут";
			Выборка=мЗапрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(Объект,Выборка);
			КонецЕсли;
		КонецЕсли;
	Иначе
		// получаем сведения предыдущего этапа
		Запрос.УстановитьПараметр("Этап",Объект.ТекущийЭтап);
		Запрос.Текст="ВЫБРАТЬ
		             |	ДвижениеДокументовПоМаршрутам.Этап КАК ПредыдущийЭтап,
		             |	ДвижениеДокументовПоМаршрутам.ОтветственноеЛицо КАК ПредыдущийОтветственный,
		             |	ДвижениеДокументовПоМаршрутам.Статус
		             |ИЗ
		             |	РегистрСведений.усд_ДвижениеДокументовПоМаршрутам.СрезПоследних(, Документ = &Документ) КАК ДвижениеДокументовПоМаршрутам";
		ВыборкаПоПредыдущемуЭтапу = Запрос.Выполнить().Выбрать();
		Если ВыборкаПоПредыдущемуЭтапу.Следующий() Тогда
			 ЗаполнитьЗначенияСвойств(Объект,ВыборкаПоПредыдущемуЭтапу);
		КонецЕсли;
		Если Объект.Статус=Перечисления.усд_СтатусыДокументовНаЭтапах.Отклоненный Тогда
			ИнформацияОДокументе = "Документ отклонен";
		ИначеЕсли Объект.Статус=Перечисления.усд_СтатусыДокументовНаЭтапах.Согласованный Тогда
			ИнформацияОДокументе = "Документ согласован и утвержден";
		ИначеЕсли Объект.Статус=Перечисления.усд_СтатусыДокументовНаЭтапах.Возвращенный Тогда
			ИнформацияОДокументе = "Документ на пересмотре: "+Объект.ПричинаВозвратаСПредыдущего;
		КонецЕсли;
	КонецЕсли;
	
	// получаем заметки
    Элементы.ПолеЗаметок.Видимость = усд_ПроцедурыСогласованияДокументов.ВывестиЗаметкиПоДокументу(Объект.Документ.Ссылка,ПолеЗаметок,ТекущийПользователь)>0;	
КонецПроцедуры //УстановитьСведения

&НаСервере
Процедура ЗаполнитьСписокОтветственных()
	мСписокОтветственных = усд_УправлениеСогласованиемДокументов.ПолучитьСписокГруппыОтветственности(Объект.СледующийЭтап,Объект.Маршрут,Объект.ВидДокумента,Объект.Документ);
	СписокОтветственных.Очистить();
	Для Каждого ЭлементСписка Из мСписокОтветственных Цикл
		СписокОтветственных.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаУтвердить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если НЕ СохранитьРеквизиты() Тогда
			ПоказатьПредупреждение(, "Не удалось сохранить значения проверяемых реквизитов!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Документ) Тогда
		ПоказатьПредупреждение(, "Не определен документ!");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ТекущийЭтап) Тогда
		ПоказатьПредупреждение(, "Не определен текущий этап!");
		Возврат;
	КонецЕсли;
	Если ПользовательВходитВГруппуОтветственности Тогда
		РезультатВыполнения = ВыполнитьУтверждение();
		Если РезультатВыполнения<>"" Тогда
			ПоказатьПредупреждение(, РезультатВыполнения);
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, "Нет права подписи на текущем этапе!");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьУтверждение()
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	ТребуетсяПеремещениеНаСледующийЭтап = Истина;
	Если усд_ПроцедурыСогласованияДокументов.ИмеетсяПодписьПользователя(Объект.Документ,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап) Тогда
		ОтменитьТранзакцию();
		Возврат "Подпись текущего пользователя на данном этапе уже имеется!";
	КонецЕсли;
	Если Объект.ОжидатьПодписиВсех Тогда
		// проверить все ли подписи собраны
		Если НЕ усд_ПроцедурыСогласованияДокументов.СобраныВсеПодписиЭтапа(Объект.Документ,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап) Тогда
			ТребуетсяПеремещениеНаСледующийЭтап = Ложь;
		КонецЕсли;
	КонецЕсли;
	// корректировка реквизитов
	Если ТребуетсяПеремещениеНаСледующийЭтап Тогда
		ЭтапыПрименяемыхКорректировокРеквизитов = Новый Массив;
		Если Объект.Маршрут.ПорядокЗаполненияКонтролируемыхРеквизитов=Перечисления.усд_ПорядкиЗаполненияКонтролируемыхРеквизитов.УстанавливатьЗначенияЭтапаПриЗавершенииЭтапа Тогда
			ЭтапыПрименяемыхКорректировокРеквизитов.Добавить(Объект.ТекущийЭтап);
		ИначеЕсли ЗначениеЗаполнено(Объект.СледующийЭтап) Тогда
			ЭтапыПрименяемыхКорректировокРеквизитов.Добавить(Объект.СледующийЭтап);
		КонецЕсли;
		Если Объект.ФинальныйКонтрольРеквизитовДокумента И Объект.СледующийЭтап.Пустая() Тогда
			ЭтапыПрименяемыхКорректировокРеквизитов.Добавить(Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ПустаяСсылка());
		КонецЕсли;
		Если усд_УправлениеСогласованиемДокументов.ТребуетсяКорректироватьРеквизитыДокумента(ЭтапыПрименяемыхКорректировокРеквизитов,Объект.Маршрут) Тогда
			ДокументОбъект = Объект.Документ.ПолучитьОбъект();
			Если Объект.Маршрут.ПорядокЗаполненияКонтролируемыхРеквизитов=Перечисления.усд_ПорядкиЗаполненияКонтролируемыхРеквизитов.УстанавливатьЗначенияЭтапаПриЗавершенииЭтапа Тогда
				усд_УправлениеСогласованиемДокументов.КорректироватьРеквизитыДокумента(ДокументОбъект,Объект.ТекущийЭтап,Объект.Маршрут);
			ИначеЕсли ЗначениеЗаполнено(Объект.СледующийЭтап) Тогда
				усд_УправлениеСогласованиемДокументов.КорректироватьРеквизитыДокумента(ДокументОбъект,Объект.СледующийЭтап,Объект.Маршрут);
			КонецЕсли;
			Если Объект.ФинальныйКонтрольРеквизитовДокумента И Объект.СледующийЭтап.Пустая() Тогда
				усд_УправлениеСогласованиемДокументов.КорректироватьРеквизитыДокумента(ДокументОбъект,Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ПустаяСсылка(),Объект.Маршрут);
			КонецЕсли;
			Попытка
				ДокументОбъект.Записать(?(Объект.ПровестиАвтоматическиПриУтверждении,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
			Исключение
				ОтменитьТранзакцию();
				Возврат "Не удалось автоматически откорректировать реквизиты"+?(Объект.ПровестиАвтоматическиПриУтверждении," и выполнить проведение","")+" документа по причине:
				|	"+ОписаниеОшибки();
			КонецПопытки;
		ИначеЕсли Объект.ПровестиАвтоматическиПриУтверждении Тогда
			ДокументОбъект = Объект.Документ.ПолучитьОбъект();
			Попытка
				ДокументОбъект.Записать(?(Объект.ПровестиАвтоматическиПриУтверждении,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
			Исключение
				ОтменитьТранзакцию();
				Возврат "Не удалось выполнить проведение документа по причине:
				|	"+ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	СледующийЭтап = Объект.СледующийЭтап;
	СледующийОтветственный = Объект.СледующийОтветственный;
	Если Объект.Статус=Перечисления.усд_СтатусыДокументовНаЭтапах.Возвращенный И (Объект.Маршрут.ПравилоПродолженияМаршрутаПриПересмотре=Перечисления.усд_ПравилаПродолженияМаршрутаПриПересмотре.ОтправитьРецензенту ИЛИ Объект.Маршрут.ПравилоПродолженияМаршрутаПриПересмотре=Перечисления.усд_ПравилаПродолженияМаршрутаПриПересмотре.ОтправитьНаЭтапВозврата) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	усд_ДвижениеДокументовПоМаршрутамСрезПоследних.Этап,
			|	усд_ДвижениеДокументовПоМаршрутамСрезПоследних.ОтветственноеЛицо
			|ИЗ
			|	РегистрСведений.усд_ДвижениеДокументовПоМаршрутам.СрезПоследних(, Документ = &Документ) КАК усд_ДвижениеДокументовПоМаршрутамСрезПоследних";

		Запрос.УстановитьПараметр("Документ", Объект.Документ);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СледующийЭтап = ВыборкаДетальныеЗаписи.Этап;
			Если Объект.Маршрут.ПравилоПродолженияМаршрутаПриПересмотре=Перечисления.усд_ПравилаПродолженияМаршрутаПриПересмотре.ОтправитьРецензенту Тогда
				СледующийОтветственный = Объект.СледующийОтветственный;
			Иначе
				СледующийОтветственный = Справочники.Пользователи.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	// добавление подписи
	Если (СледующийЭтап=Объект.ТекущийЭтап) ИЛИ (НЕ усд_ПроцедурыСогласованияДокументов.ДобавитьПодпись(Объект.Документ,?(Объект.СледующийЭтап.Пустая() И ТребуетсяПеремещениеНаСледующийЭтап,Перечисления.усд_СтатусыДокументовНаЭтапах.Согласованный,Перечисления.усд_СтатусыДокументовНаЭтапах.Активный),,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап,Объект.Приоритет,Объект.ДатаПоступления,Объект.КонтрольСрокаИсполнения,Объект.ЕдиницаИзмерения,Объект.СрокИсполнения)) Тогда
		ОтменитьТранзакцию();
		Возврат "Не удалось установить подпись, продолжение невозможно!";
	КонецЕсли;
	// закрытие задач
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ФормироватьЗадачиПоИсполнителямСогласования") Тогда
		усд_ПроцедурыСогласованияДокументов.ЗакрытьЗадачи(Объект.Документ,ТребуетсяПеремещениеНаСледующийЭтап,ТребуетсяПеремещениеНаСледующийЭтап И НЕ ЗначениеЗаполнено(Объект.СледующийЭтап),ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап);	
	КонецЕсли;
	// отправление на новый этап
	Если ТребуетсяПеремещениеНаСледующийЭтап Тогда
		Если ЗначениеЗаполнено(СледующийЭтап) И СледующийЭтап<>Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута И НЕ ЗначениеЗаполнено(СледующийОтветственный) И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ИспользоватьДиспетчеризациюЗадач") Тогда
			СледующийОтветственный = усд_ПроцедурыСогласованияДокументов.ОпределениеИсполнителяПоСистемеДиспетчеризации(Объект.Маршрут,СледующийЭтап,Объект.Документ.Автор,Объект.Документ.Ссылка);
		КонецЕсли;
		Если НЕ усд_ПроцедурыСогласованияДокументов.ИзменитьТекущийЭтап(Объект.Документ,СледующийЭтап,?(ЗначениеЗаполнено(СледующийЭтап),Перечисления.усд_СтатусыДокументовНаЭтапах.Активный,Перечисления.усд_СтатусыДокументовНаЭтапах.Согласованный),?(ЗначениеЗаполнено(СледующийЭтап),Объект.СледующееСостояние,Объект.Маршрут.ФинальноеСостояние),?(ЗначениеЗаполнено(СледующийЭтап),СледующийОтветственный,?(ЗначениеЗаполнено(Объект.Документ.Ответственный),Объект.Документ.Ответственный,Объект.Документ.Автор)),,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап,Объект.Приоритет) Тогда
			ОтменитьТранзакцию();
			Возврат "Не удалось изменить активный этап, продолжение невозможно!";
		КонецЕсли;
	КонецЕсли;
	// создание задач
	Если ТребуетсяПеремещениеНаСледующийЭтап Тогда
		Если СледующийЭтап.Пустая() Тогда
			Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ФормироватьЗадачиОтветственнымПриЗавершенииМаршрута") Тогда
				усд_ПроцедурыСогласованияДокументов.ФормироватьЗадачуОтветственномуПоДокументу(Объект.Документ,Ложь,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут);
			КонецЕсли;		
			Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ФормироватьЗадачиАвторамПриЗавершенииМаршрута") Тогда
				усд_ПроцедурыСогласованияДокументов.ФормироватьЗадачуАвторуДокумента(Объект.Документ,Ложь,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут);
			КонецЕсли;		
		Иначе
			Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ФормироватьЗадачиПоИсполнителямСогласования") Тогда
				усд_ПроцедурыСогласованияДокументов.ФормироватьЗадачу(Объект.Документ,СледующийОтветственный,СледующийЭтап,Перечисления.усд_СтатусыДокументовНаЭтапах.Активный,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут);
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	УстановитьСведения();
	Возврат "";
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаВернуть(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если НЕ СохранитьРеквизиты() Тогда
			ПоказатьПредупреждение(, "Не удалось сохранить значения проверяемых реквизитов!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Документ) Тогда
		ПоказатьПредупреждение(, "Не определен документ!");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ТекущийЭтап) Тогда
		ПоказатьПредупреждение(, "Не определен текущий этап!");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ЭтапВозврата) Тогда
		ПоказатьПредупреждение(, "Не определен этап возврата!");
		Возврат;
	КонецЕсли;
	Если ПользовательВходитВГруппуОтветственности Тогда		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВвестиСтроку", ЭтотОбъект);		
		ПоказатьВводСтроки(Оповещение, Объект.ПричинаВозврата, "Укажите причину возврата:");
	Иначе
		ПоказатьПредупреждение(, "Нет права подписи на текущем этапе!");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВвестиСтроку(ВведенаяСтрока, ДополнительныеПараметры) Экспорт
	
	Если ВведенаяСтрока = Неопределено Тогда
		Возврат;
	Иначе 
		Объект.ПричинаВозврата = ВведенаяСтрока;
	КонецЕсли;
	ЗначениеВыбора = Неопределено;
	мЭтапВозврата = Неопределено;
	Если ВыбиратьОтветственногоВозврата Тогда
		СписокВариантов = Новый СписокЗначений;
		СписокВариантов.Добавить(ПредопределенноеЗначение("Перечисление.усд_РежимыВозвратаДокументовНаПересмотр.АвторДокумента"));
		СписокВариантов.Добавить(ПредопределенноеЗначение("Перечисление.усд_РежимыВозвратаДокументовНаПересмотр.ПредыдущийСогласующий"));
		СписокВариантов.Добавить(ПредопределенноеЗначение("Перечисление.усд_РежимыВозвратаДокументовНаПересмотр.ПоВыборуИсполнителя"));		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВыбораЭлементаПорядок", ЭтотОбъект, Новый Структура("мЭтапВозврата", мЭтапВозврата));
		СписокВариантов.ПоказатьВыборЭлемента(Оповещение, "Укажите порядок определения получателя", СписокВариантов[0]);
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = ВыполнитьВозврат(ЗначениеВыбора,мЭтапВозврата);
	Если РезультатВыполнения<>"" Тогда
		ПоказатьПредупреждение(, РезультатВыполнения);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВыбораЭлементаПорядок(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если РезультатВыбора.Значение = ПредопределенноеЗначение("Перечисление.усд_РежимыВозвратаДокументовНаПересмотр.ПоВыборуИсполнителя") Тогда
		СписокЭтапов = СписокПредыдущихЭтапов(Объект.Документ,Объект.ТекущийЭтап);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВыбораЭлементаЭтап", ЭтотОбъект,  Новый Структура("мЭтапВозврата", ДополнительныеПараметры.мЭтапВозврата));
		СписокЭтапов.ПоказатьВыборЭлемента(Оповещение, "Укажите этап для возврата", СписокЭтапов[0]);
		Возврат;
	Иначе
		ЗначениеВыбора = РезультатВыбора.Значение;
	КонецЕсли;
	
	РезультатВыполнения = ВыполнитьВозврат(ЗначениеВыбора, ДополнительныеПараметры.мЭтапВозврата);
	Если РезультатВыполнения<>"" Тогда
		ПоказатьПредупреждение(, РезультатВыполнения);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВыбораЭлементаЭтап(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.мЭтапВозврата = РезультатВыбора.Значение;
	СписокПользователей = СписокПредыдущихОтветственных(Объект.Документ, РезультатВыбора.Значение);	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВыбораЭлементаПолучатель", ЭтотОбъект, Новый Структура("мЭтапВозврата", ДополнительныеПараметры.мЭтапВозврата));
	СписокПользователей.ПоказатьВыборЭлемента(Оповещение, "Укажите получателя", СписокПользователей[0]);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВыбораЭлементаПолучатель(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗначениеВыбора = РезультатВыбора.Значение;
	
	РезультатВыполнения = ВыполнитьВозврат(ЗначениеВыбора, ДополнительныеПараметры.мЭтапВозврата);
	Если РезультатВыполнения<>"" Тогда
		ПоказатьПредупреждение(, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Функция СписокПредыдущихЭтапов(Документ, Этап)
	СписокПредыдущихЭтапов = Новый СписокЗначений;
	ПредыдущийЭтап = усд_ПроцедурыСогласованияДокументов.ОпределитьПредыдущийЭтап(Документ,Этап);
	Пока ЗначениеЗаполнено(ПредыдущийЭтап) И ПредыдущийЭтап<>Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута Цикл
		Если СписокПредыдущихЭтапов.НайтиПоЗначению(ПредыдущийЭтап)<>Неопределено Тогда
			Прервать;
		КонецЕсли;
		СписокПредыдущихЭтапов.Добавить(ПредыдущийЭтап);
		ПредыдущийЭтап = усд_ПроцедурыСогласованияДокументов.ОпределитьПредыдущийЭтап(Документ,ПредыдущийЭтап);
	КонецЦикла;
	Возврат СписокПредыдущихЭтапов;
КонецФункции

&НаСервереБезКонтекста
Функция СписокПредыдущихОтветственных(Документ, Этап)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	усд_ДвижениеДокументовПоМаршрутам.ОтветственноеЛицо,
		|	усд_ДвижениеДокументовПоМаршрутам.Этап
		|ИЗ
		|	РегистрСведений.усд_ДвижениеДокументовПоМаршрутам КАК усд_ДвижениеДокументовПоМаршрутам
		|ГДЕ
		|	усд_ДвижениеДокументовПоМаршрутам.Документ = &Документ
		|	И усд_ДвижениеДокументовПоМаршрутам.Этап = &Этап
		|
		|СГРУППИРОВАТЬ ПО
		|	усд_ДвижениеДокументовПоМаршрутам.ОтветственноеЛицо,
		|	усд_ДвижениеДокументовПоМаршрутам.Этап";

	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Этап", Этап);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
    СписокПользователей = Новый СписокЗначений;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокПользователей.Добавить(ВыборкаДетальныеЗаписи.ОтветственноеЛицо);
	КонецЦикла;

	Возврат СписокПользователей;
КонецФункции

&НаСервере
Функция ВыполнитьВозврат(Получатель, мЭтапВозврата)
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	//Если усд_ПроцедурыСогласованияДокументов.ИмеетсяПодписьПользователя(Объект.Документ,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап) Тогда
	//	ОтменитьТранзакцию();
	//	Возврат "Подпись текущего пользователя на данном этапе уже имеется!";
	//КонецЕсли;
	// добавление подписи
	Если НЕ усд_ПроцедурыСогласованияДокументов.ДобавитьПодпись(Объект.Документ,Перечисления.усд_СтатусыДокументовНаЭтапах.Возвращенный,Объект.ПричинаВозврата,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап,Объект.Приоритет,Объект.ДатаПоступления,Объект.КонтрольСрокаИсполнения,Объект.ЕдиницаИзмерения,объект.СрокИсполнения) Тогда
		ОтменитьТранзакцию();
		Возврат "Не удалось установить подпись, продолжение невозможно!";
	КонецЕсли;
	// закрытие задач
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ФормироватьЗадачиПоИсполнителямСогласования") Тогда
		усд_ПроцедурыСогласованияДокументов.ЗакрытьЗадачи(Объект.Документ,Истина,Ложь,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап);	
	КонецЕсли;
	// отправление на новый этап
	Если Получатель = Неопределено И ЗначениеЗаполнено(Объект.Маршрут.РежимВозвратаНаПересмотр) Тогда
		Получатель = Объект.Маршрут.РежимВозвратаНаПересмотр;
	КонецЕсли;
	ОтветственныйВозврата = ?(Получатель=Неопределено ИЛИ Получатель=Перечисления.усд_РежимыВозвратаДокументовНаПересмотр.ПредыдущийСогласующий,Объект.ОтветственныйВозврата,?(Получатель=Перечисления.усд_РежимыВозвратаДокументовНаПересмотр.АвторДокумента,Объект.Документ.Автор,Получатель));
	ЭтапВозврата = ?(мЭтапВозврата = Неопределено,?(Получатель=Перечисления.усд_РежимыВозвратаДокументовНаПересмотр.ПредыдущийСогласующий,Объект.ПредыдущийЭтап,Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута),мЭтапВозврата);
	Если НЕ усд_ПроцедурыСогласованияДокументов.ИзменитьТекущийЭтап(Объект.Документ,ЭтапВозврата,Перечисления.усд_СтатусыДокументовНаЭтапах.Возвращенный,Объект.СостояниеВозврата,ОтветственныйВозврата,Объект.ПричинаВозврата,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап,Объект.Приоритет) Тогда
		ОтменитьТранзакцию();
		Возврат "Не удалось изменить активный этап, продолжение невозможно!";
	КонецЕсли;
	// создание задач
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ФормироватьЗадачиПоИсполнителямСогласования") Тогда
		усд_ПроцедурыСогласованияДокументов.ФормироватьЗадачу(Объект.Документ,ОтветственныйВозврата,ЭтапВозврата,Перечисления.усд_СтатусыДокументовНаЭтапах.Возвращенный,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут);
	КонецЕсли;		
	ЗафиксироватьТранзакцию();
	УстановитьСведения();
	Возврат "";
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаОтклонить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если НЕ СохранитьРеквизиты() Тогда
			ПоказатьПредупреждение(, "Не удалось сохранить значения проверяемых реквизитов!");
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.Документ) Тогда
		ПоказатьПредупреждение(, "Не определен документ!");
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ТекущийЭтап) Тогда
		// запись нового этапа
		Если ПользовательВходитВГруппуОтветственности Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВвестиСтрокуПричиныОтклонения", ЭтотОбъект);		
			ПоказатьВводСтроки(Оповещение, Объект.ПричинаВозврата, "Укажите причину отклонения:");
			Возврат;			
		Иначе
			ПоказатьПредупреждение(, "Нет права подписи на текущем этапе!");
			Возврат;
		КонецЕсли;
	Иначе	
		ПоказатьПредупреждение(, "Не определен текущий этап!");
		Возврат;
	КонецЕсли;
	УстановитьСведения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВвестиСтрокуПричиныОтклонения(ВведенаяСтрока, ДополнительныеПараметры) Экспорт
	
	Если ВведенаяСтрока = Неопределено Тогда
		Возврат;
	Иначе
		Объект.ПричинаВозврата = ВведенаяСтрока;
	КонецЕсли;
	
	РезультатВыполнения = ВыполнитьОтклонение();
	Если РезультатВыполнения<>"" Тогда
		ПоказатьПредупреждение(, РезультатВыполнения);
	КонецЕсли;
	
	УстановитьСведения();
			
КонецПроцедуры

&НаСервере
Функция ВыполнитьОтклонение()
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	// добавление подписи
	Если НЕ усд_ПроцедурыСогласованияДокументов.ДобавитьПодпись(Объект.Документ,Перечисления.усд_СтатусыДокументовНаЭтапах.Отклоненный,Объект.ПричинаВозврата,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап,Объект.Приоритет,Объект.ДатаПоступления,Объект.КонтрольСрокаИсполнения,Объект.ЕдиницаИзмерения,объект.СрокИсполнения) Тогда
		ОтменитьТранзакцию();
		Возврат "Не удалось установить подпись, продолжение невозможно!";
	КонецЕсли;
	// закрытие задач
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ФормироватьЗадачиПоИсполнителямСогласования") Тогда
		усд_ПроцедурыСогласованияДокументов.ЗакрытьЗадачи(Объект.Документ,Истина,Истина,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап);	
	КонецЕсли;
	// отправление на новый этап
	Если НЕ усд_ПроцедурыСогласованияДокументов.ИзменитьТекущийЭтап(Объект.Документ,Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ПустаяСсылка(),Перечисления.усд_СтатусыДокументовНаЭтапах.Отклоненный,Объект.СостояниеВозврата,Объект.ОтветственныйВозврата,,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап,Объект.Приоритет) Тогда
		ОтменитьТранзакцию();
		Возврат "Не удалось изменить активный этап, продолжение невозможно!";
	КонецЕсли;
	// создание задач
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ФормироватьЗадачиОтветственнымПриЗавершенииМаршрута") Тогда
		усд_ПроцедурыСогласованияДокументов.ФормироватьЗадачуОтветственномуПоДокументу(Объект.Документ,Истина,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут);
	КонецЕсли;		
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ФормироватьЗадачиАвторамПриЗавершенииМаршрута") Тогда
		усд_ПроцедурыСогласованияДокументов.ФормироватьЗадачуАвторуДокумента(Объект.Документ,Истина,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут);
	КонецЕсли;		
	
	ЗафиксироватьТранзакцию();
	УстановитьСведения();
	Возврат "";
КонецФункции

&НаСервере
Функция ЕстьПраваПерадресации()
	Возврат РольДоступна("ПолныеПрава") ИЛИ РольДоступна("усд_УправлениеСогласованиемИУтверждениемДокументов") ИЛИ РольДоступна("усд_ПравоПереадресацииЗадачСогласования");	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеФормыИнформации(ТабличныйДокумент)
    Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет") ;
	Макет.Параметры.Заполнить(Объект);
	Если Объект.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Возвращенный Тогда
		Макет.Параметры.ВозвратОписание = "Возвращен. Описание причины: "+Объект.ПричинаВозвратаСПредыдущего;
	КонецЕсли;
	Если Объект.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Отклоненный Тогда
		Макет.Параметры.ВозвратОписание = "Отклонен. Описание причины: "+Объект.ПричинаВозвратаСПредыдущего;
	КонецЕсли;
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.Защита = Истина;
	ТабличныйДокумент.Вывести(Макет);
КонецПроцедуры

&НаСервере
Функция ОписаниеТипаРеквизита(Реквизит)
	Возврат Объект.Документ.Метаданные().Реквизиты.Найти(Реквизит).Тип
КонецФункции

&НаСервере
Функция СохранитьРеквизиты()
	Если усд_ПроцедурыСогласованияДокументов.ПользовательВходитВГруппуОтветственности(ТекущийПользователь,Объект.ТекущийЭтап,Объект.Маршрут,Объект.ВидДокумента,усд_УправлениеСогласованиемДокументов.СоздатьСтруктуруПоДаннымДокумента(Объект.Документ)) Тогда
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_РазрешитьРедактированиеСогласуемыхДокументовДругихПользователей") Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		ДокументОбъект = Объект.Документ.ПолучитьОбъект();
		НачатьТранзакцию();
		Для Каждого СтрокаЗаполнения Из Объект.ЗаполнениеРеквизитов Цикл
			 ДокументОбъект[СтрокаЗаполнения.Реквизит]=СтрокаЗаполнения.ЗначениеРеквизита;
		КонецЦикла;
		Попытка
			 ДокументОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при записи документа: "+ОписаниеОшибки());
			ОтменитьТранзакцию();
			УстановитьСведения();
			Возврат Ложь;
		КонецПопытки;
		ЗафиксироватьТранзакцию();
		РеквизитыМодифицированы = Ложь;
		//УстановитьСведения();
		Возврат Истина;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет права подписи на текущем этапе!");
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ОписаниеТипаВыбора()
    Список = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	усд_МаршрутыДвиженияДокументов.Владелец
		|ИЗ
		|	Справочник.усд_МаршрутыДвиженияДокументов КАК усд_МаршрутыДвиженияДокументов";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Список.Добавить(Тип("ДокументСсылка."+ВыборкаДетальныеЗаписи.Владелец.ПрограммныйИдентификатор));
	КонецЦикла;

	Возврат  Новый ОписаниеТипов(Список);
	
КонецФункции

