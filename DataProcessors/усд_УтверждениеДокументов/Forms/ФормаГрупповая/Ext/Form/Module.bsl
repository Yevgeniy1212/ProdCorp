////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь");
	Если НЕ Параметры.Свойство("ПереченьДокументов") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	НадписьПереченьДокументов = "Перечень документов";
	НадписьУтверждениеДокументов = "Утверждение группы документов";
	Объект.КоличествоВерсий = 1;
	Объект.КоличествоПрикрепленныхФайлов = 0;
	МассивТипов = Новый Массив;
	ИсточникТипа = Метаданные.ПодпискиНаСобытия.усд_ПриЗаписиДокументаРегистрацияВСистемеСогласования.Источник;
	Элементы.ДекорацияВерсии.Видимость=РольДоступна("ПолныеПрава") ИЛИ РольДоступна("усд_УправлениеСогласованиемИУтверждениемДокументов") ИЛИ РольДоступна("ЧтениеВерсийОбъектов");

	Для Каждого ДокументМетаданные Из Метаданные.Документы Цикл
		Если ИсточникТипа.СодержитТип(Тип("ДокументОбъект."+ДокументМетаданные.Имя)) Тогда
			МассивТипов.Добавить(Тип("ДокументСсылка."+ДокументМетаданные.Имя));
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаПеречня Из Параметры.ПереченьДокументов Цикл
		НоваяСтрока = СогласуемыеДокументы.Добавить();
		НоваяСтрока.Документ = СтрокаПеречня;
	КонецЦикла;
	УстановитьСведения();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДекорацияУтвердитьНажатие(Элемент)
	
	Если РеквизитыМодифицированы Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаУтвердить", ЭтотОбъект);		
		ПоказатьВопрос(Оповещение, "Значения проверяемых реквизитов изменены. Сохранить?", РежимДиалогаВопрос.ДаНет);
	Иначе 
		ПослеЗакрытияВопросаУтвердить(КодВозвратаДиалога.Нет, Неопределено);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВернутьНажатие(Элемент)	
	
	Если РеквизитыМодифицированы Тогда		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаВернуть", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Значения проверяемых реквизитов изменены. Сохранить?", РежимДиалогаВопрос.ДаНет);
	Иначе 
		ПослеЗакрытияВопросаВернуть(КодВозвратаДиалога.Нет, Неопределено);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПереадресоватьНажатие(Элемент)
	Если ПользовательВходитВГруппуОтветственности И ЕстьПраваПерадресации() Тогда
		ПереченьДокументов = Новый Массив;
		Для Каждого Документ Из СогласуемыеДокументы Цикл
			ПереченьДокументов.Добавить(Новый Структура("Документ,ВидДокументов,Маршрут,Этап,Исполнитель",Документ.Документ,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап,ТекущийПользователь));
		КонецЦикла;
		ОткрытьФорму("Обработка.усд_ПереадресацияЗадачСогласования.Форма",Новый Структура("ПереченьДокументов",ПереченьДокументов));
		Закрыть();
	Иначе
		ПоказатьПредупреждение(, "Нет права переадресации на текущем этапе!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВерсииНажатие(Элемент)
	Если Элементы.СогласуемыеДокументы.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	СписокВерсий = ОткрытьФорму("РегистрСведений.ВерсииОбъектов.Форма.ВыборХранимыхВерсий",
								Новый Структура("Ссылка", Элементы.СогласуемыеДокументы.ТекущиеДанные.Документ),
								ЭтотОбъект,
								УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартаНажатие(Элемент)
 	Если Элементы.СогласуемыеДокументы.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
   ОткрытьФорму("Отчет.усд_КартаСостоянияДокумента.Форма",Новый Структура("Документ,СформироватьПриОткрытии",Элементы.СогласуемыеДокументы.ТекущиеДанные.Документ,Истина),ЭтотОбъект,Элементы.СогласуемыеДокументы.ТекущиеДанные.Документ);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСведенияНажатие(Элемент)
 	Если Элементы.СогласуемыеДокументы.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ФормаОтчета = ПолучитьФорму("Обработка.усд_УтверждениеДокументов.Форма.ФормаИнформации",,ЭтотОбъект,Элементы.СогласуемыеДокументы.ТекущиеДанные.Документ);
	ЗаполнитьДанныеФормыИнформации(ФормаОтчета.ТабличныйДокумент);
	ФормаОтчета.Заголовок = "Форма отчетов: "+Строка(Элементы.СогласуемыеДокументы.ТекущиеДанные.Документ);
	Если НЕ ФормаОтчета.Открыта() Тогда
		ФормаОтчета.Открыть();
	КонецЕсли;
	ФормаОтчета.Активизировать();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбновитьНажатие(Элемент)
	УстановитьСведения();
	РеквизитыМодифицированы = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтклонитьНажатие(Элемент)
	
	Если РеквизитыМодифицированы Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОтклонить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Значения проверяемых реквизитов изменены. Сохранить?",РежимДиалогаВопрос.ДаНет);		
	Иначе 
		ПослеЗакрытияВопросаОтклонить(КодВозвратаДиалога.Нет, Неопределено);
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнениеРеквизитов(Команда)
	
	ИмяКолонки = Сред(Команда.Имя,СтрДлина("ЗаполнениеРеквизитов")+1);
	ТипЗначения = ПолучитьТип(ИмяКолонки);
	ЗначениеРезультат = Неопределено;
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВводаЗначения", ЭтотОбъект, Новый Структура("ИмяКолонки", ИмяКолонки));
	ПоказатьВводЗначения(Оповещение, ЗначениеРезультат,"Укажите значение реквизитов """+Объект.ЗаполнениеРеквизитов.НайтиСтроки(Новый Структура("Реквизит",ИмяКолонки))[0].ПредставлениеРеквизита+"""",ТипЗначения);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	Для Каждого СтрокаДокумент Из СогласуемыеДокументы Цикл
		СтрокаДокумент.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	Для Каждого СтрокаДокумент Из СогласуемыеДокументы Цикл
		СтрокаДокумент.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьФлажки(Команда)
	Для Каждого СтрокаДокумент Из СогласуемыеДокументы Цикл
		СтрокаДокумент.Пометка = НЕ СтрокаДокумент.Пометка;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДокумента(Команда)
	
	Если Элементы.СогласуемыеДокументы.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, Элементы.СогласуемыеДокументы.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНовыеЗначенияРеквизитов(Команда)
	СохранитьРеквизиты();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// заполняет сведения о текущем и смежных этапах
//
&НаСервере
Процедура УстановитьСведения()
	ИнформацияОДокументе = "Документу не назначен маршрут";
	Объект.Документ = СогласуемыеДокументы[0].Документ;
	Если НЕ ЗначениеЗаполнено(Объект.Документ) Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Реквизит Из Метаданные.Обработки.усд_УтверждениеДокументов.Реквизиты Цикл
		Если Реквизит.Имя="Документ" Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			Объект[Реквизит.Имя]=Реквизит.Тип.ПривестиЗначение(Неопределено);
		Исключение
		КонецПопытки;
	КонецЦикла;
	Элементы.СледующийОтветственный.Доступность=Ложь;
	 Имя = Объект.Документ.Метаданные().Имя;
	 ЗапросПоВиду = Новый Запрос;
	 ЗапросПоВиду.УстановитьПараметр("Имя",Имя);
	 ЗапросПоВиду.Текст="ВЫБРАТЬ
	                    |	ВидыДокументов.Ссылка КАК ВидДокументов
	                    |ИЗ
	                    |	Справочник.фин_ВидыДокументов КАК ВидыДокументов
	                    |ГДЕ
	                    |	ВидыДокументов.ПрограммныйИдентификатор = &Имя";
	 Выборка = ЗапросПоВиду.Выполнить().Выбрать();
	 Если Выборка.Следующий() Тогда
		Если Имя = "усд_ВходящийДокумент" Тогда
			Объект.ВидДокумента = Объект.Документ.ПозицияКлассификатора; 
		Иначе	 
			Объект.ВидДокумента = Выборка.ВидДокументов; 
		КонецЕсли;
	 Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не используется в подсистеме документооборота!");		
		Возврат;
	 КонецЕсли;
	 // получим маршрут
	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("Документ",Объект.Документ);
	 Запрос.Текст="ВЫБРАТЬ
	              |	НазначенияМаршрутов.Маршрут
	              |ИЗ
	              |	РегистрСведений.усд_НазначенияМаршрутов КАК НазначенияМаршрутов
	              |ГДЕ
	              |	НазначенияМаршрутов.Документ = &Документ";
	Выборка= Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.Маршрут = Выборка.Маршрут;
		ВыбиратьОтветственногоВозврата = (Объект.Маршрут.РежимВозвратаНаПересмотр=Перечисления.усд_РежимыВозвратаДокументовНаПересмотр.ПоВыборуИсполнителя);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для документа не назначен маршрут!");
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документы",СогласуемыеДокументы.Выгрузить().ВыгрузитьКолонку("Документ"));
	Запрос.Текст="ВЫБРАТЬ
	             |	АктивныйЭтап.Этап КАК ТекущийЭтап,
	             |	АктивныйЭтап.Состояние КАК ТекущееСостояние,
	             |	АктивныйЭтап.ОтветственноеЛицо КАК ТекущийОтветственный,
	             |	АктивныйЭтап.ПричинаВозврата КАК ПричинаВозвратаСПредыдущего,
	             |	АктивныйЭтап.Статус КАК Статус,
	             |	АктивныйЭтап.Период,
	             |	АктивныйЭтап.Приоритет,
	             |	АктивныйЭтап.Документ,
	             |	ПредыдущийЭтап.Этап КАК ПредыдущийЭтап,
	             |	ПредыдущийЭтап.ОтветственноеЛицо КАК ПредыдущийОтветственный,
	             |	ЕСТЬNULL(ЭтапыМаршрута.КонтролироватьСрокИсполнения,ЛОЖЬ) КАК КонтрольСрокаИсполнения,
	             |	ЭтапыМаршрута.ЕдиницыВремени КАК ЕдиницаИзмерения,
	             |	ЭтапыМаршрута.СрокИсполнения
	             |ИЗ
	             |	РегистрСведений.усд_АктивныеЭтапыРассмотренияДокументов.СрезПоследних(, Документ В (&Документы)) КАК АктивныйЭтап
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.усд_ДвижениеДокументовПоМаршрутам.СрезПоследних(, Документ В (&Документы)) КАК ПредыдущийЭтап
	             |		ПО АктивныйЭтап.Документ = ПредыдущийЭтап.Документ
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.усд_МаршрутыДвиженияДокументов.ЭтапыМаршрута КАК ЭтапыМаршрута
	             |		ПО АктивныйЭтап.Этап = ЭтапыМаршрута.Этап
	             |			И АктивныйЭтап.Маршрут = ЭтапыМаршрута.Ссылка";
	ВыборкаПоТекущемуЭтапу = Запрос.Выполнить().Выбрать();
	ПользовательВходитВГруппуОтветственности = Ложь;
	Пока ВыборкаПоТекущемуЭтапу.Следующий() Цикл
		ИнформацияОДокументе = "Документ на утверждении";
		// заполняем характеристики текущего этапа
		ЗаполнитьЗначенияСвойств(Объект,ВыборкаПоТекущемуЭтапу);
		СтрокаДокумента = СогласуемыеДокументы.НайтиСтроки(Новый Структура("Документ",ВыборкаПоТекущемуЭтапу.Документ))[0];
 		ЗаполнитьЗначенияСвойств(СтрокаДокумента,ВыборкаПоТекущемуЭтапу);
        СтрокаДокумента.ДатаПоступления = ВыборкаПоТекущемуЭтапу.Период;
		Если ВыборкаПоТекущемуЭтапу.Статус=Перечисления.усд_СтатусыДокументовНаЭтапах.Отклоненный Тогда
			ИнформацияОДокументе = "Документ отклонен";
		ИначеЕсли ВыборкаПоТекущемуЭтапу.Статус=Перечисления.усд_СтатусыДокументовНаЭтапах.Согласованный Тогда
			ИнформацияОДокументе = "Документ согласован и утвержден";
		ИначеЕсли ВыборкаПоТекущемуЭтапу.Статус=Перечисления.усд_СтатусыДокументовНаЭтапах.Возвращенный Тогда
			ИнформацияОДокументе = "Документ на пересмотре: "+ВыборкаПоТекущемуЭтапу.ПричинаВозвратаСПредыдущего;
		КонецЕсли;
		СтрокаДокумента.Описание = ИнформацияОДокументе;
	КонецЦикла;
	//определяем сведения для следующего этапа и этапа возврата
	Если Объект.ТекущийЭтап<>Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута Тогда
	ХарактеристикиЭтапа = усд_ПроцедурыСогласованияДокументов.ПолучитьХарактеристикиЭтапа(Объект.ТекущийЭтап,Объект.Маршрут,Объект.ВидДокумента,усд_УправлениеСогласованиемДокументов.СоздатьСтруктуруПоДаннымДокумента(Объект.Документ));
	Если Объект.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Возвращенный И Объект.ТекущийЭтап = Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута Тогда
		ХарактеристикиЭтапа = Новый Структура("ЭтапВозврата,ОжидатьПодписиВсехОтветственных,КонтрольЗаполнения,СостояниеПриОтклонении",Неопределено,Ложь,Ложь,Неопределено);
	ИначеЕсли ХарактеристикиЭтапа = Неопределено Тогда
		Возврат;
	КонецЕсли;
		Объект.ПровестиАвтоматическиПриУтверждении			= ХарактеристикиЭтапа.ПровестиАвтоматическиПриУтверждении;
		Объект.ОжидатьПодписиВсех 							= ХарактеристикиЭтапа.ОжидатьПодписиВсехОтветственных;
		Объект.КонтрольЗаполнения 							= ХарактеристикиЭтапа.КонтрольЗаполнения;
		Объект.СостояниеПриОтклонении  						= ХарактеристикиЭтапа.СостояниеПриОтклонении;
		Если ЗначениеЗаполнено(ХарактеристикиЭтапа.ЭтапВозврата) Тогда
			Объект.ЭтапВозврата 		= ХарактеристикиЭтапа.ЭтапВозврата;
			Объект.СостояниеВозврата 	= ХарактеристикиЭтапа.СостояниеПриВозврате;
			Запрос.УстановитьПараметр("Этап",Объект.ЭтапВозврата);
			Запрос.Текст="ВЫБРАТЬ
			|	ДвижениеДокументовПоМаршрутам.ОтветственноеЛицо,
			|	ДвижениеДокументовПоМаршрутам.Период КАК Период
			|ИЗ
			|	РегистрСведений.усд_ДвижениеДокументовПоМаршрутам КАК ДвижениеДокументовПоМаршрутам
			|ГДЕ
			|	ДвижениеДокументовПоМаршрутам.Документ В (&Документы)
			|	И ДвижениеДокументовПоМаршрутам.Этап = &Этап
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период УБЫВ";
			ВыборкаДляВозврата = Запрос.Выполнить().Выбрать();
			Если ВыборкаДляВозврата.Следующий() Тогда
				Объект.ОтветственныйВозврата = ВыборкаДляВозврата.ОтветственноеЛицо;
			ИначеЕсли Объект.ЭтапВозврата =Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута Тогда
				Объект.ОтветственныйВозврата = Объект.Документ.Автор;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	Если Объект.ТекущийЭтап = Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута Тогда
		мЭтап = усд_ПроцедурыСогласованияДокументов.ПолучитьПервыйЭтап(Объект.Маршрут,,Объект.Документ);
		Если мЭтап = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Объект.СледующийЭтап = мЭтап.Этап;
		Объект.СледующееСостояние = мЭтап.СостояниеДокумента;
		ЗаполнитьСписокОтветственных();
		Объект.СледующийОтветственный = Справочники.Пользователи.ПустаяСсылка();
		Если СписокОтветственных.Количество() <>1 Тогда
			Элементы.СледующийОтветственный.Доступность 			= Истина;
		Иначе
			Элементы.СледующийОтветственный.Доступность 			= Ложь;
			Объект.СледующийОтветственный = СписокОтветственных[0].Значение;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ХарактеристикиЭтапа.СледующийЭтап) Тогда
		Объект.СледующийЭтап = ХарактеристикиЭтапа.СледующийЭтап;
		ХарактеристикиЭтапа = усд_ПроцедурыСогласованияДокументов.ПолучитьХарактеристикиЭтапа(Объект.СледующийЭтап,Объект.Маршрут,Объект.ВидДокумента,усд_УправлениеСогласованиемДокументов.СоздатьСтруктуруПоДаннымДокумента(Объект.Документ));
		Если ХарактеристикиЭтапа <> Неопределено Тогда
			Объект.СледующееСостояние = ХарактеристикиЭтапа.СостояниеДокумента;
		КонецЕсли;
		//определяем список ответственных
		ЗаполнитьСписокОтветственных();
		Объект.СледующийОтветственный =Справочники.Пользователи.ПустаяСсылка();
		Если СписокОтветственных.Количество() <>1 Тогда
			Элементы.СледующийОтветственный.Доступность 			= Истина;
		Иначе
			Элементы.СледующийОтветственный.Доступность 			= Ложь;
			Объект.СледующийОтветственный = СписокОтветственных[0].Значение;
		КонецЕсли;
	Иначе
		мЗапрос = Новый Запрос;
		мЗапрос.УстановитьПараметр("ДатаСреза",		Объект.Документ.Дата);
		мЗапрос.УстановитьПараметр("ВидДокументов",	Объект.ВидДокумента);
		мЗапрос.УстановитьПараметр("Маршрут",		Объект.Маршрут);
		мЗапрос.Текст="ВЫБРАТЬ
		|	МаршрутыДвиженияДокументов.ФинальноеСостояние,
		|	МаршрутыДвиженияДокументов.ФинальныйКонтрольРеквизитовДокумента
		|ИЗ
		|	Справочник.усд_МаршрутыДвиженияДокументов КАК МаршрутыДвиженияДокументов
		|ГДЕ
		|	МаршрутыДвиженияДокументов.Ссылка = &Маршрут";
		Выборка=мЗапрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Объект,Выборка);
		КонецЕсли;
	КонецЕсли;
	ПользовательВходитВГруппуОтветственности = усд_ПроцедурыСогласованияДокументов.ПользовательВходитВГруппуОтветственности(ТекущийПользователь,Объект.ТекущийЭтап,Объект.Маршрут,Объект.ВидДокумента,Объект.Документ.Ссылка);
	
	// работа с контролируемыми реквизитами
	МассивУдалить = Новый Массив;
	Для Каждого РеквизитФормы Из ЭтотОбъект.ПолучитьРеквизиты("СогласуемыеДокументы") Цикл
		Если Найти(РеквизитФормы.Имя,"ДР_")<>0 Тогда
			МассивУдалить.Добавить(РеквизитФормы.Путь+"."+РеквизитФормы.Имя);
			Если Элементы.Найти(РеквизитФормы.Имя) <>Неопределено Тогда
				Элементы.Удалить(Элементы[РеквизитФормы.Имя]);
			КонецЕсли;
			Если Элементы.Найти("Кнопка"+Сред(РеквизитФормы.Имя,4)) <>Неопределено Тогда
				Элементы.Удалить(Элементы["Кнопка"+Сред(РеквизитФормы.Имя,4)]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Попытка
		ИзменитьРеквизиты(,МассивУдалить);
	Исключение
	КонецПопытки;
	МассивУдалить = Новый Массив;
	Для Каждого Команда Из Команды Цикл
		Если Найти(Команда.Имя,"ЗаполнениеРеквизитов")<>0 Тогда
			МассивУдалить.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Команда Из МассивУдалить Цикл
		Команды.Удалить(Команда);
	КонецЦикла;
	Объект.ЗаполнениеРеквизитов.Очистить();

	Если Объект.КонтрольЗаполнения Тогда
		Запрос.УстановитьПараметр("Маршрут",	Объект.Маршрут);
		Запрос.УстановитьПараметр("Этап",		Объект.ТекущийЭтап);
		Запрос.Текст = "ВЫБРАТЬ
		|	КонтролируемыеРеквизиты.Источник,
		|	КонтролируемыеРеквизиты.ПредставлениеРеквизитаИсточника,
		|	КонтролируемыеРеквизиты.РеквизитИсточника
		|ИЗ
		|	Справочник.усд_МаршрутыДвиженияДокументов.КонтролируемыеРеквизиты КАК КонтролируемыеРеквизиты
		|ГДЕ
		|	КонтролируемыеРеквизиты.Ссылка = &Маршрут
		|	И КонтролируемыеРеквизиты.Этап = &Этап";
		Объект.ЗаполнениеРеквизитов.Очистить();
		Выборка = Запрос.Выполнить().Выбрать();
		// создание реквизитов
		МассивДобавить = Новый Массив;
		Пока Выборка.Следующий() Цикл
			НоваяСтрокаЗаполнения = Объект.ЗаполнениеРеквизитов.Добавить();
			НоваяСтрокаЗаполнения.Реквизит 					= Выборка.РеквизитИсточника;
			НоваяСтрокаЗаполнения.ПредставлениеРеквизита 	= Выборка.ПредставлениеРеквизитаИсточника;
			РеквизитКолонка 	= Новый РеквизитФормы("ДР_"+Выборка.РеквизитИсточника,Метаданные.Документы[Объект.ВидДокумента.ПрограммныйИдентификатор].Реквизиты.Найти(Выборка.РеквизитИсточника).Тип,"СогласуемыеДокументы",Выборка.ПредставлениеРеквизитаИсточника);
			МассивДобавить.Добавить(РеквизитКолонка);
		КонецЦикла;
		ИзменитьРеквизиты(МассивДобавить);
		// заполнение реквизитов
		Для Каждого СтрокаРеквизит Из Объект.ЗаполнениеРеквизитов Цикл
			Для Каждого СтрокаСогласуемых Из СогласуемыеДокументы Цикл
				СтрокаСогласуемых["ДР_"+СтрокаРеквизит.Реквизит] = СтрокаСогласуемых.Документ[СтрокаРеквизит.Реквизит];
			КонецЦикла;
		КонецЦикла;
		// визуализация
		Для Каждого СтрокаРеквизит Из Объект.ЗаполнениеРеквизитов Цикл
			РеквизитКолонка 			= Элементы.Добавить("ДР_"+СтрокаРеквизит.Реквизит,Тип("ПолеФормы"),Элементы.СогласуемыеДокументы);
			РеквизитКолонка.ПутьКДанным	= "СогласуемыеДокументы.ДР_"+СтрокаРеквизит.Реквизит;
			РеквизитКолонка.ЦветФонаЗаголовка = Новый Цвет(176,196,222);
			РеквизитКолонка.ЦветТекстаЗаголовка = Новый Цвет(0,68,68);
			РеквизитКолонка.ШрифтЗаголовка = Новый Шрифт(,9,Истина);
			РеквизитКолонка.Вид = ВидПоляФормы.ПолеВвода;
			Команда = Команды.Добавить("ЗаполнениеРеквизитов"+СтрокаРеквизит.Реквизит);
			Команда.Действие = "ЗаполнениеРеквизитов";
			Команда.Заголовок = "Заполнить: "+СтрокаРеквизит.ПредставлениеРеквизита;
			Кнопка 			= Элементы.Добавить("Кнопка"+СтрокаРеквизит.Реквизит,Тип("КнопкаФормы"),Элементы.ГруппаЗаполнениеРеквизитов);
			Кнопка.ИмяКоманды = "ЗаполнениеРеквизитов"+СтрокаРеквизит.Реквизит;
			Кнопка.Заголовок = "Заполнить: "+СтрокаРеквизит.ПредставлениеРеквизита;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры //УстановитьСведения

&НаКлиенте
Процедура ПослеЗакрытияВводаЗначения(ЗначениеРезультат, ПараметрыВвода) Экспорт
	
    Если ЗначениеРезультат<>Неопределено Тогда
        // обработка введенного значения
		Для Каждого СтрокаДокумент Из СогласуемыеДокументы Цикл
			Если СтрокаДокумент.Пометка Тогда
				СтрокаДокумент["ДР_" + ПараметрыВвода.ИмяКолонки] = ЗначениеРезультат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТип(Реквизит)
	Возврат Метаданные.Документы[Объект.ВидДокумента.ПрограммныйИдентификатор].Реквизиты.Найти(Реквизит).Тип;
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокОтветственных()
	мСписокОтветственных = усд_УправлениеСогласованиемДокументов.ПолучитьСписокГруппыОтветственности(Объект.СледующийЭтап,Объект.Маршрут,Объект.ВидДокумента,Объект.Документ);
	СписокОтветственных.Очистить();
	Для Каждого ЭлементСписка Из мСписокОтветственных Цикл
		СписокОтветственных.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаУтвердить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если НЕ СохранитьРеквизиты() Тогда
			ПоказатьПредупреждение(, "Не удалось сохранить значения проверяемых реквизитов!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТекущийЭтап) Тогда
		ПоказатьПредупреждение(, "Не определен текущий этап!");
		Возврат;
	КонецЕсли;
	Если ПользовательВходитВГруппуОтветственности Тогда
		РезультатВыполнения = ВыполнитьУтверждение();
		Если РезультатВыполнения<>"" Тогда
			ПоказатьПредупреждение(, РезультатВыполнения);
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, "Нет права подписи на текущем этапе!");
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьУтверждение()
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Для Каждого СтрокаСогласования Из СогласуемыеДокументы Цикл
		Документ = СтрокаСогласования.Документ;
		ТребуетсяПеремещениеНаСледующийЭтап = Истина;
		Если  усд_ПроцедурыСогласованияДокументов.ИмеетсяПодписьПользователя(Документ,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап) Тогда
			ОтменитьТранзакцию();
			Возврат "Подпись текущего пользователя на данном этапе уже имеется!";
		КонецЕсли;
		Если Объект.ОжидатьПодписиВсех Тогда
			// проверить все ли подписи собраны
			Если НЕ усд_ПроцедурыСогласованияДокументов.СобраныВсеПодписиЭтапа(Документ,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап) Тогда
				ТребуетсяПеремещениеНаСледующийЭтап = Ложь;
			КонецЕсли;
		КонецЕсли;
		// корректировка реквизитов
		Если ТребуетсяПеремещениеНаСледующийЭтап Тогда
			ЭтапыПрименяемыхКорректировокРеквизитов = Новый Массив;
			Если Объект.Маршрут.ПорядокЗаполненияКонтролируемыхРеквизитов=Перечисления.усд_ПорядкиЗаполненияКонтролируемыхРеквизитов.УстанавливатьЗначенияЭтапаПриЗавершенииЭтапа Тогда
				ЭтапыПрименяемыхКорректировокРеквизитов.Добавить(Объект.ТекущийЭтап);
			ИначеЕсли ЗначениеЗаполнено(Объект.СледующийЭтап) Тогда
				ЭтапыПрименяемыхКорректировокРеквизитов.Добавить(Объект.СледующийЭтап);
			КонецЕсли;
			Если Объект.ФинальныйКонтрольРеквизитовДокумента И Объект.СледующийЭтап.Пустая() Тогда
				ЭтапыПрименяемыхКорректировокРеквизитов.Добавить(Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ПустаяСсылка());
			КонецЕсли;
			Если усд_УправлениеСогласованиемДокументов.ТребуетсяКорректироватьРеквизитыДокумента(ЭтапыПрименяемыхКорректировокРеквизитов,Объект.Маршрут) Тогда
				ДокументОбъект = Документ.ПолучитьОбъект();
				Если Объект.Маршрут.ПорядокЗаполненияКонтролируемыхРеквизитов=Перечисления.усд_ПорядкиЗаполненияКонтролируемыхРеквизитов.УстанавливатьЗначенияЭтапаПриЗавершенииЭтапа Тогда
					усд_УправлениеСогласованиемДокументов.КорректироватьРеквизитыДокумента(ДокументОбъект,Объект.ТекущийЭтап,Объект.Маршрут);
				ИначеЕсли ЗначениеЗаполнено(Объект.СледующийЭтап) Тогда
					усд_УправлениеСогласованиемДокументов.КорректироватьРеквизитыДокумента(ДокументОбъект,Объект.СледующийЭтап,Объект.Маршрут);
				КонецЕсли;
				Если Объект.ФинальныйКонтрольРеквизитовДокумента И Объект.СледующийЭтап.Пустая() Тогда
					усд_УправлениеСогласованиемДокументов.КорректироватьРеквизитыДокумента(ДокументОбъект,Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ПустаяСсылка(),Объект.Маршрут);
				КонецЕсли;
				Попытка
					ДокументОбъект.Записать(?(Объект.ПровестиАвтоматическиПриУтверждении,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
				Исключение
					Возврат "Не удалось автоматически откорректировать реквизиты "+?(Объект.ПровестиАвтоматическиПриУтверждении,"и выполнить проведение","")+" документа "+Строка(Документ)+" по причине:
					|	"+ОписаниеОшибки();
				КонецПопытки;
			ИначеЕсли Объект.ПровестиАвтоматическиПриУтверждении Тогда
				ДокументОбъект = Документ.ПолучитьОбъект();
				Попытка
					ДокументОбъект.Записать(?(Объект.ПровестиАвтоматическиПриУтверждении,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
				Исключение
					ОтменитьТранзакцию();
					Возврат "Не удалось выполнить проведение документа "+Строка(Документ)+" по причине:
					|	"+ОписаниеОшибки();
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		СледующийЭтап = Объект.СледующийЭтап;
		СледующийОтветственный = Объект.СледующийОтветственный;
		Если СтрокаСогласования.Статус=Перечисления.усд_СтатусыДокументовНаЭтапах.Возвращенный И (Объект.Маршрут.ПравилоПродолженияМаршрутаПриПересмотре=Перечисления.усд_ПравилаПродолженияМаршрутаПриПересмотре.ОтправитьРецензенту ИЛИ Объект.Маршрут.ПравилоПродолженияМаршрутаПриПересмотре=Перечисления.усд_ПравилаПродолженияМаршрутаПриПересмотре.ОтправитьНаЭтапВозврата) Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	усд_ДвижениеДокументовПоМаршрутамСрезПоследних.Этап,
				|	усд_ДвижениеДокументовПоМаршрутамСрезПоследних.ОтветственноеЛицо
				|ИЗ
				|	РегистрСведений.усд_ДвижениеДокументовПоМаршрутам.СрезПоследних(, Документ = &Документ) КАК усд_ДвижениеДокументовПоМаршрутамСрезПоследних";

			Запрос.УстановитьПараметр("Документ", Документ);

			Результат = Запрос.Выполнить();

			ВыборкаДетальныеЗаписи = Результат.Выбрать();

			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СледующийЭтап = ВыборкаДетальныеЗаписи.Этап;
				Если Объект.Маршрут.ПравилоПродолженияМаршрутаПриПересмотре=Перечисления.усд_ПравилаПродолженияМаршрутаПриПересмотре.ОтправитьРецензенту Тогда
					СледующийОтветственный = Объект.СледующийОтветственный;
				Иначе
					СледующийОтветственный = Справочники.Пользователи.ПустаяСсылка();
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;
		// добавление подписи
		Если (СледующийЭтап=Объект.ТекущийЭтап) ИЛИ (НЕ усд_ПроцедурыСогласованияДокументов.ДобавитьПодпись(Документ,?(Объект.СледующийЭтап.Пустая() И ТребуетсяПеремещениеНаСледующийЭтап,Перечисления.усд_СтатусыДокументовНаЭтапах.Согласованный,Перечисления.усд_СтатусыДокументовНаЭтапах.Активный),,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап,Объект.Приоритет,СтрокаСогласования.ДатаПоступления,Объект.КонтрольСрокаИсполнения,Объект.ЕдиницаИзмерения,Объект.СрокИсполнения)) Тогда
			ОтменитьТранзакцию();
			Возврат "Не удалось установить подпись, продолжение невозможно!";
		КонецЕсли;
		// закрытие задач
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ФормироватьЗадачиПоИсполнителямСогласования") Тогда
			усд_ПроцедурыСогласованияДокументов.ЗакрытьЗадачи(Документ,ТребуетсяПеремещениеНаСледующийЭтап,ТребуетсяПеремещениеНаСледующийЭтап И НЕ ЗначениеЗаполнено(Объект.СледующийЭтап),ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап);	
		КонецЕсли;
		// отправление на новый этап
		Если ТребуетсяПеремещениеНаСледующийЭтап Тогда
			Если НЕ усд_ПроцедурыСогласованияДокументов.ИзменитьТекущийЭтап(Документ,СледующийЭтап,?(ЗначениеЗаполнено(СледующийЭтап),Перечисления.усд_СтатусыДокументовНаЭтапах.Активный,Перечисления.усд_СтатусыДокументовНаЭтапах.Согласованный),?(ЗначениеЗаполнено(СледующийЭтап),Объект.СледующееСостояние,Объект.Маршрут.ФинальноеСостояние),?(ЗначениеЗаполнено(СледующийЭтап),СледующийОтветственный,?(ЗначениеЗаполнено(Документ.Ответственный),Документ.Ответственный,Документ.Автор)),,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап,Объект.Приоритет) Тогда
				ОтменитьТранзакцию();
				Возврат "Не удалось изменить активный этап, продолжение невозможно!";
			КонецЕсли;
		КонецЕсли;
		// создание задач
		Если ТребуетсяПеремещениеНаСледующийЭтап Тогда
			Если Объект.СледующийЭтап.Пустая() Тогда
				Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ФормироватьЗадачиОтветственнымПриЗавершенииМаршрута") Тогда
					усд_ПроцедурыСогласованияДокументов.ФормироватьЗадачуОтветственномуПоДокументу(Документ,Ложь,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут);
				КонецЕсли;		
				Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ФормироватьЗадачиАвторамПриЗавершенииМаршрута") Тогда
					усд_ПроцедурыСогласованияДокументов.ФормироватьЗадачуАвторуДокумента(Документ,Ложь,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут);
				КонецЕсли;		
			Иначе
				Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ФормироватьЗадачиПоИсполнителямСогласования") Тогда
					усд_ПроцедурыСогласованияДокументов.ФормироватьЗадачу(Документ,СледующийОтветственный,СледующийЭтап,Перечисления.усд_СтатусыДокументовНаЭтапах.Активный,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут);
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	УстановитьСведения();
	Возврат "";
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаВернуть(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если НЕ СохранитьРеквизиты() Тогда
			ПоказатьПредупреждение(, "Не удалось сохранить значения проверяемых реквизитов!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТекущийЭтап) Тогда
		ПоказатьПредупреждение(, "Не определен текущий этап!");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ЭтапВозврата) Тогда
		ПоказатьПредупреждение(, "Не определен этап возврата!");
		Возврат;
	КонецЕсли;
	Если ПользовательВходитВГруппуОтветственности Тогда		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВвестиСтроку", ЭтотОбъект);		
		ПоказатьВводСтроки(Оповещение, Объект.ПричинаВозврата, "Укажите причину возврата:");
	Иначе
		ПоказатьПредупреждение(, "Нет права подписи на текущем этапе!");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВвестиСтроку(ВведенаяСтрока, ДополнительныеПараметры) Экспорт
	
	Если ВведенаяСтрока = Неопределено Тогда
		Возврат;
	Иначе 
		Объект.ПричинаВозврата = ВведенаяСтрока;
	КонецЕсли;
	ЗначениеВыбора = Неопределено;
	мЭтапВозврата = Неопределено;
	Если ВыбиратьОтветственногоВозврата Тогда
		СписокВариантов = Новый СписокЗначений;
		СписокВариантов.Добавить(ПредопределенноеЗначение("Перечисление.усд_РежимыВозвратаДокументовНаПересмотр.АвторДокумента"));
		СписокВариантов.Добавить(ПредопределенноеЗначение("Перечисление.усд_РежимыВозвратаДокументовНаПересмотр.ПредыдущийСогласующий"));
		СписокВариантов.Добавить(ПредопределенноеЗначение("Перечисление.усд_РежимыВозвратаДокументовНаПересмотр.ПоВыборуИсполнителя"));		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВыбораЭлементаПорядок", ЭтотОбъект, Новый Структура("мЭтапВозврата", мЭтапВозврата));
		СписокВариантов.ПоказатьВыборЭлемента(Оповещение, "Укажите порядок определения получателя", СписокВариантов[0]);
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = ВыполнитьВозврат(ЗначениеВыбора,мЭтапВозврата);
	Если РезультатВыполнения<>"" Тогда
		ПоказатьПредупреждение(, РезультатВыполнения);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВыбораЭлементаПорядок(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если РезультатВыбора.Значение = ПредопределенноеЗначение("Перечисление.усд_РежимыВозвратаДокументовНаПересмотр.ПоВыборуИсполнителя") Тогда
		СписокЭтапов = СписокПредыдущихЭтапов(Объект.Документ,Объект.ТекущийЭтап);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВыбораЭлементаЭтап", ЭтотОбъект,  Новый Структура("мЭтапВозврата", ДополнительныеПараметры.мЭтапВозврата));
		СписокЭтапов.ПоказатьВыборЭлемента(Оповещение, "Укажите этап для возврата", СписокЭтапов[0]);
		Возврат;
	Иначе
		ЗначениеВыбора = РезультатВыбора.Значение;
	КонецЕсли;
	
	РезультатВыполнения = ВыполнитьВозврат(ЗначениеВыбора, ДополнительныеПараметры.мЭтапВозврата);
	Если РезультатВыполнения<>"" Тогда
		ПоказатьПредупреждение(, РезультатВыполнения);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВыбораЭлементаЭтап(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.мЭтапВозврата = РезультатВыбора.Значение;
	СписокПользователей = СписокПредыдущихОтветственных(Объект.Документ, РезультатВыбора.Значение);	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВыбораЭлементаПолучатель", ЭтотОбъект, Новый Структура("мЭтапВозврата", ДополнительныеПараметры.мЭтапВозврата));
	СписокПользователей.ПоказатьВыборЭлемента(Оповещение, "Укажите получателя", СписокПользователей[0]);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВыбораЭлементаПолучатель(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗначениеВыбора = РезультатВыбора.Значение;
	
	РезультатВыполнения = ВыполнитьВозврат(ЗначениеВыбора, ДополнительныеПараметры.мЭтапВозврата);
	Если РезультатВыполнения<>"" Тогда
		ПоказатьПредупреждение(, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокПредыдущихЭтапов(Документ, Этап)
	СписокПредыдущихЭтапов = Новый СписокЗначений;
	ПредыдущийЭтап = усд_ПроцедурыСогласованияДокументов.ОпределитьПредыдущийЭтап(Документ,Этап);
	Пока ЗначениеЗаполнено(ПредыдущийЭтап) И ПредыдущийЭтап<>Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута Цикл
		Если СписокПредыдущихЭтапов.НайтиПоЗначению(ПредыдущийЭтап)<>Неопределено Тогда
			Прервать;
		КонецЕсли;
		СписокПредыдущихЭтапов.Добавить(ПредыдущийЭтап);
		ПредыдущийЭтап = усд_ПроцедурыСогласованияДокументов.ОпределитьПредыдущийЭтап(Документ,ПредыдущийЭтап);
	КонецЦикла;
	Возврат СписокПредыдущихЭтапов;
КонецФункции

&НаСервереБезКонтекста
Функция СписокПредыдущихОтветственных(Документ, Этап)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	усд_ДвижениеДокументовПоМаршрутам.ОтветственноеЛицо,
		|	усд_ДвижениеДокументовПоМаршрутам.Этап
		|ИЗ
		|	РегистрСведений.усд_ДвижениеДокументовПоМаршрутам КАК усд_ДвижениеДокументовПоМаршрутам
		|ГДЕ
		|	усд_ДвижениеДокументовПоМаршрутам.Документ = &Документ
		|	И усд_ДвижениеДокументовПоМаршрутам.Этап = &Этап
		|
		|СГРУППИРОВАТЬ ПО
		|	усд_ДвижениеДокументовПоМаршрутам.ОтветственноеЛицо,
		|	усд_ДвижениеДокументовПоМаршрутам.Этап";

	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Этап", Этап);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
    СписокПользователей = Новый СписокЗначений;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокПользователей.Добавить(ВыборкаДетальныеЗаписи.ОтветственноеЛицо);
	КонецЦикла;

	Возврат СписокПользователей;
КонецФункции

&НаСервере
Функция ВыполнитьВозврат(Получатель, мЭтапВозврата)
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Для Каждого СтрокаСогласуемых Из СогласуемыеДокументы Цикл
		Документ = СтрокаСогласуемых.Документ;
		// добавление подписи
		Если НЕ усд_ПроцедурыСогласованияДокументов.ДобавитьПодпись(Документ,Перечисления.усд_СтатусыДокументовНаЭтапах.Возвращенный,Объект.ПричинаВозврата,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап,Объект.Приоритет,СтрокаСогласуемых.ДатаПоступления,Объект.КонтрольСрокаИсполнения,Объект.ЕдиницаИзмерения,Объект.СрокИсполнения) Тогда
			ОтменитьТранзакцию();
			Возврат "Не удалось установить подпись для "+Строка(Документ)+", продолжение невозможно!";
		КонецЕсли;
		// закрытие задач
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ФормироватьЗадачиПоИсполнителямСогласования") Тогда
			усд_ПроцедурыСогласованияДокументов.ЗакрытьЗадачи(Документ,Истина,Ложь,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап);	
		КонецЕсли;
		// отправление на новый этап
		Если Получатель = Неопределено И ЗначениеЗаполнено(Объект.Маршрут.РежимВозвратаНаПересмотр) Тогда
			Получатель = Объект.Маршрут.РежимВозвратаНаПересмотр;
		КонецЕсли;
		ОтветственныйВозврата = ?(Получатель=Неопределено ИЛИ Получатель=Перечисления.усд_РежимыВозвратаДокументовНаПересмотр.ПредыдущийСогласующий,СтрокаСогласуемых.ОтветственныйВозврата,?(Получатель=Перечисления.усд_РежимыВозвратаДокументовНаПересмотр.АвторДокумента,Документ.Автор,Получатель));
		ЭтапВозврата = ?(мЭтапВозврата = Неопределено,?(Получатель=Перечисления.усд_РежимыВозвратаДокументовНаПересмотр.ПредыдущийСогласующий,Объект.ПредыдущийЭтап,Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ВозвратИнициаторуМаршрута),мЭтапВозврата);
		Если НЕ усд_ПроцедурыСогласованияДокументов.ИзменитьТекущийЭтап(Документ,ЭтапВозврата,Перечисления.усд_СтатусыДокументовНаЭтапах.Возвращенный,Объект.СостояниеВозврата,ОтветственныйВозврата,,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап,Объект.Приоритет) Тогда
			ОтменитьТранзакцию();
			Возврат "Не удалось изменить активный этап для "+Строка(Документ)+", продолжение невозможно!";
		КонецЕсли;
		// создание задач
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ФормироватьЗадачиПоИсполнителямСогласования") Тогда
			усд_ПроцедурыСогласованияДокументов.ФормироватьЗадачу(Документ,ОтветственныйВозврата,ЭтапВозврата,Перечисления.усд_СтатусыДокументовНаЭтапах.Возвращенный,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут);
		КонецЕсли;		
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	УстановитьСведения();
	Возврат "";
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаОтклонить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если НЕ СохранитьРеквизиты() Тогда
			ПоказатьПредупреждение(, "Не удалось сохранить значения проверяемых реквизитов!");
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ТекущийЭтап) Тогда
		// запись нового этапа
		Если ПользовательВходитВГруппуОтветственности Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВвестиСтрокуПричиныОтклонения", ЭтотОбъект);		
			ПоказатьВводСтроки(Оповещение, Объект.ПричинаВозврата, "Укажите причину отклонения:");
			Возврат;			
		Иначе
			ПоказатьПредупреждение(, "Нет права подписи на текущем этапе!");
			Возврат;
		КонецЕсли;
	Иначе	
		ПоказатьПредупреждение(, "Не определен текущий этап!");
		Возврат;
	КонецЕсли;
	УстановитьСведения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВвестиСтрокуПричиныОтклонения(ВведенаяСтрока, ДополнительныеПараметры) Экспорт
	
	Если ВведенаяСтрока = Неопределено Тогда
		Возврат;
	Иначе
		Объект.ПричинаВозврата = ВведенаяСтрока;
	КонецЕсли;
	
	РезультатВыполнения = ВыполнитьОтклонение();
	Если РезультатВыполнения<>"" Тогда
		ПоказатьПредупреждение(, РезультатВыполнения);
	КонецЕсли;
	
	УстановитьСведения();
			
КонецПроцедуры

&НаСервере
Функция ВыполнитьОтклонение()
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Для Каждого СтрокаСогласуемых Из СогласуемыеДокументы Цикл
		Документ = СтрокаСогласуемых.Документ;
		// добавление подписи
		Если НЕ усд_ПроцедурыСогласованияДокументов.ДобавитьПодпись(Документ,Перечисления.усд_СтатусыДокументовНаЭтапах.Отклоненный,Объект.ПричинаВозврата,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап,Объект.Приоритет,СтрокаСогласуемых.ДатаПоступления,Объект.КонтрольСрокаИсполнения,Объект.ЕдиницаИзмерения,Объект.СрокИсполнения) Тогда
			ОтменитьТранзакцию();
			Возврат "Не удалось установить подпись, продолжение невозможно!";
		КонецЕсли;
		// закрытие задач
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ФормироватьЗадачиПоИсполнителямСогласования") Тогда
			усд_ПроцедурыСогласованияДокументов.ЗакрытьЗадачи(Документ,Истина,Истина,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап);	
		КонецЕсли;
		// отправление на новый этап
		Если НЕ усд_ПроцедурыСогласованияДокументов.ИзменитьТекущийЭтап(Документ,Справочники.усд_ЭтапыМаршрутовДвиженияДокументов.ПустаяСсылка(),Перечисления.усд_СтатусыДокументовНаЭтапах.Отклоненный,Объект.СостояниеВозврата,Объект.ОтветственныйВозврата,,Объект.ВидДокумента,Объект.Маршрут,Объект.ТекущийЭтап,Объект.Приоритет) Тогда
			ОтменитьТранзакцию();
			Возврат "Не удалось изменить активный этап, продолжение невозможно!";
		КонецЕсли;
		// создание задач
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ФормироватьЗадачиОтветственнымПриЗавершенииМаршрута") Тогда
			усд_ПроцедурыСогласованияДокументов.ФормироватьЗадачуОтветственномуПоДокументу(Документ,Истина,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут);
		КонецЕсли;		
		Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("усд_ФормироватьЗадачиАвторамПриЗавершенииМаршрута") Тогда
			усд_ПроцедурыСогласованияДокументов.ФормироватьЗадачуАвторуДокумента(Документ,Истина,ТекущийПользователь,Объект.ВидДокумента,Объект.Маршрут);
		КонецЕсли;		
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	УстановитьСведения();
	Возврат "";
КонецФункции

&НаСервере
Функция ЕстьПраваПерадресации()
	Возврат РольДоступна("ПолныеПрава") ИЛИ РольДоступна("усд_УправлениеСогласованиемИУтверждениемДокументов");	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеФормыИнформации(ТабличныйДокумент)
    Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет") ;
	Макет.Параметры.Заполнить(Объект);
	Если Объект.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Возвращенный Тогда
		Макет.Параметры.ВозвратОписание = "Возвращен. Описание причины: "+Объект.ПричинаВозвратаСПредыдущего;
	КонецЕсли;
	Если Объект.Статус = Перечисления.усд_СтатусыДокументовНаЭтапах.Отклоненный Тогда
		Макет.Параметры.ВозвратОписание = "Отклонен. Описание причины: "+Объект.ПричинаВозвратаСПредыдущего;
	КонецЕсли;
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.Защита = Истина;
	ТабличныйДокумент.Вывести(Макет);
КонецПроцедуры

&НаСервере
Функция СохранитьРеквизиты()
	НачатьТранзакцию();
	Для Каждого СтрокаСогласуемых Из СогласуемыеДокументы Цикл
		ДокументОбъект = СтрокаСогласуемых.Документ.ПолучитьОбъект();
		Если усд_ПроцедурыСогласованияДокументов.ПользовательВходитВГруппуОтветственности(ТекущийПользователь,Объект.ТекущийЭтап,Объект.Маршрут,Объект.ВидДокумента,усд_УправлениеСогласованиемДокументов.СоздатьСтруктуруПоДаннымДокумента(СтрокаСогласуемых.Документ)) Тогда
			Для Каждого СтрокаЗаполнения Из Объект.ЗаполнениеРеквизитов Цикл
				 ДокументОбъект[СтрокаЗаполнения.Реквизит]=СтрокаСогласуемых["ДР_"+СтрокаЗаполнения.Реквизит];
			КонецЦикла;
			Попытка
				 ДокументОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при записи документа "+Строка(СтрокаСогласуемых.Документ)+": "+ОписаниеОшибки());
				ОтменитьТранзакцию();
				УстановитьСведения();
				Возврат Ложь;
			КонецПопытки;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет права подписи на текущем этапе!
			|	"+Строка(СтрокаСогласуемых.Документ));
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	РеквизитыМодифицированы = Ложь;
	ЗафиксироватьТранзакцию();
	//УстановитьСведения();
	Возврат Истина;
КонецФункции
