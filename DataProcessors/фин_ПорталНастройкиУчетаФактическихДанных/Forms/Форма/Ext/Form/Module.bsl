
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.ДеревоНастроек);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.Правила);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.ДеревоПравил);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.СправочникФинансовыхПоказателей);
	ЗаполнитьДеревоОбъектов();
	Элементы.ФормаОткрыватьФормыВОтдельныхОкнах.Пометка = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОткрыватьПодчиненныеОкнаВОтдельномОкне")=Истина;
	Элементы.ФормаОткрыватьФормыВОтдельныхОкнах1.Пометка = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОткрыватьПодчиненныеОкнаВОтдельномОкне")=Истина;
	ВОтдельныхОкнах = Элементы.ФормаОткрыватьФормыВОтдельныхОкнах.Пометка;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОбъектов()
	Дерево = ДанныеФормыВЗначение(ДеревоНастроек,Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыПравил.Ссылка,
		|	ГруппыПравил.ВидДанных,
		|	ГруппыПравил.ИмяИсточника,
		|	ГруппыПравил.ПредставлениеИсточника,
		|	ГруппыПравил.СпособИспользования,
		|	ГруппыПравил.Условие,
		|	ГруппыПравил.Порядок
		|ИЗ
		|	Справочник.фин_ГруппыПравилОтраженияФактическихДанных КАК ГруппыПравил
		|ГДЕ
		|	ГруппыПравил.Владелец.Владелец ССЫЛКА Справочник.фин_ВидыДокументов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГруппыПравил.Ссылка,
		|	ЗНАЧЕНИЕ(Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах),
		|	фин_КлассификаторРегистров.ПрограммныйИдентификатор,
		|	фин_КлассификаторРегистров.Наименование,
		|	ГруппыПравил.СпособИспользования,
		|	ГруппыПравил.Условие,
		|	ГруппыПравил.Порядок
		|ИЗ
		|	Справочник.фин_ГруппыПравилОтраженияФактическихДанных КАК ГруппыПравил
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторРегистров КАК фин_КлассификаторРегистров
		|		ПО ГруппыПравил.Владелец.Владелец = фин_КлассификаторРегистров.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаборПравилОтражения.Ссылка,
		|	НаборПравилОтражения.Владелец,
		|	НаборПравилОтражения.ВидДанных,
		|	НаборПравилОтражения.ИмяИсточника,
		|	НаборПравилОтражения.ПредставлениеИсточника,
		|	НаборПравилОтражения.СпособИспользования,
		|	НаборПравилОтражения.Условие,
		|	НаборПравилОтражения.ШаблонПроводок,
		|	НаборПравилОтражения.Порядок
		|ИЗ
		|	Справочник.фин_ПравилаОтраженияФактическихДанных КАК НаборПравилОтражения
		|ГДЕ
		|	(НаборПравилОтражения.Владелец.Владелец ССЫЛКА Справочник.фин_ВидыДокументов
		|			ИЛИ НаборПравилОтражения.Владелец.Владелец.Владелец ССЫЛКА Справочник.фин_ВидыДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НаборПравилОтражения.Ссылка,
		|	НаборПравилОтражения.Владелец,
		|	ЗНАЧЕНИЕ(Перечисление.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах),
		|	фин_КлассификаторРегистров.ПрограммныйИдентификатор,
		|	фин_КлассификаторРегистров.Наименование,
		|	НаборПравилОтражения.СпособИспользования,
		|	НаборПравилОтражения.Условие,
		|	НаборПравилОтражения.ШаблонПроводок,
		|	НаборПравилОтражения.Порядок
		|ИЗ
		|	Справочник.фин_ПравилаОтраженияФактическихДанных КАК НаборПравилОтражения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторРегистров КАК фин_КлассификаторРегистров
		|		ПО НаборПравилОтражения.Ссылка.Владелец = фин_КлассификаторРегистров.Ссылка";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаГруппПравилШаблона = РезультатЗапроса[0].Выгрузить();
	ТаблицаПравилШаблона = РезультатЗапроса[1].Выгрузить();

	
	
	СтрокаДокументы = Дерево.Строки.Добавить();
	СтрокаДокументы.ОбъектИнформационнойБазы = "Документы";
	СтрокаДокументы.ВидСтроки = Перечисления.фин_ВидыСтрокПорталаНастройкиФД.ГруппаОбъектов;
	СтрокаДокументы.Картинка = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ВидыДокументов.Ссылка,
		|	фин_ВидыДокументов.ПрограммныйИдентификатор,
		|	фин_ВидыДокументов.РегистрироватьПервичныеДанныеПоБюджетированию,
		|	фин_ПрименениеСхемОтраженияФактическихДанных.Схема КАК НаборШаблонов,
		|	фин_ПрименениеСхемОтраженияФактическихДанных.ИспользоватьСовместноСШаблонамиРегистров,
		|	фин_ПрименениеСхемОтраженияФактическихДанных.Период,
		|	ВЫБОР
		|		КОГДА НЕ фин_ПрименениеСхемОтраженияФактическихДанных.Схема ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьНастройки,
		|	фин_ВидыДокументов.Наименование
		|ИЗ
		|	Справочник.фин_ВидыДокументов КАК фин_ВидыДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_ПрименениеСхемОтраженияФактическихДанных КАК фин_ПрименениеСхемОтраженияФактическихДанных
		|		ПО фин_ВидыДокументов.Ссылка = фин_ПрименениеСхемОтраженияФактическихДанных.ОбъектИнформационнойБазы";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаНастроекДокументы = РезультатЗапроса.Выгрузить();
	
	Для Каждого Документ Из Метаданные.Документы Цикл
		Если НЕ фин_РегистрацияФактическихДанныхПоБюджетированию.ОпределитьВозможностьРегистрацииФакта(Документ.Имя) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ВсеОбъекты Тогда
			СтрокиНастроек = ТаблицаНастроекДокументы.НайтиСтроки(Новый Структура("ПрограммныйИдентификатор",Документ.Имя));
			Если СтрокиНастроек.Количество()>0 Тогда
				Если НЕ СтрокиНастроек[0].ЕстьНастройки Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;	
			КонецЕсли;
		КонецЕсли;
		СтрокаДокумент = СтрокаДокументы.Строки.Добавить();
		СтрокаДокумент.ОбъектИнформационнойБазы = Документ.Синоним;
		СтрокаДокумент.ПрограммныйИдентификатор = Документ.Имя;
		СтрокаДокумент.ВидСтроки 				= Перечисления.фин_ВидыСтрокПорталаНастройкиФД.Документ;
		СтрокаДокумент.Картинка 				= 1;
		СтрокаДокумент.ЭтоДокументы				= Истина;
		СтрокиНастроек = ТаблицаНастроекДокументы.НайтиСтроки(Новый Структура("ПрограммныйИдентификатор",Документ.Имя));
		Если СтрокиНастроек.Количество()>0 Тогда
			СтрокаДокумент.Ссылка 				= СтрокиНастроек[0].Ссылка;
			СтрокаДокумент.ИмеютсяНастройки 	= СтрокиНастроек[0].ЕстьНастройки;
			СтрокаДокумент.ОбъектИнформационнойБазы 	= СтрокиНастроек[0].Наименование;
			СтрокаДокумент.РегистрироватьПервичныеДанныеПоБюджетированию = СтрокиНастроек[0].РегистрироватьПервичныеДанныеПоБюджетированию;
			Для Каждого СтрокаНастроек Из СтрокиНастроек Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаНастроек.НаборШаблонов) Тогда
					Продолжить;
				КонецЕсли;
				СтрокаПравил = СтрокаДокумент.Строки.Добавить();
				СтрокаПравил.ВидСтроки 	= ?(ТипЗнч(СтрокаНастроек.НаборШаблонов)=Тип("СправочникСсылка.фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах"),Перечисления.фин_ВидыСтрокПорталаНастройкиФД.НаборШаблонов,?(ТипЗнч(СтрокаНастроек.НаборШаблонов)=Тип("СправочникСсылка.фин_СхемыОтраженияФактическихДанных"),Перечисления.фин_ВидыСтрокПорталаНастройкиФД.Шаблон,Перечисления.фин_ВидыСтрокПорталаНастройкиФД.ФиксированноеПравило));
				СтрокаПравил.Картинка 	= ?(ТипЗнч(СтрокаНастроек.НаборШаблонов)=Тип("СправочникСсылка.фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах"),6,?(ТипЗнч(СтрокаНастроек.НаборШаблонов)=Тип("СправочникСсылка.фин_СхемыОтраженияФактическихДанных"),10,9));
				СтрокаПравил.Ссылка		= СтрокаНастроек.НаборШаблонов;
				СтрокаПравил.ЭтоНастройкаПримененияСхем = Истина;
				СтрокаПравил.ИспользоватьСовместноСШаблонамиРегистров = СтрокаНастроек.ИспользоватьСовместноСШаблонамиРегистров;
				СтрокаПравил.Период 					= СтрокаНастроек.Период;
				СтрокаПравил.ВладелецНастроек 			= СтрокаДокумент.Ссылка;
				СтрокаПравил.ОбъектИнформационнойБазы 	= СтрокаНастроек.НаборШаблонов;
				СтрокаПравил.ЭтоДокументы				= Истина;
				Если ТипЗнч(СтрокаНастроек.НаборШаблонов)=Тип("СправочникСсылка.фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах") Тогда
					ТаблицаПравилНабора = СтрокаНастроек.НаборШаблонов.НаборШаблонов;
					Для Каждого СтрокаНабора Из ТаблицаПравилНабора Цикл
						СтрокаПодПравил = СтрокаПравил.Строки.Добавить();
						СтрокаПодПравил.ВидСтроки 	= Перечисления.фин_ВидыСтрокПорталаНастройкиФД.Шаблон;
						СтрокаПодПравил.Картинка 	= ?(СтрокаНабора.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.Всегда,10,11);
						СтрокаПодПравил.Ссылка		= СтрокаНабора.Схема;
						СтрокаПодПравил.ВладелецНастроек 			= СтрокаДокумент.Ссылка;
						СтрокаПодПравил.ОбъектИнформационнойБазы 	= СтрокаНабора.Схема;
						СтрокаПодПравил.УсловиеПримененияШаблона 	= СтрокаНабора.УсловиеПримененияШаблона;
						СтрокаПодПравил.СпособИспользования 		= СтрокаНабора.СпособИспользования;
						СтрокаПодПравил.ЭтоДокументы				= Истина;
						ОбработатьВыводПравилШаблона(СтрокаПодПравил,ТаблицаГруппПравилШаблона,ТаблицаПравилШаблона);
					КонецЦикла;
				ИначеЕсли ТипЗнч(СтрокаНастроек.НаборШаблонов)=Тип("СправочникСсылка.фин_СхемыОтраженияФактическихДанных") Тогда
					ОбработатьВыводПравилШаблона(СтрокаПравил,ТаблицаГруппПравилШаблона,ТаблицаПравилШаблона);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ВидыДокументов.ПрограммныйИдентификатор,
		|	фин_ВидыДокументов.НаименованиеПолное
		|ИЗ
		|	Справочник.фин_ВидыДокументов КАК фин_ВидыДокументов
		|ГДЕ
		|	НЕ фин_ВидыДокументов.ПометкаУдаления
		|	И фин_ВидыДокументов.РегистрироватьПервичныеДанныеПоБюджетированию";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Метаданные.Документы.Найти(ВыборкаДетальныеЗаписи.ПрограммныйИдентификатор)<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ВсеОбъекты Тогда
			СтрокиНастроек = ТаблицаНастроекДокументы.НайтиСтроки(Новый Структура("ПрограммныйИдентификатор",ВыборкаДетальныеЗаписи.ПрограммныйИдентификатор));
			Если СтрокиНастроек.Количество()>0 Тогда
				Если НЕ СтрокиНастроек[0].ЕстьНастройки Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;	
			КонецЕсли;
		КонецЕсли;
		СтрокаДокумент = СтрокаДокументы.Строки.Добавить();
		СтрокаДокумент.ОбъектИнформационнойБазы = ВыборкаДетальныеЗаписи.НаименованиеПолное;
		СтрокаДокумент.ПрограммныйИдентификатор = ВыборкаДетальныеЗаписи.ПрограммныйИдентификатор;
		СтрокаДокумент.ВидСтроки 				= Перечисления.фин_ВидыСтрокПорталаНастройкиФД.Документ;
		СтрокаДокумент.Картинка 				= 1;
		СтрокаДокумент.ЭтоДокументы				= Истина;
		СтрокиНастроек = ТаблицаНастроекДокументы.НайтиСтроки(Новый Структура("ПрограммныйИдентификатор",ВыборкаДетальныеЗаписи.ПрограммныйИдентификатор));
		Если СтрокиНастроек.Количество()>0 Тогда
			СтрокаДокумент.Ссылка 				= СтрокиНастроек[0].Ссылка;
			СтрокаДокумент.ИмеютсяНастройки 	= СтрокиНастроек[0].ЕстьНастройки;
			СтрокаДокумент.ОбъектИнформационнойБазы 	= СтрокиНастроек[0].Наименование;
			СтрокаДокумент.РегистрироватьПервичныеДанныеПоБюджетированию = СтрокиНастроек[0].РегистрироватьПервичныеДанныеПоБюджетированию;
			Для Каждого СтрокаНастроек Из СтрокиНастроек Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаНастроек.НаборШаблонов) Тогда
					Продолжить;
				КонецЕсли;
				СтрокаПравил = СтрокаДокумент.Строки.Добавить();
				СтрокаПравил.ВидСтроки 	= ?(ТипЗнч(СтрокаНастроек.НаборШаблонов)=Тип("СправочникСсылка.фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах"),Перечисления.фин_ВидыСтрокПорталаНастройкиФД.НаборШаблонов,?(ТипЗнч(СтрокаНастроек.НаборШаблонов)=Тип("СправочникСсылка.фин_СхемыОтраженияФактическихДанных"),Перечисления.фин_ВидыСтрокПорталаНастройкиФД.Шаблон,Перечисления.фин_ВидыСтрокПорталаНастройкиФД.ФиксированноеПравило));
				СтрокаПравил.Картинка 	= ?(ТипЗнч(СтрокаНастроек.НаборШаблонов)=Тип("СправочникСсылка.фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах"),6,?(ТипЗнч(СтрокаНастроек.НаборШаблонов)=Тип("СправочникСсылка.фин_СхемыОтраженияФактическихДанных"),10,9));
				СтрокаПравил.Ссылка		= СтрокаНастроек.НаборШаблонов;
				СтрокаПравил.ЭтоНастройкаПримененияСхем = Истина;
				СтрокаПравил.ИспользоватьСовместноСШаблонамиРегистров = СтрокаНастроек.ИспользоватьСовместноСШаблонамиРегистров;
				СтрокаПравил.Период 					= СтрокаНастроек.Период;
				СтрокаПравил.ВладелецНастроек 			= СтрокаДокумент.Ссылка;
				СтрокаПравил.ОбъектИнформационнойБазы 	= СтрокаНастроек.НаборШаблонов;
				СтрокаПравил.ЭтоДокументы				= Истина;
				Если ТипЗнч(СтрокаНастроек.НаборШаблонов)=Тип("СправочникСсылка.фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах") Тогда
					ТаблицаПравилНабора = СтрокаНастроек.НаборШаблонов.НаборШаблонов;
					Для Каждого СтрокаНабора Из ТаблицаПравилНабора Цикл
						СтрокаПодПравил = СтрокаПравил.Строки.Добавить();
						СтрокаПодПравил.ВидСтроки 	= Перечисления.фин_ВидыСтрокПорталаНастройкиФД.Шаблон;
						СтрокаПодПравил.Картинка 	= ?(СтрокаНабора.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.Всегда,10,11);
						СтрокаПодПравил.Ссылка		= СтрокаНабора.Схема;
						СтрокаПодПравил.ВладелецНастроек 			= СтрокаДокумент.Ссылка;
						СтрокаПодПравил.ОбъектИнформационнойБазы 	= СтрокаНабора.Схема;
						СтрокаПодПравил.УсловиеПримененияШаблона 	= СтрокаНабора.УсловиеПримененияШаблона;
						СтрокаПодПравил.СпособИспользования 		= СтрокаНабора.СпособИспользования;
						СтрокаПодПравил.ЭтоДокументы				= Истина;
						ОбработатьВыводПравилШаблона(СтрокаПодПравил,ТаблицаГруппПравилШаблона,ТаблицаПравилШаблона);
					КонецЦикла;
				ИначеЕсли ТипЗнч(СтрокаНастроек.НаборШаблонов)=Тип("СправочникСсылка.фин_СхемыОтраженияФактическихДанных") Тогда
					ОбработатьВыводПравилШаблона(СтрокаПравил,ТаблицаГруппПравилШаблона,ТаблицаПравилШаблона);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;

	
	СтрокаДокументы.Строки.Сортировать("ОбъектИнформационнойБазы ВОЗР");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_КлассификаторРегистров.Ссылка,
		|	фин_КлассификаторРегистров.ПрограммныйИдентификатор,
		|	фин_КлассификаторРегистров.РегистрироватьПервичныеДанныеПоБюджетированию,
		|	фин_КлассификаторРегистров.ВидРегистра,
		|	фин_ПрименениеСхемОтраженияФактическихДанных.Схема КАК НаборШаблонов,
		|	фин_ПрименениеСхемОтраженияФактическихДанных.Период,
		|	ВЫБОР
		|		КОГДА НЕ фин_ПрименениеСхемОтраженияФактическихДанных.Схема ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьНастройки,
		|	фин_КлассификаторРегистров.Наименование
		|ИЗ
		|	Справочник.фин_КлассификаторРегистров КАК фин_КлассификаторРегистров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_ПрименениеСхемОтраженияФактическихДанных КАК фин_ПрименениеСхемОтраженияФактическихДанных
		|		ПО фин_КлассификаторРегистров.Ссылка = фин_ПрименениеСхемОтраженияФактическихДанных.ОбъектИнформационнойБазы";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаНастроекРегистры = РезультатЗапроса.Выгрузить();
	
	Регистры = Новый Массив;
	Регистры.Добавить(Перечисления.фин_ВидыРегистровСистемы.РегистрыБухгалтерии);
	Регистры.Добавить(Перечисления.фин_ВидыРегистровСистемы.РегистрыНакопления);
	Регистры.Добавить(Перечисления.фин_ВидыРегистровСистемы.РегистрыСведений);
	Регистры.Добавить(Перечисления.фин_ВидыРегистровСистемы.РегистрыРасчета);
	
	Для Каждого ВидРегистров Из Регистры Цикл
		ГруппаМетаданных = Метаданные[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВидРегистров)];
		СтрокаРегистры = Дерево.Строки.Добавить();
		СтрокаРегистры.ОбъектИнформационнойБазы = ВидРегистров;
		СтрокаРегистры.ВидСтроки = Перечисления.фин_ВидыСтрокПорталаНастройкиФД.ГруппаОбъектов;
		СтрокаРегистры.Картинка = 0;
		
		Для Каждого Регистр Из ГруппаМетаданных Цикл
			Если НЕ фин_РегистрацияФактическихДанныхПоБюджетированию.ОпределитьВозможностьРегистрацииФактаРегистром(Регистр.Имя,ВидРегистров) Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ВсеОбъекты Тогда
				СтрокиНастроек = ТаблицаНастроекРегистры.НайтиСтроки(Новый Структура("ПрограммныйИдентификатор",Регистр.Имя));
				Если СтрокиНастроек.Количество()>0 Тогда
					Если НЕ СтрокиНастроек[0].ЕстьНастройки Тогда
						Продолжить;
					КонецЕсли;
				Иначе
					Продолжить;	
				КонецЕсли;
			КонецЕсли;
			СтрокаДокумент = СтрокаРегистры.Строки.Добавить();
			СтрокаДокумент.ОбъектИнформационнойБазы = Регистр.Синоним;
			СтрокаДокумент.ПрограммныйИдентификатор = Регистр.Имя;
			СтрокаДокумент.ВидРегистра 				= ВидРегистров;
			СтрокаДокумент.ВидСтроки 				= Перечисления.фин_ВидыСтрокПорталаНастройкиФД.Регистр;
			СтрокаДокумент.Картинка 				= 2;
			СтрокиНастроек = ТаблицаНастроекРегистры.НайтиСтроки(Новый Структура("ПрограммныйИдентификатор",Регистр.Имя));
			Если СтрокиНастроек.Количество()>0 Тогда
				СтрокаДокумент.Ссылка 				= СтрокиНастроек[0].Ссылка;
				СтрокаДокумент.ИмеютсяНастройки 	= СтрокиНастроек[0].ЕстьНастройки;
				СтрокаДокумент.ОбъектИнформационнойБазы 	= СтрокиНастроек[0].Наименование;
				СтрокаДокумент.РегистрироватьПервичныеДанныеПоБюджетированию = СтрокиНастроек[0].РегистрироватьПервичныеДанныеПоБюджетированию;
				Для Каждого СтрокаНастроек Из СтрокиНастроек Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаНастроек.НаборШаблонов) Тогда
						Продолжить;
					КонецЕсли;
					СтрокаПравил = СтрокаДокумент.Строки.Добавить();
					СтрокаПравил.ВидСтроки 					= Перечисления.фин_ВидыСтрокПорталаНастройкиФД.Шаблон;
					СтрокаПравил.Картинка 					= 10;
					СтрокаПравил.Ссылка 					= СтрокаНастроек.НаборШаблонов;
					СтрокаПравил.ЭтоНастройкаПримененияСхем = Истина;
					СтрокаПравил.Период 					= СтрокаНастроек.Период;
					СтрокаПравил.ВладелецНастроек 			= СтрокаДокумент.Ссылка;
					СтрокаПравил.ОбъектИнформационнойБазы 	= СтрокаНастроек.НаборШаблонов; 
					ОбработатьВыводПравилШаблона(СтрокаПравил,ТаблицаГруппПравилШаблона,ТаблицаПравилШаблона);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидРегистров",ВидРегистров);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_КлассификаторРегистров.ПрограммныйИдентификатор,
			|	фин_КлассификаторРегистров.НаименованиеПолное,
			|	фин_КлассификаторРегистров.ВидРегистра
			|ИЗ
			|	Справочник.фин_КлассификаторРегистров КАК фин_КлассификаторРегистров
			|ГДЕ
			|	фин_КлассификаторРегистров.ПометкаУдаления = ЛОЖЬ
			|	И фин_КлассификаторРегистров.РегистрироватьПервичныеДанныеПоБюджетированию
			|	И фин_КлассификаторРегистров.ВидРегистра = &ВидРегистров";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ГруппаМетаданных.Найти(ВыборкаДетальныеЗаписи.ПрограммныйИдентификатор)<>Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ВсеОбъекты Тогда
				СтрокиНастроек = ТаблицаНастроекРегистры.НайтиСтроки(Новый Структура("ПрограммныйИдентификатор",ВыборкаДетальныеЗаписи.ПрограммныйИдентификатор));
				Если СтрокиНастроек.Количество()>0 Тогда
					Если НЕ СтрокиНастроек[0].ЕстьНастройки Тогда
						Продолжить;
					КонецЕсли;
				Иначе
					Продолжить;	
				КонецЕсли;
			КонецЕсли;
			СтрокаДокумент = СтрокаРегистры.Строки.Добавить();
			СтрокаДокумент.ОбъектИнформационнойБазы = ВыборкаДетальныеЗаписи.НаименованиеПолное;
			СтрокаДокумент.ПрограммныйИдентификатор = ВыборкаДетальныеЗаписи.ПрограммныйИдентификатор;
			СтрокаДокумент.ВидРегистра 				= ВидРегистров;
			СтрокаДокумент.ВидСтроки 				= Перечисления.фин_ВидыСтрокПорталаНастройкиФД.Регистр;
			СтрокаДокумент.Картинка 				= 2;
			СтрокиНастроек = ТаблицаНастроекРегистры.НайтиСтроки(Новый Структура("ПрограммныйИдентификатор",ВыборкаДетальныеЗаписи.ПрограммныйИдентификатор));
			Если СтрокиНастроек.Количество()>0 Тогда
				СтрокаДокумент.Ссылка 				= СтрокиНастроек[0].Ссылка;
				СтрокаДокумент.ИмеютсяНастройки 	= СтрокиНастроек[0].ЕстьНастройки;
				СтрокаДокумент.ОбъектИнформационнойБазы 	= СтрокиНастроек[0].Наименование;
				СтрокаДокумент.РегистрироватьПервичныеДанныеПоБюджетированию = СтрокиНастроек[0].РегистрироватьПервичныеДанныеПоБюджетированию;
				Для Каждого СтрокаНастроек Из СтрокиНастроек Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаНастроек.НаборШаблонов) Тогда
						Продолжить;
					КонецЕсли;
					СтрокаПравил = СтрокаДокумент.Строки.Добавить();
					СтрокаПравил.ВидСтроки 					= Перечисления.фин_ВидыСтрокПорталаНастройкиФД.Шаблон;
					СтрокаПравил.Картинка 					= 10;
					СтрокаПравил.Ссылка 					= СтрокаНастроек.НаборШаблонов;
					СтрокаПравил.ЭтоНастройкаПримененияСхем = Истина;
					СтрокаПравил.Период 					= СтрокаНастроек.Период;
					СтрокаПравил.ВладелецНастроек 			= СтрокаДокумент.Ссылка;
					СтрокаПравил.ОбъектИнформационнойБазы 	= СтрокаНастроек.НаборШаблонов; 
					ОбработатьВыводПравилШаблона(СтрокаПравил,ТаблицаГруппПравилШаблона,ТаблицаПравилШаблона);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;

		СтрокаРегистры.Строки.Сортировать("ОбъектИнформационнойБазы ВОЗР");
	
	
	КонецЦикла;
	
	ЗначениеВДанныеФормы(Дерево,ДеревоНастроек);
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыводПравилШаблона(СтрокаВывода,ТаблицаГруппПравилШаблона,ТаблицаПравилШаблона)
	ГруппыПравил = ТаблицаГруппПравилШаблона.Скопировать(Новый Структура("Ссылка",СтрокаВывода.Ссылка));
	ГруппыПравил.Сортировать("Порядок");
	Для Каждого СтрокаГруппа Из ГруппыПравил Цикл
		СтрокаПравил = СтрокаВывода.Строки.Добавить();
		СтрокаПравил.ВидСтроки 					= Перечисления.фин_ВидыСтрокПорталаНастройкиФД.ГруппаПравил;
		СтрокаПравил.Картинка 					= ?(СтрокаГруппа.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.Всегда,14,15);
		СтрокаПравил.Ссылка 					= СтрокаВывода.Ссылка;
		СтрокаПравил.ВладелецНастроек 			= СтрокаВывода.ВладелецНастроек;
		СтрокаПравил.ОбъектИнформационнойБазы 	= СтрокаГруппа.Ссылка; 
		СтрокаПравил.УсловиеПримененияПравила 	= СтрокаГруппа.Условие;
		СтрокаПравил.СпособИспользования 		= СтрокаГруппа.СпособИспользования;
		СтрокаПравил.ВидДанных 					= СтрокаГруппа.ВидДанных;
		СтрокаПравил.ИмяИсточника 				= СтрокаГруппа.ИмяИсточника;
		СтрокаПравил.ПредставлениеИсточника 	= СтрокаГруппа.ПредставлениеИсточника;
		СтрокаПравил.ЭтоДокументы				= СтрокаВывода.ЭтоДокументы;
		ПравилаГруппы = ТаблицаПравилШаблона.Скопировать(Новый Структура("Ссылка",СтрокаВывода.Ссылка));
		ПравилаГруппы.Сортировать("НомерСтроки");
		Для Каждого СтрокаПравилГруппы Из ПравилаГруппы Цикл
			СтрокаПравил = СтрокаВывода.Строки.Добавить();
			СтрокаПравил.ВидСтроки 					= Перечисления.фин_ВидыСтрокПорталаНастройкиФД.ГруппаПравил;
			СтрокаПравил.Картинка 					= ?(СтрокаГруппа.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.Всегда,14,15);
			СтрокаПравил.Ссылка 					= СтрокаВывода.Ссылка;
			СтрокаПравил.ВладелецНастроек 			= СтрокаВывода.ВладелецНастроек;
			СтрокаПравил.ОбъектИнформационнойБазы 	= СтрокаГруппа.Ссылка; 
			СтрокаПравил.УсловиеПримененияПравила 	= СтрокаГруппа.Условие;
			СтрокаПравил.СпособИспользования 		= СтрокаГруппа.СпособИспользования;
			СтрокаПравил.ВидДанных 					= СтрокаГруппа.ВидДанных;
			СтрокаПравил.ИмяИсточника 				= СтрокаГруппа.ИмяИсточника;
			СтрокаПравил.ПредставлениеИсточника 	= СтрокаГруппа.ПредставлениеИсточника;
			СтрокаПравил.ЭтоДокументы				= СтрокаВывода.ЭтоДокументы;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВсеОбъектыПриИзменении(Элемент)
	ЗаполнитьДеревоОбъектов();
	Для Каждого мЭлемент Из ДеревоНастроек.ПолучитьЭлементы() Цикл
		Элементы.ДеревоНастроек.Развернуть(мЭлемент.ПолучитьИдентификатор(),Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекОбъектИнформационнойБазыОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Попытка
		ПоказатьЗначение(,Элементы.ДеревоНастроек.ТекущиеДанные.Ссылка);
	Исключение
		
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправочник(Элемент)
	ИмяФормыОбъекта = "Справочник."+ОтсечьЦифры(СтрЗаменить(Элемент.Имя,"Декорация_",""))+".ФормаСписка";
	Попытка	
		ОткрытьФорму(ИмяФормыОбъекта,,,Новый УникальныйИдентификатор);
	Исключение
		ПоказатьПредупреждение(,ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРегистрСведений(Элемент)
	ИмяФормыОбъекта = "РегистрСведений."+ОтсечьЦифры(СтрЗаменить(Элемент.Имя,"Декорация_",""))+".ФормаСписка";
	Попытка	
		ОткрытьФорму(ИмяФормыОбъекта,,,Новый УникальныйИдентификатор);
	Исключение
		ПоказатьПредупреждение(,ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбработку(Элемент)
	ИмяФормыОбъекта = "Обработка."+ОтсечьЦифры(СтрЗаменить(Элемент.Имя,"Декорация_",""))+".Форма";
	Попытка	
		ОткрытьФорму(ИмяФормыОбъекта,,,Новый УникальныйИдентификатор);
	Исключение
		ПоказатьПредупреждение(,ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчет(Элемент)
	ИмяФормыОбъекта = "Отчет."+ОтсечьЦифры(СтрЗаменить(Элемент.Имя,"Декорация_",""))+".Форма";
	Попытка	
		ОткрытьФорму(ИмяФормыОбъекта,,,Новый УникальныйИдентификатор);
	Исключение
		ПоказатьПредупреждение(,ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Функция ОтсечьЦифры(ИсходнаяСтрока)

	ФинальнаяСтрока = ИсходнаяСтрока;
	
	КодСимвола = КодСимвола(Прав(ИсходнаяСтрока, 1));
	
	Если (КодСимвола >= 48 И КодСимвола <= 57) Тогда
		ФинальнаяСтрока = Лев(ИсходнаяСтрока, СтрДлина(ИсходнаяСтрока) - 1);
	КонецЕсли; 
	
	КодСимвола = КодСимвола(Прав(ФинальнаяСтрока, 1));
	
	Если (КодСимвола >= 48 И КодСимвола <= 57) Тогда
		ФинальнаяСтрока = Лев(ФинальнаяСтрока, СтрДлина(ФинальнаяСтрока) - 1);
	КонецЕсли; 
	
	Возврат ФинальнаяСтрока;
		
КонецФункции // ОтсечьЦифры()

&НаКлиенте
Процедура Декорация_Группа(Элемент)
	ИмяСтраницы = СтрЗаменить(Элемент.Имя,"Декорация_","");
	Элементы.Страницы.ТекущаяСтраница=Элементы.Страницы.ПодчиненныеЭлементы[ИмяСтраницы];
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыКлассификатора(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	Отказ = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗаписьВидаДокумента" Тогда
		ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
		СтрокаКОбработке = Неопределено;
		Если ТекущиеДанные<>Неопределено И ТекущиеДанные.ПрограммныйИдентификатор = Параметр.ПрограммныйИдентификатор Тогда
			СтрокаКОбработке= ТекущиеДанные;
		Иначе
			Для Каждого СтрокаДанных Из ДеревоНастроек.ПолучитьЭлементы() Цикл
				Если СтрокаДанных.ОбъектИнформационнойБазы = "Документы" Тогда
					Для Каждого СтрокаДанныхПодчиненная Из СтрокаДанных.ПолучитьЭлементы() Цикл
						Если СтрокаДанныхПодчиненная.ПрограммныйИдентификатор = Параметр.ПрограммныйИдентификатор Тогда
							СтрокаКОбработке = СтрокаДанныхПодчиненная;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если СтрокаКОбработке<>Неопределено Тогда
			СтрокаКОбработке.Ссылка = Параметр.Объект;
			СтрокаКОбработке.ОбъектИнформационнойБазы = Параметр.Наименование;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаписьВидаРегистра" Тогда
		ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
		СтрокаКОбработке = Неопределено;
		Если ТекущиеДанные<>Неопределено И ТекущиеДанные.ПрограммныйИдентификатор = Параметр.ПрограммныйИдентификатор И ТекущиеДанные.ВидРегистра = Параметр.ВидРегистра Тогда
			СтрокаКОбработке= ТекущиеДанные;
		Иначе
			Для Каждого СтрокаДанных Из ДеревоНастроек.ПолучитьЭлементы() Цикл
					Для Каждого СтрокаДанныхПодчиненная Из СтрокаДанных.ПолучитьЭлементы() Цикл
						Если СтрокаДанныхПодчиненная.ПрограммныйИдентификатор = Параметр.ПрограммныйИдентификатор И СтрокаДанныхПодчиненная.ВидРегистра = Параметр.ВидРегистра Тогда
							СтрокаКОбработке = СтрокаДанныхПодчиненная;
						КонецЕсли;
					КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		Если СтрокаКОбработке<>Неопределено Тогда
			СтрокаКОбработке.Ссылка = Параметр.Объект;
			СтрокаКОбработке.ОбъектИнформационнойБазы = Параметр.Наименование;
			СтрокаКОбработке.ВидРегистра = Параметр.ВидРегистра;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаписьСхемыОтражения" ИЛИ ИмяСобытия = "ЗаписьНабораСхемОтражения" Тогда
		ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
		СтрокаКОбработке = Неопределено;
		Если ТекущиеДанные<>Неопределено И ТекущиеДанные.Ссылка = Параметр.Объект Тогда
			СтрокаКОбработке= ТекущиеДанные;
		Иначе
			Для Каждого СтрокаДанных Из ДеревоНастроек.ПолучитьЭлементы() Цикл
					Для Каждого СтрокаДанныхПодчиненная Из СтрокаДанных.ПолучитьЭлементы() Цикл
						Если СтрокаДанныхПодчиненная.Ссылка = Параметр.Объект Тогда
							СтрокаКОбработке = СтрокаДанныхПодчиненная;
						КонецЕсли;
					КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		Если СтрокаКОбработке<>Неопределено Тогда
			СтрокаКОбработке.Ссылка = Параметр.Объект;
			СтрокаКОбработке.ОбъектИнформационнойБазы = Параметр.Наименование;
			Если ИмяСобытия = "ЗаписьНабораСхемОтражения" Тогда
				СтрокаКОбработке.ПолучитьЭлементы().Очистить();
				ОбновитьСоставНабораШаблонов(Параметр.Объект,СтрокаКОбработке.ПолучитьИдентификатор());
				Элементы.ДеревоНастроек.Развернуть(СтрокаКОбработке.ПолучитьИдентификатор(),Истина);
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьДеревоПравил();
	ИначеЕсли ИмяСобытия = "ЗаписьПравила" Тогда
		Если Параметр.ОбъектИБ = ОбъектИБ Тогда
			ТекущиеДанные = Элементы.ДеревоПравил.ТекущиеДанные;
			СтрокаКОбработке = Неопределено;
			Если ТекущиеДанные<>Неопределено И ТекущиеДанные.Правило = Параметр.Объект Тогда
				СтрокаКОбработке= ТекущиеДанные;
			Иначе
				Для Каждого СтрокаДанных Из ДеревоПравил.ПолучитьЭлементы() Цикл
					Если СтрокаДанных.Правило = Параметр.Объект Тогда
						СтрокаКОбработке = СтрокаДанных;
					ИначеЕсли СтрокаДанных.ЭтоГруппа И Параметр.Владелец = СтрокаДанных.ГруппаПравил Тогда
						Для Каждого СтрокаДанныхПодчиненная Из СтрокаДанных.ПолучитьЭлементы() Цикл
							Если СтрокаДанныхПодчиненная.Правило = Параметр.Объект Тогда
								СтрокаКОбработке = СтрокаДанныхПодчиненная;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если СтрокаКОбработке<>Неопределено Тогда
				ПараметрыПравила = ПараметрыПравила(Параметр.Объект);
				ИзмененПорядок = ПараметрыПравила.Порядок <> СтрокаКОбработке.Порядок;
				ИзмененаГруппа = ПараметрыПравила.ГруппаПравил <> СтрокаКОбработке.ГруппаПравил;
				Если ИзмененаГруппа Тогда
					ЗаполнитьДеревоПравил();
				Иначе
				ЗаполнитьЗначенияСвойств(СтрокаКОбработке,ПараметрыПравила);
					Если ИзмененПорядок Тогда
						ВсеЭлементы = ?(СтрокаКОбработке.ПолучитьРодителя()=Неопределено,ДеревоПравил,СтрокаКОбработке.ПолучитьРодителя()).ПолучитьЭлементы();
						ИндексСтроки = ВсеЭлементы.Индекс(СтрокаКОбработке);
						КоличествоЭлементов 	= ВсеЭлементы.Количество();
						ПредшествующийПорядок 	= Неопределено;
						СледующийПорядок 		= Неопределено;
						Для Каждого ЭлементДерева Из ВсеЭлементы Цикл
							Если ЭлементДерева<> СтрокаКОбработке И НЕ ЭлементДерева.ЭтоГруппа Тогда
								Если ЭлементДерева.Порядок < ПараметрыПравила.Порядок Тогда
									ПредшествующийПорядок = ?(ПредшествующийПорядок=Неопределено,ЭлементДерева.Порядок,Макс(ПредшествующийПорядок,ЭлементДерева.Порядок));
								ИначеЕсли ЭлементДерева.Порядок > ПараметрыПравила.Порядок Тогда
									СледующийПорядок = ?(СледующийПорядок=Неопределено,ЭлементДерева.Порядок,Мин(СледующийПорядок,ЭлементДерева.Порядок));
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						Если ПредшествующийПорядок<>Неопределено ИЛИ СледующийПорядок<>Неопределено Тогда
							Если ПредшествующийПорядок = Неопределено Тогда // если нужно сдвинуть в самый конец
								Если ИндексСтроки<>0 Тогда
									ВсеЭлементы.Сдвинуть(ИндексСтроки,-ИндексСтроки);
								КонецЕсли;
							ИначеЕсли СледующийПорядок = Неопределено Тогда // если нужно сдвинуть в самый конец
								Если ИндексСтроки<>КоличествоЭлементов-1 Тогда
									ВсеЭлементы.Сдвинуть(ИндексСтроки,КоличествоЭлементов-1-ИндексСтроки);
								КонецЕсли;
							Иначе
								Для Каждого ЭлементДерева Из ВсеЭлементы Цикл
									Если ЭлементДерева<> СтрокаКОбработке И ЭлементДерева.ЭтоГруппа=Ложь И ЭлементДерева.Порядок = СледующийПорядок Тогда
										ВсеЭлементы.Сдвинуть(ИндексСтроки,ВсеЭлементы.Индекс(ЭлементДерева)-ИндексСтроки);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ЗаполнитьДеревоПравил();
			КонецЕсли;
		Иначе	
			ТекущиеДанные = Элементы.ДеревоПравил.ТекущиеДанные;
			СтрокаКОбработке = Неопределено;
			Если ТекущиеДанные<>Неопределено И ТекущиеДанные.Правило = Параметр.Объект Тогда
				СтрокаКОбработке= ТекущиеДанные;
			Иначе
				Для Каждого СтрокаДанных Из ДеревоПравил.ПолучитьЭлементы() Цикл
					Если СтрокаДанных.Правило = Параметр.Объект Тогда
						СтрокаКОбработке = СтрокаДанных;
					ИначеЕсли СтрокаДанных.ЭтоГруппа Тогда
						Для Каждого СтрокаДанныхПодчиненная Из СтрокаДанных.ПолучитьЭлементы() Цикл
							Если СтрокаДанныхПодчиненная.Правило = Параметр.Объект Тогда
								СтрокаКОбработке = СтрокаДанныхПодчиненная;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если СтрокаКОбработке<>Неопределено Тогда
				РодительСтроки = СтрокаКОбработке.ПолучитьРодителя();
				Если РодительСтроки = Неопределено Тогда
					РодительСтроки = ДеревоПравил;
				КонецЕсли;
				РодительСтроки.ПолучитьЭлементы().Удалить(СтрокаКОбработке);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаписьГруппыПравил" Тогда
		Если Параметр.Владелец = Схема Тогда
			ТекущиеДанные = Элементы.ДеревоПравил.ТекущиеДанные;
			СтрокаКОбработке = Неопределено;
			Если ТекущиеДанные<>Неопределено И ТекущиеДанные.ГруппаПравил = Параметр.Объект И ТекущиеДанные.ЭтоГруппа Тогда
				СтрокаКОбработке= ТекущиеДанные;
			Иначе
				Для Каждого СтрокаДанных Из ДеревоПравил.ПолучитьЭлементы() Цикл
					Если СтрокаДанных.ГруппаПравил = Параметр.Объект И СтрокаДанных.ЭтоГруппа Тогда
						СтрокаКОбработке = СтрокаДанных;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если СтрокаКОбработке<>Неопределено Тогда
				ПараметрыГруппыПравил = ПараметрыГруппыПравил(Параметр.Объект);
				ИзмененПорядок = ПараметрыГруппыПравил.Порядок <> СтрокаКОбработке.Порядок;
				ЗаполнитьЗначенияСвойств(СтрокаКОбработке,ПараметрыГруппыПравил);
				ОбновитьДанныеГруппы(СтрокаКОбработке.ПолучитьИдентификатор());
				Элементы.ДеревоПравил.Развернуть(СтрокаКОбработке.ПолучитьИдентификатор(),Истина);
				Если ИзмененПорядок Тогда
					ВсеЭлементы = ДеревоПравил.ПолучитьЭлементы();
					ИндексСтроки = ВсеЭлементы.Индекс(СтрокаКОбработке);
					КоличествоЭлементов 	= ВсеЭлементы.Количество();
					ПредшествующийПорядок 	= Неопределено;
					СледующийПорядок 		= Неопределено;
					Для Каждого ЭлементДерева Из ВсеЭлементы Цикл
						Если ЭлементДерева<> СтрокаКОбработке И ЭлементДерева.ЭтоГруппа Тогда
							Если ЭлементДерева.Порядок < ПараметрыГруппыПравил.Порядок Тогда
								ПредшествующийПорядок = ?(ПредшествующийПорядок=Неопределено,ЭлементДерева.Порядок,Макс(ПредшествующийПорядок,ЭлементДерева.Порядок));
							ИначеЕсли ЭлементДерева.Порядок > ПараметрыГруппыПравил.Порядок Тогда
								СледующийПорядок = ?(СледующийПорядок=Неопределено,ЭлементДерева.Порядок,Мин(СледующийПорядок,ЭлементДерева.Порядок));
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					Если ПредшествующийПорядок<>Неопределено ИЛИ СледующийПорядок<>Неопределено Тогда
						Если СледующийПорядок = Неопределено Тогда // если нужно сдвинуть в самый конец
							Если ИндексСтроки<>КоличествоЭлементов-1 Тогда
								ВсеЭлементы.Сдвинуть(ИндексСтроки,КоличествоЭлементов-1-ИндексСтроки);
							КонецЕсли;
						Иначе
							Для Каждого ЭлементДерева Из ВсеЭлементы Цикл
								Если ЭлементДерева<> СтрокаКОбработке И ЭлементДерева.ЭтоГруппа И ЭлементДерева.Порядок = СледующийПорядок Тогда
									ВсеЭлементы.Сдвинуть(ИндексСтроки,ВсеЭлементы.Индекс(ЭлементДерева)-ИндексСтроки);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ЗаполнитьДеревоПравил();
			КонецЕсли;
		Иначе	
			ТекущиеДанные = Элементы.ДеревоПравил.ТекущиеДанные;
			СтрокаКОбработке = Неопределено;
			Если ТекущиеДанные<>Неопределено И ТекущиеДанные.ГруппаПравил = Параметр.Объект И ТекущиеДанные.ЭтоГруппа Тогда
				СтрокаКОбработке= ТекущиеДанные;
			Иначе
				Для Каждого СтрокаДанных Из ДеревоПравил.ПолучитьЭлементы() Цикл
					Если СтрокаДанных.ГруппаПравил = Параметр.Объект И СтрокаДанных.ЭтоГруппа Тогда
						СтрокаКОбработке = СтрокаДанных;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если СтрокаКОбработке<>Неопределено Тогда
				РодительСтроки = СтрокаКОбработке.ПолучитьРодителя();
				Если РодительСтроки = Неопределено Тогда
					РодительСтроки = ДеревоПравил;
				КонецЕсли;
				РодительСтроки.ПолучитьЭлементы().Удалить(СтрокаКОбработке);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыПравила(Правило)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ПравилаОтраженияФактическихДанных.Ссылка КАК Правило,
		|	фин_ПравилаОтраженияФактическихДанных.Владелец КАК ГруппаПравил,
		|	фин_ПравилаОтраженияФактическихДанных.Наименование,
		|	фин_ПравилаОтраженияФактическихДанных.Порядок КАК Порядок,
		|	фин_ПравилаОтраженияФактическихДанных.ИмяИсточника,
		|	фин_ПравилаОтраженияФактическихДанных.ПредставлениеИсточника,
		|	фин_ПравилаОтраженияФактическихДанных.Условие,
		|	фин_ПравилаОтраженияФактическихДанных.СпособИспользования.Порядок КАК СпособИспользования,
		|	фин_ПравилаОтраженияФактическихДанных.ФинансовыйПоказательИсточник,
		|	фин_ПравилаОтраженияФактическихДанных.ФинансовыйПоказательТипИсточника,
		|	фин_ПравилаОтраженияФактическихДанных.ПрогнозноеЗначение,
		|	фин_ПравилаОтраженияФактическихДанных.Сторно,
		|	фин_ПравилаОтраженияФактическихДанных.ВидДанных.Порядок КАК ВидДанных
		|ИЗ
		|	Справочник.фин_ПравилаОтраженияФактическихДанных КАК фин_ПравилаОтраженияФактическихДанных
		|ГДЕ
		|	фин_ПравилаОтраженияФактическихДанных.Ссылка = &Правило";
	
	Запрос.УстановитьПараметр("Правило", Правило);
	
	СтруктураРезультат = Новый Структура("Правило,ГруппаПравил,Порядок,ПредставлениеИсточника,Условие,СпособИспользования,ФинансовыйПоказательИсточник,ФинансовыйПоказательТипИсточника,ВидДанных,ПрогнозноеЗначение,Сторно");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРезультат,Выборка);	
	КонецЕсли;
	Возврат СтруктураРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыГруппыПравил(Правило)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ГруппыПравилОтраженияФактическихДанных.Ссылка КАК ГруппаПравил,
		|	фин_ГруппыПравилОтраженияФактическихДанных.Наименование,
		|	фин_ГруппыПравилОтраженияФактическихДанных.ИмяИсточника,
		|	фин_ГруппыПравилОтраженияФактическихДанных.ПредставлениеИсточника,
		|	фин_ГруппыПравилОтраженияФактическихДанных.Условие,
		|	фин_ГруппыПравилОтраженияФактическихДанных.Порядок КАК Порядок,
		|	ИСТИНА КАК ЭтоГруппа,
		|	фин_ГруппыПравилОтраженияФактическихДанных.ВидДанных.Порядок КАК ВидДанных,
		|	фин_ГруппыПравилОтраженияФактическихДанных.СпособИспользования.Порядок КАК СпособИспользования
		|ИЗ
		|	Справочник.фин_ГруппыПравилОтраженияФактическихДанных КАК фин_ГруппыПравилОтраженияФактическихДанных
		|ГДЕ
		|	фин_ГруппыПравилОтраженияФактическихДанных.Ссылка = &Правило";
	
	Запрос.УстановитьПараметр("Правило", Правило);
	
	СтруктураРезультат = Новый Структура("Правило,ГруппаПравил,Порядок,ПредставлениеИсточника,Условие,СпособИспользования,ВидДанных,ЭтоГруппа");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРезультат,Выборка);	
	КонецЕсли;
	Возврат СтруктураРезультат;
КонецФункции

&НаКлиенте
Процедура ОткрытьНастройку(Команда)
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
	ИначеЕсли ТекущиеДанные.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокПорталаНастройкиФД.Документ") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытиеФормыКлассификатора",ЭтотОбъект,ТекущиеДанные.ПолучитьИдентификатор());
		Попытка	
			ОткрытьФорму("Справочник.фин_ВидыДокументов.ФормаОбъекта",Новый Структура("ЗначенияЗаполнения",Новый Структура("Наименование,ПрограммныйИдентификатор,НаименованиеПолное,РегистрироватьПервичныеДанныеПоБюджетированию",ТекущиеДанные.ОбъектИнформационнойБазы,ТекущиеДанные.ПрограммныйИдентификатор,ТекущиеДанные.ОбъектИнформационнойБазы,Истина)),ЭтотОбъект,УникальныйИдентификатор,?(ВОтдельныхОкнах,ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещения);
		Исключение
			ПоказатьПредупреждение(,ОписаниеОшибки());
		КонецПопытки;
	ИначеЕсли ТекущиеДанные.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокПорталаНастройкиФД.Регистр") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытиеФормыКлассификатора",ЭтотОбъект,ТекущиеДанные.ПолучитьИдентификатор());
		Попытка	
			ОткрытьФорму("Справочник.фин_КлассификаторРегистров.ФормаОбъекта",Новый Структура("ЗначенияЗаполнения",Новый Структура("Наименование,ПрограммныйИдентификатор,НаименованиеПолное,РегистрироватьПервичныеДанныеПоБюджетированию,ВидРегистра",ТекущиеДанные.ОбъектИнформационнойБазы,ТекущиеДанные.ПрограммныйИдентификатор,ТекущиеДанные.ОбъектИнформационнойБазы,Истина,ТекущиеДанные.ВидРегистра)),ЭтотОбъект,УникальныйИдентификатор,?(ВОтдельныхОкнах,ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещения);
		Исключение
			ПоказатьПредупреждение(,ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ЗаполнитьДеревоОбъектов();
	Для Каждого мЭлемент Из ДеревоНастроек.ПолучитьЭлементы() Цикл
		Элементы.ДеревоНастроек.Развернуть(мЭлемент.ПолучитьИдентификатор(),Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСведенияОПримененииСхемы(Команда)
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		Если ТекущиеДанные.ЭтоНастройкаПримененияСхем = Ложь Тогда
			ПоказатьПредупреждение(,"Необходимо выбрать строку со схемой отражения и датой начала применения");
		Иначе
			Если УдалитьЗаписи(ТекущиеДанные.ВладелецНастроек,ТекущиеДанные.Ссылка,ТекущиеДанные.Период) Тогда
				ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ТекущиеДанные);
			КонецЕсли;
			ЗаполнитьДеревоПравил();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция УдалитьЗаписи(ВладелецНастроек,Настройка,Период)
	НаборЗаписей = РегистрыСведений.фин_ПрименениеСхемОтраженияФактическихДанных.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектИнформационнойБазы.Установить(ВладелецНастроек);
	НаборЗаписей.Отбор.Период.Установить(Период);
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ДобавитьСхемуОтражения(Команда)
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		Если ТекущиеДанные.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокПорталаНастройкиФД.ГруппаОбъектов") Тогда
			ПоказатьПредупреждение(,"Необходимо выбрать строку с объектом базы, для которого вводятся настройки");
			Возврат;
		ИначеЕсли ТекущиеДанные.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокПорталаНастройкиФД.Документ") ИЛИ ТекущиеДанные.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокПорталаНастройкиФД.Регистр") Тогда
			СтрокаНастроек = ТекущиеДанные;
		Иначе
			СтрокаНастроек = ТекущиеДанные.ПолучитьРодителя();
			Пока НЕ (СтрокаНастроек.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокПорталаНастройкиФД.Документ") ИЛИ СтрокаНастроек.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокПорталаНастройкиФД.Регистр")) Цикл
				СтрокаНастроек = СтрокаНастроек.ПолучитьРодителя();
			КонецЦикла;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.Ссылка) Тогда
			СсылкаИБ = СоздатьСсылкуИБ(СтрокаНастроек.ВидСтроки,СтрокаНастроек.ОбъектИнформационнойБазы,СтрокаНастроек.ПрограммныйИдентификатор,СтрокаНастроек.ВидРегистра);
			Если СсылкаИБ = Неопределено Тогда
				 Возврат;
			 КонецЕсли;
			СтрокаНастроек.Ссылка = СсылкаИБ; 
		КонецЕсли;
		ОписаниеОповещенияСхема = Новый ОписаниеОповещения("ОписаниеОповещенияВыбораСхемы",ЭтотОбъект,Новый Структура("ПрограммныйИдентификатор,ВидРегистра",СтрокаНастроек.ПрограммныйИдентификатор,СтрокаНастроек.ВидРегистра));
		Попытка	
			ОткрытьФорму("Обработка.фин_ПорталНастройкиУчетаФактическихДанных.Форма.ФормаДобавленияСхемы",Новый Структура("ОбъектИБ,ЭтоДокументы,Набор",СтрокаНастроек.Ссылка,СтрокаНастроек.ЭтоДокументы,Ложь),ЭтотОбъект,УникальныйИдентификатор,?(ВОтдельныхОкнах,ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещенияСхема,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Исключение
			ПоказатьПредупреждение(,ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОповещенияВыбораСхемы(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия<>Неопределено Тогда
		ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
		СтрокаКОбработке = Неопределено;
		Если ТекущиеДанные<>Неопределено И ТекущиеДанные.ПрограммныйИдентификатор = ДополнительныеПараметры.ПрограммныйИдентификатор  И ТекущиеДанные.ВидРегистра = ДополнительныеПараметры.ВидРегистра Тогда
			СтрокаКОбработке= ТекущиеДанные;
		Иначе
			Для Каждого СтрокаДанных Из ДеревоНастроек.ПолучитьЭлементы() Цикл
					Для Каждого СтрокаДанныхПодчиненная Из СтрокаДанных.ПолучитьЭлементы() Цикл
						Если СтрокаДанныхПодчиненная.ПрограммныйИдентификатор = ДополнительныеПараметры.ПрограммныйИдентификатор И СтрокаДанныхПодчиненная.ВидРегистра = ДополнительныеПараметры.ВидРегистра Тогда
							СтрокаКОбработке = СтрокаДанныхПодчиненная;
						КонецЕсли;
					КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		Если СтрокаКОбработке<>Неопределено Тогда
			Если СоздатьЗаписи(СтрокаКОбработке.Ссылка,РезультатЗакрытия.Настройка,РезультатЗакрытия.Период,РезультатЗакрытия.ИспользоватьСовместноСШаблонамиРегистров) Тогда
				СтрокаКОбработке.ИмеютсяНастройки = Истина;
				НоваяСтрока = СтрокаКОбработке.ПолучитьЭлементы().Добавить();
				НоваяСтрока.ВидСтроки 	= ?(ТипЗнч(РезультатЗакрытия.Настройка)=Тип("СправочникСсылка.фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах"),ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокПорталаНастройкиФД.НаборШаблонов"),?(ТипЗнч(РезультатЗакрытия.Настройка)=Тип("СправочникСсылка.фин_СхемыОтраженияФактическихДанных"),ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокПорталаНастройкиФД.Шаблон"),ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокПорталаНастройкиФД.ФиксированноеПравило")));
				НоваяСтрока.Картинка 	= ?(ТипЗнч(РезультатЗакрытия.Настройка)=Тип("СправочникСсылка.фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах"),6,?(ТипЗнч(РезультатЗакрытия.Настройка)=Тип("СправочникСсылка.фин_СхемыОтраженияФактическихДанных"),10,9));
				НоваяСтрока.Ссылка 						= РезультатЗакрытия.Настройка;
				НоваяСтрока.ЭтоНастройкаПримененияСхем = Истина;
				НоваяСтрока.Период 						= РезультатЗакрытия.Период;
				НоваяСтрока.ВладелецНастроек 			= СтрокаКОбработке.Ссылка;
				НоваяСтрока.ОбъектИнформационнойБазы 	= РезультатЗакрытия.Настройка; 
				Если ТипЗнч(РезультатЗакрытия.Настройка)=Тип("СправочникСсылка.фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах") Тогда
					ОбновитьСоставНабораШаблонов(РезультатЗакрытия.Настройка,НоваяСтрока.ПолучитьИдентификатор());
				КонецЕсли;
				Элементы.ДеревоНастроек.Развернуть(СтрокаКОбработке.ПолучитьИдентификатор(),Истина);
				Элементы.ДеревоНастроек.ТекущаяСтрока = СтрокаКОбработке.ПолучитьИдентификатор();
				ЗаполнитьДеревоПравил();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставНабораШаблонов(НаборШаблонов,ИдентификаторСтроки)
	СтрокаПравил = ДеревоНастроек.НайтиПоИдентификатору(ИдентификаторСтроки);
	ТаблицаПравилНабора = НаборШаблонов.НаборШаблонов;
	Для Каждого СтрокаНабора Из ТаблицаПравилНабора Цикл
		СтрокаПодПравил = СтрокаПравил.ПолучитьЭлементы().Добавить();
		СтрокаПодПравил.ВидСтроки 	= Перечисления.фин_ВидыСтрокПорталаНастройкиФД.Шаблон;
		СтрокаПодПравил.Картинка 	= ?(СтрокаНабора.СпособИспользования = Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.Всегда,10,11);
		СтрокаПодПравил.Ссылка		= СтрокаНабора.Схема;
		СтрокаПодПравил.ВладелецНастроек 			= СтрокаПравил.ВладелецНастроек;
		СтрокаПодПравил.ОбъектИнформационнойБазы 	= СтрокаНабора.Схема;
		СтрокаПодПравил.УсловиеПримененияШаблона 	= СтрокаНабора.УсловиеПримененияШаблона;
		СтрокаПодПравил.СпособИспользования 		= СтрокаНабора.СпособИспользования;
		СтрокаПодПравил.ЭтоДокументы				= Истина;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьЗаписи(ВладелецНастроек,Настройка,Период,ИспользоватьСовместноСШаблонамиРегистров)
	НаборЗаписей = РегистрыСведений.фин_ПрименениеСхемОтраженияФактическихДанных.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектИнформационнойБазы.Установить(ВладелецНастроек);
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() >0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Уже имеется настройка с такой датой применения!");
		Возврат Ложь;
	КонецЕсли;
	НЗ = НаборЗаписей.Добавить();
	НЗ.ОбъектИнформационнойБазы = ВладелецНастроек;
	НЗ.Период = Период;
	НЗ.Схема = Настройка;
	НЗ.ИспользоватьСовместноСШаблонамиРегистров = ИспользоватьСовместноСШаблонамиРегистров;
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

&НаСервере
Функция СоздатьСсылкуИБ(ВидСтроки,Наименование,ПрограммныйИдентификатор,ВидРегистра)
	ЭлементСправочник = Справочники[?(ВидСтроки = Перечисления.фин_ВидыСтрокПорталаНастройкиФД.Регистр,"фин_КлассификаторРегистров","фин_ВидыДокументов")].СоздатьЭлемент();
	ЭлементСправочник.НаименованиеПолное = Наименование;
	ЭлементСправочник.Наименование = Наименование;
	ЭлементСправочник.РегистрироватьПервичныеДанныеПоБюджетированию=Истина;	
	ЭлементСправочник.ПрограммныйИдентификатор = ПрограммныйИдентификатор;
	Если ВидСтроки = Перечисления.фин_ВидыСтрокПорталаНастройкиФД.Регистр Тогда
		ЭлементСправочник.ВидРегистра = ВидРегистра;
	КонецЕсли;
	ЭлементСправочник.УстановитьНовыйКод();
	Попытка
		ЭлементСправочник.Записать();
		Возврат ЭлементСправочник.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ДеревоНастроекПериодПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		Если ТекущиеДанные.ЭтоНастройкаПримененияСхем = Ложь Тогда
			ПоказатьПредупреждение(,"Необходимо выбрать строку со схемой отражения и датой начала применения");
		Иначе
			УдалитьЗаписи(ТекущиеДанные.ВладелецНастроек,ТекущиеДанные.Ссылка,ПериодТекущий);
			СоздатьЗаписи(ТекущиеДанные.ВладелецНастроек,ТекущиеДанные.Ссылка,ТекущиеДанные.Период,ТекущиеДанные.ИспользоватьСовместноСШаблонамиРегистров);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ПериодТекущий = Элементы.ДеревоНастроек.ТекущиеДанные.Период;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Для Каждого мЭлемент Из ДеревоНастроек.ПолучитьЭлементы() Цикл
		Элементы.ДеревоНастроек.Развернуть(мЭлемент.ПолучитьИдентификатор(),Истина);
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ДеревоНастроекПриАктивизацииСтроки(Элемент)
	ЗаполнитьДеревоПравил();
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьНаборСхемОтражения(Команда)
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		Если ТекущиеДанные.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокПорталаНастройкиФД.ГруппаОбъектов") Тогда
			ПоказатьПредупреждение(,"Необходимо выбрать строку с документом, для которого вводятся настройки");
			Возврат;
		ИначеЕсли ТекущиеДанные.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокПорталаНастройкиФД.Регистр") Тогда
			ПоказатьПредупреждение(,"Необходимо выбрать строку с документом, для которого вводятся настройки");
			Возврат;
		ИначеЕсли ТекущиеДанные.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокПорталаНастройкиФД.Документ") Тогда
			СтрокаНастроек = ТекущиеДанные;
		Иначе
			СтрокаНастроек = ТекущиеДанные.ПолучитьРодителя();
			Пока НЕ (СтрокаНастроек.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокПорталаНастройкиФД.Документ") ИЛИ СтрокаНастроек.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокПорталаНастройкиФД.Регистр")) Цикл
				СтрокаНастроек = СтрокаНастроек.ПолучитьРодителя();
			КонецЦикла;
		КонецЕсли;
		Если СтрокаНастроек.ВидСтроки = ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокПорталаНастройкиФД.Регистр") Тогда
			ПоказатьПредупреждение(,"Необходимо выбрать строку с документом, для которого вводятся настройки");
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаНастроек.Ссылка) Тогда
			СсылкаИБ = СоздатьСсылкуИБ(СтрокаНастроек.ВидСтроки,СтрокаНастроек.ОбъектИнформационнойБазы,СтрокаНастроек.ПрограммныйИдентификатор,СтрокаНастроек.ВидРегистра);
			Если СсылкаИБ = Неопределено Тогда
				 Возврат;
			 КонецЕсли;
			СтрокаНастроек.Ссылка = СсылкаИБ; 
		КонецЕсли;
		ОписаниеОповещенияСхема = Новый ОписаниеОповещения("ОписаниеОповещенияВыбораСхемы",ЭтотОбъект,Новый Структура("ПрограммныйИдентификатор,ВидРегистра",СтрокаНастроек.ПрограммныйИдентификатор,СтрокаНастроек.ВидРегистра));
		Попытка	
			ОткрытьФорму("Обработка.фин_ПорталНастройкиУчетаФактическихДанных.Форма.ФормаДобавленияСхемы",Новый Структура("ОбъектИБ,ЭтоДокументы,Набор",СтрокаНастроек.Ссылка,СтрокаНастроек.ЭтоДокументы,Истина),ЭтотОбъект,УникальныйИдентификатор,?(ВОтдельныхОкнах,ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещенияСхема,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Исключение
			ПоказатьПредупреждение(,ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоПравил()
	ДеревоПравил.ПолучитьЭлементы().Очистить();
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ВидСтроки <> ПредопределенноеЗначение("Перечисление.фин_ВидыСтрокПорталаНастройкиФД.Шаблон") Тогда
		РазрешеноДобавление = Ложь;
		Возврат;
	КонецЕсли;
	РазрешеноДобавление = Истина;
	ЗаполнитьДеревоПравилНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	Для Каждого ПодчиненныйЭлемент Из ДеревоПравил.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПравил.Развернуть(ПодчиненныйЭлемент.ПолучитьИдентификатор(),Истина);	
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПравилНаСервере(Идентификатор)
	ТекущиеДанные = ДеревоНастроек.НайтиПоИдентификатору(Идентификатор);
	Схема  = ТекущиеДанные.Ссылка;
	ОбъектИБ = ТекущиеДанные.ВладелецНастроек;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ГруппыПравилОтраженияФактическихДанных.Ссылка КАК ГруппаПравил,
		|	фин_ГруппыПравилОтраженияФактическихДанных.Наименование,
		|	фин_ГруппыПравилОтраженияФактическихДанных.ИмяИсточника,
		|	фин_ГруппыПравилОтраженияФактическихДанных.ПредставлениеИсточника,
		|	фин_ГруппыПравилОтраженияФактическихДанных.Условие,
		|	фин_ГруппыПравилОтраженияФактическихДанных.Порядок КАК Порядок,
		|	ИСТИНА КАК ЭтоГруппа,
		|	фин_ГруппыПравилОтраженияФактическихДанных.ВидДанных.Порядок КАК ВидДанных,
		|	фин_ГруппыПравилОтраженияФактическихДанных.СпособИспользования.Порядок КАК СпособИспользования
		|ИЗ
		|	Справочник.фин_ГруппыПравилОтраженияФактическихДанных КАК фин_ГруппыПравилОтраженияФактическихДанных
		|ГДЕ
		|	фин_ГруппыПравилОтраженияФактическихДанных.Владелец = &Владелец
		|	И фин_ГруппыПравилОтраженияФактическихДанных.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	фин_ПравилаОтраженияФактическихДанных.Ссылка КАК Правило,
		|	фин_ПравилаОтраженияФактическихДанных.Владелец КАК ГруппаПравил,
		|	фин_ПравилаОтраженияФактическихДанных.Наименование,
		|	фин_ПравилаОтраженияФактическихДанных.Порядок КАК Порядок,
		|	фин_ПравилаОтраженияФактическихДанных.ИмяИсточника,
		|	фин_ПравилаОтраженияФактическихДанных.ПредставлениеИсточника,
		|	фин_ПравилаОтраженияФактическихДанных.Условие,
		|	фин_ПравилаОтраженияФактическихДанных.СпособИспользования.Порядок КАК СпособИспользования,
		|	фин_ПравилаОтраженияФактическихДанных.ФинансовыйПоказательИсточник,
		|	фин_ПравилаОтраженияФактическихДанных.ФинансовыйПоказательТипИсточника,
		|	фин_ПравилаОтраженияФактическихДанных.ПрогнозноеЗначение,
		|	фин_ПравилаОтраженияФактическихДанных.Сторно,
		|	фин_ПравилаОтраженияФактическихДанных.ВидДанных.Порядок КАК ВидДанных
		|ИЗ
		|	Справочник.фин_ПравилаОтраженияФактическихДанных КАК фин_ПравилаОтраженияФактическихДанных
		|ГДЕ
		|	фин_ПравилаОтраженияФактическихДанных.ПометкаУдаления = ЛОЖЬ
		|	И (фин_ПравилаОтраженияФактическихДанных.Владелец = &Владелец
		|			ИЛИ фин_ПравилаОтраженияФактическихДанных.Владелец.Владелец = &Владелец)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
	
	Запрос.УстановитьПараметр("Владелец", Схема);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаГрупп = РезультатЗапроса[0].Выгрузить();
	ТаблицаПравил = РезультатЗапроса[1].Выгрузить();
	
	// базовые правила
	
	СтрокиПравил =  ТаблицаПравил.Скопировать(Новый Структура("ГруппаПравил",Схема));
	СтрокиПравил.Сортировать("Порядок ВОЗР");
	БазоваяСтрока = ДеревоПравил.ПолучитьЭлементы();
	Для Каждого СтрокаПравил Из СтрокиПравил Цикл
		НовыйЭлемент = БазоваяСтрока.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент,СтрокаПравил);
	КонецЦикла;
	
	Для Каждого СтрокаГрупп Из ТаблицаГрупп Цикл
		НовыйЭлемент = БазоваяСтрока.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент,СтрокаГрупп);
		СтрокиПравил =  ТаблицаПравил.Скопировать(Новый Структура("ГруппаПравил",СтрокаГрупп.ГруппаПравил));
		СтрокиПравил.Сортировать("Порядок ВОЗР");
		БазоваяСтрокаВторогоУровня = НовыйЭлемент.ПолучитьЭлементы();
		Для Каждого СтрокаПравил Из СтрокиПравил Цикл
			НовыйЭлемент = БазоваяСтрокаВторогоУровня.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент,СтрокаПравил);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры


&НаСервере
Процедура ОбновитьДанныеГруппы(Идентификатор)
	ТекущиеДанные = ДеревоПравил.НайтиПоИдентификатору(Идентификатор);
	ТекущиеДанные.ПолучитьЭлементы().Очистить();
	ГруппаПравил  = ТекущиеДанные.ГруппаПравил;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ПравилаОтраженияФактическихДанных.Ссылка КАК Правило,
		|	фин_ПравилаОтраженияФактическихДанных.Владелец КАК ГруппаПравил,
		|	фин_ПравилаОтраженияФактическихДанных.Наименование,
		|	фин_ПравилаОтраженияФактическихДанных.Порядок КАК Порядок,
		|	фин_ПравилаОтраженияФактическихДанных.ИмяИсточника,
		|	фин_ПравилаОтраженияФактическихДанных.ПредставлениеИсточника,
		|	фин_ПравилаОтраженияФактическихДанных.Условие,
		|	фин_ПравилаОтраженияФактическихДанных.СпособИспользования.Порядок КАК СпособИспользования,
		|	фин_ПравилаОтраженияФактическихДанных.ФинансовыйПоказательИсточник,
		|	фин_ПравилаОтраженияФактическихДанных.ФинансовыйПоказательТипИсточника,
		|	фин_ПравилаОтраженияФактическихДанных.ПрогнозноеЗначение,
		|	фин_ПравилаОтраженияФактическихДанных.Сторно,
		|	фин_ПравилаОтраженияФактическихДанных.ВидДанных.Порядок КАК ВидДанных
		|ИЗ
		|	Справочник.фин_ПравилаОтраженияФактическихДанных КАК фин_ПравилаОтраженияФактическихДанных
		|ГДЕ
		|	фин_ПравилаОтраженияФактическихДанных.ПометкаУдаления = ЛОЖЬ
		|	И фин_ПравилаОтраженияФактическихДанных.Владелец = &ГруппаПравил
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
	
	Запрос.УстановитьПараметр("ГруппаПравил", ГруппаПравил);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПравил = РезультатЗапроса.Выгрузить();
	
	// базовые правила
	
	БазоваяСтрока = ТекущиеДанные.ПолучитьЭлементы();
	Для Каждого СтрокаПравил Из ТаблицаПравил Цикл
		НовыйЭлемент = БазоваяСтрока.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент,СтрокаПравил);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОписаниеУсловий(Команда)
	Элементы.ФормаОтображатьОписаниеУсловий.Пометка = НЕ Элементы.ФормаОтображатьОписаниеУсловий.Пометка;
	Элементы.ДеревоПравилУсловиеОписаниеУсловия.Видимость = Элементы.ФормаОтображатьОписаниеУсловий.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПравилВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = ДеревоПравил.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущиеДанные.ЭтоГруппа Тогда
		ПоказатьЗначение(,ТекущиеДанные.ГруппаПравил);
	Иначе
		ПоказатьЗначение(,ТекущиеДанные.Правило);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПравила(Команда)
	ЗаполнитьДеревоПравил();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПравилоОтражения(Команда)
	Если РазрешеноДобавление Тогда
		Попытка
			ОткрытьФорму("Справочник.фин_ПравилаОтраженияФактическихДанных.ФормаОбъекта",Новый Структура("ЗначенияЗаполнения",Новый Структура("Владелец",Схема)),ЭтотОбъект,Новый УникальныйИдентификатор,?(ВОтдельныхОкнах,ВариантОткрытияОкна.ОтдельноеОкно,Окно));
		Исключение
			ПоказатьПредупреждение(,ОписаниеОшибки());
		КонецПопытки;
	Иначе
		ПоказатьПредупреждение(,"Не выбрана редактируемая схема отражения!");	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппуПравил(Команда)
	Если РазрешеноДобавление Тогда
		Попытка	
			ОткрытьФорму("Справочник.фин_ГруппыПравилОтраженияФактическихДанных.ФормаОбъекта",Новый Структура("ЗначенияЗаполнения",Новый Структура("Владелец",Схема)),ЭтотОбъект,Новый УникальныйИдентификатор,?(ВОтдельныхОкнах,ВариантОткрытияОкна.ОтдельноеОкно,Окно));
		Исключение
			ПоказатьПредупреждение(,ОписаниеОшибки());
		КонецПопытки;
	Иначе
		ПоказатьПредупреждение(,"Не выбрана редактируемая схема отражения!");	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПравилоОтраженияВГруппу(Команда)
	Если РазрешеноДобавление Тогда
		ТекущиеДанные = Элементы.ДеревоПравил.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ГруппаПравил) Тогда
			ПоказатьПредупреждение(,"Не выбрана группа правил для добавления!");	
			Возврат;
		КонецЕсли;
		Попытка	
			ОткрытьФорму("Справочник.фин_ПравилаОтраженияФактическихДанных.ФормаОбъекта",Новый Структура("ЗначенияЗаполнения",Новый Структура("Владелец",ТекущиеДанные.ГруппаПравил)),ЭтотОбъект,Новый УникальныйИдентификатор,?(ВОтдельныхОкнах,ВариантОткрытияОкна.ОтдельноеОкно,Окно));
		Исключение
			ПоказатьПредупреждение(,ОписаниеОшибки());
		КонецПопытки;
	Иначе
		ПоказатьПредупреждение(,"Не выбрана редактируемая схема отражения!");	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПравило(Команда)
	Если РазрешеноДобавление Тогда
		ТекущиеДанные = Элементы.ДеревоПравил.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ПоказатьПредупреждение(,"Не выбрана удаляемая строка правил!");	
			Возврат;
		КонецЕсли;
		Если УдалитьДанные(?(ТекущиеДанные.ЭтоГруппа,ТекущиеДанные.ГруппаПравил,ТекущиеДанные.Правило)) Тогда
			ВсеСтроки = ?(ТекущиеДанные.ПолучитьРодителя()=Неопределено,ДеревоПравил.ПолучитьЭлементы(),ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы());
			ВсеСтроки.Удалить(ТекущиеДанные);
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(,"Не выбрана редактируемая схема отражения!");	
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция УдалитьДанные(Данные)
	ОбъектБазы = Данные.ПолучитьОбъект();	
	попытка
		ОбъектБазы.УстановитьПометкуУдаления(Истина);
		возврат Истина;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура УменьшитьПорядок(Команда)
	ТекущиеДанные = Элементы.ДеревоПравил.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,"Не выбрана изменяемая строка правил!");	
		Возврат;
	КонецЕсли;
	ИзменитьПорядокНаСервере(?(ТекущиеДанные.ЭтоГруппа,ТекущиеДанные.ГруппаПравил,ТекущиеДанные.Правило),-1);
	ЗаполнитьДеревоПравил();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьПорядокНаСервере(Правило,Итерация)
	НачатьТранзакцию();
	Если ТипЗнч(Правило) = Тип("СправочникСсылка.фин_ГруппыПравилОтраженияФактическихДанных") Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_ГруппыПравилОтраженияФактическихДанных.Ссылка,
			|	фин_ГруппыПравилОтраженияФактическихДанных.Порядок
			|ИЗ
			|	Справочник.фин_ГруппыПравилОтраженияФактическихДанных КАК фин_ГруппыПравилОтраженияФактическихДанных
			|ГДЕ
			|	фин_ГруппыПравилОтраженияФактическихДанных.Владелец = &Владелец
			|	И НЕ фин_ГруппыПравилОтраженияФактическихДанных.ПометкаУдаления
			|	И фин_ГруппыПравилОтраженияФактическихДанных.Порядок = &Порядок
			|	И фин_ГруппыПравилОтраженияФактическихДанных.Ссылка <> &Ссылка";
		
		Запрос.УстановитьПараметр("Владелец", Правило.Владелец);
		Запрос.УстановитьПараметр("Порядок", Правило.Порядок+Итерация);
		Запрос.УстановитьПараметр("Ссылка", Правило);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбъектПредшествующий = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ОбъектПредшествующий.Порядок = Правило.Порядок;
			Попытка
				ОбъектПредшествующий.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки;
		КонецЦикла;
		ОбъектТекущий = Правило.ПолучитьОбъект();
		ОбъектТекущий.Порядок = Правило.Порядок+Итерация;
		Попытка
			ОбъектТекущий.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
	
	Иначе
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_ГруппыПравилОтраженияФактическихДанных.Ссылка,
			|	фин_ГруппыПравилОтраженияФактическихДанных.Порядок
			|ИЗ
			|	Справочник.фин_ПравилаОтраженияФактическихДанных КАК фин_ГруппыПравилОтраженияФактическихДанных
			|ГДЕ
			|	фин_ГруппыПравилОтраженияФактическихДанных.Владелец = &Владелец
			|	И НЕ фин_ГруппыПравилОтраженияФактическихДанных.ПометкаУдаления
			|	И фин_ГруппыПравилОтраженияФактическихДанных.Порядок = &Порядок
			|	И фин_ГруппыПравилОтраженияФактическихДанных.Ссылка <> &Ссылка";
		
		Запрос.УстановитьПараметр("Владелец", Правило.Владелец);
		Запрос.УстановитьПараметр("Порядок", Правило.Порядок+Итерация);
		Запрос.УстановитьПараметр("Ссылка", Правило);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбъектПредшествующий = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ОбъектПредшествующий.Порядок = Правило.Порядок;
			Попытка
				ОбъектПредшествующий.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки;
		КонецЦикла;
		ОбъектТекущий = Правило.ПолучитьОбъект();
		ОбъектТекущий.Порядок = Правило.Порядок+Итерация;
		Попытка
			ОбъектТекущий.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
	КонецЕсли;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПорядок(Команда)
	ТекущиеДанные = Элементы.ДеревоПравил.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,"Не выбрана изменяемая строка правил!");	
		Возврат;
	КонецЕсли;
	ИзменитьПорядокНаСервере(?(ТекущиеДанные.ЭтоГруппа,ТекущиеДанные.ГруппаПравил,ТекущиеДанные.Правило),1);
	ЗаполнитьДеревоПравил();
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДанныеПравилПоФП() 
	
	Правила.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ПравилаОтраженияФактическихДанных.Владелец КАК ОбъектИнформационнойБазы,
		|	фин_ПравилаОтраженияФактическихДанных.Ссылка КАК Правило,
		|	фин_ПериодыПримененияПравилПоФинансовымПоказателям.ДатаНачала,
		|	фин_ПериодыПримененияПравилПоФинансовымПоказателям.ДатаОкончания
		|ИЗ
		|	Справочник.фин_ПравилаОтраженияФактическихДанных КАК фин_ПравилаОтраженияФактическихДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_ПериодыПримененияПравилПоФинансовымПоказателям КАК фин_ПериодыПримененияПравилПоФинансовымПоказателям
		|		ПО фин_ПравилаОтраженияФактическихДанных.Ссылка = фин_ПериодыПримененияПравилПоФинансовымПоказателям.Правило
		|ГДЕ
		|	фин_ПравилаОтраженияФактическихДанных.ФинансовыйПоказательИсточник = &ФинансовыйПоказательИсточник
		|	И фин_ПравилаОтраженияФактическихДанных.ФинансовыйПоказательТипИсточника = &ФинансовыйПоказательТипИсточника
		|	И фин_ПравилаОтраженияФактическихДанных.ПометкаУдаления = ЛОЖЬ
		|	И фин_ПравилаОтраженияФактическихДанных.ПоФинансовомуПоказателю";
	
	Запрос.УстановитьПараметр("ФинансовыйПоказательИсточник", ФинансовыйПоказатель);
	Запрос.УстановитьПараметр("ФинансовыйПоказательТипИсточника", Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ФиксированноеЗначение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НС = Правила.Добавить();
		ЗаполнитьЗначенияСвойств(НС,ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникФинансовыхПоказателейПриАктивизацииСтроки(Элемент)
	ПравилоФП = ПредопределенноеЗначение("Справочник.фин_ПравилаОтраженияФактическихДанных.ПустаяСсылка");
	Правила.Очистить();
	ФинансовыйПоказатель = ПредопределенноеЗначение("Справочник.фин_ФинансовыеПоказатели.ПустаяСсылка");
	ТекущиеДанные = Элементы.СправочникФинансовыхПоказателей.ТекущиеДанные;
	Если НЕ ТекущиеДанные.ЭтоГруппа Тогда
		ФинансовыйПоказатель = ТекущиеДанные.Ссылка;
		ЗаполнитьДанныеПравилПоФП();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПравилаПередУдалением(Элемент, Отказ)
	Правило = Элементы.Правила.ТекущиеДанные.Правило;
	Если ЗначениеЗаполнено(Правило) Тогда
		Отказ = НЕ УдалитьСведенияОПрименении(Правило);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция УдалитьСведенияОПрименении(Правило)
	Если НЕ ЗначениеЗаполнено(Правило) Тогда
		Возврат Ложь;
	КонецЕсли;
	НачатьТранзакцию();
	Набор = РегистрыСведений.фин_ПериодыПримененияПравилПоФинансовымПоказателям.СоздатьНаборЗаписей();
	Набор.Отбор.Правило.Установить(Правило);
	Попытка
		Набор.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	ОбъектПравило = Правило.ПолучитьОбъект();
	Попытка
		ОбъектПравило.УстановитьПометкуУдаления(Истина);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПравилаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = НЕ ЗначениеЗаполнено(ФинансовыйПоказатель);
КонецПроцедуры

&НаКлиенте
Процедура ПравилаПередНачаломИзменения(Элемент, Отказ)
	ПравилоФП = Элементы.Правила.ТекущиеДанные.Правило;
КонецПроцедуры


&НаКлиенте
Процедура ПравилаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Правило = Элементы.Правила.ТекущиеДанные.Правило;
	Если ЗначениеЗаполнено(ПравилоФП) И ПравилоФП<>Правило И ЗначениеЗаполнено(ПравилоФП) Тогда
		ОтменаРедактирования = НЕ УдалитьСведенияОПрименении(Правило);
	КонецЕсли;
	Если НЕ ОтменаРедактирования Тогда
		ОтменаРедактирования = НЕ ДобавитьСведенияОПрименении(Правило,Элементы.Правила.ТекущиеДанные.ДатаНачала,Элементы.Правила.ТекущиеДанные.ДатаОкончания);
	КонецЕсли;
	Если НЕ ОтменаРедактирования Тогда
		ПравилоФП = Правило;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДобавитьСведенияОПрименении(Правило,ДатаНачала,ДатаОкончания)
	НачатьТранзакцию();
	Набор = РегистрыСведений.фин_ПериодыПримененияПравилПоФинансовымПоказателям.СоздатьНаборЗаписей();
	Набор.Отбор.Правило.Установить(Правило);
	Если ДатаНачала<>'00010101' Тогда
		НЗ = Набор.Добавить();
		НЗ.Правило = Правило;
		НЗ.ДатаНачала = ДатаНачала;
		НЗ.ДатаОкончания = ДатаОкончания;
	КонецЕсли;
	Попытка
		Набор.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	Возврат Истина;
КонецФункции


&НаСервере
Функция ИмяВидаОбъектовМетаданных(ИмяЭлемента)
	Возврат СтрЗаменить(Элементы.Найти(ИмяЭлемента).ПолучитьДействие("Нажатие"),"Открыть","");	
КонецФункции

&НаКлиенте
Процедура ОткрытьВОтдельномОкне(Команда)
	ИмяЭлемента = ТекущийЭлемент.Имя;
	ИмяВидаОбъектов = ИмяВидаОбъектовМетаданных(ИмяЭлемента);
	ИмяФормыОбъекта = ИмяВидаОбъектов+"."+ОтсечьЦифры(СтрЗаменить(ТекущийЭлемент.Имя,"Декорация_",""))+".ФормаСписка";
	Попытка	
		ОткрытьФорму(ИмяФормыОбъекта,,,Новый УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
	Исключение
		ПоказатьПредупреждение(,ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры


&НаКлиенте
Процедура ОткрыватьФормыВОтдельныхОкнах(Команда)
	Элементы.ФормаОткрыватьФормыВОтдельныхОкнах.Пометка = НЕ Элементы.ФормаОткрыватьФормыВОтдельныхОкнах.Пометка;
	ВОтдельныхОкнах = Элементы.ФормаОткрыватьФормыВОтдельныхОкнах.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ПравилаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ПравилоФП = Элементы.Правила.ТекущиеДанные.Правило;
КонецПроцедуры
