Перем мВалютаРегламентированногоУчета Экспорт;
Перем мОтображатьСтруктурныеПодразделения Экспорт; 
Перем мДатаПрекращенияВыводаРНН Экспорт;

Перем мСписокПодразделений Экспорт;
Перем мСписокСтруктурныхЕдиниц Экспорт;

Перем ЕстьОбособленныеПодразделения Экспорт;
Перем ЯвляетсяОбособленнымПодразделением Экспорт;
Перем ГоловнаяОрганизация Экспорт;

Перем мТекДатаНачала Экспорт;
Перем мТекДатаКонца Экспорт;

# Если Клиент Тогда

// Заполнение таблицы бух.остатков на конец указанной даты
//
Функция ЗаполнитьОстаткиНаСчетах3100(КонДата, ДатаНач = '00010101', ПолучатьОстаткиНаДату = Истина, Периодичность = "", Поиск = Неопределено) Экспорт

	Запрос = Новый Запрос;
	
	//если выбран филиал, не нужно показывать остатки по счетам 3130, 3110(НДС и КПН)
	//так как плательщиком выступает всегда голова
	Если мОтображатьСтруктурныеПодразделения И мСписокСтруктурныхЕдиниц.Количество() = 0 Тогда
		УсловиеПоСчетам = " И Не (Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.НалогНаДобавленнуюСтоимость) ИЛИ
		| Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КорпоративныйПодоходныйНалог) ИЛИ 
		| Счет = ЗНАЧЕНИЕ(ПланСчетов.Типовой.Акцизы))";
	Иначе
		УсловиеПоСчетам = "";				   
	КонецЕсли;
	
	Если ПолучатьОстаткиНаДату Тогда
		Запрос.Текст = " 
		|			
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТиповойОстатки.Счет КАК СчетУчета,
		|	ТиповойОстатки.Организация КАК Организация,
		|	ТиповойОстатки.СтруктурноеПодразделение КАК СтруктурнаяЕдиница,
		|	ТиповойОстатки.Субконто1 Как Субконто1,
		|	ТиповойОстатки.Субконто2 Как Субконто2,
		|	ЕстьNull(ТиповойОстатки.Субконто3, Неопределено) Как Субконто3,		
		|	ТиповойОстатки.СуммаОстатокКт КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&ГраницаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОбязательстваПоНалогам)) "
												+ УсловиеПоСчетам + " , , Организация В (&СписокОрганизаций)И (НЕ &УчетПоСтруктурным ИЛИ СтруктурноеПодразделение В (&СписокСтруктурныхПодразделений))) КАК ТиповойОстатки		
		|		
		|ГДЕ
		|	ТиповойОстатки.СуммаОстаток < 0 ";
		Если Не Поиск = Неопределено Тогда
			Запрос.Текст = Запрос.Текст + " И
			|	ТиповойОстатки.Счет = &СчетУчета И
			|	ТиповойОстатки.Организация = &ОрганизацияПоиска И
			|	(НЕ &УчетПоСтруктурным ИЛИ ТиповойОстатки.СтруктурноеПодразделение = &СтруктурнаяЕдиница) И						
			|	ТиповойОстатки.Субконто1 = &Субконто1 И
			|	ТиповойОстатки.Субконто2 = &Субконто2 И
			|	ЕстьNull(ТиповойОстатки.Субконто3, Неопределено) = &Субконто3 ";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + " 
		|УПОРЯДОЧИТЬ ПО
		|	СчетУчета,
		|	Организация";
		
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТиповойОбороты.Счет КАК СчетУчета,
		|	ТиповойОбороты.Организация КАК Организация,
		|	ТиповойОбороты.СтруктурноеПодразделение КАК СтруктурнаяЕдиница,
		|	ТиповойОбороты.Субконто1,
		|	ТиповойОбороты.Субконто2,
		|	ЕстьNull(ТиповойОбороты.Субконто3, Неопределено) КАК Субконто3,
		|	ТиповойОбороты.СуммаОборотКт КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Обороты(&ДатаНач, &ГраницаОстатков, , Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОбязательстваПоНалогам)) "
												+ УсловиеПоСчетам + " , , Организация В (&СписокОрганизаций)  И (НЕ &УчетПоСтруктурным ИЛИ СтруктурноеПодразделение В (&СписокСтруктурныхПодразделений)), , ) КАК ТиповойОбороты
		|ГДЕ
		|	ТиповойОбороты.СуммаОборот < 0 ";
		
		Если Не Поиск = Неопределено Тогда
			Запрос.Текст = Запрос.Текст + " И
			|	ТиповойОбороты.Счет = &СчетУчета И
			|	ТиповойОбороты.Организация = &ОрганизацияПоиска И
			|	(НЕ &УчетПоСтруктурным ИЛИ ТиповойОбороты.СтруктурноеПодразделение = &СтруктурнаяЕдиница) И			
			|	ТиповойОбороты.Субконто1 = &Субконто1 И
			|	ТиповойОбороты.Субконто2 = &Субконто2 И
			|	ЕстьNull(ТиповойОбороты.Субконто3, Неопределено) = &Субконто3 ";
		КонецЕсли;
		
		
		
		
		Запрос.Текст = Запрос.Текст + "  
		|УПОРЯДОЧИТЬ ПО
		|	СчетУчета,
		|	Организация"; 		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Периодичность", Строка(Периодичность));	
	КонецЕсли;
	
	//добавим данные по ИПН - возьмем с регистров ИПНРасчетыСБюджетом
	Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецДня(КонДата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(КонДата));
	Если Не Поиск = Неопределено Тогда
		Запрос.УстановитьПараметр("ОрганизацияПоиска", 	Поиск.Организация);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Поиск.СтруктурнаяЕдиница);
		Запрос.УстановитьПараметр("Субконто1", Поиск.Субконто1);
		Запрос.УстановитьПараметр("Субконто2", Поиск.Субконто2);
		Запрос.УстановитьПараметр("Субконто3", Поиск.Субконто3);
		Запрос.УстановитьПараметр("СчетУчета", Поиск.СчетУчета);		
	КонецЕсли;    	
	
	Запрос.УстановитьПараметр("УчетПоСтруктурным", мОтображатьСтруктурныеПодразделения);
	//Если не филиальная структура или выбран филиал смотрим только по организации
	Если Не мОтображатьСтруктурныеПодразделения Тогда
		
		Запрос.УстановитьПараметр("СписокОрганизаций", 					Организация);
		Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений", 	Справочники.ПодразделенияОрганизаций.ПустаяСсылка());		
	Иначе
		Запрос.УстановитьПараметр("СписокОрганизаций", 					мСписокСтруктурныхЕдиниц);
		Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений", 	мСписокПодразделений);				
	КонецЕсли;      
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	//свернем данные
	ТаблицаРезультата.Свернуть("СчетУчета,Организация, СтруктурнаяЕдиница,Субконто1,Субконто2,Субконто3", "Сумма");
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция СоздатьПустуюТаблицуДанных()

	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("СуммаДокумента",      ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаДанных.Колонки.Добавить("КодБК",               ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(6));
	ТаблицаДанных.Колонки.Добавить("КодНазначенияПлатежа",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3));
	ТаблицаДанных.Колонки.Добавить("ВидНалога",          Новый ОписаниеТипов("СправочникСсылка.НалогиСборыОтчисления"));
	ТаблицаДанных.Колонки.Добавить("НазначениеПлатежа",   ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(250));
	ТаблицаДанных.Колонки.Добавить("Контрагент",          Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДанных.Колонки.Добавить("Плательщик",          Новый ОписаниеТипов("СправочникСсылка.Организации,СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаДанных.Колонки.Добавить("СчетКонтрагента",     Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ТаблицаДанных.Колонки.Добавить("СчетОрганизации",     Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ТаблицаДанных.Колонки.Добавить("Организация",         Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанных.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентомБУ", Новый ОписаниеТипов("ПланСчетовСсылка.Типовой"));
	ТаблицаДанных.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентомНУ", Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаДанных.Колонки.Добавить("СубконтоДтБУ1");
	ТаблицаДанных.Колонки.Добавить("СубконтоДтБУ2");
	ТаблицаДанных.Колонки.Добавить("СубконтоДтБУ3");
	ТаблицаДанных.Колонки.Добавить("СубконтоДтНУ1");
	ТаблицаДанных.Колонки.Добавить("СубконтоДтНУ2");
	ТаблицаДанных.Колонки.Добавить("СубконтоДтНУ3");
	ТаблицаДанных.Колонки.Добавить("СтруктурнаяЕдиница");
	
	Возврат ТаблицаДанных;

КонецФункции 

Функция ПолучитьТаблицуПлатежа(ЗначениеСчета, ВидНалога) 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокРеквизитов.Ссылка КАК ВидНалога,
	|	СписокРеквизитов.КодБК КАК КодБК,
	|	СписокРеквизитов.Контрагент КАК Контрагент,
	|	СписокРеквизитов.СчетКонтрагента КАК СчетКонтрагента,
	|	СписокРеквизитов.НазначениеПлатежа,
	|	СписокРеквизитов.КодНазначенияПлатежа,
	|	СписокРеквизитов.СчетУчетаРасчетовСКонтрагентомНУ
	|ИЗ
	|	Справочник.НалогиСборыОтчисления КАК СписокРеквизитов
	|ГДЕ
	|	СписокРеквизитов.ПометкаУдаления = ЛОЖЬ
	|	И СписокРеквизитов.Ссылка = &ВидНалога";
	
	//Запрос.УстановитьПараметр("ЗначениеРеквизита", ЗначениеСчета);	
	Запрос.УстановитьПараметр("ВидНалога", ВидНалога);	
		
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультата;

КонецФункции // ПолучитьТаблицуПлатежа()

Функция ПолучитьТаблицуРеквизитовПлатежа(ЗначениеРеквизита, ВидНалога)
	
	ТаблицаРезультата = ПолучитьТаблицуПлатежа(ЗначениеРеквизита, ВидНалога);
	Возврат ТаблицаРезультата;

КонецФункции // ПолучитьТаблицуРеквизитовПлатежа()

Функция ПодготовитьТаблицуДанныхПоОстатку(СтрокаОстатка)

	ТаблицаДанных = СоздатьПустуюТаблицуДанных();
	
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.СуммаДокумента 				  = СтрокаОстатка.Сумма;
	СтрокаДанных.Организация    				  = СтрокаОстатка.Организация;
	
	СтрокаДанных.СубконтоДтБУ1  			      = СтрокаОстатка.Субконто1;
	СтрокаДанных.СубконтоДтБУ2  				  = СтрокаОстатка.Субконто2;
	СтрокаДанных.СубконтоДтБУ3  				  = СтрокаОстатка.Субконто3;
	
	СтрокаДанных.СубконтоДтНУ1  			      = СтрокаОстатка.Субконто1;
	СтрокаДанных.СубконтоДтНУ2  				  = СтрокаОстатка.Субконто2;
	СтрокаДанных.СубконтоДтНУ3  				  = СтрокаОстатка.Субконто3;

	СтрокаДанных.СтруктурнаяЕдиница 			  = СтрокаОстатка.СтруктурнаяЕдиница;
	СтрокаДанных.СчетУчетаРасчетовСКонтрагентомБУ = СтрокаОстатка.СчетУчета;
			
	ТаблицаРеквизитовПлатежа = ПолучитьТаблицуРеквизитовПлатежа(СтрокаОстатка.СчетУчета, СтрокаОстатка.Субконто1);
	
	Если ТаблицаРеквизитовПлатежа.Количество() > 0 Тогда
		СтрокаРеквизитов = ТаблицаРеквизитовПлатежа[0];
		ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаРеквизитов);		
		СтрокаДанных.НазначениеПлатежа = СтрокаРеквизитов.НазначениеПлатежа;
	Иначе
		СтрокаДанных.НазначениеПлатежа = "Уплата налога: " + СтрокаОстатка.Субконто1 ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.СтруктурнаяЕдиница)
		И ТипЗнч(СтрокаДанных.СтруктурнаяЕдиница) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		
		СтрокаДанных.НазначениеПлатежа = СтрокаДанных.НазначениеПлатежа + "  подразделение " + """" + СтрокаДанных.СтруктурнаяЕдиница.Наименование + """";
	КонецЕсли; 

	Если НЕ ЗначениеЗаполнено(СтрокаДанных.СчетУчетаРасчетовСКонтрагентомНУ) Тогда
		СтрокаДанных.СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СтрокаДанных.СчетУчетаРасчетовСКонтрагентомНУ));
	КонецЕсли;
               	
	Если мОтображатьСтруктурныеПодразделения Тогда
		ОпределитьПлательщикаИПолучателя(СтрокаДанных);
	Иначе
		СтрокаДанных.Плательщик 		= СтрокаДанных.Организация;
		СтрокаДанных.СчетОрганизации 	= СчетОрганизации;
	КонецЕсли;  	
	
	Возврат ТаблицаДанных;

КонецФункции 

Процедура ЗаполнитьУплаченнуюСумму() Экспорт
	Для Каждого СтрокаОстатка ИЗ  БухОстатки Цикл
		Если Не СтрокаОстатка.Оплатить Тогда
			Продолжить;
		КонецЕсли;
			
		ТаблицаДанных = ПодготовитьТаблицуДанныхПоОстатку(СтрокаОстатка);
		Для каждого СтрокаДанных Из ТаблицаДанных Цикл
			УплаченнаяСумма = 0;
			//попытаемся найти сформированное платежное поручение
			ТаблицаПлатежек = НайтиПлатеженоеПоручениеИсходящее(СтрокаДанных, Истина);
			Если НЕ ТаблицаПлатежек = Неопределено Тогда
				УплаченнаяСумма = УплаченнаяСумма +ТаблицаПлатежек.Итог("СуммаДокумента");
			КонецЕсли;
		КонецЦикла;		
		СтрокаОстатка.УплаченнаяСумма = УплаченнаяСумма;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьПлатежныеПорученияПоОстаткам(РежимВвода = Истина) Экспорт

	//очистим для строк колонку "Активность", ее мы заполняем для того, что бы понять 
	//была создана новая строка, или уже хранитяс в обработке
	
	Для Каждого Строка Из ПлатежныеПоручения Цикл
		Строка.Активность = Ложь;
	КонецЦикла;
			
	Для каждого СтрокаОстатка Из БухОстатки Цикл
	
		Если НЕ СтрокаОстатка.Оплатить Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДанных = ПодготовитьТаблицуДанныхПоОстатку(СтрокаОстатка);
		
		Для каждого СтрокаДанных Из ТаблицаДанных Цикл
			//попытаемся найти сформированное платежное поручение
			ТаблицаПлатежек = НайтиПлатеженоеПоручениеИсходящее(СтрокаДанных, Ложь);
			Если НЕ ТаблицаПлатежек = Неопределено Тогда				
				Для Каждого ДокументПлатежка Из ТаблицаПлатежек Цикл 					
					//найдем по ссылке платежку в ТЧ "Платежные поручения"
					СтрокаТЧ = ПлатежныеПоручения.Найти(ДокументПлатежка.Ссылка, "Ссылка");
					Если СтрокаТЧ = Неопределено Тогда					
						НоваяСтрока = ПлатежныеПоручения.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокументПлатежка.Ссылка);
					КонецЕсли;
				КонецЦикла; 				
				Если Не РежимВвода Тогда
					Продолжить;
				КонецЕсли;			
				
				СуммаПлатежек   = 0;
				УплаченнаяСумма = 0;
				
				Для Каждого СтрокаПлатежки Из  ТаблицаПлатежек  Цикл
					Если СтрокаПлатежки.Ссылка.Проведен Тогда
						УплаченнаяСумма = УплаченнаяСумма + СтрокаПлатежки.СуммаДокумента;
					Иначе
						СуммаПлатежек = СуммаПлатежек + СтрокаПлатежки.СуммаДокумента;	
					КонецЕсли;
				КонецЦикла;
				Если Не СуммаПлатежек < (СтрокаДанных.СуммаДокумента - УплаченнаяСумма) Тогда
					Продолжить;
				Иначе
					СтрокаДанных.СуммаДокумента = СтрокаДанных.СуммаДокумента - СуммаПлатежек;					
				КонецЕсли; 		
								 	
				СтрокаОстатка.УплаченнаяСумма = УплаченнаяСумма; 
				
			Иначе
				Если Не РежимВвода Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли; 		
					
			
			СтрокаДанных.СуммаДокумента  = СтрокаДанных.СуммаДокумента - СтрокаОстатка.УплаченнаяСумма;
			Если СтрокаДанных.СуммаДокумента <= 0 тогда
				Продолжить;
			КонецЕсли;
			
			НовыйДокумент = СоздатьПлатежноеПоручение(СтрокаДанных);				
			Если ЗначениеЗаполнено(НовыйДокумент) Тогда
				
				НоваяСтрока = ПлатежныеПоручения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НовыйДокумент);
				НоваяСтрока.СтруктурноеПодразделение = СтрокаДанных.СтруктурнаяЕдиница;
				НоваяСтрока.Активность = Истина;
			КонецЕсли;
			
		КонецЦикла;      		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиПлатеженоеПоручениеИсходящее(СтрокаДанных, ЕстьПризнакПроведения = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =   "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	ПлатежноеПоручениеИсходящее.Ссылка,
	                 |	ПлатежноеПоручениеИсходящее.СуммаДокумента
	                 |ИЗ
	                 |	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	                 |ГДЕ
	                 |	ПлатежноеПоручениеИсходящее.Дата = &ДатаУплаты
	                 |	И ПлатежноеПоручениеИсходящее.Контрагент = &Контрагент
	                 |	И ПлатежноеПоручениеИсходящее.ВидОперации = &ВидОперации
	                 |	И ПлатежноеПоручениеИсходящее.ВидНалога = &ВидНалога
	                 |	И ПлатежноеПоручениеИсходящее.СчетУчетаРасчетовСКонтрагентомБУ = &СчетУчетаРасчетовСКонтрагентомБУ
	                 |	И (НЕ ПлатежноеПоручениеИсходящее.ПометкаУдаления)
	                 |	И ВЫБОР
	                 |			КОГДА &ЕстьПризнакПроведения
	                 |				ТОГДА ПлатежноеПоручениеИсходящее.Проведен
	                 |			ИНАЧЕ ИСТИНА
	                 |		КОНЕЦ";
	//ищем документы, если филиальная структура:
	//1. по организации/филиалу,
	//2. Организацией уплаты налогов может выступать и голова, но в качестве плательщика выступает филиал(поиск по РНН текушей организации)
	
	 Если мОтображатьСтруктурныеПодразделения Тогда
		 Запрос.Текст = Запрос.Текст + " И (ПлатежноеПоручениеИсходящее.Организация = &Организация И ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель  = &СтруктурноеПодразделение)";
	  Иначе                              
		 
		 Запрос.Текст = Запрос.Текст + " И ПлатежноеПоручениеИсходящее.Организация = &Организация ";
	 КонецЕсли;
	 
	 
	Запрос.УстановитьПараметр("ДатаУплаты", 				ДатаУплаты);
	Запрос.УстановитьПараметр("Организация", 				СтрокаДанных.Плательщик);	
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", 	СтрокаДанных.СтруктурнаяЕдиница);
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ЕстьПризнакПроведения", ЕстьПризнакПроведения);
	
	
	Запрос.УстановитьПараметр("Контрагент", СтрокаДанных.Контрагент);
	Запрос.УстановитьПараметр("ВидНалога", СтрокаДанных.ВидНалога);
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентомБУ", СтрокаДанных.СчетУчетаРасчетовСКонтрагентомБУ);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ТЗПлатежек = Результат.Выгрузить();
				
		Возврат ТЗПлатежек;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьРасчетныеСчетаФилиалов() Экспорт
		
	Если мОтображатьСтруктурныеПодразделения Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =   "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                 |	Организации.Ссылка КАК Филиал,
		                 |	ВЫБОР
		                 |		КОГДА Организации.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = &ВалютаРегл
		                 |			ТОГДА Организации.ОсновнойБанковскийСчет
		                 |	КОНЕЦ КАК РасчетныйСчет
		                 |ИЗ
		                 |	Справочник.Организации КАК Организации
		                 |ГДЕ
		                 |	Организации.Ссылка В(&МассивОрганизаций)
		                 |
		                 |ОБЪЕДИНИТЬ ВСЕ
		                 |
		                 |ВЫБРАТЬ
		                 |	ПодразделенияОрганизаций.Ссылка,
		                 |	ВЫБОР
		                 |		КОГДА ПодразделенияОрганизаций.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = &ВалютаРегл
		                 |			ТОГДА ПодразделенияОрганизаций.ОсновнойБанковскийСчет
		                 |	КОНЕЦ
		                 |ИЗ
		                 |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		                 |ГДЕ
		                 |	ПодразделенияОрганизаций.Ссылка В(&МассивПодразделений)
		                 |
		                 |УПОРЯДОЧИТЬ ПО
		                 |	Организации.Ссылка";
						 
		Запрос.УстановитьПараметр("МассивОрганизаций", 		мСписокСтруктурныхЕдиниц.ВыгрузитьЗначения());
		Запрос.УстановитьПараметр("МассивПодразделений", 	мСписокПодразделений.ВыгрузитьЗначения());
		
		Запрос.УстановитьПараметр("ВалютаРегл",  мВалютаРегламентированногоУчета);
		Возврат Запрос.Выполнить().Выгрузить();
	Иначе 
		Возврат Новый ТаблицаЗначений;
	КонецЕсли; 	
						
КонецФункции

// Функция проверяет есть ли субконто "Контрагент" на указанном счете
//
Функция ЕстьСубконтоКонтрагенты(Счет) Экспорт

	ЕстьКонтрагентНаСчете = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
	Иначе
		СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты, "ВидСубконто");

		Если СтрокаВидаСубконто <> Неопределено Тогда
			ЕстьКонтрагентНаСчете = Истина;
		КонецЕсли;
		
	КонецЕсли;

	Возврат ЕстьКонтрагентНаСчете;

КонецФункции // ЕстьСубконтоСклады()

Функция ЗаполнитьПолучателяПлатежки(ВидНалога,СтруктурнаяЕдиница)
	 Контрагент = ПроцедурыНалоговогоУчета.ПолучитьНалоговыйКомитетСтруктурнойЕдиницы(СтруктурнаяЕдиница,
																	   ГоловнаяОрганизация,
																	   глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
																	   ВидНалога);
	Возврат Контрагент;
КонецФункции

Процедура ОпределитьПлательщикаИПолучателя(СтрокаДанных)
	
	АнализируетсяГоловнаяОрганизация = Ложь;
	СтрокаДанных.Плательщик  = СтрокаДанных.Организация;
	
	//для головной организации
	Если СтрокаДанных.Организация = ГоловнаяОрганизация И НЕ ЗначениеЗаполнено(СтрокаДанных.СтруктурнаяЕдиница)  Тогда
		СтрокаДанных.СчетОрганизации	 = СчетОрганизации;		
		АнализируетсяГоловнаяОрганизация = Истина;
	ИначеЕсли ОплачиватьСРасчетногоСчетаФилиала Тогда
		//смотрим, если счет филиала указан, то в качетсве организации выступает сам филиал
		//иначе голова
		Если ЗначениеЗаполнено(СтрокаДанных.СтруктурнаяЕдиница) Тогда
			НайденнаяСтрока = РасчетныеСчетаФилиалов.Найти(СтрокаДанных.СтруктурнаяЕдиница, "Филиал" );
		Иначе	
			НайденнаяСтрока = РасчетныеСчетаФилиалов.Найти(СтрокаДанных.Организация, "Филиал" );
		КонецЕсли;
		
		Если НЕ  НайденнаяСтрока = Неопределено Тогда
			СтрокаДанных.СчетОрганизации = НайденнаяСтрока.РасчетныйСчет;	
		Иначе
			//поробуем найти основной расчетный счет, если он тенговый
			УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СтрокаДанных.СчетОрганизации,СтрокаДанных.Организация, мВалютаРегламентированногоУчета);
		КонецЕсли;
	Иначе
		СтрокаДанных.Организация = Организация;
		СтрокаДанных.СчетОрганизации = СчетОрганизации;		
	КонецЕсли;
	 	
	//Заполняем Получателя денег:
	//1. Смотрим если на счетах раздела 3100 субконто "Контрагенты", если есть Субконто, то получателя берем из него
	//   р/с - основной расчетный счет покупателя
	//	ДЛЯ ВСЕХ НАЛОГОВ, КРОМЕ ПРОЧИХ (СЧЕТ "3190")
	//  2. Если нет Субконто "Контрагенты" на счетах уплаты налогов, то получателя берем из ресурса "Налоговый комитет"
	//    регистра "исчисление налогов стр. единиц" с отбором оп виду налога и филиалу.
	//    р/с - основной расчетный счет покупателя
	//		3. Если нет записи регистре по филлиалу берем запись в регистре "исчисление налогов стр. единиц" по голове
	//         р/с - основной расчетный счет покупателя
	//			4. Если нет записи в регистре по голове, то получателя и р/с получателя берем из спр. "Налоги и сборы 
	//			   и отчисления" по данному виду налога.
	//
	//	ДЛЯ ПРОЧИХ НАЛОГОВ (СЧЕТ "3190")
	// 2. Если нет Субконто "Контрагенты" на счетах уплаты налогов, то получателя и р/с получателя берем из 
	//    спр. "Налоги и сборы и отчисления" по данному виду налога.
                                                                                                     	
	ЕстьКонтрагентНаСчете = ЕстьСубконтоКонтрагенты(СтрокаДанных.СчетУчетаРасчетовСКонтрагентомБУ);
	СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	//если есть контрагент на счете, а счет учета =3120, и Контрагент = Неопределено
	//тогда данные получались из регистра накопления, и контрагента взять неоткуда, поэтому берем из регистра сведений
	//"Исчисление структурных единиц"	
	Если ЕстьКонтрагентНаСчете И Не АнализируетсяГоловнаяОрганизация
		ИЛИ Не (СтрокаДанных.СчетУчетаРасчетовСКонтрагентомБУ  = ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог И СтрокаДанных.СубконтоДтБУ3 = Неопределено)Тогда
		СтрокаДанных.Контрагент = ?(ТипЗнч(СтрокаДанных.СубконтоДтБУ3) = Тип("СправочникСсылка.Контрагенты"),СтрокаДанных.СубконтоДтБУ3,Справочники.Контрагенты.ПустаяСсылка());
		УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СчетКонтрагента, СтрокаДанных.Контрагент, мВалютаРегламентированногоУчета);
		СтрокаДанных.СчетКонтрагента = СчетКонтрагента;
	Иначе
		
		Если СтрокаДанных.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.Акцизы Тогда
			ВидНалога = Перечисления.РазделыНалоговогоУчета.Акциз;
		ИначеЕсли СтрокаДанных.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.КорпоративныйПодоходныйНалог Тогда
			ВидНалога = Перечисления.РазделыНалоговогоУчета.КПН;
		ИначеЕсли СтрокаДанных.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость Тогда
			ВидНалога = Перечисления.РазделыНалоговогоУчета.НДС;
		ИначеЕсли  СтрокаДанных.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ПрочиеНалоги Тогда
			Возврат;
		Иначе //все остальные налоги			
			ВидНалога = Перечисления.РазделыНалоговогоУчета.МестныеНалоги;
		КонецЕсли;                  		
		Контрагент = ЗаполнитьПолучателяПлатежки(ВидНалога, СтрокаДанных.Плательщик);
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СтрокаДанных.Контрагент = Контрагент;
			УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(СчетКонтрагента, СтрокаДанных.Контрагент, мВалютаРегламентированногоУчета);
			СтрокаДанных.СчетКонтрагента = СчетКонтрагента;
		КонецЕсли;
		//Если контрагент не заполнен, то он уже заполен данными из спр. "налоги сборы и отчисления"
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьПлатежноеПоручение(СтрокаДанных)
	           
	ДокументОбъект = Документы.ПлатежноеПоручениеИсходящее.СоздатьДокумент();
	
	ДокументОбъект.Дата        = ДатаУплаты;
	ДокументОбъект.ДатаВыписки = ДатаУплаты;
	ТекПользователь = ОбщегоНазначения.ПолучитьЗначениеПеременной("глТекущийПользователь");
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, ТекПользователь, мВалютаРегламентированногоУчета);
		
	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтрокаДанных);
		
	ВыводитьРНН = НЕ ЗначениеЗаполнено(мДатаПрекращенияВыводаРНН) ИЛИ ДатаУплаты<мДатаПрекращенияВыводаРНН;

	
	ДокументОбъект.СтруктурноеПодразделениеОтправитель = СтрокаДанных.СтруктурнаяЕдиница;
	
	ДокументОбъект.ВидОперации     = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;	
	Если ЗначениеЗаполнено(СтрокаДанных.СчетОрганизации) Тогда
		ДокументОбъект.СчетБанк = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СтрокаДанных.СчетОрганизации, ДокументОбъект.СчетБанк.Пустая()).СчетУчетаБУ;		
	КонецЕсли; 
	 		
	Если ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации.ТекстКорреспондента) Тогда
		ДокументОбъект.ТекстПлательщика = ДокументОбъект.СчетОрганизации.ТекстКорреспондента;
	Иначе
		ДокументОбъект.ТекстПлательщика = ?(НЕ ЗначениеЗаполнено(ДокументОбъект.Организация.НаименованиеПолное), ДокументОбъект.Организация.Наименование, ДокументОбъект.Организация.НаименованиеПолное);
	КонецЕсли;

	Если НЕ ДокументОбъект.СчетКонтрагента.Пустая() Тогда
		ДокументОбъект.ТекстПолучателя = ДокументОбъект.СчетКонтрагента.ТекстКорреспондента;
	Иначе
		ДокументОбъект.ТекстПолучателя = ?(НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент.НаименованиеПолное), ДокументОбъект.Контрагент.Наименование, ДокументОбъект.Контрагент.НаименованиеПолное);
	КонецЕсли;

	
	Если ТипЗНЧ(СтрокаДанных.СтруктурнаяЕдиница) = Тип("СправочникСсылка.ПодразделенияОрганизаций")
		ИЛИ ТипЗНЧ(СтрокаДанных.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Организации") Тогда
		ДокументОбъект.РННПлательщика = ?(ВыводитьРНН, СтрокаДанных.Плательщик.РНН, СтрокаДанных.Плательщик.ИдентификационныйНомер);	
	КонецЕсли;
	
	Если НЕ ДокументОбъект.Контрагент.Пустая() Тогда
		ДокументОбъект.РННПолучателя = ?(ВыводитьРНН, ДокументОбъект.Контрагент.РНН,ДокументОбъект.Контрагент.ИдентификационныйКодЛичности);
	КонецЕсли; 	
	
	Попытка     	
		ДокументОбъект.Записать();
		Возврат ДокументОбъект.Ссылка;	
	Исключение                        		
		ОбщегоНазначения.СообщитьОбОшибке("Не сформировано платежное поручение исходящее (перечисление налога) на " 
			+ СтрокаДанных.СуммаДокумента + " тенге" + Символы.ПС + Символы.Таб + СтрокаДанных.НазначениеПлатежа);
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		
	Возврат Документы.ПлатежноеПоручениеИсходящее.ПустаяСсылка();	
	
	КонецПопытки;

КонецФункции

# КонецЕсли

мВалютаРегламентированногоУчета 		= Константы.ВалютаРегламентированногоУчета.Получить();
мОтображатьСтруктурныеПодразделения 	= Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
мСписокПодразделений 	 				= Новый СписокЗначений;
мСписокСтруктурныхЕдиниц 				= Новый СписокЗначений;
мДатаПрекращенияВыводаРНН 				= Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Получить();