// Текст модуля одинаковый в:
// - Обработка.ОбменЭСФ.МодульОбъекта,
// - Обработка.ОбменЭСФ.Форма.КлиентОбычная,
// - Обработка.ОбменЭСФ.Форма.КлиентУправляемая.
// При изменении в одном месте необходимо внести их в другие места.

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Перем КэшированнаяФабрикаЭСФ_XML_API_ЭЦП_Версия1;
Перем КэшированнаяФабрикаЭСФ_XML_API_ЭЦП_Версия2;
Перем КэшированнаяФабрикаInvoiceInfo_Версия2;

Перем КэшированнаяФабрикаUFORM_XML_API_ЭЦП_Версия1;
Перем КэшированнаяФабрика_queryBalanceUpdates_V1;

////////////////////////////////////////////////////////////////////////////////
// КРИПТОГРАФИЯ. НАЧАЛО.

// Текст криптографии одинаковый в:
// - Обработка.ОбменЭСФ.МодульОбъекта,
// - Обработка.ОбменЭСФ.Форма.КлиентОбычная,
// - Обработка.ОбменЭСФ.Форма.КлиентУправляемая.
// При изменении в одном месте необходимо внести их в другие места.

#Область Криптография

Перем ВерсияБЭСФ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПрограммныйИнтерфейс

Функция УдалосьПодключитьКриптопровайдерНаКлиенте(Версия = "", РежимТишины = Ложь, ТолькоПодключение = Ложь) Экспорт
	
	Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер(, РежимТишины, ТолькоПодключение);
		
	Если Криптопровайдер = Неопределено Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		Подключается = Ложь;
		Версия = "";
	Иначе
		Подключается = Истина;
		Версия = Криптопровайдер.Версия;
	КонецЕсли;
		
		
	Возврат Подключается;
	
КонецФункции

Функция УдалосьПодключитьКриптопровайдерНаСервере(Версия = "", РежимТишины = Ложь) Экспорт
	
	Подключается = КриптографияВызовСервера.УдалосьПодключитьКриптопровайдерНаСервере(Версия, РежимТишины);
			       		
	Возврат Подключается;	
	
КонецФункции

Функция КриптопровайдерПодключается(Версия = "", РежимТишины = Ложь, МестоВыполненияОпераций = Неопределено, ТолькоПодключение = Ложь) Экспорт
	// Место выполнения операции
	ВыполнятьКриптографическиеОперацииНаКлиенте = Неопределено;	
	Если ЗначениеЗаполнено(МестоВыполненияОпераций) Тогда
		ВыполнятьКриптографическиеОперацииНаКлиенте = МестоВыполненияОпераций = Перечисления.МестаВыполненияКриптографическихОпераций.НаКлиенте;
	Иначе
		ВыполнятьКриптографическиеОперацииНаКлиенте = ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	КонецЕсли;	
	
	// Проверка подключения в требуемом контексте.
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда		
		Подключается = УдалосьПодключитьКриптопровайдерНаКлиенте(Версия, РежимТишины, ТолькоПодключение);		
	Иначе		
		Подключается = УдалосьПодключитьКриптопровайдерНаСервере(Версия, РежимТишины);				
	КонецЕсли;
	
	Возврат Подключается;	

КонецФункции

// При вызове процедуры из конекста клиента необходимо передавать идентификатор клиентской формы,
// иначе хранилище будет очищено при возврате в контекст клиента
Функция АдресБиблиотекиКриптографии(УникальныйИдентификаторФормыКлиента = Неопределено) Экспорт
	СсылкаНаМодуль = ПоместитьВоВременноеХранилище(Константы.ЭСФВнешнийМодуль.Получить().Получить(), УникальныйИдентификаторФормыКлиента);
	Возврат СсылкаНаМодуль;
КонецФункции

Функция АдресБиблиотекиКриптографииНЦА(УникальныйИдентификаторФормыКлиента = Неопределено) Экспорт
	Компонента = Обработки.ОбменЭСФ.ПолучитьМакет("WSCrypto");
	СсылкаНаМодуль = ПоместитьВоВременноеХранилище(Компонента, УникальныйИдентификаторФормыКлиента);
	Возврат СсылкаНаМодуль;
КонецФункции

Функция ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке) Экспорт
	
	Ошибка = Новый Структура;
	
	Если Криптопровайдер = Неопределено Тогда
		Ошибка.Вставить("Версия", "");
		Ошибка.Вставить("КодОшибки", "");
		Ошибка.Вставить("ОписаниеОшибки", "");		
	Иначе
		Ошибка.Вставить("Версия", Криптопровайдер.Версия);
		Ошибка.Вставить("КодОшибки", Криптопровайдер.КодОшибки);
		Ошибка.Вставить("ОписаниеОшибки", Криптопровайдер.ОписаниеОшибки);
	КонецЕсли;
	
	Ошибка.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
	
	ТипОшибки = ТипОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("ТипОшибки", ТипОшибки);
	
	ПредставленияОшибки = ПредставленияОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("КраткоеПредставление", ПредставленияОшибки.КраткоеПредставление);
	Ошибка.Вставить("ПодробноеПредставление", ПредставленияОшибки.ПодробноеПредставление);
	
	Возврат Ошибка;
	
КонецФункции

// Возвращает строку, содержащую ЭЦП.
//
// Параметры:
//  СтрокаДляПодписи - Строка - Строка, для которой необходимо получить ЭЦП.
//  Ключ - Строка - Ключевой контейнер PKCS#12 в кодировке Base64.
//  ПарольКлюча - Строка - Пароль от ключевого контейнера PKCS#12.
//
// Возвращаемое значение:
//  Строка - ЭЦП.
//
Функция СоздатьЭЦП(Знач СтрокаДляПодписи, Знач КлючBase64, Знач ПарольКлюча) Экспорт
	
	Попытка
				
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер();		
		Криптопровайдер.ИнициализироватьХранилищеКлюча(КлючBase64, ПарольКлюча, ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64());	
		ЭЦП = Криптопровайдер.ПолучитьПодпись(СтрокаДляПодписи, ПолучитьПодпись_ТипДанных_UTF8());		
		
		Возврат ЭЦП;	
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = НСтр(
		"ru = 'Не удалось подписать электронный счет-фактуру.
		|[КраткоеПредставление]'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "[КраткоеПредставление]", Ошибка.КраткоеПредставление);				
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецФункции

// Возвращает строку, содержащую ЭЦП.
//
// Параметры:
//  Криптопровайдер - Криптопровайдер, по которому определяется строка подписи ЭЦП
//  СтрокаДляПодписи - Строка - Строка, для которой необходимо получить ЭЦП.
//
// Возвращаемое значение:
//  Строка - ЭЦП.
//
Функция СоздатьЭЦПДляПакета(Криптопровайдер, Знач СтрокаДляПодписи) Экспорт
	
	Попытка
		
		ЭЦП = Криптопровайдер.ПолучитьПодпись(СтрокаДляПодписи, ПолучитьПодпись_ТипДанных_UTF8());		
		
		Возврат ЭЦП;	
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = НСтр(
		"ru = 'Не удалось подписать электронный счет-фактуру.
		|[КраткоеПредставление]'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "[КраткоеПредставление]", Ошибка.КраткоеПредставление);				
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецФункции

// Возвращает тип ключа (ГОСТ или RSA) файла PKCS#12.
//
// Параметры:
//  КлючBase64 - Строка - Ключевой контейнер в Base64, тип ключа которого необходимо определить.
//  ПарольКлюча - Строка - Пароль от ключевого контейнера.
//
// Возвращаемое значение:
//  Строка - Тип ключа. См. КлючGOST(), КлючRSA().
//   Если не удалось определить тип ключа, то возвращается пустая строка.
//
Функция ТипКлюча(Знач КлючBase64, Знач ПарольОтКлюча) Экспорт
	
	СвойстваСертификата = СвойстваСертификата(КлючBase64, ПарольОтКлюча);	
	ТипКлюча = СвойстваСертификата.ТипКлюча;	
	Возврат ТипКлюча;
	
КонецФункции

// Возвращает сертификат открытого ключа в виде строки Base64.
//
// Параметры:
//  КлючBase64 - Строка - Файл PKCS#12 содержащий сертификат открытого ключа, в кодировке P12.
//  Пароль - Строка - Пароль к файлу PKCS#12 содержащему сертификат открытого ключа.
//
// Возвращаемое значение:
//  Строка - Сертификат открытого ключа в формате Base64.
//
Функция ОткрытыйСертификатBase64(Знач КлючBase64, Знач ПарольКлюча) Экспорт
		
	Попытка
		
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер();
		Криптопровайдер.ИнициализироватьХранилищеКлюча(КлючBase64, ПарольКлюча, ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64());	
		Сертификат = Криптопровайдер.ПолучитьСертификат(ПолучитьСертификат_ТипВозвращаемыхДанных_СтрокаBase64());
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = НСтр(
		"ru = 'Не удалось выполнить действие.
		|[КраткоеПредставление]'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "[КраткоеПредставление]", Ошибка.КраткоеПредставление);				
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	СертификатBase64 = "";
	
	Для Счетчик = 1 По СтрЧислоСтрок(Сертификат) Цикл
		ТекущаяСтрока = СтрПолучитьСтроку(Сертификат, Счетчик);
		Если Найти(ТекущаяСтрока, " CERTIFICATE-----") > 0 Тогда
			Продолжить;
		КонецЕсли;	
		СертификатBase64 = СертификатBase64 + СокрЛП(СтрПолучитьСтроку(Сертификат, Счетчик));
	КонецЦикла;
	
	СертификатBase64 = СокрЛП(СертификатBase64);
	
	Возврат СертификатBase64;
			
КонецФункции

// Возвращает свойства сертификата, извлеченные из файла *.p12.
// При выполнении происходит обращение к серверу.
//
// Параметры:
//  КлючBase64 - Строка - Файл P12 в кодировке Base64.
//  ПарольОтКлюча - Строка - Пароль от файла P12.
//
// Возвращаемое значение:
//  Структура - Свойства сертификата.
//   |- Ключ - Строка - Имя свойства сертификата.
//   |- Значение - Строка - Значение свойства сертификата.
//  Содержит все свойства из НоваяКоллекцияИдентификаторовСвойствСертификата().
//  Если какого-нибудь свойства не было в сертификате, то его значением будет пустая строка.
//
Функция СвойстваСертификатаБезОбработки(Знач КлючBase64, Знач ПарольОтКлюча) Экспорт 
	
	Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер();	
	Криптопровайдер.ИнициализироватьХранилищеКлюча(КлючBase64, ПарольОтКлюча, ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64());	
	СвойстваXML = Криптопровайдер.ПолучитьСвойстваСертификатаВВидеXML();
	
	СвойстваСертификата = СвойстваСертификатаБезОбработкиНаСервере(СвойстваXML);
	
	Возврат СвойстваСертификата;
	
КонецФункции

Функция СвойстваСертификата(Знач КлючBase64, Знач ПарольОтКлюча) Экспорт 
	
	СвойстваСертификатаБезОбработки = СвойстваСертификатаБезОбработки(КлючBase64, ПарольОтКлюча);	
	
	СвойстваСертификата = НовыеСвойстваСертификата();
	
	СвойстваСертификата.ИдентификаторОткрытогоКлюча = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "ext.subjectKeyIdentifier", "");
	СвойстваСертификата.ИмяИздателя = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "issuer.CN", "");
	СвойстваСертификата.СрокГодностиОт = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "not_before", "");
	СвойстваСертификата.СрокГодностиДо = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "not_after", "");
	СвойстваСертификата.ИмяФамилияСубъекта = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.CN", "");
	СвойстваСертификата.ОтчествоСубъекта = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.GN", "");	
	СвойстваСертификата.ИИНСубъекта = Сертфикат_ИИНСубъектаИзСвойств(СвойстваСертификатаБезОбработки);
	СвойстваСертификата.EmailСубъекта = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.emailAddress", "");	
	СвойстваСертификата.Страна = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.C", "");	
	СвойстваСертификата.РегионОбласть = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.ST", "");	
	СвойстваСертификата.Город = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.L", "");	
	СвойстваСертификата.БИНОрганизации = Сертфикат_БИНОрганизацииИзСвойств(СвойстваСертификатаБезОбработки);	
	СвойстваСертификата.НаименованиеОрганизации = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.O", "");		
	СвойстваСертификата.ТипКлюча = Сертификат_ТипКлючаИзСвойств(СвойстваСертификатаБезОбработки);
	
	Возврат СвойстваСертификата;
	
КонецФункции

// Возврашает текстовое описание сертификата.
//
// Параметры:
//  Свойства - Структура - См. СвойстваСертификата()
//
// Возвращаемое значение:
//  Строка, текстовое описание сертификата.
//
Функция ОписаниеСертификата(Знач Свойства) Экспорт
	
	//Наименование организации:
	//БИН организации: 
	//
	//ФИО владельца:
	//ИИН владельца:
	//Адрес владельца:
	//Email владельца:
	//
	//Издатель сертификата:
	//Начало действия сертификата:
	//Окончание действия сертификата:
	//Идентификатор открытого ключа:
	
	Описание = "";
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Наименование организации'"), Свойства.НаименованиеОрганизации);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'БИН организации'"), Свойства.БИНОрганизации);
	
	Описание = Описание + Символы.ПС;
	
	ФИО = СокрЛП(Свойства.ИмяФамилияСубъекта + " " + Свойства.ОтчествоСубъекта);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'ФИО владельца'"), ФИО);
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'ИИН владельца'"), Свойства.ИИНСубъекта);
	
	Адрес = Свойства.Страна + ", " + Свойства.РегионОбласть + ", " + Свойства.Город;
	Пока Лев(Адрес, 2) = ", " Цикл
		Адрес = Сред(Адрес, 3);	
	КонецЦикла;
	Пока Прав(Адрес, 2) = ", " Цикл
		Адрес = Сред(Адрес, 1, СтрДлина(Адрес) - 2);	
	КонецЦикла;	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Адрес владельца'"), Адрес);	
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Email владельца'"), Свойства.EmailСубъекта);
	
	Описание = Описание + Символы.ПС;
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Издатель сертификата'"),           Свойства.ИмяИздателя);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Начало действия сертификата'"),    Свойства.СрокГодностиОт);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Окончание действия сертификата'"), Свойства.СрокГодностиДо);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Идентификатор открытого ключа'"),  Свойства.ИдентификаторОткрытогоКлюча);
	
	Возврат СокрЛП(Описание);
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

#Область ПримитивныеКонстанты

Функция Ошибка_НеверныйПароль() Экспорт
	Возврат "НеверныйПароль";	
КонецФункции

Функция Ошибка_НеверныйФайл() Экспорт
	Возврат "НеверныйФайл";	
КонецФункции

Функция Ошибка_НеизвестнаяОшибка() Экспорт
	Возврат "НеизвестнаяОшибка";	
КонецФункции

Функция ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64() Экспорт
	Возврат 2;	
КонецФункции

Функция ПолучитьСертификат_ТипВозвращаемыхДанных_СтрокаBase64() Экспорт
	Возврат 1;	
КонецФункции

Функция ПолучитьПодпись_ТипДанных_UTF8() Экспорт
	Возврат 1;
КонецФункции

// не имеет директив
Функция ИмяКомпонентыКриптографии() Экспорт
	
	// для обхода ошибки подключения внешней компоненты на серверных базах
	// при параллельных сеансах работы пользователей используем номер сеанса ИБ, начиная с версии 8.3.7
	Попытка
		
		ТекущийСеансИБ = Вычислить("ПолучитьТекущийСеансИнформационнойБазы()");
		
		УникальныйНомерКомпоненты = "" + Формат(ТекущийСеансИБ.НомерСеанса, "ЧРГ=_") + "" + Формат(ТекущийСеансИБ.НачалоСеанса, "ДФ=ддММгггЧЧммсс") + ЭСФВызовСервераПовтИсп.ПолучитьЭСФВерсияВнешнегоМодуля();
		
		Результат = "";
		
		Для НомерСимвола = 1 По СтрДлина(УникальныйНомерКомпоненты) Цикл
			КодСимвола = КодСимвола(УникальныйНомерКомпоненты, НомерСимвола);
			Если КодСимвола > 47 И КодСимвола < 58 Тогда // Число.
				Результат = Результат + Символ(КодСимвола);
			КонецЕсли;
		КонецЦикла;
		
		УникальныйНомерКомпоненты = Результат;
		
	Исключение
		
		УникальныйНомерКомпоненты = "";
		
	КонецПопытки;
	
	Возврат "CryptoAPI" + УникальныйНомерКомпоненты;
	
КонецФункции

Функция ИмяКомпонентыКриптографииНЦА() Экспорт
	
	// для обхода ошибки подключения внешней компоненты на серверных базах
	// при параллельных сеансах работы пользователей используем номер сеанса ИБ, начиная с версии 8.3.7
	Попытка
		
		ТекущийСеансИБ = Вычислить("ПолучитьТекущийСеансИнформационнойБазы()");
		
		УникальныйНомерКомпоненты = "" + Формат(ТекущийСеансИБ.НомерСеанса, "ЧРГ=_") + "" + Формат(ТекущийСеансИБ.НачалоСеанса, "ДФ=ддММгггЧЧммсс");
		
		Результат = "";
		
		Для НомерСимвола = 1 По СтрДлина(УникальныйНомерКомпоненты) Цикл
			КодСимвола = КодСимвола(УникальныйНомерКомпоненты, НомерСимвола);
			Если КодСимвола > 47 И КодСимвола < 58 Тогда // Число.
				Результат = Результат + Символ(КодСимвола);
			КонецЕсли;
		КонецЦикла;
		
		УникальныйНомерКомпоненты = Результат;
		
	Исключение
		
		УникальныйНомерКомпоненты = "";
		
	КонецПопытки;
	
	Возврат "WSCrypto" + УникальныйНомерКомпоненты;
	
КонецФункции

// не имеет директив
Функция ИмяОбъектаКриптографии() Экспорт
	Возврат "AddIn." + ИмяКомпонентыКриптографии() + ".Crypto";	
КонецФункции

Функция ИмяОбъектаКриптографииНЦА() Экспорт
	Возврат "AddIn." + ИмяКомпонентыКриптографииНЦА() + ".WSCrypto";	
КонецФункции

Функция ПолноеИмяФормыУстановкаКриптографии() Экспорт
	Возврат "Обработка.ОбменЭСФ.Форма.УстановкаКриптографии";	
КонецФункции

Функция КлючGOST() Экспорт 
	
	Возврат "GOST";
	
КонецФункции

Функция КлючRSA() Экспорт
	
	Возврат "RSA";
	
КонецФункции

//Возвращает текст запроса для получения кода ТНВЭД для ОС и НМА
Функция ТекстЗапросаКодТНВЭДОСИНМА()

	Возврат ЭСФСерверПереопределяемый.ТекстЗапросаКодТНВЭДОСИНМА();		

КонецФункции

#КонецОбласти

#Область Сертификат

Функция Сертификат_ТипКлючаИзСвойств(Знач СвойстваСертификатаБезОбработки)
	
	ТипКлюча = "";
	
	ИмяАлгоритма = СвойстваСертификатаБезОбработки.Получить("algorithmName");
	
	Если ИмяАлгоритма <> Неопределено Тогда
		Если Найти(ВРег(ИмяАлгоритма), "RSA") <> 0 Тогда
			ТипКлюча = КлючRSA();
		ИначеЕсли Найти(ВРег(ИмяАлгоритма), "GOST") <> 0 Тогда
			ТипКлюча = КлючGOST();	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипКлюча;
	
КонецФункции

Функция Сертфикат_ИИНСубъектаИзСвойств(Знач СвойстваСертификатаБезОбработки)
	
	ИИН = "";
	
	СерийныйНомер = СвойстваСертификатаБезОбработки.Получить("subject.serialNumber");
	Если СтрДлина(СерийныйНомер) > 3 Тогда
		ИИН = Сред(СерийныйНомер, 4);
	КонецЕсли;
	
	Возврат ИИН;
	
КонецФункции

Функция Сертфикат_БИНОрганизацииИзСвойств(Знач СвойстваСертификатаБезОбработки)
	
	БИН = "";
	
	СерийныйНомер = СвойстваСертификатаБезОбработки.Получить("subject.OU");
	Если СтрДлина(СерийныйНомер) > 3 Тогда
		БИН = Сред(СерийныйНомер, 4);
	КонецЕсли;
	
	Возврат БИН;
	
КонецФункции

Функция НовыеСвойстваСертификата() 
	
	СвойстваСертификата = Новый Структура;
	
	СвойстваСертификата.Вставить("ИдентификаторОткрытогоКлюча", "");
	СвойстваСертификата.Вставить("ИмяИздателя", "");
	СвойстваСертификата.Вставить("СрокГодностиОт", "");
	СвойстваСертификата.Вставить("СрокГодностиДо", "");
	СвойстваСертификата.Вставить("ИмяФамилияСубъекта", "");
	СвойстваСертификата.Вставить("ОтчествоСубъекта", "");
	СвойстваСертификата.Вставить("ИИНСубъекта", "");
	СвойстваСертификата.Вставить("EmailСубъекта", "");
	СвойстваСертификата.Вставить("Страна", "");
	СвойстваСертификата.Вставить("РегионОбласть", "");
	СвойстваСертификата.Вставить("Город", "");
	СвойстваСертификата.Вставить("БИНОрганизации", "");
	СвойстваСертификата.Вставить("НаименованиеОрганизации", "");
	СвойстваСертификата.Вставить("ТипКлюча", "");
	
	Возврат СвойстваСертификата;
	
КонецФункции

Функция ДобавитьСтрокуОписания(Описание, Знач Наименование, Знач Значение)
	
	Если НЕ ПустаяСтрока(Значение) Тогда
		Строка = НСтр("ru = '%Наименование%: %Значение%'");
		Строка = СтрЗаменить(Строка, "%Наименование%", Наименование);
		Строка = СтрЗаменить(Строка, "%Значение%", Значение);
		Описание = Описание + Строка + Символы.ПС;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСвойствоСертификата(СвойстваСертификата, ИмяСвойства, ПустоеЗначение)
	
	ЗначениеСвойства = СвойстваСертификата.Получить(ИмяСвойства);
	
	Если ЗначениеСвойства = Неопределено Тогда
		Возврат ПустоеЗначение;	
	Иначе
		Возврат ЗначениеСвойства;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОшибкиКриптографии

Функция ТипОшибкиКриптопровайдера(Ошибка)
	
	ТипОшибки = Ошибка_НеизвестнаяОшибка();
	
	Если Найти(Ошибка.ОписаниеОшибки, "0D0680A8") Тогда
		ТипОшибки = Ошибка_НеверныйФайл();		
	ИначеЕсли Найти(Ошибка.ОписаниеОшибки, "23076071") Тогда
		ТипОшибки = Ошибка_НеверныйПароль();	
	Иначе
		ТипОшибки = Ошибка_НеизвестнаяОшибка();	
	КонецЕсли;
	
	Возврат ТипОшибки;
	
КонецФункции

Функция ПредставленияОшибкиКриптопровайдера(Ошибка)
	
	ПредставленияОшибки = Новый Структура;
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);
	КраткоеПредставление = КраткоеПредставление + Символы.ПС + НСтр("ru = 'Подробности ошибки смотрите в журнале регистрации.'");
	ПредставленияОшибки.Вставить("КраткоеПредставление", КраткоеПредставление);
	
	ПодробноеПредставление = ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка);
	ПредставленияОшибки.Вставить("ПодробноеПредставление", ПодробноеПредставление);
	
	Возврат ПредставленияОшибки;
	
КонецФункции

Функция КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	КраткоеПредставление = "";
	
	Если Ошибка.ТипОшибки = Ошибка_НеверныйФайл() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно выбранный файл не является файлом сертификата ""*.p12"".'");		
	ИначеЕсли Ошибка.ТипОшибки = Ошибка_НеверныйПароль() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно был введен некорректный пароль для файла сертификата.'");				
	Иначе	
		КраткоеПредставление = КраткоеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);					
	КонецЕсли;
	
	Возврат КраткоеПредставление;
	
КонецФункции

Функция ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	ПодробноеПредставление = НСтр(
	"ru = '[КраткоеПредставление]
	|[ИнформацияИзКриптопровайдера]
	|[ПодробноеПредставлениеОшибки]'");
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);	
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[КраткоеПредставление]", КраткоеПредставление);
	
	Если ПустаяСтрока(Ошибка.Версия) И ПустаяСтрока(Ошибка.КодОшибки) И ПустаяСтрока(Ошибка.ОписаниеОшибки) Тогда
		ИнформацияИзКриптопровайдера = "";
	Иначе
		ИнформацияИзКриптопровайдера = НСтр("ru = 'Версия криптографии: [Версия], Код ошибки: [КодОшибки], Описание ошибки: [ОписаниеОшибки]'");
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[Версия]", Ошибка.Версия);
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[КодОшибки]", Ошибка.КодОшибки);
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[ОписаниеОшибки]", Ошибка.ОписаниеОшибки);
	КонецЕсли;	
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[ИнформацияИзКриптопровайдера]", ИнформацияИзКриптопровайдера);
	
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[ПодробноеПредставлениеОшибки]", ПодробноеПредставлениеОшибки);
	
	Возврат ПодробноеПредставление;
	
КонецФункции

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ КОТОРЫЕ НУЖНО ВЫПОЛНЯТЬ ОБЯЗАТЕЛЬНО НА СЕРВЕРЕ

#Область СерверныеПроцедурыИФункции

Функция СвойстваСертификатаБезОбработкиНаСервере(Знач СвойстваXML) Экспорт
	
	СвойстваXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(СвойстваXML, ФабрикаXDTO);
	СписокСвойствXDTO = ЭСФСервер.СписокXDTOИзОбъектXDTO(СвойстваXDTO.prop);
		
	СвойстваСертификата = Новый Соответствие;
	
	Для Каждого СвойствоXDTO Из СписокСвойствXDTO Цикл
		СвойстваСертификата.Вставить(СвойствоXDTO.name, СокрЛП(СвойствоXDTO.value));	
	КонецЦикла;
		
	Возврат СвойстваСертификата;
	
КонецФункции

#КонецОбласти



#Область МодульОбновленияКриптографии

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОНЛАЙН-ОБНОВЛЕНИЯ МОДУЛЯ

// Процедуры c директивой //&НаКлиентеНаСервереБезКонтекста в модуле обычной формы
// объявляются БЕЗ ДИРЕКТИВ

#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбновитьМодульКриптографии(ПараметрыАвторизации, ВыполняемоеОповещение = Неопределено, ТихийРежим = Ложь, Организация = Неопределено) Экспорт

	Состояние("Подождите, пожалуйста...", ,
		"Производится проверка наличия обновлений модуля криптографии...");
		
	ШапкаОшибки = НСтр("ru = 'Ошибка обновления модуля криптографии:'");	
	
	СвойстваМодуляДляТекущегоРелиза = Неопределено;
	КаталогФайловНаСервере = Неопределено;
	
	ПараметрыСервераИнтернета = ПолучитьПараметрыИнтернета(ПараметрыАвторизации);
	ПараметрыСервераИнтернета = ПоместитьВоВременноеХранилище(ПараметрыСервераИнтернета);
	
	Если ЭлектронноеВзаимодействиеССервисамиВызовСервера.ПроверитьНаличиеОбновлений(ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза, ШапкаОшибки) = Ложь Тогда 
		// обновление не требуется, завершаем процесс
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Ложь);
		КонецЕсли;
	Иначе
		Если ЭтоАдресВременногоХранилища(ПараметрыСервераИнтернета) Тогда
			ПараметрыСервераИнтернета = ПолучитьИзВременногоХранилища(ПараметрыСервераИнтернета);
		КонецЕсли;
		// Добавим к параметрым версию модуля
		ПараметрыСервераИнтернета.ДополнительныеПараметры.Вставить("Версия", СвойстваМодуляДляТекущегоРелиза.Версия);
			
		Если НЕ ТихийРежим Тогда
			
			Состояние("Подождите, пожалуйста...", , "Обнаружена новая версия модуля", БиблиотекаКартинок.ДлительнаяОперация48);
			ДатаВыпускаМодуля = ЭСФКлиентСервер.ДатаПоСтроке(СвойстваМодуляДляТекущегоРелиза.Дата);
			// запрашиваем подтверждение на закачку нового модуля
			ТекстВопроса = "В Интернете доступно обновление библиотеки криптографии.
				|
				|Новый модуль: версия " + СвойстваМодуляДляТекущегоРелиза.Версия;
			Если ЗначениеЗаполнено(ДатаВыпускаМодуля) Тогда
				ТекстВопроса = ТекстВопроса + " от " + Формат(ДатаВыпускаМодуля, "ДЛФ=DD");
			Иначе
				ТекстВопроса = ТекстВопроса + ".";
			КонецЕсли;
			ТекстВопроса = ТекстВопроса + "
				|
				|Обновить модуль сейчас (рекомендуется)?";
				
			
			// Выполним обработку
			ДополнительныеПараметры = Новый Структура("ВыполняемоеОповещение, ШапкаОшибки, ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза, Организация", 
				ВыполняемоеОповещение, ШапкаОшибки, ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза, Организация);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьМодульКриптографииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			Ответ = КодВозвратаДиалога.Да;
			
			ДополнительныеПараметры = Новый Структура("ВыполняемоеОповещение, ШапкаОшибки, ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза, Организация", 
				ВыполняемоеОповещение, ШапкаОшибки, ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза, Организация);
			
			ОбновитьМодульКриптографииЗавершение(Ответ, ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМодульКриптографииЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ШапкаОшибки = ДополнительныеПараметры.ШапкаОшибки;
	ПараметрыСервераИнтернета = ДополнительныеПараметры.ПараметрыСервераИнтернета;
	
	//СвойстваМодуляДляТекущегоРелиза - Возвращаемое значение по результатам обновления
	СвойстваМодуляДляТекущегоРелиза = ДополнительныеПараметры.СвойстваМодуляДляТекущегоРелиза;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ДополнительныеПараметры.ВыполняемоеОповещение = Неопределено;	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		// закачиваем, кэшируем и включаем признак использования внешнего модуля		
		Состояние("Подождите, пожалуйста...", , "Производится получение новой версии модуля...", БиблиотекаКартинок.ДлительнаяОперация48);
		ДополнительныеПараметры.Вставить("ИнформацияОПрограмме", ИнформацияОПрограмме());
		ДополнительныеПараметры.ПараметрыСервераИнтернета = ПоместитьВоВременноеХранилище(ДополнительныеПараметры.ПараметрыСервераИнтернета);
		Результат = ЭлектронноеВзаимодействиеССервисамиВызовСервера.ЗакачатьИВключитьПризнакИспользования(ДополнительныеПараметры, СвойстваМодуляДляТекущегоРелиза, ШапкаОшибки);
		Если Результат Тогда			
			Оповестить("ОбновленМодульКриптографии");
		КонецЕсли;
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
		КонецЕсли;
	Иначе
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Ложь);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьПараметрыИнтернета(СтруктураДополнительныхПараметров) Экспорт
	
	ПараметрыСервераИнтернета = Новый Структура("URLСервера,Порт, КаталогФайловНаСервере, ИмяКлючевогоФайлаНаСервере, Логин, Пароль, Прокси, ДополнительныеПараметры");
	
	ПараметрыСервераИнтернета.URLСервера = АдресРесурсаИТС();	
	ПараметрыСервераИнтернета.Прокси = ЭСФКлиентСервер.НовыйПроксиСерверИСЭСФ();
		
	// аутентификация пользователя	
	ПараметрыСервераИнтернета.ДополнительныеПараметры = СтруктураДополнительныхПараметров;
		
	Возврат ПараметрыСервераИнтернета;	
КонецФункции

#КонецОбласти

#Область СервисыИТС

///////////////////////////////////////////////////////////
// Имена сервисов

//&НаКлиентеНаСервереБезКонтекста
Функция АдресРесурсаИТС()
	Возврат "its.1c.kz";
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////////////////
// Функции разбора XML

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция СоздатьДеревоСтруктурыXML() Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Имя");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки = Неопределено, ЧтениеXML = Неопределено, Знач ТекУзел = Неопределено) Экспорт
	
	ПерваяИтерация = (ТекУзел = Неопределено);
	Если ПерваяИтерация Тогда
		ТекУзел = СоздатьДеревоСтруктурыXML();
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаXML);
		Исключение
			ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				НовУзел = ТекУзел.Строки.Добавить();
				НовУзел.Имя = ЧтениеXML.Имя;
				НовУзел.Тип = "Э";
				НовУзел.Значение = ЧтениеXML.Значение;
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					НовАтрибут = НовУзел.Строки.Добавить();
					НовАтрибут.Имя = ЧтениеXML.Имя;
					НовАтрибут.Тип = "А";
					НовАтрибут.Значение = ЧтениеXML.Значение;
				КонецЦикла;
				ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки, ЧтениеXML, НовУзел);
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					Возврат Неопределено;
				КонецЕсли;
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТипУзла = ТипУзлаXML.Текст И ТипЗнч(ТекУзел) = Тип("СтрокаДереваЗначений") И ТекУзел.Тип = "Э" Тогда
				ТекУзел.Значение = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПерваяИтерация Тогда
		Возврат ТекУзел;
	КонецЕсли;
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ЗагрузитьXMLВДеревоЗначений(ИмяФайлаXML = Неопределено, ТекстXML = Неопределено, ОписаниеОшибки = Неопределено) Экспорт
	
	// считываем текст из файла
	Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
		ТекстXML = ПрочитатьТекстИзФайла(ИмяФайлаXML, , Истина);
		Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// восстанавливаем дерево
	Возврат ЗагрузитьСтрокуXMLВДеревоЗначений(ТекстXML, ОписаниеОшибки);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////
// Функции работы с Интернет

//&НаКлиентеНаСервереБезКонтекста
Функция УстановитьСоединениеССерверомИнтернета(URLСервера, ПараметрыСоединения = Неопределено, ОписаниеОшибки = Неопределено) Экспорт
		
	НастройкиПрокси = ЭСФКлиентСервер.НовыйПроксиСерверИСЭСФ();
	
	Попытка
		Соединение = Новый HTTPСоединение(URLСервера, 
					?(ЗначениеЗаполнено(ПараметрыСоединения.Порт), ПараметрыСоединения.Порт, Неопределено),
					?(ЗначениеЗаполнено(ПараметрыСоединения.Логин), ПараметрыСоединения.Логин, Неопределено),
					?(ЗначениеЗаполнено(ПараметрыСоединения.Пароль), ПараметрыСоединения.Пароль, Неопределено),
					НастройкиПрокси);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////
// Функции работы с файлами-обновления
//&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяФайлаКартыРелизов() Экспорт
	Возврат "/download/esf/releasemap?version=2.0";		
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
// Возвращает структуру: Версия, Имя, Дата См. структуру файла releasemap для текущего релиза конфигурации
Функция ОпределитьСвойстваВнешнегоМодуляДляТекущегоРелиза(ДеревоКартыРелизов)
	
	ИнформацияОПрограмме = ИнформацияОПрограмме();
	
	Для Каждого Стр1 Из ДеревоКартыРелизов.Строки Цикл // уровень узла Файл
		Для Каждого Стр2 Из Стр1.Строки Цикл // уровень узла Платформа
			Если Стр2.Тип = "Э" И ТекущаяПлатформаСоответствуетУзлу(Стр2, ИнформацияОПрограмме.ВерсияПлатформы) Тогда
				Для Каждого Стр3 Из Стр2.Строки Цикл // уровень узла Конфигурация
					Если Стр3.Тип = "Э" И ТекущаяКонфигурацияСоответствуетУзлу(Стр3, ИнформацияОПрограмме) Тогда
						Для Каждого Стр4 Из Стр3.Строки Цикл // уровень узла Релиз
							Если Стр4.Тип = "Э" Тогда
								
								РезультатПоискаАтрибутаСВерсиейРелиза = Стр4.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "version", "А"));
								Если РезультатПоискаАтрибутаСВерсиейРелиза.Количество() = 0 Тогда
									Продолжить;
								КонецЕсли;
								ВерсияРелиза = СокрЛП(РезультатПоискаАтрибутаСВерсиейРелиза[0].Значение);
								
								Если ВерсияРелиза <> ИнформацияОПрограмме.ВерсияКонфигурации И ВерсияРелиза <> ИнформацияОПрограмме.ВерсияКонфигурацииБЭСФ Тогда
									Продолжить;
								КонецЕсли;
								
								Для Каждого Стр5 Из Стр4.Строки Цикл
									Если Стр5.Тип = "Э" И Стр5.Имя = "module" Тогда
										УзелВерсия = Стр5.Строки.Найти("version", "Имя");
										УзелИмя = Стр5.Строки.Найти("name", "Имя");
										УзелДата = Стр5.Строки.Найти("date", "Имя");
										Если УзелВерсия <> Неопределено И УзелИмя <> Неопределено Тогда
											Результат = Новый Структура("Версия, Имя", СокрЛП(УзелВерсия.Значение), СокрЛП(УзелИмя.Значение));
											Если ЗначениеЗаполнено(УзелДата) И ЗначениеЗаполнено(УзелДата.Значение) Тогда
												Результат.Вставить("Дата", УзелДата.Значение);
											КонецЕсли;
											Возврат Результат;
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
								
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ПрочитатьТекстИзФайла(ИмяФайла, _КодировкаТекста = Неопределено, АвтоопределениеКодировкиXML = Ложь) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ИмяФайла) Тогда
		ИмяФайлаНаДиске = ПолучитьИмяВременногоФайла();
		ПолучитьИзВременногоХранилища(ИмяФайла).Записать(ИмяФайлаНаДиске);
	Иначе
		ИмяФайлаНаДиске = ИмяФайла;
	КонецЕсли;
	
	ОбъектЧтение = Новый ЧтениеТекста(ИмяФайлаНаДиске, _КодировкаТекста);
	ТекстИзФайла = ОбъектЧтение.Прочитать();
	ОбъектЧтение.Закрыть();
	
	Если АвтоопределениеКодировкиXML И ЗначениеЗаполнено(ТекстИзФайла) Тогда
		ПерваяСтрокаФайла = ВРЕГ(Лев(СтрПолучитьСтроку(ТекстИзФайла, 1), 100));
		Если Найти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-8""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF8);
		ИначеЕсли Найти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-16""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF16);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстИзФайла;
	
КонецФункции

&НаКлиенте
// Возвращаемые значения:
// 		Ложь - обновление не требуется
// 		Истина - необходимо обновить внешний модуль
Функция ПроверитьНаличиеОбновлений(ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза, ШапкаОшибки) Экспорт
	
	// пытаемся установить соединение с сервером
	Соединение = УстановитьСоединениеССерверомИнтернета(ПараметрыСервераИнтернета.URLСервера,ПараметрыСервераИнтернета);
	Если Соединение = Неопределено Тогда		
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='%1Ошибка доступа к серверу обновлений модуля документооборота: %2.'"),
																				ШапкаОшибки + Символы.ПС + Символы.ПС,
																				Символы.ПС + ИнформацияОбОшибке().Описание);

		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);		
		Возврат Ложь;
	КонецЕсли;
		
		
	ФайлКартаРелизовАрхив = ПолучитьИмяВременногоФайла("zip");	
	Попытка
		Соединение.Получить(ПолучитьИмяФайлаКартыРелизов(), ФайлКартаРелизовАрхив);
	Исключение
		
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='%1Ошибка доступа к серверу обновлений модуля документооборота: %2.'"),
							ШапкаОшибки + Символы.ПС + Символы.ПС,
							Символы.ПС + ИнформацияОбОшибке().Описание);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
	// получаем файл справочника внешних модулей с сервера (карты релизов)
	СвойстваМодуляДляТекущегоРелиза = Неопределено;			
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлКартаРелизовАрхив));
	// РаспаковатьСохранитьСправочникВКэше
	Если НЕ ОпределитьПараметрыМодуляТекущегоРелиза(АдресВоВременномХранилище, ШапкаОшибки, СвойстваМодуляДляТекущегоРелиза) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Сравниваем требуемую версию модуля, с версией, загруженной в ИБ	
	ВерсияМодуляВИнтернете 	= СтрЗаменить(СвойстваМодуляДляТекущегоРелиза.Версия, Символы.НПП, "");	
	КонтейнерМетодов = ЭСФКлиентСервер.КонтейнерМетодов();	
	ВерсияМодуляВБазе = СтрЗаменить(КонтейнерМетодов.ВерсияВнешнегоМодуляКриптографии(), Символы.НПП, "");
	
	Если ВерсияМодуляВИнтернете = ВерсияМодуляВБазе Тогда
		// обновление не требуется
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ОпределитьПараметрыМодуляТекущегоРелиза(ФайлКартаРелизовАдрес, ШапкаОшибки, СвойстваМодуляДляТекущегоРелиза) Экспорт
	
	// распаковываем
	ФайлКартыРелизовАрхив = ПолучитьИмяВременногоФайла("zip");
	ФайлКартыРелизовДвоичныеДанные = ПолучитьИзВременногоХранилища(ФайлКартаРелизовАдрес);
	ФайлКартыРелизовДвоичныеДанные.Записать(ФайлКартыРелизовАрхив);
	
	ОписаниеОшибки = "";
	ФайлКартаРелизов = ЭСФСервер.РаспаковатьФайл(ФайлКартыРелизовАрхив, ОписаниеОшибки);

	УдалитьФайлы(ФайлКартыРелизовАрхив);
	
	Если НЕ ЗначениеЗаполнено(ФайлКартаРелизов) Тогда
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='%1%2.'"),
									ШапкаОшибки + Символы.ПС + Символы.ПС,
									Символы.ПС + ОписаниеОшибки);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	// загружаем справочник в дерево
	ТекстФайлаСправочника = "";
	ОписаниеОшибки = "";
	
	ДеревоКартыРелизов = ЗагрузитьXMLВДеревоЗначений(ФайлКартаРелизов, ТекстФайлаСправочника, ОписаниеОшибки);
	
	УдалитьФайлы(ФайлКартаРелизов);
	
	Если НЕ ЗначениеЗаполнено(ДеревоКартыРелизов) Тогда
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='%1%2.'"),
									ШапкаОшибки + Символы.ПС + Символы.ПС,
									Символы.ПС + ОписаниеОшибки);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	
	Если ДеревоКартыРелизов = Неопределено Тогда		
		Возврат Ложь;                           			
	КонецЕсли;
	
	// определяем последнюю доступную версию модуля документооборота для текущего релиза
	СвойстваМодуляДляТекущегоРелиза = ОпределитьСвойстваВнешнегоМодуляДляТекущегоРелиза(ДеревоКартыРелизов);
	Если НЕ ЗначениеЗаполнено(СвойстваМодуляДляТекущегоРелиза) Тогда
		Возврат Ложь;
	КонецЕсли;
			
	Возврат Истина;
	
КонецФункции //ОпределитьПараметрыМодуляТекущегоРелиза

////////////////////////////////////////////////////////////////////////////////////////////
// Прочие функции

//&НаКлиентеНаСервереБезКонтекста
Функция УсловиеВыполняется(Условие, ИДПеременной, ЗначениеПеременной)
	
	РезультатВычисления = Неопределено;
	Попытка
		РезультатВычисления = Вычислить(СтрЗаменить(Условие, ИДПеременной, ЗначениеПеременной));
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если ТипЗнч(РезультатВычисления) <> Тип("Булево") Тогда
		Возврат Ложь;
	Иначе
		Возврат РезультатВычисления;
	КонецЕсли;
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ИДТекущейКонфигурацииСоответствуетШаблону(ИДТекущейКонфигурации, ИДКонфигурации)
	
	Возврат ВРЕГ(СокрЛП(ИДТекущейКонфигурации)) = ВРЕГ(СокрЛП(ИДКонфигурации));
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ЧастьВерсииСоответствуетЧастиШаблонаВерсии(Знач ЧастьТекущейВерсии, Знач ЧастьШаблона)
	
	ЧастьТекущейВерсии = СокрЛП(ЧастьТекущейВерсии);
	ЧастьШаблона = СокрЛП(ЧастьШаблона);
	
	Если Лев(ЧастьШаблона, 1) <> "[" ИЛИ Прав(ЧастьШаблона, 1) <> "]" Тогда
		Возврат (ЧастьШаблона = ЧастьТекущейВерсии);
	КонецЕсли;
	
	ЧастьШаблона = СокрЛП(Сред(ЧастьШаблона, 2, СтрДлина(ЧастьШаблона) - 2));
	СоставляющиеЧастиШаблона = ЭСФКлиентСервер.РазобратьСтрокуВМассивПоРазделителю(ЧастьШаблона, ",");
	Если СоставляющиеЧастиШаблона.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИДПеременной = "X";
	Для Каждого Составляющее Из СоставляющиеЧастиШаблона Цикл
		Если ЗначениеЗаполнено(Составляющее) Тогда
			Если НЕ УсловиеВыполняется(Составляющее, ИДПеременной, ЧастьТекущейВерсии) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ТекущаяКонфигурацияСоответствуетУзлу(УзелКонфигурация, ИнформацияОПрограмме)
	
	РезультатПоискаАтрибута = УзелКонфигурация.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "ID", "А"));
	Если РезультатПоискаАтрибута.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		ИДКонфигурацииУзла = СокрЛП(РезультатПоискаАтрибута[0].Значение);
		Если ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИмяМетаданныхКонфигурации, ИДКонфигурацииУзла)
			ИЛИ ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИДКонфигурации, ИДКонфигурацииУзла) 
			ИЛИ ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИДКонфигурацииБЭСФ, ИДКонфигурацииУзла) Тогда
			
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ВерсияТекущейПлатформыСоответствуетШаблону(ВерсияТекущейПлатформы, ШаблонВерсии)
	
	МассивЧастейШаблона = ЭСФКлиентСервер.РазобратьСтрокуВМассивПоРазделителю(ШаблонВерсии);
	МассивЧастейТекущейВерсии = ЭСФКлиентСервер.РазобратьСтрокуВМассивПоРазделителю(ВерсияТекущейПлатформы);
	
	Для Инд = 0 По МассивЧастейШаблона.Количество() - 1 Цикл
		Если МассивЧастейТекущейВерсии.Количество() <= Инд Тогда
			Прервать;
		КонецЕсли;
		ТекущаяЧастьШаблона = МассивЧастейШаблона[Инд];
		ТекущаяЧастьТекущейВерсии = МассивЧастейТекущейВерсии[Инд];
		Если НЕ ЧастьВерсииСоответствуетЧастиШаблонаВерсии(ТекущаяЧастьТекущейВерсии, ТекущаяЧастьШаблона) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ТекущаяПлатформаСоответствуетУзлу(УзелПлатформа, ВерсияТекущейПлатформы)
	
	РезультатПоискаАтрибута = УзелПлатформа.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "version", "А"));
	Если РезультатПоискаАтрибута.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		ШаблонВерсии = СокрЛП(РезультатПоискаАтрибута[0].Значение);
		Возврат ВерсияТекущейПлатформыСоответствуетШаблону(ВерсияТекущейПлатформы, ШаблонВерсии);
	КонецЕсли;
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ИнформацияОПрограмме()
	
	Результат = Новый Структура();
	Результат.Вставить("ВерсияПлатформы",			ЭСФКлиентСервер.ПолучитьВерсиюТекущейПлатформы());
	Результат.Вставить("ИмяМетаданныхКонфигурации",	СокрЛП(Метаданные.Имя));
	Результат.Вставить("ИДКонфигурации",			ЭСФСерверПереопределяемый.ИДКонфигурации());
	Результат.Вставить("ВерсияКонфигурации",		СокрЛП(Метаданные.Версия));
	Результат.Вставить("ИДКонфигурацииБЭСФ",		"БиблиотекаЭлектронныхСчетовФактур");	
	Результат.Вставить("ВерсияКонфигурацииБЭСФ",	СокрЛП(ВерсияБЭСФ));
	
	Возврат Результат;	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ХешСообщения(Данные, ФункцияХеширования = Неопределено)
	
	Если ФункцияХеширования = Неопределено ТОгда
		ФункцияХеширования = ХешФункция.MD5;
	КонецЕсли;
	
	ХешированиеДанных = новый ХешированиеДанных(ФункцияХеширования);	
	ХешированиеДанных.Добавить(Данные);                             	
	Результат = ХешированиеДанных.ХешСумма;
	
	Возврат Результат;	
КонецФункции


#КонецОбласти

#КонецОбласти

///////////////////////////////////////////////////////////
// Запросы
Функция ПолучитьТекстЗапроса(ИмяМакета) Экспорт
	Макет = ПолучитьМакет(ИмяМакета);	
	
	Возврат Макет.ПолучитьТекст();
КонецФункции	

// КРИПТОГРАФИЯ. КОНЕЦ.
////////////////////////////////////////////////////////////////////////////////

#КонецОбласти

#Область ЭСФ
	
////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА ЭСФ

// См. ЭСФКлиент.ПроверитьИсходящиеЭСФ().
Процедура ПроверитьИсходящиеЭСФ(Знач МассивИсходящихЭСФ) Экспорт
	
	Если ТипЗнч(МассивИсходящихЭСФ) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СсылкаЭСФ Из МассивИсходящихЭСФ Цикл
		РезультатПроверки = ПроверитьЭСФ(СсылкаЭСФ);
		ТекстСообщения = ТекстСообщенияПоРезультатуПроверкиЭСФ(СсылкаЭСФ, РезультатПроверки);
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, СсылкаЭСФ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьЭСФ(СсылкаЭСФ) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиЭСФ();
	
	// Объект ЭСФ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектЭСФ = СсылкаЭСФ.ПолучитьОбъект();
	
	Попытка
		
		ПроверитьРазличныеДанныеЭСФ(ОбъектЭСФ, РезультатПроверки);
		ПроверитьДополнительныйЭСФ(ОбъектЭСФ, РезультатПроверки);
		ПроверитьЭСФПоТоварамИзПеречня(ОбъектЭСФ, РезультатПроверки);
		ЭСФСерверПереопределяемый.СверитьЧисловыеДанныеСФиЭСФ(ОбъектЭСФ, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр(
		"ru = 'При проверке заполнения ЭСФ возникла ошибка:
		|%1'");
		
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПустойРезультатПроверкиЭСФ() Экспорт
	
	РезультатПроверки = Новый Структура;
	
	РезультатПроверки.Вставить("УведомительныеОшибки", Новый Массив);
	РезультатПроверки.Вставить("ЗапрещающиеОшибки", Новый Массив);
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура СообщитьОбнаруженыОшибки(Знач СсылкаЭСФ, Знач РезультатПроверки) Экспорт

	Если РезультатПроверки.УведомительныеОшибки.Количество() <> 0
		ИЛИ РезультатПроверки.ЗапрещающиеОшибки.Количество() <> 0 Тогда
		
		ТекстСообщения = НСтр(
		"ru = 'Обнаружены ошибки при проверке документа: ""%1"".
		|Для просмотра списка ошибок воспользуйтесь командой ""Проверка"".'");
		
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СсылкаЭСФ);
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, СсылкаЭСФ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстСообщенияПоРезультатуПроверкиЭСФ(Знач СсылкаЭСФ, Знач РезультатПроверки, Знач УведомительныеОшибки = Истина, Знач ЗапрещающиеОшибки = Истина) Экспорт
	
	ТекстСообщения = "";
	
	Если (НЕ УведомительныеОшибки) И (НЕ ЗапрещающиеОшибки) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЗапрещающиеОшибки Тогда
		Для Каждого Ошибка Из РезультатПроверки.ЗапрещающиеОшибки Цикл
			ТекстСообщения = ТекстСообщения + СокрЛП(Ошибка) + Символы.ПС;
		КонецЦикла;		
	КонецЕсли;
	
	Если УведомительныеОшибки Тогда
		Для Каждого Ошибка Из РезультатПроверки.УведомительныеОшибки Цикл
			ТекстСообщения = ТекстСообщения + СокрЛП(Ошибка) + Символы.ПС;
		КонецЦикла;		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстСообщения) Тогда
		
		ТекстСообщения = НСтр(
		"ru = '------------------------------------------------------------------------------------------------------
		|Ошибок не обнаружено при проверке документа ""%1"".'");
		
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СсылкаЭСФ);
		
	Иначе
		
		ЗаголовокСообщения = НСтр(
		"ru = '------------------------------------------------------------------------------------------------------
		|Обнаружены ошибки при проверке документа ""%1"":'");
		
		ЗаголовокСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ЗаголовокСообщения, СсылкаЭСФ);
		
		ТекстСообщения = ЗаголовокСообщения + Символы.ПС + ТекстСообщения;
		ТекстСообщения = СокрЛП(ТекстСообщения);		
		ТекстСообщения = ТекстСообщения + Символы.ПС;
		
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

Процедура ПроверитьРазличныеДанныеЭСФ(ОбъектЭСФ, РезультатПроверки) Экспорт
	
	//////////////////////////////////////////////////////////////////////////////
	// Проверить корректность заполнения реквизита Идентификатор.
	Если ЗначениеЗаполнено(ОбъектЭСФ.Идентификатор) Тогда
		
		СообщениеПроверкиИдентификатора = "";
		
		Если НЕ ЭСФКлиентСервер.ИдентификаторКорректен(ОбъектЭСФ.Идентификатор, СообщениеПроверкиИдентификатора) Тогда
			
			ТекстСообщения = НСтр("ru = 'Страница ""Прочие сведения"". Поле ""Идентификатор"" заполнено некорректно. Причина: %1'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, СообщениеПроверкиИдентификатора);
				
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбъектЭСФ.ДатаВыпискиНаБумажномНосителе <> '00010101000000' И 
		Не ЗначениеЗаполнено(ОбъектЭСФ.ПричинаВыпискиНаБумажномНосителе) Тогда
		
		ТекстСообщения = НСтр("ru = 'A. Общий раздел. Не указана причина выписки на бумаге.'");		
		
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		
	КонецЕсли;
	
	//+
	Если Не ЗначениеЗаполнено(ОбъектЭСФ.ДатаОборота) Тогда
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(НСтр("ru = 'A. Общий раздел. Не заполнено поле ""Дата оборота"".'"));
	КонецЕсли;
	//-
	
	//////////////////////////////////////////////////////////////////////////////
	// Проверить, чтобы были заполнены реквизиты госучреждения.
	ПолучательЯвляетсяГосучреждением = ОбъектЭСФ.Получатели.Найти(Истина, "ГосударственноеУчреждение") <> Неопределено;	
	Если ПолучательЯвляетсяГосучреждением
		ИЛИ ЗначениеЗаполнено(ОбъектЭСФ.ГосучреждениеБИК) 
		ИЛИ ЗначениеЗаполнено(ОбъектЭСФ.ГосучреждениеИИК)
		ИЛИ ЗначениеЗаполнено(ОбъектЭСФ.ГосучреждениеКодТоваров)
		ИЛИ ЗначениеЗаполнено(ОбъектЭСФ.ГосучреждениеНазначениеПлатежа)Тогда
		
		// Проверка реквизитов госучреждения необходима, 
		// т.к. если они заполнены некорректно, 
		// то сервер ИС ЭСФ возвращает модульную ошибку.
		
		Если НЕ ЗначениеЗаполнено(ОбъектЭСФ.ГосучреждениеИИК) Тогда
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(НСтр("ru = 'C1. Гос. учреждение. Не заполнено поле ""ИИК"".'"));	
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбъектЭСФ.ГосучреждениеНазначениеПлатежа) Тогда
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(НСтр("ru = 'C1. Гос. учреждение. Не заполнено поле ""Назначение платежа"".'"));	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектЭСФ.ГосучреждениеБИК)
			ИЛИ НЕ (ОбъектЭСФ.ГосучреждениеБИК = ГосучреждениеБИК()) Тогда
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(НСтр("ru = 'C1. Гос. учреждение. Не заполнено поле ""БИК"" или заполнено значением отличным от ""KKMFKZ2A""'"));	
		КонецЕсли;
		
	КонецЕсли;
	
	// I. Поверенный поставщика - БИН заполняется, при заполнении полей 46 и 47 документа СНТ
	Если (ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПорученияПоставщикаНомер) 
		ИЛИ ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПорученияПоставщикаДата))
		И НЕ ЗначениеЗаполнено(ОбъектЭСФ.ПоверенныйПоставщикаБИН) Тогда
		РезультатПроверки.УведомительныеОшибки.Добавить(НСтр("ru = 'I. Поверенный поставщика. Не заполнено значение реквизита ""БИН поверенного поставщика"",
		|в то время как заполнены реквизиты ""Номер"" и ""Дата"".'"));
	КонецЕсли;
	// J. Поверенный получателя - БИН заполняется, при заполнении полей 48 и 49 документа СНТ
	Если (ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПорученияПокупателяНомер) 
		ИЛИ ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПорученияПокупателяДата))
		И НЕ ЗначениеЗаполнено(ОбъектЭСФ.ПоверенныйПокупателяБИН) Тогда
		РезультатПроверки.УведомительныеОшибки.Добавить(НСтр("ru = 'J. Поверенный получателя. Не заполнено значение реквизита ""БИН поверенного получателя"",
		|в то время как заполнены реквизиты ""Номер"" и ""Дата"".'"));
	КонецЕсли;
	
	ВерсияЭСФ = ОбъектЭСФ.ВерсияБланкаЭСФ;
	
	Если ВерсияЭСФ = 2 Тогда
		ПроверитьТаблицуПолучатели(ОбъектЭСФ, РезультатПроверки);
		
		Если ЗначениеЗаполнено(ОбъектЭСФ.ГрузополучательИдентификатор)  
			ИЛИ ЗначениеЗаполнено(ОбъектЭСФ.ГрузополучательНаименование) ИЛИ ЗначениеЗаполнено(ОбъектЭСФ.АдресДоставки) Тогда
				
			Если Не ЗначениеЗаполнено(ОбъектЭСФ.ГрузополучательКодСтраны) Тогда
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(НСтр("ru = 'D. Реквизиты грузополучателя. Не заполнено поле ""Код страны"".'"));
			ИначеЕсли ОбъектЭСФ.МестоРеализацииНеРК И ОбъектЭСФ.ГрузополучательКодСтраны = "KZ" Тогда //ЭСФКлиентСерверПереопределяемый.ПолучитьПредопределенноеЗначениеСтраны() Тогда
				РезультатПроверки.УведомительныеОшибки.Добавить(НСтр("ru = 'D. Реквизиты грузополучателя. Указан не допустимый код страны грузополучателя. ""KZ"".'"));	
			КонецЕсли;
		КонецЕсли;
		
		ПроверитьТаблицуТовары(ОбъектЭСФ, РезультатПроверки);
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПроверитьДополнительныйЭСФ(ОбъектЭСФ, РезультатПроверки) Экспорт
	
	Если ОбъектЭСФ.Вид <> Перечисления.ВидыЭСФ.Дополнительный Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбъектЭСФ.СвязанныйЭСФ.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// Объект основной ЭСФ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектОсновнойЭСФ = ОбъектЭСФ.СвязанныйЭСФ.ПолучитьОбъект();
	
	СравнитьОсновнойИДополнительныйЭСФ(ОбъектОсновнойЭСФ, ОбъектЭСФ, РезультатПроверки);	
	
КонецПроцедуры

Процедура ПроверитьЭСФПоТоварамИзПеречня(ОбъектЭСФ, РезультатПроверки) Экспорт
	
	// На данный момент при проверке товаров из перечня используются данные счета-фактуры.
	// В будущем проверка может быть изменена, чтобы использовались данные ЭСФ.
	
	Если НЕ ЗначениеЗаполнено(ОбъектЭСФ.СчетФактура) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСообщений = ЗаполнитьПроверитьИсходящийЭСФПоТоварамИзПеречня(ОбъектЭСФ, ОбъектЭСФ.СчетФактура, Ложь);
	Для Каждого Сообщение Из МассивСообщений Цикл
		РезультатПроверки.УведомительныеОшибки.Добавить(Сообщение);	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьТаблицуПолучатели(ОбъектЭСФ, РезультатПроверки) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭСФПолучатели.ПолучательИдентификатор,
	               |	ЭСФПолучатели.ПолучательНаименование,
	               |	ЭСФПолучатели.НомерСтроки,
	               |	ЭСФПолучатели.Лизингодатель,
	               |	ЭСФПолучатели.УчастникСовместнойДеятельности,
	               |	ЭСФПолучатели.ГосударственноеУчреждение,
	               |	ЭСФПолучатели.ДоляУчастия,
	               |	ЭСФПолучатели.КодСтраны КАК КодСтраны,
	               |	ЭСФПолучатели.УчастникСРП КАК УчастникСРП,
	               |	ЭСФПолучатели.Доверитель КАК Доверитель,
	               |	ЭСФПолучатели.РозничнаяРеализация КАК РозничнаяРеализация,
	               |	ЭСФПолучатели.БИНРеорганизованногоЛица КАК БИНРеорганизованногоЛица,
	               |	ЭСФПолучатели.НерезидентВерсия2 КАК НерезидентВерсия2,
	               |	ЭСФПолучатели.БИНФилиала КАК БИНФилиала,
	               |	ЭСФПолучатели.ФизическоеЛицо КАК ФизическоеЛицо
				   |ПОМЕСТИТЬ ВТ_ЭСФПолучатели
	               |ИЗ
	               |	&ТаблицаПолучатели КАК ЭСФПолучатели
				   |;
				   |///////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ЭСФПолучатели.ПолучательИдентификатор,
	               |	ЭСФПолучатели.ПолучательНаименование,
	               |	ЭСФПолучатели.НомерСтроки,
	               |	ЭСФПолучатели.Лизингодатель,
	               |	ЭСФПолучатели.УчастникСовместнойДеятельности,
	               |	ЭСФПолучатели.ГосударственноеУчреждение,
	               |	ЭСФПолучатели.ДоляУчастия,
	               |	ЭСФПолучатели.КодСтраны КАК КодСтраны,
	               |	ЭСФПолучатели.УчастникСРП КАК УчастникСРП,
	               |	ЭСФПолучатели.Доверитель КАК Доверитель,
	               |	ЭСФПолучатели.РозничнаяРеализация КАК РозничнаяРеализация,
	               |	ЭСФПолучатели.БИНРеорганизованногоЛица КАК БИНРеорганизованногоЛица,
	               |	ЭСФПолучатели.НерезидентВерсия2 КАК НерезидентВерсия2,
	               |	ЭСФПолучатели.БИНФилиала КАК БИНФилиала,
	               |	ЭСФПолучатели.ФизическоеЛицо КАК ФизическоеЛицо
				   |ИЗ
	               |	ВТ_ЭСФПолучатели КАК ЭСФПолучатели
				   |";	   
	
	Запрос.УстановитьПараметр("ТаблицаПолучатели", ОбъектЭСФ.Получатели.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		//-=-=
		//Если ЗначениеЗаполнено(ОбъектЭСФ.УникальныйНомерВалютногоКонтроля) Тогда
		//	
		//	Если НЕ Выборка.Экспортер И Выборка.ПолучательКодСтраны <> "KZ" Тогда
		//		
		//		ТекстСообщения = НСтр("ru = 'Е. Условия поставки. Поле ""Учетный номер"" должно быть не заполнено, т.к. не указана категория поставщика «Экспортер» и в поле «Код страны» заполнено значение отличное от «KZ».'");
		//		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
		//	КонецЕсли;
		//	
		//КонецЕсли;
		//-=-=
		
		Если Не ЗначениеЗаполнено(Выборка.КодСтраны) Тогда
			
			ТекстСообщения = НСтр("ru = 'C. Получатели. Не заполнен ""Код страны"" получателя ""%1"".'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Выборка.ПолучательНаименование);
				
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		ИначеЕсли ОбъектЭСФ.МестоРеализацииНеРК И Выборка.КодСтраны = "KZ" Тогда 
			
			ТекстСообщения = НСтр("ru = 'C. Получатели. Указан не допустимый код страны получателя ""%1"".'");
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Выборка.ПолучательНаименование);
				
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.ПолучательНаименование) Тогда
			
			ТекстСообщения = НСтр("ru = 'C. Получатели. Не заполнено ""Наименование получателя"" в строке №%1'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Выборка.НомерСтроки);
				
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;				
	
КонецПроцедуры

Процедура ПроверитьТаблицуТовары(ОбъектЭСФ, РезультатПроверки) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭСФТовары.НомерСтроки,
	|	ЭСФТовары.ТоварНаименованиеВРамкахТС,
	|	ЭСФТовары.ИдентификаторТовара,
	|	ЭСФТовары.ЕдиницаИзмеренияКод,
	|	ЭСФТовары.ПризнакПроисхождения,
	|	ЭСФТовары.СтавкаНДС
	|ПОМЕСТИТЬ ВТ_ЭСФтовары
	|ИЗ
	|	&ТаблицаТовары КАК ЭСФТовары
	|;
	|///////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭСФТовары.НомерСтроки,
	|	ЭСФТовары.ТоварНаименованиеВРамкахТС,
	|	ЭСФТовары.ИдентификаторТовара,
	|	ЭСФТовары.ЕдиницаИзмеренияКод,
	|	ЭСФТовары.ПризнакПроисхождения,
	|	ЭСФТовары.СтавкаНДС,
	|	ЕСТЬNULL(СтавкиНДС.МестоРеализацииНеРК, ЛОЖЬ) КАК МестоРеализацииНеРК
	|ИЗ
	|	ВТ_ЭСФтовары КАК ЭСФТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК СтавкиНДС
	|		ПО ЭСФТовары.СтавкаНДС = СтавкиНДС.Ссылка
	|";	
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ОбъектЭСФ.Товары.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Проверка ТЧ по признаку "Место реализации не РК".
	БезНДСНеРК_ВШапке 	 =  ОбъектЭСФ.МестоРеализацииНеРК;
	ВсеСтроки_БезНДСНеРК = Истина;
	ВсеСтроки_НДС 		 = Истина;
	СтавкиРазные 		 = Ложь;
	ЭтоПерваяСтрока 	 = Истина;
		
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.ИдентификаторТовара) Тогда
			
			ТекстСообщения = НСтр("ru = 'G. Товары. Не заполнен ""Идентификатор товара"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Выборка.НомерСтроки);
				
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если Выборка.ПризнакПроисхождения <> "6" И Не ЗначениеЗаполнено(Выборка.ЕдиницаИзмеренияКод) Тогда
			
			ТекстСообщения = НСтр("ru = 'G. Товары. Не заполнена ""Единица измерения код"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Выборка.НомерСтроки);
				
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.ПризнакПроисхождения) Тогда
			
			ТекстСообщения = НСтр("ru = 'G. Товары. Не заполнен ""Признак происхождения"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Выборка.НомерСтроки);
				
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;

		Если ЭтоПерваяСтрока Тогда
			Если Выборка.МестоРеализацииНеРК Тогда
				ВсеСтроки_НДС = Ложь;
			Иначе
				ВсеСтроки_БезНДСНеРК = Ложь;
			КонецЕсли;
			ЭтоПерваяСтрока = Ложь;
		Иначе
			Если (Выборка.МестоРеализацииНеРК И Не ВсеСтроки_БезНДСНеРК) ИЛИ 
				(Не Выборка.МестоРеализацииНеРК И Не ВсеСтроки_НДС) Тогда
				СтавкиРазные = Истина;
			КонецЕсли;
		КонецЕсли;
		// G. Товары - G3/1 Наименование товаров в соответствии с Декларацией на товары или заявления о ввозе товаров и уплате косвенных налогов
		// Заполняется для товаров с признаком «1» и «2».
		Если (Выборка.ПризнакПроисхождения = "1" ИЛИ Выборка.ПризнакПроисхождения = "2")
			И НЕ ЗначениеЗаполнено(Выборка.ТоварНаименованиеВРамкахТС) Тогда

			ТекстСообщения = (НСтр("ru = 'G. Товары. Не заполнено поле ""Наименование в соответствии с Декларацией на товары или Заявлением о ввозе товаров"" в строке №%1.'")); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки);

			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;	
	
	// Проверяем случаи заполнения ставок в ТЧ и признака в шапке.
	Если СтавкиРазные Тогда
		ТекстСообщения = НСтр("ru = 'G. Товары. В таблице указаны ставки НДС с разными признаками ""Местом реализации является не РК"".'") + Символы.ПС + НСтр("ru = 'Рекомендуется оформить товары разными документами.'"); 
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	Иначе
		Если БезНДСНеРК_ВШапке И ВсеСтроки_НДС Тогда
			ТекстСообщения = НСтр("ru = 'G. Товары. Рекомендуется отключить признак ""Без НДС - Не РК"", иначе документ будет отправлен по ставке ""Без НДС - Не РК"".'");
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
		ИначеЕсли Не БезНДСНеРК_ВШапке И ВсеСтроки_БезНДСНеРК Тогда
			ТекстСообщения = НСтр("ru = 'G. Товары. Рекомендуется включить признак ""Без НДС - Не РК"", иначе документ будет отправлен по ставке ""Без НДС"".'");
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

// Описание типов проверок:
// - Реквизит - проверяется совпадение значений реквизитов.
// - ТабличнаяЧасть - проверяется совпадение количества строк.
// - РеквизитТабличнойЧасти - перебираются все строки табличной части и проверяется, что указанный реквизит совпадает. 
//   Выполняется только если количество строк в табличных частях совпадает.
//
Процедура СравнитьОсновнойИДополнительныйЭСФ(Знач ОбъектОсновнойЭСФ, Знач ОбъектДополнительныйЭСФ, РезультатПроверки) Экспорт
	
	ТаблицаРазличий = Новый ТаблицаЗначений;
	ТаблицаРазличий.Колонки.Добавить("Сообщение");
	
	// Получить объекты основного и дополнительного ЭСФ,
	// т.к. обращаться множество раз к реквизитам объекта,
	// может быть оптимальнее, чем к реквизитам ссылки.
	
	ТаблицаРеквизитовДляПроверки = РеквизитыДляПроверкиОсновногоИДополнительногоЭСФ(ОбъектОсновнойЭСФ.ВерсияБланкаЭСФ);
	
		Для Каждого РеквизитДляПроверки Из ТаблицаРеквизитовДляПроверки Цикл
			
			ТипПроверки = РеквизитДляПроверки.ТипПроверки;		
			ИмяТабличнойЧасти = РеквизитДляПроверки.ИмяТабличнойЧасти;
			ИмяРеквизита = РеквизитДляПроверки.ИмяРеквизита;		
			СинонимТабличнойЧасти = РеквизитДляПроверки.СинонимТабличнойЧасти;
			СинонимРеквизита = РеквизитДляПроверки.СинонимРеквизита;
			СинонимРаздела = РеквизитДляПроверки.СинонимРаздела;
			
			Если ТипПроверки = ЭСФКлиентСервер.ТипПроверкиРеквизит() Тогда
				
				Если ОбъектОсновнойЭСФ[ИмяРеквизита] <> ОбъектДополнительныйЭСФ[ИмяРеквизита] Тогда
					Различие = ТаблицаРазличий.Добавить();
					Различие.Сообщение = НСтр("ru = '%1. Отличается значение реквизита ""%2"".'");
					Различие.Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
					Различие.Сообщение, СинонимРаздела, СинонимРеквизита);
				КонецЕсли;
				
			ИначеЕсли ТипПроверки = ЭСФКлиентСервер.ТипПроверкиТабличнаяЧасть() Тогда
				
				Если ОбъектОсновнойЭСФ[ИмяТабличнойЧасти].Количество() <> ОбъектДополнительныйЭСФ[ИмяТабличнойЧасти].Количество() Тогда
					Различие = ТаблицаРазличий.Добавить();
					Различие.Сообщение = НСтр("ru = '%1. Отличается количество строк в табличной части ""%2"".'");
					Различие.Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
					Различие.Сообщение, СинонимРаздела, СинонимТабличнойЧасти);
				КонецЕсли;			
				
			ИначеЕсли ТипПроверки = ЭСФКлиентСервер.ТипПроверкиРеквизитТабличнойЧасти() Тогда
				
				Если ОбъектОсновнойЭСФ[ИмяТабличнойЧасти].Количество() = ОбъектДополнительныйЭСФ[ИмяТабличнойЧасти].Количество() Тогда
					
					МаксимальныйИндекс = ОбъектОсновнойЭСФ[ИмяТабличнойЧасти].Количество() - 1;
					
					Для ИндексСтроки = 0 По МаксимальныйИндекс Цикл
						
						Если ОбъектОсновнойЭСФ[ИмяТабличнойЧасти][ИндексСтроки][ИмяРеквизита] <> ОбъектДополнительныйЭСФ[ИмяТабличнойЧасти][ИндексСтроки][ИмяРеквизита] Тогда
							
							Различие = ТаблицаРазличий.Добавить();
							Различие.Сообщение = НСтр("ru = '%1. В табличной части ""%2"", в строке №%3, отличается значение реквизита ""%4"".'");
							Различие.Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
							Различие.Сообщение, СинонимРаздела, СинонимТабличнойЧасти, ИндексСтроки + 1, СинонимРеквизита);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;				
				
			Иначе
				
				ВызватьИсключение НСтр("ru = 'Неизвестный тип проверки:'") + " " + РеквизитДляПроверки.ТипПроверки;	
				
			КонецЕсли;
			
		КонецЦикла;

	ТаблицаРазличий.Сортировать("Сообщение");
		
	Если ТаблицаРазличий.Количество() <> 0 Тогда
		
		СтрокаВсеРазличия = "";
		Для Каждого СтрокаТаблицыРазличий Из ТаблицаРазличий Цикл
			СтрокаВсеРазличия = СтрокаВсеРазличия + "- " + СтрокаТаблицыРазличий.Сообщение + Символы.ПС;
		КонецЦикла;
		
		СтрокаВсеРазличия = НСтр("ru = 'Недопустимые различия между основным и дополнительным ЭСФ:'") + Символы.ПС + СтрокаВсеРазличия;
		
		РезультатПроверки.УведомительныеОшибки.Добавить(СтрокаВсеРазличия);
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыДляПроверкиОсновногоИДополнительногоЭСФ(ВерсияОсновногоЭСФ = 2)
	
	ТаблицаРеквизитовДляПроверки = Новый ТаблицаЗначений;	
	
	ТаблицаРеквизитовДляПроверки.Колонки.Добавить("ТипПроверки");
	ТаблицаРеквизитовДляПроверки.Колонки.Добавить("ИмяТабличнойЧасти");
	ТаблицаРеквизитовДляПроверки.Колонки.Добавить("ИмяРеквизита");
	ТаблицаРеквизитовДляПроверки.Колонки.Добавить("СинонимТабличнойЧасти");
	ТаблицаРеквизитовДляПроверки.Колонки.Добавить("СинонимРеквизита");
	ТаблицаРеквизитовДляПроверки.Колонки.Добавить("СинонимРаздела");
	
	Макет = ПолучитьМакет("РеквизитыДляПроверкиОсновногоИДополнительногоЭСФ");
	
	ВерсияОсновногоЭСФ = ?(ВерсияОсновногоЭСФ = 0, 1, ВерсияОсновногоЭСФ); 
	ИмяОбластиПроверкиЭСФ = "ЭСФ_Версия" + ВерсияОсновногоЭСФ;
	
	ОбластьРеквизитовДляПроверки = Макет.ПолучитьОбласть(ИмяОбластиПроверкиЭСФ);
	
	Для НомерСтроки = 1 По ОбластьРеквизитовДляПроверки.ВысотаТаблицы Цикл
		РеквизитДляПроверки = ТаблицаРеквизитовДляПроверки.Добавить();
		РеквизитДляПроверки.ТипПроверки           = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 1, НомерСтроки, 1).Текст);
		РеквизитДляПроверки.ИмяТабличнойЧасти     = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 2, НомерСтроки, 2).Текст);
		РеквизитДляПроверки.ИмяРеквизита          = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 3, НомерСтроки, 3).Текст);
		РеквизитДляПроверки.СинонимТабличнойЧасти = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 4, НомерСтроки, 4).Текст);
		РеквизитДляПроверки.СинонимРеквизита      = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 5, НомерСтроки, 5).Текст);
		РеквизитДляПроверки.СинонимРаздела        = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 6, НомерСтроки, 6).Текст);
	КонецЦикла;
	
	Возврат ТаблицаРеквизитовДляПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ МОДУЛЯ ОБЪЕКТА ДОКУМЕНТА ЭСФ

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий документа ЭСФ

Процедура ДокументЭСФ_ОбработкаЗаполнения(ОбъектЭСФ, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = ЭСФКлиентСерверПереопределяемый.ТипДокументСсылкаСчетФактураВыданный() Тогда
		
		СтандартнаяОбработка = Ложь;
		ЭСФСервер.ЗаполнитьИсходящийЭСФ(ДанныеЗаполнения, ОбъектЭСФ);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ПросмотрЗагружаемогоЭСФ") Тогда
			
			Если ДанныеЗаполнения.ПросмотрЗагружаемогоЭСФ Тогда
				
				InvoiceInfo = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ДанныеЗаполнения.XML, ФабрикаXDTO);
				ЗаполнитьЭСФ(InvoiceInfo, ДанныеЗаполнения.СтруктурнаяЕдиница, ДанныеЗаполнения.Реквизиты.Направление, ОбъектЭСФ);
				ЗаполнитьЗначенияСвойств(ОбъектЭСФ, ДанныеЗаполнения.Реквизиты);
				
			КонецЕсли;
			
		ИначеЕсли ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
			
			СтандартнаяОбработка = Ложь;
			ЭСФСервер.ЗаполнитьИсходящийЭСФ(ДанныеЗаполнения, ОбъектЭСФ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументЭСФ_ПередЗаписью(ОбъектЭСФ, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ОбъектЭСФ.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТовары из ОбъектЭСФ.Товары Цикл
				
		Если Не ЗначениеЗаполнено(СтрокаТовары.КоэффициентПересчета) Тогда
			СтрокаТовары.КоэффициентПересчета = 1;
		КонецЕсли;	
		
	КонецЦикла;
	
	УдалитьЗапрещенныеСимволыИзНазначенияПлатежа(ОбъектЭСФ);
	
	Если НЕ ЗначениеЗаполнено(ОбъектЭСФ.Автор) Тогда
		ОбъектЭСФ.Автор = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();
	КонецЕсли;
	
	Если ОбъектЭСФ.Получатели[0].РозничнаяРеализация И НЕ ЗначениеЗаполнено(ОбъектЭСФ.Получатели[0].Адрес) Тогда
		ОбъектЭСФ.Получатели[0].Адрес = "Адрес неизвестен";
	КонецЕсли;

	ЕстьТоварыВССПустымиИдентификаторами = Ложь;
	
	ОбъектЭСФ.Состояние = ЭСФСервер.СостояниеЭСФ(ОбъектЭСФ, ЕстьТоварыВССПустымиИдентификаторами);
	
	
	ОбъектЭСФ.СуммаДокумента = ОбъектЭСФ.Товары.Итог("Сумма");
	
	Если ОбъектЭСФ.Направление = Перечисления.НаправленияЭСФ.Входящий Тогда
		Если ОбъектЭСФ.Поставщики.Количество() > 0 Тогда
			ОбъектЭСФ.Контрагент = ОбъектЭСФ.Поставщики[0].Поставщик;
		КонецЕсли;
	Иначе
		Если ОбъектЭСФ.Получатели.Количество() > 0 Тогда
			ОбъектЭСФ.Контрагент = ОбъектЭСФ.Получатели[0].Получатель;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьАктуальныеЭСФПередЗаписью(ОбъектЭСФ);
	ОбновитьИсториюЭСФПередЗаписью(ОбъектЭСФ);
	
КонецПроцедуры

Процедура ДокументЭСФ_ПриЗаписи(ОбъектЭСФ, Отказ) Экспорт
	
	Если ОбъектЭСФ.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивЭСФ = Новый Массив;
	МассивЭСФ.Добавить(ОбъектЭСФ.Ссылка);
	ЭСФСервер.СохранитьСоответствияНаименованийИСсылокТоваров(ОбъектЭСФ.Направление, МассивЭСФ);
	ЭСФСервер.СохранитьСоответствияНаименованийИСсылокЕдиницИзмерения(ОбъектЭСФ.Направление, МассивЭСФ);
	
	ОбновитьАктуальныеЭСФПриЗаписи(ОбъектЭСФ);
	ОбновитьИсториюЭСФПриЗаписи(ОбъектЭСФ);

КонецПроцедуры

Процедура ДокументЭСФ_ОбработкаПроведения(ОбъектЭСФ, Отказ, РежимПроведения) Экспорт
	
	Если НЕ ЭСФСервер.ВедетсяУчетПоТоварамНаВС(ОбъектЭСФ.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ДокументЭСФ_ОбработкаУдаленияПроведения(ОбъектЭСФ, Отказ) Экспорт
	
КонецПроцедуры

Процедура ДокументЭСФ_ПередУдалением(ОбъектЭСФ, Отказ) Экспорт
	
КонецПроцедуры

Процедура ДокументЭСФ_ПриКопировании(ОбъектЭСФ, ОбъектКопирования) Экспорт
	
КонецПроцедуры

Процедура ДокументЭСФ_ПриУстановкеНовогоНомера(ОбъектЭСФ, СтандартнаяОбработка, Префикс) Экспорт
	
КонецПроцедуры

Процедура ДокументЭСФ_ОбработкаПроверкиЗаполнения(ОбъектЭСФ, Отказ, ПроверяемыеРеквизиты) Экспорт
	
КонецПроцедуры

///////////////////////////////////////////////////////-/////////////////////////
// Служебные процедуры и функции документа ЭСФ


Процедура ОбновитьИсториюЭСФПередЗаписью(ОбъектЭСФ)
	
	НомерЗаписи = Неопределено;
	
	Если ОбъектЭСФ.Ссылка.Пустая() Тогда	
		
		НомерЗаписи = 0;
		
	ИначеЕсли ОбъектЭСФ.Ссылка.Состояние <> ОбъектЭСФ.Состояние Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсторияЭСФ.НомерЗаписи КАК НомерЗаписи
		|ИЗ
		|	РегистрСведений.ИсторияЭСФ КАК ИсторияЭСФ
		|ГДЕ
		|	ИсторияЭСФ.ЭСФ = &ЭСФ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерЗаписи УБЫВ";

		Запрос.УстановитьПараметр("ЭСФ", ОбъектЭСФ.Ссылка);
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				НомерЗаписи = Выборка.НомерЗаписи + 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектЭСФ.ДополнительныеСвойства.Вставить("НомерЗаписи", НомерЗаписи);
	
КонецПроцедуры

Процедура ОбновитьИсториюЭСФПриЗаписи(ОбъектЭСФ)
	
	НомерЗаписи = ОбъектЭСФ.ДополнительныеСвойства.НомерЗаписи;
	
	Если НомерЗаписи <> Неопределено Тогда
		НаборЗаписей = РегистрыСведений.ИсторияЭСФ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЭСФ.Установить(ОбъектЭСФ.Ссылка);
		НаборЗаписей.Отбор.НомерЗаписи.Установить(НомерЗаписи);		
		Запись = НаборЗаписей.Добавить();
		Запись.ЭСФ = ОбъектЭСФ.Ссылка; 
		Запись.НомерЗаписи = НомерЗаписи;
		Запись.Дата = ТекущаяДата();
		Запись.Состояние = ОбъектЭСФ.Состояние;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьАктуальныеЭСФПередЗаписью(ОбъектЭСФ)
	
	Если ОбъектЭСФ.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаСчетФактура = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ОбъектЭСФ.Ссылка, "СчетФактура");
	
	Если НЕ ЗначениеЗаполнено(СсылкаСчетФактура) Тогда
		Возврат;
	КонецЕсли;
	
	Если СсылкаСчетФактура = ОбъектЭСФ.СчетФактура Тогда
		Возврат
	КонецЕсли;
	
	// Данный ЭСФ указывал на Ссылка.СчетФактура, 
	// а теперь указывает на другой счет-фактуру, 
	// или не указывает ни на один счет-фактуру.
	
	ДанныеАктуальногоЭСФ = ЭСФСервер.ДанныеАктуальногоЭСФ(СсылкаСчетФактура);
	
	Если ДанныеАктуальногоЭСФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если данный ЭСФ был актуальным для Ссылка.СчетФактура.
	Если ДанныеАктуальногоЭСФ.ЭСФ = ОбъектЭСФ.Ссылка Тогда
		
		ТаблицаЭСФ = ЭСФСервер.НайтиДокументыЭСФДляЗаполненияАктуальныхЭСФ(СсылкаСчетФактура);
		
		ДанныеНовогоАктуальногоЭСФ = Неопределено;
		Для Каждого СтрокаТаблицы Из ТаблицаЭСФ Цикл
			Если СтрокаТаблицы.ЭСФ <> ОбъектЭСФ.Ссылка Тогда
				ДанныеНовогоАктуальногоЭСФ = СтрокаТаблицы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеНовогоАктуальногоЭСФ = Неопределено Тогда
			
			// Удалить информацию о том, что данный ЭСФ является актуальным для Ссылка.СчетФактура.
			НаборЗаписей = РегистрыСведений.АктуальныеЭСФ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СчетФактура.Установить(СсылкаСчетФактура);
			НаборЗаписей.Записать();
			
		Иначе
			
			// Сделать актуальным другой ЭСФ, который указывает на Ссылка.СчетФактура.
			НаборЗаписей = РегистрыСведений.АктуальныеЭСФ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СчетФактура.Установить(СсылкаСчетФактура);
			Запись = НаборЗаписей.Добавить();
			Запись.СчетФактура = СсылкаСчетФактура;
			Запись.ЭСФ = ДанныеНовогоАктуальногоЭСФ.ЭСФ;
			Запись.Состояние = ДанныеНовогоАктуальногоЭСФ.Состояние;
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьАктуальныеЭСФПриЗаписи(ОбъектЭСФ)
	
	Если НЕ ЗначениеЗаполнено(ОбъектЭСФ.СчетФактура) Тогда
		Возврат;
	КонецЕсли;
	
	СделатьАктуальным = Ложь;
	Если ОбъектЭСФ.ДополнительныеСвойства.Свойство(ЭСФКлиентСервер.СделатьАктуальным()) Тогда
		Если ОбъектЭСФ.ДополнительныеСвойства[ЭСФКлиентСервер.СделатьАктуальным()] Тогда
			СделатьАктуальным = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СоздатьОбновитьЗапись = Ложь;
	Если СделатьАктуальным Тогда
		СоздатьОбновитьЗапись = Истина;
	Иначе
		ДанныеАктуальногоЭСФ = ЭСФСервер.ДанныеАктуальногоЭСФ(ОбъектЭСФ.СчетФактура);
		Если ДанныеАктуальногоЭСФ = Неопределено Тогда
			СоздатьОбновитьЗапись = Истина;
		ИначеЕсли ДанныеАктуальногоЭСФ.ЭСФ = ОбъектЭСФ.Ссылка Тогда
			Если ДанныеАктуальногоЭСФ.Состояние <> ОбъектЭСФ.Состояние Тогда
				СоздатьОбновитьЗапись = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СоздатьОбновитьЗапись Тогда
		НаборЗаписей = РегистрыСведений.АктуальныеЭСФ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СчетФактура.Установить(ОбъектЭСФ.СчетФактура);
		Запись = НаборЗаписей.Добавить();
		Запись.СчетФактура = ОбъектЭСФ.СчетФактура;
		Запись.ЭСФ = ОбъектЭСФ.Ссылка;
		Запись.Состояние = ОбъектЭСФ.Состояние;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ ДОКУМЕНТА ЭСФ

Функция ПечатьЭСФ(МассивЭСФ, ОбъектыПечати = Неопределено) Экспорт
	
	Если ОбъектыПечати = Неопределено Тогда
		ОбъектыПечати = Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФ.Ссылка,
	|	ЭСФ.Номер,
	|	ЭСФ.Дата,
	|	ЭСФ.Идентификатор,
	|	ЭСФ.РегистрационныйНомер,
	|	ЭСФ.ДополнительныеСведения,
	|	ЭСФ.ДатаОборота,
	|	ЭСФ.СвязанныйЭСФ,
	|	ВЫБОР
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Исправленный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Исправленный,
	|	ВЫБОР
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Исправленный)
	|			ТОГДА ЭСФ.СвязанныйЭСФДата
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИсправленныйДата,
	|	ВЫБОР
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Исправленный)
	|			ТОГДА ЭСФ.СвязанныйЭСФНомер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИсправленныйНомер,
	|	ВЫБОР
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Исправленный)
	|			ТОГДА ЭСФ.СвязанныйЭСФРегистрационныйНомер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИсправленныйРегистрационныйНомер,
	|	ВЫБОР
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Дополнительный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Дополнительный,
	|	ВЫБОР
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Дополнительный)
	|			ТОГДА ЭСФ.СвязанныйЭСФДата
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДополнительныйДата,
	|	ВЫБОР
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Дополнительный)
	|			ТОГДА ЭСФ.СвязанныйЭСФРегистрационныйНомер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДополнительныйРегистрационныйНомер,
	|	ВЫБОР
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Дополнительный)
	|			ТОГДА ЭСФ.СвязанныйЭСФНомер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДополнительныйНомер,
	|	ЭСФ.ГрузоотправительИдентификатор,
	|	ЭСФ.ГрузоотправительНаименование,
	|	ЭСФ.АдресОтправки,
	|	ЭСФ.ГрузополучательИдентификатор,
	|	ЭСФ.ГрузополучательНаименование,
	|	ЭСФ.АдресДоставки,
	|	ЭСФ.ДоговорПоставкиНомер,
	|	ЭСФ.ДоговорПоставкиДата,
	|	ЭСФ.ДоговорПоставкиУсловияОплаты,
	|	ЭСФ.ДоговорПоставкиСпособОтправления,
	|	ЭСФ.ДоверенностьНаПоставкуНомер,
	|	ЭСФ.ДоверенностьНаПоставкуДата,
	|	ЭСФ.ПунктНазначения,
	|	ЭСФ.ГосучреждениеИИК,
	|	ЭСФ.ГосучреждениеКодТоваров,
	|	ЭСФ.ГосучреждениеНазначениеПлатежа,
	|	ЭСФ.ГосучреждениеБИК,
	|	ЭСФ.ВалютаКод,
	|	ВЫБОР
	|		КОГДА ЭСФ.ВалютаКод <> ""KZT""
	|			ТОГДА ЭСФ.КурсВалюты
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКурс,
	|	ВЫБОР
	|		КОГДА ЭСФ.ТипПодписи = ЗНАЧЕНИЕ(Перечисление.ТипыПодписиЭСФ.ЮридическоеЛицо)
	|			ТОГДА ЭСФ.ЭЦП
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОтпечатокЭЦПЮрЛица,
	|	ЭСФ.УполномоченныйСотрудник,
	|	ВЫБОР
	|		КОГДА ЭСФ.ТипПодписи <> ЗНАЧЕНИЕ(Перечисление.ТипыПодписиЭСФ.ЮридическоеЛицо)
	|			ТОГДА ЭСФ.ЭЦП
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОтпечатокЭЦП,
	|	ЭСФ.ТипПодписи,
	|	ЭСФ.ВерсияБланкаЭСФ,
	|	ЭСФ.ПоверенныйПоставщикаБИН,
	|	ЭСФ.ПоверенныйПоставщикаНаименование,
	|	ЭСФ.ПоверенныйПоставщикаАдресМестонахождения,
	|	ЭСФ.ПоверенныйПокупателяБИН,
	|	ЭСФ.ПоверенныйПокупателяНаименование,
	|	ЭСФ.ПоверенныйПокупателяАдресМестонахождения,
	|	ЭСФ.ДоговорПорученияПоставщикаНомер,
	|	ЭСФ.ДоговорПорученияПоставщикаДата,
	|	ЭСФ.ДоговорПорученияПокупателяНомер,
	|	ЭСФ.ДоговорПорученияПокупателяДата,
	|	ЭСФ.ГрузополучательКодСтраны,
	|	ЭСФ.ДоговорПоставки,
	|	ЭСФ.ДоговорПоставкиУсловияПоставки,
	|	ЭСФ.ДатаВыпискиНаБумажномНосителе,
	|	ЭСФ.ДокументПодтверждающийПоставкуНомер,
	|	ЭСФ.ДокументПодтверждающийПоставкуДата,
	|	ЭСФ.СпособОтправленияПоКлассификатору,
	//-=-=
	|	ЭСФ.УникальныйНомерВалютногоКонтроля
	//-=-=
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|ГДЕ
	|	ЭСФ.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФПоставщики.Ссылка КАК Ссылка,
	|	ЭСФПоставщики.НомерСтроки КАК НомерСтроки,
	|	ЭСФПоставщики.ПоставщикИдентификатор,
	|	ЭСФПоставщики.ПоставщикНаименование,
	|	ЭСФПоставщики.Адрес КАК ПоставщикАдрес,
	|	ЭСФПоставщики.СерияСвидетельстваПоНДС,
	|	ЭСФПоставщики.НомерСвидетельстваПоНДС,
	|	ЭСФПоставщики.ДокументПодтверждающийПоставкуНомер,
	|	ЭСФПоставщики.ДокументПодтверждающийПоставкуДата,
	|	ЭСФПоставщики.Комитент,
	|	ЭСФПоставщики.Комиссионер,
	|	ЭСФПоставщики.Экспедитор,
	|	ЭСФПоставщики.Лизингодатель,
	|	ЭСФПоставщики.УчастникСовместнойДеятельности,
	|	ЭСФПоставщики.ЭкспортерИлиУчастникСРП,
	|	ЭСФПоставщики.КБе,
	|	ЭСФПоставщики.ИИК,
	|	ЭСФПоставщики.БИК,
	|	ЭСФПоставщики.НаименованиеБанка,
	|	ЭСФПоставщики.ДополнительныеСведения КАК ПоставщикДополнительныеСведения,
	|	ЭСФПоставщики.МеждународныйПеревозчик,
	|	ЭСФПоставщики.Экспортер,
	|	ЭСФПоставщики.Доверитель,
	|	ЭСФПоставщики.ДоляУчастия,
	|	ЭСФПоставщики.УчастникСРП,
	|	ЭСФПоставщики.БИНРеорганизованногоЛица,
	|	ЭСФПоставщики.БИНФилиала,
	|	ЭСФПоставщики.ЯвляетсяСтруктурнымПодразделениемНерезидента
	|ИЗ
	|	Документ.ЭСФ.Поставщики КАК ЭСФПоставщики
	|ГДЕ
	|	ЭСФПоставщики.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФПолучатели.Ссылка КАК Ссылка,
	|	ЭСФПолучатели.НомерСтроки КАК НомерСтроки,
	|	ЭСФПолучатели.ПолучательИдентификатор,
	|	ЭСФПолучатели.ПолучательНаименование,
	|	ЭСФПолучатели.Адрес КАК ПолучательАдрес,
	|	ЭСФПолучатели.Комитент,
	|	ЭСФПолучатели.Комиссионер,
	|	ЭСФПолучатели.Лизингодатель,
	|	ЭСФПолучатели.ГосударственноеУчреждение,
	|	ЭСФПолучатели.Нерезидент,
	|	ЭСФПолучатели.УчастникСовместнойДеятельности,
	|	ЭСФПолучатели.ДополнительныеСведения КАК ПолучательДополнительныеСведения,
	|	ЭСФПолучатели.КодСтраны,
	|	ЭСФПолучатели.НерезидентВерсия2,
	|	ЭСФПолучатели.Доверитель,
	|	ЭСФПолучатели.УчастникСРП,
	|	ЭСФПолучатели.ДоляУчастия,
	|	ЭСФПолучатели.РозничнаяРеализация,
	|	ЭСФПолучатели.БИНРеорганизованногоЛица,
	|	ЭСФПолучатели.БИНФилиала,
	|	ЭСФПолучатели.ФизическоеЛицо
	|ИЗ
	|	Документ.ЭСФ.Получатели КАК ЭСФПолучатели
	|ГДЕ
	|	ЭСФПолучатели.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФТовары.Ссылка КАК Ссылка,
	|	ЭСФТовары.НомерСтроки КАК НомерСтроки,
	|	ЭСФТовары.ТоварНаименование,
	|	ЭСФТовары.КодТНВЭД КАК КодТовара,
	|	ЭСФТовары.ЕдиницаИзмеренияНаименование,
	|	ЭСФТовары.Количество,
	|	ЭСФТовары.Цена,
	|	ЭСФТовары.СуммаБезНалогов КАК СуммаБезНалогов,
	|	ЭСФТовары.СтавкаАкцизаЧисло,
	|	ЭСФТовары.СуммаАкциза КАК СуммаАкциза,
	|	ЭСФТовары.ОборотПоРеализации КАК ОборотПоРеализации,
	|	ВЫБОР
	|		КОГДА ЭСФ.МестоРеализацииНеРК
	|			ТОГДА &ТекстБезНДСНеРК
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЭСФТовары.БезНДС
	|					ТОГДА &ТекстБезНДС
	|				ИНАЧЕ ЭСФТовары.СтавкаНДСЧисло
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	ВЫБОР
	|		КОГДА ЭСФТовары.БезНДС
	|				ИЛИ ЭСФ.МестоРеализацииНеРК
	|			ТОГДА """"
	|		ИНАЧЕ ""%""
	|	КОНЕЦ КАК ШаблонПроцент,
	|	ЭСФТовары.БезНДС КАК БезНДС,
	|	ЭСФТовары.СуммаНДС КАК СуммаНДС,
	|	ЭСФТовары.Сумма КАК Сумма,
	|	ЭСФТовары.НомерЗаявленияВРамкахТС,
	|	ЭСФТовары.ДополнительныеДанные,
	|	ЭСФТовары.ТоварНаименованиеВРамкахТС,
	|	ЭСФТовары.ПризнакПроисхождения,
	|	ЭСФТовары.НомерПозицииВДекларацииИлиЗаявлении,
	|	ЭСФТовары.ИдентификаторТовара,
	|	ЭСФ.МестоРеализацииНеРК
	|ИЗ
	|	Документ.ЭСФ.Товары КАК ЭСФТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
	|		ПО ЭСФТовары.Ссылка = ЭСФ.Ссылка
	|ГДЕ
	|	ЭСФТовары.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаБезНалогов),
	|	СУММА(СуммаАкциза),
	|	СУММА(ОборотПоРеализации),
	|	СУММА(СуммаНДС),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФТоварыПоПоставщикам.Ссылка КАК Ссылка,
	|	ЭСФТоварыПоПоставщикам.Идентификатор КАК Идентификатор,
	|	ЭСФТоварыПоПоставщикам.НомерСтроки КАК НомерСтроки,
	|	ЭСФТовары.ТоварНаименование,
	|	ЭСФТовары.КодТНВЭД КАК КодТовара,
	|	ЭСФТовары.ЕдиницаИзмеренияНаименование,
	|	ЭСФТоварыПоПоставщикам.Количество,
	|	ЭСФТовары.Цена,
	|	ЭСФТоварыПоПоставщикам.СуммаБезНалогов КАК СуммаБезНалогов,
	|	ЭСФТовары.СтавкаАкцизаЧисло,
	|	ЭСФТоварыПоПоставщикам.СуммаАкциза КАК СуммаАкциза,
	|	ЭСФТоварыПоПоставщикам.ОборотПоРеализации КАК ОборотПоРеализации,
	|	ВЫБОР
	|		КОГДА ЭСФ.МестоРеализацииНеРК
	|			ТОГДА &ТекстБезНДСНеРК
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЭСФТовары.БезНДС
	|					ТОГДА &ТекстБезНДС
	|				ИНАЧЕ ЭСФТовары.СтавкаНДСЧисло
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	ВЫБОР
	|		КОГДА ЭСФТовары.БезНДС
	|				ИЛИ ЭСФ.МестоРеализацииНеРК
	|			ТОГДА """"
	|		ИНАЧЕ ""%""
	|	КОНЕЦ КАК ШаблонПроцент,
	|	ЭСФТовары.БезНДС,
	|	ЭСФТоварыПоПоставщикам.СуммаНДС КАК СуммаНДС,
	|	ЭСФТоварыПоПоставщикам.Сумма КАК Сумма,
	|	ЭСФТовары.НомерЗаявленияВРамкахТС,
	|	ВЫБОР
	|		КОГДА ЭСФТоварыПоПоставщикам.ДополнительныеДанные = """"
	|			ТОГДА ЭСФТовары.ДополнительныеДанные
	|		ИНАЧЕ ЭСФТоварыПоПоставщикам.ДополнительныеДанные
	|	КОНЕЦ КАК ДополнительныеДанные,
	|	ЭСФТовары.ПризнакПроисхождения,
	|	ЭСФТовары.НомерПозицииВДекларацииИлиЗаявлении,
	|	ЭСФТовары.ИдентификаторТовара,
	|	ЭСФТовары.ТоварНаименованиеВРамкахТС,
	|	ЭСФПоставщики.БИНРеорганизованногоЛица КАК БИНРеорганизованногоЛица
	|ИЗ
	|	Документ.ЭСФ.Поставщики КАК ЭСФПоставщики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ.ТоварыПоПоставщикам КАК ЭСФТоварыПоПоставщикам
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ.Товары КАК ЭСФТовары
	|			ПО ЭСФТоварыПоПоставщикам.НомерТовара = ЭСФТовары.НомерСтроки
	|				И ЭСФТоварыПоПоставщикам.Ссылка = ЭСФТовары.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
	|			ПО ЭСФТоварыПоПоставщикам.Ссылка = ЭСФ.Ссылка
	|		ПО (ЭСФТоварыПоПоставщикам.Ссылка = ЭСФПоставщики.Ссылка)
	|			И (ЭСФТоварыПоПоставщикам.Идентификатор = ЭСФПоставщики.ПоставщикИдентификатор)
	|ГДЕ
	|	ЭСФТоварыПоПоставщикам.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаБезНалогов),
	|	СУММА(СуммаАкциза),
	|	СУММА(ОборотПоРеализации),
	|	СУММА(СуммаНДС),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка,
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФТоварыПоПолучателям.Ссылка КАК Ссылка,
	|	ЭСФТоварыПоПолучателям.Идентификатор КАК Идентификатор,
	|	ЭСФТоварыПоПолучателям.НомерСтроки КАК НомерСтроки,
	|	ЭСФТовары.ТоварНаименование,
	|	ЭСФТовары.КодТНВЭД КАК КодТовара,
	|	ЭСФТовары.ЕдиницаИзмеренияНаименование,
	|	ЭСФТоварыПоПолучателям.Количество,
	|	ЭСФТовары.Цена,
	|	ЭСФТоварыПоПолучателям.СуммаБезНалогов КАК СуммаБезНалогов,
	|	ЭСФТовары.СтавкаАкцизаЧисло,
	|	ЭСФТоварыПоПолучателям.СуммаАкциза КАК СуммаАкциза,
	|	ЭСФТоварыПоПолучателям.ОборотПоРеализации КАК ОборотПоРеализации,
	|	ВЫБОР
	|		КОГДА ЭСФ.МестоРеализацииНеРК
	|			ТОГДА &ТекстБезНДСНеРК
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЭСФТовары.БезНДС
	|					ТОГДА &ТекстБезНДС
	|				ИНАЧЕ ЭСФТовары.СтавкаНДСЧисло
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	ВЫБОР
	|		КОГДА ЭСФТовары.БезНДС
	|				ИЛИ ЭСФ.МестоРеализацииНеРК
	|			ТОГДА """"
	|		ИНАЧЕ ""%""
	|	КОНЕЦ КАК ШаблонПроцент,
	|	ЭСФТовары.БезНДС,
	|	ЭСФТоварыПоПолучателям.СуммаНДС КАК СуммаНДС,
	|	ЭСФТоварыПоПолучателям.Сумма КАК Сумма,
	|	ЭСФТовары.НомерЗаявленияВРамкахТС,
	|	ВЫБОР
	|		КОГДА ЭСФТоварыПоПолучателям.ДополнительныеДанные = """"
	|			ТОГДА ЭСФТовары.ДополнительныеДанные
	|		ИНАЧЕ ЭСФТоварыПоПолучателям.ДополнительныеДанные
	|	КОНЕЦ КАК ДополнительныеДанные,
	|	ЭСФТовары.ПризнакПроисхождения,
	|	ЭСФТовары.НомерПозицииВДекларацииИлиЗаявлении,
	|	ЭСФТовары.ИдентификаторТовара,
	|	ЭСФТовары.ТоварНаименованиеВРамкахТС,
	|	ЭСФПолучатели.БИНРеорганизованногоЛица КАК БИНРеорганизованногоЛица
	|ИЗ
	|	Документ.ЭСФ.Получатели КАК ЭСФПолучатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ.ТоварыПоПолучателям КАК ЭСФТоварыПоПолучателям
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ.Товары КАК ЭСФТовары
	|			ПО ЭСФТоварыПоПолучателям.НомерТовара = ЭСФТовары.НомерСтроки
	|				И ЭСФТоварыПоПолучателям.Ссылка = ЭСФТовары.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
	|			ПО ЭСФТоварыПоПолучателям.Ссылка = ЭСФ.Ссылка
	|		ПО (ЭСФТоварыПоПолучателям.Ссылка = ЭСФПолучатели.Ссылка)
	|			И (ЭСФТоварыПоПолучателям.Идентификатор = ЭСФПолучатели.ПолучательИдентификатор)
	|ГДЕ
	|	ЭСФТоварыПоПолучателям.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаБезНалогов),
	|	СУММА(СуммаАкциза),
	|	СУММА(ОборотПоРеализации),
	|	СУММА(СуммаНДС),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка,
	|	Идентификатор";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивЭСФ);
	Запрос.УстановитьПараметр("ТекстБезНДС", НСтр("ru = 'Без НДС'"));
	Запрос.УстановитьПараметр("ТекстБезНДСНеРК", НСтр("ru = 'Без НДС - не РК'"));
	
	Результат = Запрос.ВыполнитьПакет();
	ДанныеШапкиПоДокументам = Результат[0].Выбрать();
	ДанныеПоставщикиПоДокументам = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеПолучателиПоДокументам = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеТоварыПоДокументам = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеТоварыПоставщиковПоДокументам = Результат[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеТоварыПолучателейПоДокументам = Результат[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивВерсий = новый Массив;
	СтруктураОбластейВерсия1 = новый Структура;
	СтруктураОбластейВерсия2 = новый Структура;
	
	Макет = ПолучитьМакет("ПФ_MXL_ЭСФ");	
	
	//Области Макет версии 1
	СтруктураОбластейВерсия1.Вставить("ОбластьШапкаСФ", Макет.ПолучитьОбласть("ШапкаСФ_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделA", Макет.ПолучитьОбласть("РазделA_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделBШапка", Макет.ПолучитьОбласть("РазделBШапка_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделB", Макет.ПолучитьОбласть("РазделB_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделCШапка", Макет.ПолучитьОбласть("РазделCШапка_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделC", Макет.ПолучитьОбласть("РазделC_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделD", Макет.ПолучитьОбласть("РазделD_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделE", Макет.ПолучитьОбласть("РазделE_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделF", Макет.ПолучитьОбласть("РазделF_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделG", Макет.ПолучитьОбласть("РазделG_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделGHШапкаТаблица", Макет.ПолучитьОбласть("РазделGHШапкаТаблица_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделGHСтрокаТаблица", Макет.ПолучитьОбласть("РазделGHСтрокаТаблица_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделGHПодвалТаблица", Макет.ПолучитьОбласть("РазделGHПодвалТаблица_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделH_Заголовок", Макет.ПолучитьОбласть("РазделH_Заголовок_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделH_ВидТаблиц", Макет.ПолучитьОбласть("РазделH_ВидТаблиц_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделI", Макет.ПолучитьОбласть("РазделI_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделJ", Макет.ПолучитьОбласть("РазделJ_Версия1"));	
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделH_ЗаголовокТаблицы", Макет.ПолучитьОбласть("РазделH_ЗаголовокТаблицы_Версия1"));
	
	//Области Макет версии 2
	СтруктураОбластейВерсия2.Вставить("ОбластьШапкаСФ", Макет.ПолучитьОбласть("ШапкаСФ_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделA", Макет.ПолучитьОбласть("РазделA_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделBШапка", Макет.ПолучитьОбласть("РазделBШапка_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделB", Макет.ПолучитьОбласть("РазделB_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделB1Шапка", Макет.ПолучитьОбласть("РазделB1Шапка_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделB1", Макет.ПолучитьОбласть("РазделB1_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделCШапка", Макет.ПолучитьОбласть("РазделCШапка_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделC", Макет.ПолучитьОбласть("РазделC_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделC1", Макет.ПолучитьОбласть("РазделC1_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделD", Макет.ПолучитьОбласть("РазделD_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделE", Макет.ПолучитьОбласть("РазделE_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделF", Макет.ПолучитьОбласть("РазделF_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделG", Макет.ПолучитьОбласть("РазделG_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделGHШапкаТаблица", Макет.ПолучитьОбласть("РазделGHШапкаТаблица_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделGHСтрокаТаблица", Макет.ПолучитьОбласть("РазделGHСтрокаТаблица_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделGHПодвалТаблица", Макет.ПолучитьОбласть("РазделGHПодвалТаблица_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделH_Заголовок", Макет.ПолучитьОбласть("РазделH_Заголовок_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделH_ЗаголовокТаблицы", Макет.ПолучитьОбласть("РазделH_ЗаголовокТаблицы_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделI", Макет.ПолучитьОбласть("РазделI_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделJ", Макет.ПолучитьОбласть("РазделJ_Версия2"));	
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделK", Макет.ПолучитьОбласть("РазделK_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделL", Макет.ПолучитьОбласть("РазделL_Версия2"));

	МассивВерсий.Добавить(СтруктураОбластейВерсия1);
	МассивВерсий.Добавить(СтруктураОбластейВерсия2);

	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактура_ЭСФ";
	
	Пока ДанныеШапкиПоДокументам.Следующий() Цикл
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		Если ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ВерсияБланкаЭСФ) Тогда
			ВерсияБланкаЭСФ = ДанныеШапкиПоДокументам.ВерсияБланкаЭСФ;
		Иначе
			ВерсияБланкаЭСФ = 1;
		КонецЕсли;
		Если МассивВерсий.Количество() >= ВерсияБланкаЭСФ Тогда
			ОбластиМакета = МассивВерсий[ВерсияБланкаЭСФ-1];
		Иначе
			ОбластиМакета = МассивВерсий[МассивВерсий.Количество()-1];
		КонецЕсли;
		
		ПрефиксОбластейМакета = "_Версия" + Строка(ВерсияБланкаЭСФ);
		
		
		ДанныеПоставщикиПоДокументам.Сбросить();
		ДанныеПолучателиПоДокументам.Сбросить();
		ДанныеТоварыПоДокументам.Сбросить(); 	
		ДанныеТоварыПоставщиковПоДокументам.Сбросить();
		ДанныеТоварыПолучателейПоДокументам.Сбросить();
		
		ТабДокумент.Вывести(ОбластиМакета.ОбластьШапкаСФ);
		//Раздел А	
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделA.Параметры, ДанныеШапкиПоДокументам);
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделA);
			
			// Данные поставщиков по документу.	
		//Раздел В и В1
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделBШапка);
			ЭтоПервыйПоставщик = Истина;
			Если ДанныеПоставщикиПоДокументам.НайтиСледующий(ДанныеШапкиПоДокументам.Ссылка) Тогда
				ДанныеПоставщикиПоДокументу = ДанныеПоставщикиПоДокументам.Выбрать();
				ПоставщикКоличествоСД = ДанныеПоставщикиПоДокументу.Количество();
				Пока ДанныеПоставщикиПоДокументу.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделB.Параметры, ДанныеПоставщикиПоДокументу);
					
					Если ВерсияБланкаЭСФ = 2 Тогда
						Если ДанныеПоставщикиПоДокументу.ЯвляетсяСтруктурнымПодразделениемНерезидента Тогда	
							ОбластиМакета.ОбластьРазделB.Параметры.ЯвляетсяСтруктурнымПодразделениемНерезидента = "v";
						Иначе
						    ОбластиМакета.ОбластьРазделB.Параметры.ЯвляетсяСтруктурнымПодразделениемНерезидента = "";
						КонецЕсли;
					КонецЕсли;
					
					Если ЭтоПервыйПоставщик Тогда
						Если ДанныеПоставщикиПоДокументу.УчастникСовместнойДеятельности 
							ИЛИ ДанныеПоставщикиПоДокументу.УчастникСРП Тогда
							ОбластиМакета.ОбластьРазделB.Параметры.ПоставщикКоличествоСД = ПоставщикКоличествоСД;
							Если ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ВерсияБланкаЭСФ) И ДанныеШапкиПоДокументам.ВерсияБланкаЭСФ > 1 Тогда
								ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделB1.Параметры, ДанныеПоставщикиПоДокументу);
							КонецЕсли;
						КонецЕсли;
						ЭтоПервыйПоставщик = Ложь;
					Иначе
						ОбластиМакета.ОбластьРазделB.УдалитьОбласть(ОбластиМакета.ОбластьРазделB.Область("ПоставщикиКоличествоСД" + ПрефиксОбластейМакета)); 
					КонецЕсли;
					ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделB);
					Если ВерсияБланкаЭСФ = 2 Тогда
						ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделB1.Параметры, ДанныеПоставщикиПоДокументу);
						ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделB1Шапка);
						ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделB1);
					КонецЕсли;
					
					
				КонецЦикла;
			КонецЕсли;
			
			// Данные покупателей по документу.
		//Раздел С
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделCШапка);
			ЭтоПервыйПолучатель = Истина;
			Пока ДанныеПолучателиПоДокументам.НайтиСледующий(ДанныеШапкиПоДокументам.Ссылка) Цикл
				ДанныеПолучателиПоДокументу = ДанныеПолучателиПоДокументам.Выбрать();
				ПолучательКоличествоСД = ДанныеПолучателиПоДокументу.Количество();
				Пока ДанныеПолучателиПоДокументу.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделC.Параметры, ДанныеПолучателиПоДокументу);
					Если ЭтоПервыйПолучатель Тогда
						Если ДанныеПолучателиПоДокументу.УчастникСовместнойДеятельности 
							ИЛИ ДанныеПолучателиПоДокументу.УчастникСРП Тогда
							ОбластиМакета.ОбластьРазделC.Параметры.ПолучательКоличествоСД = ПолучательКоличествоСД;	
						КонецЕсли;
						ЭтоПервыйПолучатель = Ложь;
					Иначе
						ОбластиМакета.ОбластьРазделC.УдалитьОбласть(ОбластиМакета.ОбластьРазделC.Область("ПолучателиКоличествоСД" + ПрефиксОбластейМакета)); 
					КонецЕсли;
					ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделC);
				КонецЦикла;
			КонецЦикла;
			
			//Раздел С1
			Если ВерсияБланкаЭСФ = 2 Тогда
				Если ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ГосучреждениеИИК)
					ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ГосучреждениеБИК) Тогда
					
					ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделC1.Параметры, ДанныеШапкиПоДокументам);
					ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделC1);
				КонецЕсли;
			КонецЕсли;


			
		//Раздел D
			
			Если ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ГрузополучательИдентификатор)
				ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ГрузоотправительИдентификатор)
				ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ГрузополучательНаименование)
				ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ГрузоотправительНаименование)Тогда
				
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделD.Параметры, ДанныеШапкиПоДокументам);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделD);
				
			КонецЕсли;
		//Раздел E	
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделE.Параметры, ДанныеШапкиПоДокументам);
			Если ВерсияБланкаЭСФ = 2 Тогда
				Если ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ДоговорПоставкиНомер) ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ДоговорПоставкиДата) Тогда	
					ОбластиМакета.ОбластьРазделE.Параметры.НаличиеДоговораПоставки = "v";
					ОбластиМакета.ОбластьРазделE.Параметры.ОтсутствиеДоговораПоставки = "";
				Иначе
					ОбластиМакета.ОбластьРазделE.Параметры.ОтсутствиеДоговораПоставки = "v";
					ОбластиМакета.ОбластьРазделE.Параметры.НаличиеДоговораПоставки = "";
				КонецЕсли;
			КонецЕсли;
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделE);
			//КонецЕсли;
			
		//Раздел F
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделF.Параметры, ДанныеШапкиПоДокументам);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделF);	
			
		//Раздел G
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG.Параметры, ДанныеШапкиПоДокументам);
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG);
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделGHШапкаТаблица.Параметры, ДанныеШапкиПоДокументам);
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделGHШапкаТаблица);
			
			// Данные товаров по документу.
			Пока ДанныеТоварыПоДокументам.НайтиСледующий(ДанныеШапкиПоДокументам.Ссылка) Цикл
				ДанныеТоварыПоДокументу = ДанныеТоварыПоДокументам.Выбрать();
				Пока ДанныеТоварыПоДокументу.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделGHСтрокаТаблица.Параметры, ДанныеТоварыПоДокументу);
					ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделGHСтрокаТаблица);
				КонецЦикла;
				
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделGHПодвалТаблица.Параметры, ДанныеТоварыПоДокументам);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделGHПодвалТаблица);
				
			КонецЦикла;
			
		//Раздел H
			/////////////////////////////////////////////////////////////////////////////
			// Участники СД.
			
			// Если поставщик или получатель участники СД, то вывести шапку раздела H.
			
			ПоставщикиУчастникиСД = Ложь;
			ПоставщикиУчастникиСРП = Ложь;
			ДанныеПоставщикиПоДокументам.Сбросить();
			Если ДанныеПоставщикиПоДокументам.НайтиСледующий(ДанныеШапкиПоДокументам.Ссылка) Тогда
				ДанныеПоставщикиПоДокументу = ДанныеПоставщикиПоДокументам.Выбрать();
				Если ДанныеПоставщикиПоДокументу.Следующий() Тогда
					Если ДанныеПоставщикиПоДокументу.УчастникСовместнойДеятельности Тогда
						ПоставщикиУчастникиСД = Истина;	
					КонецЕсли;
					Если ДанныеПоставщикиПоДокументу.УчастникСРП Тогда
						ПоставщикиУчастникиСРП = Истина;	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ПолучателиУчастникиСД = Ложь;
			ПолучателиУчастникиСРП = Ложь;
			ДанныеПолучателиПоДокументам.Сбросить();
			Если ДанныеПолучателиПоДокументам.НайтиСледующий(ДанныеШапкиПоДокументам.Ссылка) Тогда
				ДанныеПолучателиПоДокументу = ДанныеПолучателиПоДокументам.Выбрать();
				Если ДанныеПолучателиПоДокументу.Следующий() Тогда
					Если ДанныеПолучателиПоДокументу.УчастникСовместнойДеятельности Тогда
						ПолучателиУчастникиСД = Истина;	
					КонецЕсли;
					Если ДанныеПолучателиПоДокументу.УчастникСРП Тогда
						ПоставщикиУчастникиСРП = Истина;	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПоставщикиУчастникиСД ИЛИ ПолучателиУчастникиСД 
				ИЛИ ПоставщикиУчастникиСРП ИЛИ ПоставщикиУчастникиСРП Тогда
				
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделH_Заголовок);			
				НомерТаблицыУчастникиСД = 1;
				
				Структура = Новый Структура;
				Структура.Вставить("ТоварыПоПоставщикам", ДанныеТоварыПоставщиковПоДокументам);
				Структура.Вставить("ТоварыПоПолучателям", ДанныеТоварыПолучателейПоДокументам);
				
				Для Каждого Элемент Из Структура Цикл
					
					ДанныеТоварыСДПоДокументам = Элемент.Значение;
					
					Если ДанныеТоварыСДПоДокументам.НайтиСледующий(ДанныеШапкиПоДокументам.Ссылка) Тогда
						
						Если ВерсияБланкаЭСФ = 1 Тогда
							
							ПоставщикиПолучатели = ?(Элемент.Ключ = "ТоварыПоПоставщикам", НСтр("ru = 'Поставщики'"), НСтр("ru = 'Получатели'"));
							
							ОбластиМакета.ОбластьРазделH_ВидТаблиц.Параметры.ПоставщикиПолучатели = ПоставщикиПолучатели;
							
							ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделH_ВидТаблиц);
							
						КонецЕсли;
						
						ДанныеТоварыСДПоСД = ДанныеТоварыСДПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ДанныеТоварыСДПоСД.Следующий() Цикл
							
							ОбластиМакета.ОбластьРазделH_ЗаголовокТаблицы.Параметры.Номер = НомерТаблицыУчастникиСД;
							ОбластиМакета.ОбластьРазделH_ЗаголовокТаблицы.Параметры.Идентификатор = ДанныеТоварыСДПоСД.Идентификатор;
														           																					
							ДанныеТоварыСД = ДанныеТоварыСДПоСД.Выбрать();
							НомерСтрокиСД = 1;
							
							Пока ДанныеТоварыСД.Следующий() Цикл
								Если ДанныеТоварыСД.Идентификатор = ДанныеТоварыСДПоСД.Идентификатор Тогда
									ОбластиМакета.ОбластьРазделH_ЗаголовокТаблицы.Параметры.БИНРеорганизованногоЛица = ДанныеТоварыСД.БИНРеорганизованногоЛица;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
							ДанныеТоварыСД.Сбросить();
							
							ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделH_ЗаголовокТаблицы);
							ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделGHШапкаТаблица);

							Пока ДанныеТоварыСД.Следующий() Цикл
								
								ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделGHСтрокаТаблица.Параметры, ДанныеТоварыСД);
								ОбластиМакета.ОбластьРазделGHСтрокаТаблица.Параметры.НомерСтроки = НомерСтрокиСД;
																
								ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделGHСтрокаТаблица);
								
								НомерСтрокиСД = НомерСтрокиСД + 1;
								
							КонецЦикла;
							
							ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделGHПодвалТаблица.Параметры, ДанныеТоварыСДПоСД);
							ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделGHПодвалТаблица);
							
							НомерТаблицыУчастникиСД = НомерТаблицыУчастникиСД + 1;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ВерсияБланкаЭСФ = 1 Тогда
		//Раздел I версия 1
				Если ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ДополнительныеСведения) Тогда
					ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделI.Параметры, ДанныеШапкиПоДокументам);
					ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделI);
				КонецЕсли;
		//Раздел J версия 1			
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделJ.Параметры, ДанныеШапкиПоДокументам);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделJ);
				
			ИначеЕсли ВерсияБланкаЭСФ = 2 Тогда 
				
		//Раздел I	
				Если ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ПоверенныйПоставщикаБИН)
					ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ПоверенныйПоставщикаНаименование)
					ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ПоверенныйПоставщикаАдресМестонахождения)
					ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ДоговорПорученияПоставщикаНомер)
					ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ДоговорПорученияПоставщикаДата) Тогда
					ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделI.Параметры, ДанныеШапкиПоДокументам);
					ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделI);
				КонецЕсли;
		//Раздел J	
				Если ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ПоверенныйПокупателяБИН)
					ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ПоверенныйПокупателяНаименование)
					ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ПоверенныйПокупателяАдресМестонахождения)
					ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ДоговорПорученияПокупателяНомер)
					ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ДоговорПорученияПокупателяДата) Тогда
					ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделJ.Параметры, ДанныеШапкиПоДокументам);
					ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделJ);
				КонецЕсли;
					
		//Раздел K				
				Если ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ДополнительныеСведения) Тогда
					ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделK.Параметры, ДанныеШапкиПоДокументам);
					ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделK);
				КонецЕсли;
				
		//Раздел L	
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделL.Параметры, ДанныеШапкиПоДокументам);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделL);
			КонецЕсли;
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВЕРСИЯ ОБРАБОТКИ

Функция ВерсияОбработки() Экспорт
	
	Возврат "v4.0.0 r2";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОТКРЫТИЕ И ЗАКРЫТИЕ СЕССИИ

Функция ПолучитьАвторизационныйТикет(Знач ПрофильИСЭСФ, ВерсияИСЭСФ = Неопределено) Экспорт
	
	ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
	Если ВерсияИСЭСФ = Неопределено Тогда		
		ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	КонецЕсли;
		
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	 
	Макет = ПолучитьМакет("ЗапросCreateAuthTicket");
	
	Если ПараметрыЭСФ.ВремяЖизниТикетаЭСФ > 0 Тогда
		ttlInMinutes = СтрЗаменить("<ttlInMinutes>[ttlInMinutes]</ttlInMinutes>", "[ttlInMinutes]", Формат(ПараметрыЭСФ.ВремяЖизниТикетаЭСФ,"ЧГ="));	
	Иначе
		ttlInMinutes = "";
	КонецЕсли;
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[tin]",             ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ИдентификационныйНомер);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ttlInMinutes]",    ttlInMinutes);

		
	ОтветXML = ВыполнитьМетодВебСервиса(ТекстЗапроса, ИмяСервисаAuthService(), , ВерсияИСЭСФ);
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);		
		АвторизационныйТикет = ОтветXDTO.Body.createAuthTicketResponse.authTicketXml;	
			
	Иначе
				// прочие неклассифицированные ошибки
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ПолучитьАвторизационныйТикет'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			"При получении авторизационного тикета произошла ошибка." + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение НСтр("ru = 'При получении авторизационного тикета ИС ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
	НСтр("ru = 'ОбменЭСФ.ПолучитьАвторизационныйТикет'"), 
	УровеньЖурналаРегистрации.Информация,,,
	"Авторизационный тикет: " + АвторизационныйТикет);
	
	//Может авторизационнйы тикет тоже надо сохранять как сессию, при успешной открытой сессии удалять?
	//ЭСФСервер.СохранитьИдентификаторСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF", ИдентификаторСессии);
	
	Возврат АвторизационныйТикет;
	
КонецФункции

// См. ЭСФСервер.ОткрытьСессию()
Функция ОткрытьСессию(Знач ПрофильИСЭСФ, ВерсияИСЭСФ = Неопределено) Экспорт
	
	Если ВерсияИСЭСФ = Неопределено Тогда
		ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
		ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	КонецЕсли;
	
	// Проверим существует ли активная сессия у пользователя
	IDСессии = ЭСФСервер.ПолучитьСохраненныйИдентификаторСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF");
	Если ЗначениеЗаполнено(IDСессии) И СессияАктивна(IDСессии,ПрофильИСЭСФ, ВерсияИСЭСФ) Тогда
		Возврат IDСессии;
	КонецЕсли;	
	
	// Если нет, откроем новую
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	
	Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
		Макет = ПолучитьМакет("ЗапросCreateSession_Версия1");
	Иначе
		Макет = ПолучитьМакет("ЗапросCreateSession_Версия2");
	КонецЕсли;		
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Username]",        ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Password]",        ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[x509Certificate]", ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.СертификатАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[tin]",             ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ИдентификационныйНомер);
	
	Если ЗначениеЗаполнено(ДанныеПрофиляИСЭСФ.ТипПрофиляИСЭСФ) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[businessProfileType]",   ЭСФКлиентСервер.ТипПрофиляИСЭСФ(ДанныеПрофиляИСЭСФ.ТипПрофиляИСЭСФ));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<businessProfileType>[businessProfileType]</businessProfileType>",   ЭСФКлиентСервер.ТипПрофиляИСЭСФ(ДанныеПрофиляИСЭСФ.ТипПрофиляИСЭСФ));
	КонецЕсли; 
	
	ОтветXML = ВыполнитьМетодВебСервиса(ТекстЗапроса, ИмяСервисаSessionService(), , ВерсияИСЭСФ);
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);		
		ИдентификаторСессии = ОтветXDTO.Body.createSessionResponse.sessionId;	
	ИначеЕсли ЭтоМодульнаяОшибкаЕстьАктивнаяСессиия(ОтветXML) Тогда
		ОшибкаОткрытияСессии = НСтр(
		"ru = 'При входе в ИС ЭСФ возникла ошибка: для пользователя уже есть активная сессия, открытие новой сессии невозможно.
		|
		|Возможные причины:
		|- С вашим ключом аутентификации в настоящее время в системе ИС ЭСФ уже работает другой пользователь.
		|Чтобы избежать проблемы, используйте личный ключ аутентификации и не передавайте его третьим лицам.		
		|
		|- Вы уже инициировали какое-то длительное действие в системе ИС ЭСФ и оно еще не завершено.
		|Дождитесь завершения ранее начатого процесса, чтобы открыть новую сессию.
		|
		|- Вы инициировали подключение к ИС ЭСФ ранее, но по каким-то причинам (например, в результате технических проблем)
		|сессия не была закрыта автоматически после завершения действия пользователя в ИС ЭСФ.		
		|Попробуйте повторить действие позднее. Неактивные сессии закрываются системой автоматически в течение 5 минут.'");
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОткрытьСессию'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			"При открытии сессии произошла ошибка." + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ВызватьИсключение ОшибкаОткрытияСессии;
		
	Иначе
		Если ИнформацияОбОшибке.faultcode = "ns1:SecurityError" Тогда
						
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОткрытьСессию'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			"При открытии сессии произошла ошибка. Некорректный пароль или логин.");
			
			ТекстСообщения = НСтр("ru = 'При открытии сессии произошла ошибка. Некорректный пароль или логин.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			
			ПризнакАвтоСинхронизации = ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.ИспользоватьДляРегламентногоЗадания;
			Если ПризнакАвтоСинхронизации Тогда
				
				ТекстСообщения = НСтр("ru = 'При входе в ИС ЭСФ возникла ошибка. Некорректный пароль или логин.
				|У профиля %ПрофильИСЭСФ% снят признак ""Использовать для автоматической синхронизации с ИС ЭСФ"".'");
			
				ПрофильИСЭСФДляИзменения = ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка.ПолучитьОбъект();
				ПрофильИСЭСФДляИзменения.ИспользоватьДляРегламентногоЗадания = Ложь;
				Попытка
					ПрофильИСЭСФДляИзменения.Записать();
				Исключение
				КонецПопытки;
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПрофильИСЭСФ%", ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ);

			КонецЕсли;	
				
			ВызватьИсключение ТекстСообщения;
			  
		Иначе		
			// прочие неклассифицированные ошибки
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОткрытьСессию'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			"При открытии сессии произошла ошибка." + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение НСтр("ru = 'При входе в ИС ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
	НСтр("ru = 'ОбменЭСФ.ОткрытьСессию'"), 
	УровеньЖурналаРегистрации.Информация,,,
	"Идентификатор сессии: " + ИдентификаторСессии);
	
	ЭСФСервер.СохранитьИдентификаторСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF", ИдентификаторСессии);
	
	Возврат ИдентификаторСессии;
	
КонецФункции

Функция ОткрытьСессиюСПодписью(Знач ПрофильИСЭСФ, ВерсияИСЭСФ = Неопределено, ПодписанныйАвторизационныйТикет) Экспорт
	
	Если ВерсияИСЭСФ = Неопределено Тогда
		ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
		ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	КонецЕсли;
	
	// Проверим существует ли активная сессия у пользователя
	IDСессии = ЭСФСервер.ПолучитьСохраненныйИдентификаторСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF");
	Если ЗначениеЗаполнено(IDСессии) И СессияАктивна(IDСессии,ПрофильИСЭСФ, ВерсияИСЭСФ) Тогда
		Возврат IDСессии;
	КонецЕсли;	
	
	// Если нет, откроем новую
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	
	Макет = ПолучитьМакет("ЗапросСreateSessionSigned");
			
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Username]",        ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Password]",        ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[tin]",             ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ИдентификационныйНомер);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[signedAuthTicket]", ПодписанныйАвторизационныйТикет);
	
	Если ЗначениеЗаполнено(ДанныеПрофиляИСЭСФ.ТипПрофиляИСЭСФ) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[businessProfileType]",   ЭСФКлиентСервер.ТипПрофиляИСЭСФ(ДанныеПрофиляИСЭСФ.ТипПрофиляИСЭСФ));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<businessProfileType>[businessProfileType]</businessProfileType>",   ЭСФКлиентСервер.ТипПрофиляИСЭСФ(ДанныеПрофиляИСЭСФ.ТипПрофиляИСЭСФ));
	КонецЕсли; 
	
	ОтветXML = ВыполнитьМетодВебСервиса(ТекстЗапроса, ИмяСервисаSessionService(), , ВерсияИСЭСФ);
	
	ИнформацияОбОшибке = Неопределено;
	// Как заработает процесс открытия сессии = нужно проверить актуальны ли обработки ошибок
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);		
		ИдентификаторСессии = ОтветXDTO.Body.createSessionResponse.sessionId;	
	ИначеЕсли ЭтоМодульнаяОшибкаЕстьАктивнаяСессиия(ОтветXML) Тогда
		ОшибкаОткрытияСессии = НСтр(
		"ru = 'При входе в ИС ЭСФ возникла ошибка: для пользователя уже есть активная сессия, открытие новой сессии невозможно.
		|
		|Возможные причины:
		|- С вашим ключом аутентификации в настоящее время в системе ИС ЭСФ уже работает другой пользователь.
		|Чтобы избежать проблемы, используйте личный ключ аутентификации и не передавайте его третьим лицам.		
		|
		|- Вы уже инициировали какое-то длительное действие в системе ИС ЭСФ и оно еще не завершено.
		|Дождитесь завершения ранее начатого процесса, чтобы открыть новую сессию.
		|
		|- Вы инициировали подключение к ИС ЭСФ ранее, но по каким-то причинам (например, в результате технических проблем)
		|сессия не была закрыта автоматически после завершения действия пользователя в ИС ЭСФ.		
		|Попробуйте повторить действие позднее. Неактивные сессии закрываются системой автоматически в течение 5 минут.'");
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОткрытьСессиюСПодписью'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			"При открытии сессии произошла ошибка." + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ВызватьИсключение ОшибкаОткрытияСессии;
		
	Иначе
		Если ИнформацияОбОшибке.faultcode = "ns1:SecurityError" Тогда
						
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОткрытьСессиюСПодписью'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			"При открытии сессии произошла ошибка. Некорректный пароль или логин.");
			
			ТекстСообщения = НСтр("ru = 'При открытии сессии произошла ошибка. Некорректный пароль или логин.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			
			ПризнакАвтоСинхронизации = ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.ИспользоватьДляРегламентногоЗадания;
			Если ПризнакАвтоСинхронизации Тогда
				
				ТекстСообщения = НСтр("ru = 'При входе в ИС ЭСФ возникла ошибка. Некорректный пароль или логин.
				|У профиля %ПрофильИСЭСФ% снят признак ""Использовать для автоматической синхронизации с ИС ЭСФ"".'");
			
				ПрофильИСЭСФДляИзменения = ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка.ПолучитьОбъект();
				ПрофильИСЭСФДляИзменения.ИспользоватьДляРегламентногоЗадания = Ложь;
				Попытка
					ПрофильИСЭСФДляИзменения.Записать();
				Исключение
				КонецПопытки;
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПрофильИСЭСФ%", ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ);

			КонецЕсли;	
				
			ВызватьИсключение ТекстСообщения;
			  
		Иначе		
			// прочие неклассифицированные ошибки
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОткрытьСессиюСПодписью'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			"При открытии сессии произошла ошибка." + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение НСтр("ru = 'При входе в ИС ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
	НСтр("ru = 'ОбменЭСФ.ОткрытьСессиюСПодписью'"), 
	УровеньЖурналаРегистрации.Информация,,,
	"Идентификатор сессии: " + ИдентификаторСессии);
	
	ЭСФСервер.СохранитьИдентификаторСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF", ИдентификаторСессии);
	//сохраняем подписанный тикет в регистр
	ЭСФСервер.СохранитьТикетСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF", ПодписанныйАвторизационныйТикет);
	
	Возврат ИдентификаторСессии;
	
КонецФункции

// См. ЭСФСервер.ОткрытьСессию()
Функция ОткрытьСессиюПоТикету(Знач ПрофильИСЭСФ, ВерсияИСЭСФ = Неопределено) Экспорт
	
	//Подписать тикет для сессии можно только на клиенте 
	//поэтому здесь мы только ищем активную или сохраненный тикет
	
	Если ВерсияИСЭСФ = Неопределено Тогда
		ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
		ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	КонецЕсли;
	
	// Проверим существует ли активная сессия у пользователя
	IDСессии = ЭСФСервер.ПолучитьСохраненныйИдентификаторСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF");
	Если ЗначениеЗаполнено(IDСессии) И СессияАктивна(IDСессии,ПрофильИСЭСФ, ВерсияИСЭСФ) Тогда
		Возврат IDСессии;
	КонецЕсли;	
	
	//Теперь для переоткрытия нужен тикет
	ПодписанныйАвторизационныйТикет = "";
	//получаем тикет из регистра
	ПодписанныйАвторизационныйТикет = ЭСФСервер.ПолучитьСохраненныйТикетСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF");	
	
	Если Не ЗначениеЗаполнено(ПодписанныйАвторизационныйТикет) Тогда
		// прочие неклассифицированные ошибки
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменЭСФ.ОткрытьСессию'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		"При открытии сессии произошла ошибка. Невозможно открыть сессию без подписи данных.");
		
		ВызватьИсключение НСтр("ru = 'При входе в ИС ЭСФ возникла ошибка.'") + Символы.ПС + НСтр("ru = 'Для открытия сессии нужна подпись пользователя.'");
	КонецЕсли;
	
	// Если нет, откроем новую
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	
	Макет = ПолучитьМакет("ЗапросСreateSessionSigned");
			
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Username]",        ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Password]",        ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[tin]",             ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ИдентификационныйНомер);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[signedAuthTicket]", ПодписанныйАвторизационныйТикет);
	
	Если ЗначениеЗаполнено(ДанныеПрофиляИСЭСФ.ТипПрофиляИСЭСФ) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[businessProfileType]",   ЭСФКлиентСервер.ТипПрофиляИСЭСФ(ДанныеПрофиляИСЭСФ.ТипПрофиляИСЭСФ));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<businessProfileType>[businessProfileType]</businessProfileType>",   ЭСФКлиентСервер.ТипПрофиляИСЭСФ(ДанныеПрофиляИСЭСФ.ТипПрофиляИСЭСФ));
	КонецЕсли; 
	
	ОтветXML = ВыполнитьМетодВебСервиса(ТекстЗапроса, ИмяСервисаSessionService(), , ВерсияИСЭСФ);
	
	ИнформацияОбОшибке = Неопределено;
	// Как заработает процесс открытия сессии = нужно проверить актуальны ли обработки ошибок
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);		
		ИдентификаторСессии = ОтветXDTO.Body.createSessionResponse.sessionId;	
	ИначеЕсли ЭтоМодульнаяОшибкаЕстьАктивнаяСессиия(ОтветXML) Тогда
		ОшибкаОткрытияСессии = НСтр(
		"ru = 'При входе в ИС ЭСФ возникла ошибка: для пользователя уже есть активная сессия, открытие новой сессии невозможно.
		|
		|Возможные причины:
		|- С вашим ключом аутентификации в настоящее время в системе ИС ЭСФ уже работает другой пользователь.
		|Чтобы избежать проблемы, используйте личный ключ аутентификации и не передавайте его третьим лицам.		
		|
		|- Вы уже инициировали какое-то длительное действие в системе ИС ЭСФ и оно еще не завершено.
		|Дождитесь завершения ранее начатого процесса, чтобы открыть новую сессию.
		|
		|- Вы инициировали подключение к ИС ЭСФ ранее, но по каким-то причинам (например, в результате технических проблем)
		|сессия не была закрыта автоматически после завершения действия пользователя в ИС ЭСФ.		
		|Попробуйте повторить действие позднее. Неактивные сессии закрываются системой автоматически в течение 5 минут.'");
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОткрытьСессиюСПодписью'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			"При открытии сессии произошла ошибка." + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ВызватьИсключение ОшибкаОткрытияСессии;
		
	Иначе
		Если ИнформацияОбОшибке.faultcode = "ns1:SecurityError" Тогда
						
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОткрытьСессиюСПодписью'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			"При открытии сессии произошла ошибка. Некорректный пароль или логин.");
			
			ТекстСообщения = НСтр("ru = 'При открытии сессии произошла ошибка. Некорректный пароль или логин.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			
			ПризнакАвтоСинхронизации = ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.ИспользоватьДляРегламентногоЗадания;
			Если ПризнакАвтоСинхронизации Тогда
				
				ТекстСообщения = НСтр("ru = 'При входе в ИС ЭСФ возникла ошибка. Некорректный пароль или логин.
				|У профиля %ПрофильИСЭСФ% снят признак ""Использовать для автоматической синхронизации с ИС ЭСФ"".'");
			
				ПрофильИСЭСФДляИзменения = ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка.ПолучитьОбъект();
				ПрофильИСЭСФДляИзменения.ИспользоватьДляРегламентногоЗадания = Ложь;
				Попытка
					ПрофильИСЭСФДляИзменения.Записать();
				Исключение
				КонецПопытки;
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПрофильИСЭСФ%", ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ);

			КонецЕсли;	
				
			ВызватьИсключение ТекстСообщения;
			  
		ИначеЕсли ИнформацияОбОшибке.faultcode = "soap:Server" И ИнформацияОбОшибке.faultstring = "SIGNATURE_INVALID_FORMAT" Тогда
			//очищаем тикет в регистре
			ЭСФСервер.СохранитьТикетСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF", Неопределено);
			ТекстСообщения = нСтр("ru = 'Необходимо открытие сессии с подписью'", "ru");
			ВызватьИсключение ТекстСообщения;
		Иначе		
			// прочие неклассифицированные ошибки
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОткрытьСессиюСПодписью'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			"При открытии сессии произошла ошибка." + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение НСтр("ru = 'При входе в ИС ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
	НСтр("ru = 'ОбменЭСФ.ОткрытьСессиюСПодписью'"), 
	УровеньЖурналаРегистрации.Информация,,,
	"Идентификатор сессии: " + ИдентификаторСессии);
	
	ЭСФСервер.СохранитьИдентификаторСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF", ИдентификаторСессии);
	
	Возврат ИдентификаторСессии;
	
	
КонецФункции

// См. ЭСФСервер.ОткрытьСессию()
Функция ОткрытьСессиюСПодписьюПредварительно(Знач ПрофильИСЭСФ, ПараметрыОткрытияСессии) Экспорт
	
	//Подписать тикет для сессии можно только на клиенте 
	//поэтому здесь мы только ищем активную или сохраненный тикет
	
	Если ПараметрыОткрытияСессии.ВерсияЭСФ = Неопределено Тогда
		ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
		ПараметрыОткрытияСессии.ВерсияЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	КонецЕсли;
	
	//Если ДополнительныеПараметры = Неопределено Тогда
	//	ДополнительныеПараметры = Новый Структура;
	//	ДополнительныеПараметры.Вставить("ПроверятьАктивностьСессии", Истина);
	//	ДополнительныеПараметры.Вставить("ПроверятьПараметрыТикета", Ложь);
	//КонецЕсли;
	
	Если ПараметрыОткрытияСессии.ПроверятьАктивностьСессии Тогда
		// Проверим существует ли активная сессия у пользователя
		IDСессии = ЭСФСервер.ПолучитьСохраненныйИдентификаторСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF");
		Если ЗначениеЗаполнено(IDСессии) И СессияАктивна(IDСессии,ПрофильИСЭСФ, ПараметрыОткрытияСессии.ВерсияЭСФ) Тогда
			Возврат IDСессии;
		КонецЕсли;	
	КонецЕсли;
	
	//Теперь для переоткрытия нужен тикет
	ПодписанныйАвторизационныйТикет = "";
	//получаем тикет из регистра
	ПодписанныйАвторизационныйТикет = ЭСФСервер.ПолучитьСохраненныйТикетСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF");	
	
	ТикетПодходит = Истина;
	Если ПараметрыОткрытияСессии.ПроверятьПараметрыТикета Тогда
		ТикетПодходит = Ложь;
		Если ЗначениеЗаполнено(ПодписанныйАвторизационныйТикет) Тогда
			ТикетПодходит = ЭСФСервер.ПроверитьПараметрыТикета(ПодписанныйАвторизационныйТикет);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПодписанныйАвторизационныйТикет) ИЛИ Не ТикетПодходит Тогда
		//Тикет получить не удалось
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменЭСФ.ОткрытьСессию'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		"При открытии сессии произошла ошибка. Невозможно открыть сессию без подписи данных.");
		
		//ВызватьИсключение НСтр("ru = 'При входе в ИС ЭСФ возникла ошибка.'") + Символы.ПС + НСтр("ru = 'Для открытия сессия нужна подпись пользователя.'");
		Возврат Неопределено;
	КонецЕсли;
	
	// Если нет, откроем новую
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	
	Макет = ПолучитьМакет("ЗапросСreateSessionSigned");
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Username]",        ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Password]",        ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[tin]",             ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ИдентификационныйНомер);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[signedAuthTicket]", ПодписанныйАвторизационныйТикет);
	
	Если ЗначениеЗаполнено(ДанныеПрофиляИСЭСФ.ТипПрофиляИСЭСФ) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[businessProfileType]",   ЭСФКлиентСервер.ТипПрофиляИСЭСФ(ДанныеПрофиляИСЭСФ.ТипПрофиляИСЭСФ));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<businessProfileType>[businessProfileType]</businessProfileType>",   ЭСФКлиентСервер.ТипПрофиляИСЭСФ(ДанныеПрофиляИСЭСФ.ТипПрофиляИСЭСФ));
	КонецЕсли; 
	
	ОтветXML = ВыполнитьМетодВебСервиса(ТекстЗапроса, ИмяСервисаSessionService(), , ПараметрыОткрытияСессии.ВерсияЭСФ);
	
	ИнформацияОбОшибке = Неопределено;
	// Как заработает процесс открытия сессии = нужно проверить актуальны ли обработки ошибок
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		ИдентификаторСессии = ОтветXDTO.Body.createSessionResponse.sessionId;
		
	ИначеЕсли ЭтоМодульнаяОшибкаЕстьАктивнаяСессиия(ОтветXML) Тогда
		ОшибкаОткрытияСессии = НСтр(
		"ru = 'При входе в ИС ЭСФ возникла ошибка: для пользователя уже есть активная сессия, открытие новой сессии невозможно.
		|
		|Возможные причины:
		|- С вашим ключом аутентификации в настоящее время в системе ИС ЭСФ уже работает другой пользователь.
		|Чтобы избежать проблемы, используйте личный ключ аутентификации и не передавайте его третьим лицам.		
		|
		|- Вы уже инициировали какое-то длительное действие в системе ИС ЭСФ и оно еще не завершено.
		|Дождитесь завершения ранее начатого процесса, чтобы открыть новую сессию.
		|
		|- Вы инициировали подключение к ИС ЭСФ ранее, но по каким-то причинам (например, в результате технических проблем)
		|сессия не была закрыта автоматически после завершения действия пользователя в ИС ЭСФ.		
		|Попробуйте повторить действие позднее. Неактивные сессии закрываются системой автоматически в течение 5 минут.'");
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОткрытьСессиюСПодписью'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			"При открытии сессии произошла ошибка." + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ВызватьИсключение ОшибкаОткрытияСессии;
		
	Иначе
		Если ИнформацияОбОшибке.faultcode = "ns1:SecurityError" Тогда
						
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОткрытьСессиюСПодписью'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			"При открытии сессии произошла ошибка. Некорректный пароль или логин.");
			
			ТекстСообщения = НСтр("ru = 'При открытии сессии произошла ошибка. Некорректный пароль или логин.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			
			ПризнакАвтоСинхронизации = ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.ИспользоватьДляРегламентногоЗадания;
			Если ПризнакАвтоСинхронизации Тогда
				
				ТекстСообщения = НСтр("ru = 'При входе в ИС ЭСФ возникла ошибка. Некорректный пароль или логин.
				|У профиля %ПрофильИСЭСФ% снят признак ""Использовать для автоматической синхронизации с ИС ЭСФ"".'");
			
				ПрофильИСЭСФДляИзменения = ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка.ПолучитьОбъект();
				ПрофильИСЭСФДляИзменения.ИспользоватьДляРегламентногоЗадания = Ложь;
				Попытка
					ПрофильИСЭСФДляИзменения.Записать();
				Исключение
				КонецПопытки;
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПрофильИСЭСФ%", ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ);

			КонецЕсли;	
				
			ВызватьИсключение ТекстСообщения;
			  
		ИначеЕсли ИнформацияОбОшибке.faultcode = "soap:Server" И ИнформацияОбОшибке.faultstring = "SIGNATURE_INVALID_FORMAT" Тогда
			//очищаем тикет в регистре, так как он устарел
			//возвращаем Неопределено, чтобы перейти к первому варианту
			ЭСФСервер.СохранитьТикетСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF", Неопределено);
			ТекстСообщения = нСтр("ru = 'Необходимо открытие сессии с подписью'", "ru");
			//ВызватьИсключение ТекстСообщения;
			Возврат Неопределено;
		Иначе		
			// прочие неклассифицированные ошибки
			ЭСФСервер.СохранитьТикетСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF", Неопределено);
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОткрытьСессиюСПодписью'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			"При открытии сессии произошла ошибка." + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
	НСтр("ru = 'ОбменЭСФ.ОткрытьСессиюСПодписью'"), 
	УровеньЖурналаРегистрации.Информация,,,
	"Идентификатор сессии: " + ИдентификаторСессии);
	
	ЭСФСервер.СохранитьИдентификаторСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF", ИдентификаторСессии);
	
	Возврат ИдентификаторСессии;
	
	
КонецФункции

// См. ЭСФСервер.ЗакрытьСессию()
Процедура ЗакрытьСессию(Знач ПрофильИСЭСФ, Знач ИдентификаторСессии, ВерсияИСЭСФ = Неопределено, ЭтоРучноеЗакрытие = Ложь, ПарольАутентификации = Неопределено) Экспорт
	
	Если ПустаяСтрока(ИдентификаторСессии) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияИСЭСФ = Неопределено Тогда
		ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
		ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	КонецЕсли;	
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	
	Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
		Макет = ПолучитьМакет("ЗапросCloseSession_Версия1");		
	Иначе
		Макет = ПолучитьМакет("ЗапросCloseSession_Версия2");		
	КонецЕсли;	
	
	Пароль = ?(ЗначениеЗаполнено(ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации), ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации, ПарольАутентификации); 
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Username]",        ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Password]",        Пароль);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[x509Certificate]", ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.СертификатАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[tin]",             ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ИдентификационныйНомер);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[sessionId]",       ИдентификаторСессии);
	
	ОтветXML = ВыполнитьМетодВебСервиса(ТекстЗапроса, ИмяСервисаSessionService(), , ВерсияИСЭСФ);
	ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ЗакрытьСессию'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			"При закрытии сессии произошла ошибка." + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение НСтр("ru = 'При закрытии сессии с ИС ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	Иначе
		
		РезультатЗакрытия = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.closeSessionResponse, "status", Неопределено);
		
		СообщениеПользователя = Новый СообщениеПользователю;
		
		Если РезультатЗакрытия = "CLOSED" Тогда
			
			Если ЭтоРучноеЗакрытие Тогда
				Текст = НСтр("ru = 'Сессия успешно закрыта. Профиль: %ПрофильИСЭСФ%.'");
				Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%",   ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);
			 	СообщениеПользователя.Текст = Текст;
				СообщениеПользователя.Сообщить();
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ЗакрытьСессию'"), 
			УровеньЖурналаРегистрации.Информация,,,
			"Закрыта сессия: " + ИдентификаторСессии);

			ЭСФСервер.СохранитьИдентификаторСессии(ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF", Неопределено);// очистка ID сессии
			
		ИначеЕсли РезультатЗакрытия = "NOT_FOUND" Тогда
			
			Если ЭтоРучноеЗакрытие Тогда
				
				Если ЗначениеЗаполнено(ИдентификаторСессии) Тогда
					ЭСФСервер.СохранитьИдентификаторСессии(ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF", Неопределено);// очистка ID сессии
				КонецЕсли;
				
				Текст = НСтр("ru = 'Сессия по профилю %ПрофильИСЭСФ% не активна, невозможно закрыть.'");
				Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%",   ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);
			 	СообщениеПользователя.Текст = Текст;
				СообщениеПользователя.Сообщить();
			КонецЕсли;
			
		Иначе
			
			Если ЭтоРучноеЗакрытие Тогда
				Текст = НСтр("ru = 'При закрытии сессии по профилю %ПрофильИСЭСФ% произошла ошибка.'");
				Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%",   ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);
			 	СообщениеПользователя.Текст = Текст;
				СообщениеПользователя.Сообщить();
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьСессиюПоДаннымПрофиля(Профиль, Пароль) Экспорт
	
	ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
	ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;

	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(Профиль);
	
	Макет = ПолучитьМакет("ЗапросCloseSessionByCredentialsRequest");		
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Username]",        ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Password]",        ?(ЗначениеЗаполнено(ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации), ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации, Пароль)) ;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[x509Certificate]", ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.СертификатАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[tin]",             ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ИдентификационныйНомер);
	
	ОтветXML = ВыполнитьМетодВебСервиса(ТекстЗапроса, ИмяСервисаSessionService(), , ВерсияИСЭСФ);
	ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
	
	ИнформацияОбОшибке = Неопределено;
	
	Если ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ЗакрытьСессиюПоДаннымПрофиля'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ВызватьИсключение НСтр("ru = 'При закрытии сессии с ИС ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	Иначе
		
		РезультатЗакрытия = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.closeSessionResponse, "status", Неопределено);
		
		СообщениеПользователя = Новый СообщениеПользователю;
		
		Если РезультатЗакрытия = "CLOSED" Тогда
						
			Текст = НСтр("ru = 'Сессия по организации %СтруктурнаяЕдиница% успешно закрыта. Профиль: %ПрофильИСЭСФ%.'");
			Текст = СтрЗаменить(Текст, "%СтруктурнаяЕдиница%", ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка);
			Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%",   ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);
		 	СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();
			
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ЗакрытьСессиюПоДаннымПрофиля'"), 
			УровеньЖурналаРегистрации.Информация,,,
			"Закрыта сессия по профилю: " + ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);

			ЭСФСервер.СохранитьИдентификаторСессии(ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF", Неопределено);// очистка ID сессии
			
		ИначеЕсли РезультатЗакрытия = "NOT_FOUND" Тогда
			
			Текст = НСтр("ru = 'Сессия по организации %СтруктурнаяЕдиница% и профилю %ПрофильИСЭСФ% не активна, невозможно закрыть.'");
			Текст = СтрЗаменить(Текст, "%СтруктурнаяЕдиница%", ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка);
			Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%",   ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);
		 	СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();
			
		Иначе
			
			Текст = НСтр("ru = 'При закрытии сессии по профилю %ПрофильИСЭСФ% произошла ошибка.'");
			Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%",   ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);
		 	СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьСессиюПоДаннымПрофиляСПодписью(Профиль, Пароль, ПодписанныйАвторизационныйТикет) Экспорт
	
	ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
	ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;

	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(Профиль);
	
	Макет = ПолучитьМакет("ЗапросcloseSessionBySignedCredentials");		
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Username]",        ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Password]",        ?(ЗначениеЗаполнено(ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации), ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации, Пароль)) ;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[tin]",             ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ИдентификационныйНомер);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[signedAuthTicket]", ПодписанныйАвторизационныйТикет);

	ОтветXML = ВыполнитьМетодВебСервиса(ТекстЗапроса, ИмяСервисаSessionService(), , ВерсияИСЭСФ);
	ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
	
	ИнформацияОбОшибке = Неопределено;
	
	Если ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ЗакрытьСессиюПоДаннымПрофиляСПодписью'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ВызватьИсключение НСтр("ru = 'При закрытии сессии с ИС ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	Иначе
		
		РезультатЗакрытия = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.closeSessionResponse, "status", Неопределено);
		
		СообщениеПользователя = Новый СообщениеПользователю;
		
		Если РезультатЗакрытия = "CLOSED" Тогда
						
			Текст = НСтр("ru = 'Сессия по организации %СтруктурнаяЕдиница% успешно закрыта. Профиль: %ПрофильИСЭСФ%.'");
			Текст = СтрЗаменить(Текст, "%СтруктурнаяЕдиница%", ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка);
			Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%",   ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);
		 	СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();
			
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ЗакрытьСессиюПоДаннымПрофиляСПодписью'"), 
			УровеньЖурналаРегистрации.Информация,,,
			"Закрыта сессия по профилю: " + ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);

			ЭСФСервер.СохранитьИдентификаторСессии(ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF", Неопределено);// очистка ID сессии
			
		ИначеЕсли РезультатЗакрытия = "NOT_FOUND" Тогда
			
			Текст = НСтр("ru = 'Сессия по организации %СтруктурнаяЕдиница% и профилю %ПрофильИСЭСФ% не активна, невозможно закрыть.'");
			Текст = СтрЗаменить(Текст, "%СтруктурнаяЕдиница%", ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка);
			Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%",   ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);
		 	СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();
			
		Иначе
			
			Текст = НСтр("ru = 'При закрытии сессии по профилю %ПрофильИСЭСФ% произошла ошибка.'");
			Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%",   ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);
		 	СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//	currentSessionStatusResponse type currentSessionStatusResponse
// 	status type sessionStatus - type string with restriction - enum { 'OK', 'CLOSED', 'NOT_FOUND' }
Функция ПолучитьСтатусСессии(Знач ИдентификаторСессии, Знач ПрофильИСЭСФ, Знач ВерсияИСЭСФ = Неопределено) Экспорт
	
	СтатусСессии = Неопределено;	
	
	Если ПустаяСтрока(ИдентификаторСессии) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Макет = ПолучитьМакет("ЗапросCurrentSessionStatus");			
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Username]",        ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Password]",        ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации);	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[sessionId]",       ИдентификаторСессии);
	
	ОтветXML = ВыполнитьМетодВебСервиса(ТекстЗапроса, ИмяСервисаSessionService(), , );
	
	ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ПроверитьСтатусСессии'"), 
			УровеньЖурналаРегистрации.Информация,,,
			"Проверка статуса сессии: " + ИдентификаторСессии);
			
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);		
		СтатусСессии = ОтветXDTO.Body.currentSessionStatusResponse.status;	
		
	Иначе
		// прочие неклассифицированные ошибки
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ПроверитьСтатусСессииВС'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При проверке статуса сессии ИС ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;    	              	

	Возврат СтатусСессии;

КонецФункции

Функция СессияАктивна(Знач ИдентификаторСессии, Знач ПрофильИСЭСФ, Знач ВерсияИСЭСФ = Неопределено) Экспорт
	
	СессияАктивна = Ложь;
	Если ВРЕГ(ПолучитьСтатусСессии(ИдентификаторСессии, ПрофильИСЭСФ, ВерсияИСЭСФ)) = "OK" Тогда
		СессияАктивна = Истина;
	КонецЕсли;	
	
	Возврат СессияАктивна;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ЭСФ

// Возвращает XML строку, которую можно записать в файл, затем импортировать в ИС ЭСФ.
//
// Параметры:
//  МассивЭСФ - Массив - Массив ЭСФ, которые необходимо поместить в XML строку для импорта в ИС ЭСФ.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//
// Возвращаемое значение:
//  Строка - Строка, которую можно записать в файл, затем импортировать в ИС ЭСФ.
//  Если МассивЭСФ пустой или если есть ЭСФ, которые заполнены некорректно, то возвращается пустая строка.
//
Функция СоздатьXMLДляИмпортаВИСЭСФ(Знач МассивЭСФ) Экспорт
	
	Если МассивЭСФ.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ВсеДокументыЗаполненыКорректно = Истина;
	
	// проверим, что возвращает процедура ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник()
	// тк данные об уполномоченном лице заполняются в XML файле
	Если НЕ ЗначениеЗаполнено(ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник()) Тогда
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Обнаружены ошибки при проверке. Не удалось автоматически заполнить поле ""Уполномоченный сотрудник""'"));
		ВсеДокументыЗаполненыКорректно = Ложь;
	КонецЕсли;
	
	Если НЕ ВсеДокументыЗаполненыКорректно Тогда
		Возврат "";	
	КонецЕсли;
	
	Для Каждого СсылкаЭСФ Из МассивЭСФ Цикл
		
		РезультатПроверки = ПроверитьЭСФ(СсылкаЭСФ);		
		СообщитьОбнаруженыОшибки(СсылкаЭСФ, РезультатПроверки);
		
		Если РезультатПроверки.ЗапрещающиеОшибки.Количество() <> 0 Тогда
			ВсеДокументыЗаполненыКорректно = Ложь;	
		КонецЕсли;
		
	КонецЦикла;	
	
	Если НЕ ВсеДокументыЗаполненыКорректно Тогда
		Возврат "";	
	КонецЕсли;
	
	//ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
	//ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	
	//ХМЛ будем выгружать всегда по актуальной версии ИС ЭСФ
	ВерсияИСЭСФ = АктуальнаяВерсияИСЭСФ();
	
	
	// При выгрузке тип подписи принудительно устанавливается в значение "УполномоченноеЛицо",
	// т.к. при загрузке в ИС ЭСФ узел signatureType должен обязательно присутствовать и быть заполненным.
	// При отправке ЭСФ средствами ИС ЭСФ устанавливается корректное значение.
	ТипПодписиЭСФ = Перечисления.ТипыПодписиЭСФ.УполномоченноеЛицо;
	
	КоллекцияInvoiceXML = Неопределено;
	СоздатьИсходящиеInvoice(МассивЭСФ, Ложь, ТипПодписиЭСФ, КоллекцияInvoiceXML, Неопределено, ,ВерсияИСЭСФ);
	
	Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
		XML = "<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?><esf:invoiceContainer xmlns:a=""namespace.abstractInvoice"" xmlns:esf=""namespace.esf"" xmlns:v1=""namespace.v1""><invoiceSet>[invoiceSet]</invoiceSet></esf:invoiceContainer>";	
	Иначе
		XML = "<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?><esf:invoiceContainer xmlns:a=""abstractInvoice.esf"" xmlns:esf=""esf"" xmlns:v1=""v1.esf"" xmlns:v2=""v2.esf""><invoiceSet>[invoiceSet]</invoiceSet></esf:invoiceContainer>";		
	КонецЕсли;	
	
	invoiceSetXML = "";
	Для Каждого ЭлементКоллекции Из КоллекцияInvoiceXML Цикл
		InvoiceXML = ЭлементКоллекции.Значение;			
		invoiceSetXML = invoiceSetXML + InvoiceXML; 		
	КонецЦикла;	
	
	Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
		// Добавить префикс к имени узлов invoice, т.к. это необходимо для импорта в ИС ЭСФ.
		invoiceSetXML = СтрЗаменить(invoiceSetXML, "<invoice>", "<v1:invoice>");
		invoiceSetXML = СтрЗаменить(invoiceSetXML, "</invoice>", "</v1:invoice>");	
	КонецЕсли;
		
	XML = СтрЗаменить(XML, "[invoiceSet]", invoiceSetXML);
	
	Возврат XML;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОТПРАВКА ЭСФ

// См. ЭСФСервер.СоздатьИсходящиеInvoice()
Процедура СоздатьИсходящиеInvoice(
	Знач МассивЭСФ, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписиЭСФ,
	КоллекцияInvoiceXML, 
	КоллекцияSignedContentXML,
	УполномоченныйСотрудник = Неопределено,
	ВерсияИСЭСФ) Экспорт
	
	Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
		СоздатьИсходящиеInvoice_ВерсияАПИ1(МассивЭСФ, 
				УстанавливатьПодпись, 
				ТипПодписиЭСФ, 
				КоллекцияInvoiceXML, 
				КоллекцияSignedContentXML,
				УполномоченныйСотрудник,
				ВерсияИСЭСФ);
				
	Иначе
		СоздатьИсходящиеInvoice_ВерсияАПИ2(МассивЭСФ, 
				УстанавливатьПодпись, 
				ТипПодписиЭСФ, 
				КоллекцияInvoiceXML, 
				КоллекцияSignedContentXML,
				УполномоченныйСотрудник,
				ВерсияИСЭСФ);
	КонецЕсли;			
	
КонецПроцедуры

// См. ЭСФСервер.СоздатьИсходящиеInvoice()
Процедура СоздатьИсходящиеInvoice_ВерсияАПИ1(
	Знач МассивЭСФ, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписиЭСФ, 
	КоллекцияInvoiceXML, 
	КоллекцияSignedContentXML,
	УполномоченныйСотрудник = Неопределено,
	ВерсияИСЭСФ) Экспорт
	
	КоллекцияInvoiceXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Фабрика = ФабрикаЭСФ_XML_API_ЭЦП_Версия1();
	
	Для Каждого СсылкаЭСФ Из МассивЭСФ Цикл		
		
		// Чтобы при отправке ЭСФ не выполнять запись дважды:
		// При создании ЭСФ заполняются некоторые реквизиты ЭСФ, но ЭСФ не записывается.
		// При отправке ЭСФ данные реквизиты заполняются теми же значениями, но ЭСФ уже записывается.
		// Подробнее см. заполнение и запись ЭСФ в методе ОтправитьИсходящиеInvoice().
		ОбъектЭСФ = СсылкаЭСФ.ПолучитьОбъект();
		// для фоновых заданий передаваем значение уполномоченного сотрудника
		Если ЗначениеЗаполнено(УполномоченныйСотрудник) Тогда
			ОбъектЭСФ.УполномоченныйСотрудник = СокрЛП(УполномоченныйСотрудник);
		Иначе
			ОбъектЭСФ.УполномоченныйСотрудник = ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник();
		КонецЕсли;
		ОбъектЭСФ.ТипПодписи = ТипПодписиЭСФ;
		
		InvoiceXDTO = НовыйInvoice(ОбъектЭСФ, Фабрика, "InvoiceV1", ВерсияИСЭСФ);
		
		Если УстанавливатьПодпись Тогда
			InvoiceXDTO.signature = "[%ЭЦП%]";
		Иначе
			InvoiceXDTO.signature = ""; // ЭСФ без узла signature не импортируется в ИС ЭСФ. 
		КонецЕсли;
		
		InvoiceXML = ЭСФСервер.КаноническаяСтрокаXMLИзОбъектаXDTO(InvoiceXDTO, "Invoice", Фабрика);
		
		// Доработать канонический XML.
		// платформа 8.3.9.1818 в клиент-сервере не удаляет теги xmlns, в файловой базе теги удаляются
		InvoiceXML = СтрЗаменить(InvoiceXML, " xmlns=""""", "");
		InvoiceXML = СтрЗаменить(InvoiceXML, " =""""", "");
		InvoiceXML = СтрЗаменить(InvoiceXML, "xmlns", "");
		InvoiceXML = СтрЗаменить(InvoiceXML, "<Invoice =""namespace.v1"">", "<invoice>");	
		InvoiceXML = СтрЗаменить(InvoiceXML, "</Invoice>", "</invoice>");
		InvoiceXML = СтрЗаменить(InvoiceXML, "<default:", "<");
		InvoiceXML = СтрЗаменить(InvoiceXML, "</default:", "</");
		InvoiceXML = СтрЗаменить(InvoiceXML, " :default=""namespace.abstractInvoice"">", ">");
		
		КоллекцияInvoiceXML.Вставить(СсылкаЭСФ, InvoiceXML);
		
		Если УстанавливатьПодпись Тогда
			InvoiceHashXML = InvoiceXML;
			InvoiceHashXML = СтрЗаменить(InvoiceHashXML, "<signature>[%ЭЦП%]</signature>", ""); 
			КоллекцияSignedContentXML.Вставить(СсылкаЭСФ, InvoiceHashXML);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// См. ЭСФСервер.СоздатьИсходящиеInvoice()
Процедура СоздатьИсходящиеInvoice_ВерсияАПИ2(
	Знач МассивЭСФ, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписиЭСФ, 
	КоллекцияInvoiceXML, 
	КоллекцияSignedContentXML,
	УполномоченныйСотрудник = Неопределено,
	ВерсияИСЭСФ) Экспорт
	
	КоллекцияInvoiceXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Фабрика = ФабрикаЭСФ_XML_API_ЭЦП_Версия2();
	
	Для Каждого СсылкаЭСФ Из МассивЭСФ Цикл		
		
		// Чтобы при отправке ЭСФ не выполнять запись дважды:
		// При создании ЭСФ заполняются некоторые реквизиты ЭСФ, но ЭСФ не записывается.
		// При отправке ЭСФ данные реквизиты заполняются теми же значениями, но ЭСФ уже записывается.
		// Подробнее см. заполнение и запись ЭСФ в методе ОтправитьИсходящиеInvoice().
		ОбъектЭСФ = СсылкаЭСФ.ПолучитьОбъект();
		// для фоновых заданий передаваем значение уполномоченного сотрудника
		Если ЗначениеЗаполнено(УполномоченныйСотрудник) Тогда
			ОбъектЭСФ.УполномоченныйСотрудник = СокрЛП(УполномоченныйСотрудник);
		Иначе
			ОбъектЭСФ.УполномоченныйСотрудник = ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник();
		КонецЕсли;
		ОбъектЭСФ.ТипПодписи = ТипПодписиЭСФ;
		
		InvoiceXDTO = НовыйInvoice(ОбъектЭСФ, Фабрика, "InvoiceV2", ВерсияИСЭСФ);
				
		InvoiceXML = ЭСФСервер.СтрокаXMLИзОбъектаXDTO(InvoiceXDTO, "invoice", Фабрика);
		
		//=========
		InvoiceXML = СтрЗаменить(InvoiceXML, "<invoice xmlns=""v2.esf"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">", "<invoice>");
		InvoiceXML = СтрЗаменить(InvoiceXML, " xmlns=""abstractInvoice.esf""", "");		
		
		// Префикс версии		
		InvoiceXML = СтрЗаменить(InvoiceXML, "<invoice>", "<v2:invoice xmlns:a=""abstractInvoice.esf"" xmlns:v2=""v2.esf"">	");		
		InvoiceXML = СтрЗаменить(InvoiceXML, "</invoice>", "</v2:invoice>");		
		
		//Для отправки через API структура обернута в <invoiceBody> подписывается без верхних тегов
		Если УстанавливатьПодпись Тогда
			InvoiceHashXML = InvoiceXML;
			КоллекцияSignedContentXML.Вставить(СсылкаЭСФ, InvoiceHashXML);
			
			//Для отправки через API добавляем обертку <invoiceBody>
			InvoiceXML = "<invoiceBody><![CDATA[" + InvoiceXML + "]]></invoiceBody>";
			// Добавляем заготовку для подписи
			ТипПодписи = ЭСФКлиентСервер.ТипПодписиИСЭСФ(ТипПодписиЭСФ);
			InvoiceXML = "<invoiceUploadInfo>" + InvoiceXML + "<version>InvoiceV2</version><signature>[%ЭЦП%]</signature><signatureType>"+ТипПодписи+"</signatureType></invoiceUploadInfo>";
			
		КонецЕсли;

		КоллекцияInvoiceXML.Вставить(СсылкаЭСФ, InvoiceXML);
		
		
	КонецЦикла;
	
КонецПроцедуры

// См. ЭСФСервер.ОтправитьИсходящиеInvoice()
Функция ОтправитьИсходящиеInvoice(ВерсияИСЭСФ, Знач КоллекцияInvoiceXML, Знач КоллекцияПодписей, Знач ПрофильИСЭСФ, Знач ОткрытыйКлючЭЦП, ИдентификаторСессии = Неопределено, УполномоченныйСотрудник = Неопределено, НеПерезаполнятьОчередьОтправки = Ложь) Экспорт
	
	ПредельныйРазмерПакетаИсходящихInvoice = 250;
	ОбщийРазмерКолекцииНаОтправку = КоллекцияInvoiceXML.Количество();
	КоличествоПакетов = ОбщийРазмерКолекцииНаОтправку/ПредельныйРазмерПакетаИсходящихInvoice;
	Если КоличествоПакетов <> Цел(КоличествоПакетов) Тогда
		// количество пакетов дробное.
		КоличествоПакетов = Цел(КоличествоПакетов) + 1;
	КонецЕсли;
	
	ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменЭСФ.ОтправитьИсходящиеInvoice", "Информация", , , "К отправке: " + СокрЛП(ОбщийРазмерКолекцииНаОтправку));

	РезультатОтправки = ЭлектронноеВзаимодействиеССервисами.ОтправитьИсходящиеInvoice(КоллекцияInvoiceXML,
	ПредельныйРазмерПакетаИсходящихInvoice, ОбщийРазмерКолекцииНаОтправку, КоличествоПакетов, ВерсияИСЭСФ, КоллекцияПодписей,
	ПрофильИСЭСФ, ОткрытыйКлючЭЦП, ИдентификаторСессии, УполномоченныйСотрудник, НеПерезаполнятьОчередьОтправки);
	
	Если ТипЗнч(РезультатОтправки) = Тип("Соответствие") И РезультатОтправки.Количество() > 0 Тогда
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменЭСФ.ОтправитьИсходящиеInvoice", "Информация", , , "Отправка завершена");
		
		СообщениеПользователя = Новый СообщениеПользователю;

		СообщениеПользователя.Текст = НСтр("ru = 'Отправка электронных счетов-фактур завершена.'");
		СообщениеПользователя.Сообщить();

		// Обновим статусы отправленных ЭСФ, после завершения отправки всех пакетов
		ОбновитьДокументыЭСФПослеОтправки(РезультатОтправки, ПрофильИСЭСФ, , ВерсияИСЭСФ);
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменЭСФ.ОтправитьИсходящиеInvoice", "Информация", , , "Обновлены статусы отправленных документов");
		
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

Процедура ДополнитьРезультатОтправкиДаннымиПакета(РезультатОтправки, РезультатОтправкиПакета)
	Для Каждого ЭлементКоллекции Из РезультатОтправкиПакета Цикл
		РезультатОтправки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
	КонецЦикла;		
КонецПроцедуры

Процедура ОбновитьДокументыЭСФПослеОтправки(Знач РезультатОтправки, Знач ПрофильИСЭСФ, Знач ИдентификаторСессии = Неопределено, Знач ВерсияИСЭСФ)
	Если ИдентификаторСессии = Неопределено Тогда
		ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
		ЗакрытьСессию = Истина;	
	Иначе
		ЗакрытьСессию = Ложь;
	КонецЕсли;
	
	// Создать и заполнить массив идентификаторов отправленных ЭСФ. 
	МассивИдентификаторовЭСФ = Новый Массив;
	
	Для Каждого ЭлементРезультата Из РезультатОтправки Цикл
		
		Если ТипЗнч(ЭлементРезультата.Значение) = Тип("Структура") Тогда
			
			Если ЭлементРезультата.Значение.Свойство("Идентификатор") Тогда
				
				Идентификатор = ЭлементРезультата.Значение.Идентификатор;
				
				Если ЗначениеЗаполнено(Идентификатор) Тогда
					МассивИдентификаторовЭСФ.Добавить(Идентификатор);	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// При отправке исправленных ЭСФ, исправляемые ЭСФ, а также их дополнительные ЭСФ, 
	// автоматически становятся аннулированными в ИС ЭСФ.
	//
	// Для того, чтобы информация об аннулировании отобразилась в 1С, 
	// необходимо обновить статусы исправляемых ЭСФ и их дополнительных ЭСФ.
	Если ТипЗнч(ПрофильИСЭСФ.СтруктурнаяЕдиница) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктурнаяЕдиница = ПрофильИСЭСФ.СтруктурнаяЕдиница.Ссылка;	
	Иначе
		СтруктурнаяЕдиница = ПрофильИСЭСФ.СтруктурнаяЕдиница;	
	КонецЕсли;
	ДополнитьМассивИдентификаторамиАннулируемыхЭСФ(СтруктурнаяЕдиница, МассивИдентификаторовЭСФ);
	
	ПредельныйРазмерПакетаЭСФ = 1000;
	КоличествоЭСФ = МассивИдентификаторовЭСФ.Количество();
	СчетчикЭСФ = 0;
	МассивИдентификаторовЭСФДляОтправки = Новый Массив;
	
	Если КоличествоЭСФ > ПредельныйРазмерПакетаЭСФ Тогда
		
		Для Каждого СтрокаМассива Из МассивИдентификаторовЭСФ Цикл
			
			СчетчикЭСФ = СчетчикЭСФ + 1;
			
			МассивИдентификаторовЭСФДляОтправки.Добавить(СтрокаМассива);
			
			// Пакет обновляем, в случае если он кратен предельному размеру, либо равен последнему элементу пакета
			Если НЕ (СчетчикЭСФ%ПредельныйРазмерПакетаЭСФ = 0 ИЛИ СчетчикЭСФ = КоличествоЭСФ) Тогда
				Продолжить;
			КонецЕсли;
			
			// Выполнить обновление статусов отправленных ЭСФ.
			ОбновитьСтатусыЭСФПоИдентификаторам(МассивИдентификаторовЭСФДляОтправки, Перечисления.НаправленияЭСФ.Исходящий, ПрофильИСЭСФ, ИдентификаторСессии);
			
			МассивИдентификаторовЭСФДляОтправки.Очистить();
			
		КонецЦикла;
		
	Иначе

		// Выполнить обновление статусов отправленных ЭСФ.
		ОбновитьСтатусыЭСФПоИдентификаторам(МассивИдентификаторовЭСФ, Перечисления.НаправленияЭСФ.Исходящий, ПрофильИСЭСФ, ИдентификаторСессии);
		
	КонецЕсли;
	
	Если ЗакрытьСессию Тогда
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьInvoice(Знач ЭСФ, Знач Фабрика, Invoice, ВерсияЭСФ)
	
	Если ВерсияЭСФ = "InvoiceV1" Тогда
		ЗаполнитьInvoice_Версия1(ЭСФ, Фабрика, Invoice);
	Иначе
		ЗаполнитьInvoice_Версия2(ЭСФ, Фабрика, Invoice);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьInvoice_Версия1(Знач ЭСФ, Знач Фабрика, Invoice)
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел А. Общий раздел.
	
	Если НЕ ПустаяСтрока(ЭСФ.ДополнительныеСведения) Тогда
		invoice.addInf = ЭСФ.ДополнительныеСведения;
	КонецЕсли;
	
	invoice.date = Формат(ЭСФ.Дата, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
	invoice.num = ЭСФ.Номер;
	invoice.invoiceType = ЭСФКлиентСервер.ВидИСЭСФ(ЭСФ.Вид);
 	invoice.operatorFullname = СокрЛП(ЭСФ.УполномоченныйСотрудник);
	//Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
	invoice.signatureType = ЭСФКлиентСервер.ТипПодписиИСЭСФ(ЭСФ.ТипПодписи);
	//КонецЕсли;	
 	invoice.turnoverDate = Формат(ЭСФ.ДатаОборота, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
	
	// Заполнить реквизиты связанного ЭСФ.
	Если ЗначениеЗаполнено(ЭСФ.СвязанныйЭСФДата) 
		ИЛИ ЗначениеЗаполнено(ЭСФ.СвязанныйЭСФНомер)
		ИЛИ ЗначениеЗаполнено(ЭСФ.СвязанныйЭСФРегистрационныйНомер) Тогда
		
		relatedInvoice = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "relatedInvoice", Фабрика);
		relatedInvoice.date = Формат(ЭСФ.СвязанныйЭСФДата, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
		relatedInvoice.num = ЭСФ.СвязанныйЭСФНомер;
		relatedInvoice.registrationNumber = СокрЛП(ЭСФ.СвязанныйЭСФРегистрационныйНомер);
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел B. Реквизиты поставщика.
	
	sellers = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "sellers", Фабрика);
	Для Каждого ПоставщикиСтрока Из ЭСФ.Поставщики Цикл
		
		seller = ЭСФСервер.НовыйЭлементСпискаXDTO(sellers.seller, Фабрика);
		
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Комитент,                       "COMMITTENT",                 seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Комиссионер,                    "BROKER",                     seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Экспедитор,                     "FORWARDER",                  seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Лизингодатель,                  "LESSOR",                     seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.УчастникСовместнойДеятельности, "JOINT_ACTIVITY_PARTICIPANT", seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.ЭкспортерИлиУчастникСРП,        "EXPORTER",                   seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Адвокат,						  "LAWYER", 					seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.СудебныйИсполнитель,			  "BAILIFF", 					seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Медиатор,						  "MEDIATOR",					seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Нотариус,					      "NOTARY",						seller);
		
		seller.address = СокрЛП(ПоставщикиСтрока.Адрес);
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.НаименованиеБанка) Тогда
			seller.bank = СокрЛП(ПоставщикиСтрока.НаименованиеБанка);	
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.БИК) Тогда
			seller.bik = ПоставщикиСтрока.БИК;	
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.НомерСвидетельстваПоНДС)
		   И НЕ ПустаяСтрока(ПоставщикиСтрока.СерияСвидетельстваПоНДС) Тогда
			seller.certificateNum = ПоставщикиСтрока.НомерСвидетельстваПоНДС;
			seller.certificateSeries = ПоставщикиСтрока.СерияСвидетельстваПоНДС;
		КонецЕсли;
				
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.ИИК) Тогда
			seller.iik = ПоставщикиСтрока.ИИК;	
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.КБе) Тогда
			seller.kbe = ПоставщикиСтрока.КБе;	
		КонецЕсли;
		
		// В дополнительном и основном ЭСФ могут различаться значения данного реквизита,
		// поэтому дополнительный может быть не принят в ИС ЭСФ.
		// Сейчас пользователю потребуется вручную установить данный реквизит в дополнительном,
		// в значение, которое установлено в основном.
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.ДокументПодтверждающийПоставкуНомер) Тогда
			seller.deliveryDocNum = ПоставщикиСтрока.ДокументПодтверждающийПоставкуНомер;	
		КонецЕсли;
		
		// В дополнительном и основном ЭСФ могут различаться значения данного реквизита,
		// поэтому дополнительный может быть не принят в ИС ЭСФ.
		// Сейчас пользователю потребуется вручную установить данный реквизит в дополнительном,
		// в значение, которое установлено в основном.		
		Если ЗначениеЗаполнено(ПоставщикиСтрока.ДокументПодтверждающийПоставкуДата) Тогда
			seller.deliveryDocDate = Формат(ПоставщикиСтрока.ДокументПодтверждающийПоставкуДата, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		seller.name = СокрЛП(ПоставщикиСтрока.ПоставщикНаименование);
		seller.tin 	= ПоставщикиСтрока.ПоставщикИдентификатор;
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.ДополнительныеСведения) Тогда
			seller.trailer = ПоставщикиСтрока.ДополнительныеСведения;
		КонецЕсли;
		
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел C. Реквизиты получателя.
	
	customers = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "customers", Фабрика);
	Для Каждого ПолучателиСтрока Из ЭСФ.Получатели Цикл
		
		customer = ЭСФСервер.НовыйЭлементСпискаXDTO(customers.customer, Фабрика);
		
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Комитент,                       "COMMITTENT",                 customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Комиссионер,                    "BROKER",                     customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Лизингодатель,                  "LESSEE",                     customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.УчастникСовместнойДеятельности, "JOINT_ACTIVITY_PARTICIPANT", customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.ГосударственноеУчреждение,      "PUBLIC_OFFICE",              customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Нерезидент,                     "NONRESIDENT",                customer);
		
		customer.address = ПолучателиСтрока.Адрес;
		
		Если НЕ ПустаяСтрока(ПолучателиСтрока.НомерСвидетельстваПоНДС)
		   И НЕ ПустаяСтрока(ПолучателиСтрока.СерияСвидетельстваПоНДС) Тогда
			customer.certificateNum = ПолучателиСтрока.НомерСвидетельстваПоНДС;
			customer.certificateSeries = ПолучателиСтрока.СерияСвидетельстваПоНДС;
		КонецЕсли;
		
		customer.name = СокрЛП(ПолучателиСтрока.ПолучательНаименование);
		customer.tin = ПолучателиСтрока.ПолучательИдентификатор;
		
		// Нерезидент может не иметь атрибута tin, во всех остальных случаях атрибут должен быть.
		Если ПустаяСтрока(ПолучателиСтрока.ПолучательИдентификатор) И ПолучателиСтрока.Нерезидент Тогда
			customer.Сбросить("tin");
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПолучателиСтрока.ДополнительныеСведения) Тогда
			customer.trailer = ПолучателиСтрока.ДополнительныеСведения;
		КонецЕсли;
		
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел D. Реквизиты грузоотправителя и грузополучателя.
	
	// Если все поля грузоотправителя пустые, то не нужно добавлять элемент consignor.
	Если НЕ ПустаяСтрока(ЭСФ.АдресОтправки)
	 ИЛИ НЕ ПустаяСтрока(ЭСФ.ГрузоотправительНаименование)
	 ИЛИ НЕ ПустаяСтрока(ЭСФ.ГрузоотправительИдентификатор) Тогда
	 
		consignor = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "consignor", Фабрика);
		
		// Узлы address, name, tin, добавляются, только если они заполнены.
		
		Если НЕ ПустаяСтрока(ЭСФ.АдресОтправки) Тогда
			consignor.address = СокрЛП(ЭСФ.АдресОтправки);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭСФ.ГрузоотправительНаименование) Тогда
			consignor.name = СокрЛП(ЭСФ.ГрузоотправительНаименование);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭСФ.ГрузоотправительИдентификатор) Тогда
			consignor.tin = СокрЛП(ЭСФ.ГрузоотправительИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	// Если все поля грузополучателя пустые, то не нужно добавлять элемент consignor.
	Если НЕ ПустаяСтрока(ЭСФ.АдресДоставки)
	 ИЛИ НЕ ПустаяСтрока(ЭСФ.ГрузополучательНаименование)
	 ИЛИ НЕ ПустаяСтрока(ЭСФ.ГрузополучательИдентификатор) Тогда
	
		consignee = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "consignee", Фабрика);
		
		// Узлы address, name, tin, добавляются, только если они заполнены.
		
		Если НЕ ПустаяСтрока(ЭСФ.АдресДоставки) Тогда
			consignee.address = СокрЛП(ЭСФ.АдресДоставки);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭСФ.ГрузополучательНаименование) Тогда
			consignee.name = СокрЛП(ЭСФ.ГрузополучательНаименование);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭСФ.ГрузополучательИдентификатор) Тогда
			consignee.tin = СокрЛП(ЭСФ.ГрузополучательИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел E. Условия поставки
	                                       
	deliveryTerm = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "deliveryTerm", Фабрика);
	
	Если ЗначениеЗаполнено(ЭСФ.ДоговорПоставкиДата) И ЗначениеЗаполнено(ЭСФ.ДоговорПоставкиНомер) Тогда
		deliveryTerm.contractDate = Формат(ЭСФ.ДоговорПоставкиДата, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
		deliveryTerm.contractNum  = ЭСФ.ДоговорПоставкиНомер;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭСФ.ПунктНазначения) Тогда
		deliveryTerm.destination = ЭСФ.ПунктНазначения;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭСФ.ДоговорПоставкиСпособОтправления) Тогда
		deliveryTerm.exerciseWay = ЭСФ.ДоговорПоставкиСпособОтправления;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭСФ.ДоговорПоставкиУсловияОплаты) Тогда
		deliveryTerm.term = ЭСФ.ДоговорПоставкиУсловияОплаты;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ДоверенностьНаПоставкуНомер) И ЗначениеЗаполнено(ЭСФ.ДоверенностьНаПоставкуДата) Тогда
		deliveryTerm.warrant = ЭСФ.ДоверенностьНаПоставкуНомер;
		deliveryTerm.warrantDate = Формат(ЭСФ.ДоверенностьНаПоставкуДата, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
	КонецЕсли;
	
	Если НЕ ЭСФСервер.ЕстьУстановленныеСвойства(deliveryTerm) Тогда
		invoice.Сбросить("deliveryTerm");	
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел F. Реквизиты государственного учреждения.
	
	publicOffice = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "publicOffice", Фабрика);
	
	Если НЕ ПустаяСтрока(ЭСФ.ГосучреждениеБИК) Тогда
		publicOffice.bik = ЭСФ.ГосучреждениеБИК;	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭСФ.ГосучреждениеИИК) Тогда
		publicOffice.iik = ЭСФ.ГосучреждениеИИК;	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭСФ.ГосучреждениеНазначениеПлатежа) Тогда
		publicOffice.payPurpose = ЭСФ.ГосучреждениеНазначениеПлатежа;	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭСФ.ГосучреждениеКодТоваров) Тогда
		publicOffice.productCode = ЭСФ.ГосучреждениеКодТоваров;	
	КонецЕсли;
	
	// Узел <bik> не учитывается, т.к. он всегда заполнен значением "KKMFKZ2A",
	// также узел <bik> невозможно установить в значение Неопределено.
	Если НЕ ЗначениеЗаполнено(publicOffice.iik) 
		И НЕ ЗначениеЗаполнено(publicOffice.payPurpose)
		И НЕ ЗначениеЗаполнено(publicOffice.productCode) Тогда
		
		invoice.Сбросить("publicOffice");
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел G. Данные по товарам (работам, услугам).
	
	productSet = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "productSet", Фабрика);
	
	//Если Найти(ВерсияИСЭСФ, "5.0.0") <> 0 Тогда
	//	products = ЭСФСервер.НовоеСвойствоОбъектаXDTO(productSet, "products", Фабрика);
	//Иначе
	//	products = Неопределено;
	//КонецЕсли;
	
	Для Каждого ТоварыСтрока Из ЭСФ.Товары Цикл
		
		//Если Найти(ВерсияИСЭСФ, "5.0.0") <> 0 Тогда
		//	product = ЭСФСервер.НовыйЭлементСпискаXDTO(products.product, Фабрика);
		//Иначе
		product = ЭСФСервер.НовыйЭлементСпискаXDTO(productSet.product, Фабрика);
		//КонецЕсли;
		
		product.description = СокрЛП(ТоварыСтрока.ТоварНаименование);
		
		Если НЕ ПустаяСтрока(ТоварыСтрока.КодТНВЭД) Тогда
			product.unitCode = СокрЛП(ТоварыСтрока.КодТНВЭД);
		КонецЕсли;
				
		Если НЕ ПустаяСтрока(ТоварыСтрока.ЕдиницаИзмеренияНаименование) Тогда
			product.unitNomenclature = СокрЛП(ТоварыСтрока.ЕдиницаИзмеренияНаименование);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТоварыСтрока.Количество) Тогда
			product.quantity = ТоварыСтрока.Количество;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТоварыСтрока.Цена) Тогда
			product.unitPrice = ТоварыСтрока.Цена;
		КонецЕсли;
		
		product.priceWithoutTax  = ТоварыСтрока.СуммаБезНалогов;
		
		Если ЗначениеЗаполнено(ТоварыСтрока.СтавкаАкцизаЧисло) ИЛИ ЗначениеЗаполнено(ТоварыСтрока.СтавкаАкциза) Тогда
			product.exciseRate = ТоварыСтрока.СтавкаАкцизаЧисло;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТоварыСтрока.СуммаАкциза) ИЛИ ЗначениеЗаполнено(ТоварыСтрока.СтавкаАкциза) Тогда
			product.exciseAmount = ТоварыСтрока.СуммаАкциза;
		КонецЕсли;
		
		product.turnoverSize = ТоварыСтрока.ОборотПоРеализации;
		
		Если ЭСФ.Поставщики.Количество() <> 0
		И НЕ ПустаяСтрока(ЭСФ.Поставщики[0].НомерСвидетельстваПоНДС)
		И НЕ ПустаяСтрока(ЭСФ.Поставщики[0].СерияСвидетельстваПоНДС)
		И НЕ ТоварыСтрока.БезНДС Тогда
		
			product.ndsRate = ТоварыСтрока.СтавкаНДСЧисло;			
			
		КонецЕсли;
		
		product.ndsAmount = ТоварыСтрока.СуммаНДС;
		
		product.priceWithTax = ТоварыСтрока.Сумма;
		
		Если НЕ ПустаяСтрока(ТоварыСтрока.НомерЗаявленияВРамкахТС) Тогда
			product.applicationNumberInCustomsUnion = СокрЛП(ТоварыСтрока.НомерЗаявленияВРамкахТС);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТоварыСтрока.ДополнительныеДанные) Тогда
			product.additional = ТоварыСтрока.ДополнительныеДанные;
		КонецЕсли;
		
	КонецЦикла;
	
	productSet.currencyCode = ЭСФ.ВалютаКод;
	
	Если ЭСФ.ВалютаКод <> "KZT" Тогда
		productSet.currencyRate = ЭСФ.КурсВалюты;
	КонецЕсли;
	
	productSet.totalPriceWithoutTax = ЭСФ.Товары.Итог("СуммаБезНалогов");
	productSet.totalExciseAmount    = ЭСФ.Товары.Итог("СуммаАкциза");
	productSet.totalTurnoverSize    = ЭСФ.Товары.Итог("ОборотПоРеализации");
	productSet.totalNdsAmount       = ЭСФ.Товары.Итог("СуммаНДС");
	productSet.totalPriceWithTax    = ЭСФ.Товары.Итог("Сумма");
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел H. Сведения по участникам договора о совместной деятельности.
	
	Если ЭСФ.ТоварыПоПолучателям.Количество() <> 0 Тогда
		
		customerParticipants = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "customerParticipants", Фабрика);
		
		СгруппированныеТоварыПоПолучателям = СгруппированнаяТаблицаТоваровПоУчастникамСД(ЭСФ.ТоварыПоПолучателям);
		
		Для Каждого СтрокаТоварыПоПолучателю Из СгруппированныеТоварыПоПолучателям.Строки Цикл
			
			participant = ЭСФСервер.НовыйЭлементСпискаXDTO(customerParticipants.participant, Фабрика);
			participant.tin = СтрокаТоварыПоПолучателю.Идентификатор;
			
			productShares = ЭСФСервер.НовоеСвойствоОбъектаXDTO(participant, "productShares", Фабрика);
			
			Для Каждого СтрокаТовары Из СтрокаТоварыПоПолучателю.Строки Цикл
				
				share = ЭСФСервер.НовыйЭлементСпискаXDTO(productShares.share, Фабрика);
				
				share.productNumber = СтрокаТовары.НомерТовара;
				share.quantity = СтрокаТовары.Количество;
				share.priceWithoutTax = СтрокаТовары.СуммаБезНалогов;
				share.exciseAmount = СтрокаТовары.СуммаАкциза;
				share.turnoverSize = СтрокаТовары.ОборотПоРеализации;
				share.ndsAmount = СтрокаТовары.СуммаНДС;
				share.priceWithTax = СтрокаТовары.Сумма;
								
				Если ЗначениеЗаполнено(СтрокаТовары.ДополнительныеДанные) Тогда
					share.additional = СтрокаТовары.ДополнительныеДанные;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьInvoice_Версия2(Знач ЭСФ, Знач Фабрика, Invoice) // Отправка
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел А. Общий раздел.
	
	#Область ОбщийРаздел
	Если НЕ ПустаяСтрока(ЭСФ.ДополнительныеСведения) Тогда
		invoice.addInf = ЭСФ.ДополнительныеСведения;
	КонецЕсли;
	
	invoice.date = Формат(ЭСФ.Дата, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
	invoice.num = ЭСФ.Номер;
	invoice.invoiceType = ЭСФКлиентСервер.ВидИСЭСФ(ЭСФ.Вид);
	invoice.operatorFullname = СокрЛП(ЭСФ.УполномоченныйСотрудник);
	invoice.turnoverDate = Формат(ЭСФ.ДатаОборота, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
	Если ЗначениеЗаполнено(ЭСФ.ДатаВыпискиНаБумажномНосителе) Тогда
		invoice.datePaper = Формат(ЭСФ.ДатаВыпискиНаБумажномНосителе, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ПричинаВыпискиНаБумажномНосителе) Тогда
		ТипСвойствоPaperReason = invoice.Тип().Свойства.Получить("reasonPaper").Тип;
		
		Если ЭСФ.ПричинаВыпискиНаБумажномНосителе = Перечисления.ПричиныВыпискиСФНаБумаге.БлокированиеДоступа Тогда
			invoice.reasonPaper = Фабрика.Создать(ТипСвойствоPaperReason, "UNLAWFUL_REMOVAL_REGISTRATION")
		ИначеЕсли ЭСФ.ПричинаВыпискиНаБумажномНосителе = Перечисления.ПричиныВыпискиСФНаБумаге.ПростойСистемы Тогда
			invoice.reasonPaper = Фабрика.Создать(ТипСвойствоPaperReason, "DOWN_TIME")
		Иначе
			invoice.reasonPaper = Фабрика.Создать(ТипСвойствоPaperReason, "MISSING_REQUIREMENT")
		КонецЕсли;	
	КонецЕсли;	
	
	// Заполнить реквизиты связанного ЭСФ.
	Если ЗначениеЗаполнено(ЭСФ.СвязанныйЭСФДата) 
		ИЛИ ЗначениеЗаполнено(ЭСФ.СвязанныйЭСФНомер)
		ИЛИ ЗначениеЗаполнено(ЭСФ.СвязанныйЭСФРегистрационныйНомер) Тогда
		
		relatedInvoice = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "relatedInvoice", Фабрика);
		relatedInvoice.date = Формат(ЭСФ.СвязанныйЭСФДата, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
		relatedInvoice.num = ЭСФ.СвязанныйЭСФНомер;
		relatedInvoice.registrationNumber = СокрЛП(ЭСФ.СвязанныйЭСФРегистрационныйНомер);
		
	КонецЕсли;
	#КонецОбласти 
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел B. Реквизиты поставщика.
	
	#Область РеквизитыПоставщика
	sellers = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "sellers", Фабрика);
	Для Каждого ПоставщикиСтрока Из ЭСФ.Поставщики Цикл
		
		seller = ЭСФСервер.НовыйЭлементСпискаXDTO(sellers.seller, Фабрика);
		
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Комитент,                       "COMMITTENT",                 seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Комиссионер,                    "BROKER",                     seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Экспедитор,                     "FORWARDER",                  seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Лизингодатель,                  "LESSOR",                     seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.УчастникСовместнойДеятельности, "JOINT_ACTIVITY_PARTICIPANT", seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Экспортер,        			  "EXPORTER",                   seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.УчастникСРП,        			  "SHARING_AGREEMENT_PARTICIPANT", seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.МеждународныйПеревозчик,        "TRANSPORTER", 				seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Доверитель,        			  "PRINCIPAL", 					seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Адвокат,						  "LAWYER", 					seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.СудебныйИсполнитель,			  "BAILIFF", 					seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Медиатор,						  "MEDIATOR",					seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Нотариус,					      "NOTARY",						seller);
		
		seller.address = СокрЛП(ПоставщикиСтрока.Адрес);
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.НаименованиеБанка) Тогда
			seller.bank = СокрЛП(ПоставщикиСтрока.НаименованиеБанка);	
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.БИК) Тогда
			seller.bik = ПоставщикиСтрока.БИК;	
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.НомерСвидетельстваПоНДС)
		   И НЕ ПустаяСтрока(ПоставщикиСтрока.СерияСвидетельстваПоНДС) Тогда
			seller.certificateNum = ПоставщикиСтрока.НомерСвидетельстваПоНДС;
			seller.certificateSeries = ПоставщикиСтрока.СерияСвидетельстваПоНДС;
		КонецЕсли;
		
		seller.isBranchNonResident = ПоставщикиСтрока.ЯвляетсяСтруктурнымПодразделениемНерезидента;
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.ИИК) Тогда
			seller.iik = ПоставщикиСтрока.ИИК;	
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.КБе) Тогда
			seller.kbe = ПоставщикиСтрока.КБе;	
		КонецЕсли;
		
		seller.name = СокрЛП(ПоставщикиСтрока.ПоставщикНаименование);
		seller.tin 	= ПоставщикиСтрока.ПоставщикИдентификатор;
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.БИНРеорганизованногоЛица) Тогда 
			seller.reorganizedTin = ПоставщикиСтрока.БИНРеорганизованногоЛица; 
		КонецЕсли;	
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.ДополнительныеСведения) Тогда
			seller.trailer = ПоставщикиСтрока.ДополнительныеСведения;
		КонецЕсли;
		
		Если ПоставщикиСтрока.УчастникСовместнойДеятельности ИЛИ ПоставщикиСтрока.УчастникСРП Тогда
			seller.shareParticipation = ПоставщикиСтрока.ДоляУчастия;
		КонецЕсли;	
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.БИНФилиала) Тогда
			seller.branchTin = ПоставщикиСтрока.БИНФилиала;
		КонецЕсли;	
			
	КонецЦикла;
	#КонецОбласти 
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел C. Реквизиты получателя.
	
	#Область РеквизитыПолучателя
	customers = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "customers", Фабрика);
	Для Каждого ПолучателиСтрока Из ЭСФ.Получатели Цикл
		
		customer = ЭСФСервер.НовыйЭлементСпискаXDTO(customers.customer, Фабрика);
		
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Комитент,                       "COMMITTENT",                 customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Комиссионер,                    "BROKER",                     customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Лизингодатель,                  "LESSEE",                     customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.УчастникСовместнойДеятельности, "JOINT_ACTIVITY_PARTICIPANT", customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.ГосударственноеУчреждение,      "PUBLIC_OFFICE",              customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.НерезидентВерсия2,              "NONRESIDENT",                customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Доверитель, 					  "PRINCIPAL", 					customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.УчастникСРП, 					  "SHARING_AGREEMENT_PARTICIPANT", customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.РозничнаяРеализация, 			  "RETAIL", 					customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.ФизическоеЛицо, 			  	  "INDIVIDUAL", 				customer);
        УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Адвокат,						  "LAWYER", 					customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.СудебныйИсполнитель,			  "BAILIFF", 					customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Медиатор,						  "MEDIATOR",					customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Нотариус,					      "NOTARY",						customer);
        
		customer.address = ПолучателиСтрока.Адрес;
		
		Если НЕ ПустаяСтрока(ПолучателиСтрока.НомерСвидетельстваПоНДС)
		   И НЕ ПустаяСтрока(ПолучателиСтрока.СерияСвидетельстваПоНДС) Тогда
			customer.certificateNum = ПолучателиСтрока.НомерСвидетельстваПоНДС;
			customer.certificateSeries = ПолучателиСтрока.СерияСвидетельстваПоНДС;
		КонецЕсли;
		
		customer.name = СокрЛП(ПолучателиСтрока.ПолучательНаименование);
		customer.tin = ПолучателиСтрока.ПолучательИдентификатор;
		
		// Нерезидент может не иметь атрибута tin, во всех остальных случаях атрибут должен быть.
		Если ПустаяСтрока(ПолучателиСтрока.ПолучательИдентификатор) И (ПолучателиСтрока.НерезидентВерсия2 ИЛИ ПолучателиСтрока.РозничнаяРеализация ИЛИ ПолучателиСтрока.ФизическоеЛицо) Тогда
			customer.Сбросить("tin");
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПолучателиСтрока.ДополнительныеСведения) Тогда
			customer.trailer = ПолучателиСтрока.ДополнительныеСведения;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПолучателиСтрока.БИНФилиала) Тогда
			customer.branchTin = ПолучателиСтрока.БИНФилиала;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПолучателиСтрока.БИНРеорганизованногоЛица) Тогда
			customer.reorganizedTin = ПолучателиСтрока.БИНРеорганизованногоЛица;
		КонецЕсли;
		
		customer.countryCode = ?(НЕ ПустаяСтрока(ПолучателиСтрока.КодСтраны), СокрЛП(ПолучателиСтрока.КодСтраны), "KZ");
		
		Если ПолучателиСтрока.УчастникСовместнойДеятельности ИЛИ ПолучателиСтрока.УчастникСРП Тогда	
			customer.shareParticipation = ПолучателиСтрока.ДоляУчастия;
		КонецЕсли;	
		
	КонецЦикла;
	#КонецОбласти 
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел D. Реквизиты грузоотправителя и грузополучателя.
	
	#Область РеквизитыГрузополучателяГрузоотправителя
	// Если все поля грузоотправителя пустые, то не нужно добавлять элемент consignor.
	Если НЕ ПустаяСтрока(ЭСФ.АдресОтправки)
	 ИЛИ НЕ ПустаяСтрока(ЭСФ.ГрузоотправительНаименование)
	 ИЛИ НЕ ПустаяСтрока(ЭСФ.ГрузоотправительИдентификатор) Тогда
	 
		consignor = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "consignor", Фабрика);
		
		// Узлы address, name, tin, добавляются, только если они заполнены.
		
		Если НЕ ПустаяСтрока(ЭСФ.АдресОтправки) Тогда
			consignor.address = СокрЛП(ЭСФ.АдресОтправки);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭСФ.ГрузоотправительНаименование) Тогда
			consignor.name = СокрЛП(ЭСФ.ГрузоотправительНаименование);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭСФ.ГрузоотправительИдентификатор) Тогда
			consignor.tin = СокрЛП(ЭСФ.ГрузоотправительИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	// Если все поля грузополучателя пустые, то не нужно добавлять элемент consignor.
	Если НЕ ПустаяСтрока(ЭСФ.АдресДоставки)
	 ИЛИ НЕ ПустаяСтрока(ЭСФ.ГрузополучательНаименование)
	 ИЛИ НЕ ПустаяСтрока(ЭСФ.ГрузополучательИдентификатор) 
	 ИЛИ НЕ ПустаяСтрока(ЭСФ.ГрузополучательКодСтраны) Тогда
	
		consignee = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "consignee", Фабрика);
		
		// Узлы address, name, tin, добавляются, только если они заполнены.
		
		Если НЕ ПустаяСтрока(ЭСФ.АдресДоставки) Тогда
			consignee.address = СокрЛП(ЭСФ.АдресДоставки);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭСФ.ГрузополучательНаименование) Тогда
			consignee.name = СокрЛП(ЭСФ.ГрузополучательНаименование);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭСФ.ГрузополучательИдентификатор) Тогда
			consignee.tin = СокрЛП(ЭСФ.ГрузополучательИдентификатор);
		КонецЕсли;
		
		consignee.countryCode = ?(НЕ ПустаяСтрока(ЭСФ.ГрузополучательКодСтраны), СокрЛП(ЭСФ.ГрузополучательКодСтраны), "KZ");
		
	КонецЕсли;
	#КонецОбласти 
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел E. Условия поставки
	#Область УсловияПоставки                                       
	deliveryTerm = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "deliveryTerm", Фабрика);
	
	Если ЗначениеЗаполнено(ЭСФ.ДоговорПоставкиДата) И ЗначениеЗаполнено(ЭСФ.ДоговорПоставкиНомер) Тогда
		deliveryTerm.contractDate = Формат(ЭСФ.ДоговорПоставкиДата, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
		deliveryTerm.contractNum  = ЭСФ.ДоговорПоставкиНомер;
		deliveryTerm.hasContract = Истина;
	Иначе
		deliveryTerm.hasContract = Ложь;
	КонецЕсли;
	
	//-=-=
	Если ЗначениеЗаполнено(ЭСФ.УникальныйНомерВалютногоКонтроля) Тогда
		deliveryTerm.accountNumber = ЭСФ.УникальныйНомерВалютногоКонтроля;
	КонецЕсли;
	//-=-=
	
	Если НЕ ПустаяСтрока(ЭСФ.ПунктНазначения) Тогда
		deliveryTerm.destination = ЭСФ.ПунктНазначения;
	КонецЕсли;
	Если НЕ ПустаяСтрока(ЭСФ.ДоговорПоставкиУсловияПоставки) Тогда
		deliveryTerm.deliveryConditionCode = СокрЛП(ЭСФ.ДоговорПоставкиУсловияПоставки);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ЭСФ.СпособОтправленияПоКлассификатору) Тогда
		deliveryTerm.transportTypeCode = ЭСФ.СпособОтправленияПоКлассификатору;
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(ЭСФ.ДоговорПоставкиУсловияОплаты) Тогда
		deliveryTerm.term = ЭСФ.ДоговорПоставкиУсловияОплаты;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ДоверенностьНаПоставкуНомер) И ЗначениеЗаполнено(ЭСФ.ДоверенностьНаПоставкуДата) Тогда
		deliveryTerm.warrant = ЭСФ.ДоверенностьНаПоставкуНомер;
		deliveryTerm.warrantDate = Формат(ЭСФ.ДоверенностьНаПоставкуДата, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
	КонецЕсли;
	
	Если НЕ ЭСФСервер.ЕстьУстановленныеСвойства(deliveryTerm) Тогда
		invoice.Сбросить("deliveryTerm");	
	КонецЕсли;
	#КонецОбласти 
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел F. Реквизиты документов, подтверждающих поставку товаров, работ, услуг.

	#Область ДокументыПоставки
	// В дополнительном и основном ЭСФ могут различаться значения данного реквизита,
	// поэтому дополнительный может быть не принят в ИС ЭСФ.
	// Сейчас пользователю потребуется вручную установить данный реквизит в дополнительном,
	// в значение, которое установлено в основном.
	Если НЕ ПустаяСтрока(ЭСФ.ДокументПодтверждающийПоставкуНомер) Тогда
		invoice.deliveryDocNum = ЭСФ.ДокументПодтверждающийПоставкуНомер;
	КонецЕсли;
	
	// В дополнительном и основном ЭСФ могут различаться значения данного реквизита,
	// поэтому дополнительный может быть не принят в ИС ЭСФ.
	// Сейчас пользователю потребуется вручную установить данный реквизит в дополнительном,
	// в значение, которое установлено в основном.		
	Если ЗначениеЗаполнено(ЭСФ.ДокументПодтверждающийПоставкуДата) Тогда
		invoice.deliveryDocDate = Формат(ЭСФ.ДокументПодтверждающийПоставкуДата, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭСФ.ДокументПодтверждающийПоставкуАВРНомер) Тогда
		invoice.deliveryDocNum2 = ЭСФ.ДокументПодтверждающийПоставкуАВРНомер;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ДокументПодтверждающийПоставкуАВРДата) Тогда
		invoice.deliveryDocDate2 = Формат(ЭСФ.ДокументПодтверждающийПоставкуАВРДата, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	#КонецОбласти 
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел F. Реквизиты государственного учреждения.
	
	#Область РеквизитыГУ
	publicOffice = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "publicOffice", Фабрика);
	
	Если НЕ ПустаяСтрока(ЭСФ.ГосучреждениеБИК) Тогда
		publicOffice.bik = ЭСФ.ГосучреждениеБИК;	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭСФ.ГосучреждениеИИК) Тогда
		publicOffice.iik = ЭСФ.ГосучреждениеИИК;	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭСФ.ГосучреждениеНазначениеПлатежа) Тогда
		publicOffice.payPurpose = ЭСФ.ГосучреждениеНазначениеПлатежа;	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭСФ.ГосучреждениеКодТоваров) Тогда
		publicOffice.productCode = ЭСФ.ГосучреждениеКодТоваров;	
	КонецЕсли;
	
	// Узел <bik> не учитывается, т.к. он всегда заполнен значением "KKMFKZ2A",
	// также узел <bik> невозможно установить в значение Неопределено.
	Если НЕ ЗначениеЗаполнено(publicOffice.iik) 
		И НЕ ЗначениеЗаполнено(publicOffice.payPurpose)
		И НЕ ЗначениеЗаполнено(publicOffice.productCode) Тогда
		
		invoice.Сбросить("publicOffice");
		
	КонецЕсли;
	#КонецОбласти 
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел G. Данные по товарам (работам, услугам).
	
	#Область ДанныеПоТоварам
	productSet = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "productSet", Фабрика);
	products = ЭСФСервер.НовоеСвойствоОбъектаXDTO(productSet, "products", Фабрика);
	
	Для Каждого ТоварыСтрока Из ЭСФ.Товары Цикл
		
		product = ЭСФСервер.НовыйЭлементСпискаXDTO(products.product, Фабрика);
		product.description = СокрЛП(ТоварыСтрока.ТоварНаименование);
		
		Если НЕ ПустаяСтрока(ТоварыСтрока.КодТНВЭД) Тогда
			product.unitCode = СокрЛП(ТоварыСтрока.КодТНВЭД);
		КонецЕсли;
				
		Если ЗначениеЗаполнено(ТоварыСтрока.ЕдиницаИзмеренияКод) Тогда
			product.unitNomenclature = СокрЛП(ТоварыСтрока.ЕдиницаИзмеренияКод);
		КонецЕсли;

		Если СокрЛП(ТоварыСтрока.ПризнакПроисхождения)<>"6" или ЗначениеЗаполнено(ТоварыСтрока.Количество) ТОгда
			product.quantity = ТоварыСтрока.Количество;
		КонецЕсли;

		product.unitPrice = ТоварыСтрока.Цена;
		
		product.priceWithoutTax  = ТоварыСтрока.СуммаБезНалогов;
		
		Если ЗначениеЗаполнено(ТоварыСтрока.СтавкаАкцизаЧисло) ИЛИ ЗначениеЗаполнено(ТоварыСтрока.СтавкаАкциза) Тогда
			product.exciseRate = ТоварыСтрока.СтавкаАкцизаЧисло;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТоварыСтрока.СуммаАкциза) ИЛИ ЗначениеЗаполнено(ТоварыСтрока.СтавкаАкциза) Тогда
			product.exciseAmount = ТоварыСтрока.СуммаАкциза;
		КонецЕсли;
		
		product.turnoverSize = ТоварыСтрока.ОборотПоРеализации;
		
		Если ЭСФ.Поставщики.Количество() <> 0 Тогда
			
			СтрокаПоставщика = ЭСФ.Поставщики[0];
			
			Если НЕ ТоварыСтрока.БезНДС Тогда
				
				product.ndsRate = ТоварыСтрока.СтавкаНДСЧисло;
				
			КонецЕсли;
			
			Если ПустаяСтрока(СтрокаПоставщика.НомерСвидетельстваПоНДС)
				И ПустаяСтрока(СтрокаПоставщика.СерияСвидетельстваПоНДС)
				И ТоварыСтрока.БезНДС
				И НЕ СтрокаПоставщика.Экспедитор Тогда //если Поставщик не является плательщиком НДС, но установлен признак Экспедитор, то НДС передаём на сервер
				
				product.Сбросить("ndsRate");
				
			КонецЕсли;
			
		КонецЕсли;

		product.ndsAmount = ТоварыСтрока.СуммаНДС;
		
		product.priceWithTax = ТоварыСтрока.Сумма;
		
		Если НЕ ПустаяСтрока(ТоварыСтрока.НомерЗаявленияВРамкахТС) Тогда
			product.productDeclaration = СокрЛП(ТоварыСтрока.НомерЗаявленияВРамкахТС);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТоварыСтрока.ТоварНаименованиеВРамкахТС) Тогда
			product.tnvedName = ТоварыСтрока.ТоварНаименованиеВРамкахТС;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТоварыСтрока.НомерПозицииВДекларацииИлиЗаявлении) Тогда
			product.productNumberInDeclaration = ТоварыСтрока.НомерПозицииВДекларацииИлиЗаявлении;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТоварыСтрока.ПризнакПроисхождения) Тогда
			product.truOriginCode = СокрЛП(ТоварыСтрока.ПризнакПроисхождения);
		КонецЕсли;
			
		Если НЕ ПустаяСтрока(ТоварыСтрока.ДополнительныеДанные) Тогда
			product.additional = ТоварыСтрока.ДополнительныеДанные;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТоварыСтрока.ИдентификаторТовара) Тогда
			product.catalogTruId = ТоварыСтрока.ИдентификаторТовара;
		КонецЕсли;			
					
	КонецЦикла;
	
	productSet.currencyCode = ЭСФ.ВалютаКод;
	
	Если ЭСФ.ВалютаКод <> "KZT" Тогда
		productSet.currencyRate = ЭСФ.КурсВалюты;
	КонецЕсли;
	
	Если ЭСФ.МестоРеализацииНеРК Тогда
		productSet.ndsRateType = ЭСФКлиентСервер.МестоРеализацииНеРКИСЭСФ(ЭСФ.МестоРеализацииНеРК);
	КонецЕсли;
	
	productSet.totalPriceWithoutTax = ЭСФ.Товары.Итог("СуммаБезНалогов");
	productSet.totalExciseAmount    = ЭСФ.Товары.Итог("СуммаАкциза");
	productSet.totalTurnoverSize    = ЭСФ.Товары.Итог("ОборотПоРеализации");
	productSet.totalNdsAmount       = ЭСФ.Товары.Итог("СуммаНДС");
	productSet.totalPriceWithTax    = ЭСФ.Товары.Итог("Сумма");
	#КонецОбласти
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел H. Сведения по участникам договора о совместной деятельности.
	#Область УчастникиСД
	Если ЭСФ.ТоварыПоПоставщикам.Количество() <> 0 Тогда
		
		sellerParticipants = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "sellerParticipants", Фабрика);
		
		СгруппированныеТоварыПоПоставщикам = СгруппированнаяТаблицаТоваровПоУчастникамСД(ЭСФ.ТоварыПоПоставщикам);
		
		Для Каждого СтрокаТоварыПоПоставщику Из СгруппированныеТоварыПоПоставщикам.Строки Цикл
			
			participant = ЭСФСервер.НовыйЭлементСпискаXDTO(sellerParticipants.participant, Фабрика);
			participant.tin = СтрокаТоварыПоПоставщику.Идентификатор;
			
			productShares = ЭСФСервер.НовоеСвойствоОбъектаXDTO(participant, "productShares", Фабрика);
			
			Для Каждого СтрокаТовары Из СтрокаТоварыПоПоставщику.Строки Цикл
				
				share = ЭСФСервер.НовыйЭлементСпискаXDTO(productShares.share, Фабрика);
				
				share.productNumber = СтрокаТовары.НомерТовара;
				share.quantity = СтрокаТовары.Количество;
				share.priceWithoutTax = СтрокаТовары.СуммаБезНалогов;
				share.exciseAmount = СтрокаТовары.СуммаАкциза;
				share.turnoverSize = СтрокаТовары.ОборотПоРеализации;
				share.ndsAmount = СтрокаТовары.СуммаНДС;
				share.priceWithTax = СтрокаТовары.Сумма;
				
				СвязаннаяСтрокаТовары = ЭСФ.Товары.Найти(СтрокаТовары.НомерТовара, "НомерСтроки");
				Если СвязаннаяСтрокаТовары <> Неопределено Тогда
					Если НЕ СвязаннаяСтрокаТовары.БезНДС Тогда
						share.ndsRate = СвязаннаяСтрокаТовары.СтавкаНДСЧисло;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТовары.ДополнительныеДанные) Тогда
					share.additional = СтрокаТовары.ДополнительныеДанные;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
				
	КонецЕсли;
	
	Если ЭСФ.ТоварыПоПолучателям.Количество() <> 0 Тогда
		
		customerParticipants = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "customerParticipants", Фабрика);
		
		СгруппированныеТоварыПоПолучателям = СгруппированнаяТаблицаТоваровПоУчастникамСД(ЭСФ.ТоварыПоПолучателям);
		
		Для Каждого СтрокаТоварыПоПолучателю Из СгруппированныеТоварыПоПолучателям.Строки Цикл
			
			participant = ЭСФСервер.НовыйЭлементСпискаXDTO(customerParticipants.participant, Фабрика);
			participant.tin = СтрокаТоварыПоПолучателю.Идентификатор;
			
			productShares = ЭСФСервер.НовоеСвойствоОбъектаXDTO(participant, "productShares", Фабрика);
			
			Для Каждого СтрокаТовары Из СтрокаТоварыПоПолучателю.Строки Цикл
				
				share = ЭСФСервер.НовыйЭлементСпискаXDTO(productShares.share, Фабрика);
				
				share.productNumber = СтрокаТовары.НомерТовара;
				share.quantity = СтрокаТовары.Количество;
				share.priceWithoutTax = СтрокаТовары.СуммаБезНалогов;
				share.exciseAmount = СтрокаТовары.СуммаАкциза;
				share.turnoverSize = СтрокаТовары.ОборотПоРеализации;
				share.ndsAmount = СтрокаТовары.СуммаНДС;
				share.priceWithTax = СтрокаТовары.Сумма;
				
				СвязаннаяСтрокаТовары = ЭСФ.Товары.Найти(СтрокаТовары.НомерТовара, "НомерСтроки");
				Если СвязаннаяСтрокаТовары <> Неопределено Тогда
					Если НЕ СвязаннаяСтрокаТовары.БезНДС Тогда
						share.ndsRate = СвязаннаяСтрокаТовары.СтавкаНДСЧисло;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТовары.ДополнительныеДанные) Тогда
					share.additional = СтрокаТовары.ДополнительныеДанные;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
				
	КонецЕсли;
	#КонецОбласти
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел I. Поверенный поставщика
	#Область ПоверенныйПоставщика
	Если ЗначениеЗаполнено(ЭСФ.ПоверенныйПоставщикаБИН) Тогда
		invoice.sellerAgentTin = ЭСФ.ПоверенныйПоставщикаБИН; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ПоверенныйПоставщикаНаименование) Тогда
		invoice.sellerAgentName = ЭСФ.ПоверенныйПоставщикаНаименование; 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ПоверенныйПоставщикаАдресМестонахождения) Тогда
		invoice.sellerAgentAddress = ЭСФ.ПоверенныйПоставщикаАдресМестонахождения; 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ДоговорПорученияПоставщикаНомер) Тогда
		invoice.sellerAgentDocNum = ЭСФ.ДоговорПорученияПоставщикаНомер; 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ДоговорПорученияПоставщикаДата) Тогда
		invoice.sellerAgentDocDate = Формат(ЭСФ.ДоговорПорученияПоставщикаДата, "ДФ=dd.MM.yyyy; ДП=01.01.0001"); 	
	КонецЕсли;
	#КонецОбласти
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел  J. Поверенный поставщика
	#Область ПоверенныйПокупателя
	Если ЗначениеЗаполнено(ЭСФ.ПоверенныйПокупателяБИН) Тогда
		invoice.customerAgentTin = ЭСФ.ПоверенныйПокупателяБИН; 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ПоверенныйПокупателяНаименование) Тогда
		invoice.customerAgentName = ЭСФ.ПоверенныйПокупателяНаименование; 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ПоверенныйПокупателяАдресМестонахождения) Тогда
		invoice.customerAgentAddress = ЭСФ.ПоверенныйПокупателяАдресМестонахождения; 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ДоговорПорученияПокупателяНомер) Тогда
		invoice.customerAgentDocNum = ЭСФ.ДоговорПорученияПокупателяНомер; 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ДоговорПорученияПокупателяДата) Тогда
		invoice.customerAgentDocDate = Формат(ЭСФ.ДоговорПорученияПокупателяДата, "ДФ=dd.MM.yyyy; ДП=01.01.0001"); 	
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

// Возвращает таблицу ТоварыПоПоставщикам, ТоварыПоПолучателям 
// сгруппированную по полю Идентификатор 
// и упорядоченную по полям Идентификатор и НомерТовара.
//
// Параметры:
//  ТаблицаТоваровПоУчастникамСД - Табличная часть - Табличная часть:
//   ТоварыПоПоставщикам или ТоварыПоПолучателям.
//
// Возвращаемое значение:
//  ДеревоЗначений - Сгруппированная таблица.
//
Функция СгруппированнаяТаблицаТоваровПоУчастникамСД(Знач ТаблицаТоваровПоУчастникамСД)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТоваровПоУчастникамСД.Идентификатор,
	|	ТаблицаТоваровПоУчастникамСД.НомерТовара,
	|	ТаблицаТоваровПоУчастникамСД.Количество,
	|	ТаблицаТоваровПоУчастникамСД.СуммаБезНалогов,
	|	ТаблицаТоваровПоУчастникамСД.СуммаАкциза,
	|	ТаблицаТоваровПоУчастникамСД.ОборотПоРеализации,
	|	ТаблицаТоваровПоУчастникамСД.СуммаНДС,
	|	ТаблицаТоваровПоУчастникамСД.Сумма,
	|	ТаблицаТоваровПоУчастникамСД.ДополнительныеДанные
	|ПОМЕСТИТЬ ТаблицаТоваровПоУчастникамСД
	|ИЗ
	|	&ТаблицаТоваровПоУчастникамСД КАК ТаблицаТоваровПоУчастникамСД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТоваровПоУчастникамСД.Идентификатор КАК Идентификатор,
	|	ТаблицаТоваровПоУчастникамСД.НомерТовара КАК НомерТовара,
	|	ТаблицаТоваровПоУчастникамСД.Количество,
	|	ТаблицаТоваровПоУчастникамСД.СуммаБезНалогов,
	|	ТаблицаТоваровПоУчастникамСД.СуммаАкциза,
	|	ТаблицаТоваровПоУчастникамСД.ОборотПоРеализации,
	|	ТаблицаТоваровПоУчастникамСД.СуммаНДС,
	|	ТаблицаТоваровПоУчастникамСД.Сумма,
	|	ТаблицаТоваровПоУчастникамСД.ДополнительныеДанные
	|ИЗ
	|	ТаблицаТоваровПоУчастникамСД КАК ТаблицаТоваровПоУчастникамСД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор,
	|	НомерТовара
	|ИТОГИ ПО
	|	Идентификатор";	
	Запрос.УстановитьПараметр("ТаблицаТоваровПоУчастникамСД", ТаблицаТоваровПоУчастникамСД);	
	
	СгруппированнаяТаблицаТоваровПоУчастникамСД = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	Возврат СгруппированнаяТаблицаТоваровПоУчастникамСД;
	
КонецФункции

// Устанавливает статус для customer или seller, например, "NONRESIDENT".
//
// Параметры:
//  Фабрика - ФабрикаXDTO - Фабрика, которая будет использоваться для создания списка statuses, если его нет.
//  СтатусИБ - Булево - Если Истина, то СтатусИСЭСФ будет добавлен в КонтрагентXDTO, иначе нет.
//  СтатусИСЭСФ - Строка - Статус, который будет добавлен в КонтрагентXDTO, если СтатусИБ будет Истина.
//  КонтрагентXDTO - ОбъектXDTO - Объект customer или seller, в который будет добавлен СтатусИСЭСФ, если СтатусИБ будет Истина.
//
Процедура УстановитьСтатусКонтрагента(Знач Фабрика, Знач СтатусИБ, Знач СтатусИСЭСФ, КонтрагентXDTO)
	
	Если СтатусИБ = Истина Тогда
		
		statuses = ЭСФСервер.ПолучитьСвойство(КонтрагентXDTO, "statuses", Неопределено);
		
		Если statuses = Неопределено Тогда
			statuses = ЭСФСервер.НовоеСвойствоОбъектаXDTO(КонтрагентXDTO, "statuses", Фабрика);			
		КонецЕсли;
		
		status = ЭСФСервер.НовыйЭлементСпискаXDTO(statuses.status, Фабрика, СтатусИСЭСФ);
		status = СтатусИСЭСФ;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйInvoice(Знач ЭСФ, Знач Фабрика, Знач ВерсияЭСФ = "InvoiceV2", ВерсияИСЭСФ)
	Если ВерсияЭСФ = "InvoiceV1" Тогда
		ПространствоИмен = "namespace.v1"
	Иначе
		ПространствоИмен = "v2.esf"
	КонецЕсли;	
		
	ТипInvoice = Фабрика.Тип(ПространствоИмен, ВерсияЭСФ);
	invoice = Фабрика.Создать(ТипInvoice);
	
	Заполнитьinvoice(ЭСФ, Фабрика, invoice, ВерсияЭСФ);
	
	Возврат invoice;
	
КонецФункции

// Возвращает ЭСФ, которые необходимо аннулировать для выписки исправленных ЭСФ.
//
// Параметры:
//  МассивИсправленныхЭСФ - Массив - Массив исправленных ЭСФ, для которых необходимо найти ЭСФ, 
//   которые необходимо аннулировать перед выпиской исправленных.
//
// Возвращаемое значение:
//  Соответствие - ЭСФ, которые необходимо аннулировать.
//   |- Ключ - ДокументСсылка.ЭСФ - Исправленный ЭСФ.
//   |- Значение - Массив - Массив ЭСФ, которые необходимо аннулировать, перед выпиской исправленного ЭСФ.
//       Каждый элемент массива имеет тип ДокументСсылка.ЭСФ.
//
Функция АннулируемыеЭСФ(Знач МассивИсправленныхЭСФ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФ.Ссылка КАК ИсправленныйЭСФ,
	|	ЭСФ.СвязанныйЭСФ КАК АннулируемыйЭСФ,
	|	ЭСФ.СвязанныйЭСФ.Статус КАК СтатусАннулируемогоЭСФ
	|ПОМЕСТИТЬ АннулируемыеОбычныеЭСФ
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|ГДЕ
	|	ЭСФ.Ссылка В(&МассивИсправленныхЭСФ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АннулируемыйЭСФ,
	|	СтатусАннулируемогоЭСФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АннулируемыеОбычныеЭСФ.ИсправленныйЭСФ КАК ИсправленныйЭСФ,
	|	АннулируемыеОбычныеЭСФ.АннулируемыйЭСФ КАК АннулируемыйЭСФ,
	|	АннулируемыеОбычныеЭСФ.СтатусАннулируемогоЭСФ
	|ПОМЕСТИТЬ АннулируемыеОбычныеИДополнительныеЭСФ
	|ИЗ
	|	АннулируемыеОбычныеЭСФ КАК АннулируемыеОбычныеЭСФ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АннулируемыеОбычныеЭСФ.ИсправленныйЭСФ,
	|	ЭСФ.Ссылка,
	|	ЭСФ.Статус
	|ИЗ
	|	АннулируемыеОбычныеЭСФ КАК АннулируемыеОбычныеЭСФ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
	|		ПО АннулируемыеОбычныеЭСФ.АннулируемыйЭСФ = ЭСФ.СвязанныйЭСФ
	|			И (ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Дополнительный))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АннулируемыйЭСФ,
	|	СтатусАннулируемогоЭСФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АннулируемыеЭСФ.ИсправленныйЭСФ КАК ИсправленныйЭСФ,
	|	АннулируемыеЭСФ.АннулируемыйЭСФ
	|ИЗ
	|	АннулируемыеОбычныеИДополнительныеЭСФ КАК АннулируемыеЭСФ
	|ГДЕ
	|	АннулируемыеЭСФ.СтатусАннулируемогоЭСФ <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭСФ.Отозванный)
	|	И АннулируемыеЭСФ.СтатусАннулируемогоЭСФ <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭСФ.Аннулированный)
	|	И АннулируемыеЭСФ.СтатусАннулируемогоЭСФ <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭСФ.АннулированИСЭСФДляОтнесенияВЗачетИНаВычеты)
	|	И АннулируемыеЭСФ.СтатусАннулируемогоЭСФ <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭСФ.АннулированПриОтклоненииСНТ)
	|	И АннулируемыеЭСФ.СтатусАннулируемогоЭСФ <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭСФ.АннулированПриОтзывеСНТ)
	|ИТОГИ ПО
	|	ИсправленныйЭСФ";
	
	Запрос.УстановитьПараметр("МассивИсправленныхЭСФ", МассивИсправленныхЭСФ);
	Результат = Запрос.Выполнить();
	
	// Заполнить результат пустыми значениями.
	АннулируемыеЭСФ = Новый Соответствие;
	Для Каждого ИсправленныйЭСФ Из МассивИсправленныхЭСФ Цикл
		АннулируемыеЭСФ.Вставить(ИсправленныйЭСФ, Новый Массив);
	КонецЦикла;
	
	// Заполнить результат аннулируемыми ЭСФ.
	ВыборкаИсправленныйЭСФ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИсправленныйЭСФ.Следующий() Цикл
		МассивАнулируемыхЭСФ = АннулируемыеЭСФ[ВыборкаИсправленныйЭСФ.ИсправленныйЭСФ];
		ВыборкаДетальныеЗаписи = ВыборкаИсправленныйЭСФ.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивАнулируемыхЭСФ.Добавить(ВыборкаДетальныеЗаписи.АннулируемыйЭСФ);	
		КонецЦикла;
	КонецЦикла;
	
	Возврат АннулируемыеЭСФ;
	
КонецФункции

Процедура ДополнитьМассивИдентификаторамиАннулируемыхЭСФ(Знач СтруктурнаяЕдиница, МассивИдентификаторовЭСФ)
	
	//////////////////////////////////////////////////////////////////////////////
	// Создать пустые параметры поиска исправленных ЭСФ.	
		
	ИменаРеквизитов = "ПометкаУдаления, Идентификатор, Направление, Вид";
	ПараметрыПоискаЭСФ = ЭСФСервер.НовыеПараметрыПоискаСсылок(ИменаРеквизитов, Метаданные.Документы.ЭСФ);	
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить параметры поиска исправленных ЭСФ.
	
	Для Каждого Идентификатор Из МассивИдентификаторовЭСФ Цикл
		
		СтрокаПараметрыПоискаЭСФ = ПараметрыПоискаЭСФ.Добавить();
		СтрокаПараметрыПоискаЭСФ.ПометкаУдаления = Ложь;
		СтрокаПараметрыПоискаЭСФ.Идентификатор = Идентификатор;
		СтрокаПараметрыПоискаЭСФ.Направление = Перечисления.НаправленияЭСФ.Исходящий;
		СтрокаПараметрыПоискаЭСФ.Вид = Перечисления.ВидыЭСФ.Исправленный;
		
	КонецЦикла;	
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////	
	// Найти исправленные документы ЭСФ.
	ДанныеСтруктурнойЕдиницы = ЭСФСерверПовтИсп.ДанныеСтруктурнойЕдиницы(СтруктурнаяЕдиница);
	ИдентификационныйНомер = ДанныеСтруктурнойЕдиницы.ИдентификационныйНомер;
	ТаблицаИсправленныхДокументовЭСФ = НайтиСсылкиПоЗначениямРеквизитов(ПараметрыПоискаЭСФ, Метаданные.Документы.ЭСФ, ИдентификационныйНомер);	
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////		
	// Создать массив исправленных ЭСФ.	
	
	МассивИсправленныхЭСФ = Новый Массив;	
	Для Каждого СтрокаТаблицы Из ТаблицаИсправленныхДокументовЭСФ Цикл		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НайденнаяСсылка) Тогда
			МассивИсправленныхЭСФ.Добавить(СтрокаТаблицы.НайденнаяСсылка);	
		КонецЕсли;		
	КонецЦикла;
		
	МассивИдентификаторовАннулируемыхЭСФ = МассивИдентификаторовАннулируемыхЭСФ(МассивИсправленныхЭСФ);
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Дополнить массив идентификаторов, идентификаторами исправляемых ЭСФ,
	// а также идентификаторами дополнительных ЭСФ, для исправляемых ЭСФ.
	
	Для Каждого Идентификатор Из МассивИдентификаторовАннулируемыхЭСФ Цикл
		МассивИдентификаторовЭСФ.Добавить(Идентификатор);	
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив идентификаторов на исправляемые ЭСФ,
// а также их дополнительные ЭСФ.
//
// Параметры:
//  МассивИсправленныхЭСФ - Массив - Массив ссылок на исправленные ЭСФ,
//   для которых необходимо найти ЭСФ, которые они будут аннулировать.
//
Функция МассивИдентификаторовАннулируемыхЭСФ(Знач МассивИсправленныхЭСФ)
	
	МассивИдентификаторовАннулируемыхЭСФ = Новый Массив;
	
	//////////////////////////////////////////////////////////////////////////////
	// Создать массив ссылок на исправляемые ЭСФ и их дополнительные ЭСФ.
	
	МассивДляПолученияИдентификаторов = Новый Массив;	
	СоответствиеАннулируемыеЭСФ = АннулируемыеЭСФ(МассивИсправленныхЭСФ); 	
	
	Для Каждого ЭлементАннулируемыеЭСФ Из СоответствиеАннулируемыеЭСФ Цикл
		
		МассивАннулируемыхЭСФ = ЭлементАннулируемыеЭСФ.Значение;
		
		Для Каждого АннулируемыйЭСФ Из МассивАннулируемыхЭСФ Цикл
			МассивДляПолученияИдентификаторов.Добавить(АннулируемыйЭСФ);	
		КонецЦикла;
		
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////////////
	// Получить идентификаторы исправляемых ЭСФ и их дополнительных ЭСФ.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЭСФ.Идентификатор
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|ГДЕ
	|	ЭСФ.Ссылка В(&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивДляПолученияИдентификаторов);
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		МассивИдентификаторовАннулируемыхЭСФ.Добавить(Выборка.Идентификатор);	
	КонецЦикла;
	
	Возврат МассивИдентификаторовАннулируемыхЭСФ;
	
КонецФункции

// Формирует наименование товара для заполнения исходящего ЭСФ.
//
// Параметры:
//  Параметры - Любая именованная коллекция - Содержащая строковые элементы:
//  - НомерГТДНаименованиеТовара - Наименование товара, указанное в элементе справочника НомераГТД.
//  - СодержаниеУслуги - Содержание услуги, указанное в документе СчетФактураВыданный.
//  - ТоварНаименование - Наименование или ПолноеНаименование Номенклатуры, ОС, НМА.
//  - ХарактеристикаНоменклатурыНаименование - Наименование характеристики. 
//  - СерияНоменклатурыНаименование - Наименование серии. 
//
// Возвращаемое значение:
//  Строка - Наименование товара для исходящего ЭСФ.
//
Функция НаименованиеТовара(Параметры) Экспорт
		
	НаименованиеТовара = "";
	
	Если НЕ ПустаяСтрока(Параметры.ТоварНаименование) Тогда
		
		НаименованиеТовара = СокрЛП(Параметры.ТоварНаименование);
		
	КонецЕсли;

	Возврат НаименованиеТовара;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ЭСФ

Процедура ЗаполнитьСведенияОДатеСинхронизации(ПараметрыМетодаВходящихЭСФ, ПараметрыМетодаИсходящихЭСФ,знач ДанныеПрофиля, знач СоответствиеПараметровСинхронизации)
	
	Если СоответствиеПараметровСинхронизации <> Неопределено Тогда
		Параметр = СоответствиеПараметровСинхронизации.Получить(ДанныеПрофиля.Ссылка);
		Если Параметр <> Неопределено Тогда
			Если ПараметрыМетодаВходящихЭСФ <> Неопределено Тогда
				ПараметрыМетодаВходящихЭСФ.Вставить("ДатаНачалаСинхронизации", Параметр.ДатаНачалаСинхронизацииВходящихЭСФ);	
			КонецЕсли;
			
			Если ПараметрыМетодаИсходящихЭСФ <> Неопределено Тогда
				ПараметрыМетодаИсходящихЭСФ.Вставить("ДатаНачалаСинхронизации", Параметр.ДатаНачалаСинхронизацииИсходящихЭСФ);
			КонецЕсли
		КонецЕсли;			
	КонецЕсли;	        	
КонецПроцедуры	

Функция СоответствиеПараметровСинхронизации(МассивПрофилейИСЭСФСДатойСинхронизации) Экспорт 
	СоответствиеПараметровСинхронизации = Новый Соответствие;
	Для Каждого Элемент Из МассивПрофилейИСЭСФСДатойСинхронизации Цикл
		СоответствиеПараметровСинхронизации.Вставить(Элемент.ПрофильИСЭСФ, Новый Структура("ДатаНачалаСинхронизацииВходящихЭСФ, ДатаНачалаСинхронизацииИсходящихЭСФ",Элемент.ДатаНачалаСинхронизацииВходящихЭСФ, Элемент.ДатаНачалаСинхронизацииИсходящихЭСФ ));		
	КонецЦикла;	
	Возврат СоответствиеПараметровСинхронизации;
КонецФункции

//Заплоняет регистр сведений ПараметрыМетодовИСЭСФ при обновлении ИБ
//
Процедура ЗаполнитьДатыНачалаСинхронизации() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 		
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиИСЭСФ.Ссылка КАК ПрофильИСЭСФ,
	|	ПрофилиИСЭСФ.СтруктурнаяЕдиница
	|ИЗ
	|	Справочник.ПрофилиИСЭСФ КАК ПрофилиИСЭСФ
	|ГДЕ
	|	ПрофилиИСЭСФ.ИспользоватьДляСинхронизации
	|	И ПрофилиИСЭСФ.Владелец.ПарольАутентификации <> """"";
	
	ВыборкаПрофилиИСЭСФ = Запрос.Выполнить().Выбрать();
	
	МассивДанныхПрофилейИСЭСФ = Новый Массив;
	МассивСЕ = Новый Массив;
	Пока ВыборкаПрофилиИСЭСФ.Следующий() Цикл
		ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ВыборкаПрофилиИСЭСФ.ПрофильИСЭСФ);
		МассивДанныхПрофилейИСЭСФ.Добавить(ДанныеПрофиляИСЭСФ);
		МассивСЕ.Добавить(ВыборкаПрофилиИСЭСФ.СтруктурнаяЕдиница);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыМетодовИСЭСФ.ИмяПараметра,
	|	ПараметрыМетодовИСЭСФ.ЗначениеПараметра,
	|	ПараметрыМетодовИСЭСФ.НаправлениеЭСФ,
	|	ПараметрыМетодовИСЭСФ.СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВТ_Параметры
	|ИЗ
	|	РегистрСведений.ПараметрыМетодовИСЭСФ КАК ПараметрыМетодовИСЭСФ
	|ГДЕ
	|	ПараметрыМетодовИСЭСФ.СтруктурнаяЕдиница В (&СтруктурнаяЕдиница)
	|	И ПараметрыМетодовИСЭСФ.ИмяМетода = &ИмяМетода
	|	И ПараметрыМетодовИСЭСФ.ИмяПараметра = &ИмяПараметра
	|;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Параметры.ЗначениеПараметра,
	|	ВТ_Параметры.СтруктурнаяЕдиница
	|ИЗ
	|	ВТ_Параметры КАК ВТ_Параметры
	|ГДЕ
	|	ВТ_Параметры.НаправлениеЭСФ = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Входящий)
	|;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Параметры.ЗначениеПараметра,
	|	ВТ_Параметры.СтруктурнаяЕдиница
	|ИЗ
	|	ВТ_Параметры КАК ВТ_Параметры
	|ГДЕ
	|	ВТ_Параметры.НаправлениеЭСФ = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий)
	|";
	
	Запрос.УстановитьПараметр("ИмяМетода", ВРег("queryUpdates"));
	Запрос.УстановитьПараметр("ИмяПараметра",  ВРег("lastEventDate"));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", МассивСЕ);

	Результат = Запрос.ВыполнитьПакет();
	
	РезультатВходящие = Результат[1];
	РезультатИсходящие = Результат[2]; 	
	
	МассивИсключенийВходящие = Новый Массив;
	ВыборкаПараметрыВходящие = РезультатВходящие.Выбрать();
	Пока ВыборкаПараметрыВходящие.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаПараметрыВходящие.ЗначениеПараметра) Тогда
			МассивИсключенийВходящие.Добавить(ВыборкаПараметрыВходящие.СтруктурнаяЕдиница);
		КонецЕсли;		
	КонецЦикла;
	
	МассивИсключенийИсходщие = Новый Массив;
	ВыборкаПараметрыИсходщие = РезультатИсходящие.Выбрать();
	Пока ВыборкаПараметрыИсходщие.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаПараметрыИсходщие.ЗначениеПараметра) Тогда
			МассивИсключенийИсходщие.Добавить(ВыборкаПараметрыИсходщие.СтруктурнаяЕдиница);
		КонецЕсли;		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФ.Ссылка КАК ЭСФ,
	|	ЭСФ.Ссылка.Дата КАК Дата,
	|	ЭСФ.Направление КАК Направление,
	|	ЭСФПоставщики.Поставщик КАК Поставщик,
	|	ЭСФПолучатели.Получатель КАК Получатель
	|ПОМЕСТИТЬ ВТ_ЭСФ
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ.Поставщики КАК ЭСФПоставщики
	|		ПО ЭСФ.Ссылка = ЭСФПоставщики.Ссылка
	|			И (ЭСФПоставщики.НомерСтроки = 1)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ.Получатели КАК ЭСФПолучатели
	|		ПО ЭСФ.Ссылка = ЭСФПолучатели.Ссылка
	|			И (ЭСФПолучатели.НомерСтроки = 1)
	|ГДЕ
	|	ЭСФ.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭСФ.Сформирован)
	|	И ЭСФ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭСФ.Черновик)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЭСФ.Направление КАК Направление,
	|	ВЫБОР
	|		КОГДА ВТ_ЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Входящий)
	|			ТОГДА ВТ_ЭСФ.Получатель
	|		КОГДА ВТ_ЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий)
	|			ТОГДА ВТ_ЭСФ.Поставщик
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|   МАКСИМУМ(ВТ_ЭСФ.Дата)КАК Дата
	|ПОМЕСТИТЬ ВТ_ДатыЭСФ
	|ИЗ
	|	ВТ_ЭСФ КАК ВТ_ЭСФ
	|СГРУППИРОВАТЬ ПО
	|	Направление,
	|	ВЫБОР
	|		КОГДА ВТ_ЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Входящий)
	|			ТОГДА ВТ_ЭСФ.Получатель
	|		КОГДА ВТ_ЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий)
	|			ТОГДА ВТ_ЭСФ.Поставщик
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДатыЭСФ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТ_ДатыЭСФ.Направление КАК Направление,
	|   ВТ_ДатыЭСФ.Дата КАК Дата
	|
	|ИЗ
	|	ВТ_ДатыЭСФ КАК ВТ_ДатыЭСФ
	|ГДЕ
	|	ВТ_ДатыЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Входящий)
	|	И ВТ_ДатыЭСФ.СтруктурнаяЕдиница НЕ В (&СтруктурнаяЕдиницаВходящие)
	|;
	|	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДатыЭСФ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТ_ДатыЭСФ.Направление КАК Направление,
	|   ВТ_ДатыЭСФ.Дата КАК Дата
	|
	|ИЗ
	|	ВТ_ДатыЭСФ КАК ВТ_ДатыЭСФ
	|ГДЕ
	|	ВТ_ДатыЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий)
	|	И ВТ_ДатыЭСФ.СтруктурнаяЕдиница НЕ В (&СтруктурнаяЕдиницаИсходящие)
	|	
	|";
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиницаВходящие", МассивИсключенийВходящие);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиницаИсходящие", МассивИсключенийИсходщие);
	
	Результат = Запрос.ВыполнитьПакет();
	
	РезультатВходящие = Результат[2];
	РезультатИсходящие = Результат[3];
	
	ВыборкаВходящие = РезультатВходящие.Выбрать();
	ВыборкаИсходящие = РезультатИсходящие.Выбрать();
	
	Пока ВыборкаВходящие.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаВходящие.СтруктурнаяЕдиница)
			И (ТипЗнч(ВыборкаВходящие.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Организации") Или ТипЗнч(ВыборкаВходящие.СтруктурнаяЕдиница) = Тип("СправочникСсылка.ПодразделенияОрганизаций"))  Тогда
			Попытка
				ЭСФСервер.СохранитьПараметрыМетода(
									ВыборкаВходящие.СтруктурнаяЕдиница, 
									ВРег("queryUpdates"), 
									ВыборкаВходящие.Направление, 
									ВРег("lastEventDate"), 
									НачалоДня(ВыборкаВходящие.Дата));
			Исключение
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ОбменЭСФ.ЗаполнитьДатыНачалаСинхронизации'"), 
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
			КонецПопытки;
		КонецЕсли;					
							
	КонецЦикла;						
	
	Пока ВыборкаИсходящие.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаИсходящие.СтруктурнаяЕдиница) 
			И (ТипЗнч(ВыборкаИсходящие.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Организации") Или ТипЗнч(ВыборкаИсходящие.СтруктурнаяЕдиница) = Тип("СправочникСсылка.ПодразделенияОрганизаций"))  Тогда
			Попытка
				ЭСФСервер.СохранитьПараметрыМетода(
									ВыборкаИсходящие.СтруктурнаяЕдиница, 
									ВРег("queryUpdates"), 
									ВыборкаИсходящие.Направление, 
									ВРег("lastEventDate"), 
									НачалоДня(ВыборкаИсходящие.Дата));
			Исключение
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ОбменЭСФ.ЗаполнитьДатыНачалаСинхронизации'"), 
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));												
			КонецПопытки;						
		КонецЕсли;					
							
	КонецЦикла;								
	
КонецПроцедуры 

// См. ЭСФСервер.ПолучитьНовыеЭСФ()
Функция ПолучитьНовыеЭСФ(ПараметрыВыгрузки) Экспорт
	
	МассивДанныхПрофилейИСЭСФ = ПараметрыВыгрузки.МассивДанныхПрофилейИСЭСФ;
	МассивПрофилейИСЭСФСДатойСинхронизации = ПараметрыВыгрузки.МассивПрофилейИСЭСФСДатойСинхронизации;
	ПолучитьОднуПорцию = ?(ПараметрыВыгрузки.Свойство("ПолучитьОднуПорцию"), ПараметрыВыгрузки.ПолучитьОднуПорцию, Ложь);	
	ЗапускатьФоновоеЗадание = ?(ПараметрыВыгрузки.Свойство("ЗапускатьФоновоеЗадание"), ПараметрыВыгрузки.ЗапускатьФоновоеЗадание, Ложь);
	ТолькоСоздатьОбновитьФайлы = ?(ПараметрыВыгрузки.Свойство("ТолькоСоздатьОбновитьФайлы"), ПараметрыВыгрузки.ТолькоСоздатьОбновитьФайлы, Ложь);
	
	СообщениеПользователя = Новый СообщениеПользователю;
	
	ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
	ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	
	Текст = НСтр("ru = '%ТекущаяДата% Начата синхронизация с ИС ЭСФ.'");
	Текст = СтрЗаменить(Текст, "%ТекущаяДата%", ТекущаяДата());	
	СообщениеПользователя.Текст = Текст;
	СообщениеПользователя.Сообщить();
	
	Входящий = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий");
	Исходящий = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий");	
	
	КоличествоШагов = МассивДанныхПрофилейИСЭСФ.Количество() * 2;
	НомерШага = 0;
	
	СоответствиеПараметровСинхронизации = СоответствиеПараметровСинхронизации(МассивПрофилейИСЭСФСДатойСинхронизации);
	
	Для Каждого СтруктураПрофиляСинхронизации Из МассивДанныхПрофилейИСЭСФ Цикл
		ДанныеПрофиля = СтруктураПрофиляСинхронизации.ПрофильИСЭСФ;
		ПредставлениеПрофиля = Строка(ДанныеПрофиля.Ссылка);
		
		ПараметрыМетодаВходящихЭСФ = ЭСФСервер.ПолучитьПараметрыМетода(ДанныеПрофиля.СтруктурнаяЕдиница.Ссылка, ВРег("queryUpdates"), Перечисления.НаправленияЭСФ.Входящий);	
		ПараметрыМетодаИсходящихЭСФ = ЭСФСервер.ПолучитьПараметрыМетода(ДанныеПрофиля.СтруктурнаяЕдиница.Ссылка, ВРег("queryUpdates"), Перечисления.НаправленияЭСФ.Исходящий);	
		
		ЗаполнитьСведенияОДатеСинхронизации(ПараметрыМетодаВходящихЭСФ, ПараметрыМетодаИсходящихЭСФ, ДанныеПрофиля, СоответствиеПараметровСинхронизации);
		
		ИдентификаторСессии = ЭСФВызовСервера.ОткрытьСессию(СтруктураПрофиляСинхронизации, ВерсияИСЭСФ);
		
		// Получить новые входящие ЭСФ.
		НомерШага = НомерШага + 1;
		ЭтоПоследняяПорция = Ложь;
		МассивИдентификаторовДляОбновленияСтатусаПриема = Новый Массив(); // накапливаем идентификаторы, чтобы отправить уведомление после получения всех документов
		МассивЭСФДляПолученияИдентификаторовТоваров = Новый Массив(); // накапливаем ссылки ЭСФ, чтобы отправить завтрос на получение идентификаторов товаров
		Пока НЕ ЭтоПоследняяПорция Цикл						
			Текст = НСтр("ru = '%ТекущаяДата% (Шаг %Номер% из %Количество%) Получение новых и измененных входящих электронных счетов-фактур. Профиль: %ПрофильИСЭСФ%.'");
			Текст = СтрЗаменить(Текст, "%ТекущаяДата%",  ТекущаяДата());
			Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%", ПредставлениеПрофиля);
			Текст = СтрЗаменить(Текст, "%Номер%",        НомерШага);
			Текст = СтрЗаменить(Текст, "%Количество%",   КоличествоШагов);
			СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();	
			
			ЭтоПоследняяПорция = ПолучитьДанныеНовыхЭСФ(Перечисления.НаправленияЭСФ.Входящий, СтруктураПрофиляСинхронизации, Ложь, Ложь, ИдентификаторСессии, ВерсияИСЭСФ, ПараметрыМетодаВходящихЭСФ, МассивИдентификаторовДляОбновленияСтатусаПриема, МассивЭСФДляПолученияИдентификаторовТоваров);					
		КонецЦикла;
		
		ПодтвердитьПолучениеВходящихЭСФ(МассивИдентификаторовДляОбновленияСтатусаПриема, СтруктураПрофиляСинхронизации, ИдентификаторСессии); // Отправка уведомления о приеме
		
		// Обновление исходящих ЭСФ
		ЭтоПоследняяПорция = Ложь;
		МассивИдентификаторовДляОбновленияСтатусаПриема = Новый Массив(); // накапливаем идентификаторы, чтобы отправить уведомление после получения всех документов
		Пока НЕ ЭтоПоследняяПорция Цикл		 	
			Текст = НСтр("ru = '%ТекущаяДата% Обновление состояния исходящих электронных счетов-фактур. Профиль: %ПрофильИСЭСФ%.'");
			Текст = СтрЗаменить(Текст, "%ТекущаяДата%",  ТекущаяДата());
			Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%", ПредставлениеПрофиля);
			СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();
			ЭтоПоследняяПорция = ПолучитьДанныеНовыхЭСФ(Перечисления.НаправленияЭСФ.Исходящий, СтруктураПрофиляСинхронизации, Ложь, Ложь, ИдентификаторСессии, ВерсияИСЭСФ, ПараметрыМетодаИсходящихЭСФ, МассивИдентификаторовДляОбновленияСтатусаПриема);
		КонецЦикла;
		
		// Создать и обновить присоединенные XML файлы исходящих ЭСФ.
		НомерШага = НомерШага + 1;
		ЭтоПоследняяПорция = Ложь;				
		Пока НЕ ЭтоПоследняяПорция Цикл
			
			ЭтоПоследняяПорция = ПолучитьДанныеНовыхЭСФ(Перечисления.НаправленияЭСФ.Исходящий, СтруктураПрофиляСинхронизации, Ложь, Истина, ИдентификаторСессии, ВерсияИСЭСФ, ПараметрыМетодаВходящихЭСФ);
			
			Текст = НСтр("ru = '%ТекущаяДата% (Шаг %Номер% из %Количество%) Обновление существующих исходящих электронных счетов-фактур. Профиль: %ПрофильИСЭСФ%.'");
			Текст = СтрЗаменить(Текст, "%ТекущаяДата%",  ТекущаяДата());
			Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%", ПредставлениеПрофиля);
			Текст = СтрЗаменить(Текст, "%Номер%",        НомерШага);
			Текст = СтрЗаменить(Текст, "%Количество%",   КоличествоШагов);
			СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();
			
		КонецЦикла;
		
		ЭСФВызовСервера.ЗакрытьСессию(СтруктураПрофиляСинхронизации, ИдентификаторСессии, ВерсияИСЭСФ);
		
		// Отобразить в комментарии, что синхронизация по профилю успешно завершена.
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Пометка",            Истина);
		ПараметрыОтбора.Вставить("СтруктурнаяЕдиница", ДанныеПрофиля.СтруктурнаяЕдиница.Ссылка);
		ПараметрыОтбора.Вставить("ПрофильИСЭСФ",       ДанныеПрофиля.Ссылка);
		ПараметрыОтбора.Вставить("Комментарий",        "");
		
		
	КонецЦикла;
	
	Текст = НСтр("ru = '%ТекущаяДата% Синхронизация с ИС ЭСФ успешно завершена.'");
	Текст = СтрЗаменить(Текст, "%ТекущаяДата%", ТекущаяДата());
	СообщениеПользователя.Текст = Текст;
	СообщениеПользователя.Сообщить();
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДанныеНовыхЭСФ(Знач НаправлениеЭСФ, Знач ПрофильИСЭСФ, Знач ПолучитьОднуПорцию, Знач ТолькоСоздатьОбновитьФайлы, ИдентификаторСессии, ВерсияИСЭСФ, ПараметрыМетода, МассивИдентификаторовДляОбновленияСтатусаПриема = Неопределено, МассивЭСФДляПолученияИдентификаторовТоваров = Неопределено) Экспорт
	
	Если Найти(ВерсияИСЭСФ, "5.0.0") <> 0 Тогда
		ФабрикаInvoiceInfo = ФабрикаInvoiceInfo_Версия2(); // Фабрика для приема сообщений с секцией CDATA
	КонецЕсли;	
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	limit = ?(ПараметрыМетода.Свойство(ВРег("limit")), ПараметрыМетода.limit, "50"); 
	lastEventId = ?(ПараметрыМетода.Свойство(ВРег("lastEventId")), ПараметрыМетода.lastEventId, "0"); // для 4.0
	lastInvoiceId = ?(ПараметрыМетода.Свойство(ВРег("lastInvoiceId")), ПараметрыМетода.lastInvoiceId, "0"); // для 5.0
	lastEventDate = Дата(2010,01,01); // Используется только в 5.0. Пустую дату передавать нельзя, поэтому 0001 год не используется. Ставим 2010 (время до ЭСФ) так же как в форме синхронизации
	// если в форме синхронизации указана дата, берем ее.
	// если даты нет - берем дату из установленного параметра. Во время получаения пакетов сюда будет приходить
	// строковое представление даты lastEventDate их результаты предыдущего запроса (с милисекундами)				
	Если ПараметрыМетода.Свойство(ВРег("ДатаНачалаСинхронизации")) и ТипЗнч(ПараметрыМетода.ДатаНачалаСинхронизации) = Тип("Дата") Тогда
		lastEventDate = ПараметрыМетода.ДатаНачалаСинхронизации;		
	ИначеЕсли ПараметрыМетода.Свойство(ВРег("lastEventDate")) Тогда
		lastEventDate = ПараметрыМетода.lastEventDate;
	КонецЕсли;			
	
	Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
		ШаблонЗапроса = ПолучитьМакет("ЗапросQueryUpdates_Версия1").ПолучитьТекст();			
	Иначе		
		ШаблонЗапроса = ПолучитьМакет("ЗапросQueryUpdates_Версия2").ПолучитьТекст();				
	КонецЕсли;
		
	ПредыдущийLastEventId = Неопределено;
	ПредыдущийLastEventDate = Неопределено;
	ПредыдущийlastInvoiceId = Неопределено;
	ПоследнийБлок = Ложь; // в 5.0 ориентируемся на этот маркер запроса, так как сервер возвращает дату с милисекундами, а Платформа округляет дату до секунд	
	Пока НЕ ПоследнийБлок И (lastEventId <> ПредыдущийLastEventId ИЛИ LastEventDate<>ПредыдущийLastEventDate ИЛИ lastInvoiceId<>ПредыдущийlastInvoiceId) Цикл
		
		ПредыдущийLastEventId = lastEventId;
		ПредыдущийLastEventDate = LastEventDate;
		ПредыдущийlastInvoiceId = lastInvoiceId;
		
		ЗапросXML = ШаблонЗапроса;
		ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
		ЗапросXML = СтрЗаменить(ЗапросXML, "[clientId]", ЭСФСервер.ИдентификаторКлиентаИСЭСФ());
		ЗапросXML = СтрЗаменить(ЗапросXML, "[direction]", ЭСФКлиентСервер.НаправлениеИСЭСФ(НаправлениеЭСФ));
		ЗапросXML = СтрЗаменить(ЗапросXML, "[limit]", limit);
		ЗапросXML = СтрЗаменить(ЗапросXML, "[lastEventId]", lastEventId); // 4.0
				
		// в версии 5.0	 идентификаци по двум параметрам
		ЗапросXML = СтрЗаменить(ЗапросXML, "[lastInvoiceId]", lastInvoiceId); // 5.0
		Если ТипЗнч(lastEventDate) = Тип("Дата") Тогда
			// в формате 2017-09-16T09:40:30+06:00
			ЗапросXML = СтрЗаменить(ЗапросXML, "[lastEventDate]", ЗаписатьДатуJSON(lastEventDate,ФорматДатыJSON.ISO,ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
		Иначе
			ЗапросXML = СтрЗаменить(ЗапросXML, "[lastEventDate]", lastEventDate); // Запись без преобразования, чтобы не потерять милисекунды в процессе обхода порций
		КонецЕсли;
				
		ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаInvoiceService(),,ВерсияИСЭСФ);
		
		ИнформацияОбОшибке = Неопределено;
		Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
			
			ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
			
			invoiceInfoList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.queryUpdatesResponse.invoiceInfoList, "invoiceInfo", Неопределено);				
			
			Если ТолькоСоздатьОбновитьФайлы Тогда
				СоздатьОбновитьПрисоединенныеФайлыСуществующихЭСФ(invoiceInfoList, ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка);
			Иначе
				МассивИсключаемыхИД = Новый Массив;
				СоздатьОбновитьПолучаемыеЭСФ(InvoiceInfoList, НаправлениеЭСФ, ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, Ложь, МассивИсключаемыхИД, Истина, МассивЭСФДляПолученияИдентификаторовТоваров, ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.Пользователь); 
				СформироватьМассивIDДляПодтвержденияПолучениеВходящихЭСФ(InvoiceInfoList, МассивИдентификаторовДляОбновленияСтатусаПриема);
				Для Каждого ИД Из МассивИсключаемыхИД Цикл
					ИндексЭлемента = МассивИдентификаторовДляОбновленияСтатусаПриема.Найти(ИД);
					Если ИндексЭлемента <> Неопределено Тогда
						МассивИдентификаторовДляОбновленияСтатусаПриема.Удалить(ИндексЭлемента);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Сохранение  параметров
			lastEventId = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.queryUpdatesResponse, "lastEventId", 0);
			ПоследнийБлок = XMLЗначение(Тип("Булево"),ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.queryUpdatesResponse,"lastBlock", Истина));			
			lastEventDate = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.queryUpdatesResponse, "lastEventDate",0); 
			lastInvoiceId = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.queryUpdatesResponse, "lastInvoiceId",0); 
			
			ЭСФСервер.СохранитьПараметрыМетода(
						ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, 
						ВРег("queryUpdates"), 
						НаправлениеЭСФ, 
						ВРег("lastEventId"), 
						Формат(lastEventId, "ЧН=0; ЧГ="));
					
			Если Найти(ВерсияИСЭСФ, "5.0.0") <> 0 Тогда
				
				ПараметрДата = XMLЗначение(Тип("Дата"), lastEventDate);
				Если ТипЗнч(ПараметрДата) = Тип("Дата") Тогда
					//в регистр записываем секундой раньше, чтобы не "потерять" пакеты из-за округлений миллисекундов, возвращаемых сервером
					ПараметрДата = ПараметрДата - 1;
				КонецЕсли;
				
				ЭСФСервер.СохранитьПараметрыМетода(
						ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, 
						ВРег("queryUpdates"), 
						НаправлениеЭСФ, 
						ВРег("lastEventDate"), 
						ПараметрДата);
						
				ЭСФСервер.СохранитьПараметрыМетода(
						ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, 
						ВРег("queryUpdates"), 
						НаправлениеЭСФ, 
						ВРег("lastInvoiceId"), 
						lastInvoiceId);
			КонецЕсли;

			Если ПолучитьОднуПорцию Тогда
				//чтобы не возникало зацикливания
				ПоследнийБлок = Истина;
				Прервать;
			КонецЕсли;
				  
		ИначеЕсли ЭтоМодульнаяОшибкаСессияЗакрыта(ОтветXML) Тогда
				
			ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
			ПредыдущийLastEventId = Неопределено;
			ПредыдущийLastEventDate = Неопределено;			
			ПредыдущийlastInvoiceId = Неопределено;			
		Иначе
			
			ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ОбменЭСФ.ПолучитьНовыеЭСФ'"), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ВызватьИсключение НСтр("ru = 'При получении новых ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтоПоследняяПорция = ?(ПоследнийБлок ИЛИ (lastEventId = ПредыдущийLastEventId И LastEventDate = ПредыдущийLastEventDate И lastInvoiceId = ПредыдущийlastInvoiceId), Истина, Ложь);
			
	Возврат ЭтоПоследняяПорция;
	
КонецФункции

// См. ЭСФСервер.СоздатьОбновитьПолучаемыеЭСФ()
Процедура СоздатьОбновитьПолучаемыеЭСФ(Знач InvoiceInfoList, Знач НаправлениеЭСФ, Знач СтруктурнаяЕдиница, Знач УчитыватьВсеСтатусыЭСФ, МассивИсключаемыхИД = Неопределено, Знач Провести = Ложь, МассивЭСФДляПолученияИдентификаторовТоваров = Неопределено, Пользователь = Неопределено) Экспорт
	
	Если InvoiceInfoList = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	InvoiceInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(InvoiceInfoList);
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		МассивЭСФ = НовыйМассивЗагружаемыхЭСФ(InvoiceInfoList, СтруктурнаяЕдиница, Ложь, УчитыватьВсеСтатусыЭСФ, Пользователь);
		
		// Создать массив новых ЭСФ (которых еще нет в ИБ)
		// для заполнения ссылочных полей по текстовым и числовым представлениям.
		МассивНовыхЭСФ = Новый Массив;
		Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
			Если ОбъектЭСФ.Ссылка.Пустая() Тогда
				МассивНовыхЭСФ.Добавить(ОбъектЭСФ);
			КонецЕсли;
		КонецЦикла;
		
		// Создать коллекцию старых ЭСФ (которые уже были в ИБ)
		// содержащую объекты ЭСФ до обновления и после обновления,
		// коллекция необходима для восстановления ссылочных полей.
		МассивСтарыхЭСФ = Новый Массив;
		Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
			Если НЕ ОбъектЭСФ.Ссылка.Пустая() Тогда
				КопияОбъектаЭСФ = ОбъектЭСФ.Скопировать();
				Структура = Новый Структура;
				Структура.Вставить("ИсходныйОбъектЭСФ", КопияОбъектаЭСФ);
				Структура.Вставить("ОбновленныйОбъектЭСФ", ОбъектЭСФ);
				МассивСтарыхЭСФ.Добавить(Структура);
			КонецЕсли;
		КонецЦикла;
		
		// Очистить старые документы ЭСФ.
		Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
			Если НЕ ОбъектЭСФ.Ссылка.Пустая() Тогда
				//ЭСФСервер.ОчиститьОбъект(ОбъектЭСФ, "Идентификатор, СтруктурноеПодразделение, Склад, СчетФактура, ФайлЭСФ, Автор, Комментарий, СНТ, ОтражаетсяВВС");
				ЭСФСервер.ОчиститьОбъект(ОбъектЭСФ, "Идентификатор, СтруктурноеПодразделение, Склад, СчетФактура, ФайлЭСФ, Автор, Комментарий, ОтражаетсяВВС");
			КонецЕсли;
		КонецЦикла;
		
		// Записать старые и новые документы ЭСФ.
		МассивПропускаемыхЭСФ = Новый Массив;
		
		Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
			InvoiceInfo = НайтиInvoiceInfoПоId(InvoiceInfoList, ОбъектЭСФ.Идентификатор);
			РегНомер = "Неопределен";
			Попытка
				РегНомер = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "registrationNumber", "");
				ЗаполнитьЭСФ(InvoiceInfo, СтруктурнаяЕдиница, НаправлениеЭСФ, ОбъектЭСФ);
			Исключение
				СообщениеПользователя = Новый СообщениеПользователю;
				
				ТекстСообщ = НСтр("ru = 'Не удалось разобрать документ с идентификатором %1 и регистрационным номером %2 по причине не соответствия ЭСФ формату.'");
				ТекстСообщ = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщ, ОбъектЭСФ.Идентификатор, РегНомер);
				
				СообщениеПользователя.Текст = ТекстСообщ;
				СообщениеПользователя.Сообщить();
				
				МассивПропускаемыхЭСФ.Добавить(ОбъектЭСФ);
				Если МассивИсключаемыхИД <> Неопределено Тогда
					МассивИсключаемыхИД.Добавить(ОбъектЭСФ.Идентификатор);
				КонецЕсли;	
			КонецПопытки;	
		КонецЦикла;
		
		Для Каждого ОбъектЭСФ Из МассивПропускаемыхЭСФ Цикл
			ИндексЭлемента = МассивЭСФ.Найти(ОбъектЭСФ);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивЭСФ.Удалить(ИндексЭлемента);
			КонецЕсли;
			ИндексЭлемента = МассивНовыхЭСФ.Найти(ОбъектЭСФ);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивНовыхЭСФ.Удалить(ИндексЭлемента);
			КонецЕсли;
		КонецЦикла;
		
		// Записать старые и новые документы ЭСФ.
		Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
			Если ЗначениеЗаполнено(ОбъектЭСФ.Дата) И ЗначениеЗаполнено(ОбъектЭСФ.ДатаОборота) Тогда
				ОбъектЭСФ.Записать();
			Иначе
				Текст = НСтр("ru = 'Не записан документ с регистрационным номером %1 по причине: 
							|%2,
							|%3'");
				Причина1 = "";
				Причина2 = "";
				Если Не ЗначениеЗаполнено(ОбъектЭСФ.Дата) Тогда
					Причина1 = НСтр("ru = '- не удалось определить дату выписки'");
				КонецЕсли;	
				Если Не ЗначениеЗаполнено(ОбъектЭСФ.ДатаОборота) Тогда
					Причина2 = НСтр("ru = '- не удалось определить дату оборота'");
				КонецЕсли;	
				Текст = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, ОбъектЭСФ.РегистрационныйНомер, Причина1, Причина2);
				
				СообщениеПользователя = Новый СообщениеПользователю;
				СообщениеПользователя.Текст = Текст;
				СообщениеПользователя.Сообщить();
				
				МассивПропускаемыхЭСФ.Добавить(ОбъектЭСФ);
				Если МассивИсключаемыхИД <> Неопределено Тогда
					МассивИсключаемыхИД.Добавить(ОбъектЭСФ.Идентификатор);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого ОбъектЭСФ Из МассивПропускаемыхЭСФ Цикл
			ИндексЭлемента = МассивЭСФ.Найти(ОбъектЭСФ);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивЭСФ.Удалить(ИндексЭлемента);
			КонецЕсли;
			ИндексЭлемента = МассивНовыхЭСФ.Найти(ОбъектЭСФ);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивНовыхЭСФ.Удалить(ИндексЭлемента);
			КонецЕсли;
		КонецЦикла;	
			
		СоздатьОбновитьПрисоединенныеXMLФайлыЭСФ(МассивЭСФ, InvoiceInfoList);
		
		ЗаполнитьСсылочныеРеквизитыДокументовЭСФ(Неопределено, Неопределено, Неопределено, НаправлениеЭСФ, МассивНовыхЭСФ);
		ВосстановитьСсылочныеРеквизитыДокументовЭСФ(МассивСтарыхЭСФ);
		

		// Повторно записать старые и новые документы ЭСФ.
		Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
			
			ОбъектЭСФ.Записать();

		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		


		УстановитьПривилегированныйРежим(Ложь);
		
		Если ТипЗнч(МассивЭСФДляПолученияИдентификаторовТоваров) = Тип("Массив") Тогда
			Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
				МассивЭСФДляПолученияИдентификаторовТоваров.Добавить(ОбъектЭСФ.Ссылка);
			КонецЦикла
		КонецЕсли;	
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.СоздатьОбновитьПолучаемыеЭСФ'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры
                                       
Процедура СоздатьОбновитьПрисоединенныеФайлыСуществующихЭСФ(Знач InvoiceInfoList, Знач СтруктурнаяЕдиница)
	
	Если InvoiceInfoList = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	InvoiceInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(InvoiceInfoList);
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		// Найти старые документы ЭСФ.
		МассивЭСФ = НовыйМассивЗагружаемыхЭСФ(InvoiceInfoList, СтруктурнаяЕдиница, Истина, Ложь);
		
		СоздатьОбновитьПрисоединенныеXMLФайлыЭСФ(МассивЭСФ, InvoiceInfoList);
		
		// Если файла не было, то в ЭСФ заполняется реквизит ФайлЭСФ.
		// Поэтому необходимо повторно записать старые документы ЭСФ.
		Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл						
			ОбъектЭСФ.Записать();			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.СоздатьОбновитьПрисоединенныеФайлыСуществующихЭСФ'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// См. ЭСФСервер.ОбновитьСтатусыЭСФПоИдентификаторам()
Функция ОбновитьСтатусыЭСФПоИдентификаторам(Знач МассивИдентификаторовЭСФ, Знач НаправлениеЭСФ, Знач ПрофильИСЭСФ, ИдентификаторСессии) Экспорт
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	СтруктурнаяЕдиница = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка;
	
	Результат = Новый Соответствие;	
	
	idList = "";	
	Для Каждого ИдентификаторЭСФ Из МассивИдентификаторовЭСФ Цикл
		Если ЗначениеЗаполнено(ИдентификаторЭСФ) Тогда
			idList = idList + "<id>" + ИдентификаторЭСФ + "</id>";
		КонецЕсли;	
	КонецЦикла;
	
	Если ПустаяСтрока(idList) Тогда
		Возврат Результат;
	КонецЕсли;	
		
	// Сформировать запрос на получение статусов по идентификаторам.
	ЗапросXML = ПолучитьМакет("ЗапросQueryInvoiceSummaryById").ПолучитьТекст();	
	ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
	ЗапросXML = СтрЗаменить(ЗапросXML, "[idList]", idList);
	
	// Выполнить запрос на получение статусов по идентификаторам.
	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаInvoiceService()); 
	
	// Обработать результат запроса на получение статусов по идентификаторам.
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		Для Каждого ИдентификаторЭСФ Из МассивИдентификаторовЭСФ Цикл
			Результат.Вставить(ИдентификаторЭСФ, Неопределено);	
		КонецЦикла;
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		
		invoiceSummaryList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.queryInvoiceSummaryByIdResponse.invoiceSummaryList, "invoiceSummary", Неопределено);
		                                               
		Если invoiceSummaryList <> Неопределено Тогда
			
			invoiceSummaryList = ЭСФСервер.СписокXDTOИзОбъектXDTO(invoiceSummaryList);
			
			МассивИдентификаторовОшибочныхЭСФ = Новый Массив;
			// Заполнить Результат.
			Для Индекс = 0 По invoiceSummaryList.Количество() - 1 Цикл
				invoiceSummary = invoiceSummaryList.Получить(Индекс);
				ДанныеСтатуса = ДанныеСтатусаInvoice(invoiceSummary);
				Результат.Вставить(ДанныеСтатуса.Идентификатор, ДанныеСтатуса);
				Если ДанныеСтатуса.Статус = Перечисления.СтатусыЭСФ.Ошибочный Тогда
					МассивИдентификаторовОшибочныхЭСФ.Добавить(ДанныеСтатуса.Идентификатор);
				КонецЕсли;
			КонецЦикла;
			//Получим ошибки ошибочных ЭСФ
			Если МассивИдентификаторовОшибочныхЭСФ.Количество() > 0 Тогда
				РезультатОшибочныхЭСФ = ПолучитьОшибкиЭСФПоИдентификаторам(МассивИдентификаторовОшибочныхЭСФ, Неопределено, ПрофильИСЭСФ, ИдентификаторСессии);
				Результат = ОбъединитьРезультатыПолученияСтатусовИОшибок(Результат, РезультатОшибочныхЭСФ);	
			КонецЕсли;

			// Обновить документы ЭСФ.
			ОтразитьИзмененияСтатусовЭСФ(Результат, СтруктурнаяЕдиница);
			
		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОбновитьСтатусыЭСФПоИдентификаторам'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При получении статусов ЭСФ по идентификаторам возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОшибкиЭСФПоИдентификаторам(Знач МассивИдентификаторовЭСФ, Знач НаправлениеЭСФ, Знач ПрофильИСЭСФ, ИдентификаторСессии, Знач ОбновитьОшибкиВДокументах = Ложь) Экспорт
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	СтруктурнаяЕдиница = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка;
	
	Результат = Новый Соответствие;	
	
	idList = "";	
	Для Каждого ИдентификаторЭСФ Из МассивИдентификаторовЭСФ Цикл
		Если ЗначениеЗаполнено(ИдентификаторЭСФ) Тогда
			idList = idList + "<id>" + ИдентификаторЭСФ + "</id>";
		КонецЕсли;	
	КонецЦикла;
	
	Если ПустаяСтрока(idList) Тогда
		Возврат Результат;
	КонецЕсли;	
		
	// Сформировать запрос на получение статусов по идентификаторам.
	ЗапросXML = ПолучитьМакет("ЗапросInvoiceErrorById").ПолучитьТекст();	
	ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
	ЗапросXML = СтрЗаменить(ЗапросXML, "[idList]", idList);
	
	// Выполнить запрос на получение статусов по идентификаторам.
	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаInvoiceService()); 
	
	// Обработать результат запроса на получение статусов по идентификаторам.
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		Для Каждого ИдентификаторЭСФ Из МассивИдентификаторовЭСФ Цикл
			Результат.Вставить(ИдентификаторЭСФ, Неопределено);	
		КонецЦикла;
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		
		invoiceErrorList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.queryInvoiceErrorByIdResponse.invoiceErrorList, "invoiceError", Неопределено);
                                               
		Если invoiceErrorList <> Неопределено Тогда
			
			invoiceErrorList = ЭСФСервер.СписокXDTOИзОбъектXDTO(invoiceErrorList);
			
			МассивИдентификаторовОшибочныхЭСФ = Новый Массив;
			// Заполнить Результат.
			Для Индекс = 0 По invoiceErrorList.Количество() - 1 Цикл
				invoiceError = invoiceErrorList.Получить(Индекс);
				ДанныеОшибки = ДанныеОшибкиЭСФ(invoiceError);
				Результат.Вставить(ДанныеОшибки.Идентификатор, ДанныеОшибки);
			КонецЦикла;
			
			//ЗаполнитьРезультатПолученияОшибокUForm(uFormErrorInfoList, ИмяЭлемента, Результат);

			
			// Обновить документы ЭСФ.
			Если ОбновитьОшибкиВДокументах Тогда
				ОтразитьИзмененияОшибокЭСФ(Результат, СтруктурнаяЕдиница);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОбновитьСтатусыЭСФПоИдентификаторам'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При получении статусов ЭСФ по идентификаторам возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеОшибкиЭСФ(Знач invoiceErrorListXDTO, ТаблицаЛокализацииОшибок = Неопределено)
	                 
	ДанныеОшибки = Новый Структура;
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Текст", Метаданные.Документы.ЭСФ.ТабличныеЧасти.Ошибки.Реквизиты.Текст.Тип);
	ТаблицаОшибок.Колонки.Добавить("Поле",  Метаданные.Документы.ЭСФ.ТабличныеЧасти.Ошибки.Реквизиты.Поле.Тип);
	ДанныеОшибки.Вставить("Идентификатор", Формат(invoiceErrorListXDTO.invoiceId, "ЧГ="));
	
	
	errors = ЭСФСервер.ПолучитьСвойство(invoiceErrorListXDTO.errors, "error", Неопределено);
	Если errors <> Неопределено Тогда
		errors = ЭСФСервер.СписокXDTOИзОбъектXDTO(errors);
		Для ИндексОшибки = 0 По errors.Количество() - 1 Цикл
			error = errors.Получить(ИндексОшибки);
				ОшибкаПоле = ЭСФСервер.ПолучитьСвойство(error, "property", "");
				// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
				// с сервера на клиент приводи к ошибке мутабельного значения.
				Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
					ОшибкаПоле = "";
				КонецЕсли;
				ОшибкаТекст = ЭСФСервер.ПолучитьСвойство(error, "text", "");
				Если ПустаяСтрока(ОшибкаТекст) Тогда
					Если ТаблицаЛокализацииОшибок = Неопределено Тогда
						ТаблицаЛокализацииОшибок = ЭСФСерверПовтИсп.НоваяТаблицаОшибокИСЭСФ();
					КонецЕсли;
					ОшибкаКод = ЭСФСервер.ПолучитьСвойство(error, "errorCode", "");
					ОшибкаТекст = ЭСФСервер.ИнформацияОбОшибкеБизнесЛогикиИСЭСФ(ТаблицаЛокализацииОшибок, ОшибкаКод);
					ОшибкаТекст = ОшибкаТекст.ТекстИБ;
				КонецЕсли;
				СтрокаТаблицы = ТаблицаОшибок.Добавить();
				СтрокаТаблицы.Поле = ОшибкаПоле;
				СтрокаТаблицы.Текст = ОшибкаТекст;
			
			КонецЦикла;
		ДанныеОшибки.Вставить("Ошибки", ТаблицаОшибок);

	КонецЕсли;
	
	Возврат ДанныеОшибки;
	
 КонецФункции

Процедура ЗаполнитьЭСФ(Знач InvoiceInfo, Знач СтруктурнаяЕдиница, Знач НаправлениеЭСФ, ЭСФ) Экспорт
	
	ВерсияЭСФ = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "version", "");
	Если ПустаяСтрока(ВерсияЭСФ) Тогда
		ВерсияЭСФ = "InvoiceV1";
	КонецЕсли;	
	
	Если ВерсияЭСФ = "InvoiceV1" Тогда
		ЗаполнитьЭСФ_Версия1(InvoiceInfo, СтруктурнаяЕдиница, НаправлениеЭСФ, ЭСФ);
	Иначе
		ЗаполнитьЭСФ_Версия2(InvoiceInfo, СтруктурнаяЕдиница, НаправлениеЭСФ, ЭСФ);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьЭСФ_Версия1(Знач InvoiceInfo, Знач СтруктурнаяЕдиница, Знач НаправлениеЭСФ, ЭСФ) Экспорт
	
	Invoice = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoice", "");
	Если ПустаяСтрока(Invoice) Тогда
		ТекстСчетаФактуры = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoiceBody", "");
		Invoice = ?(ПустаяСтрока(ТекстСчетаФактуры), "", ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстСчетаФактуры, ФабрикаXDTO));
	КонецЕсли;	
	
	Если ПустаяСтрока(Invoice) Тогда
		Возврат;
	КонецЕсли;	
	
	// Раздел А. Общий раздел.
	ЭСФ.ВерсияБланкаЭСФ = 1;
	ЭСФ.Дата = ЭСФСервер.ДатаИБ(Invoice.date);
	ЭСФ.Номер = ЭСФСервер.ПолучитьСвойство(Invoice, "num", "");
    ЭСФ.РегистрационныйНомер = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "registrationNumber", "");	
	ЭСФ.ДатаОборота = ЭСФСервер.ДатаИБ(Invoice.turnoverDate);
	ЭСФ.Вид = ЭСФКлиентСервер.ВидИБ(Invoice.invoiceType);
	ЭСФ.Причина = ПричинаИБ(ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "cancelReason", ""));	
	
	
	relatedInvoice = ЭСФСервер.ПолучитьСвойство(Invoice, "relatedInvoice", Неопределено);
	Если relatedInvoice <> Неопределено Тогда
		ЭСФ.СвязанныйЭСФДата = ЭСФСервер.ДатаИБ(relatedInvoice.date);
		ЭСФ.СвязанныйЭСФНомер = relatedInvoice.num;
		ЭСФ.СвязанныйЭСФРегистрационныйНомер = ЭСФСервер.ПолучитьСвойство(relatedInvoice, "registrationNumber", "");
	КонецЕсли;
	
	// Раздел B. Реквизиты поставщика.
	
	sellerList = ЭСФСервер.СписокXDTOИзОбъектXDTO(Invoice.sellers.seller);
	Для Каждого seller Из sellerList Цикл	
		
		Поставщик = ЭСФ.Поставщики.Добавить();
		
		Поставщик.ПоставщикИдентификатор = ЭСФСервер.ПолучитьСвойство(seller, "tin", "");
		Поставщик.ПоставщикНаименование  = ЭСФСервер.ПолучитьСвойство(seller, "name", "");
		Поставщик.Адрес = ЭСФСервер.ПолучитьСвойство(seller, "address", "");
		Поставщик.СерияСвидетельстваПоНДС = ЭСФСервер.ПолучитьСвойство(seller, "certificateSeries", "");
		Поставщик.НомерСвидетельстваПоНДС = ЭСФСервер.ПолучитьСвойство(seller, "certificateNum", "");				
		
		statuses = ЭСФСервер.ПолучитьСвойство(seller, "statuses", Неопределено);
		Если statuses <> Неопределено Тогда	
			
			statusList = ЭСФСервер.ПолучитьСвойство(statuses, "status", Неопределено);
			
			Если statusList <> Неопределено Тогда	
				
				statusList = ЭСФСервер.СписокXDTOИзОбъектXDTO(statusList);
				
				СоответствиеСтатусовПоставщика = Новый Соответствие;
				СоответствиеСтатусовПоставщика.Вставить("COMMITTENT", "Комитент");
				СоответствиеСтатусовПоставщика.Вставить("BROKER", "Комиссионер");
				СоответствиеСтатусовПоставщика.Вставить("FORWARDER", "Экспедитор");
				СоответствиеСтатусовПоставщика.Вставить("LESSOR", "Лизингодатель");
				СоответствиеСтатусовПоставщика.Вставить("JOINT_ACTIVITY_PARTICIPANT", "УчастникСовместнойДеятельности");
				СоответствиеСтатусовПоставщика.Вставить("EXPORTER", "ЭкспортерИлиУчастникСРП");
				СоответствиеСтатусовПоставщика.Вставить("LAWYER", "Адвокат");
				СоответствиеСтатусовПоставщика.Вставить("BAILIFF", "СудебныйИсполнитель");
				СоответствиеСтатусовПоставщика.Вставить("MEDIATOR", "Медиатор");
				СоответствиеСтатусовПоставщика.Вставить("NOTARY", "Нотариус");
				
				Для Каждого status Из statusList Цикл
					ИмяРеквизита = СоответствиеСтатусовПоставщика[status];
					Если ИмяРеквизита <> Неопределено Тогда
						Поставщик[ИмяРеквизита] = Истина;	
					Иначе
						ЗаписьЖурналаРегистрации("ЭСФ. Неизвестный статус контрагента", УровеньЖурналаРегистрации.Ошибка, , , status);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Поставщик.ДокументПодтверждающийПоставкуНомер = ЭСФСервер.ПолучитьСвойство(seller, "deliveryDocNum", "");
		Поставщик.ДокументПодтверждающийПоставкуДата = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(seller, "deliveryDocDate", "01.01.0001"));
		Поставщик.ДополнительныеСведения = ЭСФСервер.ПолучитьСвойство(seller, "trailer", "");
		Поставщик.КБе = ЭСФСервер.ПолучитьСвойство(seller, "kbe", "");
		Поставщик.ИИК = ЭСФСервер.ПолучитьСвойство(seller, "iik", "");
		Поставщик.БИК = ЭСФСервер.ПолучитьСвойство(seller, "bik", "");
		Поставщик.НаименованиеБанка = ЭСФСервер.ПолучитьСвойство(seller, "bank", "");
		
	КонецЦикла;
	
	// Раздел C. Реквизиты получателя.
	
	customerList = ЭСФСервер.СписокXDTOИзОбъектXDTO(Invoice.customers.customer);
	Для Каждого customer Из customerList Цикл
		
		Получатель = ЭСФ.Получатели.Добавить();
		
		Получатель.ПолучательИдентификатор = ЭСФСервер.ПолучитьСвойство(customer, "tin", "");
		Получатель.ПолучательНаименование = ЭСФСервер.ПолучитьСвойство(customer, "name", "");
		Получатель.Адрес = ЭСФСервер.ПолучитьСвойство(customer, "address", "");
		Получатель.СерияСвидетельстваПоНДС = ЭСФСервер.ПолучитьСвойство(customer, "certificateSeries", "");
		Получатель.НомерСвидетельстваПоНДС = ЭСФСервер.ПолучитьСвойство(customer, "certificateNum", "");				
		Получатель.ДополнительныеСведения = ЭСФСервер.ПолучитьСвойство(customer, "trailer", "");
		
		statuses = ЭСФСервер.ПолучитьСвойство(customer, "statuses", Неопределено);		
		Если statuses <> Неопределено Тогда
			
			statusList = ЭСФСервер.ПолучитьСвойство(statuses, "status", Неопределено);
			
			Если statusList <> Неопределено Тогда	
				
				statusList = ЭСФСервер.СписокXDTOИзОбъектXDTO(statusList);
				
				СоответствиеСтатусовПолучателя = Новый Соответствие;
				СоответствиеСтатусовПолучателя.Вставить("COMMITTENT", "Комитент");
				СоответствиеСтатусовПолучателя.Вставить("BROKER", "Комиссионер");
				СоответствиеСтатусовПолучателя.Вставить("LESSEE", "Лизингодатель");
				СоответствиеСтатусовПолучателя.Вставить("JOINT_ACTIVITY_PARTICIPANT", "УчастникСовместнойДеятельности");
				СоответствиеСтатусовПолучателя.Вставить("PUBLIC_OFFICE", "ГосударственноеУчреждение");
				СоответствиеСтатусовПолучателя.Вставить("NONRESIDENT", "Нерезидент");
				СоответствиеСтатусовПолучателя.Вставить("LAWYER", "Адвокат");
				СоответствиеСтатусовПолучателя.Вставить("BAILIFF", "СудебныйИсполнитель");
				СоответствиеСтатусовПолучателя.Вставить("MEDIATOR", "Медиатор");
				СоответствиеСтатусовПолучателя.Вставить("NOTARY", "Нотариус");
				
				Для Каждого status Из statusList Цикл
					ИмяРеквизита = СоответствиеСтатусовПолучателя[status];
					Если ИмяРеквизита <> Неопределено Тогда
						Получатель[ИмяРеквизита] = Истина;	
					Иначе
						ЗаписьЖурналаРегистрации("ЭСФ. Неизвестный статус контрагента", УровеньЖурналаРегистрации.Ошибка, , , status);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел D. Реквизиты грузоотправителя и грузополучателя.
	
	consignor = ЭСФСервер.ПолучитьСвойство(Invoice, "consignor", Неопределено);
	Если consignor <> Неопределено Тогда
		ЭСФ.ГрузоотправительИдентификатор = ЭСФСервер.ПолучитьСвойство(consignor, "tin", "");
		ЭСФ.ГрузоотправительНаименование = ЭСФСервер.ПолучитьСвойство(consignor, "name", ""); 
		ЭСФ.АдресОтправки = ЭСФСервер.ПолучитьСвойство(consignor, "address", ""); 
	КонецЕсли;
	
	consignee = ЭСФСервер.ПолучитьСвойство(Invoice, "consignee", Неопределено);
	Если consignee <> Неопределено Тогда
		ЭСФ.ГрузополучательИдентификатор = ЭСФСервер.ПолучитьСвойство(consignee, "tin", "");
		ЭСФ.ГрузополучательНаименование = ЭСФСервер.ПолучитьСвойство(consignee, "name", ""); 
		ЭСФ.АдресДоставки = ЭСФСервер.ПолучитьСвойство(consignee, "address", ""); 		
	КонецЕсли;
	
	// Раздел E. Условия поставки.
	
	deliveryTerm = ЭСФСервер.ПолучитьСвойство(Invoice, "deliveryTerm", Неопределено);	
	Если deliveryTerm <> Неопределено Тогда
		ЭСФ.ДоговорПоставкиНомер             = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "contractNum", "");
		ЭСФ.ДоговорПоставкиДата              = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(deliveryTerm, "contractDate", "01.01.0001"));
	  	ЭСФ.ДоговорПоставкиУсловияОплаты     = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "term", "");
	  	ЭСФ.ДоговорПоставкиСпособОтправления = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "exerciseWay", "");
		ЭСФ.ДоверенностьНаПоставкуНомер      = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "warrant", "");
		ЭСФ.ДоверенностьНаПоставкуДата       = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(deliveryTerm, "warrantDate", "01.01.0001"));
		ЭСФ.ПунктНазначения                  = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "destination", "");
	КонецЕсли;
	
	// Раздел F. Реквизиты государственного учреждения.
	
	publicOffice = ЭСФСервер.ПолучитьСвойство(Invoice, "publicOffice", Неопределено);	
	Если publicOffice <> Неопределено Тогда
		ЭСФ.ГосучреждениеИИК               = ЭСФСервер.ПолучитьСвойство(publicOffice, "iik", "");
		ЭСФ.ГосучреждениеКодТоваров        = ЭСФСервер.ПолучитьСвойство(publicOffice, "productCode", "");
		ЭСФ.ГосучреждениеНазначениеПлатежа = ЭСФСервер.ПолучитьСвойство(publicOffice, "payPurpose", "");
		ЭСФ.ГосучреждениеБИК               = ЭСФСервер.ПолучитьСвойство(publicOffice, "bik", "");
	КонецЕсли;

	// Раздел G. Данные по товарам (работам, услугам).
	
	ЭСФ.ВалютаКод = ЭСФСервер.ПолучитьСвойство(Invoice.productSet, "currencyCode", "KZT");
	ЭСФ.КурсВалюты = ЭСФСервер.ПолучитьСвойство(Invoice.productSet, "currencyRate", 1);
	
	
	СписокТоваров = ЭСФСервер.ПолучитьСвойство(Invoice.productSet, "product", Неопределено);
	Если СписокТоваров = Неопределено Тогда
		//СписокТоваров = Invoice.productSet.product;
		СписокТоваров = Invoice.productSet.products.product
	КонецЕсли;	
	СписокТоваров = ЭСФСервер.СписокXDTOИзОбъектXDTO(СписокТоваров);
	
	Для Каждого ТоварXDTO Из СписокТоваров Цикл
		ТоварСтрока = ЭСФ.Товары.Добавить();
		ТоварСтрока.ТоварНаименование            = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "description", "");
		ТоварСтрока.КодТНВЭД                     = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "unitCode", "");
		ТоварСтрока.ЕдиницаИзмеренияНаименование = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "unitNomenclature", "");
		ТоварСтрока.Количество                   = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "quantity", 0);
		ТоварСтрока.Цена                         = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "unitPrice", 0);
		ТоварСтрока.СуммаБезНалогов              = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "priceWithoutTax", 0);
		ТоварСтрока.СтавкаАкцизаЧисло            = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "exciseRate", 0);
		ТоварСтрока.СуммаАкциза                  = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "exciseAmount", 0);
		ТоварСтрока.ОборотПоРеализации           = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "turnoverSize", 0);
		ТоварСтрока.СтавкаНДСЧисло               = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "ndsRate", 0);
		ТоварСтрока.БезНДС                       = ?(ЭСФСервер.ЕстьСвойство(ТоварXDTO, "ndsRate"), Ложь, Истина);
		ТоварСтрока.СуммаНДС                     = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "ndsAmount", 0);
		ТоварСтрока.Сумма                        = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "priceWithTax", 0);
		ТоварСтрока.НомерЗаявленияВРамкахТС      = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "applicationNumberInCustomsUnion", "");
		ТоварСтрока.ДополнительныеДанные         = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "additional", "");
	КонецЦикла;
	
	// Раздел H. Сведения по участникам СД.
	
	sellerParticipants = ЭСФСервер.ПолучитьСвойство(Invoice, "sellerParticipants", Неопределено);	
    ЗаполнитьТаблицуТоваровПоУчастникамСД(sellerParticipants, ЭСФ.ТоварыПоПоставщикам);
	
	customerParticipants = ЭСФСервер.ПолучитьСвойство(Invoice, "customerParticipants", Неопределено);	
    ЗаполнитьТаблицуТоваровПоУчастникамСД(customerParticipants, ЭСФ.ТоварыПоПолучателям);
	
	// Заполнить колонку ДоляУчастия в таблице Поставщики.
	Если ЭСФ.Поставщики.Количество() <> 0 Тогда 
		
		Если ЭСФ.Поставщики[0].УчастникСовместнойДеятельности Тогда
			
			УдалосьЗаполнитьДолиПоставщиков = ЗаполнитьДолиУчастияПоставщиков(ЭСФ);
			
			Если НЕ УдалосьЗаполнитьДолиПоставщиков Тогда
				СтрокаОшибки = ЭСФ.Ошибки.Добавить();
				СтрокаОшибки.Текст = ТекстНеУдалосьЗаполнитьДолиУчастниковСД();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Раздел I. Дополнительные сведения.
	
	ЭСФ.ДополнительныеСведения = ЭСФСервер.ПолучитьСвойство(Invoice, "addInf", "");
	
	// Прочие сведения.
	
	ЭСФ.Статус = ЭСФКлиентСервер.СтатусИБ(ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoiceStatus", ""));
	ЭСФ.ПользовательскийСтатус = ЭСФКлиентСервер.ПользовательскийСтатусИБ(ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "state", ""));
	ЭСФ.Направление = НаправлениеЭСФ;
	ЭСФ.Идентификатор = InvoiceInfo.invoiceId;
	ЭСФ.УполномоченныйСотрудник = ЭСФСервер.ПолучитьСвойство(Invoice, "operatorFullname", "");
	
	ОрганизацияИСтруктурноеПодразделение = ЭСФСервер.ОрганизацияИСтруктурноеПодразделение(СтруктурнаяЕдиница);    
    ЭСФ.Организация = ОрганизацияИСтруктурноеПодразделение.Организация;
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ЭСФ.СтруктурноеПодразделение = ОрганизацияИСтруктурноеПодразделение.СтруктурноеПодразделение;
	КонецЕсли;
	
	ЭСФ.ТипПодписи = ЭСФКлиентСервер.ТипПодписиИБ(ЭСФСервер.ПолучитьСвойство(Invoice, "signatureType", ""));
	ЭСФ.ЭЦП = ЭСФСервер.ПолучитьСвойство(Invoice, "signature", "");
	
КонецПроцедуры

Процедура ЗаполнитьЭСФ_Версия2(Знач InvoiceInfo, Знач СтруктурнаяЕдиница, Знач НаправлениеЭСФ, ЭСФ) Экспорт
	
	ТекстСчетаФактуры = InvoiceInfo.invoiceBody;
	Invoice = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстСчетаФактуры, ФабрикаXDTO);
	//Invoice = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстСчетаФактуры, КэшированнаяФабрикаInvoiceInfo_Версия2);
	
	// Раздел А. Общий раздел.
	#Область ОбщийРаздел
	ЭСФ.ВерсияБланкаЭСФ = 2;
	
	Если ЭСФ.Дата = Дата(1,1,1) ИЛИ НаправлениеЭСФ = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") ИЛИ НаправлениеЭСФ = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.ПустаяСсылка") ТОГДА
		ЭСФ.Дата = ЭСФСервер.ДатаИБ(Invoice.date);	
	КонецЕсли;
	
	ЭСФ.Номер = ЭСФСервер.ПолучитьСвойство(Invoice, "num", "");
	ЭСФ.РегистрационныйНомер = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "registrationNumber", "");	
	ЭСФ.ДатаОборота = ЭСФСервер.ДатаИБ(Invoice.turnoverDate);
	ЭСФ.Вид = ЭСФКлиентСервер.ВидИБ(Invoice.invoiceType);
	ЭСФ.Причина = ПричинаИБ(ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "cancelReason", ""));	
	ЭСФ.ДатаВыпискиНаБумажномНосителе =  ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(Invoice, "datePaper", "01.01.0001"));
	ЭСФ.ПричинаВыпискиНаБумажномНосителе = ЭСФКлиентСервер.ПричинаВыпискиНаБумагеИБ(ЭСФСервер.ПолучитьСвойство(Invoice, "reasonPaper", ""));
	
	relatedInvoice = ЭСФСервер.ПолучитьСвойство(Invoice, "relatedInvoice", Неопределено);
	Если relatedInvoice <> Неопределено Тогда
		ЭСФ.СвязанныйЭСФДата = ЭСФСервер.ДатаИБ(relatedInvoice.date);
		ЭСФ.СвязанныйЭСФНомер = relatedInvoice.num;
		ЭСФ.СвязанныйЭСФРегистрационныйНомер = ЭСФСервер.ПолучитьСвойство(relatedInvoice, "registrationNumber", "");
	КонецЕсли;
	#КонецОбласти
	
	// Раздел B. Реквизиты поставщика.
	#Область РеквизитыПоставщика
	sellerList = ЭСФСервер.СписокXDTOИзОбъектXDTO(Invoice.sellers.seller);
	Для Каждого seller Из sellerList Цикл	
		
		Поставщик = ЭСФ.Поставщики.Добавить();
		
		Поставщик.ПоставщикИдентификатор = ЭСФСервер.ПолучитьСвойство(seller, "tin", "");
		Поставщик.ПоставщикНаименование  = ЭСФСервер.ПолучитьСвойство(seller, "name", "");
		Поставщик.Адрес = ЭСФСервер.ПолучитьСвойство(seller, "address", "");
		Поставщик.СерияСвидетельстваПоНДС = ЭСФСервер.ПолучитьСвойство(seller, "certificateSeries", "");
		Поставщик.НомерСвидетельстваПоНДС = ЭСФСервер.ПолучитьСвойство(seller, "certificateNum", "");
		Поставщик.БИНРеорганизованногоЛица = ЭСФСервер.ПолучитьСвойство(seller, "reorganizedTin", "");
		Поставщик.ЯвляетсяСтруктурнымПодразделениемНерезидента = ЭСФСервер.ПолучитьСвойство(seller, "isBranchNonResident", Ложь);
		
		statuses = ЭСФСервер.ПолучитьСвойство(seller, "statuses", Неопределено);
		Если statuses <> Неопределено Тогда	
			
			statusList = ЭСФСервер.ПолучитьСвойство(statuses, "status", Неопределено);
			
			Если statusList <> Неопределено Тогда	
				
				statusList = ЭСФСервер.СписокXDTOИзОбъектXDTO(statusList);
				
				СоответствиеСтатусовПоставщика = Новый Соответствие;
				СоответствиеСтатусовПоставщика.Вставить("COMMITTENT", "Комитент");
				СоответствиеСтатусовПоставщика.Вставить("BROKER", "Комиссионер");
				СоответствиеСтатусовПоставщика.Вставить("FORWARDER", "Экспедитор");
				СоответствиеСтатусовПоставщика.Вставить("LESSOR", "Лизингодатель");
				СоответствиеСтатусовПоставщика.Вставить("JOINT_ACTIVITY_PARTICIPANT", "УчастникСовместнойДеятельности");
				СоответствиеСтатусовПоставщика.Вставить("EXPORTER", "Экспортер");
				СоответствиеСтатусовПоставщика.Вставить("SHARING_AGREEMENT_PARTICIPANT", "УчастникСРП");
				СоответствиеСтатусовПоставщика.Вставить("TRANSPORTER", "МеждународныйПеревозчик");
				СоответствиеСтатусовПоставщика.Вставить("PRINCIPAL", "Доверитель");
				СоответствиеСтатусовПоставщика.Вставить("LAWYER", "Адвокат");
				СоответствиеСтатусовПоставщика.Вставить("BAILIFF", "СудебныйИсполнитель");
				СоответствиеСтатусовПоставщика.Вставить("MEDIATOR", "Медиатор");
				СоответствиеСтатусовПоставщика.Вставить("NOTARY", "Нотариус");
				
				Для Каждого status Из statusList Цикл
					ИмяРеквизита = СоответствиеСтатусовПоставщика[status];
					Если ИмяРеквизита <> Неопределено Тогда
						Поставщик[ИмяРеквизита] = Истина;	
					Иначе
						ЗаписьЖурналаРегистрации("ЭСФ. Неизвестный статус контрагента", УровеньЖурналаРегистрации.Ошибка, , , status);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Поставщик.ДополнительныеСведения = ЭСФСервер.ПолучитьСвойство(seller, "trailer", "");
		Поставщик.КБе = ЭСФСервер.ПолучитьСвойство(seller, "kbe", "");
		Поставщик.ИИК = ЭСФСервер.ПолучитьСвойство(seller, "iik", "");
		Поставщик.БИК = ЭСФСервер.ПолучитьСвойство(seller, "bik", "");
		Поставщик.НаименованиеБанка = ЭСФСервер.ПолучитьСвойство(seller, "bank", "");
		
		Поставщик.ДоляУчастия = ЭСФСервер.ПолучитьСвойство(seller, "shareParticipation", 0);
		Поставщик.БИНФилиала = ЭСФСервер.ПолучитьСвойство(seller, "branchTin", "");
		
	КонецЦикла;
	#КонецОбласти
	
	// Раздел C. Реквизиты получателя.
	#Область РеквизитыПолучателя
	customerList = ЭСФСервер.СписокXDTOИзОбъектXDTO(Invoice.customers.customer);
	Для Каждого customer Из customerList Цикл
		
		Получатель = ЭСФ.Получатели.Добавить();
		
		Получатель.ПолучательИдентификатор = ЭСФСервер.ПолучитьСвойство(customer, "tin", "");
		Получатель.ПолучательНаименование = ЭСФСервер.ПолучитьСвойство(customer, "name", "");
		Получатель.Адрес = ЭСФСервер.ПолучитьСвойство(customer, "address", "");
		Получатель.СерияСвидетельстваПоНДС = ЭСФСервер.ПолучитьСвойство(customer, "certificateSeries", "");
		Получатель.НомерСвидетельстваПоНДС = ЭСФСервер.ПолучитьСвойство(customer, "certificateNum", "");
		Получатель.ДополнительныеСведения = ЭСФСервер.ПолучитьСвойство(customer, "trailer", "");
		Получатель.БИНФилиала = ЭСФСервер.ПолучитьСвойство(customer, "branchTin", "");
		Получатель.БИНРеорганизованногоЛица = ЭСФСервер.ПолучитьСвойство(customer, "reorganizedTin", "");
		Получатель.КодСтраны = ЭСФСервер.ПолучитьСвойство(customer, "countryCode", "");
		Получатель.ДоляУчастия = ЭСФСервер.ПолучитьСвойство(customer, "shareParticipation", 0);
		
		statuses = ЭСФСервер.ПолучитьСвойство(customer, "statuses", Неопределено);		
		Если statuses <> Неопределено Тогда
			
			statusList = ЭСФСервер.ПолучитьСвойство(statuses, "status", Неопределено);
			
			Если statusList <> Неопределено Тогда	
				
				statusList = ЭСФСервер.СписокXDTOИзОбъектXDTO(statusList);
				
				СоответствиеСтатусовПолучателя = Новый Соответствие;
				СоответствиеСтатусовПолучателя.Вставить("COMMITTENT", "Комитент");
				СоответствиеСтатусовПолучателя.Вставить("BROKER", "Комиссионер");
				СоответствиеСтатусовПолучателя.Вставить("LESSEE", "Лизингодатель");
				СоответствиеСтатусовПолучателя.Вставить("JOINT_ACTIVITY_PARTICIPANT", "УчастникСовместнойДеятельности");
				СоответствиеСтатусовПолучателя.Вставить("PUBLIC_OFFICE", "ГосударственноеУчреждение");
				СоответствиеСтатусовПолучателя.Вставить("NONRESIDENT", "НерезидентВерсия2");
				СоответствиеСтатусовПолучателя.Вставить("PRINCIPAL", "Доверитель");
				СоответствиеСтатусовПолучателя.Вставить("SHARING_AGREEMENT_PARTICIPANT", "УчастникСРП");
				СоответствиеСтатусовПолучателя.Вставить("RETAIL", "РозничнаяРеализация");
				СоответствиеСтатусовПолучателя.Вставить("INDIVIDUAL", "ФизическоеЛицо");
				СоответствиеСтатусовПолучателя.Вставить("LAWYER", "Адвокат");
				СоответствиеСтатусовПолучателя.Вставить("BAILIFF", "СудебныйИсполнитель");
				СоответствиеСтатусовПолучателя.Вставить("MEDIATOR", "Медиатор");
				СоответствиеСтатусовПолучателя.Вставить("NOTARY", "Нотариус");
				
				
				Для Каждого status Из statusList Цикл
					ИмяРеквизита = СоответствиеСтатусовПолучателя[status];
					Если ИмяРеквизита <> Неопределено Тогда
						Получатель[ИмяРеквизита] = Истина;	
					Иначе
						ЗаписьЖурналаРегистрации("ЭСФ. Неизвестный статус контрагента", УровеньЖурналаРегистрации.Ошибка, , , status);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	#КонецОбласти
	
	// Раздел D. Реквизиты грузоотправителя и грузополучателя.
	#Область РеквизитыГрузоотправителяГрузополучателя
	consignor = ЭСФСервер.ПолучитьСвойство(Invoice, "consignor", Неопределено);
	Если consignor <> Неопределено Тогда
		ЭСФ.ГрузоотправительИдентификатор = ЭСФСервер.ПолучитьСвойство(consignor, "tin", "");
		ЭСФ.ГрузоотправительНаименование = ЭСФСервер.ПолучитьСвойство(consignor, "name", ""); 
		ЭСФ.АдресОтправки = ЭСФСервер.ПолучитьСвойство(consignor, "address", ""); 
	КонецЕсли;
	
	consignee = ЭСФСервер.ПолучитьСвойство(Invoice, "consignee", Неопределено);
	Если consignee <> Неопределено Тогда
		ЭСФ.ГрузополучательИдентификатор = ЭСФСервер.ПолучитьСвойство(consignee, "tin", "");
		ЭСФ.ГрузополучательНаименование = ЭСФСервер.ПолучитьСвойство(consignee, "name", ""); 
		ЭСФ.АдресДоставки = ЭСФСервер.ПолучитьСвойство(consignee, "address", ""); 		
		ЭСФ.ГрузополучательКодСтраны = ЭСФСервер.ПолучитьСвойство(consignee, "countryCode", "");
	КонецЕсли;
	#КонецОбласти
	
	// Раздел E. Условия поставки.
	#Область УсловияПоставки
	deliveryTerm = ЭСФСервер.ПолучитьСвойство(Invoice, "deliveryTerm", Неопределено);	
	Если deliveryTerm <> Неопределено Тогда
		ЭСФ.ДоговорПоставкиНомер             = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "contractNum", "");
		ЭСФ.ДоговорПоставкиДата              = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(deliveryTerm, "contractDate", "01.01.0001"));
		ЭСФ.ДоговорПоставкиУсловияОплаты     = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "term", "");
		ЭСФ.ДоговорПоставкиСпособОтправления = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "exerciseWay", "");
		ЭСФ.ДоверенностьНаПоставкуНомер      = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "warrant", "");
		ЭСФ.ДоверенностьНаПоставкуДата       = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(deliveryTerm, "warrantDate", "01.01.0001"));
		ЭСФ.ПунктНазначения                  = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "destination", "");
		ЭСФ.ДоговорПоставкиУсловияПоставки   = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "deliveryConditionCode", "");
		ЭСФ.СпособОтправленияПоКлассификатору = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "transportTypeCode", "");
		//-=-=
		ЭСФ.УникальныйНомерВалютногоКонтроля = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "accountNumber",""); // Учетный номер (Е 27.5)
		//-=-=
	КонецЕсли;
	#КонецОбласти
	
	// Раздел F. Реквизиты документов, подтверждающих поставку товаров, работ, услуг.
	#Область РеквизитыДокументовПодтверждающихПоставкуТоваровРаботУслуг
	ЭСФ.ДокументПодтверждающийПоставкуНомер = ЭСФСервер.ПолучитьСвойство(Invoice, "deliveryDocNum", "");
	ЭСФ.ДокументПодтверждающийПоставкуДата  = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(Invoice, "deliveryDocDate", "01.01.0001"));
	ЭСФ.ДокументПодтверждающийПоставкуАВРНомер = ЭСФСервер.ПолучитьСвойство(Invoice, "deliveryDocNum2", "");
	ЭСФ.ДокументПодтверждающийПоставкуАВРДата  = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(Invoice, "deliveryDocDate2", "01.01.0001"));
	#КонецОбласти
	
	// Раздел F. Реквизиты государственного учреждения.
	#Область РеквизитыГосударственногоУчреждения
	publicOffice = ЭСФСервер.ПолучитьСвойство(Invoice, "publicOffice", Неопределено);	
	Если publicOffice <> Неопределено Тогда
		ЭСФ.ГосучреждениеИИК               = ЭСФСервер.ПолучитьСвойство(publicOffice, "iik", "");
		ЭСФ.ГосучреждениеКодТоваров        = ЭСФСервер.ПолучитьСвойство(publicOffice, "productCode", "");
		ЭСФ.ГосучреждениеНазначениеПлатежа = ЭСФСервер.ПолучитьСвойство(publicOffice, "payPurpose", "");
		ЭСФ.ГосучреждениеБИК               = ЭСФСервер.ПолучитьСвойство(publicOffice, "bik", "");
	КонецЕсли;
	#КонецОбласти
	
	// Раздел G. Данные по товарам (работам, услугам).
	#Область ДанныеПоТоварам
	ЭСФ.ВалютаКод = ЭСФСервер.ПолучитьСвойство(Invoice.productSet, "currencyCode", "KZT");
	ЭСФ.КурсВалюты = ЭСФСервер.ПолучитьСвойство(Invoice.productSet, "currencyRate", 1);
	ЭСФ.МестоРеализацииНеРК = ЭСФКлиентСервер.МестоРеализацииНеРКИБ(ЭСФСервер.ПолучитьСвойство(Invoice.productSet, "ndsRateType", ""));
	
	СписокТоваров = Invoice.productSet.products.product;
	СписокТоваров = ЭСФСервер.СписокXDTOИзОбъектXDTO(СписокТоваров);
	Для Каждого ТоварXDTO Из СписокТоваров Цикл
		ТоварСтрока = ЭСФ.Товары.Добавить();
		ТоварСтрока.ТоварНаименование            = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "description", "");
		ТоварСтрока.КодТНВЭД                     = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "unitCode", "");
		
		ЕдиницаИзмерения = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "unitNomenclature", "");
		
		Если ЭСФКлиентСерверПереопределяемый.ТолькоЦифрыВСтроке(ЕдиницаИзмерения) Тогда
			ТоварСтрока.ЕдиницаИзмеренияКод = ЕдиницаИзмерения;
		Иначе
			ТоварСтрока.ЕдиницаИзмеренияНаименование = ЕдиницаИзмерения;
		КонецЕсли;
		
		ТоварСтрока.Количество                   = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "quantity", 0);
		ТоварСтрока.Цена                         = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "unitPrice", 0);
		ТоварСтрока.СуммаБезНалогов              = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "priceWithoutTax", 0);
		ТоварСтрока.СтавкаАкцизаЧисло            = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "exciseRate", 0);
		ТоварСтрока.СуммаАкциза                  = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "exciseAmount", 0);
		ТоварСтрока.ОборотПоРеализации           = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "turnoverSize", 0);
		Если ЭСФ.МестоРеализацииНеРК Тогда
			ТоварСтрока.БезНДС                   = Истина;
		иначе
			ТоварСтрока.СтавкаНДСЧисло           = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "ndsRate", 0);
			ТоварСтрока.БезНДС                   = ?(ЭСФСервер.ЕстьСвойство(ТоварXDTO, "ndsRate"), Ложь, Истина);
		КонецЕсли;
		ТоварСтрока.СуммаНДС                     = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "ndsAmount", 0);
		ТоварСтрока.Сумма                        = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "priceWithTax", 0);
		ТоварСтрока.НомерЗаявленияВРамкахТС      = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "productDeclaration", "");
		ТоварСтрока.ДополнительныеДанные         = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "additional", "");
		
		ТоварСтрока.ПризнакПроисхождения 		 = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "truOriginCode", "");
		ТоварСтрока.ТоварНаименованиеВРамкахТС 	 = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "tnvedName", "");
		ТоварСтрока.НомерПозицииВДекларацииИлиЗаявлении = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "productNumberInDeclaration", "");
		ТоварСтрока.ИдентификаторТовара 		 = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "catalogTruId", "");
		
	КонецЦикла;
	

	#КонецОбласти
	
	// Раздел H. Сведения по участникам СД.
	#Область СведенияПоУчастникамСД
	sellerParticipants = ЭСФСервер.ПолучитьСвойство(Invoice, "sellerParticipants", Неопределено);	
	ЗаполнитьТаблицуТоваровПоУчастникамСД(sellerParticipants, ЭСФ.ТоварыПоПоставщикам);
	
	customerParticipants = ЭСФСервер.ПолучитьСвойство(Invoice, "customerParticipants", Неопределено);	
	ЗаполнитьТаблицуТоваровПоУчастникамСД(customerParticipants, ЭСФ.ТоварыПоПолучателям);
	
	// Заполнить колонку ДоляУчастия в таблице Поставщики.
	//Если ЭСФ.Поставщики.Количество() <> 0 Тогда 
	//	
	//	Если ЭСФ.Поставщики[0].УчастникСовместнойДеятельности Тогда
	//		
	//		УдалосьЗаполнитьДолиПоставщиков = ЗаполнитьДолиУчастияПоставщиков(ЭСФ);
	//		
	//		Если НЕ УдалосьЗаполнитьДолиПоставщиков Тогда
	//			СтрокаОшибки = ЭСФ.Ошибки.Добавить();
	//			СтрокаОшибки.Текст = ТекстНеУдалосьЗаполнитьДолиУчастниковСД();
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	#КонецОбласти
	
	// Раздел I. Дополнительные сведения.
	#Область ДополнительныеСведения
	ЭСФ.ДополнительныеСведения = ЭСФСервер.ПолучитьСвойство(Invoice, "addInf", "");
	#КонецОбласти 
	
	// Раздел I. Поверенный поставщика
	#Область ПоверенныйПоставщика
	ЭСФ.ПоверенныйПоставщикаБИН = ЭСФСервер.ПолучитьСвойство(Invoice, "sellerAgentTin", "");
	ЭСФ.ПоверенныйПоставщикаНаименование = ЭСФСервер.ПолучитьСвойство(Invoice, "sellerAgentName", "");
	ЭСФ.ПоверенныйПоставщикаАдресМестонахождения = ЭСФСервер.ПолучитьСвойство(Invoice, "sellerAgentAddress", "");
	ЭСФ.ДоговорПорученияПоставщикаНомер = ЭСФСервер.ПолучитьСвойство(Invoice, "sellerAgentDocNum", "");
	ЭСФ.ДоговорПорученияПоставщикаДата = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(Invoice, "sellerAgentDocDate", "01.01.0001"));
	#КонецОбласти
	
	// Раздел J. Поверенный поставщика
	#Область ПоверенныйПокупателя	
	ЭСФ.ПоверенныйПокупателяБИН = ЭСФСервер.ПолучитьСвойство(Invoice, "customerAgentTin", "");
	ЭСФ.ПоверенныйПокупателяНаименование = ЭСФСервер.ПолучитьСвойство(Invoice, "customerAgentName", "");
	ЭСФ.ПоверенныйПокупателяАдресМестонахождения = ЭСФСервер.ПолучитьСвойство(Invoice, "customerAgentAddress", "");
	ЭСФ.ДоговорПорученияПокупателяНомер = ЭСФСервер.ПолучитьСвойство(Invoice, "customerAgentDocNum", "");
	ЭСФ.ДоговорПорученияПокупателяДата = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(Invoice, "customerAgentDocDate", "01.01.0001"));
	#КонецОбласти
	
	// Прочие сведения.
	#Область ПрочиеСведения
	ЭСФ.Статус = ЭСФКлиентСервер.СтатусИБ(ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoiceStatus", ""));
	ЭСФ.ПользовательскийСтатус = ЭСФКлиентСервер.ПользовательскийСтатусИБ(ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "state", ""));
	ЭСФ.Направление = НаправлениеЭСФ;
	ЭСФ.Идентификатор = InvoiceInfo.invoiceId;
	ЭСФ.УполномоченныйСотрудник = ЭСФСервер.ПолучитьСвойство(Invoice, "operatorFullname", "");
	
	ОрганизацияИСтруктурноеПодразделение = ЭСФСервер.ОрганизацияИСтруктурноеПодразделение(СтруктурнаяЕдиница);    
	Если НаправлениеЭСФ = Перечисления.НаправленияЭСФ.Входящий Тогда
		БИНФилиала = ЭСФ.Получатели[0].БИНФилиала;
	Иначе
		БИНФилиала = ЭСФ.Поставщики[0].БИНФилиала;
	КонецЕсли;	
	СП = Справочники.Организации.ПустаяСсылка();
	
	ИмяРеквизитаБИН = "%СтруктурнаяЕдиницаИдентификационныйНомер";
	СоответствиеИменРеквизитов = Новый Соответствие;
	СоответствиеИменРеквизитов.Вставить(ИмяРеквизитаБИН, "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответствиеИменРеквизитов);
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ИмяРеквизитаБИН, СоответствиеИменРеквизитов);
	
	Если ЗначениеЗаполнено(БИНФилиала) Тогда
		СП = Справочники.Организации.НайтиПоРеквизиту(ИмяРеквизитаБИН, БИНФилиала);
	КонецЕсли;
	
	Если СП.ГоловнаяОрганизация = ОрганизацияИСтруктурноеПодразделение.Организация И СП.УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуре Тогда
		ЭСФ.Организация = СП;
	Иначе
		ЭСФ.Организация = ОрганизацияИСтруктурноеПодразделение.Организация;
	КонецЕсли;
	//ЭСФ.Организация = ОрганизацияИСтруктурноеПодразделение.Организация;
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ЭСФ.СтруктурноеПодразделение = ОрганизацияИСтруктурноеПодразделение.СтруктурноеПодразделение;
	КонецЕсли;
	
	ЭСФ.ТипПодписи = ЭСФКлиентСервер.ТипПодписиИБ(ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "signatureType", ""));
	ЭСФ.ЭЦП = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "signature", "");	
	
	#КонецОбласти
	
КонецПроцедуры

// Возвращает массив объектов ЭСФ, которые необходимо обработать при синхронизации с ИС ЭСФ.
// Объекты ЭСФ находятся по идентификатору из InvoiceInfoList и структурной единице.
// Поиск выполняется среди входящих и исходящих ЭСФ.
//
// Параметры:
//  InvoiceInfoList - СписокXDTO - Список invoice, для которых необходимо найти документы ЭСФ.
//   Если в InvoiceInfoList есть Черновик, Импортированный, Ошибочный, то для них не находятся и не создаются объекты ЭСФ.
//  СтруктурнаяЕдиница - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - 
//   Структурная единица, которой принадлежат все invoice из InvoiceInfoList.
//  ТолькоСуществующиеЭСФ - Булево - Если Истина, то вернет только те ЭСФ, которые уже есть в ИБ.
//   Если Ложь, то верент ЭСФ которые есть в ИБ, а для тех, которых нет в ИБ создаст новые объекты ЭСФ, но не будет записывать их.
//  УчитыватьВсеСтатусыЭСФ - Булево - Если Истина, то массив будет включать все ЭСФ: 
//   Черновики, Импортированные, Ошибочные, Доставленные, Отправленные и т.д.
//   Если Ложь, то массив будет включать все ЭСФ, кроме Черновик, Ошибочный, Импортированный.
//
// Возвращаемое значение:
//  Массив - Массив найденных объектов ЭСФ. Каждый элемент массива имеет тип ДокументОбъект.ЭСФ.
//
Функция НовыйМассивЗагружаемыхЭСФ(Знач InvoiceInfoList, Знач СтруктурнаяЕдиница, Знач ТолькоСуществующиеЭСФ, Знач УчитыватьВсеСтатусыЭСФ, Пользователь = Неопределено)
	
	МассивЭСФ = Новый Массив;
	
	// Создать массив идентификаторов Invoice.
	МассивИдентификаторов = Новый Массив;
	Для Каждого InvoiceInfo Из InvoiceInfoList Цикл
		
		Если УчитыватьВсеСтатусыЭСФ Тогда
			
			МассивИдентификаторов.Добавить(InvoiceInfo.invoiceId);
			
		Иначе
			
			СтатусInvoice = ЭСФКлиентСервер.СтатусИБ(InvoiceInfo.invoiceStatus);
			
			Если СтатусInvoice <> Перечисления.СтатусыЭСФ.Черновик 
				И СтатусInvoice <> Перечисления.СтатусыЭСФ.Ошибочный
				И СтатусInvoice <> Перечисления.СтатусыЭСФ.Импортированный Тогда
				
				МассивИдентификаторов.Добавить(InvoiceInfo.invoiceId);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоллекцияСуществующихЭСФ = НайтиСуществующиеЭСФПоИдентификаторам(МассивИдентификаторов, СтруктурнаяЕдиница);
	
	// Создать массив старых и новых объектов ЭСФ.
	// Если ТолькоСуществующиеЭСФ, то только старых объектов ЭСФ.
	Для Каждого ЭлементКоллекции Из КоллекцияСуществующихЭСФ Цикл
		
		ИдентификаторЭСФ = ЭлементКоллекции.Ключ;
		СсылкаЭСФ = ЭлементКоллекции.Значение;
		
		Если СсылкаЭСФ.Пустая() Тогда
			Если НЕ ТолькоСуществующиеЭСФ Тогда
				ОбъектЭСФ = Документы.ЭСФ.СоздатьДокумент();
				ОбъектЭСФ.Идентификатор = ИдентификаторЭСФ;
				
				ТекущийПользователь = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();
				ТекущийПользовательНеУказан = ЭСФСерверПереопределяемый.ПроверитьНаличиеТекущегоПользователя(ТекущийПользователь);
				Если ТекущийПользовательНеУказан Тогда  
					ОбъектЭСФ.Автор = Пользователь;
				Иначе
					ОбъектЭСФ.Автор = ТекущийПользователь;
				КонецЕсли;

				МассивЭСФ.Добавить(ОбъектЭСФ);
			КонецЕсли;
		Иначе
			МассивЭСФ.Добавить(СсылкаЭСФ.ПолучитьОбъект());
		КонецЕсли;
		
	КонецЦикла;
	
	// Отключить проверку даты запрета изменения при записи ЭСФ.
	Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
		ОбъектЭСФ.ДополнительныеСвойства.Вставить(ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
	КонецЦикла;
	
	Возврат МассивЭСФ;
	
КонецФункции

Функция НайтиInvoiceInfoПоId(Знач InvoiceInfoList, Знач id)
	
	НайденныйInvoiceInfo = Неопределено;
	
	Для Каждого ТекущийInvoiceInfo Из InvoiceInfoList Цикл
		Если ТекущийInvoiceInfo.invoiceId = id Тогда
			НайденныйInvoiceInfo = ТекущийInvoiceInfo;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйInvoiceInfo;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// Заполнение данных участников СД

// Заполняет таблицу ТоварыПоПоставщикам или ТоварыПоПолучателям докумнета ЭСФ.
//
// Параметры:
//  participants - ОбъектXDTO, Неопределено - Значение узлов:
//   Invoice.customerParticipants или Invoice.sellerParticipants,
//   на основании которых будет заполнена таблица: 
//   ТоварыПоПолучателям или ТоварыПоПоставщикам, соответственно.
//  ТоварыПоУчастникамСД - Табличная часть - Табличная часть документа ЭСФ,
//   которая будет заполнена данными participants, может быть:
//   ТоварыПоПоставщикам или ТоварыПоПолучателям.
//
Процедура ЗаполнитьТаблицуТоваровПоУчастникамСД(Знач participants, ТоварыПоУчастникамСД)
	
	ТоварыПоУчастникамСД.Очистить();
	
	Если participants <> Неопределено Тогда
		
		participantList = ЭСФСервер.ПолучитьСвойство(participants, "participant", Неопределено);	
		
		Если participantList <> Неопределено Тогда
			
			participantList = ЭСФСервер.СписокXDTOИзОбъектXDTO(participantList);
			
			Для Каждого participant Из participantList Цикл
				
				productShares = ЭСФСервер.ПолучитьСвойство(participant, "productShares", Неопределено);	
				
				Если productShares <> Неопределено Тогда
					
					shareList = ЭСФСервер.ПолучитьСвойство(productShares, "share", Неопределено);	
					
					Если shareList <> Неопределено Тогда
						
						shareList = ЭСФСервер.СписокXDTOИзОбъектXDTO(shareList);
						
						Для Каждого share Из shareList Цикл
							
							СтрокаТоварыПоПолучателям = ТоварыПоУчастникамСД.Добавить();
							
							СтрокаТоварыПоПолучателям.Идентификатор = ЭСФСервер.ПолучитьСвойство(participant, "tin", "");
							СтрокаТоварыПоПолучателям.НомерТовара = ЧислоИзСтроки(ЭСФСервер.ПолучитьСвойство(share, "productNumber", "0"));
							СтрокаТоварыПоПолучателям.Количество = ЧислоИзСтроки(ЭСФСервер.ПолучитьСвойство(share, "quantity", "0"));
							СтрокаТоварыПоПолучателям.СуммаБезНалогов = ЧислоИзСтроки(ЭСФСервер.ПолучитьСвойство(share, "priceWithoutTax", "0"));
							СтрокаТоварыПоПолучателям.СуммаАкциза = ЧислоИзСтроки(ЭСФСервер.ПолучитьСвойство(share, "exciseAmount", "0"));
							СтрокаТоварыПоПолучателям.ОборотПоРеализации = ЧислоИзСтроки(ЭСФСервер.ПолучитьСвойство(share, "turnoverSize", "0"));
							СтрокаТоварыПоПолучателям.СуммаНДС = ЧислоИзСтроки(ЭСФСервер.ПолучитьСвойство(share, "ndsAmount", "0"));
							СтрокаТоварыПоПолучателям.Сумма = ЧислоИзСтроки(ЭСФСервер.ПолучитьСвойство(share, "priceWithTax", "0"));
							СтрокаТоварыПоПолучателям.ДополнительныеДанные = ЭСФСервер.ПолучитьСвойство(share, "additional", "");
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТоварыПоУчастникамСД.Сортировать("НомерТовара Возр, Идентификатор Возр");
	
КонецПроцедуры

// Заполняет колонку ДоляУчастия табличной части Поставщики.
// Для заполнения колонки используются данны таблицы ТоварыПоПоставщикам.
//
// Параметры:
//  ЭСФ - ДокументОбъект.ЭСФ, ДанныеФормыСтруктура - 
//   Документ ЭСФ, в табличной части которого необходимо 
//   заполнить колонку ДоляУчастия в таблице Поставщики.
//
Функция ЗаполнитьДолиУчастияПоставщиков(ЭСФ) Экспорт 
	
	УдалосьЗаполнить = Истина;
	
	// Очистить колонку ДоляУчастия в таблице Поставщики.
	Для Каждого СтрокаПоставщики Из ЭСФ.Поставщики Цикл
		СтрокаПоставщики.ДоляУчастия = 0;	
	КонецЦикла;
	
	ДолиПоПоставщикамИТоварам = НоваяТаблицаДолиПоПоставщикамИТоварам(ЭСФ);
    ИтоговыеДолиПоПоставщикам = НоваяТаблицаИтоговыеДолиПоПоставщикам(ЭСФ);	
	
	Если ВсеТоварыРаспределеныПоДолямОдинаково(ДолиПоПоставщикамИТоварам, ИтоговыеДолиПоПоставщикам) Тогда
		ЗаполнитьРеквизитДоляУчастияТабличнойЧастиПоставщики(ИтоговыеДолиПоПоставщикам, ЭСФ.Поставщики);
		УдалосьЗаполнить = Истина;
	Иначе
		УдалосьЗаполнить = Ложь;
	КонецЕсли;
	
	Возврат УдалосьЗаполнить;
	
КонецФункции

// Возвращает итоговые доли всех поставщиков из ЭСФ.
// Сумма всех итоговых долей равняется единице.
// Итоговые доли находятся следующим образом:
// 1. Вычисляется сумма с учетом налогов для всех товаров из ЭСФ.
// 2. Определяется на какую сумму с учетом налогов продал конкретный поставщик.
// 3. Итоговая доля поставщика = (2) / (1).
//
// Параметры:
//  См. ЗаполнитьДолиУчастияПоставщиков().
//
// Возвращаемое значение:
//  ТаблицаЗначений - Всегда содержит всех поставщиков из таблицы Поставщики.
//   |- ИдентификаторПоставщика - Строка - БИН/ИИН поставщика.
//   |- ИтогоДоляПоставщика - Число - Итоговая доля участия по данному поставщику.
//       Если в разделе H нет данных по поставщику, то содержит цифру ноль.
//
Функция НоваяТаблицаИтоговыеДолиПоПоставщикам(ЭСФ)
	
	// Создать таблицу ДолиПоПоставщикам. 
	ДолиПоПоставщикам = Новый ТаблицаЗначений;
	ДолиПоПоставщикам.Колонки.Добавить("ИдентификаторПоставщика");
	ДолиПоПоставщикам.Колонки.Добавить("ИтогоСуммаПоПоставщику");
	
	// Добавить в таблицу ДолиПоПоставщикам всех поставщиков. 
	Для Каждого СтрокаПоставщики Из ЭСФ.Поставщики Цикл
		СтрокаДолиПоПоставщикам = ДолиПоПоставщикам.Добавить();
		СтрокаДолиПоПоставщикам.ИдентификаторПоставщика = СтрокаПоставщики.ПоставщикИдентификатор;
		СтрокаДолиПоПоставщикам.ИтогоСуммаПоПоставщику = 0;
	КонецЦикла;
	
	// Изменить нулевые суммы в таблице ДолиПоПоставщикам 
	// на итоговые суммы по каждому поставщику из таблицы ТоварыПоПоставщикам.	
	Для Каждого СтрокаДолиПоПоставщикам Из ДолиПоПоставщикам Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Идентификатор", СтрокаДолиПоПоставщикам.ИдентификаторПоставщика);
		
		МассивСтрокТоварыПоПоставщикам = ЭСФ.ТоварыПоПоставщикам.НайтиСтроки(ПараметрыОтбора);
		
		ИтогоСуммаПоПоставщику = 0;
		Для Каждого СтрокаТоварыПоПоставщикам Из МассивСтрокТоварыПоПоставщикам Цикл
			ИтогоСуммаПоПоставщику = ИтогоСуммаПоПоставщику + СтрокаТоварыПоПоставщикам.Сумма;	
		КонецЦикла;
		СтрокаДолиПоПоставщикам.ИтогоСуммаПоПоставщику = ИтогоСуммаПоПоставщику;
		
	КонецЦикла;
	
	ИтогоСуммаПоЭСФ = ЭСФ.ТоварыПоПоставщикам.Итог("Сумма");
	ДолиПоПоставщикам.Колонки.Добавить("ИтогоДоляПоставщика");
	
	// Заполнить долю каждого поставщика.
	Для Каждого СтрокаДолиПоПоставщикам Из ДолиПоПоставщикам Цикл
		
		СтрокаДолиПоПоставщикам.ИтогоДоляПоставщика = СтрокаДолиПоПоставщикам.ИтогоСуммаПоПоставщику 
			/ ?(ИтогоСуммаПоЭСФ <> 0, ИтогоСуммаПоЭСФ, 1);
			
	КонецЦикла;
	
	ДолиПоПоставщикам.Колонки.Удалить("ИтогоСуммаПоПоставщику");
	
	Возврат ДолиПоПоставщикам;
	
КонецФункции

// Возвращает доли в разрезе поставщиков и товаров.
// Сумма долей всех поставщиков по конкретному товару всегда равняется единице.
// Семма долей одного поставщика по всем товарам может быть любой.
// Доли в разрезе поставщиков и товаров находятся следующим образом:
// Сумма с учетом налогов, на которую поступил товар от данного поставщика 
// делится на общую сумму с учетом налогов по данному товару.
//
// Параметры:
//  См. ЗаполнитьДолиУчастияПоставщиков().
//
// Возвращаемое значение:
//  ТаблицаЗначений - Всегда содержит всех поставщиков и все товары.
//   |- ИдентификаторПоставщика - Строка - БИН/ИИН поставщика.
//   |- НомерТовара - Число - Номер строки в таблице Товары.
//   |- ДоляПоставщика - Число - Доля поставщика по данному товару.
//       Если в разделе H нет данных о продажи данного товара, 
//       данным поставщиком, то содержит цифру ноль.
//
Функция НоваяТаблицаДолиПоПоставщикамИТоварам(ЭСФ)
	
	ДолиПоПоставщикамИТоварам = Новый ТаблицаЗначений;
	ДолиПоПоставщикамИТоварам.Колонки.Добавить("ИдентификаторПоставщика");
	ДолиПоПоставщикамИТоварам.Колонки.Добавить("НомерТовара");
	ДолиПоПоставщикамИТоварам.Колонки.Добавить("СуммаПоставщика");	
	
	// Заполнить таблицу всеми поставщиками и всеми товарами, а также нулевыми суммами.
	Для Каждого СтрокаПоставщик Из ЭСФ.Поставщики Цикл
		
		Для НомерТовара = 1 По ЭСФ.Товары.Количество() Цикл
			
			СтрокаДолиПоПоставщикамИТоварам = ДолиПоПоставщикамИТоварам.Добавить();
			СтрокаДолиПоПоставщикамИТоварам.ИдентификаторПоставщика = СтрокаПоставщик.ПоставщикИдентификатор;
			СтрокаДолиПоПоставщикамИТоварам.НомерТовара = НомерТовара;
			СтрокаДолиПоПоставщикамИТоварам.СуммаПоставщика = 0;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Изменить нулевые суммы в таблице ДолиПоПоставщикамИТоварам 
	// на суммы из таблицы ТоварыПоПоставщикам.	
	Для Каждого СтрокаТоварыПоПоставщикам Из ЭСФ.ТоварыПоПоставщикам Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторПоставщика", СтрокаТоварыПоПоставщикам.Идентификатор);
		ПараметрыОтбора.Вставить("НомерТовара", СтрокаТоварыПоПоставщикам.НомерТовара);	
		
		МассивСтрокДолиПоПоставщикамИТоварам = ДолиПоПоставщикамИТоварам.НайтиСтроки(ПараметрыОтбора);
		СтрокаДолиПоПоставщикамИТоварам = МассивСтрокДолиПоПоставщикамИТоварам[0];
		СтрокаДолиПоПоставщикамИТоварам.СуммаПоставщика = СтрокаДолиПоПоставщикамИТоварам.СуммаПоставщика + СтрокаТоварыПоПоставщикам.Сумма;
		
	КонецЦикла;	
	
	// Создать соответствие НомерТовара - СуммаТовараУчитываяВсеНалоги.
	ИтогоСуммыТоваров = Новый Соответствие;
	Для Каждого СтрокаТовары Из ЭСФ.Товары Цикл
		НомерТовара = СтрокаТовары.НомерСтроки; 
		ИтогоСуммаПоТовару = СтрокаТовары.Сумма;
		ИтогоСуммыТоваров.Вставить(НомерТовара, ИтогоСуммаПоТовару);	
	КонецЦикла;
	
	// Заполнить в таблице долю поставщика по каждому товару.
	ДолиПоПоставщикамИТоварам.Колонки.Добавить("ДоляПоставщика");	
	Для Каждого СтрокаДолиПоПоставщикамИТоварам Из ДолиПоПоставщикамИТоварам Цикл
		
		СуммаПоставщика = СтрокаДолиПоПоставщикамИТоварам.СуммаПоставщика;
		ИтогоСуммаПоТовару = ИтогоСуммыТоваров[СтрокаДолиПоПоставщикамИТоварам.НомерТовара];
		
		СтрокаДолиПоПоставщикамИТоварам.ДоляПоставщика = СуммаПоставщика 
			/ ?(ИтогоСуммаПоТовару = 0, 1, ИтогоСуммаПоТовару);
			
	КонецЦикла;
	
	ДолиПоПоставщикамИТоварам.Колонки.Удалить("СуммаПоставщика");
	
	Возврат ДолиПоПоставщикамИТоварам;
	
КонецФункции

// Проверяет, что все товары распределены по долям.
//
// Например, была 1 линейка и 2 ручки. 
//
// Если в одном ЭСФ Иванов продал 1 линейку и 1 ручку,
// а Петров продал 1 ручку, то данный метод вернет Ложь.
//
// Если в одном ЭСФ Иванов продал 0,(3) линейки и 0,(6) ручку,
// а Петров продал 0,(6) линейки и 1,(3) ручки, то данный метод вернет Истина.
//
// Параметры:
//  ДолиПоПоставщикамИТоварам - См. НоваяТаблицаИтоговыеДолиПоПоставщикам().
//  ИтоговыеДолиПоПоставщикам - См. НоваяТаблицаДолиПоПоставщикамИТоварам().
//
// Возвращаемое значение:
//  Булево - Истина, если все товары распределены с использованием долей.
//   Ложь, если раздел H составлен без учета долей.
//
Функция ВсеТоварыРаспределеныПоДолямОдинаково(Знач ДолиПоПоставщикамИТоварам, Знач ИтоговыеДолиПоПоставщикам)
	
	ВсеТоварыРаспределеныПоДолямОдинаково = Истина;
	
	Для Каждого СтркоаИтоговыеДолиПоПоставщикам Из ИтоговыеДолиПоПоставщикам Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторПоставщика", СтркоаИтоговыеДолиПоПоставщикам.ИдентификаторПоставщика);
		
		МассивСтрокДолиПоПоставщикамИТоварам = ДолиПоПоставщикамИТоварам.НайтиСтроки(ПараметрыОтбора);
		
		ОкругленнаяИтоговаяДоляПоставщика = ОкруглитьДолюУчастникаСД(СтркоаИтоговыеДолиПоПоставщикам.ИтогоДоляПоставщика);
		
		Для Каждого СтрокаДолиПоПоставщикамИТоварам Из МассивСтрокДолиПоПоставщикамИТоварам Цикл
			
			ОкругленнаяДоляПоставщикаПоТовару = ОкруглитьДолюУчастникаСД(СтрокаДолиПоПоставщикамИТоварам.ДоляПоставщика);
			
			Если ОкругленнаяДоляПоставщикаПоТовару >= ОкругленнаяИтоговаяДоляПоставщика - 0.01
				И ОкругленнаяДоляПоставщикаПоТовару <= ОкругленнаяИтоговаяДоляПоставщика + 0.01 Тогда
				
				// Продолжаем проверку.
				
			Иначе
				
				ВсеТоварыРаспределеныПоДолямОдинаково = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ВсеТоварыРаспределеныПоДолямОдинаково Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВсеТоварыРаспределеныПоДолямОдинаково;
	
КонецФункции

Процедура ЗаполнитьРеквизитДоляУчастияТабличнойЧастиПоставщики(ИтоговыеДолиПоПоставщикам, Поставщики)
	
	Для Каждого СтрокаИтоговыеДолиПоПоставщикам Из ИтоговыеДолиПоПоставщикам Цикл
		
		ДоляУчастия = СтрокаИтоговыеДолиПоПоставщикам.ИтогоДоляПоставщика;
		ДоляУчастия = ДоляУчастия * 1000000000000;
		ДоляУчастия = ОкруглитьДолюУчастникаСД(ДоляУчастия);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ПоставщикИдентификатор", СтрокаИтоговыеДолиПоПоставщикам.ИдентификаторПоставщика);
		МассивСтрокПоставщики = Поставщики.НайтиСтроки(ПараметрыОтбора);
		СтрокаПоставщики = МассивСтрокПоставщики[0];
		СтрокаПоставщики.ДоляУчастия = ДоляУчастия;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОкруглитьДолюУчастникаСД(Знач ДолюУчастникаСД)
	
	Возврат Окр(ДолюУчастникаСД, 2, РежимОкругления.Окр15как20);
	
КонецФункции

Функция ТекстНеУдалосьЗаполнитьДолиУчастниковСД() Экспорт
	
	Текст = НСтр(
	"ru = 'Не удалось автоматически заполнить поле ""Коэффициент доли участия"" в разделе ""B. Поставщики"",
	|так как из данных раздела ""H. Участники СД"" не удалось вычислить доли участия каждого поставщика.
	|При отражении данного ЭСФ рекомендуется ввести отдельные документы ""Счет-фактура (полученный)""
	|для каждого участника совместной деятельности или вручную заполнить поле ""Коэффициент доли участия"" 
	|в разделе ""B. Поставщики"", после чего ввести один документ ""Счет-фактура (полученный)"".'");
	
	Возврат Текст;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБНОВИТЬ ЭСФ ИЗ ИС ЭСФ

Процедура ОбновитьДокументыЭСФИзИСЭСФ(Знач МассивЭСФ, Знач ДанныеПрофиляИСЭСФ) Экспорт
	
	ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
	ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	
	НачатьТранзакцию();
	
	Попытка
		
		ОбновитьДокументыЭСФПоИдентификатору(МассивЭСФ, ДанныеПрофиляИСЭСФ, ВерсияИСЭСФ);
		
		// Обновим состояние у ЭСФ со статусом НеПолучениОтветОтСервера
		МассивБезОтветаОтСервера = Новый Массив;
		
		// выберем документы с пустым идентификатором, которых нет в очереди отправки, попробуем обновить их с помощью номера и даты документа
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДокументыЭСФ.Ссылка
			|ИЗ
			|	Документ.ЭСФ КАК ДокументыЭСФ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьОтправкиЭСФ КАК ОчередьОтправкиЭСФ
			|		ПО (ОчередьОтправкиЭСФ.ЭСФ = ДокументыЭСФ.Ссылка)
			|ГДЕ
			|	ДокументыЭСФ.Идентификатор = """"
			|	И ДокументыЭСФ.Ссылка В(&МассивЭСФ)
			|	И ОчередьОтправкиЭСФ.ЭСФ ЕСТЬ NULL 
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// сообщение пользователю об ЭСФ в очереди отправки
			|ВЫБРАТЬ
			|	ДокументыЭСФ.Ссылка
			|ИЗ
			|	Документ.ЭСФ КАК ДокументыЭСФ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьОтправкиЭСФ КАК ОчередьОтправкиЭСФ
			|		ПО (ОчередьОтправкиЭСФ.ЭСФ = ДокументыЭСФ.Ссылка)
			|ГДЕ
			|	ДокументыЭСФ.Идентификатор = """"
			|	И ДокументыЭСФ.Ссылка В(&МассивЭСФ)
			|	И НЕ ОчередьОтправкиЭСФ.ЭСФ ЕСТЬ NULL ";
		
		Запрос.УстановитьПараметр("МассивЭСФ", МассивЭСФ);
		
		ПакетЗапросов = Запрос.ВыполнитьПакет();
		
		МассивБезОтветаОтСервера = ПакетЗапросов[0].Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Если МассивБезОтветаОтСервера.Количество() > 0 Тогда
			
			ОбновитьДокументыЭСФПоНомеруИДате(МассивБезОтветаОтСервера, ДанныеПрофиляИСЭСФ, ВерсияИСЭСФ);
			
		КонецЕсли;
		
		МассивОчередиОтправки = ПакетЗапросов[1].Выгрузить().ВыгрузитьКолонку("Ссылка");

		Для Каждого СтрокаМассиваОчереди Из МассивОчередиОтправки Цикл
			
			ТекстСообщения = НСтр("ru = '%1 находится в очереди отправки, обновление данных возможно после завершения процесса отправки'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаМассиваОчереди);
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОбновитьДокументыЭСФИзИСЭСФ'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьДокументыЭСФПоИдентификатору(Знач МассивЭСФ, Знач ПрофильИСЭСФ, ВерсияИСЭСФ) Экспорт
	
	Если Найти(ВерсияИСЭСФ, "5.0.0") <> 0 Тогда
		ФабрикаInvoiceInfo = ФабрикаInvoiceInfo_Версия2(); // Фабрика для приема сообщений с секцией CDATA
	КонецЕсли;	
	
	ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
			
	Если МассивЭСФ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредельныйРазмерПакетаЭСФ = 1000;
	ВыполнялосьОбращениеКСерверу = Ложь;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыЭСФ.Ссылка,
	|	ДокументыЭСФ.Идентификатор,
	|	ДокументыЭСФ.Направление КАК Направление,
	|	ДокументыЭСФ.Вид
	|ИЗ
	|	Документ.ЭСФ КАК ДокументыЭСФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьОтправкиЭСФ КАК ОчередьЭСФ
	|		ПО ОчередьЭСФ.ЭСФ = ДокументыЭСФ.Ссылка
	|ГДЕ
	|	ДокументыЭСФ.Ссылка В(&МассивЭСФ)
	|	И НЕ ДокументыЭСФ.Идентификатор = """"
	|	И ОчередьЭСФ.ЭСФ ЕСТЬ NULL 
	|ИТОГИ ПО
	|	Направление";
	
	Запрос.УстановитьПараметр("МассивЭСФ", МассивЭСФ);
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаправление.Следующий() Цикл
		
		Выборка = ВыборкаНаправление.Выбрать();
		
		СписокИдентификаторов = "";
		
		КоличествоЭСФ = Выборка.Количество();
		
		СчетчикЭСФ = 0;
		
		МассивИдентификаторовНайденныхЭСФ = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			// считаем общее количество ЭСФ
			СчетчикЭСФ = СчетчикЭСФ + 1;
			
			Если ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
				
				СписокИдентификаторов = СписокИдентификаторов + "<id>" + Выборка.Идентификатор + "</id>";
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'Документ ""[ЭСФ]"" не удалось обновить из ИС ЭСФ, так как в документе не заполнен реквизит ""Идентификатор"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЭСФ]", ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(Выборка.Ссылка));
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
			// Пакет обновляем, в случае если он кратен предельному размеру, либо равен последнему элементу пакета
			Если НЕ (СчетчикЭСФ%ПредельныйРазмерПакетаЭСФ = 0 ИЛИ СчетчикЭСФ = КоличествоЭСФ) Тогда
				Продолжить;
			КонецЕсли;				
			
			Если ЗначениеЗаполнено(СписокИдентификаторов) Тогда
				
				/////////////////////////////////////////////////////////////////////////////
				// Создать и выполнить запрос к API ИС ЭСФ.
				
				ЗапросXML = ПолучитьМакет("ЗапросQueryInvoiceById").ПолучитьТекст();
				ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
				ЗапросXML = СтрЗаменить(ЗапросXML, "[idList]", СписокИдентификаторов);
				ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаInvoiceService(), , ВерсияИСЭСФ); 
				
				
				
				
				/////////////////////////////////////////////////////////////////////////////
				// Обработать результат запроса к API ИС ЭСФ.
				
				ИнформацияОбОшибке = Неопределено;
				Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
					
					Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
						ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
					Иначе
						ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, КэшированнаяФабрикаInvoiceInfo_Версия2); // читаем через фабрику, чтобы не возникало проблем с секцией CDATA
					КонецЕсли;
										
					InvoiceInfoList = ОтветXDTO.Body.queryInvoiceByIdResponse.invoiceInfoList;
					InvoiceInfoList = ЭСФСервер.ПолучитьСвойство(InvoiceInfoList, "invoiceInfo", Неопределено); 
					
					Если InvoiceInfoList <> Неопределено Тогда					
						
						InvoiceInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(InvoiceInfoList);
						СоздатьОбновитьПолучаемыеЭСФ(InvoiceInfoList, ВыборкаНаправление.Направление, ПрофильИСЭСФ.СтруктурнаяЕдиница.Ссылка, Истина);
						                                      				
						
						//////////////////////////////////////////////////////////////////////////
						// Сообщить пользователю, если не удалось найти ЭСФ по идентификатору.
						
						// Создать и заполнить массив идентификаторов ЭСФ, которые удалось найти в ИС ЭСФ.
						Для Каждого InvoiceInfo Из InvoiceInfoList Цикл
							ИдентификаторЭСФ = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoiceId", "");
							Если ЗначениеЗаполнено(ИдентификаторЭСФ) Тогда
								МассивИдентификаторовНайденныхЭСФ.Добавить(ИдентификаторЭСФ);
							КонецЕсли;
						КонецЦикла;
												
					КонецЕсли;
									
				Иначе
					
					ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
					
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'ОбменЭСФ.ОбновитьДокументыЭСФПоИдентификатору'"), 
						УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						
					ВызватьИсключение НСтр("ru = 'При обновлении ЭСФ по номеру и дате возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
					
				КонецЕсли;
				
				ВыполнялосьОбращениеКСерверу = Истина;	
			
			КонецЕсли;
			
			// Обнулим данные для следующей порции
			СписокИдентификаторов = "";
			
		КонецЦикла;
		
		/////////////////////////////////////////////////////////////////////////////
		// Обновить состояния исправляемых ЭСФ, а также их дополнительных ЭСФ.
		
		Если ВыполнялосьОбращениеКСерверу Тогда
			
			// Сообщить пользователю, если не удалось найти ЭСФ по идентификатору.
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
					Если МассивИдентификаторовНайденныхЭСФ.Найти(Выборка.Идентификатор) = Неопределено Тогда
						ТекстСообщения = НСтр("ru = 'Документ ""[ЭСФ]"" не удалось обновить из ИС ЭСФ, так как в ИС ЭСФ не найден ЭСФ с идентификатором: ""[Идентификатор]"".'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЭСФ]", ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(Выборка.Ссылка));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Идентификатор]", Выборка.Идентификатор);
						ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			МассивИсправленныхЭСФ = Новый Массив;
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл
				Если Выборка.Вид = Перечисления.ВидыЭСФ.Исправленный Тогда
					МассивИсправленныхЭСФ.Добавить(Выборка.Ссылка);	
				КонецЕсли;
			КонецЦикла;
			
			Если МассивИсправленныхЭСФ.Количество() <> 0 Тогда
				МассивИдентификаторовАннулируемыхЭСФ = МассивИдентификаторовАннулируемыхЭСФ(МассивИсправленныхЭСФ);
				ОбновитьСтатусыЭСФПоИдентификаторам(МассивИдентификаторовАннулируемыхЭСФ, ВыборкаНаправление.Направление, ПрофильИСЭСФ, ИдентификаторСессии);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
	
КонецПроцедуры

// Получает номера и даты из МассивЭСФ,
// находит в ИС ЭСФ, ЭСФ с такими номерами и датами,
// обновляет в ИБ ЭСФ, по данным ИС ЭСФ.
//
// Если не удается найти в ИС ЭСФ документы с такими номерами и датами, 
// то показывается сообщение пользователю. 
//
// Параметры:
//  МассивЭСФ - Массив - Может содержать входящие и исходящие ЭСФ,
//   все ЭСФ в МассивЭСФ принадлежат только одной организации.
//
Функция ОбновитьДокументыЭСФПоНомеруИДате(Знач МассивЭСФ, Знач ПрофильИСЭСФ, ВерсияИСЭСФ = Неопределено) Экспорт
	
	Если ВерсияИСЭСФ = Неопределено Тогда
		ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
		ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	КонецЕсли;	
	
	Если Найти(ВерсияИСЭСФ, "5.0.0") <> 0 Тогда
		ФабрикаInvoiceInfo = ФабрикаInvoiceInfo_Версия2(); // Фабрика для приема сообщений с секцией CDATA
	КонецЕсли;	
	
	Если МассивЭСФ.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
	ПредельныйРазмерПакетаЭСФ = 1000;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыЭСФ.Направление КАК Направление,
	|	ДокументыЭСФ.Ссылка,
	|	ДокументыЭСФ.Номер,
	|	НАЧАЛОПЕРИОДА(ДокументыЭСФ.Дата, ДЕНЬ) КАК Дата,
	|	ДокументыЭСФ.Вид,
	|	ДокументыЭСФ.Идентификатор
	|ИЗ
	|	Документ.ЭСФ КАК ДокументыЭСФ
	|ГДЕ
	|	ДокументыЭСФ.Ссылка В(&МассивЭСФ)
	|ИТОГИ ПО
	|	Направление";
	
	Запрос.УстановитьПараметр("МассивЭСФ", МассивЭСФ);
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаправление.Следующий() Цикл
		
		МассивИсправленныхЭСФ = Новый Массив;

		/////////////////////////////////////////////////////////////////////////////
		// Создать и заполнить массив ключей ЭСФ.
		
		// Ключ ЭСФ = Номер ЭСФ + Дата ЭСФ.
		МассивКлючейЭСФ = Новый Массив;
		
		// Создать массив отсутствующих ЭСФ, который в начале содержит все ЭСФ из МассивКлючейЭСФ.
		// При обработке результата из МассивОтсутствующихЭСФ исключаются ЭСФ, которые есть в ИС ЭСФ.
		МассивОтсутствующихЭСФ = Новый Массив;
		
		ВыборкаДетальныеЗаписи = ВыборкаНаправление.Выбрать();
		
		КоличествоЭСФ = ВыборкаДетальныеЗаписи.Количество();
		СчетчикЭСФ = 0;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СчетчикЭСФ = СчетчикЭСФ + 1;
			
			КлючЭСФ = Новый Структура;
			КлючЭСФ.Вставить("Номер", ВыборкаДетальныеЗаписи.Номер);
			КлючЭСФ.Вставить("Дата", ВыборкаДетальныеЗаписи.Дата);
			КлючЭСФ.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
			КлючЭСФ.Вставить("Идентификатор", ВыборкаДетальныеЗаписи.Идентификатор);
			
			МассивКлючейЭСФ.Добавить(КлючЭСФ);
			
			Если ВыборкаДетальныеЗаписи.Вид = Перечисления.ВидыЭСФ.Исправленный Тогда
				МассивИсправленныхЭСФ.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЕсли;
			
			// Пакет обновляем, в случае если он кратен предельному размеру, либо равен последнему элементу пакета
			Если НЕ (СчетчикЭСФ%ПредельныйРазмерПакетаЭСФ = 0 ИЛИ СчетчикЭСФ = КоличествоЭСФ) Тогда
				Продолжить;
			КонецЕсли;
			
			InvoiceKeyList = СтрокаInvoiceKeyList(МассивКлючейЭСФ);
			
			/////////////////////////////////////////////////////////////////////////////
			// Создать и выполнить запрос к API ИС ЭСФ.
			
			ЗапросXML = ПолучитьМакет("ЗапросQueryInvoiceByKey").ПолучитьТекст();
			ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
			ЗапросXML = СтрЗаменить(ЗапросXML, "[invoiceKeyList]", InvoiceKeyList);
			НаправлениеИСЭСФ = ЭСФКлиентСервер.НаправлениеИСЭСФ(ВыборкаНаправление.Направление);
			ЗапросXML = СтрЗаменить(ЗапросXML, "[direction]", НаправлениеИСЭСФ);
			
			ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаInvoiceService());
			
			/////////////////////////////////////////////////////////////////////////////
			// Обработать результат запроса к API ИС ЭСФ.
			
			ИнформацияОбОшибке = Неопределено;
			Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
				
				Для Каждого КлючЭСФ Из МассивКлючейЭСФ Цикл
					СтруктураОтсутствующийЭСФ = Новый Структура;
					СтруктураОтсутствующийЭСФ.Вставить("Номер", КлючЭСФ.Номер);
					СтруктураОтсутствующийЭСФ.Вставить("Дата", КлючЭСФ.Дата);
					СтруктураОтсутствующийЭСФ.Вставить("Ссылка", КлючЭСФ.Ссылка);
					СтруктураОтсутствующийЭСФ.Вставить("Идентификатор", КлючЭСФ.Идентификатор);
					МассивОтсутствующихЭСФ.Добавить(СтруктураОтсутствующийЭСФ);
				КонецЦикла;
				
				Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
					ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
				Иначе
					ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, КэшированнаяФабрикаInvoiceInfo_Версия2); // читаем через фабрику, чтобы не возникало проблем с секцией CDATA
				КонецЕсли;
				
				InvoiceInfoList = ОтветXDTO.Body.queryInvoiceByKeyResponse.invoiceInfoList;
				InvoiceInfoList = ЭСФСервер.ПолучитьСвойство(InvoiceInfoList, "invoiceInfo", Неопределено);
				
				Если InvoiceInfoList <> Неопределено Тогда
					
					InvoiceInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(InvoiceInfoList);
					
					// Поиск существующих ЭСФ при создании и обновлении выполняется по идентификатору ЭСФ.
					// При выполнении данной команды документы ЭСФ были найдены в ИС ЭСФ по номеру и дате.
					// Поэтому установим документам ЭСФ идентификаторы.
					Для Каждого InvoiceInfo Из InvoiceInfoList Цикл
						
						Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
							Invoice = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoice", Неопределено);
						Иначе
							InvoiceBody = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoiceBody", Неопределено);
							Invoice = ЭСФСервер.ОбъектXDTOИзСтрокиXML(InvoiceBody, ФабрикаXDTO);
						КонецЕсли;
						
						Если Invoice <> Неопределено Тогда
							
							Номер = ЭСФСервер.ПолучитьСвойство(Invoice, "num", "");
							Дата = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(Invoice, "date", "01.01.0001"));
							Идентификатор = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoiceId", "");
							
							Для Каждого КлючЭСФ Из МассивКлючейЭСФ Цикл
								
								Если КлючЭСФ.Номер = Номер И КлючЭСФ.Дата = Дата Тогда
									
									Если КлючЭСФ.Идентификатор <> Идентификатор Тогда
										
										ОбъектЭСФ = КлючЭСФ.Ссылка.ПолучитьОбъект();
										ОбъектЭСФ.Идентификатор = Идентификатор;
										
										ОбъектЭСФ.Записать();
										
										ЭСФСервер.ОчиститьЗаписьОтправкиЭСФ(КлючЭСФ.Ссылка);
										
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
					СоздатьОбновитьПолучаемыеЭСФ(InvoiceInfoList, ВыборкаНаправление.Направление, ПрофильИСЭСФ.СтруктурнаяЕдиница.Ссылка, Истина);
					
					// Удалить из массива отсутствующих ЭСФ, ЭСФ которые найдены в ИС ЭСФ по номеру и дате.
					Для Каждого InvoiceInfo Из InvoiceInfoList Цикл
						
						Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда 
							Invoice = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoice", Неопределено);
						Иначе
							InvoiceBody = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoiceBody", Неопределено);
							Invoice = ЭСФСервер.ОбъектXDTOИзСтрокиXML(InvoiceBody, ФабрикаXDTO);
						КонецЕсли;
						
						Если Invoice <> Неопределено Тогда
							
							Номер = ЭСФСервер.ПолучитьСвойство(Invoice, "num", "");
							Дата = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(Invoice, "date", "01.01.0001"));
							
							Для Индекс = 0 По МассивОтсутствующихЭСФ.ВГраница() Цикл
								
								СтруктураОтсутствующийЭСФ = МассивОтсутствующихЭСФ[Индекс];
								
								Если СтруктураОтсутствующийЭСФ.Номер = Номер
									И СтруктураОтсутствующийЭСФ.Дата = Дата Тогда
									
									// ЭСФ найден по номеру и дате в ИС ЭСФ, поэтому удалим этот ЭСФ из МассивОтсутствующихЭСФ.
									МассивОтсутствующихЭСФ.Удалить(Индекс);
									
									Прервать;
									
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				
				ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
				
				ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ОбменЭСФ.ОбновитьДокументыЭСФПоНомеруИДате'"), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ВызватьИсключение НСтр("ru = 'При обновлении ЭСФ по номеру и дате возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
				
			КонецЕсли;
			
			// Обнулим данные для следующей порции
			МассивКлючейЭСФ.Очистить();
			
		КонецЦикла;
		
		Для Каждого СтрокаОтсутсвующийЭСФ Из МассивОтсутствующихЭСФ Цикл
			
			ТекстСообщения = НСтр("ru = 'Документ ""[ЭСФ]"" не удалось обновить из ИС ЭСФ, так как в ИС ЭСФ не найден ЭСФ с номером: ""[Номер]"" и датой ""[Дата]"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЭСФ]", ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(СтрокаОтсутсвующийЭСФ.Ссылка));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Дата]", СтрокаОтсутсвующийЭСФ.Дата);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Номер]", СтрокаОтсутсвующийЭСФ.Номер);
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЦикла;
		
		/////////////////////////////////////////////////////////////////////////////
		// Обновить состояния исправляемых ЭСФ, а также их дополнительных ЭСФ.
		
		МассивИдентификаторовАннулируемыхЭСФ = МассивИдентификаторовАннулируемыхЭСФ(МассивИсправленныхЭСФ);
		ОбновитьСтатусыЭСФПоИдентификаторам(МассивИдентификаторовАннулируемыхЭСФ, ВыборкаНаправление.Направление, ПрофильИСЭСФ, ИдентификаторСессии);
		
	КонецЦикла;
	
	ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
	
КонецФункции

Функция СтрокаInvoiceKeyList(Знач МассивКлючейЭСФ)
	
	InvoiceKeyList = "";
	
	Для Каждого КлючЭСФ Из МассивКлючейЭСФ Цикл
		
		InvoiceKey = "<invoiceKey><date>[Дата]</date><num>[Номер]</num></invoiceKey>";
		InvoiceKey = СтрЗаменить(InvoiceKey, "[Дата]", Формат(КлючЭСФ.Дата, "ДФ=dd.MM.yyyy"));
		InvoiceKey = СтрЗаменить(InvoiceKey, "[Номер]", КлючЭСФ.Номер);
		
		InvoiceKeyList = InvoiceKeyList + InvoiceKey;
		
	КонецЦикла;
	
	InvoiceKeyList = "<invoiceKeyList>" + InvoiceKeyList + "</invoiceKeyList>";
	
	Возврат InvoiceKeyList;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПОДТВЕРЖДЕНИЕ О ПОЛУЧЕНИИ ЭСФ
Процедура СформироватьМассивIDДляПодтвержденияПолучениеВходящихЭСФ(Знач invoiceInfoList, МассивИдентификаторовЭСФ)
	
	Если invoiceInfoList = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	invoiceInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(invoiceInfoList);
	
	// Создать и заполнить массив идентификаторов ЭСФ.	
	
	Для Каждого invoiceInfo Из invoiceInfoList Цикл
		
		Если ЭСФСервер.ЕстьСвойство(invoiceInfo, "invoiceId") Тогда
			Идентификатор = Формат(invoiceInfo.invoiceId,"ЧГ=");
			МассивИдентификаторовЭСФ.Добавить(Идентификатор);	
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПодтвердитьПолучениеВходящихЭСФ(МассивИдентификаторовЭСФ, Знач ПрофильИСЭСФ, ИдентификаторСессии) Экспорт
		
	// Уведомить ИС ЭСФ о том, что отправленные ЭСФ были приняты (доставлены).
	ПредельныйРазмерПакетаИдентификаторов = 250; // ограничение ИС ЭСФ		
	ОбщийРазмерКолекции = МассивИдентификаторовЭСФ.Количество();
	КоличествоПакетов = ОбщийРазмерКолекции/ПредельныйРазмерПакетаИдентификаторов;
	Если КоличествоПакетов <> Цел(КоличествоПакетов) Тогда
		// количество пакетов дробное.
		КоличествоПакетов = Цел(КоличествоПакетов) + 1;
	КонецЕсли;
	
	НомерПакета = 1;
	СчетчикПакета = 0;
	ПакетДляОтправки = Новый Массив;	
	Для Каждого Идентификатор Из МассивИдентификаторовЭСФ Цикл
		СчетчикПакета = СчетчикПакета + 1;
		ПакетДляОтправки.Добавить(Идентификатор);
		
		Если (СчетчикПакета = ПредельныйРазмерПакетаИдентификаторов) ИЛИ (СчетчикПакета = ОбщийРазмерКолекции) Тогда
			СообщениеПользователя = Новый СообщениеПользователю;

			Текст = НСтр("ru = 'Отправляется подтверждение о приеме электронных счетов-фактур: %НомерПакета% из %КоличествоПакетов%...'");
			Текст = СтрЗаменить(Текст, "%НомерПакета%", НомерПакета);	
			Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);				
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(Текст);
			
			ТекстЗапроса = СоздатьЗапросНаПодтверждениеПолученияВходящихЭСФ(ПакетДляОтправки);	
			ВыполнитьЗапросНаПодтверждениеПолученияВходящихЭСФ(ТекстЗапроса, ПрофильИСЭСФ, ИдентификаторСессии);	
			
			СчетчикПакета = 0;
			ПакетДляОтправки = Новый Массив;
			НомерПакета = НомерПакета + 1;
		КонецЕсли;		
	КонецЦикла;	
	
КонецПроцедуры

Функция СоздатьЗапросНаПодтверждениеПолученияВходящихЭСФ(Знач МассивИдентификаторовЭСФ)
	
	ТекстЗапроса = ПолучитьМакет("ЗапросConfirmInvoiceById").ПолучитьТекст();	
	
	СтрокаСписокИдентификаторов = "";
	ШаблонИдентификатора = "<id>[Идентификатор]</id>";
	
	Для Каждого Идентификатор Из МассивИдентификаторовЭСФ Цикл
		
		ИдентификаторПоШаблону = ШаблонИдентификатора;
		ИдентификаторПоШаблону = СтрЗаменить(ИдентификаторПоШаблону, "[Идентификатор]", Формат(Идентификатор, "ЧГ="));
		СтрокаСписокИдентификаторов = СтрокаСписокИдентификаторов + ИдентификаторПоШаблону;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[idList]", СтрокаСписокИдентификаторов);	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВыполнитьЗапросНаПодтверждениеПолученияВходящихЭСФ(Знач ЗапросXML, Знач ПрофильИСЭСФ, ИдентификаторСессии)
	
	ЗапросXMLСИдентификаторомСессии = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);

	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXMLСИдентификаторомСессии, ИмяСервисаInvoiceService());
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		// Результат выполнения метода не обрабатывается.
		
	ИначеЕсли ЭтоМодульнаяОшибкаСессияЗакрыта(ОтветXML) Тогда
		
		ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ПрофильИСЭСФ);
		ВыполнитьЗапросНаПодтверждениеПолученияВходящихЭСФ(ЗапросXML, ПрофильИСЭСФ, ИдентификаторСессии);
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ВыполнитьЗапросНаПодтверждениеПолученияВходящихЭСФ'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При отправке подтверждения о доставке ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИЗМЕНЕНИЕ СТАТУСА ЭСФ (ОТЗЫВ, ОТКЛОНЕНИЕ И Т.Д.)

// См. ЭСФСервер.СоздатьЗапросНаИзменениеСтатусов()          
Функция СоздатьЗапросНаИзменениеСтатусов(Знач Действие, Знач КоллецияДляИзмененияСтатусов, Знач ОткрытыйКлючЭЦП) Экспорт
	
	// Сформировать текст запроса.
	ТекстЗапроса = ПолучитьМакет("ЗапросНаИзменениеСтатусовЭСФ").ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[x509Certificate]", ОткрытыйКлючЭЦП);
	
	// Заполнить параметр [Действие].
	Если Действие = ЭСФКлиентСервер.ДействиеОтзыв() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Действие]", "revoke");
	ИначеЕсли Действие = ЭСФКлиентСервер.ДействиеОтклонениеОтзыва() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Действие]", "unrevoke");
	ИначеЕсли Действие = ЭСФКлиентСервер.ДействиеОтклонениеДополнительногоИлиИсправленного() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Действие]", "decline");
	Иначе
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.СоздатьЗапросНаИзменениеСтатусов'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка. Необработанное действие.'");
	КонецЕсли;
	
	ВсеInvoiceIdWithReason = "";
	ШаблонInvoiceIdWithReason = "<invoiceIdWithReason><id>[id]</id><reason>[reason]</reason></invoiceIdWithReason>";	
	Для Каждого ЭлементКоллеции Из КоллецияДляИзмененияСтатусов Цикл
		id = ЭлементКоллеции.Ключ;
		reason = ЭлементКоллеции.Значение;
		invoiceIdWithReason = ШаблонInvoiceIdWithReason;
		invoiceIdWithReason = СтрЗаменить(invoiceIdWithReason, "[id]", id);
		invoiceIdWithReason = СтрЗаменить(invoiceIdWithReason, "[reason]", СокрЛП(reason));
		ВсеInvoiceIdWithReason = ВсеInvoiceIdWithReason + invoiceIdWithReason;		
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[invoiceIdWithReason]", ВсеInvoiceIdWithReason);
	
	// Сформировать строку для создания ЭЦП.
	ВсеIdsWithReasons = "";
	ШаблонIdsWithReasons = "<idWithReason><id>[id]</id><reason>[reason]</reason></idWithReason>";		
	Для Каждого ЭлементКоллеции Из КоллецияДляИзмененияСтатусов Цикл	
		id = ЭлементКоллеции.Ключ;
		reason = ЭлементКоллеции.Значение;		
		idsWithReasons = ШаблонIdsWithReasons;
		idsWithReasons = СтрЗаменить(idsWithReasons, "[id]", id);
		idsWithReasons = СтрЗаменить(idsWithReasons, "[reason]", СокрЛП(reason));		
		ВсеIdsWithReasons = ВсеIdsWithReasons + idsWithReasons;
	КонецЦикла;	
	СтрокаДляПодписи = СтрЗаменить("<signedContent><idsWithReasons>[idsWithReasons]</idsWithReasons></signedContent>", "[idsWithReasons]", ВсеIdsWithReasons);
	
	Результат = Новый Структура("ТекстЗапроса, СтрокаДляПодписи", ТекстЗапроса, СтрокаДляПодписи);
	
	Возврат Результат;
	
КонецФункции

// См. ЭСФСервер.ВыполнитьЗапросНаИзменениеСтатусов() 
Функция ВыполнитьЗапросНаИзменениеСтатусов(Знач Действие, Знач ЗапросXML, Знач ПрофильИСЭСФ, ИдентификаторСессии = Неопределено) Экспорт
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	СтруктурнаяЕдиница = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка;	
	
	Если ИдентификаторСессии = Неопределено Тогда
		ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ПрофильИСЭСФ);
		ЗакрытьСессию = Истина;	
	Иначе
		ЗакрытьСессию = Ложь;
	КонецЕсли;
	
	ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);	
	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаInvoiceService());
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		//Обработка пустого поля cancelReason
		ОтветXML = СтрЗаменить(ОтветXML, "<cancelReason></cancelReason>", "<cancelReason xsi:nil=""true"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""></cancelReason>");
		
		ИменаЭлементовРезультата = "ТекущийСтатус, СтатусИзменился, Ошибка";
		ИменаЭлементовОшибки = "Есть, Код, Представление, Расшифровка";
		
		// Выполнить начальное заполнение результата по ЗапросXML.
		КоллекцияРезультатов = Новый Соответствие;
		ЗапросXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ЗапросXML, ФабрикаXDTO);
		ИмяУзла = ЗапросXDTO.Body.Свойства()[0].Имя;
		invoiceIdWithReasonList = ЭСФСервер.СписокXDTOИзОбъектXDTO(ЗапросXDTO.Body[ИмяУзла].idWithReasonList.invoiceIdWithReason);
		Для Индекс = 0 По invoiceIdWithReasonList.Количество() - 1 Цикл
			invoiceIdWithReason = invoiceIdWithReasonList.Получить(Индекс);	
			Идентификатор = invoiceIdWithReason.id;
			Результат = Новый Структура(ИменаЭлементовРезультата);
			Результат.СтатусИзменился = Ложь;
			
			Результат.Ошибка = Новый Структура(ИменаЭлементовОшибки);
			Результат.Ошибка.Есть = Ложь;
			Результат.Ошибка.Код = "";
			Результат.Ошибка.Представление = "";
			Результат.Ошибка.Расшифровка = "";
			
			КоллекцияРезультатов.Вставить(Идентификатор, Результат);	
		КонецЦикла;
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		ИмяУзла = ОтветXDTO.Body.Свойства()[0].Имя;
		changeStatusResultList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body[ИмяУзла].resultList, "changeStatusResult", Неопределено);
		
		// Заполнить КоллекцияРезультатов, обновить документы ЭСФ.
		Если changeStatusResultList <> Неопределено Тогда
			
			changeStatusResultList = ЭСФСервер.СписокXDTOИзОбъектXDTO(changeStatusResultList);
			
			// Заполнить КоллекцияРезультатов.
			Для ИндексChangeStatusResultList = 0 По changeStatusResultList.Количество() - 1 Цикл
				
				Результат = Новый Структура(ИменаЭлементовРезультата);
				Результат.Ошибка = Новый Структура(ИменаЭлементовОшибки);
				
				changeStatusResult = changeStatusResultList.Получить(ИндексChangeStatusResultList);	
				Результат.ТекущийСтатус = ДанныеСтатусаInvoice(changeStatusResult.invoiceSummary);				
				Результат.СтатусИзменился = ?(ВРег(changeStatusResult.isChanged) = "TRUE", Истина, Ложь);
				
				// Заполнить сведения об ошибке, если она произошла при изменении статуса.
				КодОшибки = ЭСФСервер.ПолучитьСвойство(changeStatusResult, "errorCode", "");				
				Если КодОшибки <> "" Тогда	
					Результат.Ошибка.Есть = Истина;
					Результат.Ошибка.Код = КодОшибки;
					ДанныеОшибки = ДанныеОшибкиИзмененияСтатусаЭСФ(КодОшибки, Действие);
					Результат.Ошибка.Представление = ДанныеОшибки.Представление;
					Результат.Ошибка.Расшифровка = ДанныеОшибки.Расшифровка;
				Иначе
					Результат.Ошибка.Есть = Ложь;
				КонецЕсли;
								
				КоллекцияРезультатов.Вставить(Результат.ТекущийСтатус.Идентификатор, Результат);
				
			КонецЦикла;
			
			// Обновить документы ЭСФ.
			КоллекцияСтатусовЭСФ = Новый Соответствие;
			Для Каждого ЭлементКоллекции ИЗ КоллекцияРезультатов Цикл
				КоллекцияСтатусовЭСФ.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение.ТекущийСтатус); 
			КонецЦикла;
			ОтразитьИзмененияСтатусовЭСФ(КоллекцияСтатусовЭСФ, СтруктурнаяЕдиница);
			
		КонецЕсли;
		
		Если ЗакрытьСессию Тогда
			ЭСФСервер.ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
			ИдентификаторСессии = Неопределено;
		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ВыполнитьЗапросНаИзменениеСтатусов'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При отзыве ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат КоллекцияРезультатов;
	
КонецФункции

Функция ДанныеОшибкиИзмененияСтатусаЭСФ(Знач КодОшибки, Знач Действие)
	
	ДанныеОшибки = Новый Структура;
	ДанныеОшибки.Вставить("Код", КодОшибки);
	ДанныеОшибки.Вставить("Представление", "");
	ДанныеОшибки.Вставить("Расшифровка", "");
		
	// Заполнить представление ошибки.
	Если КодОшибки = "WRONG_STATUS" Тогда
		
		ДанныеОшибки.Представление = НСтр("ru = 'Некорректный статус ЭСФ'");	
		
	ИначеЕсли КодОшибки = "WRONG_TYPE" Тогда 
		
		ДанныеОшибки.Представление = НСтр("ru = 'Некорректный тип ЭСФ'");	
		
	ИначеЕсли КодОшибки = "WRONG_DATE" Тогда 
		
		ДанныеОшибки.Представление = НСтр("ru = 'Истек срок возможности отклонения ЭСФ'");	
		
	Иначе
		
		ДанныеОшибки.Представление = КодОшибки;	
		
	КонецЕсли;
	
	// Заполнить расшифровку ошибки.
	Если КодОшибки = "WRONG_DATE" Тогда
		
		ДанныеОшибки.Расшифровка = НСтр("ru = 'Истек срок возможности отклонения ЭСФ.'");	
		
	ИначеЕсли Действие = ЭСФКлиентСервер.ДействиеОтзыв() Тогда
		
		ДанныеОшибки.Расшифровка = НСтр(
			"ru = 'Допускается отзывать только обычные ЭСФ, которые находятся в статусах ""Создан"" или ""Доставлен"".
			|Дополнительные ЭСФ и исправленные ЭСФ отзывать не допускается.'");
		
	 ИначеЕсли Действие = ЭСФКлиентСервер.ДействиеОтклонениеДополнительногоИлиИсправленного()
		 ИЛИ Действие = ЭСФКлиентСервер.ДействиеОтклонениеОтзыва() Тогда
		
		 ДанныеОшибки.Расшифровка = НСтр(
			 "ru = 'Допускается отклонять отозванные ЭСФ, а также дополнительные и исправленные ЭСФ.
			 |Отклоняемый ЭСФ должен иметь статус ""Доставленный"" или ""Отозванный"".'");
					
	Иначе	
		
		ДанныеОшибки.Расшифровка = НСтр("ru = 'ЭСФ имеет статус, который не позволяет выполнить выбранное действие.'");
		
	КонецЕсли;

		
	Возврат ДанныеОшибки;
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// См. ЭСФСервер.ПроверитьДоступИВерсиюНаСервере()
Функция ПроверитьДоступИВерсиюНаСервере() Экспорт
		
	ИнформационнаяБазаФайловая = ЭСФСерверПереопределяемый.ИнформационнаяБазаФайловая();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОшибкаСоединения");
	СтруктураПараметров.Вставить("ОшибкаВерсии");
	СтруктураПараметров.Вставить("ВерсияИСЭСФ");
	СтруктураПараметров.Вставить("ВерсияИСЭСФПоддерживается");
	СтруктураПараметров.Вставить("ТекстВерсияОшибка");
	СтруктураПараметров.Вставить("ТекстВерсияПоддерживает");
	СтруктураПараметров.Вставить("СерверИСЭСФДоступен");
		
	ТекстОшибки = "";	
	СтруктураПараметров.ВерсияИСЭСФ = ВерсияИСЭСФ(ТекстОшибки);
	
	Если СтруктураПараметров.ВерсияИСЭСФ = Неопределено Тогда // Не удалось подключиться к ИС ЭСФ.
		
		СтруктураПараметров.СерверИСЭСФДоступен = Ложь;
		
		СтруктураПараметров.ВерсияИСЭСФПоддерживается = Ложь;
				
		ОшибкаСоединения = НСтр(
		"ru = 'При установке соединения с ИС ЭСФ возникла ошибка:
		|%ТекстОшибки%
		|Возможные причины:
		|- Сервер ИС ЭСФ недоступен (Проверьте работу: https://esf.gov.kz:8443/esf-web/).
		|%ОшибкаИнтернета%
		|- Настройки безопасности Вашей сети требуют работы через прокси-сервер (Задайте настройки прокси-сервера, кнопка ""Настроить прокси"").'");
		ОшибкаСоединения = СтрЗаменить(ОшибкаСоединения, "%ТекстОшибки%", ТекстОшибки);	 
		
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ОшибкаСоединения = СтрЗаменить(ОшибкаСоединения, "%ВерсияПлатформы%", СистемнаяИнформация.ВерсияПриложения);
		СтрокаСоединения = НРег(СтрокаСоединенияИнформационнойБазы()); 
		Если ИнформационнаяБазаФайловая Тогда
			ОшибкаИнтернета = НСтр("ru = '- На Вашем компьютере, для 1С:Предприятие (%ВерсияПлатформы%), нет доступа в Интернет (Обратитесь к системному администратору).'");
		Иначе
			ОшибкаИнтернета = НСтр("ru = '- На сервере %ИмяСервера%, для 1С:Предприятие (%ВерсияПлатформы%), нет доступа в Интернет (Обратитесь к системному администратору).'");
			ИмяСервера = СтрЗаменить(СтрокаСоединения, "srvr=""", "");
			ИмяСервера = Лев(ИмяСервера, Найти(ИмяСервера, """") - 1);
			ОшибкаИнтернета = СтрЗаменить(ОшибкаИнтернета, "%ИмяСервера%", ИмяСервера);
		КонецЕсли;
		ОшибкаИнтернета = СтрЗаменить(ОшибкаИнтернета, "%ВерсияПлатформы%", СистемнаяИнформация.ВерсияПриложения);
		СтруктураПараметров.ОшибкаСоединения = СтрЗаменить(ОшибкаСоединения, "%ОшибкаИнтернета%", ОшибкаИнтернета);
		
	Иначе // Удалось подключиться к ИС ЭСФ.
		
		СтруктураПараметров.СерверИСЭСФДоступен = Истина;
		
		// Заполнить номер текущей версии ИС ЭСФ в успешно.
		СтруктураПараметров.ТекстВерсияПоддерживает = НСтр("ru = 'Программа поддерживает текущую версию ИС ЭСФ (%ВерсияИСЭСФ%).'");
		СтруктураПараметров.ТекстВерсияПоддерживает = СтрЗаменить(СтруктураПараметров.ТекстВерсияПоддерживает, "%ВерсияИСЭСФ%", СтруктураПараметров.ВерсияИСЭСФ);
				
		// Заполнить номер текущей версии ИС ЭСФ в ошибке.
		СтруктураПараметров.ТекстВерсияОшибка = НСтр("ru = 'Программа не поддерживает текущую версию ИС ЭСФ (%ВерсияИСЭСФ%).'");
		СтруктураПараметров.ТекстВерсияОшибка = СтрЗаменить(СтруктураПараметров.ТекстВерсияОшибка, "%ВерсияИСЭСФ%", СтруктураПараметров.ВерсияИСЭСФ);		
			
		Если ПоддерживаемыеВерсииИСЭСФ().Найти(СтруктураПараметров.ВерсияИСЭСФ) = Неопределено Тогда
			
			СтруктураПараметров.ВерсияИСЭСФПоддерживается = Ложь;
			
			// Показать ошибку версии ИС ЭСФ. 
			ОшибкаВерсии = НСтр(
			"ru = 'Текущая версия программы ""%НаименованиеКонфигурации%"" (%ВерсияКонфигурации%) может не поддерживать текущую версию ИС ЭСФ (%ВерсияИСЭСФ%).
			|Пожалуйста, обновите программу ""%НаименованиеКонфигурации%"".'");
			ОшибкаВерсии = СтрЗаменить(ОшибкаВерсии, "%НаименованиеКонфигурации%", Метаданные.Синоним);
			ОшибкаВерсии = СтрЗаменить(ОшибкаВерсии, "%ВерсияКонфигурации%", Метаданные.Версия);
			СтруктураПараметров.ОшибкаВерсии = СтрЗаменить(ОшибкаВерсии, "%ВерсияИСЭСФ%", СтруктураПараметров.ВерсияИСЭСФ);
			
		Иначе
			
			СтруктураПараметров.ВерсияИСЭСФПоддерживается = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Выполняет метод веб-сервиса ИС ЭСФ.
//
// Параметры:
//  ТекстМетода - Строка - Текст метода, который необходимо выполнить.
//  ИмяВебСервиса - Строка - Имя веб-сервиса, метод которого необходимо вызвать.
//
// Возвращаемое значение:
//  Строка - Результат выполения метода.
//
Функция ВыполнитьМетодВебСервиса(Знач ТекстМетода, Знач ИмяВебСервиса, Знач ИспользуетТаймаут = Истина, ВерсияИСЭСФ = Неопределено) Экспорт
	
	Если ИмяВебСервиса <> "VersionService" И ВерсияИСЭСФ = Неопределено Тогда
		ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
		ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	КонецЕсли;	
		
	// используемая версия API - v1, за исключением методов VersionService, которые не версионируются
	ВерсияВебСервиса = "";
	Если Найти(ВерсияИСЭСФ, "5.0.0") <> 0 И ИмяВебСервиса <> "VersionService" Тогда
		ВерсияВебСервиса = "/api1";
		
		ТекстМетода = СтрЗаменить(ТекстМетода, "namespace.esf", "esf");
		ТекстМетода = СтрЗаменить(ТекстМетода, "xmlns:nam=", "xmlns:esf=");
		ТекстМетода = СтрЗаменить(ТекстМетода, "nam:", "esf:");
	КонецЕсли;	
	
	// подключение к серверу
	ПараметрыПодключения = ЭСФСерверПовтИсп.ПолучитьПараметрыПодключенияКСерверуИСЭСФ();
	
	Если ПараметрыПодключения.СерверИСЭСФ_HTTPS Тогда 
			
		HTTPСоединение = Новый HTTPСоединение(
			ПараметрыПодключения.СерверИСЭСФ_Адрес, 
			ПараметрыПодключения.СерверИСЭСФ_Порт, 
			, 
			, 
			ЭСФСерверПовтИсп.НовыйПроксиСерверИСЭСФ(), 
			?(ИспользуетТаймаут, ЭСФВызовСервераПовтИсп.ПолучитьТаймаутПодключенияИСЭСФ(), 0),
			Новый ЗащищенноеСоединениеOpenSSL(,));
		
	Иначе
		
		HTTPСоединение = Новый HTTPСоединение(
			ПараметрыПодключения.СерверИСЭСФ_Адрес, 
			ПараметрыПодключения.СерверИСЭСФ_Порт, 
			, 
			, 
			ЭСФСерверПовтИсп.НовыйПроксиСерверИСЭСФ(),
			?(ИспользуетТаймаут, ЭСФВызовСервераПовтИсп.ПолучитьТаймаутПодключенияИСЭСФ(), 0));
			
	КонецЕсли;
		
   	HTTPЗапрос = Новый HTTPЗапрос();
	
	ПрефиксРесурса = ПараметрыПодключения.СерверИСЭСФ_Ресурс;
	ПрефиксРесурса = ?(Лев(ПрефиксРесурса, 1) = "/", Сред(ПрефиксРесурса, 2), ПрефиксРесурса);
	ПрефиксРесурса = ?(Прав(ПрефиксРесурса, 1) = "/", Сред(ПрефиксРесурса, 1, СтрДлина(ПрефиксРесурса) - 1), ПрефиксРесурса);	
	HTTPЗапрос.АдресРесурса	= "/" + ПрефиксРесурса + ВерсияВебСервиса +"/" + ИмяВебСервиса;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "text/xml;charset=UTF-8");
	Заголовки.Вставить("SOAPAction", """""");
	HTTPЗапрос.Заголовки = Заголовки;
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстМетода, "UTF-8");
	
	Попытка
		
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ТекстОтвета = СокрЛП(HTTPОтвет.ПолучитьТелоКакСтроку());	
		
	Исключение
		
		Если HTTPОтвет = Неопределено Тогда
			ОписаниеОшибкиHTTP = НСтр("ru = 'Превышен таймаут ожидания ответа от сервера'");
		Иначе
			ОписаниеОшибкиHTTP = ОписаниеОшибки();
		КонецЕсли;
		
		// Обработка ошибки доступности сервера ИС ЭСФ
		ОшибкаСоединения = НСтр(
		"ru = 'При установке соединения с ИС ЭСФ возникла ошибка:
		|%ТекстОшибки%
		|Возможные причины:
		|- Сервер ИС ЭСФ недоступен (Проверьте работу: https://esf.gov.kz:8443/esf-web/).
		|- Настройки безопасности Вашей сети требуют работы через прокси-сервер (Задайте настройки прокси-сервера, кнопка ""Настроить прокси"").'");
		
		ОшибкаСоединения = СтрЗаменить(ОшибкаСоединения, "%ТекстОшибки%", ОписаниеОшибкиHTTP);	 
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаСоединения);
		
		ТекстОтвета = "";
		
	КонецПопытки;
	
	Возврат ТекстОтвета;
	
КонецФункции

// Выполняет метод веб-сервиса ИС ЭСФ.
//
// Параметры:
//  ТекстМетода - Строка - Текст метода, который необходимо выполнить.
//  ИмяВебСервиса - Строка - Имя веб-сервиса, метод которого необходимо вызвать.
//
// Возвращаемое значение:
//  Строка - Результат выполения метода.
//
Функция ВыполнитьМетодВебСервисаПолучитьВерсию(Знач ТекстМетода, Знач ИмяВебСервиса, Знач ИспользуетТаймаут = Истина, ИспользоватьНовыйАдрес = Ложь) Экспорт
	
	ВерсияВебСервиса = "";
	Если ИспользоватьНовыйАдрес Тогда
		ВерсияВебСервиса = "/api1";
	КонецЕсли;	
	
	// подключение к серверу
	ПараметрыПодключения = ЭСФСерверПовтИсп.ПолучитьПараметрыПодключенияКСерверуИСЭСФ();
	
	Если ПараметрыПодключения.СерверИСЭСФ_HTTPS Тогда 
			
		HTTPСоединение = Новый HTTPСоединение(
			ПараметрыПодключения.СерверИСЭСФ_Адрес, 
			ПараметрыПодключения.СерверИСЭСФ_Порт, 
			, 
			, 
			ЭСФСерверПовтИсп.НовыйПроксиСерверИСЭСФ(), 
			?(ИспользуетТаймаут, ЭСФВызовСервераПовтИсп.ПолучитьТаймаутПодключенияИСЭСФ(), 0),
			Новый ЗащищенноеСоединениеOpenSSL(,));
		
	Иначе
		
		HTTPСоединение = Новый HTTPСоединение(
			ПараметрыПодключения.СерверИСЭСФ_Адрес, 
			ПараметрыПодключения.СерверИСЭСФ_Порт, 
			, 
			, 
			ЭСФСерверПовтИсп.НовыйПроксиСерверИСЭСФ(),
			?(ИспользуетТаймаут, ЭСФВызовСервераПовтИсп.ПолучитьТаймаутПодключенияИСЭСФ(), 0));
			
	КонецЕсли;
		
   	HTTPЗапрос = Новый HTTPЗапрос();
	
	ПрефиксРесурса = ПараметрыПодключения.СерверИСЭСФ_Ресурс;
	ПрефиксРесурса = ?(Лев(ПрефиксРесурса, 1) = "/", Сред(ПрефиксРесурса, 2), ПрефиксРесурса);
	ПрефиксРесурса = ?(Прав(ПрефиксРесурса, 1) = "/", Сред(ПрефиксРесурса, 1, СтрДлина(ПрефиксРесурса) - 1), ПрефиксРесурса);	
	HTTPЗапрос.АдресРесурса	= "/" + ПрефиксРесурса + ВерсияВебСервиса +"/" + ИмяВебСервиса;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "text/xml;charset=UTF-8");
	Заголовки.Вставить("SOAPAction", """""");
	HTTPЗапрос.Заголовки = Заголовки;
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстМетода, "UTF-8");
	
	Попытка
		
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ТекстОтвета = СокрЛП(HTTPОтвет.ПолучитьТелоКакСтроку());	
		
	Исключение
		
		Если HTTPОтвет = Неопределено Тогда
			ОписаниеОшибкиHTTP = НСтр("ru = 'Превышен таймаут ожидания ответа от сервера'");
		Иначе
			ОписаниеОшибкиHTTP = ОписаниеОшибки();
		КонецЕсли;
		
		// Обработка ошибки доступности сервера ИС ЭСФ
		ОшибкаСоединения = НСтр(
		"ru = 'При установке соединения с ИС ЭСФ возникла ошибка:
		|%ТекстОшибки%
		|Возможные причины:
		|- Сервер ИС ЭСФ недоступен (Проверьте работу: https://esf.gov.kz:8443/esf-web/).
		|- Настройки безопасности Вашей сети требуют работы через прокси-сервер (Задайте настройки прокси-сервера, кнопка ""Настроить прокси"").'");
		
		ОшибкаСоединения = СтрЗаменить(ОшибкаСоединения, "%ТекстОшибки%", ОписаниеОшибкиHTTP);	 
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаСоединения);
		
		ТекстОтвета = "";
		
	КонецПопытки;
	
	Возврат ТекстОтвета;
	
КонецФункции

// Заполняет поля Приемник, которые в начале имени содержат Префикс, значениями из Источник.
//
// Например, если в Приемник есть поле "Наименование", 
// а в Источник есть поля "Получатель_Наименование" и "Поставщик_Наименование", Префикс равен "Получатель_", 
// то в Приемник будет скопировано значение "Получатель_Наименование" из Источник. 
//
// Параметры:
//  Приемник - Любая именованная коллекция - Значение, чьи свойства будут заполнены значениями соответствующих свойств.
//  Источник - ВыборкаИзРезультатаЗапроса - Значения свойств данного объекта будут установлены в соответствующие свойства.
//  Префикс - Строка - Префикс в источнике, по которому будут отобраны значения для заполнения приемника.
//  СписокСвойств - См. метод глобального контекста ЗаполнитьЗначенияСвойств().
//  ИсключаяСвойства - См. метод глобального контекста ЗаполнитьЗначенияСвойств().
//
Процедура ЗаполнитьЗначенияСвойствПоПрефиксу(Приемник, Знач Источник, Знач Префикс, Знач СписокСвойств = Неопределено, Знач ИсключаяСвойства = Неопределено)
	
	Если ТипЗнч(Источник) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		РезультатЗапроса = Источник.Владелец();
		
		СтруктураИсточник = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			Если Найти(Колонка.Имя, Префикс) = 1 Тогда
				ИмяПоля = СтрЗаменить(Колонка.Имя, Префикс, "");
				СтруктураИсточник.Вставить(ИмяПоля, Источник[Колонка.Имя]);	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Приемник, СтруктураИсточник, СписокСвойств, ИсключаяСвойства); 
	
КонецПроцедуры

// Возвращает данные статуса ЭСФ: Статус, Идентификатор, ДатаВыписки и т.д.
//
// Параметры:
//  InvoiceSummaryXDTO - ОбъектXDTO - Объект, из которого будут извлечены данные статуса.
//
// Возвращаемое значение:
//  Структура - Содержащая данные статуса ЭСФ.
//   |- Идентификатор - Строка - Идентификатор ЭСФ.
//   |- Причина - Строка - Причина по которой ИС ЭСФ отклонила ЭСФ или причина отзыва/аннулирования ЭСФ.
//   |- ДатаВыписки - Дата - Дата выписки ЭСФ.
//   |- РегистрационныйНомер - Строка - Регистрационный номер ЭСФ.
//   |- ДатаПоследнегоОбновления - Дата - Дата последнего обновления ЭСФ.
//   |- Номер - Строка - Номер ЭСФ.
//   |- ПользовательскийСтатус - ПеречислениеСсылка.ПользовательскиеСтатусыЭСФ - Пользовательский статус ЭСФ.
//   |- Статус - ПеречислениеСсылка.СтатусыЭСФ - Статус ЭСФ.
//
// Примечание:
//  Структура всегда содержит все вышеописанные элементы. Некоторые элементы могут быть пустыми.
//  Пустые элементы всегда имеют значение по умолчанию, для того типа, каким они являются, 
//  например, пустой РегистрационныйНомер будет иметь значение "".
//
Функция ДанныеСтатусаInvoice(Знач InvoiceSummaryXDTO)
	                 
	ДанныеСтатуса = Новый Структура;
	
	ДанныеСтатуса.Вставить("Идентификатор", Формат(InvoiceSummaryXDTO.invoiceId, "ЧГ="));
	
	cancelReason = ЭСФСервер.ПолучитьСвойство(InvoiceSummaryXDTO, "cancelReason", "");
	ДанныеСтатуса.Вставить("Причина", cancelReason);
	
	date = ЭСФСервер.ПолучитьСвойство(InvoiceSummaryXDTO, "date", "01.01.0001");
	ДанныеСтатуса.Вставить("ДатаВыписки", ЭСФСервер.ДатаИБ(date));
	
	registrationNumber = ЭСФСервер.ПолучитьСвойство(InvoiceSummaryXDTO, "registrationNumber", "");
	ДанныеСтатуса.Вставить("РегистрационныйНомер", registrationNumber);
	
	lastUpdateDate = ЭСФСервер.ПолучитьСвойство(InvoiceSummaryXDTO, "lastUpdateDate", "01.01.0001");
	ДанныеСтатуса.Вставить("ДатаПоследнегоОбновления", ЭСФСервер.ДатаИБ(lastUpdateDate));
	
	num = ЭСФСервер.ПолучитьСвойство(InvoiceSummaryXDTO, "num", "");				
	ДанныеСтатуса.Вставить("Номер", num);
	
	invoiceStatus = ЭСФСервер.ПолучитьСвойство(InvoiceSummaryXDTO, "invoiceStatus", "");
	ДанныеСтатуса.Вставить("Статус", ЭСФКлиентСервер.СтатусИБ(invoiceStatus));
	
	// На данный момент из ИС ЭСФ удален пользовательский статус (state).
	// Пользовательский статус не удален из конфигурации, т.к. есть вероятность, что его вернут в ИС ЭСФ. 
	ДанныеСтатуса.Вставить("ПользовательскийСтатус", Перечисления.ПользовательскиеСтатусыЭСФ.ПустаяСсылка());
	
	Возврат ДанныеСтатуса;
	
КонецФункции

// Обновляет документы ЭСФ, на основании новых данных статусов.
//
// Параметры:
//  КоллекцияСтатусовЭСФ - Соответствие - Коллеция статусов, изменение которых необходимо отразить.
//   Ключ - Строка - Идентификатор ЭСФ.
//   Значение - Струткруа - См. в описании функции ДанныеСтатусаInvoice().
//  СтруктурнаяЕдиница - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - 
//   Структурная единица, которой принадлежат все статусы в коллекции статусов.
//
Процедура ОтразитьИзмененияСтатусовЭСФ(Знач КоллекцияСтатусовЭСФ, Знач СтруктурнаяЕдиница)
	
	СтарыеДанныеСтатусовЭСФ = НоваяВыборкаДанныеСтатусовЭСФ(КоллекцияСтатусовЭСФ, СтруктурнаяЕдиница);		
	
	Пока СтарыеДанныеСтатусовЭСФ.Следующий() Цикл
		
		НовыеДанныеСтатусовЭСФ = КоллекцияСтатусовЭСФ.Получить(СтарыеДанныеСтатусовЭСФ.Идентификатор);  
		
		Если НовыеДанныеСтатусовЭСФ <> Неопределено Тогда
			
			ОбновитьЭСФ = Ложь;
			
			ЕстьОшибки = НовыеДанныеСтатусовЭСФ.Свойство("Ошибки") И НовыеДанныеСтатусовЭСФ.Ошибки.Количество() > 0;
			
			Если ЕстьОшибки Тогда
				ОбновитьЭСФ = Истина;
			КонецЕсли;

			Если СтарыеДанныеСтатусовЭСФ.РегистрационныйНомер <> НовыеДанныеСтатусовЭСФ.РегистрационныйНомер Тогда
				ОбновитьЭСФ = Истина;
			КонецЕсли;
			
			Если СтарыеДанныеСтатусовЭСФ.ПользовательскийСтатус <> НовыеДанныеСтатусовЭСФ.ПользовательскийСтатус Тогда
				ОбновитьЭСФ = Истина;
			КонецЕсли;
			
			Если СтарыеДанныеСтатусовЭСФ.Статус <> НовыеДанныеСтатусовЭСФ.Статус Тогда
				ОбновитьЭСФ = Истина;
			КонецЕсли;
			
			Если ОбновитьЭСФ Тогда
				
				ОбъектЭСФ = СтарыеДанныеСтатусовЭСФ.ЭСФ.ПолучитьОбъект();
				
				Если (НовыеДанныеСтатусовЭСФ.ДатаВыписки <> Дата(1, 1, 1)) И НовыеДанныеСтатусовЭСФ.ДатаВыписки <> НачалоДня(ОбъектЭСФ.Дата) Тогда
					ОбъектЭСФ.Дата = НовыеДанныеСтатусовЭСФ.ДатаВыписки;
					ОбъектЭСФ.УстановитьВремя();
				КонецЕсли;
				
				
				ОбъектЭСФ.Номер	= НовыеДанныеСтатусовЭСФ.Номер; 
				ОбъектЭСФ.РегистрационныйНомер = НовыеДанныеСтатусовЭСФ.РегистрационныйНомер;
				ОбъектЭСФ.ПользовательскийСтатус = НовыеДанныеСтатусовЭСФ.ПользовательскийСтатус;
				ОбъектЭСФ.Статус = НовыеДанныеСтатусовЭСФ.Статус;
				
				// Отразить содержимое узла cancelReason.
				Если ЕстьОшибки Тогда
					ОбъектЭСФ.Ошибки.Очистить();
					Для Каждого Строка из НовыеДанныеСтатусовЭСФ.Ошибки Цикл
						ОшибкиСтрока = ОбъектЭСФ.Ошибки.Добавить();	
						ОшибкиСтрока.Текст = Строка.Текст;
						ОшибкиСтрока.Поле = Строка.Поле;
					КонецЦикла;
					
					// Отразить содержимое узла cancelReason.
				ИначеЕсли НЕ ПустаяСтрока(НовыеДанныеСтатусовЭСФ.Причина) Тогда
					
					Если ПустаяСтрока(НовыеДанныеСтатусовЭСФ.РегистрационныйНомер) Тогда
						
						ОшибкиСтрока = ОбъектЭСФ.Ошибки.Добавить();
						ОшибкиСтрока.Текст = НовыеДанныеСтатусовЭСФ.Причина;
						ОшибкиСтрока.Поле = "";
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(НовыеДанныеСтатусовЭСФ.Причина) Тогда
					
					Если НовыеДанныеСтатусовЭСФ.Статус = Перечисления.СтатусыЭСФ.Отозванный
						ИЛИ НовыеДанныеСтатусовЭСФ.Статус = Перечисления.СтатусыЭСФ.Аннулированный
						ИЛИ НовыеДанныеСтатусовЭСФ.Статус = Перечисления.СтатусыЭСФ.АннулированИСЭСФДляОтнесенияВЗачетИНаВычеты
						ИЛИ НовыеДанныеСтатусовЭСФ.Статус = Перечисления.СтатусыЭСФ.АннулированПриОтзывеСНТ
						ИЛИ НовыеДанныеСтатусовЭСФ.Статус = Перечисления.СтатусыЭСФ.АннулированПриОтклоненииСНТ Тогда
						
						ОбъектЭСФ.Причина = ПричинаИБ(НовыеДанныеСтатусовЭСФ.Причина);
						
					КонецЕсли;

				КонецЕсли;
				
				ОбъектЭСФ.ДополнительныеСвойства.Вставить(ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
				ОбъектЭСФ.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет документы ЭСФ, на основании полученных ошибок.
//
// Параметры:
//  КоллекцияСтатусовЭСФ - Соответствие - Коллеция статусов, изменение которых необходимо отразить.
//   Ключ - Строка - Идентификатор ЭСФ.
//   Значение - Струтктура - См. в описании функции ДанныеСтатусаInvoice().
//  СтруктурнаяЕдиница - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - 
//   Структурная единица, которой принадлежат все статусы в коллекции статусов.
//
Процедура ОтразитьИзмененияОшибокЭСФ(Знач КоллекцияСтатусовЭСФ, Знач СтруктурнаяЕдиница)
	
	СтарыеДанныеСтатусовЭСФ = НоваяВыборкаДанныеСтатусовЭСФ(КоллекцияСтатусовЭСФ, СтруктурнаяЕдиница);		
	
	Пока СтарыеДанныеСтатусовЭСФ.Следующий() Цикл
		
		НовыеДанныеОшибокЭСФ = КоллекцияСтатусовЭСФ.Получить(СтарыеДанныеСтатусовЭСФ.Идентификатор);  
		
		Если НовыеДанныеОшибокЭСФ <> Неопределено И НовыеДанныеОшибокЭСФ.Ошибки <> Неопределено Тогда
			
			ОбъектЭСФ = СтарыеДанныеСтатусовЭСФ.ЭСФ.ПолучитьОбъект();
			ОбъектЭСФ.Ошибки.Очистить();
			Ошибки = НовыеДанныеОшибокЭСФ.Ошибки;
			Для Каждого Строка из Ошибки Цикл
				ОшибкаПоле = Строка.Поле;
				// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
				// с сервера на клиент приводи к ошибке мутабельного значения.
				Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
					ОшибкаПоле = "";
				КонецЕсли;
				ОшибкаТекст = Строка.Текст;
				ОшибкиСтрока = ОбъектЭСФ.Ошибки.Добавить();
				ОшибкиСтрока.Поле = ОшибкаПоле;
				ОшибкиСтрока.Текст = ОшибкаТекст;
				
			КонецЦикла;
			
			
			
			
			ОбъектЭСФ.ДополнительныеСвойства.Вставить(ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
			ОбъектЭСФ.Записать();
			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Возвращает выборку, содержащую данные статусов существующих ЭСФ.
//
// Параметры:
//  КоллекцияСтатусовЭСФ - Соответствие - Статусы, для которых необходимо получить статусы документов ЭСФ. 
//   |- Ключ - Строка - Идентификатор ЭСФ.
//   |- Значение - Струткруа - Данные статуса, см. в описании функции ДанныеСтатусаInvoice().
//  СтруктурнаяЕдиница - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - 
//   Структурная единица, которой принадлежат все статусы в коллекции статусов. 
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - Выборка, содержащая все идентификаторы  
//   из КоллекцияСтатусовЭСФ и данные статусов существующих ЭСФ.
//
Функция НоваяВыборкаДанныеСтатусовЭСФ(Знач КоллекцияСтатусовЭСФ, Знач СтруктурнаяЕдиница)
		
	ТабЗначИдентификаторы = Новый ТаблицаЗначений;
	ТабЗначИдентификаторы.Колонки.Добавить("Идентификатор", Метаданные.Документы.ЭСФ.Реквизиты.Идентификатор.Тип);	
	Для Каждого ЭлементКоллекции Из КоллекцияСтатусовЭСФ Цикл
		СтрокаТабЗначИдентификаторы = ТабЗначИдентификаторы.Добавить();
		СтрокаТабЗначИдентификаторы.Идентификатор = ЭлементКоллекции.Ключ;		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабЗначИдентификаторы.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ТабЗначИдентификаторы КАК ТабЗначИдентификаторы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФ.Идентификатор КАК Идентификатор,
	|	ЭСФ.Ссылка,
	|	ЭСФ.РегистрационныйНомер,
	|	ЭСФ.Статус,
	|	ЭСФ.ПользовательскийСтатус,
	|	ЭСФ.СтруктурноеПодразделение,
	|	ЭСФ.Организация
	|ПОМЕСТИТЬ ЭСФ
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|ГДЕ
	|	ЭСФ.Идентификатор В
	|			(ВЫБРАТЬ
	|				Идентификаторы.Идентификатор
	|			ИЗ
	|				Идентификаторы КАК Идентификаторы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Идентификаторы.Идентификатор КАК Идентификатор,
	|	ЭСФ.Ссылка КАК ЭСФ,
	|	ЭСФ.РегистрационныйНомер КАК РегистрационныйНомер,
	|	ЭСФ.Статус КАК Статус,
	|	ЭСФ.ПользовательскийСтатус КАК ПользовательскийСтатус,
	|	ЭСФ.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ЭСФ.Организация КАК Организация
	|ИЗ
	|	Идентификаторы КАК Идентификаторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЭСФ КАК ЭСФ
	|		ПО Идентификаторы.Идентификатор = ЭСФ.Идентификатор";
	
	Если НЕ ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЭСФ.СтруктурноеПодразделение,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЭСФ.СтруктурноеПодразделение = &СтруктурноеПодразделение", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЭСФ.СтруктурноеПодразделение КАК СтруктурноеПодразделение,", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТабЗначИдентификаторы", ТабЗначИдентификаторы);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

Процедура ОбработатьРезультатыИзмененияСтатусов(Знач КоллекцияРезультатовИзмененияСтатусов, Форма) Экспорт
	
	Для Каждого РезультатИзмененияСтатуса Из КоллекцияРезультатовИзмененияСтатусов Цикл
		
		// Найти строки по идентификатору.
		ПараметрыОтбора = Новый Структура("Идентификатор", РезультатИзмененияСтатуса.Ключ);
		МассивНайденныхСтрок = Форма.СписокЭСФ.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
			
			Если РезультатИзмененияСтатуса.Значение.ТекущийСтатус <> Неопределено Тогда
				
				// Заполнить колонку "Статус".
				НайденнаяСтрока.Статус = РезультатИзмененияСтатуса.Значение.ТекущийСтатус.Статус;
				
				// Заполнить колонки ошибки.
				Если РезультатИзмененияСтатуса.Значение.Ошибка.Есть Тогда
					
					НайденнаяСтрока.ОшибкаЕсть = Истина;
					НайденнаяСтрока.ОшибкаПредставление = РезультатИзмененияСтатуса.Значение.Ошибка.Представление;
					НайденнаяСтрока.ОшибкаРасшифровка = РезультатИзмененияСтатуса.Значение.Ошибка.Расшифровка;
					
				Иначе
					
					НайденнаяСтрока.ОшибкаЕсть = Ложь;
					НайденнаяСтрока.ОшибкаПредставление = "";
					НайденнаяСтрока.ОшибкаРасшифровка = "";
					
				КонецЕсли;
				
			Иначе
				
				НайденнаяСтрока.ОшибкаЕсть = Истина;
				НайденнаяСтрока.ОшибкаПредставление = НСтр("ru = 'ЭСФ не найден в ИС ЭСФ.'");
				
				ТекстРасшифровки = НСтр("ru = 'Электронный счет-фактура, с идентификатором ""%Идентификатор%"", не найден в ИС ЭСФ.'");
				ТекстРасшифровки = СтрЗаменить(ТекстРасшифровки, "%Идентификатор%", РезультатИзмененияСтатуса.Ключ);
				НайденнаяСтрока.ОшибкаРасшифровка = ТекстРасшифровки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ГосучреждениеБИК() Экспорт
	
	Возврат "KKMFKZ2A";
	
КонецФункции

Функция ЧислоИзСтроки(Знач Строка)
	
	ДопустимаяСтрока = Формат(Строка, "ЧРД=.; ЧГ=");
	ДопустимаяСтрока = СтрЗаменить(ДопустимаяСтрока, " ", "");
	ДопустимаяСтрока = СтрЗаменить(ДопустимаяСтрока, ",", ".");
	
	Число = Число(ДопустимаяСтрока);
	
	Возврат Число;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИМЕНА ВЕБ-СЕРВИСОВ И АДРЕСА ИС ЭСФ

Функция ИмяСервисаInvoiceService() Экспорт
	Возврат "InvoiceService";	
КонецФункции

Функция ИмяСервисаSessionService() Экспорт
	Возврат "SessionService";                                        	
КонецФункции

Функция ИмяСервисаVersionService() Экспорт
	Возврат "VersionService";	
КонецФункции

Функция ИмяСервисаAuthService() Экспорт
	Возврат "AuthService";
КонецФункции

Функция АдресВебПриложенияИСЭСФ() Экспорт
	Возврат "https://esf.gov.kz:8443/esf-web/";
КонецФункции

Функция АдресСервераAPIИСЭСФ() Экспорт
	Возврат "https://esf.gov.kz:8443/esf-web/ws/";	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВЕРСИИ ИС ЭСФ

// См. ЭСФСервер.ВерсияИСЭСФ()
Функция ВерсияИСЭСФ(ТекстОшибки) Экспорт
	
	Версия = Неопределено;
	
	ТекстЗапроса = ПолучитьМакет("ЗапросGetVersion").ПолучитьТекст();
	
	Попытка
		
		ОтветXML = ВыполнитьМетодВебСервисаПолучитьВерсию(ТекстЗапроса, ИмяСервисаVersionService(),, Истина);
		
		ИнформацияОбОшибке = Неопределено;
		Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда	
			ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
			Версия = ОтветXDTO.Body.versionResponse.version;
						
		Иначе
			ТекстОшибки = ИнформацияОбОшибке.ПодробноеПредставление;
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Продолжать = Ложь;
		
	КонецПопытки;
	
	ТекстОшибки = СокрЛП(ТекстОшибки);
	
	Возврат Версия;
	
КонецФункции

// См. ЭСФСервер.ПоддерживаемыеВерсииИСЭСФ()
Функция ПоддерживаемыеВерсииИСЭСФ() Экспорт
	
	МассивВерсий = Новый Массив;
	// Прежнее API - не поддерживаем пока
	МассивВерсий.Добавить("4.0.0");
	МассивВерсий.Добавить("4.0.0-TEST");
	// Новое API
	МассивВерсий.Добавить("5.0.0");
	МассивВерсий.Добавить("5.0.0-TEST");
	МассивВерсий.Добавить("5.0.0-PROD");
	
	Возврат МассивВерсий;
	
КонецФункции

Процедура ОбновитьВерсиюИСЭСФ() Экспорт
	
	Попытка
		ПараметрыЭСФ = ЭСФСервер.ПолучитьПараметрыЭСФ();
		
		//заполним актуальный номер версии ИС ЭСФ
		ПараметрыЭСФ.ВерсияИСЭСФ = "5.0.0";
		
		ЗаписьЖурналаРегистрации("Обновлена версия ИС ЭСФ в параметрах подключения к ИС ЭСФ.", УровеньЖурналаРегистрации.Информация);
		ЭСФСервер.СохранитьПараметрыЭСФ(ПараметрыЭСФ);		
		
	Исключение
		ЗаписьЖурналаРегистрации("При попытке обновления версии ИС ЭСФ возникла ошибка:", УровеньЖурналаРегистрации.Ошибка, , , ИнформацияОбОшибке());
	КонецПопытки;	
	
КонецПроцедуры

Функция АктуальнаяВерсияИСЭСФ() Экспорт
	
	Возврат "5.0.0";
	
КонецФункции	
	
	
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ОШИБОК ИС ЭСФ

Функция ЭтоМодульнаяОшибка(Знач ОтветXML, ИнформацияОбОшибке = Неопределено) Экспорт
	
	ЭтоОшибка = Ложь;
	
	ИнформацияОбОшибке = Новый Структура(
		"faultcode, faultstring, type, description, ЛокализованноеПредставление, ПодробноеПредставление", 
		"", "", "", "", "", "");
		
	Если ОтветXML = "<html><body>No service was found.</body></html>" Тогда
		
		ИнформацияОбОшибке.faultcode = "";	
		ИнформацияОбОшибке.faultstring = "<html><body>No service was found.</body></html>";
		ЭтоОшибка = Истина;
		
	// при сбоях сервера ИС ЭСФ ответ может быть пустым, или содержать информацию о недоступности страницы	
	ИначеЕсли ОтветXML = ""
		ИЛИ НЕ Найти(ОтветXML, "An error occurred.") = 0 Тогда
		
		ИнформацияОбОшибке.faultcode = "";	
		ИнформацияОбОшибке.faultstring = "Сервер ИС ЭСФ не отвечает на запрос";
		ЭтоОшибка = Истина;
		
	Иначе		
		
		ОбъектXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		
		Попытка
 			ИнформацияОбОшибке.faultcode = СокрЛП(ОбъектXDTO.Body.Fault.faultcode);
			ИнформацияОбОшибке.faultstring = СокрЛП(ОбъектXDTO.Body.Fault.faultstring);
			ЭтоОшибка = Истина;
		Исключение
			ЭтоОшибка = Ложь;
		КонецПопытки;
		
		Если ЭтоОшибка Тогда
							
				Попытка
					КоллекцияДеталейОшибки = ОбъектXDTO.Body.Fault.detail.Свойства(); 
					ИнформацияОбОшибке.type = СокрЛП(КоллекцияДеталейОшибки[0].Имя);
					ИнформацияОбОшибке.description = СокрЛП(ОбъектXDTO.Body.Fault.detail[ИнформацияОбОшибке.type].description);
				Исключение
					// Ничего не делать.	
				КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнформацияОбОшибке.ЛокализованноеПредставление = ЛокализованноеПредставлениеМодульнойОшибки(
		ИнформацияОбОшибке.faultcode, 
		ИнформацияОбОшибке.faultstring, 
		ИнформацияОбОшибке.type, 
		ИнформацияОбОшибке.description);                                       
		
	ПодробноеПредставление = "";
		
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.ЛокализованноеПредставление) Тогда	
		ПодробноеПредставление = ПодробноеПредставление + ИнформацияОбОшибке.ЛокализованноеПредставление + Символы.ПС;                                       
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.faultcode) 
		ИЛИ ЗначениеЗаполнено(ИнформацияОбОшибке.faultstring)
		ИЛИ	ЗначениеЗаполнено(ИнформацияОбОшибке.type)
		ИЛИ ЗначениеЗаполнено(ИнформацияОбОшибке.description) Тогда
		ПодробноеПредставление = ПодробноеПредставление + Символы.ПС + "Техническая информация: " + Символы.ПС;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.faultcode) Тогда
		ПодробноеПредставление = ПодробноеПредставление + "faultcode: " + ИнформацияОбОшибке.faultcode + Символы.ПС;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.faultstring) Тогда
		ПодробноеПредставление = ПодробноеПредставление + "faultstring: " + ИнформацияОбОшибке.faultstring + Символы.ПС;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.type) Тогда
		ПодробноеПредставление = ПодробноеПредставление + "type: " + ИнформацияОбОшибке.type + Символы.ПС;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.description) Тогда
		ПодробноеПредставление = ПодробноеПредставление + "description: " + ИнформацияОбОшибке.description + Символы.ПС;	
	КонецЕсли;
	
	ПодробноеПредставление = ?(ПустаяСтрока(ИнформацияОбОшибке.ЛокализованноеПредставление), Символы.ПС, "") + СокрЛП(ПодробноеПредставление);
	
	ИнформацияОбОшибке.ПодробноеПредставление = ПодробноеПредставление;
	
	Возврат ЭтоОшибка;
	
КонецФункции

Функция ЭтоМодульнаяОшибкаСессияЗакрыта(Знач ОтветXML) Экспорт
	
	// в случае сборя сервера ОтветXML = "" передаем управление дальше, чтобы обработать ошибку в процедуре ЭтоМодульнаяОшибка 
	Если НЕ ЗначениеЗаполнено(ОтветXML) Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ОтветXML);	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Попытка
		SessionClosedException = ОбъектXDTO.Body.Fault.detail.SessionClosedException;
		ЭтоОшибкаСессияЗакрыта = Истина;
	Исключение
		ЭтоОшибкаСессияЗакрыта = Ложь;
	КонецПопытки; 
	
	Возврат ЭтоОшибкаСессияЗакрыта;
	
КонецФункции

Функция ЭтоМодульнаяОшибкаЕстьАктивнаяСессиия(Знач ОтветXML) Экспорт
	// в случае сборя сервера ОтветXML = "" передаем управление дальше, чтобы обработать ошибку в процедуре ЭтоМодульнаяОшибка 
	Если НЕ ЗначениеЗаполнено(ОтветXML) Тогда
		Возврат Ложь;	
	КонецЕсли;
	ЭтоОшибкаЕстьАктивнаяСессиия = Ложь;
	Если Найти(ОтветXML, "User already has opened session")>0 Тогда
		ЭтоОшибкаЕстьАктивнаяСессиия = Истина;
	КонецЕсли;	
		
	Возврат ЭтоОшибкаЕстьАктивнаяСессиия;
КонецФункции	

Функция ЛокализованноеПредставлениеМодульнойОшибки(faultcode, faultstring, type, detail)
	
	ТабЗначОшибки = ЭСФСерверПовтИсп.НоваяТаблицаОшибокИСЭСФ();
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТекстИСЭСФ", faultstring);	
	МассивНайденныхСтрок = ТабЗначОшибки.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивНайденныхСтрок.Количество() <> 0 Тогда		
		ЛокализованноеПредставление = МассивНайденныхСтрок[0].ТекстИБ;		
	Иначе
		ЛокализованноеПредставление = "";	
	КонецЕсли;
	
	Возврат ЛокализованноеПредставление;
	
КонецФункции

Функция ПричинаИБ(Знач ПричинаИСЭСФ)
	
	ПричинаИБ = ПричинаИСЭСФ;
	
	ТабЗначОшибки = ЭСФСерверПовтИсп.НоваяТаблицаОшибокИСЭСФ();
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТекстИСЭСФ", ПричинаИСЭСФ);	
	МассивНайденныхСтрок = ТабЗначОшибки.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивНайденныхСтрок.Количество() <> 0 Тогда		
		ПричинаИБ = МассивНайденныхСтрок[0].ТекстИБ;		
	КонецЕсли;
	
	Возврат ПричинаИБ;
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// ПОИСК ЭСФ

// См. ЭСФСервер.НайтиАктуальныеЭСФПоСчетамФактурам()
Функция НайтиАктуальныеЭСФПоСчетамФактурам(Знач МассивСчетовФактур, Знач ИменаРеквизитов = Неопределено) Экспорт
	
	// Создать массив имен реквизитов ЭСФ.
	Если ИменаРеквизитов <> Неопределено Тогда
		МассивИменРеквизитов = ЭСФКлиентСервер.МассивИмен(ИменаРеквизитов);
	Иначе
		МассивИменРеквизитов = Новый Массив;	
	КонецЕсли;
	
	// Сформировать строку запроса для получения реквизитов ЭСФ.
	РеквизитыЭСФ = "";
	Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
		Если ИмяРеквизита = "Состояние" Тогда
			РеквизитыЭСФ = РеквизитыЭСФ + "АктуальныеЭСФ." + ИмяРеквизита + ", ";
		Иначе
			РеквизитыЭСФ = РеквизитыЭСФ + "АктуальныеЭСФ.ЭСФ." + ИмяРеквизита + ", ";
		КонецЕсли;
	КонецЦикла;
	
	// Найти актуальные ЭСФ для счетов-фактур.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктуальныеЭСФ.СчетФактура,
	|   %РеквизитыЭСФ%
	|	АктуальныеЭСФ.ЭСФ
	|ИЗ
	|	РегистрСведений.АктуальныеЭСФ КАК АктуальныеЭСФ
	|ГДЕ
	|	АктуальныеЭСФ.СчетФактура В(&МассивСчетовФактур)";	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РеквизитыЭСФ%", РеквизитыЭСФ);
	Запрос.УстановитьПараметр("МассивСчетовФактур", МассивСчетовФактур);
	Результат = Запрос.Выполнить();
	
	// Создать пустое соответствие актуальных ЭСФ.
	АктуальныеЭСФ = Новый Соответствие;
	
	// Заполнить соответствие пустыми ссылками на ЭСФ.
	Для Каждого СчетФактура Из МассивСчетовФактур Цикл
		АктуальныеЭСФ.Вставить(СчетФактура, Неопределено);
	КонецЦикла;
	
	// Заполнить данные актуальных ЭСФ.	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеЭСФ = Новый Структура;
			Для Каждого Колонка Из Результат.Колонки Цикл
				Если Колонка.Имя <> "СчетФактура" Тогда
					ДанныеЭСФ.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
				КонецЕсли;
			КонецЦикла;
			АктуальныеЭСФ.Вставить(Выборка.СчетФактура, ДанныеЭСФ); 	
		КонецЦикла;
	КонецЕсли;
	
	Возврат АктуальныеЭСФ;
	
КонецФункции

// См. ЭСФСервер.НайтиСуществующиеЭСФПоИдентификаторам()
Функция НайтиСуществующиеЭСФПоИдентификаторам(Знач МассивИдентификаторов, Знач СтруктурнаяЕдиница) Экспорт
		
	// Создать пустую таблицу параметров поиска ЭСФ.	
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ИменаРеквизитов = "Идентификатор, ПометкаУдаления";
	Иначе
		ИменаРеквизитов = "Идентификатор, ПометкаУдаления";
	КонецЕсли;
	ПараметрыПоискаДокументовЭСФ = ЭСФСервер.НовыеПараметрыПоискаСсылок(ИменаРеквизитов, Метаданные.Документы.ЭСФ);
	
	// Заполнить таблицу параметров поиска ЭСФ.
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		ОписаниеЭСФ = ПараметрыПоискаДокументовЭСФ.Добавить();
		ОписаниеЭСФ.Идентификатор = Идентификатор;
		ОписаниеЭСФ.ПометкаУдаления = Ложь;
	КонецЦикла;
	
	ДанныеСтруктурнойЕдиницы = ЭСФСерверПовтИсп.ДанныеСтруктурнойЕдиницы(СтруктурнаяЕдиница);
	ИдентификационныйНомер = ДанныеСтруктурнойЕдиницы.ИдентификационныйНомер;
	НайденныеДокументыЭСФ = НайтиСсылкиПоЗначениямРеквизитов(ПараметрыПоискаДокументовЭСФ, Метаданные.Документы.ЭСФ, ИдентификационныйНомер);
	
	СуществующиеЭСФ = Новый Соответствие;
	
	// Заполнить соответствие пустыми ссылками.
	ПустаяСсылка = Документы.ЭСФ.ПустаяСсылка();
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		СуществующиеЭСФ.Вставить(Идентификатор, ПустаяСсылка);
	КонецЦикла;
	
	// Установить ссылки на документы ЭСФ, если они нашлись.
	Для Каждого СтрокаТаблицы Из НайденныеДокументыЭСФ Цикл
		// Обработаем ситуацию, когда в одной базе выполняется выставление и получение ЭСФ двух организаций друг другу
		// В указанной ситуации, после получения ЭСФ в базе формируется две ЭСФ с одним и тем же номером, датой и идентификатором (различается направление)
		// При работе НайтиСсылкиПоЗначениямРеквизитов будут получены две строки по таким ЭСФ, у одной из которых ссылка будет очищена 
		// Если в СуществующиеЭСФ уже есть ссылка на ЭСФ, то не заменяем из строки с очищенной ЭСФ в функции НайтиСсылкиПоЗначениямРеквизитов 
		Если НЕ ЗначениеЗаполнено(СуществующиеЭСФ.Получить(СтрокаТаблицы.Идентификатор)) Тогда
			СуществующиеЭСФ.Вставить(СтрокаТаблицы.Идентификатор, СтрокаТаблицы.НайденнаяСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуществующиеЭСФ;
	
КонецФункции

// Находит ссылки на документы, справочники и т.д. по переданным значениям реквизитов.
//
// Параметры:
//  ЗначенияРеквизитов - ТаблицаЗначений - Параметры поиска ссылок.
//   Колонки - Имена реквизитов. 
//   Строки - Значения реквизитов.    
//   Для формирования параметра можно использовать: ЭСФСервер.НовыеПараметрыПоискаСсылок().
//  ОбъектМетаданных - ОбъектМетаданных - Объект, ссылки на элементы которого необходимо найти. 
//   Например, Метаданные.Документы.ЭСФ, если необходимо найти ссылки на документы ЭСФ.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Найденные ссылки.
//   Содержит все колонки и строки из таблицы ЗначенияРеквизитов,
//    а также колонку "НайденнаяСсылка", в которой находятся найденные ссылки.
//   Если объекта, удовлетворяющих условиям поиска не найдено, 
//    то в колонке ""НайденнаяСсылка"" содержится пустая ссылка на ОбъектМетаданных.
//   Если найдено несколько объектов, удовлетворяющих условиям поиска,
//    то в таблице будет несколько строк, с одинаковыми значениями реквизитов, но разными ссылками.
//
// Пример:
//  // Найти документы ЭСФ, которые имеют комбинацю номера и даты: 
//  // ("0001" и '2014-01-01') или ("0002" и '2014-02-02').
//  ПараметрыПоиска = ЭСФСервер.НовыеПараметрыПоискаСсылок("Номер, Дата", Метаданные.Документы.ЭСФ);
//  СтрокаПараметровПоиска = ПараметрыПоиска.Добавить();
//  СтрокаПараметровПоиска.Номер = "0001";
//  СтрокаПараметровПоиска.Дата = '2014-01-01';
//  СтрокаПараметровПоиска = ПараметрыПоиска.Добавить();
//  СтрокаПараметровПоиска.Номер = "0002";
//  СтрокаПараметровПоиска.Дата = '2014-02-02';
//  НайденныеСсылки = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().НайтиСсылкиПоЗначениямРеквизитов(ПараметрыПоиска, Метаданные.Документы.ЭСФ);
//
Функция НайтиСсылкиПоЗначениямРеквизитов(Знач ЗначенияРеквизитов, Знач ОбъектМетаданных, Знач ИдентификационныйНомер = Неопределено) Экспорт
	
	ПолноеИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	ИмяВидаОбъекта = Лев(ПолноеИмяОбъекта, Найти(ПолноеИмяОбъекта, ".") - 1); // "Документ", "Справочник" и т.д.
	ИмяОбъекта = ОбъектМетаданных.Имя;
	
	// Сформировать массив имен реквизитов.
	МассивИменРеквизитов = Новый Массив;
	Для Каждого Колонка Из ЗначенияРеквизитов.Колонки Цикл
		МассивИменРеквизитов.Добавить(Колонка.Имя);	
	КонецЦикла;
	
	// Подготовить строку запроса %ИменаРеквизитов%.
	ИменаРеквизитов = "";
	Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
		ИменаРеквизитов = ИменаРеквизитов + "ЗначенияРеквизитов." + ИмяРеквизита + ", ";	
	КонецЦикла;
	Если Прав(ИменаРеквизитов, 2) = ", " Тогда
		ИменаРеквизитов = Сред(ИменаРеквизитов, 1, СтрДлина(ИменаРеквизитов) - 2);	
	КонецЕсли;
	
	// Подготовить строку запроса %УсловияСоединения%.
	УсловияСоединения = "";
	Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
		Условие = "(ЗначенияРеквизитов.%ИмяРеквизита% = %ИмяОбъекта%.%ИмяРеквизита%)";
		
		Если ИмяРеквизита = "Дата" Тогда
			Условие = "(ЗначенияРеквизитов.%ИмяРеквизита% = НАЧАЛОПЕРИОДА(%ИмяОбъекта%.%ИмяРеквизита%, День))";
		Иначе
			Условие = "(ЗначенияРеквизитов.%ИмяРеквизита% = %ИмяОбъекта%.%ИмяРеквизита%)";
		КонецЕсли;	
		
		Условие = СтрЗаменить(Условие, "%ИмяОбъекта%", ИмяОбъекта);
		Условие = СтрЗаменить(Условие, "%ИмяРеквизита%", ИмяРеквизита);
		УсловияСоединения = УсловияСоединения + Условие + " И ";	
	КонецЦикла;	
	Если Прав(УсловияСоединения, 3) = " И " Тогда
		УсловияСоединения = Сред(УсловияСоединения, 1, СтрДлина(УсловияСоединения) - 3);	
	КонецЕсли;
	
	// Сформировать текст запроса.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	%ИменаРеквизитов%
	|ПОМЕСТИТЬ ЗначенияРеквизитов
	|ИЗ
	|	&ЗначенияРеквизитов КАК ЗначенияРеквизитов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	%ИменаРеквизитов%,
	|	ЕСТЬNULL(%ИмяОбъекта%.Ссылка, ЗНАЧЕНИЕ(%ИмяВидаОбъекта%.%ИмяОбъекта%.ПустаяСсылка)) КАК НайденнаяСсылка
	|ИЗ
	|	ЗначенияРеквизитов КАК ЗначенияРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ %ИмяВидаОбъекта%.%ИмяОбъекта% КАК %ИмяОбъекта%
	|		ПО (%УсловияСоединения%)";	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИменаРеквизитов%",   ИменаРеквизитов);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловияСоединения%", УсловияСоединения);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяОбъекта%",        ИмяОбъекта);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяВидаОбъекта%",    ИмяВидаОбъекта);	
	Запрос.УстановитьПараметр("ЗначенияРеквизитов", ЗначенияРеквизитов);
	
	РезультатПоиска = Запрос.Выполнить().Выгрузить();
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Удалить из результатов поиска документы ЭСФ, которые не принадлежат указанной структурной единице.
	// Работает только для документов ЭСФ, для остальных объектов переменная ОтборПоСтруктурнойЕдинице должна быть Неопределено.
	
	Если ИдентификационныйНомер <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабличнаяЧасть.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭСФ.Поставщики КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка В
		|			(ВЫБРАТЬ
		|				ЭСФ.Ссылка
		|			ИЗ
		|				Документ.ЭСФ КАК ЭСФ
		|			ГДЕ
		|				ЭСФ.Ссылка В (&МассивЭСФ)
		|				И ЭСФ.Направление = &Исходящий)
		|	И (ТабличнаяЧасть.ПоставщикИдентификатор = &ИдентификационныйНомер
		|	ИЛИ ТабличнаяЧасть.БИНФилиала = &ИдентификационныйНомер)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабличнаяЧасть.Ссылка
		|ИЗ
		|	Документ.ЭСФ.Получатели КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка В
		|			(ВЫБРАТЬ
		|				ЭСФ.Ссылка
		|			ИЗ
		|				Документ.ЭСФ КАК ЭСФ
		|			ГДЕ
		|				ЭСФ.Ссылка В (&МассивЭСФ)
		|				И ЭСФ.Направление = &Входящий)
		|	И (ТабличнаяЧасть.ПолучательИдентификатор = &ИдентификационныйНомер
		|	ИЛИ ТабличнаяЧасть.БИНФилиала = &ИдентификационныйНомер)";
		
		Запрос.УстановитьПараметр("МассивЭСФ", РезультатПоиска.ВыгрузитьКолонку("НайденнаяСсылка"));
		Запрос.УстановитьПараметр("Исходящий", Перечисления.НаправленияЭСФ.Исходящий);
		Запрос.УстановитьПараметр("Входящий", Перечисления.НаправленияЭСФ.Входящий);
		Запрос.УстановитьПараметр("ИдентификационныйНомер", ИдентификационныйНомер);
		
		ТаблицаЭСФПринадлежащихСтруктурнойЕдинице = Запрос.Выполнить().Выгрузить();
		МассивЭСФПринадлежащихСтруктурнойЕдинице = ТаблицаЭСФПринадлежащихСтруктурнойЕдинице.ВыгрузитьКолонку("Ссылка");
		
		// Удалить из результатов поиска документы ЭСФ, которые не принадлежат указанной структурной единице.			
		Для Каждого СтрокаРезультата Из РезультатПоиска Цикл				
			Если МассивЭСФПринадлежащихСтруктурнойЕдинице.Найти(СтрокаРезультата.НайденнаяСсылка) = Неопределено Тогда						
				
				// Если Истина, значит ЭСФ не принадлежит указанной структурной единице,
				// поэтому ссылку на данный ЭСФ нужно очистить.
				СтрокаРезультата.НайденнаяСсылка = Документы.ЭСФ.ПустаяСсылка();
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат РезультатПоиска;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ССЫЛОЧНЫХ РЕКВИЗИТОВ ЭСФ

// Заполняет ссылочные реквизиты объектов ЭСФ по их текстовым или числовым представлениям.
// Например, заполняет ссылку на товар, ссылку на ставку НДС, ссылку на поставщика и т.д.
//
// Параметры:
//  СоответствиеВалюты - Соответствие - См. ЭСФСерверПовтИсп.НовоеСоответствиеВалюты().
//  СоответствиеАкцизы - Соответствие - См. ЭСФСерверПовтИсп.НовоеСоответствиеАкцизы().
//  ТаблицаНДС - ТаблицаЗначений - См. ЭСФСерверПовтИсп.НоваяТаблицаНДС(). 
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление всех ЭСФ в МассивЭСФ.
//  МассивЭСФ - Массив - Массив ЭСФ, у которых необходимо заполнить ссылочные реквизиты.
//   Каждый элемент массива должен иметь тип ДокументОбъект.ЭСФ.
//
Процедура ЗаполнитьСсылочныеРеквизитыДокументовЭСФ(
	Знач СоответствиеВалюты = Неопределено, 
	Знач СоответствиеАкцизы = Неопределено, 
	Знач ТаблицаНДС = Неопределено, 
	Знач НаправлениеЭСФ, 
	МассивЭСФ) Экспорт
	
	СоответствиеВалюты = ?(СоответствиеВалюты = Неопределено, ЭСФСерверПовтИсп.НовоеСоответствиеВалюты(), СоответствиеВалюты);
	СоответствиеАкцизы = ?(СоответствиеАкцизы = Неопределено, ЭСФСерверПовтИсп.НовоеСоответствиеАкцизы(), СоответствиеАкцизы);
	ТаблицаНДС = ?(ТаблицаНДС = Неопределено, ЭСФСерверПовтИсп.НоваяТаблицаНДС(), ТаблицаНДС);
	
	ЗаполнитьСсылкиНаКонтрагентовИСтруктурныеЕдиницы(НаправлениеЭСФ, МассивЭСФ);
	ЗаполнитьСсылкиНаВалюты(СоответствиеВалюты, МассивЭСФ);
	ЗаполнитьСсылкиНаАкцизы(СоответствиеАкцизы, МассивЭСФ);
	ЗаполнитьСсылкиНаНДС(ТаблицаНДС, МассивЭСФ);
	ЗаполнитьСсылкиНаТовары(НаправлениеЭСФ, МассивЭСФ);	
	ЗаполнитьСсылкиНаЕдиницыИзмерения(НаправлениеЭСФ, МассивЭСФ);
	ЗаполнитьСсылкиНаСвязанныеЭСФ(МассивЭСФ);
	ЗаполнитьСсылкиНаДоговорыПоставки(МассивЭСФ);
	
КонецПроцедуры

Процедура ВосстановитьСсылочныеРеквизитыДокументовЭСФ(МассивСтарыхЭСФ)
	
	Для Каждого Структура Из МассивСтарыхЭСФ Цикл
		ВосстановитьСсылочныеРеквизитыОдногоЭСФ(Структура.ИсходныйОбъектЭСФ, Структура.ОбновленныйОбъектЭСФ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьСсылочныеРеквизитыОдногоЭСФ(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ)
	
	Если ОбновленныйОбъектЭСФ.Статус = Перечисления.СтатусыЭСФ.Ошибочный И ИсходныйОбъектЭСФ.Статус = ОбновленныйОбъектЭСФ.Статус Тогда
		Для Каждого Ошибка Из ИсходныйОбъектЭСФ.Ошибки Цикл
			СтрокаОбновленныйОбъектЭСФ = ОбновленныйОбъектЭСФ.Ошибки.Добавить();
			СтрокаОбновленныйОбъектЭСФ.Поле = Ошибка.Поле;
			СтрокаОбновленныйОбъектЭСФ.Текст = Ошибка.Текст;
		КонецЦикла;
	КонецЕсли; 
	
	ОбновленныйОбъектЭСФ.СвязанныйЭСФ = ИсходныйОбъектЭСФ.СвязанныйЭСФ;
	ОбновленныйОбъектЭСФ.Грузоотправитель = ИсходныйОбъектЭСФ.Грузоотправитель;
	ОбновленныйОбъектЭСФ.Грузополучатель = ИсходныйОбъектЭСФ.Грузополучатель;
	ОбновленныйОбъектЭСФ.ДоговорПоставки = ИсходныйОбъектЭСФ.ДоговорПоставки;
	ОбновленныйОбъектЭСФ.Валюта = ИсходныйОбъектЭСФ.Валюта;
	
	ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ, "Поставщики", "Поставщик", "ПоставщикИдентификатор");
	ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ, "Получатели", "Получатель", "ПолучательИдентификатор");
	ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ, "Товары", "Товар", "ТоварНаименование");
	ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ, "Товары", "ЕдиницаИзмерения", "ЕдиницаИзмеренияКод");
	ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ, "Товары", "СтавкаАкциза", "СуммаАкциза");
	ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ, "Товары", "СтавкаНДС", "СтавкаНДСЧисло");
	ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ, "Товары", "НомерГТД", "НомерСтроки"); //Восстановливать ИсточникПроисхождения по ключевым полям не получиться, т.к. многие ключевые поля не обязательно будут заполнены в ЭСФ 
	                                                                                                                          // + Признак происхождения может быть переопределен в ЭСФ. Поэтому восстанавливаем просто по номеру позиции, т.е. "как бы" всегда и безусловно
	
КонецПроцедуры

Процедура ВосстановитьСсылкиВРеквизитеТабличнойЧасти(
	ИсходныйОбъектЭСФ,
	ОбновленныйОбъектЭСФ,
	ИмяТабличнойЧасти,
	ИмяРеквизитаДляВосстановления,
	ИмяРеквизитаДляПроверки,
	ИспользоватьИсходныеДанныеПриОтличииЗначений = Ложь)
	
	Если ОбновленныйОбъектЭСФ[ИмяТабличнойЧасти].Количество() = ИсходныйОбъектЭСФ[ИмяТабличнойЧасти].Количество() Тогда
		
		ВГраница = ИсходныйОбъектЭСФ[ИмяТабличнойЧасти].Количество() - 1;
		
		Для Индекс = 0 По ВГраница Цикл
			
			ИсходнаяСтрока = ИсходныйОбъектЭСФ[ИмяТабличнойЧасти][Индекс];
			ОбновленнаяСтрока = ОбновленныйОбъектЭСФ[ИмяТабличнойЧасти][Индекс];
			
			//Эксклюзив для единиц измерений
			Если ИмяРеквизитаДляВосстановления = "ЕдиницаИзмерения" Тогда
				Если Не ЗначениеЗаполнено(ИсходнаяСтрока[ИмяРеквизитаДляПроверки]) Тогда
					ИмяРеквизитаДляПроверки = "ЕдиницаИзмеренияНаименование";
				КонецЕсли;
			КонецЕсли;
			
			Если ОбновленнаяСтрока[ИмяРеквизитаДляПроверки] = ИсходнаяСтрока[ИмяРеквизитаДляПроверки] Тогда
				
				ОбновленнаяСтрока[ИмяРеквизитаДляВосстановления] = ИсходнаяСтрока[ИмяРеквизитаДляВосстановления];
				
				//Эксклюзив для единиц измерений. Наим. ЕИ на основании ЭСФ из ИС ЭСФ заполняетя только в тех документах, в которых ранее на сервер было отправлено наим.ЕИ
				//С момента реализации отправки кодов ЕИ, наим.ЕИ нужно заполнять "искусственно". 
				Если ИмяРеквизитаДляВосстановления = "ЕдиницаИзмерения" И Не ЗначениеЗаполнено(ОбновленнаяСтрока["ЕдиницаИзмеренияНаименование"]) Тогда
					ОбновленнаяСтрока["ЕдиницаИзмеренияНаименование"] = ИсходнаяСтрока["ЕдиницаИзмеренияНаименование"];
				КонецЕсли;
				
			Иначе
				// Если использовать исходные данные при отличии проверяемых значений
				Если ИспользоватьИсходныеДанныеПриОтличииЗначений И ОбновленнаяСтрока[ИмяРеквизитаДляПроверки] <> ИсходнаяСтрока[ИмяРеквизитаДляПроверки] Тогда
					ОбновленнаяСтрока[ИмяРеквизитаДляВосстановления] = ИсходнаяСтрока[ИмяРеквизитаДляВосстановления];
					// Сообщение пользователю о том, что данные были восстановлены из исходной строки
					ТекстСообщения = "В обновленных данных документа ""[ЭСФ]"", в таблице ""[ИмяТабличнойЧасти]"", в строке [НомерСтроки], значение поля ""[ИмяРеквизитаДляПроверки]"" отличается от значения поля в исходном документе. Значение поля ""[ИмяРеквизитаДляВосстановления]"" было сохранено в исходном виде. Пожалуйста, проверьте, что поле заполнено верно.";
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЭСФ]", ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(ОбновленныйОбъектЭСФ.Ссылка));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяТабличнойЧасти]", ИмяТабличнойЧасти);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерСтроки]", Формат(Индекс + 1, "ЧГ="));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаДляВосстановления]", ИмяРеквизитаДляВосстановления);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаДляПроверки]", ИмяРеквизитаДляПроверки);
		
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ТекстСообщения;
					Сообщение.УстановитьДанные(ОбновленныйОбъектЭСФ.Ссылка);
					Сообщение.Сообщить();
				Иначе
					ТекстСообщения = НСтр("ru = 'В документе ""[ЭСФ]"", в таблице ""[ИмяТабличнойЧасти]"", в строке [НомерСтроки], очищено поле ""[ИмяРеквизитаДляВосстановления]"", так как значение поля ""[ИмяРеквизитаДляПроверки]"" не соответствовало значению поля в полученном ЭСФ.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЭСФ]", ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(ОбновленныйОбъектЭСФ.Ссылка));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяТабличнойЧасти]", ИмяТабличнойЧасти);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерСтроки]", Формат(Индекс + 1, "ЧГ="));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаДляВосстановления]", ИмяРеквизитаДляВосстановления);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаДляПроверки]", ИмяРеквизитаДляПроверки);
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ТекстСообщения;
					Сообщение.УстановитьДанные(ОбновленныйОбъектЭСФ.Ссылка);
					Сообщение.Сообщить();
				КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'В документе ""[ЭСФ]"" очищена колонка ""[ИмяРеквизитаДляВосстановления]"" в таблице ""[ИмяТабличнойЧасти]"", так как количество строк в этой таблице не соответствовало количеству строк в полученном ЭСФ.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЭСФ]", ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(ОбновленныйОбъектЭСФ.Ссылка));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаДляВосстановления]", ИмяРеквизитаДляВосстановления);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяТабличнойЧасти]", ИмяТабличнойЧасти);
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.УстановитьДанные(ОбновленныйОбъектЭСФ.Ссылка);
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет ссылки на грузоотправителей, грузополучателей, поставщиков, получателей.
//
// Параметры:
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление всех ЭСФ в МассивЭСФ.
//  МассивЭСФ - Массив - Массив ЭСФ, в которых необходимо заполнить ссылки.
//   Каждый элемент массива должен иметь тип ДокументОбъект.ЭСФ.
//
Процедура ЗаполнитьСсылкиНаКонтрагентовИСтруктурныеЕдиницы(Знач НаправлениеЭСФ, МассивЭСФ)
	
	// Очистить ссылки на грузоотправителей, грузополучателей, поставщиков, получателей.
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		
		ЭСФ.Грузоотправитель = Неопределено;
		ЭСФ.Грузополучатель = Неопределено;
		
		Для Каждого Получатель Из ЭСФ.Получатели Цикл
			Получатель.Получатель = Неопределено;
		КонецЦикла;
		
		Для Каждого Поставщик Из ЭСФ.Поставщики Цикл
			Поставщик.Поставщик = Неопределено;
		КонецЦикла;
		
	КонецЦикла;
	
	ИмяТаблицыКонтрагентов = ЭСФВызовСервераПовтИсп.ИмяТаблицыКонтрагентов(НаправлениеЭСФ);	
	ИмяТаблицыСтруктурныхЕдиниц = ЭСФВызовСервераПовтИсп.ИмяТаблицыСтруктурныхЕдиниц(НаправлениеЭСФ);
	ИмяРеквизитаКонтрагента = ЭСФВызовСервераПовтИсп.ИмяРеквизитаКонтрагента(НаправлениеЭСФ);
	ИмяРеквизитаСтруктурнойЕдиницы = ЭСФВызовСервераПовтИсп.ИмяРеквизитаСтруктурнойЕдиницы(НаправлениеЭСФ);
	
	// Заполнить массивы идентификациооных номеров контрагентов и организаций для поиска ссылок.
	ИдентификационныеНомераКонтрагентов = Новый Массив;
	ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;	
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		
		// Добавить в массивы идентификаторы (БИН, ИИН) грузоотправителей и грузополучателей.
		Если НЕ ПустаяСтрока(ЭСФ.ГрузоотправительИдентификатор) Тогда 
			ИдентификационныеНомераКонтрагентов.Добавить(ЭСФ.ГрузоотправительИдентификатор);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ЭСФ.ГрузоотправительИдентификатор);
		КонецЕсли;
		Если НЕ ПустаяСтрока(ЭСФ.ГрузополучательИдентификатор) Тогда 
			ИдентификационныеНомераКонтрагентов.Добавить(ЭСФ.ГрузополучательИдентификатор);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ЭСФ.ГрузополучательИдентификатор);
		КонецЕсли;
		
		// Добавить в массивы идентификаторы (БИН, ИИН) поставщиков и получателей.	
		Для Каждого СтрокаТаблицы Из ЭСФ[ИмяТаблицыКонтрагентов] Цикл
			Если НЕ ПустаяСтрока(СтрокаТаблицы[ИмяРеквизитаКонтрагента+"Идентификатор"]) Тогда
				ИдентификационныеНомераКонтрагентов.Добавить(СтрокаТаблицы[ИмяРеквизитаКонтрагента+"Идентификатор"]);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из ЭСФ[ИмяТаблицыСтруктурныхЕдиниц] Цикл
			Если НЕ ПустаяСтрока(СтрокаТаблицы[ИмяРеквизитаСтруктурнойЕдиницы+"Идентификатор"]) Тогда
				ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(СтрокаТаблицы[ИмяРеквизитаСтруктурнойЕдиницы+"Идентификатор"]);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Найти ссылки на контрагентов и структурные единицы по идентификаторам (БИН, ИИН).
	СоответствияИдентификаторовИСсылок = НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(
		ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
		
	// Заполнить ссылки на контрагентов. 
	СоответствияКонтрагентов = СоответствияИдентификаторовИСсылок.СоответствияКонтрагентов;	
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		
		Для Каждого ЭлементСоответствияКонтрагентов Из СоответствияКонтрагентов Цикл
			
			Идентификатор = ЭлементСоответствияКонтрагентов.Ключ;
			Контрагент = ЭлементСоответствияКонтрагентов.Значение;
			
			Если ЭСФ.ГрузоотправительИдентификатор = Идентификатор Тогда
				ЭСФ.Грузоотправитель = Контрагент;
			КонецЕсли;
			
			Если ЭСФ.ГрузополучательИдентификатор = Идентификатор Тогда
				ЭСФ.Грузополучатель = Контрагент;	
			КонецЕсли;			
			
			// Заполнить ссылки на контрагентов в таблице поставщиков или получателей.
			ПараметрыОтбора = Новый Структура(ИмяРеквизитаКонтрагента + "Идентификатор", Идентификатор);
			МассивНайденныхСтрок = ЭСФ[ИмяТаблицыКонтрагентов].НайтиСтроки(ПараметрыОтбора);
			Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
				НайденнаяСтрока[ИмяРеквизитаКонтрагента] = Контрагент;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

	// Заполнить ссылки на структурные единицы.
	СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		
		Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
			
			Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
			СтруктурнаяЕдиница = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
			
			Если ЭСФ.ГрузоотправительИдентификатор = Идентификатор Тогда
				ЭСФ.Грузоотправитель = СтруктурнаяЕдиница;
			КонецЕсли;
			
			Если ЭСФ.ГрузополучательИдентификатор = Идентификатор Тогда
				ЭСФ.Грузополучатель = СтруктурнаяЕдиница;	
			КонецЕсли;			
			
			// Заполнить ссылки на организации в таблице поставщиков или получателей.
			ПараметрыОтбора = Новый Структура(ИмяРеквизитаСтруктурнойЕдиницы+"Идентификатор", Идентификатор);
			МассивНайденныхСтрок = ЭСФ[ИмяТаблицыСтруктурныхЕдиниц].НайтиСтроки(ПараметрыОтбора);
			Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
				НайденнаяСтрока[ИмяРеквизитаСтруктурнойЕдиницы] = СтруктурнаяЕдиница;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаВалюты(Знач СоответствиеВалюты, МассивЭСФ)
	
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		ЭСФ.Валюта = СоответствиеВалюты[ЭСФ.ВалютаКод];
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаАкцизы(Знач СоответствиеАкцизы, МассивЭСФ)
	
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		Для Каждого СтрокаТовары Из ЭСФ.Товары Цикл
			СтрокаТовары.СтавкаАкциза = СоответствиеАкцизы[СтрокаТовары.СтавкаАкцизаЧисло];
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаНДС(Знач ТаблицаНДС, МассивЭСФ)
	
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		УстановленоМестоРеализацииНеРК = ЭСФ.МестоРеализацииНеРК;
		Для Каждого СтрокаТовары Из ЭСФ.Товары Цикл
			ПараметрыОтбора = Новый Структура("СтавкаНДСЧисло, БезНДС, МестоРеализацииНеРК", СтрокаТовары.СтавкаНДСЧисло, СтрокаТовары.БезНДС, УстановленоМестоРеализацииНеРК);
			МассивНайденныхСтрок = ТаблицаНДС.НайтиСтроки(ПараметрыОтбора);
			Если МассивНайденныхСтрок.Количество() <> 0 Тогда
				СтрокаТовары.СтавкаНДС = МассивНайденныхСтрок[0].СтавкаНДС;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет ссылки на связанные ЭСФ по номеру и дате связанного ЭСФ,
// а также по организации и подразделению, т.к. у связанных ЭСФ
// должны быть одинаковые организация и подразделение.
//
// Параметры:
//  МассивЭСФ - Массив - Массив ЭСФ в которых необходимо заполнить ссылку на связанный ЭСФ.
//   Каждый элемент массива должен иметь тип "ДокументОбъект.ЭСФ".
//
Процедура ЗаполнитьСсылкиНаСвязанныеЭСФ(МассивЭСФ)
		
	// Создать пустую таблицу параметров поиска ЭСФ.
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ИменаРеквизитов = "Номер, Дата, Направление, ПометкаУдаления, Организация, СтруктурноеПодразделение";
	Иначе
		ИменаРеквизитов = "Номер, Дата, Направление, ПометкаУдаления, Организация";
	КонецЕсли;
	ПараметрыПоискаДокументовЭСФ = ЭСФСервер.НовыеПараметрыПоискаСсылок(ИменаРеквизитов, Метаданные.Документы.ЭСФ);
	
	// Заполнить таблицу параметров поиска ЭСФ.
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		Если ЗначениеЗаполнено(ЭСФ.СвязанныйЭСФНомер) И ЗначениеЗаполнено(ЭСФ.СвязанныйЭСФДата) Тогда
			ОписаниеЭСФ = ПараметрыПоискаДокументовЭСФ.Добавить();
			ОписаниеЭСФ.Номер = ЭСФ.СвязанныйЭСФНомер;
			ОписаниеЭСФ.Дата = НачалоДня(ЭСФ.СвязанныйЭСФДата);
			ОписаниеЭСФ.Направление = ЭСФ.Направление;

			ОписаниеЭСФ.ПометкаУдаления = Ложь;
			
			ОписаниеЭСФ.Организация = ЭСФ.Организация;
			Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
				ОписаниеЭСФ.СтруктурноеПодразделение = ЭСФ.СтруктурноеПодразделение;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЦикла;	
	
	Если ПараметрыПоискаДокументовЭСФ.Количество() <> 0 Тогда
		
		// Параметр ИдентификационныйНомер не заполняется, т.к. поиск выполняется 
		// по совпадению значений реквизитов Организация и СтруктурноеПодразделение.		
		НайденныеДокументыЭСФ = НайтиСсылкиПоЗначениямРеквизитов(ПараметрыПоискаДокументовЭСФ, Метаданные.Документы.ЭСФ);
		
		// Заполнить ссылки на связанные ЭСФ.
		Для Каждого ЭСФ Из МассивЭСФ Цикл
			
			Если ЗначениеЗаполнено(ЭСФ.СвязанныйЭСФНомер) И ЗначениеЗаполнено(ЭСФ.СвязанныйЭСФДата) Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номер", ЭСФ.СвязанныйЭСФНомер);
				ПараметрыОтбора.Вставить("Дата", НачалоДня(ЭСФ.СвязанныйЭСФДата));
				ПараметрыОтбора.Вставить("Направление", ЭСФ.Направление);				

				ПараметрыОтбора.Вставить("ПометкаУдаления", Ложь);
				
				МассивНайденныхСтрок = НайденныеДокументыЭСФ.НайтиСтроки(ПараметрыОтбора);
				
				Если МассивНайденныхСтрок.Количество() <> 0 Тогда
					ЭСФ.СвязанныйЭСФ = МассивНайденныхСтрок[0].НайденнаяСсылка;					
				Иначе
					Комментарий = НСтр(
						"ru = 'Номер ЭСФ: %Номер%
               			|Дата ЭСФ: %Дата%'");
					Комментарий = СтрЗаменить(Комментарий, "%Номер%", ЭСФ.СвязанныйЭСФНомер);
					Комментарий = СтрЗаменить(Комментарий, "%Дата%", ЭСФ.СвязанныйЭСФДата);
					ЗаписьЖурналаРегистрации("ЭСФ. Не найден ЭСФ", УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
				КонецЕсли;
				
			КонецЕсли;	

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылки на контрагентов и организации для указанных идентификационных номеров.
//
// Параметры:
//  ИдентификационныеНомераКонтрагентов - Массив - Идентификационные номера (БИН, ИИН) контрагентов, 
//   по которым необходимо найти ссылки на контрагентов.
//  ИдентификационныеНомераСтруктурныхЕдиниц - Массив - Идентификационные номера (БИН, ИИН) организаций, 
//   по которым необходимо найти ссылки на организации.
//
// Возвращаемое значение:
//  Структура - Найденные соответствия идентификационных номеров и ссылок.
//   |- СоответствияКонтрагентов - Соответствие - Соответствие идентификаторов и ссылок контрагентов.
//   |- СоответствияСтруктурныхЕдиниц - Соответствие - Соответствие идентификаторов и ссылок контрагентов.
//
Функция НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(
	Знач ИдентификационныеНомераКонтрагентов, Знач ИдентификационныеНомераСтруктурныхЕдиниц) Экспорт
		
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.%КонтрагентИНН КАК Идентификатор,
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.%КонтрагентИНН В(&ИдентификационныеНомераКонтрагентов)
	|	И НЕ Контрагенты.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.%ОрганизацияИНН КАК Идентификатор,
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.%ОрганизацияИНН В(&ИдентификационныеНомераСтруктурныхЕдиниц)
	|	И НЕ Организации.ПометкаУдаления";
	
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		
		ТекстЗапроса = ТекстЗапроса +
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.ИдентификационныйНомер,
		|	ПодразделенияОрганизаций.Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.ИдентификационныйНомер В(&ИдентификационныеНомераСтруктурныхЕдиниц)
		|	И НЕ ПодразделенияОрганизаций.ПометкаУдаления
		|	И ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением
		|	И НЕ ПодразделенияОрганизаций.УказыватьРеквизитыГоловнойОрганизации";
		
	КонецЕсли;

	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%КонтрагентИНН", "");
	СоответсвиеИменРеквизитов.Вставить("%ОрганизацияИНН", "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеИменРеквизитов);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ИдентификационныеНомераКонтрагентов", ИдентификационныеНомераКонтрагентов);	
	Запрос.УстановитьПараметр("ИдентификационныеНомераСтруктурныхЕдиниц", ИдентификационныеНомераСтруктурныхЕдиниц);	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
	Результат = Новый Структура;
	Результат.Вставить("СоответствияКонтрагентов", Новый Соответствие);
	Результат.Вставить("СоответствияСтруктурныхЕдиниц", Новый Соответствие);
	
	ВыборкаКонтрагенты = РезультатыЗапроса[0].Выбрать();
	Пока ВыборкаКонтрагенты.Следующий() Цикл
		Результат.СоответствияКонтрагентов.Вставить(ВыборкаКонтрагенты.Идентификатор, ВыборкаКонтрагенты.Ссылка);
	КонецЦикла;
	
	ВыборкаОрганизации = РезультатыЗапроса[1].Выбрать();
	Пока ВыборкаОрганизации.Следующий() Цикл
		Результат.СоответствияСтруктурныхЕдиниц.Вставить(ВыборкаОрганизации.Идентификатор, ВыборкаОрганизации.Ссылка);	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиБанкПоБИК(БИК)
	
	СсылкаБанк = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Банки.Ссылка
	|ИЗ
	|	Справочник.Банки КАК Банки
	|ГДЕ
	|	Банки.БИК = &БИК
	|	И Банки.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("БИК", БИК);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СсылкаБанк = Выборка.Ссылка;	
	Иначе
		СсылкаБанк = Неопределено;	
	КонецЕсли;
	
	Возврат СсылкаБанк;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С XML И XDTO

Функция НоваяФабрикаXDTOИзXSD(Знач ИмяМакета) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xsd");
	ЭтотОбъект.ПолучитьМакет(ИмяМакета).Записать(ИмяВременногоФайла, "UTF-8");
	НоваяФабрикаXDTO = СоздатьФабрикуXDTO(ИмяВременногоФайла);
	
	ЭСФКлиентСервер.УдалитьВременныеФайлы(ИмяВременногоФайла);
	
	Возврат НоваяФабрикаXDTO;
	
КонецФункции

Функция НоваяФабрикаXDTOИзWSDL(Знач ИмяМакета) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("wsdl");
	ЭтотОбъект.ПолучитьМакет(ИмяМакета).Записать(ИмяВременногоФайла, "UTF-8");
	WSОпределения = Новый WSОпределения(ИмяВременногоФайла);
	НоваяФабрикаXDTO = WSОпределения.ФабрикаXDTO;
	
	ЭСФКлиентСервер.УдалитьВременныеФайлы(ИмяВременногоФайла);
	
	Возврат НоваяФабрикаXDTO;
	
КонецФункции

Функция ФабрикаЭСФ_XML_API_ЭЦП_Версия1()
	
	Если КэшированнаяФабрикаЭСФ_XML_API_ЭЦП_Версия1 = Неопределено Тогда	
		
		ТекстовыйМакет = ПолучитьМакет("СхемаЭСФ_XML_API_ЭЦП_Версия1");	
		ОбъектXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстовыйМакет.ПолучитьТекст(), ФабрикаXDTO);
		СписокXSD = ЭСФСервер.СписокXDTOИзОбъектXDTO(ОбъектXDTO.Body.queryInvoiceXsdResponse.xsdList.xsd);
		КэшированнаяФабрикаЭСФ_XML_API_ЭЦП_Версия1 = ФабрикаXDTOИзСпискаXSD(СписокXSD);
		
	КонецЕсли;
	
	Возврат КэшированнаяФабрикаЭСФ_XML_API_ЭЦП_Версия1;
	
КонецФункции

Функция ФабрикаЭСФ_XML_API_ЭЦП_Версия2()
	
	Если КэшированнаяФабрикаЭСФ_XML_API_ЭЦП_Версия2 = Неопределено Тогда	
		
		ТекстовыйМакет = ПолучитьМакет("СхемаЭСФ_XML_API_ЭЦП_Версия2");	
		ОбъектXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстовыйМакет.ПолучитьТекст(), ФабрикаXDTO);
		СписокXSD = ЭСФСервер.СписокXDTOИзОбъектXDTO(ОбъектXDTO.Body.queryInvoiceXsdResponse.xsdList.xsd);
		КэшированнаяФабрикаЭСФ_XML_API_ЭЦП_Версия2 = ФабрикаXDTOИзСпискаXSD(СписокXSD);
		
	КонецЕсли;
	
	Возврат КэшированнаяФабрикаЭСФ_XML_API_ЭЦП_Версия2;
	
КонецФункции


Функция ФабрикаInvoiceInfo_Версия2()
	
	Если КэшированнаяФабрикаInvoiceInfo_Версия2 = Неопределено Тогда	
		
		ТекстовыйМакет = ПолучитьМакет("СхемаInvoiceInfo_Версия2");	
		ОбъектXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстовыйМакет.ПолучитьТекст(), ФабрикаXDTO);
		СписокXSD = ЭСФСервер.СписокXDTOИзОбъектXDTO(ОбъектXDTO.Body.queryInvoiceInfoXsdResponse.xsdList.xsd);
		КэшированнаяФабрикаInvoiceInfo_Версия2 = ФабрикаXDTOИзСпискаXSD(СписокXSD);
		
	КонецЕсли;
	
	Возврат КэшированнаяФабрикаInvoiceInfo_Версия2;
	
КонецФункции

Функция ФабрикаXDTOИзСпискаXSD(СписокXSD)
	
	МассивИменXSDФайлов = Новый Массив;
	
	Для Каждого ТекстXSD Из СписокXSD Цикл
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xsd");
		МассивИменXSDФайлов.Добавить(ИмяВременногоФайла);
		
		ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла);
		ЗаписьТекста.Записать(ТекстXSD);
		ЗаписьТекста.Закрыть();
		
	КонецЦикла;
	
	Фабрика = СоздатьФабрикуXDTO(МассивИменXSDФайлов); 		
	
	Для Каждого ИмяВременногоФайла Из МассивИменXSDФайлов Цикл
		ЭСФКлиентСервер.УдалитьВременныеФайлы(ИмяВременногоФайла);
	КонецЦикла;
	
	Возврат Фабрика;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРИСОЕДИНЕННЫМИ ФАЙЛАМИ

Процедура СоздатьОбновитьПрисоединенныеXMLФайлыЭСФ(Знач МассивЭСФ, Знач InvoiceInfoList)
	
	Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
		
		InvoiceInfoXDTO = НайтиInvoiceInfoПоId(InvoiceInfoList, ОбъектЭСФ.Идентификатор);
		
		ДвоичныеДанныеФайлаInvoiceXML = НовыеДвоичныеДанныеФайлаInvoiceInfoXML(InvoiceInfoXDTO);
		АдресФайлаInvoiceXML = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаInvoiceXML);
		
		Если ОбъектЭСФ.ФайлЭСФ.Пустая() Тогда
			
			// Создать новый присоединенный XML файл ЭСФ.
			НаименованиеДокумента = НСтр("ru = 'Электронный счет-фактура №%Номер% от %Дата%'");
			НаименованиеДокумента = СтрЗаменить(НаименованиеДокумента, "%Номер%", ОбъектЭСФ.Номер);
			НаименованиеДокумента = СтрЗаменить(НаименованиеДокумента, "%Дата%", Формат(ОбъектЭСФ.Дата, "ДФ=dd.MM.yyyy; ДП="));
			ИмяБезРасширения = НаименованиеДокумента;
			
			ОбъектЭСФ.ФайлЭСФ = ЭСФСерверПереопределяемый.ДобавитьФайл(
				ОбъектЭСФ.Ссылка, ИмяБезРасширения, "xml", , , АдресФайлаInvoiceXML);
				
		Иначе
			
			// Обновить существующий присоединенный XML файл ЭСФ.
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаInvoiceXML);
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
			ЭСФСерверПереопределяемый.ОбновитьПрисоединенныйФайл(ОбъектЭСФ.ФайлЭСФ, ИнформацияОФайле);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Функция НовыеДвоичныеДанныеФайлаInvoiceInfoXML(InvoiceInfoXDTO)
	
	InvoiceInfoXML = ЭСФСервер.СтрокаXMLИзОбъектаXDTO(InvoiceInfoXDTO, "invoiceInfo", ФабрикаXDTO);
	
	// Доработать InvoiceInfoXML, чтобы он соответствовал <invoiceInfo> из ответа API ИС ЭСФ.
	InvoiceInfoXML = СтрЗаменить(InvoiceInfoXML, " xmlns=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">", ">");
	InvoiceInfoXML = СтрЗаменить(InvoiceInfoXML, " xmlns="""" xmlns:xs=""http://www.w3.org/2001/XMLSchema"">", ">");
	InvoiceInfoXML = СтрЗаменить(InvoiceInfoXML, " xmlns="""">", ">");
	
	Если Найти(InvoiceInfoXML, "<invoice xmlns=""namespace.v1"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"">") <> 0 Тогда
		InvoiceInfoXML = СтрЗаменить(InvoiceInfoXML, "<invoice xmlns=""namespace.v1"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"">", "<v1:invoice>");
		InvoiceInfoXML = СтрЗаменить(InvoiceInfoXML, "</invoice>", "</v1:invoice>");
	КонецЕсли;
	
	// Сформировать двоичные данные для доработанного InvoiceInfoXML.
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, "UTF-8");
	ЗаписьТекста.Записать(InvoiceInfoXML); 
	ЗаписьТекста.Закрыть();
	
	ДвоичныеДанныеФайлаInvoiceInfoXML = Новый ДвоичныеДанные(ИмяФайла);	
	ЭСФКлиентСервер.УдалитьВременныеФайлы(ИмяФайла);
	
	Возврат ДвоичныеДанныеФайлаInvoiceInfoXML;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМЫ ИМПРОТ ЭСФ

// Добавляет в таблицу ЗагружаемыеЭСФ новые строки, содержащие данные загружаемых ЭСФ.
//
// Параметры:
//  МассивАдресовЗагружаемыхФайлов - Массив - Входящий параметр -
//   Массив XML файлов ЭСФ, на основе которых необходимо заполнить ЗагружаемыеЭСФ.
//  СтруктурнаяЕдиница - СправочникСсылка.Организации, СправочникСсылка.ПодразделенияОрганизаций -
//   Входящий параметр - Структурная единица, для которой необхоимо заполнить ЗагружаемыеЭСФ.
//  ЗагружаемыеЭСФ - ТаблицаЗначений - Изменяемый параметр -
//   Таблица загружаемых ЭСФ, в которую будут добавлены новые строки, содержащие данные загружаемых ЭСФ.
//
// Возвращаемое значение:
//  См. входящий параметр ЗагружаемыеЭСФ.
//
Процедура ЗаполнитьТаблицуЗагружаемыеЭСФ(Знач МассивАдресовЗагружаемыхФайлов, Знач СтруктурнаяЕдиница, ЗагружаемыеЭСФ) Экспорт
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Получить XDTO из каждого файла.
	// Если для какого-нибудь файла не удалось получить XDTO, то сообщить об этом.	
	
	ТабЗначXDTO = Новый ТаблицаЗначений;
	ТабЗначXDTO.Колонки.Добавить("ИмяФайла");
	ТабЗначXDTO.Колонки.Добавить("ОбъектXDTO");
	
	Для Каждого Файл Из МассивАдресовЗагружаемыхФайлов Цикл
		
		// Создать временный файл.
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Файл.Адрес);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("tmp");
		ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
		
		// Прочитать текст из временного файла.
		ЧтениеТекста = Новый ЧтениеТекста;
		ЧтениеТекста.Открыть(ИмяВременногоФайла, "UTF-8");
		СтрокаXML = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		
		// Удалить временный файл.
		ЭСФКлиентСервер.УдалитьВременныеФайлы(ИмяВременногоФайла);
		
		Попытка
			
			// Возникнет ошибка, если СтрокаXML содержит не валидный XML.
			ОбъектXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(СтрокаXML, ФабрикаXDTO);
			
			СтрокаТабЗначXDTO = ТабЗначXDTO.Добавить();
			СтрокаТабЗначXDTO.ИмяФайла = Файл.Имя;
			СтрокаТабЗначXDTO.ОбъектXDTO = ОбъектXDTO;
			
		Исключение
			
			ТекстСообщения = НСтр(
				"ru = 'Не удалось загрузить электронные счета-фактуры из файла:
				|%1
				|так как данный файл не является валидным XML-файлом.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Файл.Имя); 
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
			
		КонецПопытки;
		
	КонецЦикла;
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////		
	// Получить коллекции строк InvoiceInfo из каждого XML.
	// Если из какого-нибудь XML не удалось получить InvoiceInfo, то сообщить об этом.
	
	ТабЗначInvoiceInfo = Новый ТаблицаЗначений;
	ТабЗначInvoiceInfo.Колонки.Добавить("ИмяФайла");
	ТабЗначInvoiceInfo.Колонки.Добавить("InvoiceInfo");
	
	Для Каждого СтрокаТабЗначXDTO Из ТабЗначXDTO Цикл
		
		ОбъектXDTO = СтрокаТабЗначXDTO.ОбъектXDTO;
		
		Попытка
			
			// Возникнет ошибка, если ОбъектXDTO не содержит узла invoiceInfo.
			InvoiceInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(ОбъектXDTO.invoiceSet.invoiceInfo);
			
		Исключение
			
			InvoiceInfoList = Неопределено;
			
			ТекстСообщения = НСтр(
				"ru = 'Не удалось загрузить электронные счета-фактуры из файла:
				|%1
				|так как данный XML-файл имеет некорректную структуру.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаТабЗначXDTO.ИмяФайла); 
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
			
		КонецПопытки;
		
		Если InvoiceInfoList <> Неопределено Тогда 
			
			Для Каждого InvoiceInfo Из InvoiceInfoList Цикл
				
				СтрокаТабЗначInvoiceInfo = ТабЗначInvoiceInfo.Добавить();
				СтрокаТабЗначInvoiceInfo.ИмяФайла = СтрокаТабЗначXDTO.ИмяФайла;
				СтрокаТабЗначInvoiceInfo.InvoiceInfo = InvoiceInfo;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Перебрать InvoiceInfo, если у InvoiceInfo нет поля invoiceId,
	// или оно пустое, то удалить этот InvoiceInfo и сообщить об этом.
	
	// Создать временную колонку для удаления InvoiceInfo, у которых нет поля invoiceId, или оно пустое.
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ТабЗначInvoiceInfo.Колонки.Добавить("ИдентификаторЗаполнен", ОписаниеТипаБулево);
	
	Для Каждого СтрокаТабЗначInvoiceInfo Из ТабЗначInvoiceInfo Цикл
		
		InvoiceInfo = СтрокаТабЗначInvoiceInfo.InvoiceInfo;
		InvoiceId = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoiceId", Неопределено);
		
		Если ТипЗнч(InvoiceId) = Тип("Строка") И (НЕ ПустаяСтрока(InvoiceId)) Тогда
			
			СтрокаТабЗначInvoiceInfo.ИдентификаторЗаполнен = Истина;
			
		Иначе
			
			СтрокаТабЗначInvoiceInfo.ИдентификаторЗаполнен = Ложь;
			
			ТекстСообщения = НСтр(
				"ru = 'Не удалось загрузить электронный счет-фактуру: 
				|[НомерДатаРегНомер],
				|Из файла: [ИмяФайла]
				|так как у данного документа не заполнено служебное поле <invoiceId>.'");
				
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерДатаРегНомер]", ПредставлениеInvoiceInfo(InvoiceInfo));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайла]", СтрокаТабЗначInvoiceInfo.ИмяФайла);			
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
			
		КонецЕсли;
					
	КонецЦикла;
	
	// Удалить InvoiceInfo, у которых нет поля invoiceId, или оно пустое.
	Пока Истина Цикл
		
		СтрокаТабЗначInvoiceInfo = ТабЗначInvoiceInfo.Найти(Ложь, "ИдентификаторЗаполнен");
		
		Если СтрокаТабЗначInvoiceInfo <> Неопределено Тогда
			ТабЗначInvoiceInfo.Удалить(СтрокаТабЗначInvoiceInfo);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Колонка "ИдентификаторЗаполнен" больше не нужна, т.к. у всех оставшихся InvoiceInfo заполнено поле invoiceId.
	ТабЗначInvoiceInfo.Колонки.Удалить("ИдентификаторЗаполнен");
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////	
	// Создать ЭСФ для каждого InvoiceInfo, но не записывать созданные ЭСФ.	
	// Если для какого-нибудь InvoiceInfo не удалось создать ЭСФ, то сообщить об этом.
	
	// Создать временную колонку для удаления InvoiceInfo, для которых не удалось создать ЭСФ.
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ТабЗначInvoiceInfo.Колонки.Добавить("УдалосьСоздатьЭСФ", ОписаниеТипаБулево);
		
	// Создать ЭСФ для каждого InvoiceInfo, но не записывать созданные ЭСФ.
	// Если удалось создать ЭСФ, то записать в колонку УдалосьСоздатьЭСФ значение Истина,
	// в противном случае записать в колонку Ложь и сообщить пользователю.
	Для Каждого СтрокаТабЗначInvoiceInfo Из ТабЗначInvoiceInfo Цикл
		
		InvoiceInfo = СтрокаТабЗначInvoiceInfo.InvoiceInfo;
		Направление = Перечисления.НаправленияЭСФ.Входящий; // Для данной проверки направление не имеет значения.
		ОбъектЭСФ = Документы.ЭСФ.СоздатьДокумент();
		
		Попытка
			
			ЗаполнитьЭСФ(InvoiceInfo, СтруктурнаяЕдиница, Направление, ОбъектЭСФ);
			
			СтрокаТабЗначInvoiceInfo.УдалосьСоздатьЭСФ = Истина;
			
		Исключение
			
			СтрокаТабЗначInvoiceInfo.УдалосьСоздатьЭСФ = Ложь;
			
			ТекстСообщения = НСтр(
				"ru = 'Не удалось загрузить электронный счет-фактуру: 
				|[НомерДатаРегНомер],
				|Из файла: [ИмяФайла]
				|так как при загрузке возникла ошибка:
				|[ТекстОшибки]'");
				
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерДатаРегНомер]", ПредставлениеInvoiceInfo(InvoiceInfo));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайла]", СтрокаТабЗначInvoiceInfo.ИмяФайла);
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ТекстОшибки]", ТекстОшибки);
			
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
						
		КонецПопытки;
		
	КонецЦикла;
	
	// Удалить InvoiceInfo, для которых не удалось создать ЭСФ.
	Пока Истина Цикл
		
		СтрокаТабЗначInvoiceInfo = ТабЗначInvoiceInfo.Найти(Ложь, "УдалосьСоздатьЭСФ");
		
		Если СтрокаТабЗначInvoiceInfo <> Неопределено Тогда
			ТабЗначInvoiceInfo.Удалить(СтрокаТабЗначInvoiceInfo);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Колонка "УдалосьСоздатьЭСФ" больше не нужна, т.к. для всех оставшихся InvoiceInfo удалось создать ЭСФ.
	ТабЗначInvoiceInfo.Колонки.Удалить("УдалосьСоздатьЭСФ");
	
	
	
		
	//////////////////////////////////////////////////////////////////////////////
	// Перебрать оставшиеся InvoiceInfo, если в таблице ЗагружаемыеЭСФ
	// уже есть ЭСФ с таким идентификатором, то сообщить об этом.
	
	// Создать временную колонку для удаления InvoiceInfo, 
	// идентификатор которых уже есть в таблице ЗагружаемыеЭСФ.
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ТабЗначInvoiceInfo.Колонки.Добавить("ИдентификаторЕстьВТаблицеЗагружаемыеЭСФ", ОписаниеТипаБулево);
	
	Для Каждого СтрокаТабЗначInvoiceInfo Из ТабЗначInvoiceInfo Цикл
		
		Идентификатор = СтрокаТабЗначInvoiceInfo.InvoiceInfo.invoiceId;	
		
		Если ЗагружаемыеЭСФ.Найти(Идентификатор, "Идентификатор") = Неопределено Тогда
			
			СтрокаТабЗначInvoiceInfo.ИдентификаторЕстьВТаблицеЗагружаемыеЭСФ = Ложь;	
			
		Иначе
			
			СтрокаТабЗначInvoiceInfo.ИдентификаторЕстьВТаблицеЗагружаемыеЭСФ = Истина;
						
			ТекстСообщения = НСтр(
				"ru = 'Не удалось загрузить электронный счет-фактуру: 
				|[НомерДатаРегНомер],
				|Из файла: [ИмяФайла]
				|так как в таблице загружаемых документов уже есть такой электронный счет-фактура.'");
				
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерДатаРегНомер]", ПредставлениеInvoiceInfo(InvoiceInfo));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайла]", СтрокаТабЗначInvoiceInfo.ИмяФайла);
			
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалить InvoiceInfo, идентификатор которых уже есть в таблице ЗагружаемыеЭСФ.
	Пока Истина Цикл
		
		СтрокаТабЗначInvoiceInfo = ТабЗначInvoiceInfo.Найти(Истина, "ИдентификаторЕстьВТаблицеЗагружаемыеЭСФ");
		
		Если СтрокаТабЗначInvoiceInfo <> Неопределено Тогда
			ТабЗначInvoiceInfo.Удалить(СтрокаТабЗначInvoiceInfo);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Колонка "УдалосьСоздатьЭСФ" больше не нужна, т.к. для всех оставшихся InvoiceInfo удалось создать ЭСФ.
	ТабЗначInvoiceInfo.Колонки.Удалить("ИдентификаторЕстьВТаблицеЗагружаемыеЭСФ");
	
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Перебрать оставшиеся InvoiceInfo, если ИИН структурной единицы нет
	// в реквизитах получателя или отправителя, то сообщить об этом.
	ТабЗначInvoiceInfo.Колонки.Добавить("Направление");
	
	ДанныеСтруктурнойЕдиницы = ЭСФСерверПовтИсп.ДанныеСтруктурнойЕдиницы(СтруктурнаяЕдиница);
	ИдентификационныйНомер = ДанныеСтруктурнойЕдиницы.ИдентификационныйНомер;
	
	Для Каждого СтрокаТабЗначInvoiceInfo Из ТабЗначInvoiceInfo Цикл
		
		Направление = Неопределено;
		
		//+
		Invoice = ЭСФСервер.ПолучитьСвойство(СтрокаТабЗначInvoiceInfo.InvoiceInfo, "invoice", "");
		Если ПустаяСтрока(Invoice) Тогда
			ТекстСчетаФактуры = ЭСФСервер.ПолучитьСвойство(СтрокаТабЗначInvoiceInfo.InvoiceInfo, "invoiceBody", "");
			Invoice = ?(ПустаяСтрока(ТекстСчетаФактуры), "", ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстСчетаФактуры, ФабрикаXDTO));
		КонецЕсли;
		//-
		
		// Поиск направления по идентификаторам покупателей.
		//customerList = СтрокаТабЗначInvoiceInfo.InvoiceInfo.invoice.customers.customer;
		customerList = invoice.customers.customer;
		customerList = ЭСФСервер.СписокXDTOИзОбъектXDTO(customerList);
		Для Каждого customer Из customerList Цикл
			
			Если ЗначениеЗаполнено(Направление) Тогда
				Прервать;
			КонецЕсли;
			
			tin = ЭСФСервер.ПолучитьСвойство(customer, "tin", Неопределено);
			
			Если ТипЗнч(tin) = Тип("Строка") И (НЕ ПустаяСтрока(tin)) Тогда
				
				Если tin = ИдентификационныйНомер Тогда
					Направление = Перечисления.НаправленияЭСФ.Входящий;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Поиск направления по идентификаторам продавцов.
		//sellerList = СтрокаТабЗначInvoiceInfo.InvoiceInfo.invoice.sellers.seller;
		sellerList = invoice.sellers.seller;
		sellerList = ЭСФСервер.СписокXDTOИзОбъектXDTO(sellerList);
		Для Каждого seller Из sellerList Цикл
			
			Если ЗначениеЗаполнено(Направление) Тогда
				Прервать;
			КонецЕсли;
			
			tin = ЭСФСервер.ПолучитьСвойство(seller, "tin", Неопределено);
			
			Если ТипЗнч(tin) = Тип("Строка") И (НЕ ПустаяСтрока(tin)) Тогда
				
				Если tin = ИдентификационныйНомер Тогда
					Направление = Перечисления.НаправленияЭСФ.Исходящий;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаТабЗначInvoiceInfo.Направление = Направление;
		
		Если Направление = Неопределено Тогда
							
			ТекстСообщения = НСтр(
				"ru = 'Не удалось загрузить электронный счет-фактуру: 
				|[НомерДатаРегНомер],
				|Из файла: [ИмяФайла]
				|так как документ не принадлежит структурной единице ""[СтруктурнаяЕдиница]"".'");
				
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерДатаРегНомер]", ПредставлениеInvoiceInfo(InvoiceInfo));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайла]", СтрокаТабЗначInvoiceInfo.ИмяФайла);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[СтруктурнаяЕдиница]", СтруктурнаяЕдиница);
			
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
			
		КонецЕсли;
				
	КонецЦикла;
		
	// Удалить InvoiceInfo, которые не принадлежат текущей структурной единице.
	Пока Истина Цикл
		
		СтрокаТабЗначInvoiceInfo = ТабЗначInvoiceInfo.Найти(Неопределено, "Направление");
		
		Если СтрокаТабЗначInvoiceInfo <> Неопределено Тогда
			ТабЗначInvoiceInfo.Удалить(СтрокаТабЗначInvoiceInfo);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	
	/////////////////////////////////////////////////////////////////////////////
	// Перебрать оставшиеся InvoiceInfo, если есть несколько InvoiceInfo с одинаковым id, 
	// то оставить один и сообщить об этом.
	
	// Добавить в ТабЗначInvoiceInfo колонку Идентификатор.
	КвалификаторСтроки100 = Новый КвалификаторыСтроки(100);
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", КвалификаторСтроки100);
	ТабЗначInvoiceInfo.Колонки.Добавить("Идентификатор", ОписаниеТиповСтрока100);
	
	// Заполнить колонку Идентификатор в ТабЗначInvoiceInfo.
	Для Каждого СтрокаТабЗначInvoiceInfo Из ТабЗначInvoiceInfo Цикл
		СтрокаТабЗначInvoiceInfo.Идентификатор = СтрокаТабЗначInvoiceInfo.InvoiceInfo.invoiceId;
	КонецЦикла;
	
	// Создать таблицу уникальных идентификаторов.
	ТабЗначУникальныеИдентификаторы = Новый ТаблицаЗначений;
	ТабЗначУникальныеИдентификаторы.Колонки.Добавить("Идентификатор", ОписаниеТиповСтрока100);
	
	// Заполнить таблицу уникальных идентификаторов.
	Для Каждого СтрокаТабЗначInvoiceInfo Из ТабЗначInvoiceInfo Цикл
		СтрокаТабЗначУникальныеИдентификаторы = ТабЗначУникальныеИдентификаторы.Добавить();
		СтрокаТабЗначУникальныеИдентификаторы.Идентификатор = СтрокаТабЗначInvoiceInfo.Идентификатор;
	КонецЦикла;
	
	// Сгруппировать таблицу уникальных идентификаторов.
	ТабЗначУникальныеИдентификаторы.Свернуть("Идентификатор");
	
	// Создать таблицу значений, все строки из которой добавятся в таблицу ЗагружаемыеЭСФ.
	ТабЗначДляЗаполнения = Новый ТаблицаЗначений;
	ТабЗначДляЗаполнения.Колонки.Добавить("ИмяФайла");
	ТабЗначДляЗаполнения.Колонки.Добавить("InvoiceInfo");
	ТабЗначДляЗаполнения.Колонки.Добавить("Направление");
	ТабЗначДляЗаполнения.Колонки.Добавить("Идентификатор", ОписаниеТиповСтрока100);
	ОписаниеТиповСсылкаЭСФ = Новый ОписаниеТипов("ДокументСсылка.ЭСФ");
	ТабЗначДляЗаполнения.Колонки.Добавить("ЭСФ", ОписаниеТиповСсылкаЭСФ);
	                                                                  
	// Заполнить таблицу для заполнения на основе ТабЗначInvoiceInfo,
	// если будут находится InvoiceInfo с одинаковыми идентификаторами,
	// то будет браться первый и пользователю будет показываться сообщение.
	Для Каждого СтрокаТабЗначУникальныеИдентификаторы Из ТабЗначУникальныеИдентификаторы Цикл
		
		Идентификатор = СтрокаТабЗначУникальныеИдентификаторы.Идентификатор;	
		ПараметрыОтбора = Новый Структура("Идентификатор", Идентификатор);
		МассивНайденныхСтрок = ТабЗначInvoiceInfo.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивНайденныхСтрок.Количество() = 0 Тогда
			
			ВызватьИсключение НСтр("ru = 'Внутренняя ошибка. Не удалось найти строки по идентификатору.'");
			
		ИначеЕсли МассивНайденныхСтрок.Количество() = 1 Тогда
			
			СтрокаТабЗначInvoiceInfo = МассивНайденныхСтрок[0];
			
		Иначе // МассивНайденныхСтрок.Количество() > 1 Тогда
			
			СтрокаТабЗначInvoiceInfo = МассивНайденныхСтрок[0];
			
			ТекстСообщения = НСтр(
				"ru = 'В загружаемых файлах обнаружено несколько электронных счетов-фактур с одинаковым значением служебного поля <invoiceId>.
				|Из обнаруженных электронных счетов-фактур будет загружен только один:
				|[НомерДатаРегНомер],
				|Из файла: [ИмяФайла]'");
				
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерДатаРегНомер]", ПредставлениеInvoiceInfo(InvoiceInfo));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайла]", СтрокаТабЗначInvoiceInfo.ИмяФайла);
			
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);			
			
		КонецЕсли;
		
		СтрокаТабЗначДляЗаполнения = ТабЗначДляЗаполнения.Добавить();
		СтрокаТабЗначДляЗаполнения.ИмяФайла = СтрокаТабЗначInvoiceInfo.ИмяФайла;
		СтрокаТабЗначДляЗаполнения.InvoiceInfo = СтрокаТабЗначInvoiceInfo.InvoiceInfo;
		СтрокаТабЗначДляЗаполнения.Направление = СтрокаТабЗначInvoiceInfo.Направление;
		СтрокаТабЗначДляЗаполнения.Идентификатор = СтрокаТабЗначInvoiceInfo.Идентификатор;
		
	КонецЦикла;
	
	
	
		
	//////////////////////////////////////////////////////////////////////////////
	// Найти существующие ЭСФ по идентификаторам.	
	МассивИдентификаторов = Новый Массив;
	
	Для Каждого СтрокаТабЗначДляЗаполнения Из ТабЗначДляЗаполнения Цикл
		МассивИдентификаторов.Добавить(СтрокаТабЗначДляЗаполнения.Идентификатор);
	КонецЦикла;
	
	КоллекцияСуществующихЭСФ = НайтиСуществующиеЭСФПоИдентификаторам(МассивИдентификаторов, СтруктурнаяЕдиница);
	
	Для Каждого ЭлементКоллекцииСуществующихЭСФ Из КоллекцияСуществующихЭСФ Цикл
		
		СтрокаТабЗначДляЗаполнения = ТабЗначДляЗаполнения.Найти(ЭлементКоллекцииСуществующихЭСФ.Ключ, "Идентификатор");
		СтрокаТабЗначДляЗаполнения.ЭСФ = ЭлементКоллекцииСуществующихЭСФ.Значение;
		
	КонецЦикла;
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Для ЭСФ, которые не удалось найти по идентификатору, найти по номеру и дате.
		
	// Создать пустую таблицу параметров поиска.
	ИменаРеквизитов = "ПометкаУдаления, Направление, Номер, Дата";



	ПараметрыПоискаДокументовЭСФ = ЭСФСервер.НовыеПараметрыПоискаСсылок(ИменаРеквизитов, Метаданные.Документы.ЭСФ);
	
	// Заполнить таблицу параметров поиска.
	Для Каждого СтрокаТабЗначДляЗаполнения Из ТабЗначДляЗаполнения Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабЗначДляЗаполнения.ЭСФ) Тогда
			
			ПараметрыПоискаОдногоЭСФ = ПараметрыПоискаДокументовЭСФ.Добавить();
			
			ПараметрыПоискаОдногоЭСФ.ПометкаУдаления = Ложь;
			ПараметрыПоискаОдногоЭСФ.Направление = СтрокаТабЗначДляЗаполнения.Направление;
			
			Invoice = ЭСФСервер.ПолучитьСвойство(СтрокаТабЗначДляЗаполнения.InvoiceInfo, "invoice", "");
			Если ПустаяСтрока(Invoice) Тогда
				ТекстСчетаФактуры = ЭСФСервер.ПолучитьСвойство(СтрокаТабЗначДляЗаполнения.InvoiceInfo, "invoiceBody", "");
				Invoice = ?(ПустаяСтрока(ТекстСчетаФактуры), "", ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстСчетаФактуры, ФабрикаXDTO));
			КонецЕсли;
			
			//ПараметрыПоискаОдногоЭСФ.Номер = ЭСФСервер.ПолучитьСвойство(СтрокаТабЗначДляЗаполнения.InvoiceInfo.invoice, "num", "");
			ПараметрыПоискаОдногоЭСФ.Номер = ЭСФСервер.ПолучитьСвойство(invoice, "num", "");
			//ПараметрыПоискаОдногоЭСФ.Дата = ЭСФСервер.ДатаИБ(СтрокаТабЗначДляЗаполнения.InvoiceInfo.invoice.date);
			ПараметрыПоискаОдногоЭСФ.Дата = ЭСФСервер.ДатаИБ(invoice.date);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если есть загружаемые ЭСФ, для которых не удалось найти существующие по идентификатору.
	Если ПараметрыПоискаДокументовЭСФ.Количество() > 0 Тогда
		
		// Найти ЭСФ по номера и датам.
		ДанныеСтруктурнойЕдиницы = ЭСФСерверПовтИсп.ДанныеСтруктурнойЕдиницы(СтруктурнаяЕдиница);
		ИдентификационныйНомер = ДанныеСтруктурнойЕдиницы.ИдентификационныйНомер;
		ТаблицаНайденныхЭСФ = НайтиСсылкиПоЗначениямРеквизитов(ПараметрыПоискаДокументовЭСФ, Метаданные.Документы.ЭСФ, ИдентификационныйНомер);
		
		// Заполнить ссылки на ЭСФ, найденные по номерам и датам.
		Для Каждого СтрокаТабЗначДляЗаполнения Из ТабЗначДляЗаполнения Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабЗначДляЗаполнения.ЭСФ) Тогда
				
				ПараметрыОтбора = Новый Структура;
				
				Invoice = ЭСФСервер.ПолучитьСвойство(СтрокаТабЗначДляЗаполнения.InvoiceInfo, "invoice", "");
				Если ПустаяСтрока(Invoice) Тогда
					ТекстСчетаФактуры = ЭСФСервер.ПолучитьСвойство(СтрокаТабЗначДляЗаполнения.InvoiceInfo, "invoiceBody", "");
					Invoice = ?(ПустаяСтрока(ТекстСчетаФактуры), "", ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстСчетаФактуры, ФабрикаXDTO));
				КонецЕсли;

				ПараметрыОтбора.Вставить("Направление", СтрокаТабЗначДляЗаполнения.Направление);
				ПараметрыОтбора.Вставить("Номер", ЭСФСервер.ПолучитьСвойство(invoice, "num", ""));
				ПараметрыОтбора.Вставить("Дата", ЭСФСервер.ДатаИБ(invoice.date));
				
				МассивНайденныхСтрокТаблицаНайденныхЭСФ = ТаблицаНайденныхЭСФ.НайтиСтроки(ПараметрыОтбора);
				
				Если МассивНайденныхСтрокТаблицаНайденныхЭСФ.Количество() = 1 Тогда
					
					НайденнаяСтрока = МассивНайденныхСтрокТаблицаНайденныхЭСФ[0];
					СтрокаТабЗначДляЗаполнения.ЭСФ = НайденнаяСтрока.НайденнаяСсылка;
					
				ИначеЕсли МассивНайденныхСтрокТаблицаНайденныхЭСФ.Количество() > 1 Тогда
					
					ТекстСообщения = НСтр(
					"ru = 'Для загружаемого ЭСФ №[Номер] от [Дата] в информационной базе найдено несколько ЭСФ:
					|[СписокЭСФ]'");
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Номер]", ПараметрыОтбора.Номер);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Дата]", Формат(ПараметрыОтбора.Дата, "ДФ=dd.MM.yyyy"));
					
					СписокЭСФ = "";
					Для Каждого НайденнаяСтрока Из МассивНайденныхСтрокТаблицаНайденныхЭСФ Цикл
						СписокЭСФ = СписокЭСФ + НайденнаяСтрока.НайденнаяСсылка + Символы.ПС;	
					КонецЦикла;
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[СписокЭСФ]", СокрЛП(СписокЭСФ));
					
					Сообщить(ТекстСообщения);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Добавить строки из ТабЗначДляЗаполнения в таблицу ЗагружаемыеЭСФ.
	ОрганизацияИСтруктурноеПодразделение = ЭСФСервер.ОрганизацияИСтруктурноеПодразделение(СтруктурнаяЕдиница);
	
	Для Каждого СтрокаТабЗначДляЗаполнения Из ТабЗначДляЗаполнения Цикл
		
		СтрокаЗагружаемыеЭСФ = ЗагружаемыеЭСФ.Добавить();
		
		// Создать ЭСФ для вычисления поля Состояние.
		ОбъектЭСФ = Документы.ЭСФ.СоздатьДокумент();
		ЗаполнитьЭСФ(СтрокаТабЗначДляЗаполнения.InvoiceInfo, СтруктурнаяЕдиница, Направление, ОбъектЭСФ);
		
		//+
		Invoice = ЭСФСервер.ПолучитьСвойство(СтрокаТабЗначДляЗаполнения.InvoiceInfo, "invoice", "");
		Если ПустаяСтрока(Invoice) Тогда
			ТекстСчетаФактуры = ЭСФСервер.ПолучитьСвойство(СтрокаТабЗначДляЗаполнения.InvoiceInfo, "invoiceBody", "");
			Invoice = ?(ПустаяСтрока(ТекстСчетаФактуры), "", ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстСчетаФактуры, ФабрикаXDTO));
		КонецЕсли;
		//-

		СтрокаЗагружаемыеЭСФ.Состояние = ЭСФСервер.СостояниеЭСФ(ОбъектЭСФ);
		СтрокаЗагружаемыеЭСФ.XML = ЭСФСервер.СтрокаXMLИзОбъектаXDTO(СтрокаТабЗначДляЗаполнения.InvoiceInfo, "invoiceInfo", ФабрикаXDTO);
		//СтрокаЗагружаемыеЭСФ.Вид = ЭСФКлиентСервер.ВидИБ(СтрокаТабЗначДляЗаполнения.InvoiceInfo.invoice.invoiceType);
		//СтрокаЗагружаемыеЭСФ.Дата = ЭСФСервер.ДатаИБ(СтрокаТабЗначДляЗаполнения.InvoiceInfo.invoice.date);
		СтрокаЗагружаемыеЭСФ.Вид = ЭСФКлиентСервер.ВидИБ(invoice.invoiceType);
		СтрокаЗагружаемыеЭСФ.Дата = ЭСФСервер.ДатаИБ(invoice.date);
		СтрокаЗагружаемыеЭСФ.Идентификатор = СтрокаТабЗначДляЗаполнения.Идентификатор;
		СтрокаЗагружаемыеЭСФ.Направление = СтрокаТабЗначДляЗаполнения.Направление;
		СтрокаЗагружаемыеЭСФ.Номер = ЭСФСервер.ПолучитьСвойство(invoice, "num", "");
		СтрокаЗагружаемыеЭСФ.Организация = ОрганизацияИСтруктурноеПодразделение.Организация;
		СтрокаЗагружаемыеЭСФ.Пометка = Ложь;
		СтрокаЗагружаемыеЭСФ.СтруктурноеПодразделение = ОрганизацияИСтруктурноеПодразделение.СтруктурноеПодразделение;
		СтрокаЗагружаемыеЭСФ.ЭСФ = СтрокаТабЗначДляЗаполнения.ЭСФ;
		
	КонецЦикла;
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////	
	// Сообщить, сколько всего ЭСФ загружено.
	ТекстСообщения = НСтр("ru = 'Загружено электронных счетов-фактур: [Количество].'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Количество]", ТабЗначДляЗаполнения.Количество());
	Сообщить(ТекстСообщения);
	
КонецПроцедуры

Функция ПредставлениеInvoiceInfo(InvoiceInfo)
	
	СтроковоеПредставление = НСтр("ru = 'Номер: [Номер], Дата: [Дата], Рег. номер: [РегНомер]'");
	
	invoice = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoice", Неопределено);
	
	ТекстНеУдалосьПолучить = НСтр("ru = '<Не удалось получить>'");
	
	Если invoice <> Неопределено Тогда
		
		Номер = ЭСФСервер.ПолучитьСвойство(invoice, "num", ТекстНеУдалосьПолучить);
		СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "[Номер]", Номер); 
		
		Дата = ЭСФСервер.ПолучитьСвойство(invoice, "date", ТекстНеУдалосьПолучить);
		СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "[Дата]", Дата);
		
	Иначе
		СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "[Номер]", ТекстНеУдалосьПолучить); 
		СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "[Дата]", ТекстНеУдалосьПолучить);
		
	КонецЕсли;
	
	РегНомер = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "registrationNumber", ТекстНеУдалосьПолучить);
	СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "[РегНомер]", РегНомер);
	
	Возврат СтроковоеПредставление;
	
КонецФункции

Процедура СоздатьОбновитьЗагружаемыеЭСФ(Знач СтруктурнаяЕдиница, ЗагружаемыеЭСФ) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		
		// Если пользователь выгрузит ЭСФ и отправит ЭСФ через веб-приложение ИС ЭСФ,
		// а затем выгрузит этот ЭСФ из веб-приложения ИС ЭСФ, чтобы обновить ЭСФ в 1С,
		// то при загрузке этот ЭСФ найдется по номеру и дате, 
		// но при создании появится дублирующийся ЭСФ,
		// т.к. поиск существующих ЭСФ при создании выполняется по идентификатору.
		//
		// Чтобы устранить данную проблему, документу ЭСФ, найденному по номеру и дате,
		// присваивается идентификатор документа загружаемого ЭСФ.
		Для Каждого СтрокаЗагружаемыеЭСФ Из ЗагружаемыеЭСФ Цикл
			Если ЗначениеЗаполнено(СтрокаЗагружаемыеЭСФ.ЭСФ) Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаЗагружаемыеЭСФ.ЭСФ.Идентификатор) Тогда
					ОбъектЭСФ = СтрокаЗагружаемыеЭСФ.ЭСФ.ПолучитьОбъект();
					ОбъектЭСФ.Идентификатор = СтрокаЗагружаемыеЭСФ.Идентификатор;
					ОбъектЭСФ.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СоздатьОбновитьЗагружаемыеЭСФПоНаправлению(СтруктурнаяЕдиница, Перечисления.НаправленияЭСФ.Входящий, ЗагружаемыеЭСФ);
		СоздатьОбновитьЗагружаемыеЭСФПоНаправлению(СтруктурнаяЕдиница, Перечисления.НаправленияЭСФ.Исходящий, ЗагружаемыеЭСФ);
		
		ЗафиксироватьТранзакцию();
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.СоздатьОбновитьЗагружаемыеЭСФ'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
	ЗагружаемыеЭСФ_ОбновитьКолонкуЭСФ(СтруктурнаяЕдиница, ЗагружаемыеЭСФ);
	
КонецПроцедуры

Процедура СоздатьОбновитьЗагружаемыеЭСФПоНаправлению(Знач СтруктурнаяЕдиница, Знач НаправлениеЭСФ, ЗагружаемыеЭСФ)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Направление", НаправлениеЭСФ);
	ПараметрыОтбора.Вставить("Пометка", Истина);
	
	МассивНайденныхСтрокЗагружаемыеЭСФ = ЗагружаемыеЭСФ.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивНайденныхСтрокЗагружаемыеЭСФ.Количество() <> 0 Тогда
		
		InvoiceInfoList = ЭСФСервер.ПустойСписокXDTO();	
		Для Каждого СтрокаЗагружаемыеЭСФ Из МассивНайденныхСтрокЗагружаемыеЭСФ Цикл
			InvoiceInfoXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(СтрокаЗагружаемыеЭСФ.XML, ФабрикаXDTO);
			ЭСФСервер.НовыйЭлементСпискаXDTO(InvoiceInfoList, ФабрикаXDTO, InvoiceInfoXDTO);
		КонецЦикла;
		
		СоздатьОбновитьПолучаемыеЭСФ(InvoiceInfoList, НаправлениеЭСФ, СтруктурнаяЕдиница, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагружаемыеЭСФ_ОбновитьКолонкуЭСФ(Знач СтруктурнаяЕдиница, ЗагружаемыеЭСФ)
	
	МассивИдентификаторов = Новый Массив;
	
	Для Каждого СтрокаЗагружаемыеЭСФ Из ЗагружаемыеЭСФ Цикл
		МассивИдентификаторов.Добавить(СтрокаЗагружаемыеЭСФ.Идентификатор);
	КонецЦикла;
	
	КоллекцияСуществующихЭСФ = НайтиСуществующиеЭСФПоИдентификаторам(МассивИдентификаторов, СтруктурнаяЕдиница);
	
	Для Каждого ЭлементКоллекцииСуществующихЭСФ Из КоллекцияСуществующихЭСФ Цикл
		СтрокаЗагружаемыеЭСФ = ЗагружаемыеЭСФ.Найти(ЭлементКоллекцииСуществующихЭСФ.Ключ, "Идентификатор");
		СтрокаЗагружаемыеЭСФ.ЭСФ = ЭлементКоллекцииСуществующихЭСФ.Значение;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕОПРЕДЕЛЯЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает коллекцию ЭСФ, сгруппированных по структурным единицам.
// Для группировки используются значения Поставщики[0].Поставщик или Получатели[0].Получатель,
// в зависимости от направления ЭСФ.
//
// Параметры:
//  МассивЭСФ - Массив - Массив ЭСФ, которые необходимо сгруппировать по структурным единицам.
//   В массиве могут быть одновременно входящие и исходящие ЭСФ.
//
// Возвращаемое значение:
//  Соответствие - Коллекция ЭСФ, сгруппированных по структурным единицам.
//   |- Ключ - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - Структурная единица.
//   |- Значение - Массив - Массив ЭСФ, принадлежащих данной структурной единице.
//
Функция Переопределяемый_СгруппироватьЭСФПоСтруктурнымЕдиницам(Знач МассивЭСФ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФ.Ссылка КАК ЭСФ,
	|	ЭСФ.Направление КАК Направление,
	|	ЭСФПоставщики.Поставщик КАК Поставщик,
	|	ЭСФПолучатели.Получатель КАК Получатель
	|ПОМЕСТИТЬ ВТ_ЭСФ
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ.Поставщики КАК ЭСФПоставщики
	|		ПО ЭСФ.Ссылка = ЭСФПоставщики.Ссылка
	|			И (ЭСФПоставщики.НомерСтроки = 1)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ.Получатели КАК ЭСФПолучатели
	|		ПО ЭСФ.Ссылка = ЭСФПолучатели.Ссылка
	|			И (ЭСФПолучатели.НомерСтроки = 1)
	|ГДЕ
	|	ЭСФ.Ссылка В(&МассивЭСФ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЭСФ.ЭСФ,
	|	ВЫБОР
	|		КОГДА ВТ_ЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Входящий)
	|			ТОГДА ВТ_ЭСФ.Получатель
	|		КОГДА ВТ_ЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий)
	|			ТОГДА ВТ_ЭСФ.Поставщик
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтруктурнаяЕдиница
	|ИЗ
	|	ВТ_ЭСФ КАК ВТ_ЭСФ
	|ИТОГИ ПО
	|	СтруктурнаяЕдиница";
	
	Запрос.УстановитьПараметр("МассивЭСФ", МассивЭСФ);
	ВыборкаСтруктурнаяЕдиница = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоллекцияСгруппированныхЭСФ = Новый Соответствие;
	
	Пока ВыборкаСтруктурнаяЕдиница.Следующий() Цикл
		
		СгруппированныйМассивЭСФ = Новый Массив;
		
		ВыборкаДетальныеЗаписи = ВыборкаСтруктурнаяЕдиница.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СгруппированныйМассивЭСФ.Добавить(ВыборкаДетальныеЗаписи.ЭСФ);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница) Тогда
			
			КоллекцияСгруппированныхЭСФ.Вставить(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница, СгруппированныйМассивЭСФ);
			
		Иначе
			
			ТекстСообщения = НСтр(
			"ru = 'В документах не указан поставщик или получатель в разделе ""B. Поставщики"" или ""C. Получатели"":
			|%1'");
			
			СтрокаСписокЭСФ = "";
			Для Каждого СсылкаЭСФ Из СгруппированныйМассивЭСФ Цикл
				СтрокаСписокЭСФ = СтрокаСписокЭСФ + "- " + СсылкаЭСФ + Символы.ПС;
			КонецЦикла;
			СтрокаСписокЭСФ = СокрЛП(СтрокаСписокЭСФ);
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСписокЭСФ);
			
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоллекцияСгруппированныхЭСФ;
	
КонецФункции

Функция ИспользоватьФоновуюОтправкуЭСФ() Экспорт
	
	// в зависимости от возможностей конфигурациии переопределяем значение
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Создание документов "ЭСФ" на основе документов "СчетФактураВыданный"

// См. ЭСФСервер.ЗаполнитьИсходящийЭСФ()
Процедура ЗаполнитьИсходящийЭСФ(Знач СсылкаСчетФактура, ОбъектЭСФ) Экспорт
	
	СтруктураВерсий = ЭСФСервер.ПолучитьТекущуюВерсиюЭСФиAPI(СсылкаСчетФактура.Дата);
	
	ВерсияЭСФ = ?(ЗначениеЗаполнено(СтруктураВерсий.ВерсияЭСФ), СтруктураВерсий.ВерсияЭСФ, 2);
	
	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СсылкаСчетФактура);
	
	РезультатыЗапросовПоРеквизитам = НовыеРезультатыЗапросовПоРеквизитам(МассивСчетовФактур);	
	ВыборкаРеквизиты = РезультатыЗапросовПоРеквизитам.РеквизитыСчетовФактур.Выбрать();	
	
	ТаблицаДанныхОсновныхСчетовФактур = РезультатыЗапросовПоРеквизитам.ОсновныеСчетаФактуры.Выгрузить();
	
	Если НЕ РезультатыЗапросовПоРеквизитам.СчетаФактурыСовместнойДеятельности.Пустой() Тогда
		
		МассивСчетовФактурСовместнойДеятельности = МассивЗначенийИзРезультатаЗапроса(
			РезультатыЗапросовПоРеквизитам.СчетаФактурыСовместнойДеятельности, "СчетФактура");
			
		ВыборкаУчастникиСД = НоваяВыборкаУчастникиСовместнойДеятельности(МассивСчетовФактурСовместнойДеятельности);
		
	КонецЕсли;
	
	ВедетсяУчетПоТоварамНаВС = ЭСФСервер.ВедетсяУчетПоТоварамНаВС(СсылкаСчетФактура.Дата);	                
	
	// Заполнить ОбъектЭСФ.	
	Пока ВыборкаРеквизиты.Следующий() Цикл
		
		ЕстьТоварыВСНеСНТ = Ложь;

		// Заполнить реквизиты ОбъектЭСФ.
		ОбъектЭСФ.ВерсияБланкаЭСФ = ВерсияЭСФ;
		
		ЗаполнитьЗначенияСвойств(ОбъектЭСФ, ВыборкаРеквизиты);
		ОчиститьРеквизитыГосучреждения(ВыборкаРеквизиты, ОбъектЭСФ);
		УдалитьЗапрещенныеСимволыИзНазначенияПлатежа(ОбъектЭСФ);
		ОбъектЭСФ.Номер = ЭСФСерверПереопределяемый.ПолучитьНомерНаПечать(ВыборкаРеквизиты.СчетФактура);
		ЗаполнитьДанныеСвязанногоЭСФ(ВыборкаРеквизиты, ТаблицаДанныхОсновныхСчетовФактур, ОбъектЭСФ, ЕстьТоварыВСНеСНТ);
		
		Если ВыборкаРеквизиты.СчетФактура.СпособВыставления = Перечисления.СпособыОбменаДокументами.Бумажно Тогда
			ОбъектЭСФ.Дата = ТекущаяДата();
			ОбъектЭСФ.ДатаВыпискиНаБумажномНосителе = ВыборкаРеквизиты.СчетФактура.Дата;
		КонецЕсли;
		
		МассивЭСФ = Новый Массив;
		МассивЭСФ.Добавить(ОбъектЭСФ);	
		ЗаполнитьСсылкиНаСвязанныеЭСФ(МассивЭСФ);
		Если ВыборкаРеквизиты.Вид = Перечисления.ВидыЭСФ.Дополнительный Тогда
			Если ЗначениеЗаполнено(ОбъектЭСФ.СвязанныйЭСФ) Тогда
				РеквизитыВыпискиНаБумаге = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(ОбъектЭСФ.СвязанныйЭСФ, "ДатаВыпискиНаБумажномНосителе, ПричинаВыпискиНаБумажномНосителе");
				
				ЗаполнитьЗначенияСвойств(ОбъектЭСФ, РеквизитыВыпискиНаБумаге); 
				
				//-=-=
				//Проверка данных раздела Условие оплаты и доставка
				РеквизитыОсновногоЭСФ = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(ОбъектЭСФ.СвязанныйЭСФ, 
				"ДоговорПоставкиУсловияОплаты, ДоговорПоставкиСпособОтправления, ПунктНазначения, СпособОтправленияПоКлассификатору, ДоговорПоставкиУсловияПоставки, УникальныйНомерВалютногоКонтроля");
				
				ЗаполнитьЗначенияСвойств(ОбъектЭСФ, РеквизитыОсновногоЭСФ);
				//-=-=
				
			КонецЕсли;
		КонецЕсли;	
		
		ЗаполнитьДатуОборотаЭСФ(ВыборкаРеквизиты, ТаблицаДанныхОсновныхСчетовФактур, ОбъектЭСФ);
		ОбъектЭСФ.Состояние = ЭСФСервер.СостояниеЭСФ(ОбъектЭСФ);
		
		// Заполнить таблицу "Поставщики".
		ПоставщикиСтрока = ОбъектЭСФ.Поставщики.Добавить();
		ЗаполнитьРеквизитыПоставщика(ПоставщикиСтрока, ВыборкаРеквизиты, СсылкаСчетФактура,ВерсияЭСФ);
		
		ВыборкаТовары = НоваяВыборкаТовары(МассивСчетовФактур, ОбъектЭСФ, ВыборкаРеквизиты);	
		
		// Заполнить таблицу "Получатели".
		Если ВыборкаРеквизиты.ЭтоДоговорСовместнойДеятельности 
			ИЛИ ВыборкаРеквизиты.ЭтоДоговорУчастникСРП Тогда
			ВыборкаУчастникиСД.Сбросить();
			Если ВыборкаУчастникиСД.НайтиСледующий(ВыборкаРеквизиты.СчетФактура, "СчетФактура") Тогда
				ВыборкаУчастникиСДДетальныеЗаписи = ВыборкаУчастникиСД.Выбрать();
				Пока ВыборкаУчастникиСДДетальныеЗаписи.Следующий() Цикл
					НоваяСтрокаТабличнойЧастиПолучатели(ВыборкаУчастникиСДДетальныеЗаписи, ОбъектЭСФ,, ВерсияЭСФ);
				КонецЦикла;
			КонецЕсли;
		Иначе
			НоваяСтрокаТабличнойЧастиПолучатели(ВыборкаРеквизиты, ОбъектЭСФ,, ВерсияЭСФ);
		КонецЕсли;
		
		// Заполнить таблицу "Товары".
		СтруктураСтавкиНДСМестоРеализацииНеРК = Новый Структура;
		СтруктураСтавкиНДСМестоРеализацииНеРК.Вставить("ВсеСтавкиНДСМестоРеализацииНеРК" , Истина);
		СтруктураСтавкиНДСМестоРеализацииНеРК.Вставить("ЕстьСтавкаНДСМестоРеализацииНеРК", Ложь);
				
		Если ВыборкаРеквизиты.Вид = Перечисления.ВидыЭСФ.Дополнительный Тогда
			
			ЗаполнитьТаблицуТоварыДополнительногоИсходящегоЭСФ(ВыборкаРеквизиты, ВыборкаТовары, ТаблицаДанныхОсновныхСчетовФактур, ОбъектЭСФ.Товары, ВерсияЭСФ, СтруктураСтавкиНДСМестоРеализацииНеРК);
			СкорректироватьСуммыТоваровПриВозврате(ОбъектЭСФ);
			
		Иначе
			
			ВыборкаТовары.Сбросить();
			Если ВыборкаТовары.НайтиСледующий(ВыборкаРеквизиты.СчетФактура, "СчетФактура") Тогда
				ВыборкаТоварыДетальныеЗаписи = ВыборкаТовары.Выбрать();
				Пока ВыборкаТоварыДетальныеЗаписи.Следующий() Цикл
					СтрокаТаблицыТовары = ОбъектЭСФ.Товары.Добавить();
					ЗаполнитьСтрокуТаблицыТоварыИсходящегоЭСФ(ВыборкаТоварыДетальныеЗаписи, ВыборкаРеквизиты.СуммаВключаетАкциз, ВыборкаРеквизиты.СуммаВключаетНДС, СтрокаТаблицыТовары, ВерсияЭСФ, ВедетсяУчетПоТоварамНаВС, СтруктураСтавкиНДСМестоРеализацииНеРК);
					Если ЕстьТоварыВСНеСНТ = Ложь И ВыборкаТоварыДетальныеЗаписи.ПризнакУчетаНаВиртуальномСкладе Тогда
						ЕстьТоварыВСНеСНТ = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьРеквизитыДокументаПодтверждающегоПоставку(ВыборкаРеквизиты, ТаблицаДанныхОсновныхСчетовФактур, ПоставщикиСтрока, ВерсияЭСФ, ОбъектЭСФ, ЕстьТоварыВСНеСНТ);		

		Если ВерсияЭСФ = 2 Тогда
			ОбъектЭСФ.МестоРеализацииНеРК = СтруктураСтавкиНДСМестоРеализацииНеРК.ВсеСтавкиНДСМестоРеализацииНеРК;
			
			Если НЕ СтруктураСтавкиНДСМестоРеализацииНеРК.ВсеСтавкиНДСМестоРеализацииНеРК 
					И СтруктураСтавкиНДСМестоРеализацииНеРК.ЕстьСтавкаНДСМестоРеализацииНеРК Тогда 
					
					
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
					НСтр("ru='В документе: %1 , одновременно присутствуют строки с разным признаком ставки НДС ""Местом реализации не является РК!""'"),
					ОбъектЭСФ);
					
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					
			КонецЕсли;		
			
		КонецЕсли;
		
		// Заполнить таблицу "ТоварыПоПолучателям".
		Если ВыборкаРеквизиты.ЭтоДоговорСовместнойДеятельности 
			ИЛИ ВыборкаРеквизиты.ЭтоДоговорУчастникСРП Тогда
			ЗаполнитьТаблицуТоварыПоПолучателям(ВыборкаУчастникиСД, ОбъектЭСФ);
		КонецЕсли;
		
		// Очистить таблицу "Ошибки".
		ОбъектЭСФ.Ошибки.Очистить();
				
		// Заполнить автора.
		Если НЕ ЗначениеЗаполнено(ОбъектЭСФ.Автор) Тогда
			ОбъектЭСФ.Автор = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();
		КонецЕсли;
		
		
		
		
		// Показать различные предупреждения после заполнения ЭСФ.
		
		// Проверить, что БИК ГУ равен "KKMFKZ2A".
		Если ЗначениеЗаполнено(ОбъектЭСФ.ГосучреждениеБИК)
			И ОбъектЭСФ.ГосучреждениеБИК <> ГосучреждениеБИК() Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'БИК госучреждения отличается от ""[СтандартныйБИК]"".'");
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "[СтандартныйБИК]", ГосучреждениеБИК()); 
			Сообщение.Поле = "Объект.ГосучреждениеБИК";
			Сообщение.Сообщить();
			
		КонецЕсли;
			
		
		Если ВерсияЭСФ = 1 Тогда
			// Проверить, что заполнен код ТРУ, если в ИИК восьмой символ - "3".
			Если Сред(ОбъектЭСФ.ГосучреждениеИИК, 8, 1) = "3"
				И ПустаяСтрока(ОбъектЭСФ.ГосучреждениеКодТоваров) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Реквизит госучреждения ""Код товаров, работ, услуг"" должен быть заполнен, так как в поле госучреждения ""ИИК"" указан КСН платных услуг.'");
				Сообщение.Поле = "Объект.ГосучреждениеКодТоваров";
				Сообщение.Сообщить();
				
			КонецЕсли;
		КонецЕсли;
		
		// Заполнить ЭСФ по товарам из Перечня.
		//Если НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(СсылкаСчетФактура.Дата) Тогда
			МассивСообщений = ЗаполнитьПроверитьИсходящийЭСФПоТоварамИзПеречня(ОбъектЭСФ, СсылкаСчетФактура, Истина);
			ПоказатьСообщения(МассивСообщений, СсылкаСчетФактура);
		//КонецЕсли;
		
	КонецЦикла;
	
			
КонецПроцедуры

//Процедура корректировки ошибок округления при возврате товаров
Процедура СкорректироватьСуммыТоваровПриВозврате(ОбъектЭСФ)
	
	Если ОбъектЭСФ.СвязанныйЭСФ.Пустая() Тогда
		Возврат;
	КонецЕсли;

	
	ЭтоВозврат = Ложь;
	//Проверка на тип документа (так как явного признака нет, проверяем по отрицательному количеству)
	Для каждого Строка из ОбъектЭСФ.Товары цикл
		Если Строка.Количество < 0 Тогда
			ЭтоВозврат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоВозврат Тогда	
		
		ПараметрыЭСФ = ЭСФСервер.ПолучитьПараметрыЭСФ();
		ПорогОкругленияСумм = ПараметрыЭСФ.ПорогОкругленияСумм;
		
		Если ПорогОкругленияСумм = 0 Тогда
			Возврат;	
		КонецЕсли;
		
		//Заполним список товаров, по которым будем получать данные
		МассивТоваров = Новый СписокЗначений;
		Для каждого Строка из ОбъектЭСФ.Товары цикл
			Если НЕ ЭСФСерверПереопределяемый.ЭтоУслуга(Строка.Товар) И МассивТоваров.НайтиПоЗначению(Строка.Товар) = Неопределено Тогда
				МассивТоваров.Добавить(Строка.Товар);
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЭСФТовары.ОборотПоРеализации КАК БалансОборотПоРеализации,
		               |	ЭСФТовары.СуммаНДС КАК БалансСуммаНДС,
		               |	ЭСФТовары.Товар КАК Товар,
		               |	ЭСФТовары.НомерСтроки,
		               |	ЭСФТовары.Количество КАК БалансКоличество,
		               |	ЭСФТовары.СуммаБезНалогов КАК БалансСуммаБезНалогов,
		               |	ЭСФТовары.Сумма КАК БалансСуммаСНалогами,
		               |	ЭСФТовары.СуммаАкциза КАК БалансСуммаАкциза
		               |ПОМЕСТИТЬ ВТ_ОсновнойИДополнительные
		               |ИЗ
		               |	Документ.ЭСФ.Товары КАК ЭСФТовары
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
		               |		ПО ЭСФТовары.Ссылка = ЭСФ.Ссылка
		               |			И (ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Обычный))
		               |			И (ЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий))
		               |			И (ЭСФ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭСФ.ПринятСервером)
		               |				ИЛИ ЭСФ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭСФ.ДоставленПолучателю))
		               |ГДЕ
		               |	ЭСФТовары.Ссылка = &Ссылка
		               |	И ЭСФ.Ссылка = &Ссылка
		               |	И ЭСФ.Ссылка <> &СсылкаТекущегоЭСФ
		               |	И ЭСФТовары.Товар В(&МассивТоваров)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЭСФТовары.ОборотПоРеализации,
		               |	ЭСФТовары.СуммаНДС,
		               |	ЭСФТовары.Товар,
		               |	ЭСФТовары.НомерСтроки,
		               |	ЭСФТовары.Количество,
		               |	ЭСФТовары.СуммаБезНалогов,
		               |	ЭСФТовары.Сумма,
		               |	ЭСФТовары.СуммаАкциза
		               |ИЗ
		               |	Документ.ЭСФ.Товары КАК ЭСФТовары
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
		               |		ПО ЭСФТовары.Ссылка = ЭСФ.Ссылка
		               |			И (ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Дополнительный))
		               |			И (ЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий))
		               |ГДЕ
		               |	ЭСФТовары.Товар В(&МассивТоваров)
		               |	И ЭСФ.Ссылка <> &СсылкаТекущегоЭСФ
		               |	И ЭСФ.СвязанныйЭСФ = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СУММА(ЭСФТовары.БалансОборотПоРеализации) КАК БалансОборотПоРеализации,
		               |	СУММА(ЭСФТовары.БалансСуммаНДС) КАК БалансСуммаНДС,
		               |	ЭСФТовары.Товар КАК Товар,
		               |	ЭСФТовары.НомерСтроки,
		               |	СУММА(ЭСФТовары.БалансКоличество) КАК БалансКоличество,
		               |	СУММА(ЭСФТовары.БалансСуммаБезНалогов) КАК БалансСуммаБезНалогов,
		               |	СУММА(ЭСФТовары.БалансСуммаСНалогами) КАК БалансСуммаСНалогами,
		               |	СУММА(ЭСФТовары.БалансСуммаАкциза) КАК БалансСуммаАкциза
		               |ИЗ
		               |	ВТ_ОсновнойИДополнительные КАК ЭСФТовары
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЭСФТовары.Товар,
		               |	ЭСФТовары.НомерСтроки";
					   
					   
		Запрос.УстановитьПараметр("Ссылка",	ОбъектЭСФ.СвязанныйЭСФ);	 //Электронный счет-фактура
		Запрос.УстановитьПараметр("МассивТоваров", МассивТоваров);
		Запрос.УстановитьПараметр("СсылкаТекущегоЭСФ", ОбъектЭСФ.Ссылка);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока РезультатЗапроса.Следующий() цикл
			//Возьмем из текущего ЭСФ строку с товаром. Так как порядок должен быть таким же - просто берем по индексу.
			Если РезультатЗапроса.НомерСтроки <= ОбъектЭСФ.Товары.Количество() Тогда
				СтрокаТовара = ОбъектЭСФ.Товары[РезультатЗапроса.НомерСтроки-1];
			Иначе
				СтрокаТовара = Неопределено;
			КонецЕсли;
			Если СтрокаТовара <> Неопределено Тогда
				
				Если НЕ СтрокаТовара.Количество = 0 И ((РезультатЗапроса.БалансКоличество + СтрокаТовара.Количество) = 0) Тогда
					
					//Сумма НДС
					
					БалансСуммыНДС = РезультатЗапроса.БалансСуммаНДС + СтрокаТовара.СуммаНДС;
					
					Если НЕ БалансСуммыНДС = 0 И БалансСуммыНДС <= ПорогОкругленияСумм И БалансСуммыНДС >= -ПорогОкругленияСумм Тогда 
						СтрокаТовара.СуммаНДС = СтрокаТовара.СуммаНДС - БалансСуммыНДС;
					КонецЕсли;	
					
					//Сумма оборота
					
					БалансСуммыОборота = РезультатЗапроса.БалансОборотПоРеализации + СтрокаТовара.ОборотПоРеализации;
					Если НЕ БалансСуммыОборота = 0 И БалансСуммыОборота <= ПорогОкругленияСумм И БалансСуммыОборота >= -ПорогОкругленияСумм Тогда 
						СтрокаТовара.ОборотПоРеализации = СтрокаТовара.ОборотПоРеализации - БалансСуммыОборота;
					КонецЕсли;	
					
					//Сумма без налогов
					
					БалансСуммыБезНалогов = РезультатЗапроса.БалансСуммаБезНалогов + СтрокаТовара.СуммаБезНалогов;
					Если НЕ БалансСуммыБезНалогов = 0 И БалансСуммыБезНалогов <= ПорогОкругленияСумм И БалансСуммыБезНалогов >= -ПорогОкругленияСумм  Тогда 
						СтрокаТовара.СуммаБезНалогов = СтрокаТовара.СуммаБезНалогов - БалансСуммыБезНалогов;
					КонецЕсли;
					
					//Сумма с налогами
					
					БалансСуммыСНалогами = РезультатЗапроса.БалансСуммаСНалогами + СтрокаТовара.Сумма;
					Если НЕ БалансСуммыСНалогами = 0 И БалансСуммыСНалогами <= ПорогОкругленияСумм И БалансСуммыСНалогами >= -ПорогОкругленияСумм Тогда 
						СтрокаТовара.Сумма = СтрокаТовара.Сумма - БалансСуммыСНалогами;	
					КонецЕсли;
					
					//Сумма акциза
					
					БалансСуммыАкциза = РезультатЗапроса.БалансСуммаАкциза + СтрокаТовара.СуммаАкциза;
					Если НЕ БалансСуммыАкциза = 0 И БалансСуммыАкциза <= ПорогОкругленияСумм И БалансСуммыАкциза >= -ПорогОкругленияСумм Тогда 
						СтрокаТовара.СуммаАкциза = СтрокаТовара.СуммаАкциза - БалансСуммыАкциза;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

// Функция создает несколько ЭСФ на основании нескольких счетов-фактур.
//
Функция СоздатьСписокИсходящихЭСФ(МассивСчетовФактур) Экспорт
	
	СписокСозданныхЭСФ = Новый Массив;
	
	Для Каждого СчетФактураОснование Из МассивСчетовФактур Цикл
		
		Попытка
			
			НовыйДокументЭСФ = Документы.ЭСФ.СоздатьДокумент();
			НовыйДокументЭСФ.Заполнить(СчетФактураОснование);
			
			СделатьАктуальным = ЭСФКлиентСервер.СделатьАктуальным();
			НовыйДокументЭСФ.ДополнительныеСвойства.Вставить(СделатьАктуальным, Истина);	
			
			НовыйДокументЭСФ.Записать();
			СписокСозданныхЭСФ.Добавить(НовыйДокументЭСФ.Ссылка);
			
		Исключение
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при создании документа ЭСФ: %1.'"),
				ИнформацияОбОшибке().Описание);
				
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецПопытки;
		
		Попытка
			
			СчетФактураОбъект = СчетФактураОснование.ПолучитьОбъект();
			СчетФактураОбъект.СпособВыставления = Перечисления.СпособыОбменаДокументами.Электронно;
			СчетФактураОбъект.Записать();
			
		Исключение
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при записи %1: %2.'"),
				СчетФактураОснование,
				ИнформацияОбОшибке().Описание);
				
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат СписокСозданныхЭСФ;
	
КонецФункции


Функция НоваяВыборкаУчастникиСовместнойДеятельности(Знач МассивСчетовФактурСовместнойДеятельности)
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчастникиСД.Ссылка КАК СчетФактура,
	|	УчастникиСД.Ссылка.Грузополучатель КАК Грузополучатель,
	|	УчастникиСД.НомерСтроки КАК НомерСтроки,
	|	УчастникиСД.УчастникСовместнойДеятельности.ИдентификационныйКодЛичности КАК Получатель_ПолучательИдентификатор,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(УчастникиСД.УчастникСовместнойДеятельности.НаименованиеПолное КАК СТРОКА(400))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(УчастникиСД.УчастникСовместнойДеятельности.НаименованиеПолное КАК СТРОКА(400))
	|		ИНАЧЕ УчастникиСД.УчастникСовместнойДеятельности.Наименование
	|	КОНЕЦ КАК Получатель_ПолучательНаименование,
	|	УчастникиСД.УчастникСовместнойДеятельности КАК Получатель_Получатель,
	|	УчастникиСД.УчастникСовместнойДеятельности.СерияСвидетельстваПоНДС КАК Получатель_СерияСвидетельстваПоНДС,
	|	УчастникиСД.УчастникСовместнойДеятельности.НомерСвидетельстваПоНДС КАК Получатель_НомерСвидетельстваПоНДС,
	|	УчастникиСД.УчастникСовместнойДеятельности.КБЕ КАК Получатель_КБе,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ДоговорСовместнойДеятельности, ЛОЖЬ) КАК Получатель_УчастникСовместнойДеятельности,
	|	%Получатель_УчастникСРП КАК Получатель_УчастникСРП,
	|	УчастникиСД.ДоляУчастия КАК Получатель_ДоляУчастия
	|ПОМЕСТИТЬ ДанныеУчастниковСД
	|ИЗ
	|	Документ.СчетФактураВыданный.УчастникиСовместнойДеятельности КАК УчастникиСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО УчастникиСД.Ссылка.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	УчастникиСД.Ссылка В(&МассивСчетовФактурСовместнойДеятельности)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Получатель_Получатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеУчастниковСД.СчетФактура КАК СчетФактура,
	|	ДанныеУчастниковСД.Грузополучатель КАК Грузополучатель,
	|	ДанныеУчастниковСД.Получатель_ПолучательИдентификатор,
	|	ДанныеУчастниковСД.Получатель_ПолучательНаименование,
	|	ДанныеУчастниковСД.Получатель_Получатель,
	|	ДанныеУчастниковСД.Получатель_СерияСвидетельстваПоНДС,
	|	ДанныеУчастниковСД.Получатель_НомерСвидетельстваПоНДС,
	|	ДанныеУчастниковСД.Получатель_КБе,
	|	ДанныеУчастниковСД.Получатель_УчастникСовместнойДеятельности,
	|	ДанныеУчастниковСД.Получатель_УчастникСРП,
	|	ДанныеУчастниковСД.Получатель_ДоляУчастия КАК Получатель_ДоляУчастия,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(400)), """") КАК Получатель_Адрес,
	//новые реквизиты ЭСФ версии №2
	|	""KZ"" КАК Получатель_КодСтраны
	|ИЗ
	|	ДанныеУчастниковСД КАК ДанныеУчастниковСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ДанныеУчастниковСД.Получатель_Получатель = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеУчастниковСД.НомерСтроки
	|ИТОГИ
	|	СУММА(Получатель_ДоляУчастия)
	|ПО
	|	СчетФактура";
	
	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%Получатель_УчастникСРП", "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеИменРеквизитов);
	
	Запрос.Текст = ТекстЗапроса;
	
	
	Запрос.УстановитьПараметр("МассивСчетовФактурСовместнойДеятельности", МассивСчетовФактурСовместнойДеятельности);	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат Выборка;
	
КонецФункции

Функция МассивЗначенийИзРезультатаЗапроса(Знач РезультатЗапроса, Знач ИмяПоля)
	
	Выборка = РезультатЗапроса.Выбрать();
	МассивЗначений = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивЗначений.Добавить(Выборка[ИмяПоля]);	
	КонецЦикла;
	
	Возврат МассивЗначений;
	
КонецФункции

//Если версия ЭСФ = 1 Тогда 
//Заполняет, в строке ПоставщикиСтрока, табличной части Поставщики, значения реквизитов:
//ДокументПодтверждающийПоставкуНомер и ДокументПодтверждающийПоставкуДата.
//Если версия ЭСФ = 2 Тогда
//Заполняет ДокументПодтверждающийПоставкуНомер и ДокументПодтверждающийПоставкуДата
//в зависимости от наличия и заполненности полей НомерДокументаГЗ и ДатаДокументаГЗ в документе-основании счета фактуры
//
Процедура ЗаполнитьРеквизитыДокументаПодтверждающегоПоставку(Знач ВыборкаРеквизиты, Знач ТаблицаДанныхОсновныхСчетовФактур, ПоставщикиСтрока, ВерсияЭСФ = 1, ОбъектЭСФ = Неопределено, Знач ЕстьТоварыВСНеСНТ = Ложь)
	
	Если ВерсияЭСФ = 1 Тогда
		// Установить пустые значения реквизитов, в качестве значений по умолчанию.
		ПоставщикиСтрока.ДокументПодтверждающийПоставкуНомер = "";
		ПоставщикиСтрока.ДокументПодтверждающийПоставкуДата = '0001-01-01';
		
		// Заполнить реквизиты документа подтверждающего поставку по данным счета-фактуры, на основании которого создается ЭСФ.
		Если ВыборкаРеквизиты.Вид = Перечисления.ВидыЭСФ.Дополнительный Тогда
			
			Если ЗначениеЗаполнено(ВыборкаРеквизиты.ОсновнойСчетФактура) Тогда
				
				// Номер и дата документа подтверждающего поставку в дополнительном ЭСФ
				// заполняются также как в основном ЭСФ, так как:
				// - Если номер и дата документа подтверждающего поставку будут отличаться,
				//   то дополнительный ЭСФ не будет принят ИС ЭСФ.
				// - Название реквизитов "Номер и дата документа подтверждающего поставку"
				//   может предполагать, что в дополнительном ЭСФ указывается номер и дата основного.
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ЭСФПоставщики.ДокументПодтверждающийПоставкуНомер,
				|	ЭСФПоставщики.ДокументПодтверждающийПоставкуДата
				|ИЗ
				|	Документ.ЭСФ.Поставщики КАК ЭСФПоставщики
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АктуальныеЭСФ КАК АктуальныеЭСФ
				|		ПО ЭСФПоставщики.Ссылка = АктуальныеЭСФ.ЭСФ
				|			И (ЭСФПоставщики.НомерСтроки = 1)
				|ГДЕ
				|	АктуальныеЭСФ.СчетФактура = &ОсновнойСчетФактура";
				
				Запрос.УстановитьПараметр("ОсновнойСчетФактура", ВыборкаРеквизиты.ОсновнойСчетФактура);
				ВыборкаОсновнойСчетФактура = Запрос.Выполнить().Выбрать();
				
				Если ВыборкаОсновнойСчетФактура.Следующий() Тогда
					
					ЗаполнитьЗначенияСвойств(ПоставщикиСтрока, ВыборкаОсновнойСчетФактура);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			
			Если ЗначениеЗаполнено(ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставку)
				И ЗначениеЗаполнено(ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставкуДата) Тогда
				
				ПоставщикиСтрока.ДокументПодтверждающийПоставкуНомер = ЭСФСерверПереопределяемый.ПолучитьНомерНаПечать(ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставку);
				ПоставщикиСтрока.ДокументПодтверждающийПоставкуДата = ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставкуДата;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВерсияЭСФ = 2 Тогда
		
		СтруктураНомерИДатаПоставки = ЭСФСерверПереопределяемый.ПолучитьНомерДатуДокументаПоставки(ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставку, ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставкуДата);
		ОбъектЭСФ.ДокументПодтверждающийПоставкуНомер = СтруктураНомерИДатаПоставки.ДокументПодтверждающийПоставкуНомер;
		ОбъектЭСФ.ДокументПодтверждающийПоставкуДата = СтруктураНомерИДатаПоставки.ДокументПодтверждающийПоставкуДата;

	КонецЕсли;	
		
КонецПроцедуры

// Очищает раздел H в документе ЭСФ, если получатель не является госучреждением.
//
// Параметры:
//  ВыборкаРеквизиты - ВыборкаИзРезультатаЗапроса - Смотрите НовыеРезультатыЗапросовПоРеквизитам().
//  ОбъектЭСФ - ДокументОбъект.ЭСФ - ЭСФ, заполняемый на основании выборки.
//
Процедура ОчиститьРеквизитыГосучреждения(Знач ВыборкаРеквизиты, ОбъектЭСФ)
	
	Если НЕ ВыборкаРеквизиты.Получатель_ГосударственноеУчреждение Тогда
		ОбъектЭСФ.ГосучреждениеИИК = "";
		ОбъектЭСФ.ГосучреждениеКодТоваров = "";
		ОбъектЭСФ.ГосучреждениеНазначениеПлатежа = "";
		ОбъектЭСФ.ГосучреждениеБИК = "";
	КонецЕсли;
	
КонецПроцедуры

// Удаляет символы пробел в начале текста, табуляция, двоеточие, перевод строки.
// Показывает сообщение пользователю, если удалены какие-нибудь символы.
//
// Параметры:
//  ОбъектЭСФ - ДокументОбъект.ЭСФ - ЭСФ, в котором может быть изменен реквизит ГосучреждениеНазначениеПлатежа.
//
Процедура УдалитьЗапрещенныеСимволыИзНазначенияПлатежа(ОбъектЭСФ) Экспорт
	      
	КорректноеНазначениеПлатежа = ОбъектЭСФ.ГосучреждениеНазначениеПлатежа;
	
	КорректноеНазначениеПлатежа = СокрЛП(КорректноеНазначениеПлатежа);		
	КорректноеНазначениеПлатежа = СтрЗаменить(КорректноеНазначениеПлатежа, Символы.Таб, " ");
	КорректноеНазначениеПлатежа = СтрЗаменить(КорректноеНазначениеПлатежа, Символы.ПС, " ");
	КорректноеНазначениеПлатежа = СтрЗаменить(КорректноеНазначениеПлатежа, Символы.НПП, " ");
	КорректноеНазначениеПлатежа = СтрЗаменить(КорректноеНазначениеПлатежа, "¶", " ");
	КорректноеНазначениеПлатежа = СтрЗаменить(КорректноеНазначениеПлатежа, ":", " ");
	
	Если КорректноеНазначениеПлатежа <> ОбъектЭСФ.ГосучреждениеНазначениеПлатежа Тогда
		Сообщить(НСтр("ru = 'Из реквизита госучреждения ""Назначение платежа"" удалены запрещенные символы, к которым относятся: двоеточие, табуляция, перевод строки, пробелы в начале и в конце текста.'"));
	КонецЕсли;
	
	ОбъектЭСФ.ГосучреждениеНазначениеПлатежа = КорректноеНазначениеПлатежа;
	
КонецПроцедуры

// Заполняет, в документе ЭСФ, реквизиты СвязанныйЭСФНомер и СвязанныйЭСФДата, СвязанныйЭСФРегистрационныйНомер.
//
Процедура ЗаполнитьДанныеСвязанногоЭСФ(Знач ВыборкаРеквизиты, Знач ТаблицаДанныхОсновныхСчетовФактур, ЭСФ, ЕстьТоварыВСНеСНТ = Ложь)
	
 	// Установить пустые значения реквизитов, в качестве значений по умолчанию.	
	ЭСФ.СвязанныйЭСФДата = '0001-01-01';
	ЭСФ.СвязанныйЭСФНомер = "";
	ЭСФ.СвязанныйЭСФРегистрационныйНомер = "";
	
	Если ВыборкаРеквизиты.Вид = Перечисления.ВидыЭСФ.Дополнительный 
	 ИЛИ ВыборкаРеквизиты.Вид = Перечисления.ВидыЭСФ.Исправленный Тогда
		
		// Получить данные основного счета-фактуры и связанного с ним документа ЭСФ.
		ПараметрыОтбора = Новый Структура("ОсновнойСчетФактура", ВыборкаРеквизиты.ОсновнойСчетФактура);
		МассивНайденныхСтрок = ТаблицаДанныхОсновныхСчетовФактур.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивНайденныхСтрок.Количество() <> 0 Тогда
			
			ДанныеОсновного = МассивНайденныхСтрок[0];
			
			Если ЗначениеЗаполнено(ДанныеОсновного.ОсновнойЭСФДата) 
			   И ЗначениеЗаполнено(ДанныеОсновного.ОсновнойЭСФНомер)
			   И ЗначениеЗаполнено(ДанныеОсновного.ОсновнойЭСФРегистрационныйНомер) Тогда
			   
				// Дата и номер ЭСФ, связанного с основным счетом-фактурой, 
				// могут отличаться от от даты и номера связанного счета-фактуры,
				// поэтому заполнить дату и номер связанного ЭСФ по данным ЭСФ.
				ЭСФ.СвязанныйЭСФДата = ДанныеОсновного.ОсновнойЭСФДата;
				ЭСФ.СвязанныйЭСФНомер = ДанныеОсновного.ОсновнойЭСФНомер;
				ЭСФ.СвязанныйЭСФРегистрационныйНомер = ДанныеОсновного.ОсновнойЭСФРегистрационныйНомер;
				
			ИначеЕсли ЗначениеЗаполнено(ДанныеОсновного.ОсновнойСчетФактура) 
			        И ЗначениеЗаполнено(ДанныеОсновного.ОсновнойСчетФактураДата) Тогда
					
				// Если ЭСФ, связанного с основным счетом-фактурой - нет,
				// то заполнить номер и дату связанного ЭСФ на основании счета-фактуры.
				ЭСФ.СвязанныйЭСФДата = ДанныеОсновного.ОсновнойСчетФактураДата;
				ЭСФ.СвязанныйЭСФНомер = ЭСФСерверПереопределяемый.ПолучитьНомерНаПечать(ДанныеОсновного.ОсновнойСчетФактура);					
				ЭСФ.СвязанныйЭСФРегистрационныйНомер = "";					
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеОсновного.ОсновнойЭСФДокументПодтверждающийПоставкуНомер) И ДанныеОсновного.ОсновнойЭСФДокументПодтверждающийПоставкуНомер = "NON SNT" ТОгда
				ЕстьТоварыВСНеСНТ = Истина;	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДатуОборотаЭСФ(Знач ВыборкаРеквизиты, Знач ТаблицаДанныхОсновныхСчетовФактур, ЭСФ)
	
	ЭСФ.ДатаОборота = ВыборкаРеквизиты.ДатаОборота;
	
КонецПроцедуры

// Добавляет и заполняет нового получателя или изменяет существующего в табличной части "Получатели", документа "ЭСФ".
//
// Параметры:
//  ВыборкаРеквизитыПолучателя - ВыборкаИзРезультатаЗапроса - Выборка, по которой будет заполняться получатель.
//  ЭСФ - ДокументОбъект.ЭСФ - Документ ЭСФ, в табличную часть "Получатели" которого будет добавлен новый получатель.
//  ПолучателиСтрока - существующая строка таб. части "Получатели" документа ЭСФ.
//
// Возвращаемое значение:
//  ДокументТабличнаяЧастьСтрока.ЭСФ.Получатели - Добавленная (измененная) строка.
//
Функция НоваяСтрокаТабличнойЧастиПолучатели(Знач ВыборкаРеквизитыПолучателя, ЭСФ, ПолучателиСтрока = Неопределено, ВерсияЭСФ = 1)
	
	Если ПолучателиСтрока = Неопределено Тогда
		ПолучателиСтрока = ЭСФ.Получатели.Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойствПоПрефиксу(ПолучателиСтрока, ВыборкаРеквизитыПолучателя, "Получатель_");
	
	// Флаг Нерезидент устанавливается в методе: ЗаполнитьПроверитьИсходящийЭСФПоТоварамИзПеречня().
		
	// Поля получателя СерияНДС и НомерНДС удалены из веб-приложения ИС ЭСФ, но остались в API ИС ЭСФ.
	// Поэтому, они не заполняются при создании ЭСФ и скрыты по умолчанию из формы.
	// Пользователь может сделать эти поля видимыми и заполнить их вручную, после чего они отправятся в ИС ЭСФ.
	ПолучателиСтрока.СерияСвидетельстваПоНДС = "";
	ПолучателиСтрока.НомерСвидетельстваПоНДС = "";
	
	//Заполним БИН структурной единицы покупателя
	ЭСФСерверПереопределяемый.ЗаполнитьБИНФилиалаПокупателя(ПолучателиСтрока, ВыборкаРеквизитыПолучателя);
	
	// Если у получателя установлен признак РозничныйПокупатель
	ЭСФСерверПереопределяемый.ПолучательРозничныйПокупатель(ЭСФ, ПолучателиСтрока, ВерсияЭСФ);
	
КонецФункции

// Заполняет в объекте ЭСФ таблицу ТоварыПоПолучателям. 
//
// Параметры:
//  ВыборкаУчастникиСД - ВыборкаИзРезультатаЗапроса - Данные участников СД,
//   см. функцию НоваяВыборкаУчастникиСовместнойДеятельности().
//  ОбъектЭСФ - ДокументОбъект.ЭСФ - ЭСФ, в котором необходимо заполнить таблицу ТоварыПоПолучателям.
//   В объекте ЭСФ должна быть заполнена таблица Товары.
//   В объекте ЭСФ должен быть заполнен реквизит СчетФактура.
//
Процедура ЗаполнитьТаблицуТоварыПоПолучателям(ВыборкаУчастникиСД, ОбъектЭСФ)
	
	ТаблицаУчастниковСД = ТаблицаУчастниковСД(ВыборкаУчастникиСД, ОбъектЭСФ);	
	
	Если ТаблицаУчастниковСД <> Неопределено Тогда
		ЗаполнитьТаблицуТоварыПоПолучателямПоТаблицеУчастниковСД(ТаблицаУчастниковСД, ОбъектЭСФ);
	Иначе
		ОбъектЭСФ.ТоварыПоПолучателям.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаУчастниковСД(ВыборкаУчастникиСД, ОбъектЭСФ)
	
	ТаблицаУчастниковСД = Неопределено;
	
	ПоказатьОшибку = Ложь;
	ВыборкаУчастникиСД.Сбросить();
	Если ВыборкаУчастникиСД.НайтиСледующий(ОбъектЭСФ.СчетФактура, "СчетФактура") Тогда
		
		ВыборкаУчастникиСДДетальныеЗаписи = ВыборкаУчастникиСД.Выбрать();
		
		Если ВыборкаУчастникиСДДетальныеЗаписи.Количество() = 0 Тогда
			ПоказатьОшибку = Истина;
		КонецЕсли;
		
	Иначе
		
		ПоказатьОшибку = Истина;
		
	КонецЕсли;
	
	Если ПоказатьОшибку Тогда
		
		ТекстИсключения = НСтр("ru = 'Невозможно создать электронный счет-фактуру для ""[СчетФактура]"", так как в счете-фактуре не заполнена таблица ""Участники совместной деятельности"".'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "[СчетФактура]", ОбъектЭСФ.СчетФактура);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	ТаблицаУчастниковСД = Новый ТаблицаЗначений;
	ТаблицаУчастниковСД.Колонки.Добавить("ПолучательИдентификатор");
	ТаблицаУчастниковСД.Колонки.Добавить("ДоляУчастия");
	
	Пока ВыборкаУчастникиСДДетальныеЗаписи.Следующий() Цикл
		СтрокаТаблицаУчастниковСД = ТаблицаУчастниковСД.Добавить();
		СтрокаТаблицаУчастниковСД.ПолучательИдентификатор = ВыборкаУчастникиСДДетальныеЗаписи.Получатель_ПолучательИдентификатор;
		СтрокаТаблицаУчастниковСД.ДоляУчастия = ВыборкаУчастникиСДДетальныеЗаписи.Получатель_ДоляУчастия;
	КонецЦикла;
	
	Возврат ТаблицаУчастниковСД;	
	
КонецФункции

// Заполняет в объекте ЭСФ таблицу ТоварыПоПолучателям.
//
// Параметры:
//  ТаблицаУчастниковСД - ТаблицаЗначений, ДанныеФормыКоллекция -
//   Даныне по получателям ЭСФ, которые являются участниками СД. Должна содержать:
//    ПолучательИдентификатор - Строка - БИН/ИИН получателя участника СД.
//    ДоляУчастия - Число - Доля участия получателя, участника СД. 
//  ОбъектЭСФ - ДокументОбъект.ЭСФ, ДанныеФормыСтруктура - Документ ЭСФ. 
//
Процедура ЗаполнитьТаблицуТоварыПоПолучателямПоТаблицеУчастниковСД(ТаблицаУчастниковСД, ОбъектЭСФ) Экспорт
	
	ОбъектЭСФ.ТоварыПоПолучателям.Очистить();
	СуммаДолейУчастия = ТаблицаУчастниковСД.Итог("ДоляУчастия");
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить таблицу "ТоварыПоПолучателям".
	Для Каждого СтрокаТовары Из ОбъектЭСФ.Товары Цикл
		
		Итого = Новый Структура;
		Итого.Вставить("Количество", 0);
		Итого.Вставить("СуммаБезНалогов", 0);
		Итого.Вставить("СуммаАкциза", 0);
		Итого.Вставить("ОборотПоРеализации", 0);
		Итого.Вставить("СуммаНДС", 0);
		Итого.Вставить("Сумма", 0);
		
		//////////////////////////////////////////////////////////////////////////////
		// Создать и заполнить строки в таблице ТоварыПоПолучателям
		// по всем участникам СД для текущей строки товаров.
		Для Каждого СтрокаТаблицаУчастниковСД Из ТаблицаУчастниковСД Цикл
			
			КоэффициентУчастникаСД = СтрокаТаблицаУчастниковСД.ДоляУчастия / ?(СуммаДолейУчастия = 0, 1, СуммаДолейУчастия);
			
			СтрокаТоварыПоПолучателям = ОбъектЭСФ.ТоварыПоПолучателям.Добавить();
			
			СтрокаТоварыПоПолучателям.Идентификатор = СтрокаТаблицаУчастниковСД.ПолучательИдентификатор;
			
			СтрокаТоварыПоПолучателям.НомерТовара = СтрокаТовары.НомерСтроки;
			
			СтрокаТоварыПоПолучателям.Количество = СтрокаТовары.Количество * КоэффициентУчастникаСД;
			Итого.Количество = Итого.Количество + СтрокаТоварыПоПолучателям.Количество;
			
			СтрокаТоварыПоПолучателям.СуммаБезНалогов = СтрокаТовары.СуммаБезНалогов * КоэффициентУчастникаСД;
			Итого.СуммаБезНалогов = Итого.СуммаБезНалогов + СтрокаТоварыПоПолучателям.СуммаБезНалогов;
			
			СтрокаТоварыПоПолучателям.СуммаАкциза = СтрокаТовары.СуммаАкциза * КоэффициентУчастникаСД;
			Итого.СуммаАкциза = Итого.СуммаАкциза + СтрокаТоварыПоПолучателям.СуммаАкциза;
			
			СтрокаТоварыПоПолучателям.ОборотПоРеализации = СтрокаТовары.ОборотПоРеализации * КоэффициентУчастникаСД;
			Итого.ОборотПоРеализации = Итого.ОборотПоРеализации + СтрокаТоварыПоПолучателям.ОборотПоРеализации;
			
			СтрокаТоварыПоПолучателям.СуммаНДС = СтрокаТовары.СуммаНДС * КоэффициентУчастникаСД;
			Итого.СуммаНДС = Итого.СуммаНДС + СтрокаТоварыПоПолучателям.СуммаНДС;
			
			СтрокаТоварыПоПолучателям.Сумма = СтрокаТовары.Сумма * КоэффициентУчастникаСД;	
			Итого.Сумма = Итого.Сумма + СтрокаТоварыПоПолучателям.Сумма;
			
			СтрокаТоварыПоПолучателям.ДополнительныеДанные = СтрокаТовары.ДополнительныеДанные;
			
		КонецЦикла;
		
		ПоследняяСтрокаТоварыПоПолучателям = СтрокаТоварыПоПолучателям;
		
		//////////////////////////////////////////////////////////////////////////////	
		// Устранить погрешности округления, распределив их на последнего участника СД.
		Для Каждого ЭлементИтого Из Итого Цикл
			ИмяКолонки = ЭлементИтого.Ключ;
			Разница = СтрокаТовары[ИмяКолонки] - ЭлементИтого.Значение;
			ПоследняяСтрокаТоварыПоПолучателям[ИмяКолонки] = ПоследняяСтрокаТоварыПоПолучателям[ИмяКолонки] + Разница;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет в объекте ЭСФ таблицу ТоварыПоПоставщикам.
//
// Параметры:
//  ТаблицаУчастниковСД - ТаблицаЗначений, ДанныеФормыКоллекция -
//   Данные по поставщикам ЭСФ, которые являются участниками СД. Должна содержать:
//    ПоставщикИдентификатор - Строка - БИН/ИИН поставщика участника СД.
//    ДоляУчастия - Число - Доля участия поставщика, участника СД. 
//  ОбъектЭСФ - ДокументОбъект.ЭСФ, ДанныеФормыСтруктура - Документ ЭСФ. 
//
Процедура ЗаполнитьТаблицуТоварыПоПоставщикамПоТаблицеУчастниковСД(ТаблицаУчастниковСД, ОбъектЭСФ) Экспорт
	
	ОбъектЭСФ.ТоварыПоПоставщикам.Очистить();
	СуммаДолейУчастия = ТаблицаУчастниковСД.Итог("ДоляУчастия");
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить таблицу "ТоварыПоПолучателям".
	Для Каждого СтрокаТовары Из ОбъектЭСФ.Товары Цикл
		
		Итого = Новый Структура;
		Итого.Вставить("Количество", 0);
		Итого.Вставить("СуммаБезНалогов", 0);
		Итого.Вставить("СуммаАкциза", 0);
		Итого.Вставить("ОборотПоРеализации", 0);
		Итого.Вставить("СуммаНДС", 0);
		Итого.Вставить("Сумма", 0);
		
		//////////////////////////////////////////////////////////////////////////////
		// Создать и заполнить строки в таблице ТоварыПоПолучателям
		// по всем участникам СД для текущей строки товаров.
		Для Каждого СтрокаТаблицаУчастниковСД Из ТаблицаУчастниковСД Цикл
			
			КоэффициентУчастникаСД = СтрокаТаблицаУчастниковСД.ДоляУчастия / ?(СуммаДолейУчастия = 0, 1, СуммаДолейУчастия);
			
			СтрокаТоварыПоПоставщикам = ОбъектЭСФ.ТоварыПоПоставщикам.Добавить();
			
			СтрокаТоварыПоПоставщикам.Идентификатор = СтрокаТаблицаУчастниковСД.ПоставщикИдентификатор;
			
			СтрокаТоварыПоПоставщикам.НомерТовара = СтрокаТовары.НомерСтроки;
			
			СтрокаТоварыПоПоставщикам.Количество = СтрокаТовары.Количество * КоэффициентУчастникаСД;
			Итого.Количество = Итого.Количество + СтрокаТоварыПоПоставщикам.Количество;
			
			СтрокаТоварыПоПоставщикам.СуммаБезНалогов = СтрокаТовары.СуммаБезНалогов * КоэффициентУчастникаСД;
			Итого.СуммаБезНалогов = Итого.СуммаБезНалогов + СтрокаТоварыПоПоставщикам.СуммаБезНалогов;
			
			СтрокаТоварыПоПоставщикам.СуммаАкциза = СтрокаТовары.СуммаАкциза * КоэффициентУчастникаСД;
			Итого.СуммаАкциза = Итого.СуммаАкциза + СтрокаТоварыПоПоставщикам.СуммаАкциза;
			
			СтрокаТоварыПоПоставщикам.ОборотПоРеализации = СтрокаТовары.ОборотПоРеализации * КоэффициентУчастникаСД;
			Итого.ОборотПоРеализации = Итого.ОборотПоРеализации + СтрокаТоварыПоПоставщикам.ОборотПоРеализации;
			
			СтрокаТоварыПоПоставщикам.СуммаНДС = СтрокаТовары.СуммаНДС * КоэффициентУчастникаСД;
			Итого.СуммаНДС = Итого.СуммаНДС + СтрокаТоварыПоПоставщикам.СуммаНДС;
			
			СтрокаТоварыПоПоставщикам.Сумма = СтрокаТовары.Сумма * КоэффициентУчастникаСД;	
			Итого.Сумма = Итого.Сумма + СтрокаТоварыПоПоставщикам.Сумма;
			
			СтрокаТоварыПоПоставщикам.ДополнительныеДанные = СтрокаТовары.ДополнительныеДанные;
			
		КонецЦикла;
		
		ПоследняяСтрокаТоварыПоПоставщикам = СтрокаТоварыПоПоставщикам;
		
		//////////////////////////////////////////////////////////////////////////////	
		// Устранить погрешности округления, распределив их на последнего участника СД.
		Для Каждого ЭлементИтого Из Итого Цикл
			ИмяКолонки = ЭлементИтого.Ключ;
			Разница = СтрокаТовары[ИмяКолонки] - ЭлементИтого.Значение;
			ПоследняяСтрокаТоварыПоПоставщикам[ИмяКолонки] = ПоследняяСтрокаТоварыПоПоставщикам[ИмяКолонки] + Разница;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создание счетов-фактур

// См. ЭСФСервер.ЗаполнитьСчетФактуруПолученный()
Процедура ЗаполнитьСчетФактуруПолученный(Знач СсылкаЭСФ, ОбъектСчетФактура) Экспорт
	
	ЭСФСервер.ОчиститьОбъект(ОбъектСчетФактура, , "ДокументыОснования");
	
	//////////////////////////////////////////////////////////////////////////////
	// Получить данные для заполнения счета-фактуры
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФ.Ссылка КАК ЭСФ,
	|	ЭСФ.Валюта КАК ВалютаДокумента,
	|	ЭСФ.Дата КАК Дата,
	|	ЭСФ.Дата КАК ДатаВходящегоДокумента,
	|	ЭСФ.ДатаОборота КАК ДатаСовершенияОборотаПоРеализации,
	|	ЭСФ.ДоговорПоставки.ДоговорСовместнойДеятельности КАК ДоговорКонтрагентаЭтоДоговорСД,
	|	%ЭСФДоговорПоставкиУчастникСРП КАК ДоговорКонтрагентаЭтоУчастникСРП,
	|	ЭСФПоставщики.Поставщик КАК Контрагент,
	|	ЭСФ.КурсВалюты КАК КурсВзаиморасчетов,
	|	ЭСФ.Номер КАК НомерВходящегоДокумента,
	|	ЭСФ.Организация КАК Организация,
	|	ЭСФ.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ЭСФ.СвязанныйЭСФ.СчетФактура КАК ОсновнойСчетФактура,
	|	ЭСФПоставщики.Поставщик КАК Поставщик,
	|	ЭСФПоставщики.УчастникСовместнойДеятельности КАК ПоставщикУчастникСД,
	|	ЭСФПолучатели.Получатель КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Обычный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Обычный)
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Дополнительный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный)
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Исправленный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Исправленный)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.ПустаяСсылка)
	|	КОНЕЦ КАК ВидСчетаФактуры ,
	|	ДоговорыКонтрагентов.ТипЦен,
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента
	|	ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ.Поставщики КАК ЭСФПоставщики
	|		ПО ЭСФ.Ссылка = ЭСФПоставщики.Ссылка
	|			И (ЭСФПоставщики.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ.Получатели КАК ЭСФПолучатели
	|		ПО (ЭСФПолучатели.НомерСтроки = 1)
	|			И ЭСФ.Ссылка = ЭСФПолучатели.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ЭСФ.ДоговорПоставки = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ЭСФ.Ссылка = &СсылкаЭСФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФТовары.Ссылка КАК ЭСФ,
	|	ВЫБОР
	|		КОГДА ЭСФТовары.Товар ССЫЛКА Справочник.Номенклатура
	|				И ЭСФТовары.Товар.Услуга
	|			ТОГДА ""Услуги""
	|		КОГДА ЭСФТовары.Товар ССЫЛКА Справочник.ОсновныеСредства
	|			ТОГДА ""ОС""
	|		КОГДА ЭСФТовары.Товар ССЫЛКА Справочник.НематериальныеАктивы
	|			ТОГДА ""НМА""
	|		ИНАЧЕ ""Товары""
	|	КОНЕЦ КАК ИмяТаблицы,
	|	ЭСФТовары.Товар КАК Товар,
	|	ЭСФТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	%ЭСФТоварыКоэффициент КАК Коэффициент,
	//БК 2
	//|	ВЫБОР
	//|		КОГДА ЭСФТовары.Количество = 0 И НЕ ЭСФТовары.Ссылка.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Дополнительный)
	//|			ТОГДА 1
	//|		ИНАЧЕ 
	//|       	ВЫБОР 
	//|           	КОГДА (ЭСФТовары.КоэффициентПересчета <> 1 ИЛИ ЭСФТовары.КоэффициентПересчета <> 0)
	//|					И ЭСФТовары.Количество <> 0
	//|					ТОГДА ЭСФТовары.Количество * ЭСФТовары.КоэффициентПересчета
	//|               ИНАЧЕ  ЭСФТовары.Количество
	//|           КОНЕЦ
	//|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ЭСФТовары.Количество = 0 И НЕ ЭСФТовары.Ссылка.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Дополнительный)
	|			ТОГДА 1
	|		ИНАЧЕ ЭСФТовары.Количество
	|	КОНЕЦ КАК Количество,
	//БК 2
	|	ЭСФТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЭСФТовары.СуммаНДС,
	|	ЭСФТовары.Цена КАК Цена,
	|	ЭСФТовары.СуммаБезНалогов + ЭСФТовары.СуммаАкциза КАК Сумма,
	|	ЭСФТовары.ОборотПоРеализации КАК ОборотПоРеализации,
	|	ЭСФТовары.НомерГТД КАК НомерГТД
	|ИЗ
	|	Документ.ЭСФ.Товары КАК ЭСФТовары
	|ГДЕ
	|	ЭСФТовары.Ссылка = &СсылкаЭСФ";	
	
	
	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%ЭСФДоговорПоставкиУчастникСРП", "");
	СоответсвиеИменРеквизитов.Вставить("%ЭСФТоварыКоэффициент", "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеИменРеквизитов);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("СсылкаЭСФ", СсылкаЭСФ);
	
	Если НЕ ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЭСФ.СтруктурноеПодразделение КАК СтруктурноеПодразделение,", "");
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();	
	
	ВыборкаРеквизиты = МассивРезультатов[0].Выбрать();
	ВыборкаРеквизиты.Следующий();
	
	ВыборкаТовары = МассивРезультатов[1].Выбрать();
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить реквизиты счета-фактуры
	
	ЗаполнитьЗначенияСвойств(ОбъектСчетФактура, ВыборкаРеквизиты);
	
	ОбъектСчетФактура.Поставщик  = ЭСФСерверПереопределяемый.ПолучитьПлательщикаНДСВСчетеФактуре(ВыборкаРеквизиты.Контрагент);
	
	Если ТипЗнч(ВыборкаРеквизиты.Покупатель) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		ОбъектСчетФактура.Покупатель = ВыборкаРеквизиты.Покупатель.Владелец;
	КонецЕсли;
	
	ОбъектСчетФактура.КратностьВзаиморасчетов = 1;
	ОбъектСчетФактура.ПодтвержденДокументамиОтгрузки = Ложь;
	ОбъектСчетФактура.СуммаВключаетНДС = Ложь;
	ОбъектСчетФактура.УчитыватьНДС = Истина;
	
	ТекущийПользователь = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();
	ОбъектСчетФактура.Автор = ТекущийПользователь;
	ОбъектСчетФактура.Ответственный = ТекущийПользователь;
	
	ОбъектСчетФактура.СпособПолучения = Перечисления.СпособыОбменаДокументами.Электронно;
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить табличные части счета-фактуры
	
	Пока ВыборкаТовары.Следующий() Цикл
		
		СтрокаТаблицы = ОбъектСчетФактура[ВыборкаТовары.ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаТовары);
		
		Если ВыборкаТовары.ИмяТаблицы = "Товары" ИЛИ ВыборкаТовары.ИмяТаблицы = "Услуги" Тогда
			
			СтрокаТаблицы.Номенклатура = ВыборкаТовары.Товар;
			
			Если ОбъектСчетФактура.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный И ВыборкаТовары.Количество = 0 Тогда
				СтрокаТаблицы.Цена = ВыборкаТовары.Цена;
			Иначе
				СтрокаТаблицы.Цена = ВыборкаТовары.Сумма / ?(ВыборкаТовары.Количество <> 0, ВыборкаТовары.Количество, 1);
			КонецЕсли;
			
			Если ВыборкаТовары.ИмяТаблицы = "Товары" Тогда
				СтрокаТаблицы.Коэффициент = 1;
			КонецЕсли;
			
		ИначеЕсли ВыборкаТовары.ИмяТаблицы = "ОС" ИЛИ ВыборкаТовары.ИмяТаблицы = "НМА" Тогда
			
			Если ВыборкаТовары.ИмяТаблицы = "ОС" Тогда
				СтрокаТаблицы.ОсновноеСредство = ВыборкаТовары.Товар;
			Иначе
				СтрокаТаблицы.НематериальныйАктив = ВыборкаТовары.Товар;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить участников СД в счете-фактуре
	Если ВыборкаРеквизиты.ПоставщикУчастникСД Тогда
		
		Если ЗначениеЗаполнено(ВыборкаРеквизиты.ДоговорКонтрагента) Тогда
			
			Если ВыборкаРеквизиты.ДоговорКонтрагентаЭтоДоговорСД 
				ИЛИ ВыборкаРеквизиты.ДоговорКонтрагентаЭтоУчастникСРП Тогда
				
				УчастникиСД = ТаблицыПоУчастникамСД(ВыборкаРеквизиты.ДоговорКонтрагента, СсылкаЭСФ);
				ОбъединеннаяТаблицаУчастниковСД = Неопределено;
				
				Если СовпадаетСоставУчастниковСД(УчастникиСД.УчастникиДоговора, УчастникиСД.УчастникиЭСФ, ОбъединеннаяТаблицаУчастниковСД) Тогда
					
					Если СовпадаютДолиУчастниковСД(ОбъединеннаяТаблицаУчастниковСД) Тогда
						
						ЭСФСерверПереопределяемый.ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(
							ВыборкаРеквизиты.ДоговорКонтрагента, 
							ОбъектСчетФактура.УчастникиСовместнойДеятельности);
						
					Иначе
						
						Сообщить(НСтр(
						"ru = 'В счете-фактуре не удалось заполнить таблицу ""Участники совместной деятельности"",
						|так как не совпадают доли участия в разделе ""B. Поставщики"" 
						|и в договоре поставки, указанном в разделе ""E. Условия поставки"".'"));
						
					КонецЕсли;
					
				Иначе
					
					Сообщить(НСтр(
					"ru = 'В счете-фактуре не удалось заполнить таблицу ""Участники совместной деятельности"",
					|так как не совпадает состав участников совместной деятельности в разделе ""B. Поставщики"" 
					|и в договоре поставки, указанном в разделе ""E. Условия поставки"".'"));
					
				КонецЕсли;
				
			Иначе
				
				Сообщить(НСтр(
				"ru = 'В счете-фактуре не удалось заполнить таблицу ""Участники совместной деятельности"",
				|так как договор поставки, указанный в разделе ""E. Условия поставки"" не является договором совместной деятельности.'"));
				
			КонецЕсли;
			
		Иначе
			
			Сообщить(НСтр(
			"ru = 'В счете-фактуре не удалось заполнить таблицу ""Участники совместной деятельности"",
			|так как в электронном счете-фактуре не заполнено поле ""Договор поставки"" в разделе ""E. Условия поставки"".'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицыПоУчастникамСД(ДоговорКонтрагента, ЭСФ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФПоставщики.Поставщик КАК УчастникСД,
	|	ЭСФПоставщики.ДоляУчастия КАК ДоляУчастия
	|ИЗ
	|	Документ.ЭСФ.Поставщики КАК ЭСФПоставщики
	|ГДЕ
	|	ЭСФПоставщики.Ссылка = &ЭСФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентовУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности КАК УчастникСД,
	|	ДоговорыКонтрагентовУчастникиСовместнойДеятельности.ДоляУчастия КАК ДоляУчастия
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов.УчастникиСовместнойДеятельности КАК ДоговорыКонтрагентовУчастникиСовместнойДеятельности
	|ГДЕ
	|	ДоговорыКонтрагентовУчастникиСовместнойДеятельности.Ссылка = &ДоговорКонтрагента";
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ЭСФ", ЭСФ);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицыПоУчастникамСД = Новый Структура;
	ТаблицыПоУчастникамСД.Вставить("УчастникиЭСФ", МассивРезультатов[0].Выгрузить());
	ТаблицыПоУчастникамСД.Вставить("УчастникиДоговора", МассивРезультатов[1].Выгрузить());
	
	Возврат ТаблицыПоУчастникамСД;
	
КонецФункции

Функция СовпадаетСоставУчастниковСД(Знач УчастникиСД_УчастникиДоговора, Знач УчастникиСД_УчастникиЭСФ, ОбъединеннаяТаблицаУчастниковСД)
	
	СовпадаетСоставУчастниковСД = Истина;
	
	ОбъединеннаяТаблицаУчастниковСД = Новый ТаблицаЗначений;	
	ОбъединеннаяТаблицаУчастниковСД.Колонки.Добавить("УчастникСД");
	ОбъединеннаяТаблицаУчастниковСД.Колонки.Добавить("ДоляУчастияДоговор");
	ОбъединеннаяТаблицаУчастниковСД.Колонки.Добавить("ДоляУчастияЭСФ");
	
	Для Каждого СтрокаУчастникЭСФ Из УчастникиСД_УчастникиЭСФ Цикл
		
		СтрокаУчастникДоговора = УчастникиСД_УчастникиДоговора.Найти(СтрокаУчастникЭСФ.УчастникСД, "УчастникСД");
		
		Если СтрокаУчастникДоговора <> Неопределено Тогда
			
			СтрокаОбъединеннаяТаблицаУчастниковСД = ОбъединеннаяТаблицаУчастниковСД.Добавить();
			СтрокаОбъединеннаяТаблицаУчастниковСД.УчастникСД = СтрокаУчастникЭСФ.УчастникСД;
			СтрокаОбъединеннаяТаблицаУчастниковСД.ДоляУчастияДоговор = СтрокаУчастникДоговора.ДоляУчастия;
            СтрокаОбъединеннаяТаблицаУчастниковСД.ДоляУчастияЭСФ = СтрокаУчастникЭСФ.ДоляУчастия;
			
		Иначе
			
			СовпадаетСоставУчастниковСД = Ложь;
			ОбъединеннаяТаблицаУчастниковСД = Неопределено;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СовпадаетСоставУчастниковСД;
	
КонецФункции

Функция СовпадаютДолиУчастниковСД(Знач ОбъединеннаяТаблицаУчастниковСД)
	
	СовпадаютДолиУчастниковСД = Истина;
	
	ИтогДолиУчастияЭСФ = ОбъединеннаяТаблицаУчастниковСД.Итог("ДоляУчастияЭСФ");
	ИтогДолиУчастияДоговора = ОбъединеннаяТаблицаУчастниковСД.Итог("ДоляУчастияДоговор");
	
	Для Каждого СтрокаТаблицы Из ОбъединеннаяТаблицаУчастниковСД Цикл
		
		// Привести доли в текущей строке к единому процентному измерению для сравнения.
		ПроцентыСтрокиЭСФ = СтрокаТаблицы.ДоляУчастияЭСФ / ?(ИтогДолиУчастияЭСФ = 0, 1, ИтогДолиУчастияЭСФ);
		ПроцентыСтрокиДоговора = СтрокаТаблицы.ДоляУчастияДоговор / ?(ИтогДолиУчастияДоговора = 0, 1, ИтогДолиУчастияДоговора);
		
		// Допускается расхождение долей в договоре и ЭСФ на один процент, чтобы устранить проблемы округления.
		Если ПроцентыСтрокиЭСФ <= ПроцентыСтрокиДоговора + 0.01
			И ПроцентыСтрокиЭСФ >= ПроцентыСтрокиДоговора - 0.01 Тогда
			
			// Доли участия совпадают, продолжаем проверку.
			
		Иначе
			
			СовпадаютДолиУчастниковСД = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СовпадаютДолиУчастниковСД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение ссылочных реквизитов ЭСФ


Процедура ЗаполнитьСсылкиНаЕдиницыИзмерения(НаправлениеЭСФ, МассивЭСФ)
	
	ИмяТаблицыКонтрагентов = ЭСФВызовСервераПовтИсп.ИмяТаблицыКонтрагентов(НаправлениеЭСФ);	
	ИмяРеквизитаКонтрагента = ЭСФВызовСервераПовтИсп.ИмяРеквизитаКонтрагента(НаправлениеЭСФ);

	// Создать и заполнить таблицу наименований единиц измерения для поиска ссылок.
	
	МетаданныеРегистраСведений = Метаданные.РегистрыСведений.СоответствияНаименованийИСсылокЕдиницИзмерения;
	
	ТаблицаНаименованийЕдиницИзмерения = Новый ТаблицаЗначений;                             
	ТаблицаНаименованийЕдиницИзмерения.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТипЕдиницаИзмеренияНаименование = МетаданныеРегистраСведений.Измерения.ЕдиницаИзмеренияНаименование.Тип;
	ТаблицаНаименованийЕдиницИзмерения.Колонки.Добавить("ЕдиницаИзмеренияНаименование", ТипЕдиницаИзмеренияНаименование);
	Если МетаданныеРегистраСведений.Измерения.Найти("Товар") <> Неопределено Тогда
		ТипТовар = МетаданныеРегистраСведений.Измерения["Товар"].Тип;
		ТаблицаНаименованийЕдиницИзмерения.Колонки.Добавить("Товар", ТипТовар);
		ЕстьТовар = Истина;
	Иначе
		ЕстьТовар = Ложь;	
	КонецЕсли;	
	
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		
		Если ЭСФ[ИмяТаблицыКонтрагентов].Количество() <> 0
		   И ЗначениеЗаполнено(ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента]) Тогда
		   
		   Для Каждого СтрокаТаблицыТовары Из ЭСФ.Товары Цикл
			    СтрокаТаблицыНаименованийЕдиницИзмерения = ТаблицаНаименованийЕдиницИзмерения.Добавить();
				СтрокаТаблицыНаименованийЕдиницИзмерения.Контрагент = ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента];
				Если ЗначениеЗаполнено(СтрокаТаблицыТовары.ЕдиницаИзмеренияКод) Тогда
					СтрокаТаблицыНаименованийЕдиницИзмерения.ЕдиницаИзмеренияНаименование = СтрокаТаблицыТовары.ЕдиницаИзмеренияКод;
				Иначе
					СтрокаТаблицыНаименованийЕдиницИзмерения.ЕдиницаИзмеренияНаименование = СтрокаТаблицыТовары.ЕдиницаИзмеренияНаименование;
				КонецЕсли;
				
				Если ЕстьТовар Тогда 
					СтрокаТаблицыНаименованийЕдиницИзмерения.Товар = СтрокаТаблицыТовары.Товар;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Найти соответствия наименований и ссылок, заполнить на их основе ссылки на единицы измерения в документах ЭСФ.
	                      
	ТаблицаСоответствий = ПолучитьСохраненныеСоответствияНаименованийИСсылокЕдиницИзмерения(ТаблицаНаименованийЕдиницИзмерения);
	
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		
		Если ЭСФ[ИмяТаблицыКонтрагентов].Количество() <> 0
		   И ЗначениеЗаполнено(ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента]) Тогда
			
			Для Каждого СтрокаТаблицыТовары Из ЭСФ.Товары Цикл
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Контрагент", ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента]);
				
				//По умолчанию ищем по коду. Если код не заполнен (н-р, это старый документ, который отправлялся с наименованиями), то ищем по наименованию
				Если ЗначениеЗаполнено(СтрокаТаблицыТовары.ЕдиницаИзмеренияКод) Тогда
					ПараметрыОтбора.Вставить("ЕдиницаИзмеренияНаименование", СтрокаТаблицыТовары.ЕдиницаИзмеренияКод);
				Иначе	
					ПараметрыОтбора.Вставить("ЕдиницаИзмеренияНаименование", СтрокаТаблицыТовары.ЕдиницаИзмеренияНаименование);
				КонецЕсли;	
				
				Если ЕстьТовар Тогда
					ПараметрыОтбора.Вставить("Товар", СтрокаТаблицыТовары.Товар);
				КонецЕсли;
				
				МассивНайденныхСтрок = ТаблицаСоответствий.НайтиСтроки(ПараметрыОтбора);
				Если МассивНайденныхСтрок.Количество() <> 0 Тогда
					СтрокаТаблицыТовары.ЕдиницаИзмерения = МассивНайденныхСтрок[0].ЕдиницаИзмерения;
					
					//заполним наименование ЕИ
					Если Не ЗначениеЗаполнено(СтрокаТаблицыТовары.ЕдиницаИзмеренияНаименование) Тогда
						СтрокаТаблицыТовары.ЕдиницаИзмеренияНаименование = МассивНайденныхСтрок[0].ЕдиницаИзмеренияНаименованиеИзСправочника;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаТовары(Знач НаправлениеЭСФ, МассивЭСФ)
	
	ИмяТаблицыКонтрагентов = ЭСФВызовСервераПовтИсп.ИмяТаблицыКонтрагентов(НаправлениеЭСФ);	
	ИмяРеквизитаКонтрагента = ЭСФВызовСервераПовтИсп.ИмяРеквизитаКонтрагента(НаправлениеЭСФ);

	// Создать и заполнить таблицу наименований товаров для поиска ссылок.
	
	ТаблицаНаименованийТоваров = Новый ТаблицаЗначений;                             
	ТаблицаНаименованийТоваров.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТипТоварНаименование = Метаданные.РегистрыСведений.СоответствияНаименованийИСсылокТоваров.Измерения.ТоварНаименование.Тип;
	ТаблицаНаименованийТоваров.Колонки.Добавить("ТоварНаименование", ТипТоварНаименование);
	
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		
		Если ЭСФ[ИмяТаблицыКонтрагентов].Количество() <> 0
		   И ЗначениеЗаполнено(ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента]) Тогда
		   
		   Для Каждого СтрокаТаблицыТовары Из ЭСФ.Товары Цикл
			    СтрокаТаблицыНаименованийТоваров = ТаблицаНаименованийТоваров.Добавить();
				СтрокаТаблицыНаименованийТоваров.Контрагент = ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента];
				//СтрокаТаблицыНаименованийТоваров.ТоварНаименование = СтрокаТаблицыТовары.ТоварНаименование;
				СтрокаТаблицыНаименованийТоваров.ТоварНаименование = ?(ЗначениеЗаполнено(СтрокаТаблицыТовары.ТоварНаименование), СтрокаТаблицыТовары.ТоварНаименование, СтрокаТаблицыТовары.ТоварНаименованиеВРамкахТС);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Найти соответствия наименований и ссылок, заполнить на их основе ссылки на товары в документах ЭСФ.
	
	ТаблицаСоответствий = ПолучитьСохраненныеСоответствияНаименованийИСсылокТоваров(ТаблицаНаименованийТоваров);
	
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		
		Если ЭСФ[ИмяТаблицыКонтрагентов].Количество() <> 0
		   И ЗначениеЗаполнено(ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента]) Тогда
			
			Для Каждого СтрокаТаблицыТовары Из ЭСФ.Товары Цикл
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Контрагент", ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента]);
				//ПараметрыОтбора.Вставить("ТоварНаименование", СтрокаТаблицыТовары.ТоварНаименование);
				ТоварНаименование = ?(ЗначениеЗаполнено(СтрокаТаблицыТовары.ТоварНаименование), СтрокаТаблицыТовары.ТоварНаименование, СтрокаТаблицыТовары.ТоварНаименованиеВРамкахТС);
				ПараметрыОтбора.Вставить("ТоварНаименование", ТоварНаименование);
				МассивНайденныхСтрок = ТаблицаСоответствий.НайтиСтроки(ПараметрыОтбора);
				Если МассивНайденныхСтрок.Количество() <> 0 Тогда
					СтрокаТаблицыТовары.Товар = МассивНайденныхСтрок[0].Товар;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизит ДоговорПоставки в документах ЭСФ.
//
// Параметры:
//  МассивЭСФ - Массив - Массив документов ЭСФ, в которых необходимо заполнить реквизит ДоговорПоставки.
//   Каждый элемент массива должен иметь тип ДокументОбъект.ЭСФ.
// 
Процедура ЗаполнитьСсылкиНаДоговорыПоставки(МассивЭСФ)
	
	// Очистить старые ссылки на договры поставки.
	Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
		ОбъектЭСФ.ДоговорПоставки = Неопределено;
	КонецЦикла;
	
	// Сформировать пустые параметры поиска договоров поставки.
	ИменаРеквизитов = "Владелец, Организация, НомерДоговора, ДатаДоговора";
	ОбъектМетаданных = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПараметрыПоискаДоговоровПоставки = ЭСФСервер.НовыеПараметрыПоискаСсылок(ИменаРеквизитов, ОбъектМетаданных);
	
	// Заполнить параметры поиска договоров поставки.
	Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
		
		ИмяТаблицыКонтрагентов = ЭСФВызовСервераПовтИсп.ИмяТаблицыКонтрагентов(ОбъектЭСФ.Направление);	
		ИмяРеквизитаКонтрагента = ЭСФВызовСервераПовтИсп.ИмяРеквизитаКонтрагента(ОбъектЭСФ.Направление);
		Контрагент = ОбъектЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента];
		
		Если ЗначениеЗаполнено(Контрагент)
			И ЗначениеЗаполнено(ОбъектЭСФ.Организация)
			И ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПоставкиНомер) 
			И ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПоставкиДата) Тогда
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Владелец", Контрагент);
			ПараметрыПоиска.Вставить("Организация", ОбъектЭСФ.Организация);
			ПараметрыПоиска.Вставить("НомерДоговора", ОбъектЭСФ.ДоговорПоставкиНомер);
			ПараметрыПоиска.Вставить("ДатаДоговора", ОбъектЭСФ.ДоговорПоставкиДата);
			
			МассивНайденныхСтрок = ПараметрыПоискаДоговоровПоставки.НайтиСтроки(ПараметрыПоиска);
			
			Если МассивНайденныхСтрок.Количество() = 0 Тогда	
				СтрокаПараметровПоиска = ПараметрыПоискаДоговоровПоставки.Добавить();
				СтрокаПараметровПоиска.Владелец = Контрагент;
				СтрокаПараметровПоиска.Организация = ОбъектЭСФ.Организация;
				СтрокаПараметровПоиска.НомерДоговора = СокрЛП(ОбъектЭСФ.ДоговорПоставкиНомер);
				СтрокаПараметровПоиска.ДатаДоговора = СокрЛП(ОбъектЭСФ.ДоговорПоставкиДата);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Найти договора поставки.
	НайденныеСсылки = НайтиСсылкиПоЗначениямРеквизитов(ПараметрыПоискаДоговоровПоставки, ОбъектМетаданных);
	
	// Заполнить договоры поставки в МассивЭСФ.
	Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
		
		ИмяТаблицыКонтрагентов = ЭСФВызовСервераПовтИсп.ИмяТаблицыКонтрагентов(ОбъектЭСФ.Направление);	
		ИмяРеквизитаКонтрагента = ЭСФВызовСервераПовтИсп.ИмяРеквизитаКонтрагента(ОбъектЭСФ.Направление);
		Контрагент = ОбъектЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента];
		
		Если ЗначениеЗаполнено(Контрагент)
			И ЗначениеЗаполнено(ОбъектЭСФ.Организация)
			И ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПоставкиНомер) 
			И ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПоставкиДата) Тогда
					
				ПараметрыПоиска = Новый Структура;
				ПараметрыПоиска.Вставить("Владелец", Контрагент);
				ПараметрыПоиска.Вставить("Организация", ОбъектЭСФ.Организация);
				ПараметрыПоиска.Вставить("НомерДоговора", ОбъектЭСФ.ДоговорПоставкиНомер);
				ПараметрыПоиска.Вставить("ДатаДоговора", ОбъектЭСФ.ДоговорПоставкиДата);
				
				МассивНайденныхСтрок = НайденныеСсылки.НайтиСтроки(ПараметрыПоиска);
				
				Если МассивНайденныхСтрок.Количество() = 1 Тогда
					ОбъектЭСФ.ДоговорПоставки = МассивНайденныхСтрок[0].НайденнаяСсылка;
				КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Соответствия наименований и ссылок товаров и единиц измерения

// Сохраняет соответствия "Единица измерения наименование - Единица измерения ссылка".
// Соответствия сохраняются в разрезе контрагентов.
// Если ЭСФ содержит несколько контрагентов, то соответствия сохраняются для каждого из них.  
// Для сохранения соответствия ссылка на контрагента должна быть заполнена, иначе оно не сохранится.
// Соответствие сохраняется только если заполнена ссылка на единицу измерения.
//
// Параметры:
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление всех ЭСФ в МассивЭСФ.
//  МассивЭСФ - Массив - Массив объектов ДокументСсылка.ЭСФ,    
//   для которых необходимо сохранить соответствия "Единица измерения наименование - Единица измерения ссылка".
//
Процедура СохранитьСоответствияНаименованийИСсылокЕдиницИзмерения(Знач НаправлениеЭСФ, Знач МассивЭСФ) Экспорт
	
	ИмяРеквизитаКонтрагента = ЭСФВызовСервераПовтИсп.ИмяРеквизитаКонтрагента(НаправлениеЭСФ);
	ИмяТаблицыКонтрагентов = ЭСФВызовСервераПовтИсп.ИмяТаблицыКонтрагентов(НаправлениеЭСФ);	

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФКонтрагенты.[ИмяРеквизитаКонтрагента] КАК Контрагент,
	|	ЭСФТовары.Товар,
	|	ЭСФТовары.ЕдиницаИзмеренияНаименование,
	|	ЭСФТовары.ЕдиницаИзмеренияКод,
	|	ЭСФТовары.ЕдиницаИзмерения
	|ИЗ
	|	Документ.ЭСФ.[ИмяТаблицыКонтрагентов] КАК ЭСФКонтрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ.Товары КАК ЭСФТовары
	|		ПО ЭСФКонтрагенты.Ссылка = ЭСФТовары.Ссылка
	|ГДЕ
	|	ЭСФКонтрагенты.Ссылка В(&МассивЭСФ)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ИмяРеквизитаКонтрагента]", ИмяРеквизитаКонтрагента);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ИмяТаблицыКонтрагентов]", ИмяТаблицыКонтрагентов);
	Запрос.УстановитьПараметр("МассивЭСФ", МассивЭСФ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Контрагент) 
		   И ТипЗнч(Выборка.Контрагент) = Тип("СправочникСсылка.Контрагенты") 
		   И ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения) Тогда
			
			Запись = РегистрыСведений.СоответствияНаименованийИСсылокЕдиницИзмерения.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			ЕдиницаИзмеренияКод = ЭСФКлиентСервер.ПреобразованноеНаименование(Выборка.ЕдиницаИзмеренияКод);
			Если ЗначениеЗаполнено(ЕдиницаИзмеренияКод) Тогда
				Запись.ЕдиницаИзмеренияНаименование = ЕдиницаИзмеренияКод;
			Иначе
				Запись.ЕдиницаИзмеренияНаименование = ЭСФКлиентСервер.ПреобразованноеНаименование(Выборка.ЕдиницаИзмеренияНаименование);
			КонецЕсли;	
			Запись.Записать();
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

// Возвращает сохраненные соответствия "Единица измерения наименование - Единица измерения ссылка".
//
// Параметры:
//  ТаблицаНаименованийЕдиницИзмерения - ТаблицаЗначений - Таблица для поиска ссылок.
//   |- Контрагент - СправочникСсылка.Контрагенты - Контрагенты, для которых необходимо найти соответствия.
//   |- ЕдиницаИзмеренияНаименование - Строка - Наименования единиц измерений, для которых необходимо найти соответствия.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Найденные соответствия "Единица измерения наименование - Единица измерения ссылка".
//   |- Контрагент - СправочникСсылка.Контрагенты - Контрагент, которому принадлежит соответствие.  
//   |- ЕдиницаИзмеренияНаименование - Строка - Наименования единицы измерения, как в параметре ТаблицаНаименованийЕдиницИзмерения.
//   |- ЕдиницаИзмерения - См. РегистрыСведений.СоответствияНаименованийИСсылокЕдиницИзмерения.ЕдиницаИзмерения - Ссылка на единицу измерения.
//
Функция ПолучитьСохраненныеСоответствияНаименованийИСсылокЕдиницИзмерения(ТаблицаНаименованийЕдиницИзмерения)
	
	// Добавить и заполнить колонку "ЕдиницаИзмеренияНаименованиеПреобразованное".
	ТипЕдиницаИзмеренияНаименование = ТаблицаНаименованийЕдиницИзмерения.Колонки.ЕдиницаИзмеренияНаименование.ТипЗначения;
	ТаблицаНаименованийЕдиницИзмерения.Колонки.Добавить("ЕдиницаИзмеренияНаименованиеПреобразованное", ТипЕдиницаИзмеренияНаименование);
	
	Для Каждого СтрокаТаблицы Из ТаблицаНаименованийЕдиницИзмерения Цикл
		СтрокаТаблицы.ЕдиницаИзмеренияНаименованиеПреобразованное = ЭСФКлиентСервер.ПреобразованноеНаименование(СтрокаТаблицы.ЕдиницаИзмеренияНаименование);	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаНаименованийЕдиницИзмерения.Контрагент КАК Контрагент,
	|	ТаблицаНаименованийЕдиницИзмерения.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименованиеИсходное,
	|	ТаблицаНаименованийЕдиницИзмерения.ЕдиницаИзмеренияНаименованиеПреобразованное КАК ЕдиницаИзмеренияНаименование
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&ТаблицаНаименованийЕдиницИзмерения КАК ТаблицаНаименованийЕдиницИзмерения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	ЕдиницаИзмеренияНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблица.Контрагент,
	|	ВременнаяТаблица.ЕдиницаИзмеренияНаименованиеИсходное КАК ЕдиницаИзмеренияНаименование,
	|	СоответствияНаименованийИСсылокЕдиницИзмерения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СоответствияНаименованийИСсылокЕдиницИзмерения.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименованиеИзСправочника
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияНаименованийИСсылокЕдиницИзмерения КАК СоответствияНаименованийИСсылокЕдиницИзмерения
	|		ПО ВременнаяТаблица.Контрагент = СоответствияНаименованийИСсылокЕдиницИзмерения.Контрагент
	|			И ВременнаяТаблица.ЕдиницаИзмеренияНаименование = СоответствияНаименованийИСсылокЕдиницИзмерения.ЕдиницаИзмеренияНаименование";
	
	Запрос.УстановитьПараметр("ТаблицаНаименованийЕдиницИзмерения", ТаблицаНаименованийЕдиницИзмерения);	
	ТаблицаСоответствий = Запрос.Выполнить().Выгрузить();
	ТаблицаСоответствий.Индексы.Добавить("Контрагент, ЕдиницаИзмеренияНаименование");
	
	Возврат ТаблицаСоответствий;
	
КонецФункции

// См. ЭСФСервер.СохранитьСоответствияНаименованийИСсылокТоваров()
Процедура СохранитьСоответствияНаименованийИСсылокТоваров(Знач НаправлениеЭСФ, Знач МассивЭСФ) Экспорт
	
	ИмяРеквизитаКонтрагента = ЭСФВызовСервераПовтИсп.ИмяРеквизитаКонтрагента(НаправлениеЭСФ);
	ИмяТаблицыКонтрагентов = ЭСФВызовСервераПовтИсп.ИмяТаблицыКонтрагентов(НаправлениеЭСФ);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФКонтрагенты.[ИмяРеквизитаКонтрагента] КАК Контрагент,
	//|	ЭСФТовары.ТоварНаименование,
	|	ВЫБОР 
	|		КОГДА ЭСФТовары.ТоварНаименование <> &ПустаяСтрока 
	|			ТОГДА ЭСФТовары.ТоварНаименование
	|		ИНАЧЕ ЭСФТовары.ТоварНаименованиеВРамкахТС
	|	КОНЕЦ КАК ТоварНаименование,
	|	ЭСФТовары.Товар
	|ИЗ
	|	Документ.ЭСФ.[ИмяТаблицыКонтрагентов] КАК ЭСФКонтрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ.Товары КАК ЭСФТовары
	|		ПО ЭСФКонтрагенты.Ссылка = ЭСФТовары.Ссылка
	|ГДЕ
	|	ЭСФКонтрагенты.Ссылка В(&МассивЭСФ)
	|	И (ЭСФТовары.ТоварНаименование <> &ПустаяСтрока ИЛИ ЭСФТовары.ТоварНаименованиеВРамкахТС <> &ПустаяСтрока)
	|";
	//|	И ЭСФТовары.ТоварНаименование <> &ПустаяСтрока";		
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ИмяРеквизитаКонтрагента]", ИмяРеквизитаКонтрагента);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ИмяТаблицыКонтрагентов]", ИмяТаблицыКонтрагентов);
	
	Запрос.УстановитьПараметр("МассивЭСФ", МассивЭСФ);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Контрагент) 
		   И ТипЗнч(Выборка.Контрагент) = Тип("СправочникСсылка.Контрагенты") 
		   И ЗначениеЗаполнено(Выборка.Товар) Тогда
		   
			Запись = РегистрыСведений.СоответствияНаименованийИСсылокТоваров.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.ТоварНаименование = ЭСФКлиентСервер.ПреобразованноеНаименование(Выборка.ТоварНаименование);
			Запись.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает сохраненные соответствия "Товар наименование - Товар ссылка".
//
// Параметры:
//  ТаблицаНаименованийТоваров - ТаблицаЗначений - Таблица для поиска ссылок.
//   |- Контрагент - СправочникСсылка.Контрагенты - Контрагенты, для которых необходимо найти соответствия.
//   |- ТоварНаименование - Строка - Наименования товаров, для которых необходимо найти соответствия.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Найденные соответствия "Товар наименование - Товар ссылка".
//   |- Контрагент - СправочникСсылка.Контрагенты - Контрагент, которому принадлежит соответствие.  
//   |- ТоварНаименование - Строка - Наименования товара, как в параметре ТаблицаНаименованийТоваров.
//   |- Товар - См. РегистрыСведений.СоответствияНаименованийИСсылокТоваров.Товар - Ссылка на товар.
//
Функция ПолучитьСохраненныеСоответствияНаименованийИСсылокТоваров(ТаблицаНаименованийТоваров)
	
	// Добавить и заполнить колонку "ТоварНаименованиеПреобразованное".
	ТипТоварНаименование = ТаблицаНаименованийТоваров.Колонки.ТоварНаименование.ТипЗначения;
	ТаблицаНаименованийТоваров.Колонки.Добавить("ТоварНаименованиеПреобразованное", ТипТоварНаименование);
	
	Для Каждого СтрокаТаблицы Из ТаблицаНаименованийТоваров Цикл
		СтрокаТаблицы.ТоварНаименованиеПреобразованное = ЭСФКлиентСервер.ПреобразованноеНаименование(СтрокаТаблицы.ТоварНаименование);	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаНаименованийТоваров.Контрагент КАК Контрагент,
	|	ТаблицаНаименованийТоваров.ТоварНаименование КАК ТоварНаименованиеИсходное,
	|	ТаблицаНаименованийТоваров.ТоварНаименованиеПреобразованное КАК ТоварНаименование
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&ТаблицаНаименованийТоваров КАК ТаблицаНаименованийТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	// индексирование по полю ТоварНаименование вызывает ошибку на СУБД MS SQL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблица.Контрагент,
	|	ВременнаяТаблица.ТоварНаименованиеИсходное КАК ТоварНаименование,
	|	СоответствияНаименованийИСсылокТоваров.Товар КАК Товар
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияНаименованийИСсылокТоваров КАК СоответствияНаименованийИСсылокТоваров
	|		ПО ВременнаяТаблица.Контрагент = СоответствияНаименованийИСсылокТоваров.Контрагент
	|			И ВременнаяТаблица.ТоварНаименование = СоответствияНаименованийИСсылокТоваров.ТоварНаименование";
	
	Запрос.УстановитьПараметр("ТаблицаНаименованийТоваров", ТаблицаНаименованийТоваров);	
	ТаблицаСоответствий = Запрос.Выполнить().Выгрузить();
	// индексирование по полю ТоварНаименование вызывает ошибку на СУБД MS SQL, поэтому оставлен индекс только по Контрагенту
	ТаблицаСоответствий.Индексы.Добавить("Контрагент");
	
	Возврат ТаблицаСоответствий;
	
КонецФункции


// Поиск и создание ключей аналитики по наименованиям товаров и кодам единиц измерения
//
// Параметры:
//  МассивЭСФ					 - 	 Массив ЭСФ по которым следует найти ключи аналитики и создать при их отсутствии 
//  СоздатьНовыеПриОтсутствии	 - 	 Параметр указывающий создавать или нет новые ключи аналитики при их отсутствии 
// 
// Возвращаемое значение:
//   ТаблицаЗначений с полями ТоварНаименование, ЕдиницаИзмеренияКод, КлючАналитики
//
Функция ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Знач МассивЭСФ, Знач СоздатьНовыеПриОтсутствии) Экспорт
	
	КлючиАналитикиПоТоварам = Новый ТаблицаЗначений;
	Возврат КлючиАналитикиПоТоварам;
		
КонецФункции

Процедура СохранитьСоответствияНаименованийИСсылокЕдиницИзмеренийИТоваров(КлючиАналитикиУчетаСоответствий, НаправлениеЭСФ, МассивЭСФ) Экспорт
	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создание контрагентов, договоров и т.д.

Процедура ЗаполнитьРеквизитыКонтрагента(Знач ОбъектЭСФ, Знач ПоставщикиСтрока) Экспорт
		
	НачатьТранзакцию();
	
	Попытка
		
		ТекстКомментария = ЭСФКлиентСервер.ТекстКомментарияСозданПоДаннымЭСФ(ОбъектЭСФ.Ссылка);		
		ОбъектКонтрагент = ПоставщикиСтрока.Поставщик.ПолучитьОбъект();
		
		/////////////////////////////////////////////////////////////////////////////
		// Заполнить реквизиты контрагента.
		ОбъектКонтрагент.ИдентификационныйКодЛичности = ПоставщикиСтрока.ПоставщикИдентификатор;
		ОбъектКонтрагент.Наименование = ПоставщикиСтрока.ПоставщикНаименование;	
		ОбъектКонтрагент.НаименованиеПолное = ПоставщикиСтрока.ПоставщикНаименование;
		ОбъектКонтрагент.СерияСвидетельстваПоНДС = ПоставщикиСтрока.СерияСвидетельстваПоНДС;
		ОбъектКонтрагент.НомерСвидетельстваПоНДС = ПоставщикиСтрока.НомерСвидетельстваПоНДС;
		ОбъектКонтрагент.КБЕ = ПоставщикиСтрока.КБе;
		ОбъектКонтрагент.Комментарий = ТекстКомментария;
		
		/////////////////////////////////////////////////////////////////////////////
		// Создать и записать адрес контрагента.
		Запись = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		Запись.Объект = ОбъектКонтрагент.Ссылка;
		Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		Запись.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		Запись.Представление = ПоставщикиСтрока.Адрес;
		Запись.Записать();	
		
		/////////////////////////////////////////////////////////////////////////////
		// Создать и записать банковский счет контрагента.
		Если ЗначениеЗаполнено(ПоставщикиСтрока.ИИК)
			И ЗначениеЗаполнено(ПоставщикиСтрока.БИК)
			И ЗначениеЗаполнено(ПоставщикиСтрока.НаименованиеБанка) Тогда
			
			/////////////////////////////////////////////////////////////////////////////
			// Найти банк по БИК, если его нет, то создать.
			СсылкаБанк = НайтиБанкПоБИК(ПоставщикиСтрока.БИК);			
			Если НЕ ЗначениеЗаполнено(СсылкаБанк) Тогда
				ОбъектБанк = Справочники.Банки.СоздатьЭлемент();
				ОбъектБанк.Наименование = ПоставщикиСтрока.НаименованиеБанка;
				ОбъектБанк.БИК = ПоставщикиСтрока.БИК;
				ОбъектБанк.Записать();
				СсылкаБанк = ОбъектБанк.Ссылка;
			КонецЕсли;
			
			/////////////////////////////////////////////////////////////////////////////
			// Проверить, что такого банковского счета контрагента нет.
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БанковскиеСчета.Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Владелец = &Контрагент
			|	И БанковскиеСчета.Банк = &Банк
			|	И БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
			|	И БанковскиеСчета.ПометкаУдаления = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("Банк", СсылкаБанк);
			Запрос.УстановитьПараметр("Валюта", ОбъектЭСФ.Валюта);
			Запрос.УстановитьПараметр("Контрагент", ОбъектКонтрагент.Ссылка);
			
			Результат = Запрос.Выполнить();
			
			/////////////////////////////////////////////////////////////////////////////
			// Создать и записать банковский счет контрагента.			
			Если Результат.Пустой() Тогда
				
				ОбъектСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
				НаименованиеСчета = НСтр("ru = '[НомерСчета] в [Банк]'");
				НаименованиеСчета = СтрЗаменить(НаименованиеСчета, "[НомерСчета]", ПоставщикиСтрока.ИИК);
				НаименованиеСчета = СтрЗаменить(НаименованиеСчета, "[Банк]", СсылкаБанк);
				ОбъектСчет.Наименование = НаименованиеСчета;
				ОбъектСчет.Владелец = ОбъектКонтрагент.Ссылка;			
				ОбъектСчет.ВалютаДенежныхСредств = ОбъектЭСФ.Валюта;
				ОбъектСчет.ВидСчета = НСтр("ru = 'Расчетный'");
				ОбъектСчет.МесяцПрописью = Истина;
				ОбъектСчет.НомерСчета = ПоставщикиСтрока.ИИК;
				ОбъектСчет.Банк = СсылкаБанк; 
				
				ОбъектСчет.Записать();
				
				Если НЕ ЗначениеЗаполнено(ОбъектКонтрагент.ОсновнойБанковскийСчет) Тогда
					ОбъектКонтрагент.ОсновнойБанковскийСчет = ОбъектСчет.Ссылка;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////////////
		// Проверить, что такого договора контрагента нет.
		МассивДоговоров = НайтиДоговорыПоставкиПоДаннымЭСФ(ОбъектЭСФ, ПоставщикиСтрока, "Поставщики");
		
		/////////////////////////////////////////////////////////////////////////////
		// Создать, заполнить и записать договор контрагента.
		Если МассивДоговоров.Количество() = 0 Тогда
			
			ОбъектДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			
			ОбъектДоговор.Наименование = ЭСФКлиентСервер.НаименованиеДоговора(ОбъектЭСФ);
			ОбъектДоговор.Владелец = ОбъектКонтрагент.Ссылка;
			ОбъектДоговор.ВалютаВзаиморасчетов = ОбъектЭСФ.Валюта;
			ОбъектДоговор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
			ОбъектДоговор.Комментарий = ТекстКомментария;
			ОбъектДоговор.Организация = ОбъектЭСФ.Организация;
			ОбъектДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			ОбъектДоговор.НомерДоговора = ОбъектЭСФ.ДоговорПоставкиНомер;
			ОбъектДоговор.ДатаДоговора = ОбъектЭСФ.ДоговорПоставкиДата;
			
			УчастникСовместнойДеятельности 	= ПоставщикиСтрока.УчастникСовместнойДеятельности;
			УчастникСРП 					= ПоставщикиСтрока.УчастникСРП;
			
			Если  УчастникСовместнойДеятельности
				ИЛИ УчастникСРП Тогда
				
				ОбъектДоговор.ДоговорСовместнойДеятельности = УчастникСовместнойДеятельности;
				
				ОбъектДоговор.УчастникиСовместнойДеятельности.Очистить();
				Для Каждого СтрокаПоставщики Из ОбъектЭСФ.Поставщики Цикл
					СтрокаУчастникиСД = ОбъектДоговор.УчастникиСовместнойДеятельности.Добавить();
					СтрокаУчастникиСД.УчастникСовместнойДеятельности = СтрокаПоставщики.Поставщик;
				КонецЦикла;
				
				ТекстСообщения = НСтр("ru = 'Для поставщика создан договор ""[Договор]"", заполните доли участия в данном договоре.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Договор]", ОбъектДоговор.Наименование);
				Сообщить(ТекстСообщения);
				
			КонецЕсли;
			
			ОбъектДоговор.Записать();
			
			Если НЕ ЗначениеЗаполнено(ОбъектКонтрагент.ОсновнойДоговорКонтрагента) Тогда
				ОбъектКонтрагент.ОсновнойДоговорКонтрагента = ОбъектДоговор.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////////////
		// Повторно записать контрагента и зафиксировать транзакцию.
		ОбъектКонтрагент.Записать();
		ЗафиксироватьТранзакцию();
				
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
		
КонецПроцедуры

Функция НайтиДоговорыПоставкиПоДаннымЭСФ(Знач ОбъектЭСФ, Знач СтрокаКонтрагент, Знач ИмяТаблицыКонтрагента) Экспорт
	
	МассивДоговоров = Новый Массив;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.НомерДоговора = &НомерДоговора
	|	И ДоговорыКонтрагентов.ДатаДоговора = &ДатаДоговора
	|	И ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
	|	И ДоговорыКонтрагентов.ДоговорСовместнойДеятельности = &ДоговорСовместнойДеятельности
	|	%УсловиеДоговорыКонтрагентовУчастникСРП
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ";
	
	
	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%УсловиеДоговорыКонтрагентовУчастникСРП", "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеИменРеквизитов);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НомерДоговора", ОбъектЭСФ.ДоговорПоставкиНомер);
	Запрос.УстановитьПараметр("ДатаДоговора", ОбъектЭСФ.ДоговорПоставкиДата);
	
	Если ИмяТаблицыКонтрагента = "Поставщики" Тогда
		Запрос.УстановитьПараметр("Контрагент", СтрокаКонтрагент.Поставщик);
	Иначе // ИмяТаблицыКонтрагента = "Получатели"
		Запрос.УстановитьПараметр("Контрагент", СтрокаКонтрагент.Получатель);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", ОбъектЭСФ.Организация);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ОбъектЭСФ.Валюта);
	Запрос.УстановитьПараметр("ДоговорСовместнойДеятельности", СтрокаКонтрагент.УчастникСовместнойДеятельности);
	Запрос.УстановитьПараметр("УчастникСРП", СтрокаКонтрагент.УчастникСРП);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивДоговоров.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДоговоров;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ЭСФ ПО ТОВАРАМ ИЗ ПЕРЕЧНЯ

Функция ЗаполнитьПроверитьИсходящийЭСФПоТоварамИзПеречня(ОбъектЭСФ, Знач СсылкаСчетФактура, Знач Заполнить)
	
	// Заполнение и проверка ЭСФ по товарам из перечня
	// для ЭСФ, который выписывается на весь оборот за день,
	// имееют особенности, которые регулируются переменной ЭСФПоРознице.
	ЭСФПоРознице = ЭСФСерверПереопределяемый.ЭтоЭСФПоРознице(ОбъектЭСФ);
	
	МассивСообщений = Новый Массив;
	ВыборкаПоТоварамИзПеречня = ВыборкаПоТоварамИзПеречня(ОбъектЭСФ);
	
	ВерсияЭСФ = ?(ЗначениеЗаполнено(ОбъектЭСФ.ВерсияБланкаЭСФ), ОбъектЭСФ.ВерсияБланкаЭСФ, 1);
	
	//////////////////////////////////////////////////////////////////////////////
	// Проверить, что есть хотя бы один товар, входящий в Перечень.	
	ЕстьТоварыВходящиеВПеречень = Ложь;
	ВсеТоварыВходятВПеречень = Истина;	
	ВыборкаПоТоварамИзПеречня.Сбросить();
	Пока ВыборкаПоТоварамИзПеречня.Следующий() Цикл
		Если ВыборкаПоТоварамИзПеречня.ТоварВходитВПеречень Тогда
			ЕстьТоварыВходящиеВПеречень = Истина;
		Иначе
			ВсеТоварыВходятВПеречень = Ложь;
		КонецЕсли;
	КонецЦикла;
	
		
	
	//////////////////////////////////////////////////////////////////////////////
	// Предполагается, что СФ должен содержать либо все товары из Перечня, либо все не из Перечня.
	// Сообщить о товарах, которые не входят в Перечень.
	
	Если ВерсияЭСФ = 1 Тогда
		Если ЕстьТоварыВходящиеВПеречень И (НЕ ВсеТоварыВходятВПеречень) Тогда
			
			Сообщение = НСтр(
			"ru = 'Документ содержит одновременно товары, входящие в Перечень товаров с пониженной ставкой пошлин и не входящие.
			|В данной ситуации может потребоваться оформить два документа, один по товарам входящим в Перечень, второй по не входящим.
			|Товары не входящие в Перечень:
			|%1'");
			
			ОписаниеВсехТоваровНеИзПеречня = "";
			ВыборкаПоТоварамИзПеречня.Сбросить();
			Пока ВыборкаПоТоварамИзПеречня.Следующий() Цикл
				Если НЕ ВыборкаПоТоварамИзПеречня.ТоварВходитВПеречень Тогда
					ОписаниеТовараНеИзПеречня = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
						НСтр("ru = '""%1"" (номер строки: %2).'"),
						ВыборкаПоТоварамИзПеречня.Товар,
						ВыборкаПоТоварамИзПеречня.НомерСтроки);
					ОписаниеВсехТоваровНеИзПеречня = ОписаниеВсехТоваровНеИзПеречня + ОписаниеТовараНеИзПеречня + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
			
			Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Сообщение, СокрЛП(ОписаниеВсехТоваровНеИзПеречня));
			МассивСообщений.Добавить(Сообщение);
			
		КонецЕсли;
	КонецЕсли;	
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Определить вид страны (РК, ЕАЭС, Прочие), в которую вывозится товар.	
	СтранаНазначенияРК = Ложь;
	СтранаНазначенияЕАЭС = Ложь;
	СтранаНазначенияПрочиеСтраны = Ложь;	
	СтранаНазначения = СсылкаСчетФактура.СтранаНазначения;
	Если СтранаНазначения = Справочники.КлассификаторСтранМира.Казахстан
	 ИЛИ СтранаНазначения = Справочники.КлассификаторСтранМира.ПустаяСсылка() Тогда
		СтранаНазначенияРК = Истина;
	Иначе
		Если ЗначениеЗаполнено(СтранаНазначения.УчастникТаможенногоСоюза) Тогда
			СтранаНазначенияЕАЭС = Истина;	
		Иначе
			СтранаНазначенияПрочиеСтраны = Истина;	
		КонецЕсли;
	КонецЕсли;
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Установить у поставщика флаг Экспортер.	
	Если Заполнить Тогда
		
		// Поставщик экспортер, если:
		// 1. осуществляет вывоз товара в таможенной процедуре экспорта товаров;
		// 2. является участником соглашения (контракта) о разделе продукции (СРП);
		// 3. осуществляет вывоз товара, включенного в Перечень, с территории Республики Казахстан на территорию государства-члена ЕАЭС.
		
		ПоставщикЭкспортер = Ложь;
		
		Если ВерсияЭСФ = 1 Тогда
			Если СтранаНазначенияПрочиеСтраны Тогда
				
				ПоставщикЭкспортер = Истина
					
			ИначеЕсли СтранаНазначенияЕАЭС Тогда  
				
				Если ЕстьТоварыВходящиеВПеречень Тогда
					ПоставщикЭкспортер = Истина;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ПоставщикЭкспортер = (СтранаНазначенияПрочиеСтраны Или СтранаНазначенияЕАЭС);
		КонецЕсли;	
					
		Для Каждого СтрокаПоставщики Из ОбъектЭСФ.Поставщики Цикл
			
			Если ВерсияЭСФ = 1 Тогда
				СтрокаПоставщики.ЭкспортерИлиУчастникСРП = ПоставщикЭкспортер;
			Иначе
				СтрокаПоставщики.Экспортер = ПоставщикЭкспортер;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВерсияЭСФ = 2 Тогда
			Если ПоставщикЭкспортер Тогда
				ОбъектЭСФ.ГрузополучательКодСтраны = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(СтранаНазначения, "КодАльфа2");
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;
	
		
	
	//////////////////////////////////////////////////////////////////////////////
	// Установить у получателя код страны.	
	Если Заполнить Тогда
		
		КодСтраны = "";
		
		Если ВерсияЭСФ = 1 Тогда
			Если ЕстьТоварыВходящиеВПеречень И СтранаНазначенияЕАЭС Тогда
				КодСтраны = СтранаНазначения.КодАльфа3;
			КонецЕсли;
			
			Для Каждого СтрокаПолучатели Из ОбъектЭСФ.Получатели Цикл
				СтрокаПолучатели.ДополнительныеСведения = КодСтраны;	
			КонецЦикла;
		Иначе
			Если ПоставщикЭкспортер Тогда
				КодСтраны = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(СтранаНазначения, "КодАльфа2");

				Для Каждого СтрокаПолучатели Из ОбъектЭСФ.Получатели Цикл
					СтрокаПолучатели.КодСтраны = КодСтраны;	
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Установить у получателя флаг Нерезидент.
	Если Заполнить И (НЕ ЭСФПоРознице) Тогда	
		
		Если СсылкаСчетФактура.Покупатель.СтранаРезидентства = Справочники.КлассификаторСтранМира.ПустаяСсылка()
		 ИЛИ СсылкаСчетФактура.Покупатель.СтранаРезидентства = Справочники.КлассификаторСтранМира.Казахстан Тогда
			ПолучательРезидентРК = Истина;
		Иначе
			ПолучательРезидентРК = Ложь;
		КонецЕсли;
		
		// Флаг Нерезидент должен устанавливаться:
		// В случае если получатель является нерезидентом или структурным подразделением поставщика, 
		// в адрес которого осуществляется вывоз товара, включенного в Перечень на территорию государства–члена ЕАЭС, 
		// в связи с передачей его в пределах одного юридического лица.
		//
		// Предполагается, что если это передача структурному подразделению на территории ЕАЭС,
		// то у получателя должен стоять признак Нерезидент или пользователь должен
		// самостоятельно устанавливать флаг Нерезидент в ЭСФ.
		
		Для Каждого СтрокаПолучатели Из ОбъектЭСФ.Получатели Цикл
			Если ВерсияЭСФ = 1 Тогда
				СтрокаПолучатели.Нерезидент = НЕ ПолучательРезидентРК;		
			Иначе	
				СтрокаПолучатели.НерезидентВерсия2 = НЕ ПолучательРезидентРК;		
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить реквизит ПунктНазначения.
	
	Если Заполнить Тогда
		Если ВерсияЭСФ = 1 Тогда
			Если ЕстьТоварыВходящиеВПеречень И СтранаНазначенияЕАЭС Тогда
				ОбъектЭСФ.ПунктНазначения = СсылкаСчетФактура.ПунктНазначения;
			Иначе
				ОбъектЭСФ.ПунктНазначения = "";	
			КонецЕсли;		
		Иначе
			Если НЕ СтранаНазначенияРК Тогда
				ОбъектЭСФ.ПунктНазначения = СсылкаСчетФактура.ПунктНазначения;
			Иначе
				ОбъектЭСФ.ПунктНазначения = "";	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить Поставщики.ДополнительныеСведения буквами ЕТТ, ВТО, СТ-1, ТС.	
	Если ВерсияЭСФ = 1 И ЕстьТоварыВходящиеВПеречень Тогда
		
		// Заполнить соответствие значением по умолчнию.
		ТоварыИзПеречняПоСпособамПроисхождения = Новый Соответствие;
		ТоварыИзПеречняПоСпособамПроисхождения.Вставить(Перечисления.СпособыПроисхожденияТоваров.ПустаяСсылка(), "");
		Для Каждого МетаданныеСпособПроисхождения Из Метаданные.Перечисления.СпособыПроисхожденияТоваров.ЗначенияПеречисления Цикл
			ТоварыИзПеречняПоСпособамПроисхождения.Вставить(Перечисления.СпособыПроисхожденияТоваров[МетаданныеСпособПроисхождения.Имя], "");	
		КонецЦикла;
		
		// Разделить строки таблицы "Товары", документа "СчетФактураВыданный" на группы,
		// в зависимости от способа происхождения товаров.
		ВыборкаПоТоварамИзПеречня.Сбросить();
		Пока ВыборкаПоТоварамИзПеречня.Следующий() Цикл
			Если ВыборкаПоТоварамИзПеречня.ТоварВходитВПеречень Тогда
				
				ОписаниеТовара = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
					НСтр("ru = '   - ""%1"" (номер строки: %2).'"),
					ВыборкаПоТоварамИзПеречня.Товар,
					ВыборкаПоТоварамИзПеречня.НомерСтроки);
					
				// Убрать левый отступ, если это товар из перечня с пустым способом происхождения,
				// т.к. сообщение по данным товарам не требует левого отступа.
				Если НЕ ЗначениеЗаполнено(ВыборкаПоТоварамИзПеречня.СпособПроисхожденияТовара) Тогда
					ОписаниеТовара = СокрЛ(ОписаниеТовара);
				КонецЕсли;
					
				ОписаниеВсехТоваров = ТоварыИзПеречняПоСпособамПроисхождения[ВыборкаПоТоварамИзПеречня.СпособПроисхожденияТовара];
				ОписаниеВсехТоваров = ОписаниеВсехТоваров + ОписаниеТовара + Символы.ПС;
				ТоварыИзПеречняПоСпособамПроисхождения[ВыборкаПоТоварамИзПеречня.СпособПроисхожденияТовара] = ОписаниеВсехТоваров;
				
			КонецЕсли;
		КонецЦикла;
		
		// Заполнить поле ДополнительныеСведения в таблице Поставщики значениями ЕТТ, ВТО и т.д.
		Если Заполнить Тогда
			
			Поставщик_ДополнительныеСведения = "";
			
			Для Каждого ТоварыПоСпособуПроисхождения Из ТоварыИзПеречняПоСпособамПроисхождения Цикл
				
				СпособПроисхождения = ТоварыПоСпособуПроисхождения.Ключ;
				СписокТоваров = ТоварыПоСпособуПроисхождения.Значение;
				
				Если (НЕ ПустаяСтрока(СписокТоваров)) 					
				   И СпособПроисхождения <> Перечисления.СпособыПроисхожденияТоваров.ПустаяСсылка() Тогда
						
					СпособПроисхожденияИСЭСФ = ЭСФКлиентСервер.СпособыПроисхожденияТоваровИСЭСФ(СпособПроисхождения);
					Поставщик_ДополнительныеСведения = Поставщик_ДополнительныеСведения + СпособПроисхожденияИСЭСФ + ",";
						
				КонецЕсли;	
				
			КонецЦикла;
			
			Если НЕ ПустаяСтрока(Поставщик_ДополнительныеСведения) Тогда
				// Убрать последнюю запятую.
				Поставщик_ДополнительныеСведения = Лев(Поставщик_ДополнительныеСведения, СтрДлина(Поставщик_ДополнительныеСведения) - 1);
			КонецЕсли;
			
			Для Каждого СтрокаПоставщики Из ОбъектЭСФ.Поставщики Цикл
				СтрокаПоставщики.ДополнительныеСведения = Поставщик_ДополнительныеСведения;
			КонецЦикла;
			
		КонецЕсли;
		
		// Сообщить, если есть товары входящие в Печень с незаполненным способом происхождения.
		// Проверка выполняется только для товаров входящих в Перечнь.
		СтрокаСписокТоваров = ТоварыИзПеречняПоСпособамПроисхождения[Перечисления.СпособыПроисхожденияТоваров.ПустаяСсылка()];
		Если НЕ ПустаяСтрока(СтрокаСписокТоваров) Тогда
			Сообщение = НСтр(
			"ru = 'В документе имеются товары, входящие в Перечень товаров с пониженной ставкой пошлин, у которых не заполнен способ происхождения.
			|При реализации товаров входящих в Перечень необходимо, чтобы у этих товаров был заполнен способ происхождения.
			|Список товаров с пустым способом происхождения:
			|%1'");
			Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Сообщение, СтрокаСписокТоваров);
			МассивСообщений.Добавить(Сообщение);
		КонецЕсли;
		
		// Сообщить, если СФ содержит товары с различными способами происхождения.
		// Проверка выполняется только для товаров входящих в Перечнь.		
		КоличествоРазличныхСпосовПоступления = 0;
		ОписаниеВсехСпособовПоступления = "";
		Для Каждого ТоварыПоСпособуПроисхождения Из ТоварыИзПеречняПоСпособамПроисхождения Цикл
			Если ТоварыПоСпособуПроисхождения.Ключ <> Перечисления.СпособыПроисхожденияТоваров.ПустаяСсылка() Тогда
				Если НЕ ПустаяСтрока(ТоварыПоСпособуПроисхождения.Значение) Тогда
					
					КоличествоРазличныхСпосовПоступления = КоличествоРазличныхСпосовПоступления + 1;
					
					ОписаниеСпособаПоступления = "- %1:
					                             |%2";
												 
					ОписаниеСпособаПоступления = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
						ОписаниеСпособаПоступления, ТоварыПоСпособуПроисхождения.Ключ, ТоварыПоСпособуПроисхождения.Значение);
						
					ОписаниеВсехСпособовПоступления = ОписаниеВсехСпособовПоступления + СокрЛП(ОписаниеСпособаПоступления) + Символы.ПС;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоРазличныхСпосовПоступления > 1 И (НЕ ЭСФПоРознице) Тогда
			 
			Сообщение = НСтр(
			"ru = 'Документ содержит товары с различными способами происхождения.
			|В данной ситуации может потребоваться оформить отдельные документы для каждого способа происхождения.
			|Распределение товаров по способам происхождения:
			|%1'");
			
			Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Сообщение, ОписаниеВсехСпособовПоступления);
			МассивСообщений.Добавить(Сообщение);
			
		КонецЕсли;
				
	КонецЕсли;
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить в таблице Товары: КодТНВЭД, НомерСтрокиГТД,
	// НомерГТД или НомерЗаявления или НомерСертификата.	
	
	ПараметрыЭСФ = ЭСФСервер.ПолучитьПараметрыЭСФ();
	Если НЕ ЭСФСервер.ВедетсяУчетПоТоварамНаВС(ОбъектЭСФ.Дата) Тогда
		ВыборкаПоТоварамИзПеречня.Сбросить();		
		Пока ВыборкаПоТоварамИзПеречня.Следующий() Цикл
			
			СтрокаТовары = ОбъектЭСФ.Товары.Найти(ВыборкаПоТоварамИзПеречня.НомерСтроки, "НомерСтроки");			
			
			Если ВерсияЭСФ = 2 Тогда
				ТоварыИзПеречня_ЗаполнитьПризнакПроисхождения(ВыборкаПоТоварамИзПеречня, СтрокаТовары, Заполнить, ПараметрыЭСФ, МассивСообщений);
				//порядок процедур имеет значение, т.к. заполнение наименования зависит от Признака происхождения товара                               
				ТоварыИзПеречня_ЗаполнитьНаименованиеТовараВРамкахТС(ВыборкаПоТоварамИзПеречня, СтрокаТовары, Заполнить, МассивСообщений, ПараметрыЭСФ);
			КонецЕсли;	
			ТоварыИзПеречня_ЗаполнитьКодТНВЭД(       ВыборкаПоТоварамИзПеречня, СтрокаТовары, ВерсияЭСФ, СтранаНазначенияЕАЭС, Заполнить, МассивСообщений, ПараметрыЭСФ);
			ТоварыИзПеречня_ЗаполнитьНомерГТД(       ВыборкаПоТоварамИзПеречня, СтрокаТовары, ВерсияЭСФ, СтранаНазначенияЕАЭС, Заполнить, МассивСообщений, ПараметрыЭСФ, ОбъектЭСФ.Дата);
			ТоварыИзПеречня_ЗаполнитьНомерСтрокиГТД( ВыборкаПоТоварамИзПеречня, СтрокаТовары, ВерсияЭСФ, Заполнить, МассивСообщений, ПараметрыЭСФ, ОбъектЭСФ.Дата);
			
			// В случае реализации товара, ввезенного ранее в РК, наименование товара должно совпадать с наименованием товара, 
			// указанного в декларации на товары или заявлении о ввозе товаров и уплате косвенных налогов.
			// Данное требование реализовано в функции НоваяВыборкаТовары().
			
		КонецЦикла;		
	КонецЕсли;		
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить рег. номер ЭСФ в поле ДополнительныеСведения.
	// Для ЭСФ по рознице не заполняются рег. номера, так как есть вероястность,
	// что все рег. номера ЭСФ не уместятся в размерность реквизита.
	// Также предполагается, что рег. номер ЭСФ требуется для отслвеживания
	// цепочки реализаций при перепродаже, а розничная реализация может рассматриваться 
	// как конечное звеном цепочки реализаций.
	
	Если ВерсияЭСФ = 1 И ЕстьТоварыВходящиеВПеречень И (НЕ ЭСФПоРознице) Тогда
		
		ТабЗначРегНомера = Новый ТаблицаЗначений;                            	
		ТабЗначРегНомера.Колонки.Добавить("РегНомерЭСФ");
		
		ВыборкаПоТоварамИзПеречня.Сбросить();
		Пока ВыборкаПоТоварамИзПеречня.Следующий() Цикл
			Если НЕ ПустаяСтрока(ВыборкаПоТоварамИзПеречня.РегистрационныйНомерЭСФ) Тогда				
				СтрокаТабЗначРегНомера = ТабЗначРегНомера.Добавить();
				СтрокаТабЗначРегНомера.РегНомерЭСФ = ВыборкаПоТоварамИзПеречня.РегистрационныйНомерЭСФ;				
			КонецЕсли;
		КонецЦикла;
		
		ТабЗначРегНомера.Свернуть("РегНомерЭСФ");
		
		// Если товар входит в Перечень и мы его произвели или мы первые импортеры,
		// то у нас нет рег. номера ЭСФ, полученного от поставщика,
		// поэтому заполненность рег. номера ЭСФ не проверяется.
		
		Если ТабЗначРегНомера.Количество() > 1 Тогда
			
			Сообщение = НСтр(
			"ru = 'Документ содержит товары с различными регистрационными номерами полученных ЭСФ.
			|В данной ситуации может потребоваться оформить отдельный документ для каждого регистрационного номера ЭСФ.'");		
			
			МассивСообщений.Добавить(Сообщение);
			
		КонецЕсли;
		
		Если Заполнить Тогда
			Если ТабЗначРегНомера.Количество() > 0 Тогда
				
				СтрокаВсеРегНомераЭСФ = "";
				Для Каждого СтрокаТабЗначРегНомера Из ТабЗначРегНомера Цикл
					СтрокаВсеРегНомераЭСФ = СтрокаВсеРегНомераЭСФ + СтрокаТабЗначРегНомера.РегНомерЭСФ + ",";
				КонецЦикла;
				
				// Удалить последнюю запятую.
				СтрокаВсеРегНомераЭСФ = Лев(СтрокаВсеРегНомераЭСФ, СтрДлина(СтрокаВсеРегНомераЭСФ)-1);
				
				ОбъектЭСФ.ДополнительныеСведения = СтрокаВсеРегНомераЭСФ; 
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	
		
	//////////////////////////////////////////////////////////////////////////////
	// Вернуть сообщения о проблемах, выявленных при заполнении ЭСФ по товарам из Перечня.	
	Возврат МассивСообщений;
	
КонецФункции

Процедура ПоказатьСообщения(Знач МассивСообщений, Знач СсылкаСчетФактура)
	
	Если МассивСообщений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИтоговоеСообщение = НСтр("ru = 'Заполнение электронного счета-фактуры по документу ""%1"":
                              |
                              |%2'");
							 
	ВсеСообщения = "";
	Для Каждого Сообщение Из МассивСообщений Цикл
		ВсеСообщения = ВсеСообщения + СокрЛП(Сообщение) + Символы.ПС + Символы.ПС;
	КонецЦикла;
	
	ИтоговоеСообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ИтоговоеСообщение, СсылкаСчетФактура, ВсеСообщения);	
	ИтоговоеСообщение = СокрЛП(ИтоговоеСообщение) + Символы.ПС;
	ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ИтоговоеСообщение, СсылкаСчетФактура);
	
КонецПроцедуры

Процедура ТоварыИзПеречня_ЗаполнитьКодТНВЭД(ВыборкаПоТоварамИзПеречня, СтрокаТовары, ВерсияЭСФ, СтранаНазначенияЕАЭС, Заполнить, МассивСообщений, ПараметрыЭСФ = Неопределено)
	
	// Заполнить КодТНВЭД.
	Если НЕ ПустаяСтрока(ВыборкаПоТоварамИзПеречня.КодТНВЭД) Тогда
		КодТНВЭД = ВыборкаПоТоварамИзПеречня.КодТНВЭД;
	Иначе
		КодТНВЭД = "";	
	КонецЕсли;
	
	// Показать сообщение, что код ТН ВЭД не заполнен.
	Если ВерсияЭСФ = 1 Тогда
		
		Если Заполнить Тогда
			СтрокаТовары.КодТНВЭД = КодТНВЭД;
		КонецЕсли;
		
		Если ПустаяСтрока(КодТНВЭД) Тогда
		
			Если ВыборкаПоТоварамИзПеречня.ТоварВходитВПеречень
			 ИЛИ ВыборкаПоТоварамИзПеречня.СпособПроисхожденияТовара = Перечисления.СпособыПроисхожденияТоваров.ВТО
			 ИЛИ ВыборкаПоТоварамИзПеречня.СпособПроисхожденияТовара = Перечисления.СпособыПроисхожденияТоваров.ЕТТЕАЭС Тогда				 
			 
				Сообщение = НСтр(
				"ru = 'Товар ""%1"" (номер строки: %2) %3 и для него не указан код ТН ВЭД.
				|Код ТН ВЭД необходимо обязательно указывать если товар был импортирован и/или входит в Перечень товаров с пониженной ставкой пошлин.'");
				
				Если ВыборкаПоТоварамИзПеречня.ТоварВходитВПеречень Тогда
					Причина = НСтр("ru = 'входит в перечень товаров с пониженной ставкой пошлин'");
				Иначе
					Причина = НСтр("ru = 'был импортирован на территорию РК'");
				КонецЕсли;
				
				Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
					Сообщение,
					ВыборкаПоТоварамИзПеречня.Товар,
					ВыборкаПоТоварамИзПеречня.НомерСтроки,
					Причина);
					
				МассивСообщений.Добавить(Сообщение);
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Если Заполнить Тогда
			//В версии ЭСФ - 2 код ТНВЭД заполняется только в тех случаях, когда он д.б. обязательно заполнен
			//поэтому если в предыдущих процедурах данный код заполнился, то здесь сначала очистим его.
			//Очистка вынесена в данную процедуру преднамеренно, т.е. если учет оп ГТД не ведется, то КОД заполняется всегда из спр. Номерклатура, без каких-либо условий
			СтрокаТовары.КодТНВЭД = "";
		КонецЕсли;
		
		ПризнакПроисхождения = СтрокаТовары.ПризнакПроисхождения;

		Если ПризнакПроисхождения = "1" Или ПризнакПроисхождения = "2" 
			Или ПризнакПроисхождения = "3" Или (ПризнакПроисхождения = "4" И СтранаНазначенияЕАЭС) ИЛИ (ПараметрыЭСФ <> Неопределено И ПараметрыЭСФ.ЗаполнитьИсточникиПроисхожденияБезусловно) Тогда
			
			Если Заполнить Тогда
				СтрокаТовары.КодТНВЭД = КодТНВЭД;
			КонецЕсли;
						
			Если ПустаяСтрока(КодТНВЭД) И (ПризнакПроисхождения = "1" Или ПризнакПроисхождения = "2" 
			Или ПризнакПроисхождения = "3" Или (ПризнакПроисхождения = "4" И СтранаНазначенияЕАЭС)) Тогда
				
				Сообщение = НСтр(
				"ru = 'Товар ""%1"" (номер строки: %2) %3 и для него не указан код ТН ВЭД.
				|Код ТН ВЭД необходимо обязательно указывать если товар отностися к Признаку ""1"", ""2"", ""3"" а так же ""4"" при экспорте товаров в государства-члены ЕАЭС.'");
				
				Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
					Сообщение,
					ВыборкаПоТоварамИзПеречня.Товар,
					ВыборкаПоТоварамИзПеречня.НомерСтроки);
					
				МассивСообщений.Добавить(Сообщение);
				
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
			
КонецПроцедуры

Процедура ТоварыИзПеречня_ЗаполнитьНомерГТД(ВыборкаПоТоварамИзПеречня, СтрокаТовары, ВерсияЭСФ, СтранаНазначенияЕАЭС, Заполнить, МассивСообщений, ПараметрыЭСФ = Неопределено, ДатаЭСФ = '00010101')

	Если ВерсияЭСФ = 1 Тогда
		Если Заполнить Тогда
			СтрокаТовары.НомерЗаявленияВРамкахТС = СокрЛП(ВыборкаПоТоварамИзПеречня.НомерГТДНомерЗаявленияНомерСертификата);
		КонецЕсли;
		
		// Показать сообщение, что НомерГТД или НомерЗаявления или НомерСертификата не заполнен.
		Если ПустаяСтрока(СокрЛП(ВыборкаПоТоварамИзПеречня.НомерГТДНомерЗаявленияНомерСертификата)) Тогда
			
			Если ВыборкаПоТоварамИзПеречня.ТоварВходитВПеречень
				ИЛИ ВыборкаПоТоварамИзПеречня.СпособПроисхожденияТовара = Перечисления.СпособыПроисхожденияТоваров.ТС
				ИЛИ ВыборкаПоТоварамИзПеречня.СпособПроисхожденияТовара = Перечисления.СпособыПроисхожденияТоваров.ВТО
				ИЛИ ВыборкаПоТоварамИзПеречня.СпособПроисхожденияТовара = Перечисления.СпособыПроисхожденияТоваров.ЕТТЕАЭС Тогда				 
				
				Сообщение = НСтр(
				"ru = 'Для товара ""%1"" (номер строки: %2) не удалось заполнить колонку №14 в таблице ""Товары"".
				|Колонка №14 в таблице ""Товары"" содержит Номер заявления в рамках ТС или Номер декларации на товары или Номер сертификата происхождения товара.
				|Колонку №14 в таблице ""Товары"" необходимо заполнять если товар входит в перечень или был ввезен из других стран.'");
				
				Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
					Сообщение,
					ВыборкаПоТоварамИзПеречня.Товар,
					ВыборкаПоТоварамИзПеречня.НомерСтроки);
				
				МассивСообщений.Добавить(Сообщение);
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		ПризнакПроисхождения = СтрокаТовары.ПризнакПроисхождения;
		Если ПризнакПроисхождения = "1" 
			ИЛИ (ПризнакПроисхождения ="2" и ДатаЭСФ >= Дата(2019,7,1))
			ИЛИ (ПризнакПроисхождения = "3" И СтранаНазначенияЕАЭС) 
			ИЛИ (ПараметрыЭСФ <> Неопределено И ПараметрыЭСФ.ЗаполнитьИсточникиПроисхожденияБезусловно) Тогда 
			
			Если Заполнить Тогда
				СтрокаТовары.НомерЗаявленияВРамкахТС = СокрЛП(ВыборкаПоТоварамИзПеречня.НомерГТДНомерЗаявленияНомерСертификата);
			КонецЕсли;

			// Показать сообщение, что НомерГТД или НомерЗаявления или НомерСертификата не заполнен.
			Если ПустаяСтрока(СокрЛП(ВыборкаПоТоварамИзПеречня.НомерГТДНомерЗаявленияНомерСертификата)) 
				И (ПризнакПроисхождения = "1" ИЛИ (ПризнакПроисхождения ="2" и ДатаЭСФ >= Дата(2019,7,1) ИЛИ (ПризнакПроисхождения = "3" И СтранаНазначенияЕАЭС))) Тогда
				
				Сообщение = НСтр(
				"ru = 'Для товара ""%1"" (номер строки: %2) не удалось заполнить колонку №15 в таблице ""Товары"".
				|Колонка №15 в таблице ""Товары"" содержит Номер заявления в рамках ТС или Номер декларации на товары или Номер сертификата происхождения товара.
				|Колонку №15 в таблице ""Товары"" необходимо обязательно заполнять, если товар отностися к Признаку ""1"", %3 а так же ""3"" при экспорте товаров в государства-члены ЕАЭС.'");
				
				//Правило о втором признаке от 01.07.2019
				Признак2 = "";
				Если ДатаЭСФ >= Дата(2019,7,1) Тогда
					Признак2 = "2";
				КонецЕсли;
				
				Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
					Сообщение,
					ВыборкаПоТоварамИзПеречня.Товар,
					ВыборкаПоТоварамИзПеречня.НомерСтроки,
					Признак2);
				
				МассивСообщений.Добавить(Сообщение);
					
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
				
КонецПроцедуры

Процедура ТоварыИзПеречня_ЗаполнитьНомерСтрокиГТД(ВыборкаПоТоварамИзПеречня, СтрокаТовары, ВерсияЭСФ, Заполнить, МассивСообщений, ПараметрыЭСФ = Неопределено, ДатаЭСФ = '00010101')
	
	Если ВерсияЭСФ = 1 Тогда
		
		Если ВыборкаПоТоварамИзПеречня.ТоварВходитВПеречень
				 И (ВыборкаПоТоварамИзПеречня.СпособПроисхожденияТовара <> Перечисления.СпособыПроисхожденияТоваров.ТС) Тогда
					
			Если Заполнить Тогда
				СтрокаТовары.ДополнительныеДанные = ВыборкаПоТоварамИзПеречня.НомерСтрокиГТД;
			КонецЕсли;
			
			// Показать сообщение, что НомерСтрокиГТД не заполнен.
			Если ПустаяСтрока(ВыборкаПоТоварамИзПеречня.НомерСтрокиГТД) Тогда				 
					
					Сообщение = НСтр(
					"ru = 'Для товара ""%1"" (номер строки: %2) не удалось заполнить номер строки ГТД в таблице ""Товары"".
					|Номер строки ГТД необходимо заполнять, так как данный товар входит в перечень товаров с пониженной ставкой пошлин и был импортирован на территорию РК.'");
				
					Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
						Сообщение,
						ВыборкаПоТоварамИзПеречня.Товар,
						ВыборкаПоТоварамИзПеречня.НомерСтроки);
					
					МассивСообщений.Добавить(Сообщение);
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		ПризнакПроисхождения = СтрокаТовары.ПризнакПроисхождения;
		
		Если ПризнакПроисхождения = "1"
			ИЛИ (ПризнакПроисхождения ="2" и ДатаЭСФ >= Дата(2019,7,1)) 
			ИЛИ (ПараметрыЭСФ <> Неопределено И ПараметрыЭСФ.ЗаполнитьИсточникиПроисхожденияБезусловно)  Тогда
			Если Заполнить Тогда
				СтрокаТовары.НомерПозицииВДекларацииИлиЗаявлении = ВыборкаПоТоварамИзПеречня.НомерСтрокиГТД;
			КонецЕсли;
			
			// Показать сообщение, что НомерСтрокиГТД не заполнен.
			Если ПустаяСтрока(ВыборкаПоТоварамИзПеречня.НомерСтрокиГТД) И ПризнакПроисхождения = "1" Тогда
				
					Сообщение = НСтр(
					"ru = 'Для товара ""%1"" (номер строки: %2) не удалось заполнить номер строки ГТД или Заявления о ввозе товаров в таблице ""Товары"".
					|Номер строки необходимо заполнять, так как данный товар относится к Признаку ""1"".'");
				
					Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
						Сообщение,
						ВыборкаПоТоварамИзПеречня.Товар,
						ВыборкаПоТоварамИзПеречня.НомерСтроки);
					
					МассивСообщений.Добавить(Сообщение);
			
			ИначеЕсли ПустаяСтрока(ВыборкаПоТоварамИзПеречня.НомерСтрокиГТД) И (ПризнакПроисхождения ="2" и ДатаЭСФ >= Дата(2019,7,1)) Тогда
				
					Сообщение = НСтр(
					"ru = 'Для товара ""%1"" (номер строки: %2) не удалось заполнить номер строки ГТД или Заявления о ввозе товаров в таблице ""Товары"".
					|Номер строки необходимо заполнять, так как данный товар относится к Признаку ""2"".'");
				
					Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
						Сообщение,
						ВыборкаПоТоварамИзПеречня.Товар,
						ВыборкаПоТоварамИзПеречня.НомерСтроки);
					
					МассивСообщений.Добавить(Сообщение);
			
			КонецЕсли;
		
		КонецЕсли;	
	КонецЕсли;			
			
КонецПроцедуры

Процедура ТоварыИзПеречня_ЗаполнитьПризнакПроисхождения(ВыборкаПоТоварамИзПеречня, СтрокаТовары, Заполнить, ПараметрыЭСФ, МассивСообщений)
	
	ПризнакПроисхождения = "";
	
	Если Заполнить Тогда
		
		ПризнакПроисхождения = ВыборкаПоТоварамИзПеречня.ПризнакПроисхождения;
				
		Если ПустаяСтрока(ПризнакПроисхождения) Тогда
			
			Если ТипЗнч(ВыборкаПоТоварамИзПеречня.Товар) <> Тип("СправочникСсылка.Номенклатура") Тогда
				ПризнакПроисхождения = "5";	
			Иначе
				Если ВыборкаПоТоварамИзПеречня.Услуга Тогда
					ПризнакПроисхождения = "6";
				Иначе
					ПризнакПроисхождения = "5";	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;  		
		
		СтрокаТовары.ПризнакПроисхождения = ПризнакПроисхождения;
		
		НовыйПризнакПроисхождения = ПроверитьЗаполнитьПризнакПроисхождения(ПризнакПроисхождения, ВыборкаПоТоварамИзПеречня.ТоварВходитВПеречень);
		
		Если ПризнакПроисхождения <> НовыйПризнакПроисхождения Тогда
			
			Сообщение = НСтр("ru = 'Для товара ""%1"" (номер строки: %2) был переопределен Признак происхождения с ""%3"" (указан в источнике происх.) на ""%4"" (определен по тек. вхождению в товара в Перечень).'");
			
			Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			Сообщение,
			ВыборкаПоТоварамИзПеречня.Товар,
			ВыборкаПоТоварамИзПеречня.НомерСтроки,
			ПризнакПроисхождения,
			НовыйПризнакПроисхождения);
			
			МассивСообщений.Добавить(Сообщение);
		КонецЕсли;
		
		СтрокаТовары.ПризнакПроисхождения = НовыйПризнакПроисхождения;	
		//КонецЕсли;
		
	КонецЕсли;
	
	//Если НЕ Заполнить Тогда
	//	
	//	Если НЕ ПустаяСтрока(ВыборкаПоТоварамИзПеречня.ОсновнойКодТНВЭД) ИЛИ НЕ ПустаяСтрока(ВыборкаПоТоварамИзПеречня.ЗапаснойКодТНВЭД) Тогда 
	//		
	//		ВходитВПереченьПоМакету = Ложь;
	//		Если НЕ ПустаяСтрока(ВыборкаПоТоварамИзПеречня.ОсновнойКодТНВЭД) Тогда
	//			ВходитВПереченьПоМакету = ВыборкаПоТоварамИзПеречня.ОсновнойКодВходитВПеречень;	
	//		ИначеЕсли НЕ ПустаяСтрока(ВыборкаПоТоварамИзПеречня.ЗапаснойКодТНВЭД) Тогда
	//			ВходитВПереченьПоМакету = ВыборкаПоТоварамИзПеречня.ЗапаснойКодВходитВПеречень;	
	//		КонецЕсли;
	//		
	//		ЕстьРасхождения = (ВходитВПереченьПоМакету <> ВыборкаПоТоварамИзПеречня.ТоварВходитВПеречень);
	//		
	//		Если ЕстьРасхождения Тогда
	//			Сообщение = НСтр(
	//			"ru = 'Для товара ""%1"" (номер строки: %2) выявлено расхождение - по данным регистра ""Товары с пониженной ставкой"" данный товар %3 в Перечень, но Код ТНВЭД %4 в Перечень.'");
	//			
	//			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//			Сообщение,
	//			ВыборкаПоТоварамИзПеречня.Товар,
	//			ВыборкаПоТоварамИзПеречня.НомерСтроки,
	//			?(ВыборкаПоТоварамИзПеречня.ТоварВходитВПеречень, "входит", "не входит"),
	//			?(ВходитВПереченьПоМакету, "входит", "не входит"));
	//			
	//			МассивСообщений.Добавить(Сообщение);
	//		КонецЕсли;	
	//		
	//	КонецЕсли;	
	//	
	//КонецЕсли;

	// Показать сообщение, что ПризнакПроисхождения не заполнен.
	Если ПустаяСтрока(ВыборкаПоТоварамИзПеречня.ПризнакПроисхождения) 
		И ((ТипЗнч(ВыборкаПоТоварамИзПеречня.Товар) = Тип("СправочникСсылка.Номенклатура")
		И Не ВыборкаПоТоварамИзПеречня.Услуга) ИЛИ ТипЗнч(ВыборкаПоТоварамИзПеречня.Товар) <> Тип("СправочникСсылка.Номенклатура"))  Тогда
		
		Сообщение = НСтр(
		"ru = 'Для товара ""%1"" (номер строки: %2) не указан Признак в источнике происхождения либо источник происхождения не определен.
		|По умолчанию графа ""Признак происхождения"" заполнен значением ""5"", так как данная графа обязательна к заполнению. 
		|Настоятельно рекомендуем проверить, при необходимости, скорректировать Признак.'");
	
		Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			Сообщение,
			ВыборкаПоТоварамИзПеречня.Товар,
			ВыборкаПоТоварамИзПеречня.НомерСтроки);
		
		МассивСообщений.Добавить(Сообщение);
					
	КонецЕсли;
				
КонецПроцедуры

Процедура ТоварыИзПеречня_ЗаполнитьНаименованиеТовараВРамкахТС(ВыборкаПоТоварамИзПеречня, СтрокаТовары, Заполнить, МассивСообщений, ПараметрыЭСФ = Неопределено)
	
	ПризнакПроисхождения = СтрокаТовары.ПризнакПроисхождения;
	
	Если ПризнакПроисхождения = "1" Или ПризнакПроисхождения = "2" ИЛИ (ПараметрыЭСФ <> Неопределено И ПараметрыЭСФ.ЗаполнитьИсточникиПроисхожденияБезусловно) Тогда
		
		Если Заполнить Тогда
			СтрокаТовары.ТоварНаименованиеВРамкахТС = ВыборкаПоТоварамИзПеречня.ТоварНаименованиеВРамкахТС;
		КонецЕсли;			
				
		// Показать сообщение, что Наименование товара в рамках ТС не заполнено.
		Если ПустаяСтрока(ВыборкаПоТоварамИзПеречня.ТоварНаименованиеВРамкахТС) И (ПризнакПроисхождения = "1" Или ПризнакПроисхождения = "2") Тогда
			
			Сообщение = НСтр(
			"ru = 'Для товара ""%1"" (номер строки: %2) не удалось заполнить Наименование в соответствии с Декларацией на товары или Заявлением о ввозе товаров.
			|Данная графа подлежит обязательному заполнению по товарам, относящимся к Признакам ""1"", ""2"".'");
		
			Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				Сообщение,
				ВыборкаПоТоварамИзПеречня.Товар,
				ВыборкаПоТоварамИзПеречня.НомерСтроки);
			
			МассивСообщений.Добавить(Сообщение);
						
		КонецЕсли;
	Иначе
		Если Заполнить Тогда
			СтрокаТовары.ТоварНаименованиеВРамкахТС = "";
		КонецЕсли;	
	КонецЕсли;	
	            				
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Работа с источниками происхождения

//Процедура заполняет пустые признаки происхождения по умолчанию в документах
//
// Параметры:
//  ДокументОбъект - ДокументОбъект документ для заполнения признаков происхождения.
//  ИмяТЧ - Строка - Имя Табличной части для заполнения признаков происхождения.
//  ЗаполнятьВсе - Булево - Флаг заполнения признака происхождения во всех строка табличной части,
//    если значение "Истина" - признак будет заполнен во всех строках табличной части,
//    если "Ложь" только в тех строках где признак не указан.
//
Процедура ЗаполнитьПустыеПризнакиПроисхождения(ДокументОбъект, ИмяТЧ, ЗаполнятьВсе) Экспорт
	
	Если ИмяТЧ = "Товары" Тогда
		ИмяСтолбца = "Номенклатура";
	Иначе
		Возврат;
	КонецЕсли;
	
	//собираем все товары с пустыми признаками
	СписокТоваров = Новый Массив();
	НомераСтрок = Новый Массив();
	Для Каждого ТекСтрока Из ДокументОбъект[ИмяТЧ] Цикл
		Если ЗначениеЗаполнено(ТекСтрока[ИмяСтолбца]) И 
				(ЗаполнятьВсе ИЛИ Не ЗначениеЗаполнено(ТекСтрока.ПризнакПроисхождения)) Тогда
			СписокТоваров.Добавить(ТекСтрока[ИмяСтолбца]);
			НомераСтрок.Добавить(ТекСтрока.НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Если НомераСтрок.Количество() = 0 И НЕ ЗаполнятьВсе Тогда
		Возврат;
	КонецЕсли;
	
	//делаем запрос к регсвед
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокТоваров", СписокТоваров);
	Запрос.УстановитьПараметр("Дата", ДокументОбъект.Дата);
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	ТоварыПризнакПеречняИзьятий.Ссылка КАК Товар
		|ИЗ
		| Справочник.Номенклатура КАК ТоварыПризнакПеречняИзьятий
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураГСВС КАК ГСВС
		|		ПО ТоварыПризнакПеречняИзьятий.КодТНВЭД = ГСВС.КодГСВС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.Срезпоследних(&Дата, ПризнакАктивности) КАК СведенияОНоменклатуреГСВС
		|			ПО ГСВС.Ссылка = СведенияОНоменклатуреГСВС.НоменклатураГСВС
		|			И СведенияОНоменклатуреГСВС.ПризнакАктивности = ИСТИНА
		|ГДЕ
		|	ТоварыПризнакПеречняИзьятий.Ссылка В(&СписокТоваров)
		|	И НЕ ГСВС.Ссылка ЕСТЬ NULL
		|И
		|СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий";
	
	Запрос.Текст = ТекстЗапроса;
	ПереченьТоваров = Запрос.Выполнить().Выгрузить();
	
	Если ЗаполнятьВсе Тогда
		Для Каждого ТекСтрока Из ДокументОбъект[ИмяТЧ] Цикл
			Если ПереченьТоваров.Найти(ТекСтрока[ИмяСтолбца],"Товар") <> Неопределено Тогда
				ТекСтрока.ПризнакПроисхождения = "1";
			Иначе
				ТекСтрока.ПризнакПроисхождения = "2";
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого НомерСтроки Из НомераСтрок Цикл
			ТекСтрока = ДокументОбъект[ИмяТЧ][НомерСтроки-1];
			Если ПереченьТоваров.Найти(ТекСтрока[ИмяСтолбца],"Товар") <> Неопределено Тогда
				ТекСтрока.ПризнакПроисхождения = "1";
			Иначе
				ТекСтрока.ПризнакПроисхождения = "2";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Функция возвращает вспомогательную таблицу для дальнейшего заполнения признака происхождения
//
// Параметры:
//  МассивСтрокТоваров - массив строк табличной части Товары документа ЭСФ.
//
Функция ПолучитьТаблицуТоваровСПониженнойСтавкой(МассивСтрокТоваров,Дата) Экспорт
	
	ТаблицаТоваровСПониженнойСтавкой = Новый ТаблицаЗначений;
	
	ТаблицаТоваровСПониженнойСтавкой.Колонки.Добавить("ПониженнаяСтавка", Новый ОписаниеТипов("Булево"));
	ТаблицаТоваровСПониженнойСтавкой.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6)));
	
	СписокТоваров = Новый Массив;
	Для Каждого Элемент Из МассивСтрокТоваров Цикл
		СписокТоваров.Добавить(Элемент.Товар);
	КонецЦикла;
	
	Если СписокТоваров.Количество() = 0 Тогда
		Возврат ТаблицаТоваровСПониженнойСтавкой;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокТоваров", СписокТоваров);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Номенклатура.КодТНВЭД КАК КодТНВЭД,
	|	Номенклатура.Ссылка КАК Товар
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокТоваров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НематериальныеАктивы.КодТНВЭД,
	|	НематериальныеАктивы.Ссылка
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|ГДЕ
	|	НематериальныеАктивы.Ссылка В(&СписокТоваров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОсновныеСредства.КодТНВЭД,
	|	ОсновныеСредства.Ссылка
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Ссылка В(&СписокТоваров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодТНВЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Товар
	|ИЗ
	|	РегистрСведений.СведенияОНоменклатуреГСВС.СрезПоследних(&Дата, ) КАК СведенияОНоменклатуреГСВС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураГСВС КАК ГСВС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Товары КАК Товары
	|			ПО (Товары.КодТНВЭД = ГСВС.КодГСВС)
	|				И (ГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.ТНВЭД))
	|		ПО (ГСВС.Ссылка = СведенияОНоменклатуреГСВС.НоменклатураГСВС)
	|			И (СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий)";
	
	Запрос.Текст = ТекстЗапроса;
	ПереченьТоваров = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Элемент Из МассивСтрокТоваров Цикл
		Если ПереченьТоваров.Найти(Элемент.Товар,"Товар") <> Неопределено Тогда
			НоваяСтрока = ТаблицаТоваровСПониженнойСтавкой.Добавить();
			НоваяСтрока.НомерСтроки = Элемент.НомерСтроки;
			НоваяСтрока.ПониженнаяСтавка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаТоваровСПониженнойСтавкой;
	
КонецФункции

//Функция возвращает признак происхождения по умолчанию
//
// Параметры:
//  ПониженнаяСтавка - Булево.
//  СпособПроисхождения - Перечисление.СпособыПроисхожденияТоваров.
//
Функция ПолучитьПризнакПроисхождения(ПониженнаяСтавка,СпособПроисхождения) Экспорт
	
	Если Не ЗначениеЗаполнено(СпособПроисхождения) Тогда
		Возврат "5";
	ИначеЕсли СпособПроисхождения = Перечисления.СпособыПроисхожденияТоваров.СТ1 Тогда
		Если ПониженнаяСтавка Тогда
			Возврат "3";
		Иначе
			Возврат "4";
		КонецЕсли;
	ИначеЕсли СпособПроисхождения = Перечисления.СпособыПроисхожденияТоваров.ЕТТЕАЭС
				ИЛИ СпособПроисхождения = Перечисления.СпособыПроисхожденияТоваров.ВТО
				ИЛИ СпособПроисхождения = Перечисления.СпособыПроисхожденияТоваров.ТС Тогда
		Возврат "1";
	Иначе
		Возврат "5";
	КонецЕсли; 
	
КонецФункции

Функция ПроверитьЗаполнитьПризнакПроисхождения(ПризнакПроисхождения, ТоварВходитВПеречень) Экспорт
	
	НовыйПризнакПроисхождения = ПризнакПроисхождения;
	
	Если ТоварВходитВПеречень Тогда
		Если ПризнакПроисхождения = "2" Тогда
			НовыйПризнакПроисхождения = "1";			
		ИначеЕсли ПризнакПроисхождения = "4" Тогда
			НовыйПризнакПроисхождения = "3";
		КонецЕсли;
	Иначе
		Если ПризнакПроисхождения = "1" Тогда
			НовыйПризнакПроисхождения = "2";
		ИначеЕсли ПризнакПроисхождения = "3" Тогда
			НовыйПризнакПроисхождения = "4";
		КонецЕсли; 
	КонецЕсли;	
	
	Возврат НовыйПризнакПроисхождения;		
	
КонецФункции	

// Возвращает данные для заполнения ЭСФ.
//
// Параметры:
//  МассивСчетовФактур - Массив - Ссылки на счета-фактуры выданные, для которых необходимо получить данные для заполнения ЭСФ.
//
// Возвращаемое значение:
//  Структура, каждый элемент которой является результатом запроса.
//   |- РеквизитыСчетовФактур - Реквизиты счетов-фактур, адреса контрагентов и др. для заполнения ЭСФ.
//   |- СчетаФактурыСовместнойДеятельности - Ссылки на счета-фактуры, которые имеют договор совместной деятельности. 
//   |- ОсновныеСчетаФактуры - Данные основных счетов-фактур и данные связанных с ними ЭСФ. 
//
Функция НовыеРезультатыЗапросовПоРеквизитам(Знач МассивСчетовФактур)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура,
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование.Дата КАК ДокументОснованиеДата
	|ПОМЕСТИТЬ ДокументыПодтверждающиеПоставку
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка В(&МассивСчетовФактур)
	|	И СчетФактураВыданныйДокументыОснования.НомерСтроки = 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ТекущаяДата КАК Дата,
	|	НАЧАЛОПЕРИОДА(СчетФактураВыданный.ДатаСовершенияОборотаПоРеализации, ДЕНЬ) КАК ДатаОборота,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Грузоотправитель ССЫЛКА Справочник.Организации
	|			ТОГДА СчетФактураВыданный.Грузоотправитель.ИдентификационныйНомер
	|		ИНАЧЕ СчетФактураВыданный.Грузоотправитель.ИдентификационныйКодЛичности
	|	КОНЕЦ КАК ГрузоотправительИдентификатор,
	|	ВЫРАЗИТЬ(СчетФактураВыданный.Грузоотправитель.НаименованиеПолное КАК СТРОКА(400)) КАК ГрузоотправительНаименование,
	|	СчетФактураВыданный.Грузоотправитель КАК Грузоотправитель,
	|	СчетФактураВыданный.Грузополучатель.ИдентификационныйКодЛичности КАК ГрузополучательИдентификатор,
	|	ВЫРАЗИТЬ(СчетФактураВыданный.Грузополучатель.НаименованиеПолное КАК СТРОКА(400)) КАК ГрузополучательНаименование,
	|	СчетФактураВыданный.Грузополучатель КАК Грузополучатель,
	|	СчетФактураВыданный.АдресДоставки КАК АдресДоставки,
	|	СчетФактураВыданный.ДоговорКонтрагента КАК ДоговорПоставки,
	|	СчетФактураВыданный.ДоговорКонтрагента.НомерДоговора КАК ДоговорПоставкиНомер,
	|	СчетФактураВыданный.ДоговорКонтрагента.ДатаДоговора КАК ДоговорПоставкиДата,
	|	СчетФактураВыданный.УсловияОплаты КАК ДоговорПоставкиУсловияОплаты,
	|	СчетФактураВыданный.СпособОтправления КАК ДоговорПоставкиСпособОтправления,
	|	СчетФактураВыданный.ВалютаДокумента.БуквенныйКод КАК ВалютаКод,
	|	СчетФактураВыданный.ВалютаДокумента КАК Валюта,
	|	СчетФактураВыданный.КурсВзаиморасчетов КАК КурсВалюты,
	|	СчетФактураВыданный.Ссылка КАК СчетФактура,
	|	СчетФактураВыданный.Поставщик.ИдентификационныйНомер КАК Поставщик_ПоставщикИдентификатор,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(СчетФактураВыданный.Поставщик.НаименованиеПолное КАК СТРОКА(400))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(СчетФактураВыданный.Поставщик.НаименованиеПолное КАК СТРОКА(400))
	|		ИНАЧЕ СчетФактураВыданный.Поставщик.Наименование
	|	КОНЕЦ КАК Поставщик_ПоставщикНаименование,
	|	СчетФактураВыданный.Поставщик КАК Поставщик_Поставщик,
	|	СчетФактураВыданный.Поставщик.СерияСвидетельстваПоНДС КАК Поставщик_СерияСвидетельстваПоНДС,
	|	СчетФактураВыданный.Поставщик.НомерСвидетельстваПоНДС КАК Поставщик_НомерСвидетельстваПоНДС,
	|	ЕСТЬNULL(ДокументыПодтверждающиеПоставку.ДокументОснование, НЕОПРЕДЕЛЕНО) КАК Поставщик_ДокументПодтверждающийПоставку,
	|	ЕСТЬNULL(ДокументыПодтверждающиеПоставку.ДокументОснованиеДата, ДАТАВРЕМЯ(1, 1, 1)) КАК Поставщик_ДокументПодтверждающийПоставкуДата,
	|	СчетФактураВыданный.Поставщик.КБЕ КАК Поставщик_КБе,
	|	ЕСТЬNULL(СчетФактураВыданный.СчетОрганизации.НомерСчета, """") КАК Поставщик_ИИК,
	|	ЕСТЬNULL(СчетФактураВыданный.СчетОрганизации.Банк.БИК, """") КАК Поставщик_БИК,
	|	ЕСТЬNULL(СчетФактураВыданный.СчетОрганизации.Банк.Наименование, """") КАК Поставщик_НаименованиеБанка,
	|	СчетФактураВыданный.Покупатель.ИдентификационныйКодЛичности КАК Получатель_ПолучательИдентификатор,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(СчетФактураВыданный.Покупатель.НаименованиеПолное КАК СТРОКА(400))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(СчетФактураВыданный.Покупатель.НаименованиеПолное КАК СТРОКА(400))
	|		ИНАЧЕ СчетФактураВыданный.Покупатель.Наименование
	|	КОНЕЦ КАК Получатель_ПолучательНаименование,
	|	СчетФактураВыданный.Покупатель КАК Получатель_Получатель,
	|	СчетФактураВыданный.Покупатель.СерияСвидетельстваПоНДС КАК Получатель_СерияСвидетельстваПоНДС,
	|	СчетФактураВыданный.Покупатель.НомерСвидетельстваПоНДС КАК Получатель_НомерСвидетельстваПоНДС,
	|	СчетФактураВыданный.Покупатель.КБЕ КАК Получатель_КБе,
	|	ЕСТЬNULL(СчетФактураВыданный.Контрагент.ГосударственноеУчреждение, ЛОЖЬ) КАК Получатель_ГосударственноеУчреждение,
	|	ЕСТЬNULL(СчетФактураВыданный.ДоговорКонтрагента.ДоговорСовместнойДеятельности, ЛОЖЬ) КАК ЭтоДоговорСовместнойДеятельности,
	|	%ЭСФДоговорКонтрагентаУчастникСРП КАК ЭтоДоговорУчастникСРП,
	|	%ЭСФПоверенныйОператор КАК ПоверенныйОператор,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Обычный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Обычный)
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Дополнительный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Дополнительный)
	|		КОГДА СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовФактур.Исправленный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Исправленный)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.ПустаяСсылка)
	|	КОНЕЦ КАК Вид,
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий) КАК Направление,
	|	СчетФактураВыданный.ОсновнойСчетФактура КАК ОсновнойСчетФактура,
	|	ЕСТЬNULL(СчетФактураВыданный.ОсновнойСчетФактура.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ОсновнойСчетФактураДата,
	|	СчетФактураВыданный.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	СчетФактураВыданный.Организация КАК Организация,
	|	СчетФактураВыданный.СуммаВключаетАкциз,
	|	СчетФактураВыданный.СуммаВключаетНДС,
	|	ЕСТЬNULL(СчетФактураВыданный.СчетКонтрагента.НомерСчета, """") КАК ГосучреждениеИИК,
	|	СчетФактураВыданный.ГосучреждениеКодТоваров КАК ГосучреждениеКодТоваров,
	|	СчетФактураВыданный.ГосучреждениеНазначениеПлатежа КАК ГосучреждениеНазначениеПлатежа,
	|	""" + ГосучреждениеБИК() + """ КАК ГосучреждениеБИК,
	|	СчетФактураВыданный.ДоверенностьДата КАК ДоверенностьНаПоставкуДата,
	|	СчетФактураВыданный.ДоверенностьНомер КАК ДоверенностьНаПоставкуНомер,
	|
	//новые реквизиты ЭСФ версии №2
	|	""KZ"" КАК ГрузополучательКодСтраны,
	|	""KZ"" КАК Получатель_КодСтраны,
	|	СчетФактураВыданный.УсловияПоставки КАК ДоговорПоставкиУсловияПоставки,
	|	СчетФактураВыданный.СпособОтправленияПоКлассификатору КАК СпособОтправленияПоКлассификатору,
	|	ВЫБОР КОГДА СчетФактураВыданный.Покупатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо) И 
	|		СчетФактураВыданный.Покупатель.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус = ЛОЖЬ 
	|	ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК Получатель_ФизическоеЛицо,
	//-=-=
	|	ВЫБОР
	|		КОГДА КлассификаторСтранМира.КодАльфа2 <> ""KZ"" 
	|				И (СчетФактураВыданный.ДоговорКонтрагента.НомерДоговора <> """" И СчетФактураВыданный.ДоговорКонтрагента.ДатаДоговора <> ДАТАВРЕМЯ(1, 1, 1))
	|			ТОГДА СчетФактураВыданный.ДоговорКонтрагента.УникальныйНомерВалютногоКонтроля
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК УникальныйНомерВалютногоКонтроля
	//-=-=
	|
	|ПОМЕСТИТЬ ДанныеСчетовФактур
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыПодтверждающиеПоставку КАК ДокументыПодтверждающиеПоставку
	|		ПО СчетФактураВыданный.Ссылка = ДокументыПодтверждающиеПоставку.СчетФактура
	//-=-=
	|		ЛЕВОЕ СОЕДИНЕНИЕ %КлассификаторСтранМира КАК КлассификаторСтранМира
	|		ПО (СчетФактураВыданный.Покупатель.СтранаРезидентства = КлассификаторСтранМира.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ %КлассификаторСтранМира КАК КлассификаторСтранМираГрузополучатель
	|		ПО (СчетФактураВыданный.Грузополучатель.СтранаРезидентства = КлассификаторСтранМираГрузополучатель.Ссылка)
	//-=-=
	|ГДЕ
	|	СчетФактураВыданный.Ссылка В(&МассивСчетовФактур)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСчетовФактур.Грузоотправитель КАК Объект,
	|	ВЫБОР
	|		КОГДА ДанныеСчетовФактур.Грузоотправитель ССЫЛКА Справочник.Организации
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеСчетовФактур.Грузоотправитель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|						ТОГДА ДанныеСчетовФактур.Грузоотправитель.ИндивидуальныйПредприниматель
	|					ИНАЧЕ ДанныеСчетовФактур.Грузоотправитель
	|				КОНЕЦ
	|		ИНАЧЕ ДанныеСчетовФактур.Грузоотправитель
	|	КОНЕЦ КАК ОбъектДляПоискаАдреса
	|ПОМЕСТИТЬ ОбъектыДляПоискаАдресов
	|ИЗ
	|	ДанныеСчетовФактур КАК ДанныеСчетовФактур
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДанныеСчетовФактур.Грузополучатель,
	|	ДанныеСчетовФактур.Грузополучатель
	|ИЗ
	|	ДанныеСчетовФактур КАК ДанныеСчетовФактур
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДанныеСчетовФактур.Поставщик_Поставщик,
	|	ВЫБОР
	|		КОГДА ДанныеСчетовФактур.Поставщик_Поставщик.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА ДанныеСчетовФактур.Поставщик_Поставщик.ИндивидуальныйПредприниматель
	|		ИНАЧЕ ДанныеСчетовФактур.Поставщик_Поставщик
	|	КОНЕЦ
	|ИЗ
	|	ДанныеСчетовФактур КАК ДанныеСчетовФактур
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДанныеСчетовФактур.Получатель_Получатель,
	|	ДанныеСчетовФактур.Получатель_Получатель
	|ИЗ
	|	ДанныеСчетовФактур КАК ДанныеСчетовФактур
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеСчетовФактур.ПоверенныйОператор,
	|	ДанныеСчетовФактур.ПоверенныйОператор
	|ИЗ
	|	ДанныеСчетовФактур КАК ДанныеСчетовФактур
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектДляПоискаАдреса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОбъектыДляПоискаАдресов.Объект КАК Объект,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(400)) КАК Адрес
	|ПОМЕСТИТЬ Адреса
	|ИЗ
	|	ОбъектыДляПоискаАдресов КАК ОбъектыДляПоискаАдресов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И ОбъектыДляПоискаАдресов.ОбъектДляПоискаАдреса = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСчетовФактур.Дата,
	|	ДанныеСчетовФактур.ДатаОборота,
	|	ДанныеСчетовФактур.ГрузоотправительИдентификатор,
	|	ДанныеСчетовФактур.ГрузоотправительНаименование,
	|	ДанныеСчетовФактур.Грузоотправитель,
	|	ДанныеСчетовФактур.ГрузополучательИдентификатор,
	|	ДанныеСчетовФактур.ГрузополучательНаименование,
	|	ДанныеСчетовФактур.Грузополучатель,
	|	ДанныеСчетовФактур.ДоговорПоставки,
	|	ДанныеСчетовФактур.ДоговорПоставкиНомер,
	|	ДанныеСчетовФактур.ДоговорПоставкиДата,
	|	ДанныеСчетовФактур.ДоговорПоставкиУсловияОплаты,
	|	ДанныеСчетовФактур.ДоговорПоставкиСпособОтправления,
	|	ДанныеСчетовФактур.ВалютаКод,
	|	ДанныеСчетовФактур.Валюта,
	|	ВЫБОР
	|		КОГДА ДанныеСчетовФактур.Валюта <> &ВалютаРегламентированногоУчета
	|			ТОГДА ДанныеСчетовФактур.КурсВалюты
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КурсВалюты,
	|	ДанныеСчетовФактур.СчетФактура,
	|	ДанныеСчетовФактур.Поставщик_ПоставщикИдентификатор,
	|	ДанныеСчетовФактур.Поставщик_ПоставщикНаименование,
	|	ДанныеСчетовФактур.Поставщик_Поставщик,
	|	ДанныеСчетовФактур.Поставщик_СерияСвидетельстваПоНДС,
	|	ДанныеСчетовФактур.Поставщик_НомерСвидетельстваПоНДС,
	|	ДанныеСчетовФактур.Поставщик_ДокументПодтверждающийПоставку,
	|	ДанныеСчетовФактур.Поставщик_ДокументПодтверждающийПоставкуДата,
	|	ДанныеСчетовФактур.Поставщик_КБе,
	|	ДанныеСчетовФактур.Поставщик_ИИК,
	|	ДанныеСчетовФактур.Поставщик_БИК,
	|	ВЫБОР
	|		КОГДА ДанныеСчетовФактур.Валюта <> &ВалютаРегламентированногоУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Поставщик_ЭкспортерИлиУчастникСРП,
	|	ДанныеСчетовФактур.Поставщик_НаименованиеБанка,
	|	ДанныеСчетовФактур.Получатель_ПолучательИдентификатор,
	|	ДанныеСчетовФактур.Получатель_ПолучательНаименование,
	|	ДанныеСчетовФактур.Получатель_Получатель,
	|	ДанныеСчетовФактур.Получатель_СерияСвидетельстваПоНДС,
	|	ДанныеСчетовФактур.Получатель_НомерСвидетельстваПоНДС,
	|	ДанныеСчетовФактур.Получатель_КБе,
	|	ДанныеСчетовФактур.Получатель_ГосударственноеУчреждение,
	|	ДанныеСчетовФактур.Получатель_ФизическоеЛицо,
	|	ДанныеСчетовФактур.ЭтоДоговорСовместнойДеятельности,
	|	ДанныеСчетовФактур.ЭтоДоговорУчастникСРП,
	|	%ЭСФПоверенныйПокупателяБИН КАК ПоверенныйПокупателяБИН,
	|	%ЭСФПоверенныйПокупателяНаименование КАК ПоверенныйПокупателяНаименование,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(АдресаПоверенныйОператор.Адрес КАК СТРОКА(400)), """") КАК ПоверенныйПокупателяАдресМестонахождения,
	|	ДанныеСчетовФактур.Вид,
	|	ДанныеСчетовФактур.Направление,
	|	ДанныеСчетовФактур.ОсновнойСчетФактура,
	|	ДанныеСчетовФактур.ОсновнойСчетФактураДата,
	|	ДанныеСчетовФактур.Организация,
	|	ДанныеСчетовФактур.СтруктурноеПодразделение,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(АдресаГрузоотправителей.Адрес КАК СТРОКА(400)), """") КАК АдресОтправки,
	|	ВЫРАЗИТЬ(ДанныеСчетовФактур.АдресДоставки КАК СТРОКА(400)) КАК АдресДоставки,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(АдресаПоставщиков.Адрес КАК СТРОКА(400)), """") КАК Поставщик_Адрес,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(АдресаПолучателей.Адрес КАК СТРОКА(400)), """") КАК Получатель_Адрес,
	|	ДанныеСчетовФактур.СуммаВключаетАкциз,
	|	ДанныеСчетовФактур.СуммаВключаетНДС,
	|	ДанныеСчетовФактур.ГосучреждениеИИК,
	|	ДанныеСчетовФактур.ГосучреждениеКодТоваров,
	|	ДанныеСчетовФактур.ГосучреждениеНазначениеПлатежа,
	|	ДанныеСчетовФактур.ГосучреждениеБИК,
	|	ДанныеСчетовФактур.ДоверенностьНаПоставкуДата,
	|	ДанныеСчетовФактур.ДоверенностьНаПоставкуНомер,
	//новые реквизиты ЭСФ версии №
	|	ДанныеСчетовФактур.ГрузополучательКодСтраны КАК ГрузополучательКодСтраны,
	|	ДанныеСчетовФактур.Получатель_КодСтраны КАК Получатель_КодСтраны,
	|	ДанныеСчетовФактур.ДоговорПоставкиУсловияПоставки КАК ДоговорПоставкиУсловияПоставки,
	|	ДанныеСчетовФактур.СпособОтправленияПоКлассификатору КАК СпособОтправленияПоКлассификатору,
	//-=-=
	|	ДанныеСчетовФактур.УникальныйНомерВалютногоКонтроля КАК УникальныйНомерВалютногоКонтроля
	//-=-=
	|ИЗ
	|	ДанныеСчетовФактур КАК ДанныеСчетовФактур
	|		ЛЕВОЕ СОЕДИНЕНИЕ Адреса КАК АдресаПоставщиков
	|		ПО ДанныеСчетовФактур.Поставщик_Поставщик = АдресаПоставщиков.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Адреса КАК АдресаПолучателей
	|		ПО ДанныеСчетовФактур.Получатель_Получатель = АдресаПолучателей.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Адреса КАК АдресаГрузоотправителей
	|		ПО ДанныеСчетовФактур.Грузоотправитель = АдресаГрузоотправителей.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Адреса КАК АдресаПоверенныйОператор
	|		ПО ДанныеСчетовФактур.ПоверенныйОператор = АдресаПоверенныйОператор.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСчетовФактур.СчетФактура КАК СчетФактура
	|ИЗ
	|	ДанныеСчетовФактур КАК ДанныеСчетовФактур
	|ГДЕ
	|	ДанныеСчетовФактур.ЭтоДоговорСовместнойДеятельности
	|	ИЛИ ДанныеСчетовФактур.ЭтоДоговорУчастникСРП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСчетовФактур.СчетФактура КАК СчетФактура,
	|	ДанныеСчетовФактур.Вид КАК Вид,
	|	ДанныеСчетовФактур.ОсновнойСчетФактура КАК ОсновнойСчетФактура,
	|	ДанныеСчетовФактур.ОсновнойСчетФактура.Дата КАК ОсновнойСчетФактураДата,
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ОсновнойСчетФактураДокументПоставки,
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование.Дата КАК ОсновнойСчетФактураДокументПоставкиДата,
	|	ЭСФ.Ссылка КАК ОсновнойЭСФ,
	|	ЭСФ.Номер КАК ОсновнойЭСФНомер,
	|	ЭСФ.Дата КАК ОсновнойЭСФДата,
	|	ЭСФ.РегистрационныйНомер КАК ОсновнойЭСФРегистрационныйНомер,
	|	ЭСФ.ДокументПодтверждающийПоставкуНомер КАК ОсновнойЭСФДокументПодтверждающийПоставкуНомер,
	//-=-=
	|	ЭСФ.УникальныйНомерВалютногоКонтроля КАК УникальныйНомерВалютногоКонтроля
	//-=-=
	|ИЗ
	|	ДанныеСчетовФактур КАК ДанныеСчетовФактур
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
	|		ПО ДанныеСчетовФактур.ОсновнойСчетФактура = ЭСФ.СчетФактура
	|			И (ЭСФ.СчетФактура <> НЕОПРЕДЕЛЕНО)
	|			И (ЭСФ.СчетФактура <> ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка))
	|			И (ЭСФ.СчетФактура <> ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО ДанныеСчетовФактур.ОсновнойСчетФактура = СчетФактураВыданныйДокументыОснования.Ссылка
	|			И (СчетФактураВыданныйДокументыОснования.НомерСтроки = 1)
	|ГДЕ
	|	ДанныеСчетовФактур.Вид <> ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.ПустаяСсылка)
	|	И ДанныеСчетовФактур.Вид <> ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Обычный)";
	
	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%ЭСФДоговорКонтрагентаУчастникСРП", "");
	СоответсвиеИменРеквизитов.Вставить("%ЭСФПоверенныйОператор", "");
	СоответсвиеИменРеквизитов.Вставить("%ЭСФПоверенныйПокупателяБИН", "");
	СоответсвиеИменРеквизитов.Вставить("%ЭСФПоверенныйПокупателяНаименование", "");
	//-=-=
	СоответсвиеИменРеквизитов.Вставить("%КлассификаторСтранМира", "");
	//-=-=
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеИменРеквизитов);
	
	Если НЕ ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СчетФактураВыданный.СтруктурноеПодразделение КАК СтруктурноеПодразделение,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеСчетовФактур.СтруктурноеПодразделение,", "");
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("МассивСчетовФактур", МассивСчетовФактур);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура();
	Результат.Вставить("РеквизитыСчетовФактур",              МассивРезультатов[4]);
	Результат.Вставить("СчетаФактурыСовместнойДеятельности", МассивРезультатов[5]);
	Результат.Вставить("ОсновныеСчетаФактуры",               МассивРезультатов[6]);
	
	Возврат Результат;
	
КонецФункции

Функция НоваяВыборкаТоварыОсновныхСчетовФактурДляДополнительныхСчетовФактур(Знач ТаблицаДанныхОсновныхСчетовФактур)
	
	// Создать массив ссылок на основные счета-фактуры для дополнительных счетов-фактур.
	МассивОсновныхСчетовФактур = Новый Массив;
	Для Каждого СтрокаДанныхОсновныхСчетовФактур Из ТаблицаДанныхОсновныхСчетовФактур Цикл
		Если СтрокаДанныхОсновныхСчетовФактур.Вид = Перечисления.ВидыЭСФ.Дополнительный Тогда
			МассивОсновныхСчетовФактур.Добавить(СтрокаДанныхОсновныхСчетовФактур.ОсновнойСчетФактура);
		КонецЕсли;
	КонецЦикла;
	
	// Получить выборку товаров основных счетов-фактур для дополнительных счетов-фактур.
	Если МассивОсновныхСчетовФактур.Количество() <> 0 Тогда
		ВыборкаТоварыОсновных = НоваяВыборкаТовары(МассивОсновныхСчетовФактур);	
	Иначе
		ВыборкаТоварыОсновных = Неопределено;	
	КонецЕсли;
	
	Возврат ВыборкаТоварыОсновных;
	
КонецФункции

Функция НоваяВыборкаТовары(Знач МассивСчетовФактур, ОбъектЭСФ = Неопределено, ВыборкаРеквизиты = Неопределено)
	
	СсылкаСчетФактура = МассивСчетовФактур[0];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетовФактур", МассивСчетовФактур);	
	Запрос.УстановитьПараметр("ПустаяСсылкаИсточникПроисхождения", ПредопределенноеЗначение("Справочник.НомераГТД.ПустаяСсылка"));	
	ТоварыНомерГТДИсточникПроисхождения = "Товары.НомерГТД";

	Если ЭСФСерверПереопределяемый.ВедетсяУчетПоТоварамОрганизаций(СсылкаСчетФактура.Дата) Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураВыданныйТовары.Ссылка,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйНомераГТД.НомерГТД.НаименованиеТовара ЕСТЬ NULL 
		|			ТОГДА """"
		|		КОГДА СчетФактураВыданныйНомераГТД.НомерГТД.НаименованиеТовара = """"
		|			ТОГДА """"
		|		ИНАЧЕ СчетФактураВыданныйНомераГТД.НомерГТД.НаименованиеТовара
		|	КОНЕЦ КАК НаименованиеТовара,
		|	СчетФактураВыданныйТовары.Номенклатура,
		|	СчетФактураВыданныйТовары.Номенклатура.Услуга КАК ЭтоУслуга,
		|	СчетФактураВыданныйТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(СчетФактураВыданныйНомераГТД.НомерГТД, ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)) КАК НомерГТД,
		|	ВЫБОР КОГДА СчетФактураВыданныйНомераГТД.Количество = 0 ТОГДА
		|		1 
		|	ИНАЧЕ
		|		ЕСТЬNULL(СчетФактураВыданныйНомераГТД.Количество, 1)
		|	КОНЕЦ КАК БазисРаспределения,
		|	СчетФактураВыданныйТовары.Цена КАК Цена,
		|	СчетФактураВыданныйТовары.Количество КАК Количество,
		|	СчетФактураВыданныйТовары.СтавкаАкциза КАК СтавкаАкциза,
		|	СчетФактураВыданныйТовары.СтавкаНДС КАК СтавкаНДС,
		|	СчетФактураВыданныйТовары.СуммаАкциза КАК СуммаАкциза,
		|	СчетФактураВыданныйТовары.СуммаНДС КАК СуммаНДС,
		|	СчетФактураВыданныйТовары.ОборотПоРеализации КАК ОборотПоРеализации,
		|	СчетФактураВыданныйТовары.Сумма КАК Сумма,
		|	СчетФактураВыданныйТовары.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(СчетФактураВыданныйНомераГТД.НомерСтроки, 0) КАК НомерСтрокиНомераГТД,
		|	СчетФактураВыданныйТовары.КлючСвязи,
		|	СчетФактураВыданныйТовары.Номенклатура.ИдентификаторТовараЭСФ КАК ИдентификаторТовараЭСФ,
		|	"""" КАК НомерЗаявленияВРамкахТС, 
		|	"""" КАК НомерПозицииВДекларацииИлиЗаявлении,
		|	"""" КАК КодТНВЭД,
		|	"""" КАК ПризнакПроисхождения
		|ИЗ
		|	Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.НомераГТД КАК СчетФактураВыданныйНомераГТД
		|		ПО СчетФактураВыданныйТовары.КлючСвязи = СчетФактураВыданныйНомераГТД.КлючСвязи
		|			И СчетФактураВыданныйТовары.Ссылка = СчетФактураВыданныйНомераГТД.Ссылка
		|ГДЕ
		|	СчетФактураВыданныйТовары.Ссылка В(&МассивСчетовФактур)
		|УПОРЯДОЧИТЬ ПО СчетФактураВыданныйТовары.НомерСтроки, СчетФактураВыданныйНомераГТД.НомерСтроки";
		
		ТаблицаТовары = Запрос.Выполнить().Выгрузить();
		
		ТаблицаКлючейСвязи = ТаблицаТовары.Скопировать(, "КлючСвязи");
		ТаблицаКлючейСвязи.Свернуть("КлючСвязи");
		МассивКлючейСвязи = ТаблицаКлючейСвязи.ВыгрузитьКолонку("КлючСвязи");
		
		Для Каждого КлючСвязи Из МассивКлючейСвязи Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("КлючСвязи", КлючСвязи);
			МассивСтрокСКлючомСвязи = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
			
			МассивБазисовРаспределения = Новый Массив;
			Для Каждого СтрокаСКлючомСвязи Из МассивСтрокСКлючомСвязи Цикл
				МассивБазисовРаспределения.Добавить(СтрокаСКлючомСвязи.БазисРаспределения);	
			КонецЦикла;
			
			КоличествоДляРаспределения = МассивСтрокСКлючомСвязи[0].Количество;
			Если КоличествоДляРаспределения <> 0 Тогда
				РаспределенныйКоличество = ЭСФКлиентСерверПереопределяемый.РаспределитьПропорционально(КоличествоДляРаспределения, МассивБазисовРаспределения, 3);
				
				Для Индекс = 0 По РаспределенныйКоличество.ВГраница() Цикл
					МассивСтрокСКлючомСвязи[Индекс].Количество = РаспределенныйКоличество[Индекс];
				КонецЦикла;
				
			КонецЕсли;		
			
			АкцизДляРаспределения = МассивСтрокСКлючомСвязи[0].СуммаАкциза;
			Если АкцизДляРаспределения <> 0 Тогда
				РаспределенныйАкциз = ЭСФКлиентСерверПереопределяемый.РаспределитьПропорционально(АкцизДляРаспределения, МассивБазисовРаспределения);
				
				Для Индекс = 0 По РаспределенныйАкциз.ВГраница() Цикл
					МассивСтрокСКлючомСвязи[Индекс].СуммаАкциза = РаспределенныйАкциз[Индекс];
				КонецЦикла;
				
			КонецЕсли;
			
			НДСДляРаспределения = МассивСтрокСКлючомСвязи[0].СуммаНДС;
			Если НДСДляРаспределения <> 0 Тогда
				РаспределенныйНДС = ЭСФКлиентСерверПереопределяемый.РаспределитьПропорционально(НДСДляРаспределения, МассивБазисовРаспределения);
				
				Для Индекс = 0 По РаспределенныйНДС.ВГраница() Цикл
					МассивСтрокСКлючомСвязи[Индекс].СуммаНДС = РаспределенныйНДС[Индекс];
				КонецЦикла;
				
			КонецЕсли;

			ОборотДляРаспределения = МассивСтрокСКлючомСвязи[0].ОборотПоРеализации;
			Если ОборотДляРаспределения <> 0 Тогда
				РаспределенныйОборотПоРеализации = ЭСФКлиентСерверПереопределяемый.РаспределитьПропорционально(ОборотДляРаспределения, МассивБазисовРаспределения);
				
				Для Индекс = 0 По РаспределенныйОборотПоРеализации.ВГраница() Цикл
					МассивСтрокСКлючомСвязи[Индекс].ОборотПоРеализации = РаспределенныйОборотПоРеализации[Индекс];
				КонецЦикла;
				
			КонецЕсли;
			
			СуммаДляРаспределения = МассивСтрокСКлючомСвязи[0].Сумма;
			Если СуммаДляРаспределения <> 0 Тогда
				РаспределенныйСумма = ЭСФКлиентСерверПереопределяемый.РаспределитьПропорционально(СуммаДляРаспределения, МассивБазисовРаспределения);
				
				Для Индекс = 0 По РаспределенныйСумма.ВГраница() Цикл
					МассивСтрокСКлючомСвязи[Индекс].Сумма = РаспределенныйСумма[Индекс];
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураВыданныйТовары.Ссылка,
		|	СчетФактураВыданныйТовары.НаименованиеТовара,
		|	СчетФактураВыданныйТовары.Номенклатура,
		|	СчетФактураВыданныйТовары.ЭтоУслуга,
		|	СчетФактураВыданныйТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СчетФактураВыданныйТовары.НомерГТД КАК НомерГТД,
		|	СчетФактураВыданныйТовары.Цена КАК Цена,
		|	СчетФактураВыданныйТовары.Количество,
		|	СчетФактураВыданныйТовары.СтавкаАкциза КАК СтавкаАкциза,
		|	СчетФактураВыданныйТовары.СтавкаНДС КАК СтавкаНДС,
		|	СчетФактураВыданныйТовары.СуммаАкциза КАК СуммаАкциза,
		|	СчетФактураВыданныйТовары.СуммаНДС КАК СуммаНДС,
		|	СчетФактураВыданныйТовары.ОборотПоРеализации КАК ОборотПоРеализации,
		|	СчетФактураВыданныйТовары.Сумма КАК Сумма,
		|	СчетФактураВыданныйТовары.НомерСтроки КАК НомерСтроки,
		|	СчетФактураВыданныйТовары.НомерСтроки КАК НомерСтрокиНомераГТД,
		|	СчетФактураВыданныйТовары.ИдентификаторТовараЭСФ,
		|	СчетФактураВыданныйТовары.НомерЗаявленияВРамкахТС, 
		|	СчетФактураВыданныйТовары.НомерПозицииВДекларацииИлиЗаявлении,
		|	СчетФактураВыданныйТовары.КодТНВЭД,
		|	СчетФактураВыданныйТовары.ПризнакПроисхождения
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК СчетФактураВыданныйТовары
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураВыданныйТовары.Ссылка КАК СчетФактура,
		|	СчетФактураВыданныйТовары.НаименованиеТовара КАК ТоварНаименование,
		|	СчетФактураВыданныйТовары.Номенклатура КАК Товар,
		|	СчетФактураВыданныйТовары.ЭтоУслуга,
		|	СчетФактураВыданныйТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СчетФактураВыданныйТовары.НомерГТД КАК НомерГТД,
		|	СчетФактураВыданныйТовары.Цена КАК Цена,
		|	СчетФактураВыданныйТовары.Количество КАК Количество,
		|	СчетФактураВыданныйТовары.СтавкаАкциза КАК СтавкаАкциза,
		|	СчетФактураВыданныйТовары.СтавкаНДС КАК СтавкаНДС,
		|	СчетФактураВыданныйТовары.СуммаАкциза КАК СуммаАкциза,
		|	СчетФактураВыданныйТовары.СуммаНДС КАК СуммаНДС,
		|	СчетФактураВыданныйТовары.ОборотПоРеализации КАК ОборотПоРеализации,
		|	СчетФактураВыданныйТовары.Сумма КАК Сумма,
		|	1 КАК НомерТаблицы,
		|	СчетФактураВыданныйТовары.НомерСтроки КАК НомерСтроки,
		|	СчетФактураВыданныйТовары.НомерСтроки КАК НомерСтрокиНомераГТД,
		|	СчетФактураВыданныйТовары.ИдентификаторТовараЭСФ,
		|	СчетФактураВыданныйТовары.НомерЗаявленияВРамкахТС, 
		|	СчетФактураВыданныйТовары.НомерПозицииВДекларацииИлиЗаявлении,
		|	СчетФактураВыданныйТовары.КодТНВЭД,
		|	СчетФактураВыданныйТовары.ПризнакПроисхождения,
		|	0 КАК ДополнительныйИдентификатор,
		|	ЛОЖЬ КАК ПризнакУчетаНаВиртуальномСкладе
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	ВТ_Товары КАК СчетФактураВыданныйТовары";
		

	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураВыданныйТовары.Ссылка КАК СчетФактура,
		|	"""" КАК ТоварНаименование,
		|	СчетФактураВыданныйТовары.Номенклатура КАК Товар,
		|	СчетФактураВыданныйТовары.Номенклатура.Услуга КАК ЭтоУслуга,
		|	СчетФактураВыданныйТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД,
		|	СчетФактураВыданныйТовары.Цена КАК Цена,
		|	СчетФактураВыданныйТовары.Количество КАК Количество,
		|	СчетФактураВыданныйТовары.СтавкаАкциза КАК СтавкаАкциза,
		|	СчетФактураВыданныйТовары.СтавкаНДС КАК СтавкаНДС,
		|	СчетФактураВыданныйТовары.СуммаАкциза КАК СуммаАкциза,
		|	СчетФактураВыданныйТовары.СуммаНДС КАК СуммаНДС,
		|	СчетФактураВыданныйТовары.ОборотПоРеализации КАК ОборотПоРеализации,
		|	СчетФактураВыданныйТовары.Сумма КАК Сумма,
		|	1 КАК НомерТаблицы,
		|	СчетФактураВыданныйТовары.НомерСтроки КАК НомерСтроки,
		|	0 КАК НомерСтрокиНомераГТД,
		|	СчетФактураВыданныйТовары.Номенклатура.ИдентификаторТовараЭСФ КАК ИдентификаторТовараЭСФ,
		|	"""" КАК НомерЗаявленияВРамкахТС, 
		|	"""" КАК НомерПозицииВДекларацииИлиЗаявлении,
		|	"""" КАК КодТНВЭД,
		|	"""" КАК ПризнакПроисхождения,
		|	0 КАК ДополнительныйИдентификатор,
		|	ЛОЖЬ КАК ПризнакУчетаНаВиртуальномСкладе
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
		|ГДЕ
		|	СчетФактураВыданныйТовары.Ссылка В(&МассивСчетовФактур)";
		
	КонецЕсли;
	
	Если НЕ ЭСФСервер.ВедетсяУчетПоТоварамНаВС(СсылкаСчетФактура.Дата) Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетФактураВыданныйУслуги.Ссылка,
		|	СчетФактураВыданныйУслуги.Содержание,
		|	СчетФактураВыданныйУслуги.Номенклатура,
		|	СчетФактураВыданныйУслуги.Номенклатура.Услуга,
		|	СчетФактураВыданныйУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
		|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка),
		|	СчетФактураВыданныйУслуги.Цена КАК Цена,
		|	СчетФактураВыданныйУслуги.Количество,
		|	ЗНАЧЕНИЕ(Справочник.СтавкиАкциза.ПустаяСсылка),
		|	СчетФактураВыданныйУслуги.СтавкаНДС,
		|	0,
		|	СчетФактураВыданныйУслуги.СуммаНДС,
		|	СчетФактураВыданныйУслуги.ОборотПоРеализации,
		|	СчетФактураВыданныйУслуги.Сумма,
		|	2,
		|	СчетФактураВыданныйУслуги.НомерСтроки,
		|	0,
		|	СчетФактураВыданныйУслуги.Номенклатура.ИдентификаторТовараЭСФ КАК ИдентификаторТовараЭСФ,
		|	"""" КАК НомерЗаявленияВРамкахТС, 
		|	"""" КАК НомерПозицииВДекларацииИлиЗаявлении,
		|	"""" КАК КодТНВЭД,
		|	""6"" КАК ПризнакПроисхождения,
		|	0 КАК ДополнительныйИдентификатор,
		|	ЛОЖЬ КАК ПризнакУчетаНаВиртуальномСкладе
		|ИЗ
		|	Документ.СчетФактураВыданный.Услуги КАК СчетФактураВыданныйУслуги
		|ГДЕ
		|	СчетФактураВыданныйУслуги.Ссылка В(&МассивСчетовФактур)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетФактураВыданныйОС.Ссылка,
		|	"""",
		|	СчетФактураВыданныйОС.ОсновноеСредство,
		|	ЛОЖЬ, // признак услуги
		|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка),
		|	0 КАК Цена,
		|	1,
		|	ЗНАЧЕНИЕ(Справочник.СтавкиАкциза.ПустаяСсылка),
		|	СчетФактураВыданныйОС.СтавкаНДС,
		|	0,
		|	СчетФактураВыданныйОС.СуммаНДС,
		|	СчетФактураВыданныйОС.ОборотПоРеализации,
		|	СчетФактураВыданныйОС.Сумма,
		|	3,
		|	СчетФактураВыданныйОС.НомерСтроки,
		|	0,
		|	СчетФактураВыданныйОС.ОсновноеСредство.ИдентификаторТовараЭСФ КАК ИдентификаторТовараЭСФ,
		|	"""" КАК НомерЗаявленияВРамкахТС, 
		|	"""" КАК НомерПозицииВДекларацииИлиЗаявлении,
		|	"""" КАК КодТНВЭД,
		|	""5"" КАК ПризнакПроисхождения,
		|	0 КАК ДополнительныйИдентификатор,
		|	ЛОЖЬ КАК ПризнакУчетаНаВиртуальномСкладе
		|ИЗ
		|	Документ.СчетФактураВыданный.ОС КАК СчетФактураВыданныйОС
		|ГДЕ
		|	СчетФактураВыданныйОС.Ссылка В(&МассивСчетовФактур)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетФактураВыданныйНМА.Ссылка,
		|	"""",
		|	СчетФактураВыданныйНМА.НематериальныйАктив,
		|	ЛОЖЬ, // признак услуги
		|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка),
		|	0 КАК Цена,
		|	1,
		|	ЗНАЧЕНИЕ(Справочник.СтавкиАкциза.ПустаяСсылка),
		|	СчетФактураВыданныйНМА.СтавкаНДС,
		|	0,
		|	СчетФактураВыданныйНМА.СуммаНДС,
		|	СчетФактураВыданныйНМА.ОборотПоРеализации,
		|	СчетФактураВыданныйНМА.Сумма,
		|	4,
		|	СчетФактураВыданныйНМА.НомерСтроки,
		|	0,
		|	СчетФактураВыданныйНМА.НематериальныйАктив.ИдентификаторТовараЭСФ КАК ИдентификаторТовараЭСФ,
		|	"""" КАК НомерЗаявленияВРамкахТС, 
		|	"""" КАК НомерПозицииВДекларацииИлиЗаявлении,
		|	"""" КАК КодТНВЭД,
		|	""5"" КАК ПризнакПроисхождения,
		|	0 КАК ДополнительныйИдентификатор,
		|	ЛОЖЬ КАК ПризнакУчетаНаВиртуальномСкладе
		|ИЗ
		|	Документ.СчетФактураВыданный.НМА КАК СчетФактураВыданныйНМА
		|ГДЕ
		|	СчетФактураВыданныйНМА.Ссылка В(&МассивСчетовФактур)
		|";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.СчетФактура КАК СчетФактура,
	|	Товары.ТоварНаименование КАК ТоварНаименованиеВРамкахТС,
	|	ВЫБОР 
	|		КОГДА Товары.ЭтоУслуга И Товары.ТоварНаименование <> """"
	|			ТОГДА Товары.ТоварНаименование // в этом поле содержится Содержание услуги
	|		ИНАЧЕ 
	|			ВЫБОР
	|				КОГДА (ВЫРАЗИТЬ(Товары.Товар.НаименованиеПолное КАК СТРОКА(1024))) <> """"
	|					ТОГДА ВЫРАЗИТЬ(Товары.Товар.НаименованиеПолное КАК СТРОКА(1024))
	|				ИНАЧЕ Товары.Товар.Наименование
	|			КОНЕЦ
	|	КОНЕЦ КАК ТоварНаименование,
	|	Товары.Товар,
	|	ВЫБОР
	|		КОГДА Товары.КодТНВЭД <> """" 
	|			ТОГДА Товары.КодТНВЭД
	|		КОГДА Товары.Товар ССЫЛКА Справочник.Номенклатура" + ТекстЗапросаКодТНВЭДОСИНМА() + "
	|			ТОГДА Товары.Товар.КодТНВЭД
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодТНВЭД,
	|	Товары.ЭтоУслуга,
	|	ВЫБОР
	|		КОГДА Товары.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяССылка)
	|			ТОГДА Товары.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ ""шт""
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяССылка)
	|			ТОГДА Товары.ЕдиницаИзмерения.КодЭСФ
	|		ИНАЧЕ ""796""
	|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
	|	Товары.ЕдиницаИзмерения,
	|	%1,
	|	Товары.Цена,
	|	Товары.Количество,
	|	ЕСТЬNULL(Товары.СтавкаАкциза.Ставка, 0) КАК СтавкаАкцизаЧисло,
	|	Товары.СтавкаАкциза,
	|	Товары.СуммаАкциза,
	|	Товары.ОборотПоРеализации,
	|	ЕСТЬNULL(Товары.СтавкаНДС.Ставка, 0) КАК СтавкаНДСЧисло,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Товары.СтавкаНДС.ДляОсвобожденногоОборота, ЛОЖЬ) = ИСТИНА 
	|			ТОГДА	ЕСТЬNULL(Товары.СтавкаНДС.ДляОсвобожденногоОборота, ЛОЖЬ) 
	|		ИНАЧЕ ЕСТЬNULL(Товары.СтавкаНДС.МестоРеализацииНеРК, ЛОЖЬ) 
	|	КОНЕЦ КАК БезНДС,
	|	Товары.СтавкаНДС,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Товары.СтавкаНДС, ЛОЖЬ) = ИСТИНА 
	|			ТОГДА	ЛОЖЬ
	|		ИНАЧЕ ЕСТЬNULL(Товары.СтавкаНДС.МестоРеализацииНеРК, ЛОЖЬ) 
	|	КОНЕЦ КАК СтавкаНДСМестоРеализацииНеРК,
	|	Товары.СуммаНДС,
	|	Товары.Сумма,
	|	Товары.ИдентификаторТовараЭСФ КАК ИдентификаторТовара,
	|	Товары.НомерЗаявленияВРамкахТС, 
	|	Товары.НомерПозицииВДекларацииИлиЗаявлении,
	|	Товары.ПризнакПроисхождения КАК ПризнакПроисхождения,
	|	Товары.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор,
	|	Товары.ПризнакУчетаНаВиртуальномСкладе КАК ПризнакУчетаНаВиртуальномСкладе
	|ИЗ
	|	Товары КАК Товары
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерТаблицы,
	|	Товары.НомерСтроки,
	|	Товары.НомерСтрокиНомераГТД
	|ИТОГИ ПО
	|	СчетФактура";
	
	Запрос.Текст = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Запрос.Текст, ТоварыНомерГТДИсточникПроисхождения);	
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат Выборка;
	
КонецФункции

Процедура ЗаполнитьРеквизитыПоставщика(ПоставщикиСтрока, ВыборкаРеквизиты, СсылкаСчетФактура, ВерсияЭСФ)
	
	// Аналогичный подход применяется при формировании печатной формы СФВ.
	Если СсылкаСчетФактура.Поставщик = СсылкаСчетФактура.Организация Тогда
		// Для СП выводим реквизиты СП.
		Поставщик = ЭСФСерверПереопределяемый.ПолучитьСтруктурнуюЕдиницу(СсылкаСчетФактура.Организация, СсылкаСчетФактура.СтруктурноеПодразделение);
	Иначе	
		// Если в счете-фактуре указываются данные головной организации, то собственные данные СП игнорируем.
		Поставщик = СсылкаСчетФактура.Поставщик; 
	КонецЕсли;
	
	Если ВерсияЭСФ = 2 Тогда
		
		Если ЗначениеЗаполнено(СсылкаСчетФактура.СтруктурноеПодразделение)
			И СсылкаСчетФактура.СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации Тогда
			ПоставщикиСтрока.БИНФилиала =
				СсылкаСчетФактура.СтруктурноеПодразделение.ИдентификационныйНомер;
		ИначеЕсли СсылкаСчетФактура.Организация.УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуре Тогда
			ПоставщикиСтрока.БИНФилиала =
				СсылкаСчетФактура.Организация.ИдентификационныйНомер;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(Поставщик) = Тип("СправочникСсылка.Организации") Тогда
		ПоставщикОрганизация = Поставщик;
	Иначе
		ПоставщикОрганизация = Поставщик.Владелец;
	КонецЕсли;
	
	ПоставщикиСтрока.ПоставщикИдентификатор = Поставщик.ИдентификационныйНомер;
	ПоставщикиСтрока.ПоставщикНаименование = Поставщик.НаименованиеПолное;
	ПоставщикиСтрока.Поставщик = Поставщик;
	ПоставщикиСтрока.Адрес = ЮридическийАдресПоставщика(Поставщик);
	ПоставщикиСтрока.СерияСвидетельстваПоНДС = ПоставщикОрганизация.СерияСвидетельстваПоНДС; 
	ПоставщикиСтрока.НомерСвидетельстваПоНДС = ПоставщикОрганизация.НомерСвидетельстваПоНДС;
	ПоставщикиСтрока.Комитент = Ложь;
	ПоставщикиСтрока.Комиссионер = Ложь;
	ПоставщикиСтрока.Экспедитор = Ложь;
	ПоставщикиСтрока.Лизингодатель = Ложь;
	ПоставщикиСтрока.УчастникСовместнойДеятельности = Ложь;
	ПоставщикиСтрока.ЭкспортерИлиУчастникСРП = Ложь;
	ПоставщикиСтрока.ДополнительныеСведения = "";
	ПоставщикиСтрока.КБе = ПоставщикОрганизация.КБЕ;
	ПоставщикиСтрока.ИИК = ВыборкаРеквизиты.Поставщик_ИИК;
	ПоставщикиСтрока.БИК = ВыборкаРеквизиты.Поставщик_БИК;
	ПоставщикиСтрока.НаименованиеБанка = ВыборкаРеквизиты.Поставщик_НаименованиеБанка;
	ПоставщикиСтрока.ДоляУчастия = 0;
	
	//новые реквизиты в версии №2
	ПоставщикиСтрока.УчастникСРП = Ложь;
	ПоставщикиСтрока.Экспортер = Ложь;
	ПоставщикиСтрока.МеждународныйПеревозчик = Ложь;
	ПоставщикиСтрока.Доверитель = Ложь;
	
	ПоставщикиСтрока.ЯвляетсяСтруктурнымПодразделениемНерезидента = ЭСФСерверПереопределяемый.ПолучитьПризнакЯвляетсяСтруктурнымПодразделениемНерезидента(Поставщик);
	
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуТаблицыТоварыИсходящегоЭСФ(Знач ВыборкаТовары, Знач СуммаВключаетАкциз, Знач СуммаВключаетНДС, СтрокаТаблицыТовары, ВерсияЭСФ, ВедетсяУчетПоТоварамНаВС, СтруктураСтавкиНДСМестоРеализацииНеРК)
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицыТовары, ВыборкаТовары);
	
	Если ТипЗнч(СтрокаТаблицыТовары.Товар) = Тип("СправочникСсылка.Номенклатура") И СтрокаТаблицыТовары.Товар.Услуга Тогда
			СтрокаТаблицыТовары.ТоварНаименованиеВРамкахТС = "";
	КонецЕсли;		
	
	СтрокаТаблицыТовары.ЕдиницаИзмеренияНаименование = СокрЛП(СтрокаТаблицыТовары.ЕдиницаИзмеренияНаименование);
	СтрокаТаблицыТовары.ТоварНаименование = НаименованиеТовара(ВыборкаТовары);
		
	// Заполнить реквизит ЕдиницаИзмерения.
	Если ЗначениеЗаполнено(ВыборкаТовары.ЕдиницаИзмерения) Тогда
		СтрокаТаблицыТовары.ЕдиницаИзмерения = ВыборкаТовары.ЕдиницаИзмерения;	
	Иначе
		СтрокаТаблицыТовары.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт", Истина);	
	КонецЕсли;
	
	//Заполнить реквизит ЕдиницаИзмеренияКод
	Если ЗначениеЗаполнено(ВыборкаТовары.ЕдиницаИзмеренияКод) Тогда
		СтрокаТаблицыТовары.ЕдиницаИзмеренияКод = СокрЛП(ВыборкаТовары.ЕдиницаИзмеренияКод);
	КонецЕсли;
	
	// Заполнить реквизит СуммаБезНалогов. 
	СуммаБезНалогов = ВыборкаТовары.Сумма; 
	Если СуммаВключаетАкциз Тогда
		СуммаБезНалогов = СуммаБезНалогов - ВыборкаТовары.СуммаАкциза;
	КонецЕсли;
	Если СуммаВключаетНДС Тогда
		СуммаБезНалогов = СуммаБезНалогов - ВыборкаТовары.СуммаНДС;	
	КонецЕсли;	
	СтрокаТаблицыТовары.СуммаБезНалогов = Окр(СуммаБезНалогов, 2);
	
	// Заполнить реквизит Цена.
	Если СтрокаТаблицыТовары.Цена <> 0 И НЕ СуммаВключаетНДС И НЕ СуммаВключаетАкциз  Тогда
		//Ничего не делаем, цена уже заполнена с помощью ЗаполнитьЗначенияСвойств, расчет не требуется		
	Иначе 
		Если СтрокаТаблицыТовары.Количество <> 0 Тогда
			СтрокаТаблицыТовары.Цена = Окр(СтрокаТаблицыТовары.СуммаБезНалогов / СтрокаТаблицыТовары.Количество, 2);
		Иначе
			СтрокаТаблицыТовары.Цена = СтрокаТаблицыТовары.СуммаБезНалогов;	
		КонецЕсли;
	КонецЕсли;

	// Заполнить реквизит Сумма.		
	СтрокаТаблицыТовары.Сумма = СтрокаТаблицыТовары.СуммаБезНалогов + ВыборкаТовары.СуммаАкциза + ВыборкаТовары.СуммаНДС;
	
	Если ВерсияЭСФ = 1 Тогда
		Если Не ПустаяСтрока(ВыборкаТовары.ТоварНаименованиеВРамкахТС) Тогда
			СтрокаТаблицыТовары.ТоварНаименование = ВыборкаТовары.ТоварНаименованиеВРамкахТС;
		КонецЕсли;	
	КонецЕсли;	
	
	// ПризнакПроисхождения товаров для услуг
	Если НЕ ЗначениеЗаполнено(ВыборкаТовары.ПризнакПроисхождения) Тогда
		Если ВыборкаТовары.ЭтоУслуга Тогда
			СтрокаТаблицыТовары.ПризнакПроисхождения = 6; // «6» – в случае выполнения работ, оказания услуг.
		Иначе
			СтрокаТаблицыТовары.ПризнакПроисхождения = 5; // «5» – товары, если не ведется учет по источникам происхождения
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТаблицыТовары.ИдентификаторТовара) Тогда
		СтрокаТаблицыТовары.ИдентификаторТовара = "1";
	КонецЕсли;
	
	Если ВыборкаТовары.СтавкаНДСМестоРеализацииНеРК Тогда
		СтруктураСтавкиНДСМестоРеализацииНеРК.Вставить("ЕстьСтавкаНДСМестоРеализацииНеРК", Истина);
	Иначе
		СтруктураСтавкиНДСМестоРеализацииНеРК.Вставить("ВсеСтавкиНДСМестоРеализацииНеРК" , Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуТоварыДополнительногоИсходящегоЭСФ(Знач ВыборкаРеквизиты, ВыборкаТовары, ТаблицаДанныхОсновныхСчетовФактур, ТаблицаТовары, ВерсияЭСФ, СтруктураСтавкиНДСМестоРеализацииНеРК)
	
	ВедетсяУчетПоТоварамНаВС = ЭСФСервер.ВедетсяУчетПоТоварамНаВС(ВыборкаРеквизиты.Дата);
	
	Если НЕ ВедетсяУчетПоТоварамНаВС Тогда
		
		Если НЕ ЗначениеЗаполнено(ВыборкаРеквизиты.ОсновнойСчетФактура) Тогда
			ТекстИсключения = НСтр("ru = 'В дополнительном счете-фактуре ""[СчетФактураВыданный]"" не заполнен реквизит ""Основной счет-фактура"".'");
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "[СчетФактураВыданный]", ВыборкаРеквизиты.СчетФактура); 
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		ДатаПереходаНомеровГТД = Константы.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ.Получить();
		НуженОтборПоНомеруГТД  = НачалоДня(ВыборкаРеквизиты.ОсновнойСчетФактураДата) >= ДатаПереходаНомеровГТД;
		
		ВыборкаТоварыОсновных = НоваяВыборкаТоварыОсновныхСчетовФактурДляДополнительныхСчетовФактур(ТаблицаДанныхОсновныхСчетовФактур);
		
		// В дополнительном и основном ЭСФ, в таблице "Товары", 
		// должно совпадать количество строк и порядок их следования.
		
		// Заполнить таблицу "Товары" по основному счету-фактуре.
		ВыборкаТоварыОсновных.Сбросить();
		Если ВыборкаТоварыОсновных.НайтиСледующий(ВыборкаРеквизиты.ОсновнойСчетФактура, "СчетФактура") Тогда
			ВыборкаТоварыОсновныхДетальныеЗаписи = ВыборкаТоварыОсновных.Выбрать();
			Пока ВыборкаТоварыОсновныхДетальныеЗаписи.Следующий() Цикл
				СтрокаТаблицыТовары = ТаблицаТовары.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыТовары, ВыборкаТоварыОсновныхДетальныеЗаписи, 
				"ТоварНаименование, Товар, КодТНВЭД, ЕдиницаИзмеренияНаименование, ЕдиницаИзмерения, ЕдиницаИзмеренияКод, 
				|НомерГТД, ТоварНаименованиеВРамкахТС, ИдентификаторТовара, СтавкаНДС, СтавкаНДСЧисло, БезНДС");// добавлено поле БезНДС
				
				СтрокаТаблицыТовары.ТоварНаименование = НаименованиеТовара(ВыборкаТоварыОсновныхДетальныеЗаписи);
				Если Не ЗначениеЗаполнено(СтрокаТаблицыТовары.ИдентификаторТовара) Тогда
					СтрокаТаблицыТовары.ИдентификаторТовара = "1";
				КонецЕсли;		
			КонецЦикла;
		КонецЕсли;		
		
		// Найти и изменить, в таблице "Товары", строки, измененные в дополнительном счете-фактуре.
		НомераЗанятыхСтрок = Новый Массив;
		ВыборкаТовары.Сбросить();
		
		Если ВыборкаТовары.НайтиСледующий(ВыборкаРеквизиты.СчетФактура, "СчетФактура") Тогда
			
			ВыборкаТоварыДетальныеЗаписи = ВыборкаТовары.Выбрать();
			
			Пока ВыборкаТоварыДетальныеЗаписи.Следующий() Цикл
				
				// Найти строку для модификации, в которую будут записаны данные дополнительного счета-фактуры.
				СтрокаДляМодификации = Неопределено;
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ТоварНаименование", НаименованиеТовара(ВыборкаТоварыДетальныеЗаписи));  
				ПараметрыОтбора.Вставить("Товар", ВыборкаТоварыДетальныеЗаписи.Товар);
				ПараметрыОтбора.Вставить("ЕдиницаИзмерения", ВыборкаТоварыДетальныеЗаписи.ЕдиницаИзмерения);
				
				Если НуженОтборПоНомеруГТД Тогда
					ПараметрыОтбора.Вставить("НомерГТД", ВыборкаТоварыДетальныеЗаписи.НомерГТД);	
				КонецЕсли;
				
				МассивНайденныхСтрок = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);	
				Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
					Если НомераЗанятыхСтрок.Найти(НайденнаяСтрока.НомерСтроки) = Неопределено Тогда
						СтрокаДляМодификации = НайденнаяСтрока;
						НомераЗанятыхСтрок.Добавить(СтрокаДляМодификации.НомерСтроки);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				// Заполнить найденную строку, иначе если не удалось найти строку, то вызвать исключение. 
				Если СтрокаДляМодификации <> Неопределено Тогда
					
					ЗаполнитьСтрокуТаблицыТоварыИсходящегоЭСФ(ВыборкаТоварыДетальныеЗаписи, ВыборкаРеквизиты.СуммаВключаетАкциз, ВыборкаРеквизиты.СуммаВключаетНДС, СтрокаДляМодификации, ВерсияЭСФ, ВедетсяУчетПоТоварамНаВС, СтруктураСтавкиНДСМестоРеализацииНеРК);
					//ЗаполнитьСтрокуТаблицыТоварыИсходящегоЭСФ(ВыборкаТоварыДетальныеЗаписи, ВыборкаРеквизиты.СуммаВключаетАкциз, ВыборкаРеквизиты.СуммаВключаетНДС, СтрокаДляМодификации, ВерсияЭСФ, ВедетсяУчетПоТоварамНаВС);
					
				Иначе
					ТекстИсключения = НСтр(
	                "ru = 'Ошибка при заполнении документа ""ЭСФ"".
	                |
	                |При заполнении дополнительного ""ЭСФ"" по данным дополнительного счета-фактуры:
	                |""%ДополнительныйСчетФактура%"" 
	                |не удалось заполнить таблицу ""Товары"", поскольку в таблице ""Товары"" дополнительного счета-фактуры, 
	                |%СписокПолей% 
	                |больше, чем в основном счете-фактуре: ""%ОсновнойСчетФактура%"".'");
	                                
	                Если НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(ВыборкаРеквизиты.Дата) Тогда
	                    ТекстИсключения = СтрЗаменить(ТекстИсключения, "%СписокПолей%", НСтр("ru = 'строк, с номенклатурой: ""%Номенклатура%"", единицей измерения: ""%ЕдиницаИзмерения%"" и номером ГТД: ""%НомерГТД%"",'"));
	                Иначе
	                    ТекстИсключения = СтрЗаменить(ТекстИсключения, "%СписокПолей%", НСтр("ru = 'строк, с номенклатурой ""%Номенклатура%"" и единицей измерения ""%ЕдиницаИзмерения%"",'"));
	                КонецЕсли;
					
					ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ДополнительныйСчетФактура%", ВыборкаРеквизиты.СчетФактура);
					ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ОсновнойСчетФактура%", ВыборкаРеквизиты.ОсновнойСчетФактура);
					ТекстИсключения = СтрЗаменить(ТекстИсключения, "%Номенклатура%", НаименованиеТовара(ВыборкаТоварыДетальныеЗаписи));
					ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ЕдиницаИзмерения%", ВыборкаТоварыДетальныеЗаписи.ЕдиницаИзмерения);
					ТекстИсключения = СтрЗаменить(ТекстИсключения, "%НомерГТД%", ВыборкаТоварыДетальныеЗаписи.НомерГТД);
					
					ВызватьИсключение ТекстИсключения;
					
				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ЮридическийАдресПоставщика(Поставщик)
	
	Адрес = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид В(&МассивВидов)";
	
	Если ТипЗнч(Поставщик) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Запрос.УстановитьПараметр("Объект", Поставщик);
	Иначе
		Если Поставщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			Запрос.УстановитьПараметр("Объект", Поставщик);
		Иначе
			Запрос.УстановитьПараметр("Объект", Поставщик.ИндивидуальныйПредприниматель);
		КонецЕсли;
	КонецЕсли;

	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	МассивВидов = Новый Массив;
	МассивВидов.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	МассивВидов.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица);
	Запрос.УстановитьПараметр("МассивВидов", МассивВидов);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Адрес = Выборка.Представление;
	КонецЕсли;
		
	Возврат Адрес;
	
КонецФункции

Функция ВыборкаПоТоварамИзПеречня(Знач ОбъектЭСФ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Товар КАК Товар,
		|	Товары.КодТНВЭД КАК КодТНВЭД,
		|	Товары.НомерГТД КАК НомерГТД
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК Товары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Товары.КодТНВЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсточникиПроисхождения.ГСВС КАК НоменклатураГСВС,
		|	1 КАК ПриоритетПоискаНоменклатурыГСВС,
		|	ИсточникиПроисхождения.ГСВС.КодГСВС КАК КодГСВС
		|ПОМЕСТИТЬ ВТ_НоменклатураГСВС
		|ИЗ
		|	вт_Товары КАК ДанныеИсточникиПроисхождения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК ИсточникиПроисхождения
		|		ПО (ИсточникиПроисхождения.Ссылка = ДанныеИсточникиПроисхождения.НомерГТД)
		|ГДЕ
		|	НЕ ДанныеИсточникиПроисхождения.НомерГТД ЕСТЬ NULL
		|	И НЕ ДанныеИсточникиПроисхождения.НомерГТД = НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НоменклатураГСВС.Ссылка,
		|	2,
		|	НоменклатураГСВС.КодГСВС
		|ИЗ
		|	Справочник.НоменклатураГСВС КАК НоменклатураГСВС
		|ГДЕ
		|	НоменклатураГСВС.КодГСВС В
		|			(ВЫБРАТЬ
		|				ДанныеДокумента.КодТНВЭД
		|			ИЗ
		|				вт_Товары КАК ДанныеДокумента)
		|	И НоменклатураГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.ТНВЭД)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОНоменклатуреГСВС.НоменклатураГСВС,
		|	ВЫБОР
		|		КОГДА СведенияОНоменклатуреГСВС.ПризнакАктивности
		|				И &ДатаОборота >= НАЧАЛОПЕРИОДА(СведенияОНоменклатуреГСВС.ДействиеЗаписиНачальнаяДата, ДЕНЬ)
		|				И &ДатаОборота <= ВЫБОР
		|					КОГДА СведенияОНоменклатуреГСВС.ДействиеЗаписиКонечнаяДата = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА &ДатаОборота
		|					ИНАЧЕ СведенияОНоменклатуреГСВС.ДействиеЗаписиКонечнаяДата
		|				КОНЕЦ
		|			ТОГДА 3
		|		ИНАЧЕ 4
		|	КОНЕЦ,
		|	ПОДСТРОКА(СведенияОНоменклатуреГСВС.ПолныйКодГСВС, 13, 10)
		|ИЗ
		|	РегистрСведений.СведенияОНоменклатуреГСВС КАК СведенияОНоменклатуреГСВС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_Товары КАК ДанныеДокументаОбъекта
		|		ПО (ПОДСТРОКА(СведенияОНоменклатуреГСВС.ПолныйКодГСВС, 13, 10) = ДанныеДокументаОбъекта.КодТНВЭД)
		|			И (СведенияОНоменклатуреГСВС.НоменклатураГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.ТНВЭД))
		|			И (СведенияОНоменклатуреГСВС.Период <= &ДатаОборота)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПриоритетПоискаНоменклатурыГСВС,
		|	КодГСВС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НоменклатураГСВС.КодГСВС КАК КодГСВС,
		|	МИНИМУМ(ВТ_НоменклатураГСВС.ПриоритетПоискаНоменклатурыГСВС) КАК ПриоритетПоискаНоменклатурыГСВС
		|ПОМЕСТИТЬ ВТ_НоменклатураГСВСМинимум
		|ИЗ
		|	ВТ_НоменклатураГСВС КАК ВТ_НоменклатураГСВС
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_НоменклатураГСВС.КодГСВС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодГСВС,
		|	ПриоритетПоискаНоменклатурыГСВС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВТ_НоменклатураГСВС.НоменклатураГСВС) КАК НоменклатураГСВС,
		|	ВТ_НоменклатураГСВС.КодГСВС КАК КодГСВСПервичный
		|ПОМЕСТИТЬ ВТ_НоменклатураГСВССгруппированная
		|ИЗ
		|	ВТ_НоменклатураГСВС КАК ВТ_НоменклатураГСВС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НоменклатураГСВСМинимум КАК ВТ_НоменклатураГСВСМинимум
		|		ПО ВТ_НоменклатураГСВС.КодГСВС = ВТ_НоменклатураГСВСМинимум.КодГСВС
		|			И ВТ_НоменклатураГСВС.ПриоритетПоискаНоменклатурыГСВС = ВТ_НоменклатураГСВСМинимум.ПриоритетПоискаНоменклатурыГСВС
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_НоменклатураГСВС.КодГСВС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НоменклатураГСВС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОНоменклатуреГСВССрезПоследних.НоменклатураГСВС КАК НоменклатураГСВС,
		|	СведенияОНоменклатуреГСВССрезПоследних.ПризнакУчетаНаВиртуальномСкладе КАК ПризнакУчетаНаВиртуальномСкладе,
		|	СведенияОНоменклатуреГСВССрезПоследних.ПризнакПеречняИзьятий КАК ПризнакПеречняИзьятий,
		|	СведенияОНоменклатуреГСВССрезПоследних.ПолныйКодГСВС КАК ПолныйКодГСВС,
		|	ПОДСТРОКА(СведенияОНоменклатуреГСВССрезПоследних.ПолныйКодГСВС, 13, 10) КАК КодГСВС,
		|	СведенияОНоменклатуреГСВССрезПоследних.ПризнакАктивности КАК ПризнакАктивности,
		|	НоменклатураГСВССгруппированная.КодГСВСПервичный КАК КодГСВСПервичный,
		|	0 КАК Приоритет
		|ПОМЕСТИТЬ ВТ_КодыГСВСАктуальные
		|ИЗ
		|	РегистрСведений.СведенияОНоменклатуреГСВС.СрезПоследних(
		|			&ДатаОборота,
		|			НоменклатураГСВС В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					Т.НоменклатураГСВС
		|				ИЗ
		|					ВТ_НоменклатураГСВССгруппированная КАК Т)) КАК СведенияОНоменклатуреГСВССрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НоменклатураГСВССгруппированная КАК НоменклатураГСВССгруппированная
		|		ПО (НоменклатураГСВССгруппированная.НоменклатураГСВС = СведенияОНоменклатуреГСВССрезПоследних.НоменклатураГСВС)
		|			И (СведенияОНоменклатуреГСВССрезПоследних.ПризнакАктивности)
		|			И (&ДатаОборота >= НАЧАЛОПЕРИОДА(СведенияОНоменклатуреГСВССрезПоследних.ДействиеЗаписиНачальнаяДата, ДЕНЬ))
		|			И (&ДатаОборота <= ВЫБОР
		|				КОГДА СведенияОНоменклатуреГСВССрезПоследних.ДействиеЗаписиКонечнаяДата = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА &ДатаОборота
		|				ИНАЧЕ СведенияОНоменклатуреГСВССрезПоследних.ДействиеЗаписиКонечнаяДата
		|			КОНЕЦ)
		|ИНДЕКСИРОВАТЬ ПО
		|	КодГСВСПервичный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_Товары.НомерСтроки КАК НомерСтроки,
		|	ВТ_Товары.Товар,
		|	ВТ_Товары.Товар.Услуга КАК Услуга,
		| ВЫБОР
		|	КОГДА ВТ_КодыГСВСАктуальныеПоИсточнику.КодГСВС ЕСТЬ NULL
		|		ТОГДА ЕСТЬNULL(ВТ_КодыГСВСАктуальныеПоНоменклатуре.КодГСВС, Вт_Товары.КодТНВЭД)
		|	ИНАЧЕ ВТ_КодыГСВСАктуальныеПоИсточнику.КодГСВС
		|	КОНЕЦ КАК КодТНВЭД,   
		|	ЕСТЬNULL(ИсточникиПроисхождения.Код, """") КАК НомерГТДНомерЗаявленияНомерСертификата,
		|	ЕСТЬNULL(ИсточникиПроисхождения.НомерСтрокиГТД, """") КАК НомерСтрокиГТД,
		|	ЕСТЬNULL(ИсточникиПроисхождения.СтранаПроисхожденияТовара, """") КАК СтранаПроисхожденияТовара,
		|	ЕСТЬNULL(ИсточникиПроисхождения.СпособПроисхожденияТовара, ЗНАЧЕНИЕ(Перечисление.СпособыПроисхожденияТоваров.ПустаяСсылка)) КАК СпособПроисхожденияТовара,
		|	ЕСТЬNULL(ИсточникиПроисхождения.РегистрационныйНомерЭСФ, """") КАК РегистрационныйНомерЭСФ,
		|	ЕСТЬNULL(ИсточникиПроисхождения.ПризнакПроисхождения, """") КАК ПризнакПроисхождения,
		|ВЫБОР
		|	КОГДА ВТ_КодыГСВСАктуальныеПоИсточнику.ПризнакПеречняИзьятий ЕСТЬ NULL
		|		ТОГДА ЕСТЬNULL(ВТ_КодыГСВСАктуальныеПоНоменклатуре.ПризнакПеречняИзьятий, ЛОЖЬ)
		|	ИНАЧЕ ВТ_КодыГСВСАктуальныеПоИсточнику.ПризнакПеречняИзьятий
		|	КОНЕЦ КАК ТоварВходитВПеречень, 
		|	ЕСТЬNULL(ИсточникиПроисхождения.НаименованиеТовара, """") КАК ТоварНаименованиеВРамкахТС
		|ИЗ
		|	вт_Товары КАК вт_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КодыГСВСАктуальные КАК ВТ_КодыГСВСАктуальныеПоНоменклатуре
		|		ПО вт_Товары.КодТНВЭД = ВТ_КодыГСВСАктуальныеПоНоменклатуре.КодГСВСПервичный
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК ИсточникиПроисхождения
		|		ПО (ИсточникиПроисхождения.Ссылка = вт_Товары.НомерГТД)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КодыГСВСАктуальные КАК ВТ_КодыГСВСАктуальныеПоИсточнику
		|		ПО (ИсточникиПроисхождения.ГСВС.КодГСВС = ВТ_КодыГСВСАктуальныеПоИсточнику.КодГСВСПервичный)
		|
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	Запрос.УстановитьПараметр("Товары", ОбъектЭСФ.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Дата", ОбъектЭСФ.Дата);
	Запрос.УстановитьПараметр("ДатаОборота", ОбъектЭСФ.ДатаОборота);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ЭСФ_ВС

Функция ОбъединитьРезультатыПолученияСтатусовИОшибок(Соответствие1, Соответствие2)
		
	Для Каждого Элемент из Соответствие2 Цикл
		ЭлементСоответствие1 = Соответствие1.Получить(Элемент.Ключ);
		Если ЭлементСоответствие1 <> Неопределено 
			И ТипЗнч(Элемент.Значение) = Тип("Структура") 
			И Элемент.Значение.Свойство("Ошибки")
			И Элемент.Значение.Ошибки.Количество() > 0 Тогда
			ЭлементСоответствие1.Вставить("Ошибки", Элемент.Значение.Ошибки);	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Соответствие1;	
КонецФункции

Функция ЗагрузитьГСВСИзСтроки(Знач ПараметрыВызова) Экспорт
	
	
	КоличествоПакетовВСтроке = СтрЧислоВхождений(ПараметрыВызова.СтрокаСДанными, "<soap:Envelope");
	ОбрезаемаяСтрокаСДанными = ПараметрыВызова.СтрокаСДанными;
	УменьшаемаяСтрокаСДанными = ПараметрыВызова.СтрокаСДанными;
	НачалоПакета = 1;
	Для НомерПакета = 1 По КоличествоПакетовВСтроке Цикл
		
	Если КоличествоПакетовВСтроке = 1 Тогда
			СтрокаXML = ПараметрыВызова.СтрокаСДанными;
		ИначеЕсли НомерПакета = КоличествоПакетовВСтроке Тогда
			СтрокаXML = Сред(ПараметрыВызова.СтрокаСДанными, НачалоПакета);
		Иначе
			//НачалоСледующегоПакета = СтрНайти(ПараметрыВызова.СтрокаСДанными, "<soap:Envelope", , НачалоПакета + 1);
			//
			//СтрокаXML = Сред(ПараметрыВызова.СтрокаСДанными, НачалоПакета, НачалоСледующегоПакета - НачалоПакета);

			//НачалоПакета = НачалоСледующегоПакета;

			
			ОбрезаемаяСтрокаСДанными = Прав(ОбрезаемаяСтрокаСДанными, СтрДлина(ОбрезаемаяСтрокаСДанными)-1);
			НачалоСледующегоПакета = Найти(ОбрезаемаяСтрокаСДанными, "<soap:Envelope") + 1; 
			
			СтрокаXML = Сред(ПараметрыВызова.СтрокаСДанными, НачалоПакета, НачалоСледующегоПакета - 1);
			
			ОбрезаемаяСтрокаСДанными = Прав(ОбрезаемаяСтрокаСДанными, СтрДлина(ОбрезаемаяСтрокаСДанными) - НачалоСледующегоПакета + 2);

			НачалоПакета = НачалоПакета + НачалоСледующегоПакета - 1;
		КонецЕсли;
		
		Пакет = ЭСФСервер.ОбъектXDTOИзСтрокиXML(СтрокаXML, ФабрикаXDTO);
		
		Если Пакет <> Неопределено Тогда
			ДанныеПакета = ЭСФСервер.ПолучитьСвойство(Пакет.body, "gsvsUpdatesResponse", Неопределено); 
			
			Если ДанныеПакета <> Неопределено Тогда
				
				МаксимальнаяДатаИзмененийВПакете = Неопределено;
				
				ТаблицаДанных = НоваяТаблицаДанныхГСВС();
				
				СписокИзменений = ЭСФСервер.ПолучитьСвойство(ДанныеПакета.gsvsUpdateList, "gsvsUpdatesResult", Неопределено);									
				ЗаписатьИзмененияГСВС(СписокИзменений, ТаблицаДанных, МаксимальнаяДатаИзмененийВПакете);					
				
			КонецЕсли;	
		Иначе		
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменЭСФ.ЗагрузитьГСВСИзСтроки'"), 
											УровеньЖурналаРегистрации.Ошибка,,,
											ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
											
			ТекстСообщения = НСтр("ru = 'При загрузке справочника ГСВС из файла возникла ошибка.'")+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина
	
КонецФункции

Функция НоваяТаблицаДанныхГСВС() Экспорт
	// типы
	КвалификаторСтроки25 = Новый КвалификаторыСтроки(25);
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", КвалификаторСтроки25);
	
	КвалификаторСтроки250 = Новый КвалификаторыСтроки(250);
	ОписаниеТиповСтрока250 = Новый ОписаниеТипов("Строка", КвалификаторСтроки250);
	
	КвалификаторСтроки1000 = Новый КвалификаторыСтроки(1000);
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", КвалификаторСтроки1000);
	
	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", КвалификаторДаты);
		
	ТаблицаДанных = Новый ТаблицаЗначений();
	// Колонки должы быть типизированы для использования таблицы в запросе
	
	ТаблицаДанных.Колонки.Добавить("Идентификатор", ОписаниеТиповСтрока25);
	ТаблицаДанных.Колонки.Добавить("Событие", ОписаниеТиповСтрока25);
	ТаблицаДанных.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаДанных.Колонки.Добавить("ИдентификаторСобытия",Новый ОписаниеТипов("Число")); // для доп. сортировки в пределах одной даты 
	ТаблицаДанных.Колонки.Добавить("КодГСВС",ОписаниеТиповСтрока25);
	ТаблицаДанных.Колонки.Добавить("ПолныйКодГСВС",ОписаниеТиповСтрока25);
	//ТаблицаДанных.Колонки.Добавить("ТипЭлемента",ОписаниеТиповСтрока25);
	ТаблицаДанных.Колонки.Добавить("ТипКодаГСВС", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКодовГСВС"));
	ТаблицаДанных.Колонки.Добавить("Комментарий",ОписаниеТиповСтрока1000);					
	ТаблицаДанных.Колонки.Добавить("Наименование",ОписаниеТиповСтрока250);		
	ТаблицаДанных.Колонки.Добавить("ПолноеНаименованиеRu",ОписаниеТиповСтрока1000);		
	ТаблицаДанных.Колонки.Добавить("ПолноеНаименованиеKz",ОписаниеТиповСтрока1000);
	ТаблицаДанных.Колонки.Добавить("ПолноеНаименованиеEn",ОписаниеТиповСтрока1000);
	ТаблицаДанных.Колонки.Добавить("ДействиеЗаписиНачальнаяДата", ОписаниеТиповДата);
	ТаблицаДанных.Колонки.Добавить("ДействиеЗаписиКонечнаяДата", ОписаниеТиповДата);
	ТаблицаДанных.Колонки.Добавить("НомерВерсии",ОписаниеТиповСтрока25);
	ТаблицаДанных.Колонки.Добавить("ДатаИзменения", ОписаниеТиповДата);
	ТаблицаДанных.Колонки.Добавить("ИдентификаторРодителя",ОписаниеТиповСтрока25);			
	ТаблицаДанных.Колонки.Добавить("ПризнакВозможностиВыбора", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ПризнакУдаленияЗаписи", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ПризнакТовараДвойногоНазначения",Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ПризнакУникальногоТовара",Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ПризнакУчетаНаВиртуальномСкладе",Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ПризнакПеречняИзьятий",Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ПризнакУслуги",Новый ОписаниеТипов("Булево"));
	
	Возврат	ТаблицаДанных;
КонецФункции

Процедура ЗаписатьИзмененияГСВС(знач gsvsUpdateList, ТаблицаОтложенныхЗаписей, МаксимальнаяДатаИзмененийВПакете)
	Если gsvsUpdateList = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//расчитываем макс. дату для сохранения в параметрах даты актуализации ГСВС
	Если НЕ ЗначениеЗаполнено(МаксимальнаядатаИзмененийВПакете) Тогда
		МаксимальнаяДатаИзмененийВПакете = Дата(1,1,1,0,0,0);
	КонецЕсли;
	
	ТаблицаДанных = НоваяТаблицаДанныхГСВС();	// сначала загрузим данные в таблицу, чтобы запросом получать существующие документы и их родителей		
	СписокИзменений = ЭСФСервер.СписокXDTOИзОбъектXDTO(gsvsUpdateList);
	Для Каждого ИзмененныйЭлемент Из СписокИзменений Цикл
			Идентификатор = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "fixedId", Неопределено);
			Если НЕ ЗначениеЗаполнено(Идентификатор) Тогда
				Продолжить;
			КонецЕсли;	
			СтрокаДанных = ТаблицаДанных.Добавить();			
			СтрокаДанных.Событие = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент, "operation", Неопределено);
			ДатаСобытия = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент, "changeDate", Неопределено);
			СтрокаДанных.ИдентификаторСобытия = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент, "changeId", Неопределено);
			Если ДатаСобытия <> Неопределено Тогда
				СтрокаДанных.ДатаСобытия = XMLЗначение(Тип("Дата"), ДатаСобытия);
				Если МаксимальнаяДатаИзмененийВПакете < СтрокаДанных.ДатаСобытия Тогда
					МаксимальнаяДатаИзмененийВПакете = СтрокаДанных.ДатаСобытия;
				КонецЕсли;				
			КонецЕсли;
			
			СтрокаДанных.Идентификатор = Идентификатор;
			СтрокаДанных.ИдентификаторРодителя = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "fixedParentId", Неопределено);
			СтрокаДанных.КодГСВС = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "code", "");
			СтрокаДанных.Комментарий = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "description", "");
			
			ДатаСобытия = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "startDate", Неопределено);
			Если ДатаСобытия <> Неопределено Тогда
				СтрокаДанных.ДействиеЗаписиНачальнаяДата = XMLЗначение(Тип("Дата"), ДатаСобытия);
			КонецЕсли;
			
			ДатаСобытия = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "endDate", Неопределено);
			Если ДатаСобытия <> Неопределено Тогда
				СтрокаДанных.ДействиеЗаписиКонечнаяДата = XMLЗначение(Тип("Дата"), ДатаСобытия);
			КонецЕсли;			
			
			СтрокаДанных.ПолныйКодГСВС = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "gsvsCode", ""); // сейчас запрос не возвращает это значение, хоть оно и предусмотрено схемой.
			
			ТипЭлемента = ВРЕГ(ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "gsvsTypeCode", ""));
			
			Если ТипЭлемента =  "KPVED" Тогда
				СтрокаДанных.ТипКодаГСВС = Перечисления.ТипыКодовГСВС.КПВЭД;
			ИначеЕсли ТипЭлемента =  "TNVED" Тогда
				СтрокаДанных.ТипКодаГСВС = Перечисления.ТипыКодовГСВС.ТНВЭД;
			ИначеЕсли ТипЭлемента =  "GTIN" Тогда
				СтрокаДанных.ТипКодаГСВС = Перечисления.ТипыКодовГСВС.GTIN;	
			Иначе
				СтрокаДанных.ТипКодаГСВС = Перечисления.ТипыКодовГСВС.Иное;
			КонецЕсли;			
				
			СтрокаДанных.НомерВерсии = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "id", "");
			СтрокаДанных.ПризнакВозможностиВыбора = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "isCanSelect", false);
			СтрокаДанных.ПризнакУдаленияЗаписи = XMLЗначение(ТИп("Булево"),ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "isDeleted", false));
			СтрокаДанных.ПризнакТовараДвойногоНазначения = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "isTwofoldPurpose", false);
			СтрокаДанных.ПризнакУникальногоТовара = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "isUnique", false);       			
			СтрокаДанных.ПризнакУчетаНаВиртуальномСкладе = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "isUseInVstore", false);
			СтрокаДанных.ПризнакПеречняИзьятий = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "isWithdrawal", false);
			СтрокаДанных.ПолноеНаименованиеEn = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "nameEn ", "");
			СтрокаДанных.ПолноеНаименованиеKz = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "nameKz", "");
			СтрокаДанных.ПолноеНаименованиеRu = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "nameRu", "");
			СтрокаДанных.Наименование = СтрокаДанных.ПолноеНаименованиеRu;
	
		КонецЦикла;
		
		// Для записи нужно проверить наличие существующих ссылок и существующих родителей
		ДанныеПоГСВС = ПолучитьРезультатЗапросаПоГСВС(ТаблицаДанных);
		ВыборкаДанныхГСВС = ДанныеПоГСВС.Выбрать();
		 	
		МассивОтложенныхЗаписей = Новый Массив();
		ПредыдущийИдентификатор = "";
		ПредыдущийКодГСВС = "";
		ПредыдущееНаименованиеГСВС = "";
		
		ТекущаяСсылка = Неопределено;
		
		УстановитьПривилегированныйРежим(Истина);
		НачатьТранзакцию();	
		СоответствиеИДиСсылокГСВС = Новый Соответствие;
		ЭтоНовый = Ложь;
        // первый этап для записи детальных элементов, второй - для установки родителей
		Пока ВыборкаДанныхГСВС.Следующий() Цикл	
			Если ВыборкаДанныхГСВС.Идентификатор = "0" Тогда
				Продолжить; // Это служебный элемент ROOT, пропускаем его
			КонецЕсли;	
			Если ПредыдущийИдентификатор<>ВыборкаДанныхГСВС.Идентификатор
				ИЛИ ПредыдущийКодГСВС<>ВыборкаДанныхГСВС.КодГСВС
				ИЛИ ПредыдущееНаименованиеГСВС<>ВыборкаДанныхГСВС.ПолноеНаименованиеRu Тогда
				//В случае отсутствия ссылки сморим не было ли созданных элементов в этом пакете с таким же ИД
				Если ЗначениеЗаполнено(ВыборкаДанныхГСВС.Ссылка) Тогда
					СсылкаНаСуществующуюЗапись = ВыборкаДанныхГСВС.Ссылка;
				Иначе
					СсылкаНаСуществующуюЗапись = СоответствиеИДиСсылокГСВС[ВыборкаДанныхГСВС.Идентификатор];
				КонецЕсли;

				
				//Создаем или модифицируем запись
				Если ЗначениеЗаполнено(СсылкаНаСуществующуюЗапись) Тогда
					ОбъектГСВС = СсылкаНаСуществующуюЗапись.ПолучитьОбъект();
				Иначе
					ОбъектГСВС = Справочники.НоменклатураГСВС.СоздатьЭлемент();
					ЭтоНовый = Истина;
				КонецЕсли;
				
				Если ВыборкаДанныхГСВС.ТипКодаГСВС = Перечисления.ТипыКодовГСВС.GTIN Тогда
					КодРодителяПервогоУровня = "";
					КодРодителяВторогоУровня = "";
					Если ЗначениеЗаполнено(ВыборкаДанныхГСВС.РодительСсылка) Тогда
						КодРодителяПервогоУровня = ВыборкаДанныхГСВС.РодительСсылка.Родитель.КодГСВС;
						КодРодителяВторогоУровня = ВыборкаДанныхГСВС.РодительКодГСВС;
					КонецЕсли;
					Если НЕ ПустаяСтрока(КодРодителяПервогоУровня) И НЕ ПустаяСтрока(КодРодителяВторогоУровня) Тогда
						ПолныйКодГСВС = КодРодителяПервогоУровня + "-" + КодРодителяВторогоУровня + "/" + ВыборкаДанныхГСВС.КодГСВС;
					Иначе
						ПолныйКодГСВС = ВыборкаДанныхГСВС.ПолныйКодГСВС;	
					КонецЕсли;
				Иначе
					ПолныйКодГСВС = ВыборкаДанныхГСВС.ПолныйКодГСВС;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ОбъектГСВС, ВыборкаДанныхГСВС);
				ОбъектГСВС.Наименование = ПолныйКодГСВС;
				Если ЗначениеЗаполнено(ВыборкаДанныхГСВС.ИдентификаторРодителя) И ВыборкаДанныхГСВС.ИдентификаторРодителя<> "0" Тогда 
					Если НЕ ЗначениеЗаполнено(ВыборкаДанныхГСВС.РодительСсылка)Тогда
						// в базе еще не создан родительский элемент, не сможем создать подчиненный
						СтрокаДанных = ТаблицаОтложенныхЗаписей.Добавить();			
						ЗаполнитьЗначенияСвойств(СтрокаДанных, ВыборкаДанныхГСВС);
						МассивОтложенныхЗаписей.Добавить(ВыборкаДанныхГСВС.Идентификатор);				
					Иначе
						ОбъектГСВС.Родитель = ВыборкаДанныхГСВС.РодительСсылка;						
					КонецЕсли;			
				КонецЕсли;			
				ОбъектГСВС.Записать();
				ТекущаяСсылка = ОбъектГСВС.Ссылка;
				
				//Если элемент новый тогда запишем его ссылку
				Если ЭтоНовый Тогда
					СоответствиеИДиСсылокГСВС.Вставить(ВыборкаДанныхГСВС.Идентификатор, ТекущаяСсылка);
					ЭтоНовый = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			// Записываем версию изменений
			Если ЗначениеЗаполнено(ТекущаяСсылка) Тогда
				Набор = РегистрыСведений.СведенияОНоменклатуреГСВС.СоздатьНаборЗаписей();
				Набор.Отбор.НоменклатураГСВС.Установить(ТекущаяСсылка);				
				Если ВРЕГ(ВыборкаДанныхГСВС.Событие) = "DELETE" Тогда
					// нужно снять признак актуальности у записи с даты события Delete
					ЗаписатьСведенияОНоменклатуреГСВС(ВыборкаДанныхГСВС.ДатаСобытия, ТекущаяСсылка, ВыборкаДанныхГСВС, Ложь)					
				Иначе // Это события ADD или Update
					АктивностьЗаписи = ?(ВыборкаДанныхГСВС.ПризнакУдаленияЗаписи, Ложь, Истина);					
					
					ЗаписатьСведенияОНоменклатуреГСВС(ВыборкаДанныхГСВС.ДействиеЗаписиНачальнаяДата, ТекущаяСсылка, ВыборкаДанныхГСВС, АктивностьЗаписи);
					
					// Для события ADD или Update может быть задана дата окончания активности и отсутствовать замещающая запись.
					// в этом случае с даты окончания снимем признак активности
					Если ЗначениеЗаполнено(ВыборкаДанныхГСВС.ДействиеЗаписиКонечнаяДата) Тогда
						ЗаписатьСведенияОНоменклатуреГСВС(ВыборкаДанныхГСВС.ДействиеЗаписиКонечнаяДата, ТекущаяСсылка, ВыборкаДанныхГСВС, Ложь);
					КонецЕсли;   					
				КонецЕсли;	    				
			КонецЕсли;
			
			ПредыдущийИдентификатор = ВыборкаДанныхГСВС.Идентификатор;
			ПредыдущийКодГСВС = ВыборкаДанныхГСВС.КодГСВС;
			ПредыдущееНаименованиеГСВС = ВыборкаДанныхГСВС.ПолноеНаименованиеRu;
		КонецЦикла;   		
		ЗафиксироватьТранзакцию();
		
		// второй этап - модифицируем данные о родителе
		Если ТаблицаОтложенныхЗаписей.Количество()>0 Тогда
			
			ЕстьЗаписиБезНайденногоРодителя = Ложь;
			ДанныеПоГСВС = ПолучитьРезультатЗапросаПоГСВС(ТаблицаОтложенныхЗаписей);		
			ВыборкаДанныхГСВС = ДанныеПоГСВС.Выбрать();
			НачатьТранзакцию();
			Пока ВыборкаДанныхГСВС.Следующий() Цикл
				//Создаем или модифицируем запись
				Если НЕ ЗначениеЗаполнено(ВыборкаДанныхГСВС.Ссылка) Тогда
					Продолжить;
					// сообщить об ошибке				
				КонецЕсли;			
				Если НЕ ЗначениеЗаполнено(ВыборкаДанныхГСВС.РодительСсылка) И ВыборкаДанныхГСВС.ИдентификаторРодителя<> "0" Тогда
					// сообщить об ошибке
					Если НЕ ЕстьЗаписиБезНайденногоРодителя Тогда
					ЕстьЗаписиБезНайденногоРодителя = Истина;
					КонецЕсли;

					
					Продолжить;
										
				КонецЕсли;	
				Если ЗначениеЗаполнено(ВыборкаДанныхГСВС.ИдентификаторРодителя) И ВыборкаДанныхГСВС.ИдентификаторРодителя<> "0" Тогда 
					ОбъектГСВС = ВыборкаДанныхГСВС.Ссылка.ПолучитьОбъект();
					ОбъектГСВС.Родитель = ВыборкаДанныхГСВС.РодительСсылка;				
					ОбъектГСВС.Наименование = ПолныйКодГСВС;
					ОбъектГСВС.Записать();
				КонецЕсли;
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
			Если ЕстьЗаписиБезНайденногоРодителя Тогда
				ТекстСообщения = НСТР("ru = 'Для некоторых записей не установлены ссылки на родительские элементы. Рекомендуется произвести первичную загрузка справочника ГСВС.'");
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;			
КонецПроцедуры

Функция ПолучитьРезультатЗапросаПоГСВС(ТаблицаДанных)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВТ_ТаблицаДанныхГСВС.Идентификатор КАК Идентификатор,
	                      |	ВТ_ТаблицаДанныхГСВС.Событие КАК Событие,
	                      |	ВТ_ТаблицаДанныхГСВС.ДатаСобытия КАК ДатаСобытия,
						  |	ВТ_ТаблицаДанныхГСВС.ИдентификаторСобытия КАК ИдентификаторСобытия,						  
	                      |	ВТ_ТаблицаДанныхГСВС.ИдентификаторРодителя КАК ИдентификаторРодителя,
	                      |	ВТ_ТаблицаДанныхГСВС.КодГСВС КАК КодГСВС,
	                      |	ВТ_ТаблицаДанныхГСВС.ТипКодаГСВС,
	                      |	ВТ_ТаблицаДанныхГСВС.ПолноеНаименованиеRu,
	                      |	ВТ_ТаблицаДанныхГСВС.ПолноеНаименованиеKz,
	                      |	ВТ_ТаблицаДанныхГСВС.ПолноеНаименованиеEn,
	                      |	ВТ_ТаблицаДанныхГСВС.ПризнакВозможностиВыбора,
	                      |	ВТ_ТаблицаДанныхГСВС.ПризнакУдаленияЗаписи,
	                      |	ВТ_ТаблицаДанныхГСВС.ПризнакТовараДвойногоНазначения,
	                      |	ВТ_ТаблицаДанныхГСВС.ПризнакУникальногоТовара,
	                      |	ВТ_ТаблицаДанныхГСВС.ПризнакУчетаНаВиртуальномСкладе,
	                      |	ВТ_ТаблицаДанныхГСВС.ПризнакПеречняИзьятий,
	                      |	ВТ_ТаблицаДанныхГСВС.ПризнакУслуги,
	                      |	ВТ_ТаблицаДанныхГСВС.ДействиеЗаписиНачальнаяДата,
	                      |	ВТ_ТаблицаДанныхГСВС.ДействиеЗаписиКонечнаяДата,
	                      |	ВТ_ТаблицаДанныхГСВС.Наименование
	                      |ПОМЕСТИТЬ ВТ_ТаблицаДанныхГСВС
	                      |ИЗ
	                      |	&ТаблицаДанныхГСВС КАК ВТ_ТаблицаДанныхГСВС
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Идентификатор
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	МАКСИМУМ(НоменклатураГСВС.Ссылка) КАК Ссылка,
	                      |	НоменклатураГСВС.КодГСВС КАК КодГСВС,
	                      |	МАКСИМУМ(НоменклатураГСВС.Идентификатор) КАК Идентификатор
	                      |ПОМЕСТИТЬ ВТ_НоменклатураГСВСКоды
	                      |ИЗ
	                      |	Справочник.НоменклатураГСВС КАК НоменклатураГСВС
	                      |ГДЕ
	                      |	НЕ НоменклатураГСВС.ПометкаУдаления
	                      |	И НоменклатураГСВС.КодГСВС В
	                      |			(ВЫБРАТЬ
	                      |				ВТ_ТаблицаДанныхГСВС.КодГСВС
	                      |			ИЗ
	                      |				ВТ_ТаблицаДанныхГСВС)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	НоменклатураГСВС.КодГСВС
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	КодГСВС
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВЫБОР
	                      |		КОГДА НоменклатураГСВСПоИдентификатору.Ссылка ЕСТЬ NULL 
	                      |			ТОГДА ЕСТЬNULL(НоменклатураГСВСПоКоду.Ссылка, НЕОПРЕДЕЛЕНО) ИНАЧЕ НоменклатураГСВСПоИдентификатору.Ссылка
	                      |	КОНЕЦ КАК Ссылка,
	                      |	ВЫБОР
	                      |		КОГДА НоменклатураРодителяГСВСПоИдентификатору.Ссылка ЕСТЬ NULL 
	                      |			ТОГДА ЕСТЬNULL(НоменклатураРодителяГСВСПоКоду.Ссылка, НЕОПРЕДЕЛЕНО) ИНАЧЕ НоменклатураРодителяГСВСПоИдентификатору.Ссылка
	                      |	КОНЕЦ КАК РодительСсылка,
	                      |	ВЫБОР
	                      |		КОГДА НоменклатураРодителяГСВСПоИдентификатору.КодГСВС ЕСТЬ NULL 
	                      |			ТОГДА ЕСТЬNULL(НоменклатураРодителяГСВСПоКоду.КодГСВС, """") ИНАЧЕ НоменклатураРодителяГСВСПоИдентификатору.КодГСВС
	                      |	КОНЕЦ КАК РодительКодГСВС,
	                      |	ТаблицаДанныхГСВС.Идентификатор,
	                      |	ТаблицаДанныхГСВС.Событие,
	                      |	ТаблицаДанныхГСВС.ДатаСобытия,
						  |	ТаблицаДанныхГСВС.ИдентификаторСобытия,
	                      |	ТаблицаДанныхГСВС.ИдентификаторРодителя,
	                      |	ТаблицаДанныхГСВС.КодГСВС,
	                      |	ТаблицаДанныхГСВС.ТипКодаГСВС,
	                      |	ТаблицаДанныхГСВС.Наименование,
	                      |	ТаблицаДанныхГСВС.ПолноеНаименованиеRu,
	                      |	ТаблицаДанныхГСВС.ПолноеНаименованиеKz,
	                      |	ТаблицаДанныхГСВС.ПолноеНаименованиеEn,
	                      |	ТаблицаДанныхГСВС.ПризнакВозможностиВыбора,
	                      |	ТаблицаДанныхГСВС.ПризнакУдаленияЗаписи,
	                      |	ТаблицаДанныхГСВС.ПризнакТовараДвойногоНазначения,
	                      |	ТаблицаДанныхГСВС.ПризнакУникальногоТовара,
	                      |	ТаблицаДанныхГСВС.ПризнакУчетаНаВиртуальномСкладе,
	                      |	ТаблицаДанныхГСВС.ПризнакПеречняИзьятий,
	                      |	ТаблицаДанныхГСВС.ПризнакУслуги,
	                      |	ТаблицаДанныхГСВС.ДействиеЗаписиНачальнаяДата,
	                      |	ТаблицаДанныхГСВС.ДействиеЗаписиКонечнаяДата,
	                      |	ВЫБОР
	                      |		КОГДА НоменклатураГСВСПоИдентификатору.ПометкаУдаления ЕСТЬ NULL 
	                      |			ТОГДА ЛОЖЬ Иначе НоменклатураГСВСПоИдентификатору.ПометкаУдаления
	                      |	КОНЕЦ КАК ПометкаУдаления,
	                      |	ВЫБОР
	                      |		КОГДА НЕ ТаблицаДанныхГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.ТНВЭД)
	                      |			ТОГДА ТаблицаДанныхГСВС.КодГСВС
	                      |		ИНАЧЕ ВЫБОР
	                      |				КОГДА ВТ_ТаблицаДанныхГСВСРодителя.КодГСВС ЕСТЬ NULL 
	                      |					ТОГДА ВЫБОР
	                      |							КОГДА НоменклатураРодителяГСВСПоИдентификатору.КодГСВС ЕСТЬ NULL 
	                      |								ТОГДА ЕСТЬNULL(НоменклатураРодителяГСВСПоКоду.КодГСВС, """") ИНАЧЕ НоменклатураРодителяГСВСПоИдентификатору.КодГСВС
	                      |						КОНЕЦ
	                      |				ИНАЧЕ ВТ_ТаблицаДанныхГСВСРодителя.КодГСВС
	                      |			КОНЕЦ + ""-"" + ТаблицаДанныхГСВС.КодГСВС
	                      |	КОНЕЦ КАК ПолныйКодГСВС
	                      |ИЗ
	                      |	ВТ_ТаблицаДанныхГСВС КАК ТаблицаДанныхГСВС
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураГСВС КАК НоменклатураГСВСПоИдентификатору
	                      |		ПО ТаблицаДанныхГСВС.Идентификатор = НоменклатураГСВСПоИдентификатору.Идентификатор
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураГСВСКоды КАК НоменклатураГСВСПоКоду
	                      |		ПО ТаблицаДанныхГСВС.КодГСВС = НоменклатураГСВСПоКоду.КодГСВС
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаДанныхГСВС КАК ВТ_ТаблицаДанныхГСВСРодителя
	                      |		ПО ТаблицаДанныхГСВС.ИдентификаторРодителя = ВТ_ТаблицаДанныхГСВСРодителя.Идентификатор
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураГСВС КАК НоменклатураРодителяГСВСПоИдентификатору
	                      |		ПО ТаблицаДанныхГСВС.ИдентификаторРодителя = НоменклатураРодителяГСВСПоИдентификатору.Идентификатор
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураГСВСКоды КАК НоменклатураРодителяГСВСПоКоду
	                      |		ПО ТаблицаДанныхГСВС.ИдентификаторРодителя = НоменклатураРодителяГСВСПоКоду.КодГСВС
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ТаблицаДанныхГСВС.ИдентификаторРодителя,
	                      |	ТаблицаДанныхГСВС.Идентификатор,
	                      |	ТаблицаДанныхГСВС.ДатаСобытия,
						  |	ТаблицаДанныхГСВС.ИдентификаторСобытия");
	Запрос.УстановитьПараметр("ТаблицаДанныхГСВС",ТаблицаДанных); 
	Результат = Запрос.Выполнить();
	
	Возврат  Результат;
КонецФункции

Процедура ЗаписатьСведенияОНоменклатуреГСВС(ДатаСобытия, НоменклатураГСВС, ВыборкаДанныхГСВС, АктивностьЗаписи = Истина)
	Набор = РегистрыСведений.СведенияОНоменклатуреГСВС.СоздатьНаборЗаписей();
	Набор.Отбор.НоменклатураГСВС.Установить(НоменклатураГСВС);				
	Набор.Отбор.Период.Установить(ДатаСобытия);
	
	Набор.Прочитать(); 
	// модифицируем существующую, так как для одного периода могут иметь место два события - прекращение действия исходной записи и ввод в действие следующей (может отсутствовать).
	// последние из них - считаем финальным состоянием записи для периода
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
	Иначе
		Запись = Набор[0];								
	КонецЕсли;					
				
	ЗаполнитьЗначенияСвойств(Запись,ВыборкаДанныхГСВС);
	Запись.НоменклатураГСВС = НоменклатураГСВС;
	Запись.Период = ДатаСобытия;	
	Запись.ПризнакАктивности = АктивностьЗаписи;	
	Набор.Записать();			
КонецПроцедуры

#КонецОбласти 

#КонецЕсли

&НаСервере
Функция ПолучитьВерсиюКомпонентыНаСайте() Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	
	ШапкаОшибки = НСтр("ru = 'Ошибка получения версии модуля криптографии:'");	
	
	СвойстваМодуляДляТекущегоРелиза = Неопределено;
	КаталогФайловНаСервере = Неопределено;
	
	ВерсияМодуляВИнтернете = "";
	
	ПараметрыСервераИнтернета = Контейнер.ПолучитьПараметрыИнтернета(Новый Структура);
	
	// пытаемся установить соединение с сервером
	Соединение = Контейнер.УстановитьСоединениеССерверомИнтернета(ПараметрыСервераИнтернета.URLСервера,ПараметрыСервераИнтернета);
	Если Соединение = Неопределено Тогда		
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='%1Ошибка доступа к серверу обновлений модуля документооборота: %2.'"),
																				ШапкаОшибки + Символы.ПС + Символы.ПС,
																				Символы.ПС + ИнформацияОбОшибке().Описание);

		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);		
		Возврат "";
	КонецЕсли;
		
		
	ФайлКартаРелизовАрхив = ПолучитьИмяВременногоФайла("zip");	
	Попытка
		Соединение.Получить(Контейнер.ПолучитьИмяФайлаКартыРелизов(), ФайлКартаРелизовАрхив);
	Исключение
		
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='%1Ошибка доступа к серверу обновлений модуля документооборота: %2.'"),
							ШапкаОшибки + Символы.ПС + Символы.ПС,
							Символы.ПС + ИнформацияОбОшибке().Описание);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		Возврат "";
	КонецПопытки;
	
	// получаем файл справочника внешних модулей с сервера (карты релизов)
	СвойстваМодуляДляТекущегоРелиза = Неопределено;			
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлКартаРелизовАрхив));
	// РаспаковатьСохранитьСправочникВКэше
	Если НЕ Контейнер.ОпределитьПараметрыМодуляТекущегоРелиза(АдресВоВременномХранилище, ШапкаОшибки, СвойстваМодуляДляТекущегоРелиза) Тогда
		Возврат ВерсияМодуляВИнтернете;
	КонецЕсли;
	
	// Сравниваем требуемую версию модуля, с версией, загруженной в ИБ	
	ВерсияМодуляВИнтернете = СтрЗаменить(СвойстваМодуляДляТекущегоРелиза.Версия, Символы.НПП, "");	
	
	Возврат ВерсияМодуляВИнтернете;

КонецФункции

&НаСервере
Функция ВерсияВнешнегоМодуляКриптографии() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Версия = Константы.ЭСФВерсияВнешнегоМодуля.Получить(); 
	
	Возврат Формат(Версия, "ЧРД=.; ЧРГ=' '"); // В формате "1.7". Библиотека возвращает числовой номер версии.
	
КонецФункции

&НаСервере
Функция ПроверитьВерсиюВнешнегоМодуляКриптографии(ВыдаватьСообщение = Ложь) Экспорт
	ТекущаяВерсияВнешнегоМодуля = ВерсияВнешнегоМодуляКриптографии();
	
	Если НЕ ЗначениеЗаполнено(ТекущаяВерсияВнешнегоМодуля) Тогда
		ТекстСообщения = НСТР("ru='Криптографическая библиотека отсутствует в информационной базе.'");
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);				
		Возврат Ложь;
	КонецЕсли;
	
	Макет = ПолучитьМакет("СписокПоддерживаемыхВерсийБиблиотеки");		
	ТекстВерсий = Макет.ПолучитьТекст();
	ПоддерживаемыеВерсии = ЭСФКлиентСервер.РазобратьСтрокуВМассивПоРазделителю(ТекстВерсий, ";");
	
	ВерсияПоддерживается = ПоддерживаемыеВерсии.Найти(ТекущаяВерсияВнешнегоМодуля)<> Неопределено;	
	Если НЕ ВерсияПоддерживается И ВыдаватьСообщение Тогда
		ТекстСообщения = НСТР("ru='Установленная версия криптографической библиотеки %Версия% не предназначена для запуска в текущей информационной базе. Возможно, необходимо обновить обработку обмена данными с ИС ЭСФ.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Версия%", ТекущаяВерсияВнешнегоМодуля);

		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);		
	КонецЕсли;
	
	Возврат ВерсияПоддерживается;
КонецФункции

&НаСервере
Функция ТаблицаВерсийЭСФ() Экспорт
	
	ОписаниеТиповСтрока = ЭСФКлиентСервер.ПолучитьОписаниеТиповСтроки(254);
	ОписаниеТиповЧисло  = ЭСФКлиентСервер.ПолучитьОписаниеТиповЧисла(1,0);

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ТаблицаВерсий = Новый ТаблицаЗначений;
	ТаблицаВерсий.Колонки.Добавить("ВерсияЭСФ",          ОписаниеТиповЧисло);
	ТаблицаВерсий.Колонки.Добавить("ВерсияAPI",          ОписаниеТиповСтрока);
	ТаблицаВерсий.Колонки.Добавить("ДатаНачалоДействия", ОписаниеТиповДата,   "Действует с", 5);
	ТаблицаВерсий.Колонки.Добавить("ДатаКонецДействия",  ОписаниеТиповДата,   "         по", 5);
	
	НоваяФорма = ТаблицаВерсий.Добавить();
	НоваяФорма.ВерсияЭСФ          = 2;
	НоваяФорма.ВерсияAPI          = "4.0.0";
	НоваяФорма.ДатаНачалоДействия = '20130101';
	НоваяФорма.ДатаКонецДействия  = '20170930';
	
	НоваяФорма = ТаблицаВерсий.Добавить();
	НоваяФорма.ВерсияЭСФ          = 2;
	НоваяФорма.ВерсияAPI          = "5.0.0";
	НоваяФорма.ДатаНачалоДействия = '20171001';
	НоваяФорма.ДатаКонецДействия  = ЭСФКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));

	Возврат ТаблицаВерсий;
	
КонецФункции

&НаСервере
Функция ПолучитьТекущуюВерсиюЭСФиAPI(Дата) Экспорт
	
	ТаблицаВерсий = ТаблицаВерсийЭСФ();
	
	СтруктураВерсий = Новый Структура("ВерсияЭСФ, ВерсияAPI");
	
	Для Каждого Стр Из ТаблицаВерсий Цикл
		Если Стр.ДатаКонецДействия = '00010101000000' Тогда
			Стр.ДатаКонецДействия = '20991231';
		КонецЕсли;
	КонецЦикла;

	ТаблицаВерсий.Сортировать("ДатаКонецДействия Убыв");

	Для Каждого Строка Из ТаблицаВерсий Цикл
		Если (Строка.ДатаНачалоДействия > КонецДня(Дата)) ИЛИ
			((Строка.ДатаКонецДействия > '00010101000000') И (Строка.ДатаКонецДействия < НачалоДня(Дата))) Тогда

			Продолжить;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(СтруктураВерсий, Строка);
		
		Возврат СтруктураВерсий;
	КонецЦикла;

	Возврат СтруктураВерсий;
	
КонецФункции

ВерсияБЭСФ = "1.0.8.1";
