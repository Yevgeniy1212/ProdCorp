
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Параметры.ЗаголовокКнопкиОК) Тогда
		Элементы.ФормаКомандаОК.Заголовок = Параметры.ЗаголовокКнопкиОК;
	КонецЕсли;
	
	ЗапомнитьПароль = Параметры.ЗапомнитьПароль;
	
	ДанныеАутентификации = ЭСФСервер.ДанныеАутентификацииПользователяИнтернетПоддержки();
	Если ДанныеАутентификации <> Неопределено Тогда
		Логин = ДанныеАутентификации.Логин;
	КонецЕсли;
	
	КлючПоложенияОкна = "";
	Если Не ПустаяСтрока(КлючПоложенияОкна) Тогда
		КлючСохраненияПоложенияОкна = КлючПоложенияОкна;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияИнформацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(ЭСФКлиентСервер.АдресГлавнойСтраницыПортала());
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПоясненияПодключенияАвторизацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "action:openPortal" Тогда
		
		ЗапуститьПриложение(ЭСФКлиентСервер.АдресГлавнойСтраницыПортала());
		
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	Если Не ЗаполнениеЛогинаИПароляКорректно() Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиСоединенияССерверами = Неопределено Тогда
		НастройкиСоединенияССерверами = ЭСФКлиентСервер.НастройкиСоединенияССерверами();
	КонецЕсли;
	
	УстанавливатьПодключениеНаСервере = НастройкиСоединенияССерверами.УстанавливатьПодключениеНаСервере;
	
	Состояние(, , НСтр("ru = 'Подключение Интернет-поддержки...'"));
	Если УстанавливатьПодключениеНаСервере Тогда
		РезультатАутентификации = АутентифицироватьНаСервере(
			Логин, Пароль, Истина, НастройкиСоединенияССерверами);
	Иначе
		РезультатАутентификации = АутентифицироватьПользователя(
			Логин, Пароль, Истина, НастройкиСоединенияССерверами);
	КонецЕсли;
	Состояние();
	
	Если ПустаяСтрока(РезультатАутентификации.КодОшибки) Тогда
		ПараметрыОповещения = Новый Структура("Логин, Пароль", Логин, Пароль);
		Закрыть(ПараметрыОповещения);
		Оповестить("ИнтернетПоддержкаПодключена", ПараметрыОповещения);
	ИначеЕсли РезультатАутентификации.КодОшибки = "НеверныйЛогинИлиПароль" Тогда
		ПоказатьПредупреждение(, РезультатАутентификации.СообщениеОбОшибке);
	Иначе
		
		// Сетевая или иная ошибка.
		// В этом случае:
		//	- пользователю отображается сообщение об ошибке проверки логина и пароля;
		//	- логин и пароль сохраняются в программе - см. метод АутентифицироватьПользователя().
		
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Логин и пароль сохранены в программе, но проверка корректности
				|логина и пароля не выполнена из-за ошибки:
				|%1'"),
			РезультатАутентификации.СообщениеОбОшибке);
		
		ПоказатьПредупреждение(
			Новый ОписаниеОповещения("ПриСообщенииОбОшибкеПроверкиКорректностиЛогинаИПароля", ЭтаФорма),
			ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть(Неопределено);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Общего назначения.

&НаКлиенте
Функция ЗаполнениеЛогинаИПароляКорректно()
	
	Если ПустаяСтрока(Логин) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Логин"" не заполнено.'"),
			,
			"Логин");
		Возврат Ложь;
		
	ИначеЕсли ПустаяСтрока(Пароль) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Пароль"" не заполнено.'"),
			,
			"Пароль");
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьДанныеАутентификации(Знач ДанныеАутентификации)
	
	ЭСФСервер.СохранитьДанныеАутентификации(ДанныеАутентификации);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АутентифицироватьНаСервере(Знач Логин, Знач Пароль, Знач ЗапомнитьПароль, НастройкиСоединенияССерверами)
	
	Возврат АутентифицироватьПользователя(Логин, Пароль, ЗапомнитьПароль, НастройкиСоединенияССерверами);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция АутентифицироватьПользователя(Логин, Пароль, ЗапомнитьПароль, НастройкиСоединенияССерверами)
	
	РезультатАутентификации = ЭСФКлиентСервер.ПроверитьЛогинИПароль(
		Логин, Пароль, НастройкиСоединенияССерверами);
	
	Если РезультатАутентификации.КодОшибки <> "НеверныйЛогинИлиПароль" Тогда
		СохранитьДанныеАутентификации(
			?(ЗапомнитьПароль, Новый Структура("Логин, Пароль", Логин, Пароль), Неопределено));
	КонецЕсли;
	
	Возврат РезультатАутентификации;
	
КонецФункции

&НаКлиенте
Процедура ПриСообщенииОбОшибкеПроверкиКорректностиЛогинаИПароля(ДополнительныеПараметры) Экспорт
	
	ПараметрыОповещения = Новый Структура("Логин, Пароль", Логин, Пароль);
	Закрыть(ПараметрыОповещения);
	Оповестить("ИнтернетПоддержкаПодключена", ПараметрыОповещения);
	
КонецПроцедуры

#КонецОбласти
