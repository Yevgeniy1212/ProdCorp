////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МестоУстановкиБиблиотеки = Константы.МестоВыполненияКриптографическихОпераций.Получить();
	ИнформационнаяБазаФайловая = ЭСФСерверПереопределяемый.ИнформационнаяБазаФайловая();
	ИспользоватьОбменЭСФЧерезAPI = Константы.ИспользоватьОбменЭСФЧерезAPI.Получить();
	Если ИспользоватьОбменЭСФЧерезAPI Тогда
		// Константа установлена, следовательно ранее пользователь уже принял условия оферты
		СогласенСУсловиямиОфертыКриптографии = Истина;
	КонецЕсли;
	
	ИспользоватьОбменЭСФЧерезXML = Константы.ИспользоватьОбменЭСФЧерезXML.Получить();
	
	Если МестоУстановкиБиблиотеки = Перечисления.МестаВыполненияКриптографическихОпераций.ПустаяСсылка() Тогда
		МестоУстановкиБиблиотеки = Перечисления.МестаВыполненияКриптографическихОпераций.НаСервере;
		Константы.МестоВыполненияКриптографическихОпераций.Установить(МестоУстановкиБиблиотеки);
	КонецЕсли;
	
	Если ИнформационнаяБазаФайловая Тогда
		Элементы.МестоУстановкиБиблиотеки.Видимость = Ложь;
		Если МестоУстановкиБиблиотеки <> Перечисления.МестаВыполненияКриптографическихОпераций.НаКлиенте Тогда
			МестоУстановкиБиблиотеки = Перечисления.МестаВыполненияКриптографическихОпераций.НаКлиенте;	
			Константы.МестоВыполненияКриптографическихОпераций.Установить(МестоУстановкиБиблиотеки);
		КонецЕсли;	
	КонецЕсли;   
	
	ИспользуетсяРазделениеДанных = ЭСФСерверПереопределяемый.ИспользуетсяРазделениеДанных();
	
	Если НЕ ИспользуетсяРазделениеДанных Тогда	
	КонецЕсли;
	
	Элементы.ГруппаДоступ.ОтображениеСтраниц 				= ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаВерсия.ОтображениеСтраниц				= ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаДоступСервис.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаДоступИТС.ОтображениеСтраниц    = ОтображениеСтраницФормы.Нет;
		
	Если ПравоДоступа("Администрирование", Метаданные) Тогда
		РегламентноеЗадание = ПолучитьРегламентноеЗадание("СинхронизацияСИСЭСФ");
		Если РегламентноеЗадание <> Неопределено Тогда
			РасписаниеРегламентногоЗадания  = РегламентноеЗадание.Расписание;
			ОбновлятьСтатусыЭСФПоРасписанию = РегламентноеЗадание.Использование;
		КонецЕсли;		
		
		ОбновитьПредставлениеРасписания(РасписаниеРегламентногоЗадания, Элементы.НастроитьРасписаниеРегламентногоЗадания.Заголовок);		
		Элементы.НастроитьРасписаниеРегламентногоЗадания.Доступность = ОбновлятьСтатусыЭСФПоРасписанию;
		
		Если ОбновлятьСтатусыЭСФПоРасписанию Тогда
			ЗаполнитьТаблицуПрофилейИСЭСФ();
		КонецЕсли;
		
	Иначе		
		Элементы.ГруппаОбновлениеСтатусов.Видимость = Ложь;		
	КонецЕсли;

	Элементы.СписокПользователейСоздатьНовогоПользователя.Видимость = РольДоступна("ПолныеПрава");
	
	ПараметрыЭСФ = ЭСФСервер.ПолучитьПараметрыЭСФ();
	ПерезаполнитьПризнакПроисхождения = ПараметрыЭСФ.ПерезаполнитьПризнакПроисхождения;
	СпособОпределенияВхожденияВПеречень = ПараметрыЭСФ.СпособОпределенияВхожденияВПеречень;
	ЗаполнитьИсточникиПроисхожденияБезусловно = ПараметрыЭСФ.ЗаполнитьИсточникиПроисхожденияБезусловно;
	ПорогОкругленияСумм = ПараметрыЭСФ.ПорогОкругленияСумм;
	ИспользоватьКомпонентуНЦАДляПодписиДокументов = ПараметрыЭСФ.ИспользоватьПодписьНовойКомпоненты;
	ОткрыватьСессиюСПодписью = ПараметрыЭСФ.ИспользоватьОткрытиеСессииСПодписью;
	ВремяЖизниТикетаЭСФ = ПараметрыЭСФ.ВремяЖизниТикетаЭСФ;
	
	
	УправлениеФормой(ЭтаФорма);
	
	//ВС
	ИспользоватьОбменВС = ПолучитьФункциональнуюОпцию("ИспользоватьОбменВС");	
	Элементы.ГруппаДоступКВС.Видимость 		 = ИспользоватьОбменВС;
	Элементы.ГруппаСинхронизацияВС.Видимость = ИспользоватьОбменВС;		
	Элементы.ГруппаДополнительныеНастройкиЭДВС.Видимость = ИспользоватьОбменВС;		
	
	Если ИспользоватьОбменВС Тогда
		ПриСозданииНаСервереВС();
	КонецЕсли;
	
	Элементы.СоответствиеОрганизацийПрофилей.Видимость = ОбновлятьСтатусыЭСФПоРасписанию;
	
	//++ ИнтернетПоддержка
	ДанныеАутентификации = ЭСФСервер.ДанныеАутентификацииПользователяИнтернетПоддержки();
	ОтобразитьСостояниеПодключенияИПП();
	//-- ИнтернетПоддержка
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ПриОткрытииФормы(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПредставлениеСтатусаКриптобиблиотеки();
	ОбновитьПредставлениеСтатусаКопонентыНЦАНаКлиенте(ЭтаФорма);
	УстановитьДоступностьОпределенияПризнака();
	УстановитьДоступностьАутентификацииСПодписью();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновленМодульКриптографии" Тогда
		ОбновитьПредставлениеСтатусаКриптобиблиотеки();
		ОбновитьПредставлениеСтатусаКопонентыНЦАНаКлиенте(ЭтаФорма);
	КонецЕсли;
	
	//++ ИнтернетПоддержка
	Если ИмяСобытия = "ИнтернетПоддержкаПодключена" Тогда
		ВведенныеДанныеАутентификации = Параметр;
		Если ВведенныеДанныеАутентификации <> Неопределено Тогда
			ДанныеАутентификации = ВведенныеДанныеАутентификации;
			ОтобразитьСостояниеПодключенияИПП();
		КонецЕсли;
	КонецЕсли;
	//-- ИнтернетПоддержка
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОбновлятьСтатусыЭСФПоРасписаниюПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Доступность = ОбновлятьСтатусыЭСФПоРасписанию;
	Если ОбновлятьСтатусыЭСФПоРасписанию Тогда
		ЗаполнитьТаблицуПрофилейИСЭСФ();
	КонецЕсли;
	Элементы.СоответствиеОрганизацийПрофилей.Видимость = ОбновлятьСтатусыЭСФПоРасписанию;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьНоменклатуруГСВСПоРасписаниюПриИзменении(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура НадписьДоступПодробнееНажатие(Элемент)
	Сообщить(ОшибкаСоединения, СтатусСообщения.Внимание);
КонецПроцедуры

&НаКлиенте
Процедура НадписьДоступСервисПодробнееНажатие(Элемент)
	Сообщить(ОшибкаСоединенияССервисом1СЭСФ, СтатусСообщения.Внимание);
КонецПроцедуры

&НаКлиенте
Процедура НадписьДоступИТСПодробнееНажатие(Элемент)
	Сообщить(ОшибкаСоединенияССервисомИТС, СтатусСообщения.Внимание);
КонецПроцедуры

&НаКлиенте
Процедура НадписьВерсияПодробнееНажатие(Элемент)
	Сообщить(ОшибкаВерсии, СтатусСообщения.Внимание);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыПодключенияКСерверуИСЭСФНажатие(Элемент)
	ДополнительныеПараметры = Новый Структура("ЦельОткрытияФормы", "НастройкаПодключенияКСерверуИСЭСФ");	
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ПараметрыПодключенияКСерверуИСЭСФ", ДополнительныеПараметры, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменЭСФЧерезAPIПриИзменении(Элемент)	
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменЭСФЧерезXMLПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ОбновитьИнтерфейс = Ложь;
	
	// Возможно, что нужно записать константу ИспользоватьОбменЭСФЧерезAPI, иначе список пользователей, связанный с ней по ФО, будет не доступен
	ГруппаСтраницыПриСменеСтраницыНаСервере(ТекущаяСтраница.Имя, ОбновитьИнтерфейс);
	
	Если ОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеОрганизацийПрофилейПрофильИСЭСФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ПрофильИСЭСФ = Элементы.СоответствиеОрганизацийПрофилей.ТекущиеДанные.ПрофильИСЭСФ;
    СтруктурнаяЕдиница =  Элементы.СоответствиеОрганизацийПрофилей.ТекущиеДанные.СтруктурнаяЕдиница;
	
	ПараметрыФормы = Новый Структура;

	Отбор = Новый Структура;
	Отбор.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Отбор.Вставить("ИспользоватьДляСинхронизации", Истина);
					       		
	ПараметрыФормы.Вставить("Отбор", Отбор);
		
	ОткрытьФорму("Справочник.ПрофилиИСЭСФ.Форма.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СоответствиеОрганизацийПрофилейПрофильИСЭСФОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПрофильИСЭСФ = Элементы.СоответствиеОрганизацийПрофилей.ТекущиеДанные.ПрофильИСЭСФ;
	СтруктурнаяЕдиница =  Элементы.СоответствиеОрганизацийПрофилей.ТекущиеДанные.СтруктурнаяЕдиница;
	 	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СписокПользователей

&НаКлиенте
Процедура СписокПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда 
		Отказ = Истина;
		ОткрытьФорму("Справочник.ПользователиИСЭСФ.Форма.ПомощникНового", , ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОК(Команда)
	СохранитьИЗакрыть();
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	Отказ = Ложь;
	СохранитьНастройки(Отказ);
	Если НЕ Отказ Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКриптобиблиотеку(Команда)	
	ПоказатьПользовательскоеСоглашение("Заключение");		
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗадания(Команда)
	
	РедактированиеРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания, "РасписаниеРегламентногоЗадания");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступИВерсию(Команда)
	
	СтруктураПараметров = ЭСФВызовСервера.ПроверитьДоступИВерсиюНаСервере();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураПараметров);
	                                                                                
	Если СтруктураПараметров.ВерсияИСЭСФ = Неопределено Тогда
		Элементы.ГруппаДоступ.ТекущаяСтраница = Элементы.СтраницаДоступОшибка;
		Элементы.ГруппаВерсия.ТекущаяСтраница = Элементы.СтраницаВерсияВопрос;
		
	Иначе
		Элементы.ГруппаДоступ.ТекущаяСтраница = Элементы.СтраницаДоступУспешно;
		Элементы.НадписьВерсияОшибка.Заголовок = СтруктураПараметров.ТекстВерсияОшибка;
		Элементы.НадписьВерсияПоддерживает.Заголовок = СтруктураПараметров.ТекстВерсияПоддерживает;
		
		Если НЕ СтруктураПараметров.ВерсияИСЭСФПоддерживается Тогда
			Элементы.ГруппаВерсия.ТекущаяСтраница = Элементы.СтраницаВерсияОшибка;
		Иначе
			Элементы.ГруппаВерсия.ТекущаяСтраница = Элементы.СтраницаВерсияУспешно;	
		КонецЕсли; 
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступКСервисам(Команда)
	
	ПроверитьДоступКСервисамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДоступКСервисамНаСервере()
	
	РезультатПроверкиДоступностиСервисов = ЭлектронноеВзаимодействиеССервисами.ПроверитьДоступКСервисам();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РезультатПроверкиДоступностиСервисов);
	
	Элементы.ГруппаДоступСервис.ТекущаяСтраница = ?(РезультатПроверкиДоступностиСервисов.Сервис1СЭСФДоступен,
		Элементы.СтраницаДоступСервисУспешно,
		Элементы.СтраницаДоступСервисОшибка);
	
	Элементы.ГруппаДоступИТС.ТекущаяСтраница = ?(РезультатПроверкиДоступностиСервисов.СервисИТСДоступен,
		Элементы.СтраницаДоступИТСУспешно,
		Элементы.СтраницаДоступИТСОшибка);
	
КонецПроцедуры
	
&НаКлиенте
Процедура СоздатьНовогоПользователя(Команда)
	ОткрытьФорму("Справочник.ПользователиИСЭСФ.Форма.ФормаЭлемента", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьБиблиотеку(Команда)
	
	Если ВерсияКриптобиблиотекиНаСайте <> ВерсияКриптобиблиотекиБД Тогда
		ПоказатьПользовательскоеСоглашение("Обновление");		
		ОбновитьПредставлениеСтатусаКриптобиблиотеки();
	Иначе
		ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ОбновлениеКомпонентыКриптографии");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗаданияГСВС(Команда)

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура СохранитьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Отказ = Ложь;
	СохранитьНастройки(Отказ);
	Если НЕ Отказ Тогда
		ОбновитьИнтерфейс();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки(Отказ = Ложь)
	
	// Проверим корректность настроек
	Если ИспользоватьОбменЭСФЧерезAPI И НЕ ЗначениеЗаполнено(ВерсияКриптобиблиотекиБД) Тогда
		Отказ = Истина;
		ВызватьИсключение НСтр("ru = 'Прямой обмен данными с ИС ЭСФ невозможен, так как не загружена библиотека криптографии.'") + Символы.ПС + НСтр("ru = 'Необходимо установить библиотеку криптографии, либо отключить признак использования прямого обмена данными с ИС ЭСФ.'");
	КонецЕсли;
	
	Если Модифицированность И ПроверитьЗаполнение() Тогда		
		
		Константы.ИспользоватьОбменЭСФЧерезAPI.Установить(ИспользоватьОбменЭСФЧерезAPI);
		Константы.ИспользоватьОбменЭСФЧерезXML.Установить(ИспользоватьОбменЭСФЧерезXML);
		
		Константы.МестоВыполненияКриптографическихОпераций.Установить(МестоУстановкиБиблиотеки);
		Если ПравоДоступа("Администрирование", Метаданные) Тогда
			
			// Без права "Администрирование" платформа не позволяет внести изменения
			// в регламентированное задание.
			УстановитьНастройкиРегламентногоЗадания("СинхронизацияСИСЭСФ", РасписаниеРегламентногоЗадания, ОбновлятьСтатусыЭСФПоРасписанию);	
			
			Если ОбновлятьСтатусыЭСФПоРасписанию Тогда
				УстановитьПрофилиДляРегламентногоЗадания();
			КонецЕсли;
						
		КонецЕсли;
		

		ПараметрыЭСФ = ЭСФСервер.ПолучитьПараметрыЭСФ();
		ПараметрыЭСФ.ПерезаполнитьПризнакПроисхождения = ПерезаполнитьПризнакПроисхождения;
		ПараметрыЭСФ.СпособОпределенияВхожденияВПеречень = СпособОпределенияВхожденияВПеречень;
		ПараметрыЭСФ.ЗаполнитьИсточникиПроисхожденияБезусловно = ЗаполнитьИсточникиПроисхожденияБезусловно;
		ПараметрыЭСФ.ПорогОкругленияСумм = ПорогОкругленияСумм;
		ПараметрыЭСФ.ИспользоватьПодписьНовойКомпоненты = ИспользоватьКомпонентуНЦАДляПодписиДокументов;
		ПараметрыЭСФ.ИспользоватьОткрытиеСессииСПодписью = ОткрыватьСессиюСПодписью;
		ПараметрыЭСФ.ВремяЖизниТикетаЭСФ = ВремяЖизниТикетаЭСФ;
		
		ЭСФСервер.СохранитьПараметрыЭСФ(ПараметрыЭСФ);
		
		
		Модифицированность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗадания(ЭкземплярРасписанияРегламентногоЗадания = Неопределено, РасписаниеРегламентногоЗадания = "РасписаниеРегламентногоЗадания")
	
	Если ЭкземплярРасписанияРегламентногоЗадания = Неопределено Тогда
		ЭкземплярРасписанияРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ЭкземплярРасписанияРегламентногоЗадания);
	Диалог.Показать(Новый ОписаниеОповещения("РедактированиеРасписанияРегламентногоЗаданияЗавершение", ЭтаФорма, Новый Структура("ЭкземплярРасписанияРегламентногоЗадания, РасписаниеРегламентногоЗадания", ЭкземплярРасписанияРегламентногоЗадания, РасписаниеРегламентногоЗадания)));
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияЗавершение(Расписание, Контекст) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Контекст.ЭкземплярРасписанияРегламентногоЗадания <> Расписание Тогда
		Если Расписание.ПериодПовтораВТечениеДня < 600 Тогда
			Предупреждение(НСтр(
			"ru = 'Интервал повтора, устанавливаемое в расписании регламентного задания синхронизации с ИС ЭСФ, должен быть более чем 600 секунд!'"));
			Возврат; 	
		Иначе			
			Модифицированность = Истина;
			//Если Контекст.РасписаниеРегламентногоЗадания = "РасписаниеРегламентногоЗадания" Тогда
				РасписаниеРегламентногоЗадания = Расписание;
				ОбновитьПредставлениеРасписания(РасписаниеРегламентногоЗадания, Элементы.НастроитьРасписаниеРегламентногоЗадания.Заголовок);
			//ИначеЕсли Контекст.РасписаниеРегламентногоЗадания = "РасписаниеРегламентногоЗаданияГСВС" Тогда
			//	РасписаниеРегламентногоЗаданияГСВС = Расписание;
			//	ОбновитьПредставлениеРасписания(РасписаниеРегламентногоЗаданияГСВС, Элементы.НастроитьРасписаниеРегламентногоЗаданияГСВС.Заголовок);
			//КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеРасписания(РасписаниеРегламентногоЗадания, СтрокаЗаголовка)
	
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗадания);
	
	Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
		ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
	КонецЕсли;
	
	СтрокаЗаголовка = ПредставлениеРасписания;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеСтатусаКриптобиблиотекиНаКлиентеНаСервере(Форма)
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	// Данные о наличии загруженной библиотеки
	ВерсияВнешнегоМодуляКриптографии = Контейнер.ВерсияВнешнегоМодуляКриптографии();
	Форма.ВерсияКриптобиблиотекиБД = ВерсияВнешнегоМодуляКриптографии; 	
	ВерсияМодуляНаСайте = Контейнер.ПолучитьВерсиюКомпонентыНаСайте();
	Форма.ВерсияКриптобиблиотекиНаСайте = ВерсияМодуляНаСайте;
	БиблиотекаЗагружена = ЗначениеЗаполнено(ВерсияВнешнегоМодуляКриптографии); 	
	
	Форма.Элементы.ГруппаБиблиотекаУстановлена.Видимость = БиблиотекаЗагружена;	
	
	Если БиблиотекаЗагружена Тогда
		// Обновление данные о наличии установленной библиотекии, 
		// заполнение реквизита ВерсияКриптобиблиотеки в форме настройки
		РезультатПроверки = Контейнер.КриптопровайдерПодключается(Форма.ВерсияКриптобиблиотеки,,, Истина); // Без выдачи сообщения пользователю. Так как 	информация о статуске отображается визуально.
		Форма.ВерсияКриптобиблиотеки = СтрЗаменить(Форма.ВерсияКриптобиблиотеки, ",", ".");
	Иначе
		РезультатПроверки = Ложь;
	КонецЕсли;   
	
	ВерсияИБОтличаетсяОтВерсииНаСайте = (ЗначениеЗаполнено(Форма.ВерсияКриптобиблиотекиБД) И ЗначениеЗаполнено(Форма.ВерсияКриптобиблиотекиНаСайте)
		И Форма.ВерсияКриптобиблиотекиБД <> Форма.ВерсияКриптобиблиотекиНаСайте);
		
	ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ = (ЗначениеЗаполнено(Форма.ВерсияКриптобиблиотекиБД)
		И Форма.ВерсияКриптобиблиотеки <> Форма.ВерсияКриптобиблиотекиБД);
	
	Форма.Элементы.КартинкаБиблиотекаУстановлена.Видимость = НЕ ВерсияИБОтличаетсяОтВерсииНаСайте И НЕ ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ;	
	Форма.Элементы.КартинкаБиблиотекаНеОбновлена.Видимость = ВерсияИБОтличаетсяОтВерсииНаСайте ИЛИ ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ;	
	Форма.Элементы.ГруппаБиблиотекаНеУстановлена.Видимость = НЕ БиблиотекаЗагружена;
	
	Форма.Элементы.ГруппаВерсияБиблиотекиНаСайте.Видимость = ВерсияИБОтличаетсяОтВерсииНаСайте;
	Форма.Элементы.ГруппаДанныеБД.Видимость = НЕ ВерсияИБОтличаетсяОтВерсииНаСайте;
	Форма.Элементы.ГруппаВерсияБиблиотеки.Видимость = НЕ ВерсияИБОтличаетсяОтВерсииНаСайте;
	Форма.Элементы.НадписьБиблиотекаУстановлена.Видимость = НЕ ВерсияИБОтличаетсяОтВерсииНаСайте;

	Если ВерсияИБОтличаетсяОтВерсииНаСайте Тогда
		Форма.Элементы.НадписьБиблиотекаУстановлена.Заголовок = НСтр("ru = 'Библиотека установлена, но требует обновления версии'");	
	ИначеЕсли ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ Тогда
		Форма.Элементы.НадписьБиблиотекаУстановлена.Заголовок = НСтр("ru = 'Библиотека загружена в информационную базу, требуется установка версии на клиенте'");	
	ИначеЕсли НЕ РезультатПроверки Тогда
		Форма.Элементы.НадписьБиблиотекаУстановлена.Заголовок = НСтр("ru = 'Библиотека получена, но не установлена'");	
	Иначе
		Форма.Элементы.НадписьБиблиотекаУстановлена.Заголовок = НСтр("ru = 'Библиотека получена и готова к использованию'");	
	КонецЕсли;
	
	Если ВерсияИБОтличаетсяОтВерсииНаСайте Тогда
		Форма.Элементы.ОбновитьКриптобиблиотеку.Заголовок = НСтр("ru = 'Обновить криптобиблиотеку'");
	Иначе
		Форма.Элементы.ОбновитьКриптобиблиотеку.Заголовок = НСтр("ru = 'Установить криптобиблиотеку'");
	КонецЕсли;

	СформироватьЗаголовокЛокальнаяВерсияБиблиотеки(Форма, Форма.МестоУстановкиБиблиотеки);
	
	Форма.Элементы.ОбновитьКриптобиблиотеку.Видимость = ВерсияИБОтличаетсяОтВерсииНаСайте ИЛИ ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ;

КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеСтатусаКриптобиблиотекиНаСервере()
	
	ОбновитьПредставлениеСтатусаКриптобиблиотекиНаКлиентеНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеСтатусаКриптобиблиотеки()
	
	Если ЭтаФорма.ИнформационнаяБазаФайловая Тогда
		ОбновитьПредставлениеСтатусаКриптобиблиотекиНаКлиентеНаСервере(ЭтаФорма);
	Иначе	
		Если ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте") Тогда
			ОбновитьПредставлениеСтатусаКриптобиблиотекиНаКлиентеНаСервере(ЭтаФорма);
		Иначе
			ОбновитьПредставлениеСтатусаКриптобиблиотекиНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокЛокальнаяВерсияБиблиотеки(Форма, МестоУстановкиБиблиотеки)
	Если МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаСервере") Тогда
		Форма.Элементы.НадписьВерсияКриптобиблиотеки.Заголовок = "Версия на сервере:"
	Иначе	
		Форма.Элементы.НадписьВерсияКриптобиблиотеки.Заголовок = "Версия на машине пользователя:"
	КонецЕсли;		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьНастройкиРегламентногоЗадания(ИмяЗадания, РасписаниеРегламентногоЗадания, ИспользованиеРегЗадания) 
	
	РегламентноеЗадание = ПолучитьРегламентноеЗадание(ИмяЗадания);
	Если РегламентноеЗадание <> Неопределено Тогда
		РегламентноеЗадание.Расписание    = РасписаниеРегламентногоЗадания;
		РегламентноеЗадание.Использование = ИспользованиеРегЗадания;
		РегламентноеЗадание.ИнтервалПовтораПриАварийномЗавершении = 600; // Чтобы исключить нагрузку на сервер в случае аварийных повторов
		РегламентноеЗадание.Записать();
	КонецЕсли; 
	
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРегламентноеЗадание(ИмяЗадания);
	
	МетаданныеРегЗадания = Метаданные.РегламентныеЗадания[ИмяЗадания];
	
	МассивРегламентныхЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", МетаданныеРегЗадания));
	
	Для Каждого ТекСтрока Из МассивРегламентныхЗаданий Цикл
		
		Если ТекСтрока.Метаданные = МетаданныеРегЗадания Тогда
			Возврат ТекСтрока;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат РегламентныеЗадания.СоздатьРегламентноеЗадание(ИмяЗадания);
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Если Форма.ИспользоватьОбменЭСФЧерезAPI Тогда
		Доступность = Истина;
	Иначе
		Доступность = Ложь;
	КонецЕсли;
	
	Форма.Элементы.ГруппаКриптоБиблиотека.Доступность 	= Доступность;
	Форма.Элементы.ГруппаСтраницыДоступ.Доступность 	= Доступность;
	Форма.Элементы.ГруппаОбновлениеСтатусов.Доступность = Доступность;
	Форма.Элементы.ГруппаПользователя.Доступность 		= Доступность;
	
	
	Форма.Элементы.СоответствиеОрганизацийПрофилей.Видимость = Форма.ОбновлятьНоменклатуруГСВСПоРасписанию;

		Форма.Элементы.ГруппаВнешнийМодуль.Видимость = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПользовательскоеСоглашение(ЦельОткрытияСоглашения)
	ДополнительныеПараметры = Новый Структура("ЦельОткрытияСоглашения, ИспользоватьОбменЭСФЧерезAPI", ЦельОткрытияСоглашения, ИспользоватьОбменЭСФЧерезAPI);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаключениеПользовательскогоСоглашенияЗавершение", ЭтаФорма, ДополнительныеПараметры);		
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ПользовательскоеСоглашение", ДополнительныеПараметры, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройкиПрокси()
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ПараметрыПроксиСервера", , ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаключениеПользовательскогоСоглашенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	// Если условия использования не приняты, то использование криптографии недоступно.
	Если ДополнительныеПараметры.ЦельОткрытияСоглашения = "Заключение" Тогда
		Если Результат <> Истина Тогда		
			ЭСФКлиентСервер.СообщитьПользователю(НСТР("ru='В связи с отказом от заключения Соглашения возможность прямого обмена данными с ИС ЭСФ отключена.'"));
			ИспользоватьОбменЭСФЧерезAPI = Ложь;
			УправлениеФормой(ЭтаФорма);	
		КонецЕсли;
		ОбновитьПредставлениеСтатусаКриптобиблиотеки();
	КонецЕсли;	    	            	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьБиблиотекуИзБДНаСервере()
	Константы.ЭСФВерсияВнешнегоМодуля.Установить(Неопределено);	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьБиблиотекуИзБД(Команда)
	УдалитьБиблиотекуИзБДНаСервере();
	ОбновитьПредставлениеСтатусаКриптобиблиотеки();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРаботуБиблиотеки(Команда)
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	
	Версия = "";
	Результат = Контейнер.КриптопровайдерПодключается(Версия, Ложь, МестоУстановкиБиблиотеки);
	Если Результат Тогда
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Библиотека успешно подключена! Версия: %1'"), СокрЛП(Версия));
		ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе	
		ВызватьИсключение НСтр("ru = 'Не удалось подключить библиотеку криптографии.'") + Символы.ПС + ОписаниеОшибки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановкаБиблиотекиОфертаНажатие(Элемент)
	ПоказатьПользовательскоеСоглашение("Ознакомление");
КонецПроцедуры

&НаКлиенте
Процедура НадписьОписаниеОбменаЧерезAPIПроксиНажатие(Элемент)
	ПоказатьНастройкиПрокси();
КонецПроцедуры

&НаКлиенте
Процедура МестоУстановкиБиблиотекиПриИзменении(Элемент)
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьПредставлениеСтатусаКриптобиблиотеки();
КонецПроцедуры

&НаСервере
Процедура ГруппаСтраницыПриСменеСтраницыНаСервере(Знач ТекущаяСтраница, ОбновитьИнтерфейс)
	ОбновитьИнтерфейс = Ложь;
	Если ТекущаяСтраница = "ГруппаПользователя" Тогда
		Если ИспользоватьОбменЭСФЧерезAPI И НЕ Константы.ИспользоватьОбменЭСФЧерезAPI.Получить() Тогда
			
			Отказ = Ложь;
			СохранитьНастройки(Отказ);
			
			Если Не Отказ Тогда
				ОбновитьИнтерфейс = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнятьПризнакПроисхожденияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УстановитьДоступностьОпределенияПризнака();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьОпределенияПризнака()
	
	Элементы.СпособОпределенияВхожденияВПеречень.Доступность = ПерезаполнитьПризнакПроисхождения;
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьДоступностьАутентификацииСПодписью()
	
	ДоступностьМеханизма = ЭСФКлиентСервер.ДоступенНовыйМетодАутентификации();
	ДоступностьКонтроляВремени = ЭСФКлиентСервер.ДоступенКонтрольАктивностиСессии();
	Элементы.ГруппаИспользованиеКомпонентыНЦА.Видимость = ДоступностьМеханизма;
	Элементы.ГруппаБиблиотекаУстановленаНЦА.Видимость = ДоступностьМеханизма;
	Элементы.ВремяТикетаЭСФ.Видимость = ДоступностьКонтроляВремени;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПризнакВхожденияВПереченьПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсточникиПроисхожденияБезусловноПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПорогОкругленияСуммПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПрофилейИСЭСФ()
	
	ТаблицаПрофилей = ПолучитьТекущуюТаблицуПрофилей();
	СоответствиеОрганизацийПрофилей.Загрузить(ТаблицаПрофилей);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПрофилиДляРегламентногоЗадания()
	
	ПрофилиДляСинхронизации = Новый Массив();
	Для Каждого ТекСтрока Из СоответствиеОрганизацийПрофилей Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ПрофильИСЭСФ) Тогда
			ПрофилиДляСинхронизации.Добавить(ТекСтрока.ПрофильИСЭСФ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПрофилиИСЭСФ.Ссылка КАК Ссылка,
	|	ИСТИНА КАК ИспользоватьДляРегламентногоЗадания
	|ИЗ
	|	Справочник.ПрофилиИСЭСФ КАК ПрофилиИСЭСФ
	|ГДЕ
	|	НЕ ПрофилиИСЭСФ.ИспользоватьДляРегламентногоЗадания
	|	И ПрофилиИСЭСФ.Ссылка В(&ПрофилиДляСинхронизации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПрофилиИСЭСФ.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.ПрофилиИСЭСФ КАК ПрофилиИСЭСФ
	|ГДЕ
	|	ПрофилиИСЭСФ.ИспользоватьДляРегламентногоЗадания
	|	И НЕ ПрофилиИСЭСФ.Ссылка В (&ПрофилиДляСинхронизации)");
	
	Запрос.УстановитьПараметр("ПрофилиДляСинхронизации", ПрофилиДляСинхронизации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПрофильОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПрофильОбъект.ИспользоватьДляРегламентногоЗадания = Выборка.ИспользоватьДляРегламентногоЗадания;
		Попытка
			ПрофильОбъект.Записать();
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось записать %1!'");
			ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, Выборка.Ссылка);
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьТекущуюТаблицуПрофилей()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиИСЭСФ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВТ_Организации
	|ИЗ
	|	Справочник.ПрофилиИСЭСФ КАК ПрофилиИСЭСФ
	|ГДЕ
	|	НЕ ПрофилиИСЭСФ.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ПрофилиИСЭСФ.Ссылка, ЗНАЧЕНИЕ(Справочник.ПрофилиИСЭСФ.ПустаяСсылка)) КАК ПрофильИСЭСФ
	|ИЗ
	|	ВТ_Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиИСЭСФ КАК ПрофилиИСЭСФ
	|		ПО Организации.СтруктурнаяЕдиница = ПрофилиИСЭСФ.СтруктурнаяЕдиница
	|			И (ПрофилиИСЭСФ.ИспользоватьДляСинхронизации)
	|			И (ПрофилиИСЭСФ.ИспользоватьДляРегламентногоЗадания)
	|			И (НЕ ПрофилиИСЭСФ.ПометкаУдаления)");
	

	ТаблицаПрофилей = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПрофилей
	
КонецФункции

#Область ВС

&НаКлиенте
Процедура НастроитьПараметрыПодключенияКМодулюВС(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступИВерсиюВС(Команда)
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервереВС()
КонецПроцедуры

&НаКлиенте
Процедура НадписьОписаниеОбменаЧерезAPIПрокси1Нажатие(Элемент)
	ПоказатьНастройкиПрокси();
КонецПроцедуры

&НаКлиенте
Процедура НадписьОписаниеОбменаЧерезAPIПрокси2Нажатие(Элемент)
	ПоказатьНастройкиПрокси();
КонецПроцедуры

&НаКлиенте
Процедура СпособЗаполненияЦеныПриИзменении(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ТипЦеныПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеЦеныПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДатаПереходаНаУчетПоИдентификаторамТоваровВСПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ВнешнийМодуль

&НаКлиенте
Процедура ИспользоватьВнешнийМодульПриИзменении(Элемент)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеМодульОбменаПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеМодульОбменаПредставлениеОчистка(Элемент, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайл(Команда)
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПризнакУчетаНаВиртуальномСкладе(Команда)

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СоответствиеОрганизацийПрофилейПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКомпонентуНЦАПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОткрыватьСессиюСПодписьюПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКомпонентуНЦА(Команда)
	
	УникальныйИдентификаторФормыКлиента = ЭтаФорма.УникальныйИдентификатор;
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	СсылкаНаМодуль = Контейнер.АдресБиблиотекиКриптографииНЦА(УникальныйИдентификаторФормыКлиента);	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановкаКомпонентыЗавершение", ЭтаФорма);		
	НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещения, СсылкаНаМодуль);
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаКомпонентыЗавершение(Результат)Экспорт
	
	Оповестить("ОбновленМодульКриптографии");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРаботуНЦА(Команда)	
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИнформацияОСистеме = Символы.ПС + "Сведения об аппаратном и программном обеспечении:";
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "ОС: " + СистемнаяИнформация.ВерсияОС;
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "Версия 1С:" + СистемнаяИнформация.ВерсияПриложения;
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "Тип платформы:" + СистемнаяИнформация.ТипПлатформы;	
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "Тип процессора:" + СистемнаяИнформация.Процессор;	
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Результат = Контейнер.УдалосьПодключитьКриптопровайдерНЦАНаКлиенте(ВерсияКомпонентыНЦА, Ложь, Истина);
	ВерсияКомпонентыНЦА = СтрЗаменить(ВерсияКомпонентыНЦА, ",", ".");
	
	Если Результат Тогда
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Библиотека успешно подключена! Версия: %1 %2'"), СокрЛП(ВерсияКомпонентыНЦА), Символы.ПС + ИнформацияОСистеме);
	Иначе	
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось подключить библиотеку криптографии. Возможно она не установлена или возникла ошибка при попытке ее подключения. %1 %2'"), Символы.ПС + ОписаниеОшибки(), ИнформацияОСистеме);
	КонецЕсли;
	ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьПредставлениеСтатусаКопонентыНЦАНаКлиенте(Форма)
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	РезультатПроверки = Контейнер.УдалосьПодключитьКриптопровайдерНЦАНаКлиенте(Форма.ВерсияКомпонентыНЦА, Истина, Истина);
	ВерсияВБазе = ЭСФКлиентСервер.ВерсияКомпонентыНЦАВБазе();	
	Форма.ВерсияКомпонентыНЦА = СтрЗаменить(Форма.ВерсияКомпонентыНЦА, ",", ".");
	Форма.Элементы.ОбновитьКомпонентуНЦА.Видимость = Истина;
	Форма.ВерсияКомпонентыНЦАВБД = ВерсияВБазе;
	
	Если НЕ РезультатПроверки Тогда
		Форма.Элементы.НадписьБиблиотекаНЦАУстановлена.Заголовок = НСтр("ru = 'Библиотека не установлена'");
		Форма.Элементы.ОбновитьКомпонентуНЦА.Заголовок = НСтр("ru = 'Установить компоненту'");
		Форма.Элементы.КартинкаКомпонентаНЦАУстановлена.Видимость = Ложь;	
		Форма.Элементы.КартинкаКомпонентаНЦАНеОбновлена.Видимость = Истина;	
	ИначеЕсли Форма.ВерсияКомпонентыНЦА < ВерсияВБазе Тогда
		Форма.Элементы.НадписьБиблиотекаНЦАУстановлена.Заголовок = НСтр("ru = 'Библиотека установлена, но требует обновления версии'");		
		Форма.Элементы.ОбновитьКомпонентуНЦА.Заголовок = НСтр("ru = 'Обновить компоненту'");
		Форма.Элементы.КартинкаКомпонентаНЦАУстановлена.Видимость = Ложь;
	Иначе
		Форма.Элементы.НадписьБиблиотекаНЦАУстановлена.Заголовок = НСтр("ru = 'Библиотека установлена и готова к использованию'");
		Форма.Элементы.ОбновитьКомпонентуНЦА.Видимость = Ложь;
		Форма.Элементы.КартинкаКомпонентаНЦАУстановлена.Видимость = Истина;
		Форма.Элементы.КартинкаКомпонентаНЦАНеОбновлена.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВремяЖизниТикетаЭСФПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#Область ИнтернетПоддержка

&НаКлиенте
Процедура ВойтиИлиВыйтиИПП(Команда)
	
	Если ДанныеАутентификации = Неопределено Тогда
		ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ПодключениеИнтернетПоддержки", Новый Структура("ЗаголовокКнопкиОК, ЗапомнитьПароль", Неопределено, Истина), ЭтаФорма);
	Иначе
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПриОтветеНаВопросОВыходеИзИнтернетПоддержки", ЭтаФорма),
			НСтр("ru = 'Логин и пароль для подключения к сервисам Интернет-поддержки пользователей будут удалены из программы.
				|Отключить Интернет-поддержку?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет,
			НСтр("ru = 'Выход из Интернет-поддержки пользователей'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОтветеНаВопросОВыходеИзИнтернетПоддержки(КодВозврата, ДопПараметры) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		ВыйтиИзИППСервер();
		ДанныеАутентификации = Неопределено;
		ОтобразитьСостояниеПодключенияИПП();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыйтиИзИППСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	ЭСФСервер.СохранитьДанныеАутентификации(Неопределено);
	ЭлектронноеВзаимодействиеССервисами.ПриИзмененииДанныхАутентификации(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСостояниеПодключенияИПП()
	
	Если ДанныеАутентификации = Неопределено Тогда
		Элементы.ДекорацияЛогинИПП.Заголовок = НСтр("ru = 'Подключение к Интернет-поддержке не выполнено.'");
		Элементы.ВойтиИлиВыйтиИПП.Заголовок = НСтр("ru = 'Подключить'");
		Элементы.НадписьОписаниеОтключениеИПП.Видимость = Ложь;
	Иначе
		ШаблонЗаголовка = НСтр("ru = 'Подключена Интернет-поддержка для пользователя %1'");
		Элементы.ДекорацияЛогинИПП.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ДанныеАутентификации.Логин);
		Элементы.ВойтиИлиВыйтиИПП.Заголовок = НСтр("ru = 'Отключить'");
		Элементы.НадписьОписаниеОтключениеИПП.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти