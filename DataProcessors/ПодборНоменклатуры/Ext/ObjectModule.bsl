Перем ПоказыватьТолькоТМЦИмеющиеОстатки Экспорт;
Перем мТекстЗапросаОтборНоменклатурыПоРодителю;

#Если Клиент Тогда

// Функция формирует список имен параметров для подстановки значений в запросы
//
// Параметры
//  ИмяПодбора - строка, имя подбора, по которому определяется запрос
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокПараметровЗапроса(ИмяПодбора) Экспорт

	СписокЗначенийВозврата = Новый СписокЗначений;

	Если ИмяПодбора = "ОстаткиИЦеныНоменклатуры"
	 ИЛИ ИмяПодбора = "ОстаткиИПлановаяСебестоимость" Тогда

		СписокЗначенийВозврата.Добавить("ТипЦен");
		СписокЗначенийВозврата.Добавить("Организация");
		СписокЗначенийВозврата.Добавить("СтруктурноеПодразделение");
		СписокЗначенийВозврата.Добавить("Склад");

	ИначеЕсли ИмяПодбора = "ОстаткиНоменклатуры" Тогда

		СписокЗначенийВозврата.Добавить("Организация");
		СписокЗначенийВозврата.Добавить("СтруктурноеПодразделение");
		СписокЗначенийВозврата.Добавить("Склад");

	ИначеЕсли ИмяПодбора = "ЦеныНоменклатуры"
		  ИЛИ ИмяПодбора = "ЦеныУслуг"
		  ИЛИ ИмяПодбора = "Услуги" Тогда

		СписокЗначенийВозврата.Добавить("Организация");
		СписокЗначенийВозврата.Добавить("ТипЦен");

	КонецЕсли;

	Возврат СписокЗначенийВозврата;

КонецФункции

// Функция формирует текст запроса по ИмяПодбора = "РасходОстаткиИЦеныНоменклатуры" для заполнения табличной части
//
// Возвращаемое значение:
//   Текст запроса
//
Функция ЗапросОстаткиИЦеныНоменклатуры(ФильтрПоСубконто, Условие, ФильтрПоСчету = "", ВключитьИерархиюОстатков = Истина)

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Подбор.Код                                      КАК Код,
	|	Подбор.Артикул                                  КАК Артикул,
	|	Подбор.ЭтоГруппа                                КАК ЭтоГруппа,
	|	Подбор.ПометкаУдаления                          КАК ПометкаУдаления,
	|	Подбор.Услуга                                   КАК Услуга,
	|	Подбор.Номенклатура                             КАК Номенклатура,
	|	Подбор.Родитель                                 КАК Родитель,
	|	Подбор.КоличествоОстатокОрганизации             КАК КоличествоОстатокОрганизации,
	|	Подбор.Цена                                     КАК Цена,
	|	Подбор.ЕдиницаИзмерения                         КАК ЕдиницаИзмерения,
	|	Подбор.Валюта                                   КАК Валюта,
	|	Подбор.Номенклатура.Представление               КАК ПредставлениеНоменклатура,
	|	Подбор.ЕдиницаИзмерения.НаименованиеПолное      КАК ПредставлениеЕдиницаИзмерения,
	|	Подбор.Валюта.Представление                     КАК ПредставлениеВалюта,
	|	ВЫБОР
	|		КОГДА Подбор.ЭтоГруппа ТОГДА ""Группа""
	|		ИНАЧЕ Подбор.Номенклатура.НоменклатурнаяГруппа.Представление
	|	КОНЕЦ                                           КАК ПредставлениеНоменклатурнаяГруппа,
	|	Ложь                                            КАК ПереходитьВверх
	|ИЗ
	|
	|(
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Код                               КАК Код,
	|	СправочникНоменклатура.Артикул                           КАК Артикул,
	|	СправочникНоменклатура.ЭтоГруппа                         КАК ЭтоГруппа,
	|	СправочникНоменклатура.ПометкаУдаления                   КАК ПометкаУдаления,
	|	СправочникНоменклатура.Услуга                            КАК Услуга,
	|	СправочникНоменклатура.Ссылка                            КАК Номенклатура,
	|	СправочникНоменклатура.Родитель                          КАК Родитель,
	|	СУММА(Остатки.КоличествоОстатокОрганизации)              КАК КоличествоОстатокОрганизации,
	|	МАКСИМУМ(ЦеныСрезПоследних.Цена) КАК Цена,
	|	СправочникНоменклатура.БазоваяЕдиницаИзмерения   КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ЦеныСрезПоследних.Валюта) 				 КАК Валюта
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаРегистраСведений, " + ?(ВключитьИерархиюОстатков,мТекстЗапросаОтборНоменклатурыПоРодителю, СтрЗаменить(мТекстЗапросаОтборНоменклатурыПоРодителю, " ГДЕ Номенклатура.Родитель = &Родитель", "")) + " И ТипЦен = &ТипЦен И Организация = &Организация) КАК ЦеныСрезПоследних
	|ПО
	|	ЦеныСрезПоследних.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(
	|	ВЫБРАТЬ
	|		ТиповойОстатки.Субконто1 КАК Номенклатура,
	|		СУММА(ВЫБОР КОГДА ТиповойОстатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТиповойОстатки.КоличествоОстатокДт КОНЕЦ) КАК КоличествоОстатокОрганизации
	|	ИЗ
	|		РегистрБухгалтерии.Типовой.Остатки(&Дата, " + ФильтрПоСчету + ", &ВидыСубконто, " + Условие + ФильтрПоСубконто + ") КАК ТиповойОстатки
	|   	
	|	СГРУППИРОВАТЬ ПО
	|		ТиповойОстатки.Субконто1
	|
	|	) КАК Остатки
	|
	|ПО
	|	Остатки.Номенклатура = СправочникНоменклатура.Ссылка
	|";
	Если ВключитьИерархиюОстатков Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|ГДЕ
		|	СправочникНоменклатура.Родитель = &Родитель";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	СправочникНоменклатура.ЭтоГруппа = ЛОЖЬ";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса+"
	|
	|СГРУППИРОВАТЬ ПО
	|	СправочникНоменклатура.Родитель,
	|	СправочникНоменклатура.Ссылка
	|
	|) КАК Подбор
	|";
	Если ПоказыватьТолькоТМЦИмеющиеОстатки Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ГДЕ
		|	(Подбор.КоличествоОстатокОрганизации > &парамНоль
		|			ИЛИ Подбор.ЭтоГруппа = &парамИстина)
		|";
	КонецЕсли;
	Если ВключитьИерархиюОстатков Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|УПОРЯДОЧИТЬ ПО
		|	Подбор.ЭтоГруппа УБЫВ,
		|	Подбор.Номенклатура.Наименование
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса+"
		|УПОРЯДОЧИТЬ ПО
		|	Подбор.Номенклатура.Наименование
		|";
	КонецЕсли;
	

	Возврат ТекстЗапроса;
	
КонецФункции // ЗапросРасходОстаткиИЦеныНоменклатуры()

// Функция формирует текст запроса по ИмяПодбора = "ОстаткиНоменклатуры" для заполнения табличной части
//
// Возвращаемое значение:
//   Текст запроса
//
Функция ЗапросОстаткиНоменклатуры(ФильтрПоСубконто, Условие, ФильтрПоСчету = "", ВключитьИерархиюОстатков = Истина)
	
	Если ПоказыватьТолькоТМЦИмеющиеОстатки Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура).Код КАК Код,
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура).Артикул КАК Артикул,
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура).ПометкаУдаления КАК ПометкаУдаления,
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура).Услуга КАК Услуга,
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура) КАК Номенклатура,
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура).Наименование КАК Наименование,
					   |	СУММА(ВЫБОР
					   |			КОГДА ТиповойОстатки.КоличествоОстатокДт ЕСТЬ NULL 
					   |				ТОГДА 0
					   |			ИНАЧЕ ТиповойОстатки.КоличествоОстатокДт
					   |		КОНЕЦ) КАК КоличествоОстатокОрганизации,
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура).БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура).Представление КАК ПредставлениеНоменклатура,
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура).БазоваяЕдиницаИзмерения.НаименованиеПолное КАК ПредставлениеЕдиницаИзмерения,
					   |	ЛОЖЬ КАК ПереходитьВверх,
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура).Родитель КАК Родитель
					   |ИЗ
					   |	РегистрБухгалтерии.Типовой.Остатки(&Дата, " + ФильтрПоСчету + ", &ВидыСубконто, " + Условие + ФильтрПоСубконто + " ) КАК ТиповойОстатки
					   |
					   |СГРУППИРОВАТЬ ПО
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура),
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура).Код,
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура).Наименование,
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура).Артикул,
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура).ПометкаУдаления,
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура).Услуга,
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура).Родитель,
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура).БазоваяЕдиницаИзмерения,
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура).БазоваяЕдиницаИзмерения.НаименованиеПолное,
					   |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура).Представление
					   |
					   |УПОРЯДОЧИТЬ ПО
					   |	Наименование";
					   
   Иначе
								
								
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура) КАК Номенклатура,
		|	СУММА(ВЫБОР
		|		КОГДА ТиповойОстатки.КоличествоОстатокДт ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ ТиповойОстатки.КоличествоОстатокДт
		|		КОНЕЦ) КАК КоличествоОстатокОрганизации
		|ПОМЕСТИТЬ Остатки_ВТ
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&Дата, " + ФильтрПоСчету + ", &ВидыСубконто, " + Условие + ФильтрПоСубконто + ") КАК ТиповойОстатки
	    |
		|СГРУППИРОВАТЬ ПО
		|	ТиповойОстатки.Субконто1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|////////////////////////////////////////////////////////////////////////////////
        |		
		|ВЫБРАТЬ
		|	Подбор.Код                                      КАК Код,
		|	Подбор.Артикул                                  КАК Артикул,
		|	Подбор.ЭтоГруппа                                КАК ЭтоГруппа,
		|	Подбор.ПометкаУдаления                          КАК ПометкаУдаления,
		|	Подбор.Услуга                                   КАК Услуга,
		|	Подбор.Номенклатура                             КАК Номенклатура,
		|	Подбор.Родитель                                 КАК Родитель,
		|	Подбор.КоличествоОстатокОрганизации             КАК КоличествоОстатокОрганизации,
		|	Подбор.ЕдиницаИзмерения                         КАК ЕдиницаИзмерения,
		|	Подбор.Номенклатура.Представление               КАК ПредставлениеНоменклатура,
		|	Подбор.ЕдиницаИзмерения.НаименованиеПолное      КАК ПредставлениеЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА Подбор.ЭтоГруппа ТОГДА ""Группа""
		|		ИНАЧЕ Подбор.Номенклатура.НоменклатурнаяГруппа.Представление
		|	КОНЕЦ                                           КАК ПредставлениеНоменклатурнаяГруппа,
		|	Ложь                                            КАК ПереходитьВверх
		|ИЗ
		|
		|(
		|ВЫБРАТЬ
		|	СправочникНоменклатура.Код                               КАК Код,
		|	СправочникНоменклатура.Артикул                           КАК Артикул,
		|	СправочникНоменклатура.ЭтоГруппа                         КАК ЭтоГруппа,
		|	СправочникНоменклатура.ПометкаУдаления                   КАК ПометкаУдаления,
		|	СправочникНоменклатура.Услуга                            КАК Услуга,
		|	СправочникНоменклатура.Ссылка                            КАК Номенклатура,
		|	СправочникНоменклатура.Родитель                          КАК Родитель,
		|	СУММА(Остатки_ВТ.КоличествоОстатокОрганизации)           КАК КоличествоОстатокОрганизации,
		|	СправочникНоменклатура.БазоваяЕдиницаИзмерения   		 КАК ЕдиницаИзмерения
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Остатки_ВТ КАК Остатки_ВТ
		|	ПО (Остатки_ВТ.Номенклатура = СправочникНоменклатура.Ссылка)
		|";
		Если ВключитьИерархиюОстатков Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	СправочникНоменклатура.Родитель = &Родитель";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	СправочникНоменклатура.ЭтоГруппа = ЛОЖЬ";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|
		|СГРУППИРОВАТЬ ПО
		|	СправочникНоменклатура.Родитель,
		|	СправочникНоменклатура.Ссылка
		|
		|) КАК Подбор";
		Если ПоказыватьТолькоТМЦИмеющиеОстатки Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ГДЕ
			|	(Подбор.КоличествоОстатокОрганизации > &парамНоль
			|			ИЛИ Подбор.ЭтоГруппа = &парамИстина)
			|";
		КонецЕсли;
		Если ВключитьИерархиюОстатков Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	Подбор.ЭтоГруппа УБЫВ,
			|	Подбор.Номенклатура.Наименование
			|";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	Подбор.Номенклатура.Наименование
			|";
		КонецЕсли;
		
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции // ЗапросОстаткиНоменклатуры()

// Функция формирует текст запроса по ИмяПодбора = "РасходПоЦенамНоменклатуры" для заполнения табличной части
//
// Возвращаемое значение:
//   Текст запроса
//
Функция ЗапросЦеныНоменклатуры(ВключитьИерархиюОстатков)

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Подбор.Код                                      КАК Код,
	|	Подбор.Артикул                                  КАК Артикул,
	|	Подбор.ЭтоГруппа                                КАК ЭтоГруппа,
	|	Подбор.ПометкаУдаления                          КАК ПометкаУдаления,
	|	Подбор.Услуга                                   КАК Услуга,
	|	Подбор.Номенклатура                             КАК Номенклатура,
	|	Подбор.Родитель                                 КАК Родитель,
	|	Подбор.Цена                                     КАК Цена,
	|	Подбор.ЕдиницаИзмерения                         КАК ЕдиницаИзмерения,
	|	Подбор.Валюта                                   КАК Валюта,
	|	Подбор.Номенклатура.Представление               КАК ПредставлениеНоменклатура,
	|	Подбор.ЕдиницаИзмерения.НаименованиеПолное      КАК ПредставлениеЕдиницаИзмерения,
	|	Подбор.Валюта.Представление                     КАК ПредставлениеВалюта,
	|	ВЫБОР
	|		КОГДА Подбор.ЭтоГруппа ТОГДА ""Группа""
	|		ИНАЧЕ Подбор.Номенклатура.НоменклатурнаяГруппа.Представление
	|	КОНЕЦ                                           КАК ПредставлениеНоменклатурнаяГруппа,
	|	Ложь                                            КАК ПереходитьВверх
	|ИЗ
	|
	|(
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Код                               КАК Код,
	|	СправочникНоменклатура.Артикул                           КАК Артикул,
	|	СправочникНоменклатура.ЭтоГруппа                         КАК ЭтоГруппа,
	|	СправочникНоменклатура.ПометкаУдаления                   КАК ПометкаУдаления,
	|	СправочникНоменклатура.Услуга                            КАК Услуга,
	|	СправочникНоменклатура.Ссылка                            КАК Номенклатура,
	|	СправочникНоменклатура.Родитель                          КАК Родитель,
	|	МАКСИМУМ(ЦеныСрезПоследних.Цена) КАК Цена,
	|	СправочникНоменклатура.БазоваяЕдиницаИзмерения   КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ЦеныСрезПоследних.Валюта) 				 КАК Валюта
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаРегистраСведений, " + ?(ВключитьИерархиюОстатков,мТекстЗапросаОтборНоменклатурыПоРодителю, СтрЗаменить(мТекстЗапросаОтборНоменклатурыПоРодителю, " ГДЕ Номенклатура.Родитель = &Родитель", "")) + " И ТипЦен = &ТипЦен И Организация = &Организация) КАК ЦеныСрезПоследних
	|ПО
	|	ЦеныСрезПоследних.Номенклатура = СправочникНоменклатура.Ссылка
	|";
	Если ВключитьИерархиюОстатков ТОгда
		ТекстЗапроса = ТекстЗапроса+"
		|ГДЕ
		|	СправочникНоменклатура.Родитель = &Родитель";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	СправочникНоменклатура.ЭтоГруппа = ЛОЖЬ";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса+"
	|
	|СГРУППИРОВАТЬ ПО
	|	СправочникНоменклатура.Родитель,
	|	СправочникНоменклатура.Ссылка
	|
	|) КАК Подбор
	|";
	Если ВключитьИерархиюОстатков ТОгда
		ТекстЗапроса = ТекстЗапроса+"
		|УПОРЯДОЧИТЬ ПО
		|	Подбор.ЭтоГруппа УБЫВ,
		|	Подбор.Номенклатура.Наименование
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса+"
		|УПОРЯДОЧИТЬ ПО
		|	Подбор.Номенклатура.Наименование
		|";
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции // ЗапросРасходПоЦенамНоменклатуры()

// Функция формирует текст запроса по ИмяПодбора = "РасходУслуги" для заполнения табличной части
//
// Возвращаемое значение:
//   Текст запроса
//
Функция ЗапросУслуги(ВключитьИерархиюОстатков)

	ТекстЗапроса = "ВЫБРАТЬ
	|	Подбор.Код                                      КАК Код,
	|	Подбор.Артикул                                  КАК Артикул,
	|	Подбор.ЭтоГруппа                                КАК ЭтоГруппа,
	|	Подбор.ПометкаУдаления                          КАК ПометкаУдаления,
	|	Подбор.Услуга                                   КАК Услуга,
	|	Подбор.Номенклатура                             КАК Номенклатура,
	|	Подбор.Родитель                                 КАК Родитель,
	|	Подбор.ЕдиницаИзмерения                         КАК ЕдиницаИзмерения,
	|	Подбор.Номенклатура.Представление               КАК ПредставлениеНоменклатура,
	|	Подбор.ЕдиницаИзмерения.НаименованиеПолное      КАК ПредставлениеЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА Подбор.ЭтоГруппа ТОГДА ""Группа""
	|		ИНАЧЕ Подбор.Номенклатура.НоменклатурнаяГруппа.Представление
	|	КОНЕЦ                                           КАК ПредставлениеНоменклатурнаяГруппа,
	|	Ложь                                            КАК ПереходитьВверх
	|ИЗ
	|
	|(
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Код                               КАК Код,
	|	СправочникНоменклатура.Артикул  	                     КАК Артикул,
	|	СправочникНоменклатура.ЭтоГруппа                         КАК ЭтоГруппа,
	|	СправочникНоменклатура.ПометкаУдаления                   КАК ПометкаУдаления,
	|	СправочникНоменклатура.Услуга                            КАК Услуга,
	|	СправочникНоменклатура.Ссылка                            КАК Номенклатура,
	|	СправочникНоменклатура.Родитель                          КАК Родитель,
	|	СправочникНоменклатура.БазоваяЕдиницаИзмерения           КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|";
	Если ВключитьИерархиюОстатков Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|ГДЕ
		|	СправочникНоменклатура.Родитель = &Родитель
		|	И
		|	(СправочникНоменклатура.Услуга = Истина
		|	ИЛИ
		|	СправочникНоменклатура.ЭтоГруппа = Истина)";
	Иначе
		ТекстЗапроса = ТекстЗапроса+"
		|ГДЕ
		|	СправочникНоменклатура.Услуга = Истина
		|	И
		|	СправочникНоменклатура.ЭтоГруппа = ЛОЖЬ";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса+"
	|
	|СГРУППИРОВАТЬ ПО
	|	СправочникНоменклатура.Родитель,
	|	СправочникНоменклатура.Ссылка
	|
	|) КАК Подбор
	|";
	Если ВключитьИерархиюОстатков Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|УПОРЯДОЧИТЬ ПО
		|	Подбор.ЭтоГруппа УБЫВ,
		|	Подбор.Номенклатура.Наименование
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса+"
		|УПОРЯДОЧИТЬ ПО
		|	Подбор.Номенклатура.Наименование
		|";
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции // ЗапросРасходУслуги()

// Функция формирует текст запроса по ИмяПодбора = "РасходЦеныУслуг" для заполнения табличной части
//
// Возвращаемое значение:
//   Текст запроса
//
Функция ЗапросЦеныУслуг(ВключитьИерархиюОстатков)

	ТекстЗапроса = "ВЫБРАТЬ
	|	Подбор.Код                                      КАК Код,
	|	Подбор.Артикул                                  КАК Артикул,
	|	Подбор.ЭтоГруппа                                КАК ЭтоГруппа,
	|	Подбор.ПометкаУдаления                          КАК ПометкаУдаления,
	|	Подбор.Услуга                                   КАК Услуга,
	|	Подбор.Номенклатура                             КАК Номенклатура,
	|	Подбор.Родитель                                 КАК Родитель,
	|	Подбор.Цена                                     КАК Цена,
	|	Подбор.ЕдиницаИзмерения                         КАК ЕдиницаИзмерения,
	|	Подбор.Валюта                                   КАК Валюта,
	|	Подбор.Номенклатура.Представление               КАК ПредставлениеНоменклатура,
	|	Подбор.ЕдиницаИзмерения.НаименованиеПолное      КАК ПредставлениеЕдиницаИзмерения,
	|	Подбор.Валюта.Представление                     КАК ПредставлениеВалюта,
	|	ВЫБОР
	|		КОГДА Подбор.ЭтоГруппа ТОГДА ""Группа""
	|		ИНАЧЕ Подбор.Номенклатура.НоменклатурнаяГруппа.Представление
	|	КОНЕЦ                                           КАК ПредставлениеНоменклатурнаяГруппа,
	|	Ложь                                            КАК ПереходитьВверх
	|ИЗ
	|
	|(
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Код                               КАК Код,
	|	СправочникНоменклатура.Артикул                           КАК Артикул,
	|	СправочникНоменклатура.ЭтоГруппа                         КАК ЭтоГруппа,
	|	СправочникНоменклатура.ПометкаУдаления                   КАК ПометкаУдаления,
	|	СправочникНоменклатура.Услуга                            КАК Услуга,
	|	СправочникНоменклатура.Ссылка                            КАК Номенклатура,
	|	СправочникНоменклатура.Родитель                          КАК Родитель,
	|	МАКСИМУМ(ЦеныСрезПоследних.Цена) 						 КАК Цена,
	|	СправочникНоменклатура.БазоваяЕдиницаИзмерения 			 КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ЦеныСрезПоследних.Валюта) 						 КАК Валюта
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаРегистраСведений, " + ?(ВключитьИерархиюОстатков,мТекстЗапросаОтборНоменклатурыПоРодителю, СтрЗаменить(мТекстЗапросаОтборНоменклатурыПоРодителю, " ГДЕ Номенклатура.Родитель = &Родитель", "")) + " И ТипЦен = &ТипЦен И Организация = &Организация) КАК ЦеныСрезПоследних
	|ПО
	|	ЦеныСрезПоследних.Номенклатура = СправочникНоменклатура.Ссылка
	|";
	Если ВключитьИерархиюОстатков Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|ГДЕ
		|	(СправочникНоменклатура.Родитель = &Родитель) И
		|	(СправочникНоменклатура.Ссылка.ЭтоГруппа ИЛИ СправочникНоменклатура.Услуга = Истина)";
	Иначе
		ТекстЗапроса = ТекстЗапроса+"
		|ГДЕ
		|	СправочникНоменклатура.Ссылка.ЭтоГруппа = ЛОЖЬ И СправочникНоменклатура.Услуга = Истина";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса+"
	|
	|СГРУППИРОВАТЬ ПО
	|	СправочникНоменклатура.Родитель,
	|	СправочникНоменклатура.Ссылка
	|
	|) КАК Подбор
	|";
	Если ВключитьИерархиюОстатков Тогда
		ТекстЗапроса = ТекстЗапроса+"
		|УПОРЯДОЧИТЬ ПО
		|	Подбор.ЭтоГруппа УБЫВ,
		|	Подбор.Номенклатура.Наименование
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса+"
		|УПОРЯДОЧИТЬ ПО
		|	Подбор.Номенклатура.Наименование
		|";
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции // ЗапросРасходЦеныУслуг()

// Функция определяет какой запрос надо использовать для заполнения табличной части
//
// Параметры
//  ИмяПодбора  - строка, имя подбора для определения запроса
//  Родитель    - СправочникСсылка.Номенклатура, родитель для элементов, по коротым будет строиться запрос
//  ДатаЗапроса - Дата, на которую будут рассчитываться остатки и пр.
//
// Возвращаемое значение:
//   Запрос, с заполненным текстом и параметрами
//
Функция ПолучитьЗапросДляПодбора(ИмяПодбора, Родитель, ДатаЗапроса, ВключитьИерархиюОстатков, СчетОстатков) Экспорт

	Запрос = Новый Запрос;
    Условие = "Организация = &Организация";
	ФильтрПоСубконто = "";
	ФильтрПоСчету = "";
	Если Не СчетОстатков.Пустая() Тогда
		ФильтрПоСчету = "СЧЕТ В ИЕРАРХИИ(&СчетОстатков)";
		Запрос.УстановитьПараметр("СчетОстатков", СчетОстатков);
	Иначе
		ФильтрПоСчету = "";
	КонецЕсли;
	СписокПараметровЗапроса = ПолучитьСписокПараметровЗапроса(ИмяПодбора);
	ВидСубконто = Новый Массив;

	Если ИмяПодбора = "ОстаткиИЦеныНоменклатуры"
		ИЛИ ИмяПодбора = "ОстаткиИПлановаяСебестоимость" Тогда

		Запрос.УстановитьПараметр("Дата"                 , ДатаЗапроса);
		Запрос.УстановитьПараметр("ДатаРегистраСведений" , ?(НЕ ЗначениеЗаполнено(ДатаЗапроса), ТекущаяДата(), ДатаЗапроса));
		Запрос.УстановитьПараметр("Родитель"             , Родитель);
		Для каждого ЭлементСписка Из СписокПараметровЗапроса Цикл
			Запрос.УстановитьПараметр(ЭлементСписка.Значение , СтруктураИсходныхПараметров[ЭлементСписка.Значение]);
		КонецЦикла;
		
		Если ИмяПодбора = "ОстаткиИПлановаяСебестоимость" Тогда
			ПлановыйТипЦен = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
			Запрос.УстановитьПараметр("ТипЦен", ПлановыйТипЦен);
		Иначе
			ТипЦен = Неопределено;
			СтруктураИсходныхПараметров.Свойство("ТипЦен", ТипЦен);
		КонецЕсли;

		Склад = Неопределено;
		СтруктураИсходныхПараметров.Свойство("Склад", Склад);
		ВедетсяУчетПоСкладам  = ?(Планысчетов.Типовой.Товары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
		ЕстьСклад = ?(Склад = Неопределено, Ложь, Истина);
		
		ВидСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
		Если НЕ ВключитьИерархиюОстатков ТОгда
			ФильтрПоСубконто = СтрЗаменить(мТекстЗапросаОтборНоменклатурыПоРодителю, " ГДЕ Номенклатура.Родитель = &Родитель", "");
			ФильтрПоСубконто = СтрЗаменить(ФильтрПоСубконто, "Номенклатура В (", " И Субконто1 В (");
		Иначе
			ФильтрПоСубконто = СтрЗаменить(мТекстЗапросаОтборНоменклатурыПоРодителю, "Номенклатура В (", " И Субконто1 В (");
		КонецЕсли;
		
		Если ВедетсяУчетПоСкладам и ЕстьСклад Тогда
			ВидСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);
			ФильтрПоСубконто = ФильтрПоСубконто + " И Субконто2 = &Склад";
		КонецЕсли;
		Запрос.УстановитьПараметр("ВидыСубконто"            , ВидСубконто);
		Запрос.УстановитьПараметр("парамНоль"               , 0);
		Запрос.УстановитьПараметр("парамИстина"             , Истина);
		Запрос.УстановитьПараметр("Организация"             , СтруктураИсходныхПараметров["Организация"]);
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктураИсходныхПараметров["СтруктурноеПодразделение"]);
		
		Условие = Условие + " И СтруктурноеПодразделение = &СтруктурноеПодразделение";
		
		Запрос.Текст = ЗапросОстаткиИЦеныНоменклатуры(ФильтрПоСубконто, Условие, ФильтрПоСчету, ВключитьИерархиюОстатков);
		
	ИначеЕсли ИмяПодбора = "ЦеныНоменклатуры" Тогда
		
		Запрос.УстановитьПараметр("Дата"                 , ДатаЗапроса);
		Запрос.УстановитьПараметр("ДатаРегистраСведений" , ?(НЕ ЗначениеЗаполнено(ДатаЗапроса), ТекущаяДата(), ДатаЗапроса));
		Запрос.УстановитьПараметр("Родитель"             , Родитель);
		Запрос.УстановитьПараметр("Организация"	   		 , СтруктураИсходныхПараметров["Организация"]);
		Для каждого ЭлементСписка Из СписокПараметровЗапроса Цикл
//			Если СтруктураИсходныхПараметров.Свойство(ЭлементСписка.Значение) Тогда
				Запрос.УстановитьПараметр(ЭлементСписка.Значение , СтруктураИсходныхПараметров[ЭлементСписка.Значение]);
//			КонецЕсли;
		КонецЦикла;

		Запрос.Текст = ЗапросЦеныНоменклатуры(ВключитьИерархиюОстатков);
		
	ИначеЕсли ИмяПодбора = "ОстаткиНоменклатуры" Тогда

		Запрос.УстановитьПараметр("Дата"                 , ДатаЗапроса);
		Запрос.УстановитьПараметр("ДатаРегистраСведений" , ?(НЕ ЗначениеЗаполнено(ДатаЗапроса), ТекущаяДата(), ДатаЗапроса));
		Запрос.УстановитьПараметр("Родитель"             , Родитель);
		Для каждого ЭлементСписка Из СписокПараметровЗапроса Цикл
			Запрос.УстановитьПараметр(ЭлементСписка.Значение , СтруктураИсходныхПараметров[ЭлементСписка.Значение]);
		КонецЦикла;

		Склад = Неопределено;
		СтруктураИсходныхПараметров.Свойство("Склад", Склад);
		ВедетсяУчетПоСкладам  = ?(Планысчетов.Типовой.Товары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
		ЕстьСклад = ?(Склад = Неопределено, Ложь, Истина);
		
		ВидСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
		
		Если ВключитьИерархиюОстатков ТОгда
			ФильтрПоСубконто = " И Субконто1.Родитель = &Родитель";
		КонецЕсли;
		
		Если ВедетсяУчетПоСкладам и ЕстьСклад Тогда
			ВидСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);
			ФильтрПоСубконто = ФильтрПоСубконто + " И Субконто2 = &Склад";
		КонецЕсли;
		Запрос.УстановитьПараметр("ВидыСубконто"            , ВидСубконто);
		Запрос.УстановитьПараметр("парамНоль"               , 0);
		Запрос.УстановитьПараметр("парамИстина"             , Истина);
		Запрос.УстановитьПараметр("Организация"             , СтруктураИсходныхПараметров["Организация"]);
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктураИсходныхПараметров["СтруктурноеПодразделение"]);
		
		Условие = Условие + " И СтруктурноеПодразделение = &СтруктурноеПодразделение";
		
		Запрос.Текст = ЗапросОстаткиНоменклатуры(ФильтрПоСубконто, Условие, ФильтрПоСчету, ВключитьИерархиюОстатков);

	ИначеЕсли ИмяПодбора = "Услуги" Тогда

		Запрос.УстановитьПараметр("Родитель", Родитель);

		Запрос.Текст = ЗапросУслуги(ВключитьИерархиюОстатков);

	ИначеЕсли ИмяПодбора = "ЦеныУслуг" Тогда

		Запрос.УстановитьПараметр("Дата"                 , ДатаЗапроса);
		Запрос.УстановитьПараметр("ДатаРегистраСведений" , ?(НЕ ЗначениеЗаполнено(ДатаЗапроса), ТекущаяДата(), ДатаЗапроса));
		Запрос.УстановитьПараметр("Родитель"             , Родитель);
		Запрос.УстановитьПараметр("Организация"			 , СтруктураИсходныхПараметров["Организация"]);
		Для каждого ЭлементСписка Из СписокПараметровЗапроса Цикл
			Запрос.УстановитьПараметр(ЭлементСписка.Значение , СтруктураИсходныхПараметров[ЭлементСписка.Значение]);
		КонецЦикла;

		Запрос.Текст = ЗапросЦеныУслуг(ВключитьИерархиюОстатков);

	КонецЕсли;

	Если ПустаяСтрока(Запрос.Текст) Тогда
		Возврат Неопределено;
	Иначе
		Возврат Запрос;
	КонецЕсли; 

КонецФункции // ПолучитьЗапросДляПодбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМЫ ВВОДА ДОПОЛНИТЕЛЬНЫХ ПАРАМЕТРОВ

// Процедура формирует и выводит сумму в информационной надписи.
//
Процедура мОбновитьНадписьФомулаСумма(Форма) Экспорт

	Форма.ЭлементыФормы.НадписьФомулаСумма.Заголовок = ОбщегоНазначения.ФорматСумм(Форма.Цена * Форма.Количество,,"0,00");
	
КонецПроцедуры // мОбновитьНадписьФомулаСумма()

// Процедура возвращает в форму-владельца выбранные значения.
//
Процедура мВыборВозврат(Форма) Экспорт

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", Форма.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("Количество",       Форма.Количество);
	СтруктураПараметров.Вставить("Цена",             Форма.Цена);

	Форма.Закрыть(СтруктураПараметров);

КонецПроцедуры // мВыборВозврат()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура мПриОткрытии(Форма) Экспорт

	Перем ЗапрашиватьЦену, ЗапрашиватьСерию;//, ЗапрашиватьСчета;
	Перем ЕстьЦена, ЕстьКоличество;

	Форма.Заголовок = "Количество и цена """ + Форма.Номенклатура + """";

	ЗапрашиватьКоличество = Форма.ВладелецФормы.ЗапрашиватьКоличество;
	ЗапрашиватьЦену       = Форма.ВладелецФормы.ЗапрашиватьЦену;
	
	Форма.ЭлементыФормы.НадписьКоличество. Доступность = ЗапрашиватьКоличество;
	Форма.ЭлементыФормы.Количество.        Доступность = ЗапрашиватьКоличество;
	Форма.ЭлементыФормы.ЕдиницаИзмерения.  Доступность = ЗапрашиватьКоличество;
	Форма.ЭлементыФормы.НадписьЦена.       Доступность = ЗапрашиватьЦену;
	Форма.ЭлементыФормы.Цена.              Доступность = ЗапрашиватьЦену;
	Форма.ЭлементыФормы.НадписьВалютаЦены. Доступность = ЗапрашиватьЦену;
	Форма.ЭлементыФормы.НадписьВалютаСуммы.Доступность = ЗапрашиватьЦену;
	Форма.ЭлементыФормы.НадписьСумма.      Доступность = ЗапрашиватьЦену;

	мОбновитьНадписьФомулаСумма(Форма);

КонецПроцедуры // мПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода единицы измерения.
//  Пересчитывает цену при изменении единицы измерения.
//
Процедура мЕдиницаИзмеренияОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Форма.Активизировать();

КонецПроцедуры // мЕдиницаИзмеренияОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода количества.
//
Процедура мКоличествоПриИзменении(Форма, Элемент) Экспорт

	мОбновитьНадписьФомулаСумма(Форма);

КонецПроцедуры // мКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены.
//
Процедура мЦенаПриИзменении(Форма, Элемент) Экспорт

	мОбновитьНадписьФомулаСумма(Форма);

КонецПроцедуры // мЦенаПриИзменении()

// Процедура - обработчик события "Нажатие" кнопки "ОК".
//
Процедура мКнопкаОКНажатие(Форма, Элемент) Экспорт

	мВыборВозврат(Форма);

КонецПроцедуры // мКнопкаОКНажатие()

Процедура мЕдиницаИзмеренияПриИзменении(Форма, Элемент) Экспорт

	мОбновитьНадписьФомулаСумма(Форма);

КонецПроцедуры // мЕдиницаИзмеренияПриИзменении()

мТекстЗапросаОтборНоменклатурыПоРодителю = "
|Номенклатура В (ВЫБРАТЬ Номенклатура.Ссылка ИЗ Справочник.Номенклатура
|	        КАК Номенклатура ГДЕ Номенклатура.Родитель = &Родитель)";

#КонецЕсли