Перем мПлатежныеОперации Экспорт;
Перем мОрганизация Экспорт;
Перем ОбязательныеСвойстваПриЭкспорте Экспорт;
Перем ЗагрВидыДокументов;
Перем ЗагрРасчетныеСчета;
Перем ОбязательныеВрегЗАГРУЗКИ;
Перем ВидыОпераций;
Перем ПустаяДата;
Перем Наличие; 
Перем СписокЖурналов;
Перем СтруктураРеквизитов;	// Реквизиты загружаемого документа
Перем мВалютаРегламентированногоУчета;
Перем СписокКонтрагентов Экспорт; // Список контрагентов не найденных в справочнике

// Структуры хранения настроечных данных при экспорте
Перем Экспорт_Выгружаемые;
Перем Экспорт_НеПустые;
Перем Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях;
Перем Экспорт_ВыгружаемыеГЦВП;

// Структуры обработки текста при импорте
Перем Импорт_КоличествоСтрок;
Перем Импорт_ТекущаяСтрока;
Перем Импорт_ТекстДляРазбора;
Перем Импорт_ФайлДляРазбора;

// Структуры хранения данных при импорте
Перем Импорт_РассчетныеСчета Экспорт;
Перем РеквизитыКонтрагента Экспорт;
Перем Импорт_ВидыДокументов;
Перем Импорт_Заголовок;

// Структуры хранения настроечных данных при импорте
Перем Импорт_Загружаемые;
Перем Импорт_Распознаваемые;
Перем ТегиЗаголовка;
Перем ТегиРасчетногоСчета;
Перем Импорт_НеПустые;
Перем Импорт_ПризнакОбмена;

// Признаки наличия Табличных частей по пенсионным и социальным отчислениям
Перем ПенсионныеОтчисления_Есть;
Перем СоциальныеОтчисления_Есть;

// Строки с группами реквизитов платежных документов через запятую
Перем РеквизитыПлДок_Основные;
Перем РеквизитыПлДок_СоцПенс;
Перем РеквизитыПлДок_Плательщик;
Перем РеквизитыПлДок_ПлательщикНПР;
Перем РеквизитыПлДок_НеОбязательные;
Перем РеквизитыПлДок_Получатель;
Перем РеквизитыПлДок_ПолучательНПР;
Перем РеквизитыПлДок_БанкПосредник;
Перем РеквизитыПлДок_ГЦВП;
Перем РеквизитыПлДок_БюджетПлатеж;
Перем РеквизитыПлДок_Назначение;
Перем РасширениеЭкспорта Экспорт;

Перем мОтображатьСтруктурныеПодразделения Экспорт; 

#Если Клиент Тогда

Функция ПолучитьВыборкуОрганизаций() Экспорт
	
	ЗапросПоОрганизациям = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|");
	
	Возврат ЗапросПоОрганизациям.Выполнить().Выбрать();
	
КонецФункции


//Печать отчета
//
Процедура Печать(ПолеОтчета, Источник, ИмяКолонкиПометки) Экспорт
	
	МакетОтчета = ПолучитьМакет("Отчет");
	
	Шапка    = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка   = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал   = МакетОтчета.ПолучитьОбласть("Подвал");
	
	ПолеОтчета.Вывести(Шапка);
	
	Индекс=0;
	
	Для Каждого СтрокаИсточника Из Источник Цикл
		Если СтрокаИсточника[ИмяКолонкиПометки] Тогда
			
			Док = СтрокаИсточника.Документ;
			
			Если НЕ ЗначениеЗаполнено(Док) Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				ВидДокумента = Док.Метаданные().Имя;
			Исключение
				Продолжить;
			КонецПопытки;
			
			Индекс = Индекс+1;
			
			Строка.Параметры.Плательщик     = СтрокаИсточника.ПлательщикНаименование;
			Строка.Параметры.ПлательщикСчет = СтрокаИсточника.ПлательщикИИК;
			Строка.Параметры.Получатель     = СтрокаИсточника.ПолучательНаименование;
			Строка.Параметры.ПолучательСчет = СтрокаИсточника.ПолучательИИК;
			
			Строка.Параметры.Сумма          = СтрокаИсточника.Сумма;
			Строка.Параметры.Документ       = Док;
			Строка.Параметры.Индекс         = Индекс;
			
			ПолеОтчета.Вывести(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПолеОтчета.Вывести(Подвал);
	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки = Ложь;
	ПолеОтчета.ОтображатьСетку = Ложь;
	
КонецПроцедуры	

//Создает контрагента
//
Функция СоздатьКонтрагента(СтрокаКонтрагент = Неопределено, ТаблицаКонтрагентов = Неопределено, ТекОрганизация, ТекВалюта = Неопределено) Экспорт //или СтрокаКонтрагент - строка, или ТаблицаКонтрагентов - ТЗ

	ВыбраныйКонтрагент = СтрокаКонтрагент;
	ИскомыйКонтрагент  = Неопределено;
	НовыйКонтрагент    = Неопределено;

	Если ТаблицаКонтрагентов = Неопределено Тогда

		Для Каждого Элемент Из СписокКонтрагентов Цикл

			ТипКонтрагента = Элемент.Значение["ТИПКОНТРАГЕНТА"];
			Нашли          = Элемент.Значение.Свойство(ТипКонтрагента+"Наименование", ИскомыйКонтрагент);

			Если Строка(ВРег(СокрЛП(ИскомыйКонтрагент))) = Строка(ВРег(СокрЛП(ВыбраныйКонтрагент))) Тогда
				НовыйКонтрагент    = Элемент;
				Индекс        = СписокКонтрагентов.Индекс(Элемент);
				Прервать;

			КонецЕсли;

		КонецЦикла;

	Иначе
		//СОЗДАТЬ КОНТРАГЕНТА ИЗ ТАБЛИЦЫ ЗНАЧЕНИЙ
		СтрНовыйКонтрагент =Новый Структура();
		Для Каждого Элемент Из ТаблицаКонтрагентов Цикл
			ТипКонтрагента =Элемент["ТипКонтрагента"];
			СтрНовыйКонтрагент.Вставить(Элемент["Реквизит"], Элемент["Значение"]);
		КонецЦикла;

		НовыйКонтрагент    = Новый СписокЗначений();
		НовыйКонтрагент.Добавить(СтрНовыйКонтрагент);
		НовыйКонтрагент    = НовыйКонтрагент.НайтиПоЗначению(СтрНовыйКонтрагент);
		
	КонецЕсли;
	
	ДанныеКонтрагента=НовыйКонтрагент.Значение;
	
	Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"РНН") Тогда
		РННКраткий=ДанныеКонтрагента[ТипКонтрагента+"РНН"];
	Иначе
		РННКраткий = "";
	КонецЕсли;
	
	////////////////////
	Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"БИН_ИИН") Тогда
		БИН_ИИНКраткий = ДанныеКонтрагента[ТипКонтрагента+"БИН_ИИН"];
	Иначе
		БИН_ИИНКраткий = "";
	КонецЕсли;
	///////////////////
	
	Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"Наименование") Тогда
		ИмяКраткое=ДанныеКонтрагента[ТипКонтрагента+"Наименование"];
	Иначе
		ИмяКраткое = "";
	КонецЕсли;
	
	Контрагент = НайтиКонтрагентаПоБИН_ИНН_РНН("Контрагенты", БИН_ИИНКраткий, РННКраткий,ИмяКраткое);
	
	СтруктураДанныхКонтрагента = Новый Структура;
	
	Если Контрагент.Пустая() Тогда

		//эти элементы есть у всех справочников
		НовыйЭлемент = Справочники.Контрагенты.СоздатьЭлемент();
		
		Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"Наименование") Тогда	
			НовыйЭлемент.НаименованиеПолное =ДанныеКонтрагента[ТипКонтрагента+"Наименование"];
			НовыйЭлемент.Наименование=НовыйЭлемент.НаименованиеПолное;
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"РНН") Тогда	
			НовыйЭлемент.РНН = ДанныеКонтрагента[ТипКонтрагента+"РНН"];
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"БИН_ИИН") Тогда	
			НовыйЭлемент.ИдентификационныйКодЛичности = ДанныеКонтрагента[ТипКонтрагента+"БИН_ИИН"];
		КонецЕсли;
		
		НовыйЭлемент.Записать();
		
		НомерСчета = ДанныеКонтрагента[ТипКонтрагента+"ИИК"];
		
		//Определяем валюту создаваемого счета
		Если ТекВалюта = Неопределено Тогда
			КодВалюты   = ТекОрганизация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств.Код;
			ВалютаСчета = Справочники.Валюты.НайтиПоКоду(КодВалюты);
		Иначе
			ВалютаСчета = ТекВалюта;
		КонецЕсли;

		Если НЕ ВалютаСчета = Справочники.Валюты.ПустаяСсылка() Тогда // Знаем валюту счета и можем создать элемент.
		
			НовыйСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
			НовыйСчет.Наименование    = Строка(Строка(НомерСчета)+" Основной расчетный счет");
			НовыйСчет.НомерСчета      = НомерСчета;
			НовыйСчет.Владелец        = НовыйЭлемент.Ссылка;
			НовыйСчет.ВидСчета        = "Расчетный";
			НовыйСчет.ВалютаДенежныхСредств = ВалютаСчета;
			
			//поставим что обменДанными.Загрузка, так как при записи нового контрагента
			//создается банковский счет, в котором обязательно поле "Банк", а его при импорте
			//неоткуда брать			
			НовыйСчет.ОбменДанными.Загрузка = Истина;
			
			НовыйСчет.Записать();
			НовыйЭлемент.ОсновнойБанковскийСчет =НовыйСчет.Ссылка;
		Иначе
			НовыйСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
			Сообщить("Не определен основной банковский счет организации!!!",СтатусСообщения.Важное);
		КонецЕсли;
				
		//Договор контрагента
		
		Если НовыйЭлемент.Метаданные().Реквизиты.Найти("ОсновнойДоговорКонтрагента") <> Неопределено Тогда    
			Если ТипКонтрагента ="ПЛАТЕЛЬЩИК" Тогда 
            	НовыйЭлемент.ОсновнойДоговорКонтрагента = СоздатьНужныйДоговор(НовыйЭлемент.Ссылка, ТекОрганизация, Истина, ВалютаСчета);
			Иначе 
				НовыйЭлемент.ОсновнойДоговорКонтрагента = СоздатьНужныйДоговор(НовыйЭлемент.Ссылка, ТекОрганизация, Ложь, ВалютаСчета);
			КонецЕсли;
		КонецЕсли;
		
		НовыйЭлемент.ГоловнойКонтрагент = НовыйЭлемент.Ссылка;
		
		НовыйЭлемент.Записать();		
		Сообщить("Контрагент """+НовыйЭлемент.Наименование+""" создан.");
		
		Контрагент 		= НовыйЭлемент.Ссылка;
		
		СтруктураДанныхКонтрагента.Вставить("Контрагент",Контрагент); 
		СтруктураДанныхКонтрагента.Вставить("СчетКонтрагента",НовыйСчет.Ссылка);

	Иначе
		//Проверка на наличие счета контрагента (если нет счета, то создаем новый, а если нет, то выходим)
		НовыйЭлементСНовымСчетом = Контрагент;
		
		НомерСчета = ДанныеКонтрагента[ТипКонтрагента+"ИИК"];
		//Определяем валюту создаваемого счета
		Если ТекВалюта = Неопределено Тогда
			КодВалюты   = ТекОрганизация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств.Код;
			ВалютаСчета = Справочники.Валюты.НайтиПоКоду(КодВалюты);
		Иначе
			ВалютаСчета = ТекВалюта;
		КонецЕсли;

		Если НЕ ВалютаСчета=Справочники.Валюты.ПустаяСсылка() Тогда         		
			
			НовыйСчет = СоздатьНужныйСчет(НовыйЭлементСНовымСчетом.Ссылка,НомерСчета,ВалютаСчета);
		
			
			Если Не ЗначениеЗаполнено(НовыйЭлементСНовымСчетом.ОсновнойБанковскийСчет) Тогда
				Объект = НовыйЭлементСНовымСчетом.ПолучитьОбъект();
				
				Объект.ОсновнойБанковскийСчет = НовыйСчет;
				
		   		Попытка
	        		Объект.Записать();
	    		Исключение
	        		Предупреждение("Не удалось записать объект """ + Объект + """
	                      |" + ОписаниеОшибки(),60);
	    		КонецПопытки;
				
			КонецЕсли;	
			
		Иначе
			
			НовыйСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
		КонецЕсли;
	  
		Контрагент 		= НовыйЭлементСНовымСчетом.Ссылка;
		
		СтруктураДанныхКонтрагента.Вставить("Контрагент",Контрагент); 
		СтруктураДанныхКонтрагента.Вставить("СчетКонтрагента",НовыйСчет);
		//Предупреждение("Контрагент """+СокрЛП(Контрагент.Наименование)+""" с РНН :"+РННКраткий+" уже существует.", , "Контрагент создан...");
			
	КонецЕсли;
	
	Возврат СтруктураДанныхКонтрагента;

КонецФункции //СоздатьКонтрагента(Контрагент)

// Ищет контрагента по РНН
//
Функция НайтиКонтрагентаПоБИН_ИНН_РНН(Вид, БИН_ИИНКраткий, РННКраткий, ИмяКраткое)
	
	///////////////////	
	Ссылка = Справочники[Вид].ПустаяСсылка();
	Если ЗначениеЗаполнено(БИН_ИИНКраткий) Тогда
		// ищем по БИН
		Если Вид = "Контрагенты" Или Вид = "ФизическиеЛица" Тогда
			Ссылка = Справочники[Вид].НайтиПоРеквизиту("ИдентификационныйКодЛичности", БИН_ИИНКраткий);
		Иначе
			Ссылка = Справочники[Вид].НайтиПоРеквизиту("ИдентификационныйНомер", БИН_ИИНКраткий);
		КонецЕсли;		
	КонецЕсли;
	
	Если Ссылка.Пустая() И ЗначениеЗаполнено(РННКраткий) Тогда
		Ссылка = Справочники[Вид].НайтиПоРеквизиту("РНН",РННКраткий);
	КонецЕсли;
	
	///////////////////
	
	Если Ссылка.Пустая() Тогда
		Если Вид="Контрагенты" Тогда
			Ссылка = Справочники[Вид].НайтиПоНаименованию(ИмяКраткое);
			Если Ссылка.Пустая() Тогда 
				Сообщить("Не найден контрагент "+ИмяКраткое+". Проверьте БИН/ИИН или РНН "+РННКраткий, СтатусСообщения.Информация);
			Иначе 
				Сообщить("Контрагент """+ИмяКраткое+""" найден по наименованию. БИН/ИИН или РНН контрагента "+Ссылка.РНН+" не совпадает с БИН/ИИН или РНН контрагента из файла "+РННКраткий, СтатусСообщения.Информация);	
			КонецЕсли;
		Иначе
			Сообщить("Не найдена организация. Проверьте БИН/ИИН или РНН "+РННКраткий, СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

//поиск и создание договоров
Функция СоздатьНужныйДоговор(Владелец, ТекОрганизация, Плательщик, ВалютаДоговора) Экспорт
		
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Организация = &Организация
	               |	И ДоговорыКонтрагентов.Владелец = &Владелец
	               |	И ДоговорыКонтрагентов.ВидДоговора В(&ВидДоговора)
	               |	И ДоговорыКонтрагентов.Ссылка = &ОсновнойДоговорКонтрагента
	               |	И &УсловиеВалютаВзаиморасчетов
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Организация = &Организация
	               |	И ДоговорыКонтрагентов.Владелец = &Владелец
	               |	И ДоговорыКонтрагентов.ВидДоговора В(&ВидДоговора)
	               |	И &УсловиеВалютаВзаиморасчетов";
				 
	Запрос.УстановитьПараметр("Организация", ТекОрганизация);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("ОсновнойДоговорКонтрагента", Владелец.ОсновнойДоговорКонтрагента);
	Если ЗначениеЗаполнено(ВалютаДоговора) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеВалютаВзаиморасчетов", "ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов");
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаДоговора);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеВалютаВзаиморасчетов", "ИСТИНА");
	КонецЕсли;
	
	СписокДоговоров = Новый СписокЗначений();
	
	Если Плательщик Тогда
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		Запрос.УстановитьПараметр("ВидДоговора",СписокДоговоров);
	Иначе
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		Запрос.УстановитьПараметр("ВидДоговора",СписокДоговоров);
	КонецЕсли;
	
	Выборка=Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	Иначе
		
		НайденныйДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		
		НайденныйДоговорОбъект.Наименование          = "Без договора";
		НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		
		Если ЗначениеЗаполнено(ВалютаДоговора) Тогда
			НайденныйДоговорОбъект.ВалютаВзаиморасчетов = ВалютаДоговора;
		Иначе
			НайденныйДоговорОбъект.ВалютаВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяВалютаВзаиморасчетов");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВалютаВзаиморасчетов) Тогда
			НайденныйДоговорОбъект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		
		НайденныйДоговорОбъект.Организация = ТекОрганизация;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.Организация) Тогда
			Выборка = ПолучитьВыборкуОрганизаций();
			Если Выборка.Следующий() Тогда
				НайденныйДоговорОбъект.Организация = Выборка.Организация;
			КонецЕсли;
		КонецЕсли;
		
		НайденныйДоговорОбъект.Владелец  = Владелец;
				
		Если Плательщик Тогда
			НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		Иначе
			НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		КонецЕсли; 
		
		Попытка
			НайденныйДоговорОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось записать основной договор контрагента.");
		КонецПопытки;

		Ссылка =НайденныйДоговорОбъект.Ссылка;
		
		Возврат Ссылка;
	
	КонецЕсли;
			
КонецФункции //СоздатьНужныйДоговор(Имя, Владелец)

//поиск и создание банковских счетов
Функция СоздатьНужныйСчет(Владелец,ИИК,ВалютаСчета)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	БанковскиеСчета.Ссылка
	             |ИЗ
	             |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	             |ГДЕ
	             |	БанковскиеСчета.Владелец = &Владелец
	             |	И БанковскиеСчета.НомерСчета = &ИИК";
				 
	Запрос.УстановитьПараметр("ИИК",ИИК);
	Запрос.УстановитьПараметр("Владелец",Владелец);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	Иначе	
				
			НовыйСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
			
			Если ЗначениеЗаполнено(Владелец.ОсновнойБанковскийСчет) Тогда
				НовыйСчетОбъект.Наименование = Строка(Строка(ИИК)+" расчетный счет");
			Иначе
				НовыйСчетОбъект.Наименование = Строка(Строка(ИИК)+" Основной расчетный счет");
			КонецЕсли;
			
			НовыйСчетОбъект.НомерСчета      = ИИК;
			НовыйСчетОбъект.Владелец        = Владелец;
			НовыйСчетОбъект.ВидСчета        = "Расчетный";
			НовыйСчетОбъект.ВалютаДенежныхСредств = ВалютаСчета;
			// необходимо установить в Истина, иначе счет не будет записан
			// т.к. реквизит Банк не заполнен, в импортируемом файле
			// такого реквизита нет
			НовыйСчетОбъект.ОбменДанными.Загрузка = Истина;
		
			Попытка
				НовыйСчетОбъект.Записать();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось записать банковский счет контрагента.");
			КонецПопытки;		
		
			Ссылка = НовыйСчетОбъект.Ссылка;
				
		Возврат Ссылка;	
	КонецЕсли;
	
КонецФункции
                   
Процедура ЗаполнитьОбязательныеСвойстваПриЭкспорте() //?
	
	ОбязательныеСвойстваПриЭкспорте = Новый Соответствие;
	
	ОбязательныеСвойстваПриЭкспорте.Вставить("НомерДокумента", Истина);
	ОбязательныеСвойстваПриЭкспорте.Вставить("ДатаДокумента", Истина);
	ОбязательныеСвойстваПриЭкспорте.Вставить("Сумма", Истина);
	ОбязательныеСвойстваПриЭкспорте.Вставить("ПлательщикИИК", Истина);
	ОбязательныеСвойстваПриЭкспорте.Вставить("ПлательщикНаименование", Истина);
	ОбязательныеСвойстваПриЭкспорте.Вставить("ПлательщикБИН_ИИН", Истина);
	ОбязательныеСвойстваПриЭкспорте.Вставить("ПолучательИИК", Истина);
	ОбязательныеСвойстваПриЭкспорте.Вставить("ПолучательНаименование", Истина);
	ОбязательныеСвойстваПриЭкспорте.Вставить("ПолучательБИН_ИИН", Истина);
	
КонецПроцедуры

// Процедура читает заголовок файла обмена
//
Функция ПрочитатьФайл(Файл) //+
	
	ФайлЗагр = Новый Файл(Файл);
	Если ФайлЗагр.Существует() = Ложь Тогда
		Сообщить("Файла "+Файл+" не существует!");
		Возврат Неопределено;
	КонецЕсли;
	
	Если Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	ИначеЕсли Кодировка = "UTF8" Тогда 
		Кодир = КодировкаТекста.UTF8;
	Иначе
		Кодир = КодировкаТекста.ANSI;
	КонецЕсли;

	ПотокЧтения = Новый ТекстовыйДокумент();
	Попытка
		ПотокЧтения.Прочитать(Файл,Кодир);
	Исключение
		Сообщить("Файл не прочитан.", СтатусСообщения.Внимание);
		Возврат Неопределено;
	КонецПопытки;

	Если ПотокЧтения.КоличествоСтрок()<1 Тогда
		Сообщить("В файл нет данных!");
		Возврат Неопределено;
	КонецЕсли;

	Если СокрЛП(ПотокЧтения.ПолучитьСтроку(1))<>"1CClientBankExchange" Тогда
		Сообщить("Указанный файл не является файлом обмена или неверно указана кодировка!");
		Возврат Неопределено;
	КонецЕсли;

	Возврат ПотокЧтения.ПолучитьТекст();

КонецФункции

//создаем список ненайденных контрагентов
Процедура СписокНеНайденных(Реквизиты = Неопределено, Документ = Неопределено, НовыйКонтрагент=Истина, ИсходныеДанные) Экспорт
	
	ТипКонтрагента =Неопределено;
	
	КопияСписокКонтрагентов =Новый СписокЗначений();
	
	Если Реквизиты = Неопределено Тогда
		КопияСписокКонтрагентов.ЗагрузитьЗначения(СписокКонтрагентов.ВыгрузитьЗначения());
		
	ИначеЕсли НЕ ТипЗнч(Реквизиты) = Тип("Структура") Тогда
		
		
		СтруктураРеквизитов =Новый Структура();
		Для Каждого Рекв Из Реквизиты Цикл
			
			СтруктураРеквизитов.Вставить("ТИПКОНТРАГЕНТА", Рекв["ТипКонтрагента"]);
			СтруктураРеквизитов.Вставить(Рекв["Реквизит"], Рекв["Значение"]);
			
		КонецЦикла;
		
		Если КопияСписокКонтрагентов.НайтиПоЗначению(СтруктураРеквизитов)=Неопределено Тогда
			
			КопияСписокКонтрагентов.Добавить(СтруктураРеквизитов);
			
		КонецЕсли;
		
		Если НовыйКонтрагент Тогда
			СписокКонтрагентов=КопияСписокКонтрагентов;
		КонецЕсли;
		
	Иначе//структура
		Если Реквизиты.Количество() = 0 Тогда
			Сообщить("Документ создан вручную.", СтатусСообщения.Информация);
			Возврат;
		КонецЕсли;
		КопияСписокКонтрагентов.Добавить(Реквизиты);
		
	КонецЕсли;
	
	ТаблицаКонтрагентов.Строки.Очистить();
	ТаблицаКонтрагентов.Колонки.Очистить();
	
	ТаблицаКонтрагентов.Колонки.Добавить("Представление");
	ТаблицаКонтрагентов.Колонки.Добавить("Значение");
	ТаблицаКонтрагентов.Колонки.Добавить("Реквизит");
	ТаблицаКонтрагентов.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	
	КонтрагентРНН ="";
	
	Для Каждого Список Из КопияСписокКонтрагентов Цикл
		
		Индекс =КопияСписокКонтрагентов.Индекс(Список);
		
		Если НЕ Список.Значение.Свойство("ТИПКОНТРАГЕНТА", ТипКонтрагента) Тогда
			
			Если ЗначениеЗаполнено(Список.Значение["ДАТАПОСТУПИЛО"]) Тогда
				ТипКонтрагента ="ПЛАТЕЛЬЩИК";
			Иначе
				ТипКонтрагента ="ПОЛУЧАТЕЛЬ";
			КонецЕсли;
			
		КонецЕсли;
		
		Список.Значение.Свойство(ТипКонтрагента+"РНН", КонтрагентРНН);
		если ТаблицаКонтрагентов.Строки.Найти(КонтрагентРНН, "Значение", истина) <> Неопределено тогда
			продолжить;
		конецесли;
				
		ТаблицаКонтрагентов.Строки.Добавить().Установить(0, Список.Значение[ТипКонтрагента+"Наименование"]);
		
		ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
		ТаблицаКонтрагентов.Строки[Индекс].Строки[0].Установить(0, "Наименование контрагента");
		ТаблицаКонтрагентов.Строки[Индекс].Строки[0].Установить(1, Список.Значение[ТипКонтрагента+"Наименование"]);
		ТаблицаКонтрагентов.Строки[Индекс].Строки[0].Установить(2, ТипКонтрагента+"Наименование");
			
		ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
		ТаблицаКонтрагентов.Строки[Индекс].Строки[1].Установить(0, "РНН контрагента");
		ТаблицаКонтрагентов.Строки[Индекс].Строки[1].Установить(1, Список.Значение[ТипКонтрагента+"РНН"]);
		ТаблицаКонтрагентов.Строки[Индекс].Строки[1].Установить(2, ТипКонтрагента+"РНН");
		
		//////////////////////
		ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
		ТаблицаКонтрагентов.Строки[Индекс].Строки[2].Установить(0, "БИН/ИИН контрагента");
		ТаблицаКонтрагентов.Строки[Индекс].Строки[2].Установить(1, Список.Значение[ТипКонтрагента+"БИН_ИИН"]);
		ТаблицаКонтрагентов.Строки[Индекс].Строки[2].Установить(2, ТипКонтрагента+"БИН_ИИН");
		//////////////////////
			
		ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
		ТаблицаКонтрагентов.Строки[Индекс].Строки[3].Установить(0, "Р/счет контрагента");
		ТаблицаКонтрагентов.Строки[Индекс].Строки[3].Установить(1, Список.Значение[ТипКонтрагента+"ИИК"]);
		ТаблицаКонтрагентов.Строки[Индекс].Строки[3].Установить(2, ТипКонтрагента+"ИИК");
			
	КонецЦикла;
	
	//заполняем РеквизитыКонтрагента 
	Если Документ <> Неопределено Тогда
		РеквизитыКонтрагента.Очистить();
		Для Счет =0  По ТаблицаКонтрагентов.Строки[0].Строки.Количество()-1 Цикл
			РеквизитыКонтрагента.Добавить().ТипКонтрагента =ТипКонтрагента;
		КонецЦикла;
		РеквизитыКонтрагента.ЗагрузитьКолонку(ТаблицаКонтрагентов.Строки[0].Строки.ВыгрузитьКолонку("Представление"), "Представление");
		РеквизитыКонтрагента.ЗагрузитьКолонку(ТаблицаКонтрагентов.Строки[0].Строки.ВыгрузитьКолонку("Значение"), "Значение");
		РеквизитыКонтрагента.ЗагрузитьКолонку(ТаблицаКонтрагентов.Строки[0].Строки.ВыгрузитьКолонку("Реквизит"), "Реквизит");
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсходныеДанные.СчетОрганизации) Тогда
		ВалютаЗагрузки = ИсходныеДанные.СчетОрганизации.ВалютаДенежныхСредств;
	Иначе
		ВалютаЗагрузки = Неопределено;
	КонецЕсли;
	
	СтруктураДанныхКонтрагента  =  СоздатьКонтрагента(,РеквизитыКонтрагента, Организация, ВалютаЗагрузки);
	НовыйКонтрагент = СтруктураДанныхКонтрагента.Контрагент;
	
	Если НЕ НовыйКонтрагент.Пустая() Тогда
		Если ТипКонтрагента ="ПЛАТЕЛЬЩИК" Тогда 
			НовыйДоговор =СоздатьНужныйДоговор(НовыйКонтрагент, Организация, Истина, СтруктураДанныхКонтрагента.СчетКонтрагента.ВалютаДенежныхСредств);
		иначе
		    НовыйДоговор =СоздатьНужныйДоговор(НовыйКонтрагент, Организация, Ложь, СтруктураДанныхКонтрагента.СчетКонтрагента.ВалютаДенежныхСредств);
		КонецЕсли;
	КонецЕсли;
	
 	ИсходныеДанные["Контрагент"] = НовыйКонтрагент;    
	ИсходныеДанные["СчетКонтрагента"] = СтруктураДанныхКонтрагента.СчетКонтрагента;

КонецПроцедуры //СписокНенайденных()

/////// НОВОЕ /////////////////////////////////////////////////////////////

Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)
	
	Если ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНастройкуЗаполнения(ИмяНастройкиЗаполнения)
	
	Если ТипЗнч(НастройкаЗаполнения) = Тип("СписокЗначений") Тогда
		Для каждого ЭлементНастроек Из НастройкаЗаполнения Цикл
			Если ЭлементНастроек.Представление =  ИмяНастройкиЗаполнения Тогда
				Возврат ЭлементНастроек.Значение;
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

/////////////// Формирование управляющих данных ///////////////////////////

Процедура ЗаполнитьСтрокиРеквизитовПлДокументов() //?
	
	РеквизитыПлДок_Основные = "НомерДокумента,ДатаДокумента,Сумма";
	РеквизитыПлДок_Плательщик 		= "ПлательщикНаименование,ПлательщикРНН,ПлательщикБИН_ИИН,ПлательщикКБЕ,ПлательщикИИК";
	РеквизитыПлДок_ПлательщикНПР 	= "ПлательщикБанкНаименование,ПлательщикБанкРНН,ПлательщикБанкБИН_ИИН,ПлательщикБанкБИК";
	РеквизитыПлДок_Получатель 		= "ПолучательНаименование,ПолучательРНН,ПолучательБИН_ИИН,ПолучательКБЕ,ПолучательИИК";
	РеквизитыПлДок_ПолучательНПР 	= "ПолучательБанкНаименование,ПолучательБанкРНН,ПолучательБанкБИН_ИИН,ПолучательБанкБИК";	
	РеквизитыПлДок_БанкПосредник 	= "БанкПосредникНаименование,БанкПосредникИИК,БанкПосредникРНН,БанкПосредникБИН_ИИН,БанкПосредникБИК";
	РеквизитыПлДок_БюджетПлатеж 	= "КодНазначенияПлатежа";
	РеквизитыПлДок_Назначение		= "НазначениеПлатежа";
	РеквизитыПлДок_НеОбязательные 	= "ПлательщикБанкИИК,ПолучательБанкИИК,ДатаПолученияТовара,КодБюджетнойКлассификации,ДатаВалютирования,ВидДокумента,ДатаОперации,СуммаПриход,СуммаРасход";
	РеквизитыПлДок_СоцПенс 			= "ПенсионныеОтчисления,СоциальныеОтчисления,ПеречислениеНаКартСчета,ПеречислениеПоИЛ,ПеречислениеПодотчетнику";
	РеквизитыПлДок_ГЦВП 			= "ГЦВПБанкНаименование,ГЦВПИИК,ГЦВПРНН,ГЦВПБанкБИК";

КонецПроцедуры

Функция СоздатьСоответствиеИзСтроки(Знач СтрокаЧерезЗапятую) //?
	
	НовоеСоответствие = Новый Соответствие;

	ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
	
	Пока ПозицияРазделителя > 0 Цикл
		ИмяИтема = Лев(СтрокаЧерезЗапятую, ПозицияРазделителя - 1);
		НовоеСоответствие.Вставить(ИмяИтема, Истина);
		СтрокаЧерезЗапятую = Сред(СтрокаЧерезЗапятую, ПозицияРазделителя + 1);
		ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
		
	КонецЦикла;
	
	Если СтрДлина(СтрокаЧерезЗапятую) > 0 Тогда
		НовоеСоответствие.Вставить(СтрокаЧерезЗапятую, Истина);
		
	КонецЕсли;
		
	Возврат НовоеСоответствие;
	
КонецФункции

Процедура СформироватьСоответствиеВыгружаемых() //?
	
	Экспорт_Выгружаемые = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
    РеквизитыПлДок_СоцПенс + "," +
	РеквизитыПлДок_Плательщик + "," +
	РеквизитыПлДок_ПлательщикНПР + "," +
	РеквизитыПлДок_Получатель + "," +
	РеквизитыПлДок_ПолучательНПР + "," +
	РеквизитыПлДок_БюджетПлатеж + "," +
	РеквизитыПлДок_Назначение + "," +
	РеквизитыПлДок_НеОбязательные + "," +
	РеквизитыПлДок_БанкПосредник);
	
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
    РеквизитыПлДок_СоцПенс + "," +
	РеквизитыПлДок_Плательщик + "," +
	РеквизитыПлДок_ПлательщикНПР + "," +
	РеквизитыПлДок_Получатель + "," +
	РеквизитыПлДок_ПолучательНПР + "," +
	РеквизитыПлДок_БюджетПлатеж + "," +
	РеквизитыПлДок_Назначение + "," +
	РеквизитыПлДок_НеОбязательные);
	
	Экспорт_ВыгружаемыеГЦВП = СоздатьСоответствиеИзСтроки(РеквизитыПлДок_ГЦВП);
	
КонецПроцедуры

Процедура СформироватьСоответствиеНеПустыхПриЭкспорте() //?
	
	
	//Получим настройки проверки заполненности реквизитов
	ПроверятьРНН 		= ПолучитьНастройкуЗаполнения("ПроверятьРНН");
	ПроверятьБИН_ИИН 	= ПолучитьНастройкуЗаполнения("ПроверятьБИН_ИИН");
	
	РеквизитыПлДок_Плательщик_С_Настр = РеквизитыПлДок_Плательщик;
	РеквизитыПлДок_Получатель_С_Настр = РеквизитыПлДок_Получатель;
	РеквизитыПлДок_ПлательщикНПР_С_Настр = РеквизитыПлДок_ПлательщикНПР;
	РеквизитыПлДок_ПолучательНПР_С_Настр = РеквизитыПлДок_ПолучательНПР;
	
	Если Не ПроверятьРНН Тогда 
		РеквизитыПлДок_Плательщик_С_Настр = СтрЗаменить(РеквизитыПлДок_Плательщик_С_Настр, "ПлательщикРНН,", "");
		РеквизитыПлДок_Получатель_С_Настр = СтрЗаменить(РеквизитыПлДок_Получатель_С_Настр, "ПолучательРНН,", "");
		РеквизитыПлДок_ПлательщикНПР_С_Настр = СтрЗаменить(РеквизитыПлДок_ПлательщикНПР_С_Настр, "ПлательщикБанкРНН,", "");
		РеквизитыПлДок_ПолучательНПР_С_Настр = СтрЗаменить(РеквизитыПлДок_ПолучательНПР_С_Настр, "ПолучательБанкРНН,", "");
	КонецЕсли;
	
	Если Не ПроверятьБИН_ИИН Тогда 
		РеквизитыПлДок_Плательщик_С_Настр = СтрЗаменить(РеквизитыПлДок_Плательщик_С_Настр, "ПлательщикБИН_ИИН,", "");
		РеквизитыПлДок_Получатель_С_Настр = СтрЗаменить(РеквизитыПлДок_Получатель_С_Настр, "ПолучательБИН_ИИН,", "");
		РеквизитыПлДок_ПлательщикНПР_С_Настр = СтрЗаменить(РеквизитыПлДок_ПлательщикНПР_С_Настр, "ПлательщикБанкБИН_ИИН,", "");
		РеквизитыПлДок_ПолучательНПР_С_Настр = СтрЗаменить(РеквизитыПлДок_ПолучательНПР_С_Настр, "ПолучательБанкБИН_ИИН,", "");
	КонецЕсли;
	
	ЭкспортНеПустые_ПлатежноеПоручение = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
//	РеквизитыПлДок_СоцПенс + "," +
	РеквизитыПлДок_Плательщик_С_Настр + "," +
	РеквизитыПлДок_Получатель_С_Настр + "," +
	РеквизитыПлДок_Назначение);
	
	ЭкспортНеПустые_ПлатежноеПоручение_НПР_Плательщик = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
//	РеквизитыПлДок_СоцПенс + "," +
	РеквизитыПлДок_Плательщик_С_Настр + "," +
	РеквизитыПлДок_ПлательщикНПР_С_Настр + "," +
	РеквизитыПлДок_Получатель_С_Настр + "," +
	РеквизитыПлДок_Назначение);
	
	ЭкспортНеПустые_ПлатежноеПоручение_НПР_Получатель = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
//	РеквизитыПлДок_СоцПенс + "," +
	РеквизитыПлДок_Плательщик_С_Настр + "," +
	РеквизитыПлДок_Получатель_С_Настр + "," +
	РеквизитыПлДок_ПолучательНПР_С_Настр + "," +
	РеквизитыПлДок_Назначение);
	
	ЭкспортНеПустые_ПлатежноеПоручение_НПР = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
//	РеквизитыПлДок_СоцПенс + "," +
	РеквизитыПлДок_Плательщик_С_Настр + "," +
	РеквизитыПлДок_ПлательщикНПР_С_Настр + "," +
	РеквизитыПлДок_Получатель_С_Настр + "," +
	РеквизитыПлДок_ПолучательНПР_С_Настр + "," +
	РеквизитыПлДок_Назначение);
	
	ЭкспортНеПустые_ПлатежноеПоручениеБюджет = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
//	РеквизитыПлДок_СоцПенс + "," +
	РеквизитыПлДок_Плательщик_С_Настр + "," +
	РеквизитыПлДок_Получатель_С_Настр + "," +
	РеквизитыПлДок_Назначение + "," +
	РеквизитыПлДок_БюджетПлатеж);
	
	ЭкспортНеПустые_ПлатежноеПоручениеБюджет_НПР_Плательщик = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
//	РеквизитыПлДок_СоцПенс + "," +
	РеквизитыПлДок_Плательщик_С_Настр + "," +
	РеквизитыПлДок_ПлательщикНПР_С_Настр + "," +
	РеквизитыПлДок_Получатель_С_Настр + "," +
	РеквизитыПлДок_Назначение + "," +
	РеквизитыПлДок_БюджетПлатеж);
	
	ЭкспортНеПустые_ПлатежноеПоручениеБюджет_НПР_Получатель = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
//	РеквизитыПлДок_СоцПенс + "," +
	РеквизитыПлДок_Плательщик_С_Настр + "," +
	РеквизитыПлДок_Получатель_С_Настр + "," +
	РеквизитыПлДок_ПолучательНПР_С_Настр + "," +
	РеквизитыПлДок_Назначение + "," +
	РеквизитыПлДок_БюджетПлатеж);
	
	ЭкспортНеПустые_ПлатежноеПоручениеБюджет_НПР = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
//	РеквизитыПлДок_СоцПенс + "," +
	РеквизитыПлДок_Плательщик_С_Настр + "," +
	РеквизитыПлДок_ПлательщикНПР_С_Настр + "," +
	РеквизитыПлДок_Получатель_С_Настр + "," +
	РеквизитыПлДок_ПолучательНПР_С_Настр + "," +
	РеквизитыПлДок_Назначение + "," +
	РеквизитыПлДок_БюджетПлатеж);
	
	Экспорт_НеПустые = Новый Массив;
	
	Экспорт_НеПустые.Добавить(СоздатьСоответствиеИзСтроки(""));
	Экспорт_НеПустые.Добавить(ЭкспортНеПустые_ПлатежноеПоручение);
	Экспорт_НеПустые.Добавить(ЭкспортНеПустые_ПлатежноеПоручение_НПР_Плательщик);
	Экспорт_НеПустые.Добавить(ЭкспортНеПустые_ПлатежноеПоручение_НПР_Получатель);
	Экспорт_НеПустые.Добавить(ЭкспортНеПустые_ПлатежноеПоручение_НПР);
	Экспорт_НеПустые.Добавить(ЭкспортНеПустые_ПлатежноеПоручениеБюджет);
	Экспорт_НеПустые.Добавить(ЭкспортНеПустые_ПлатежноеПоручениеБюджет_НПР_Плательщик);
	Экспорт_НеПустые.Добавить(ЭкспортНеПустые_ПлатежноеПоручениеБюджет_НПР_Получатель);
	Экспорт_НеПустые.Добавить(ЭкспортНеПустые_ПлатежноеПоручениеБюджет_НПР);
	
КонецПроцедуры

Процедура СформироватьСоответствияНеПустыхПриИмпорте() //
	
	//Получим настройки проверки заполненности реквизитов
	ПроверятьРНН 		= ПолучитьНастройкуЗаполнения("ПроверятьРНН");
	ПроверятьБИН_ИИН 	= ПолучитьНастройкуЗаполнения("ПроверятьБИН_ИИН");
	
	ОбязательныеПараметры = "НомерДок,ДатаДок,Сумма,ПлательщикИИК,ПолучательИИК";
	
	Если ПроверятьРНН Тогда 
		ОбязательныеПараметры = ОбязательныеПараметры + ",ПлательщикРНН,ПолучательРНН";
	КонецЕсли;
	
	Если ПроверятьБИН_ИИН Тогда 
		ОбязательныеПараметры = ОбязательныеПараметры + ",ПлательщикБИН_ИИН,ПолучательБИН_ИИН";
	КонецЕсли;	 
	
	ИмпортНеПустые_ПлатежноеПоручение = СоздатьСоответствиеИзСтроки(ОбязательныеПараметры);
	//ДатаОперации не участвует в проверке на пустое значение
	
	Импорт_НеПустые = Новый Массив;
	
	Импорт_НеПустые.Добавить(ИмпортНеПустые_ПлатежноеПоручение);
	
КонецПроцедуры

Процедура СформироватьТегиЗаголовка() //+
	
	СтрокаТегов = ВРЕГ("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца");
	ТегиЗаголовка = СоздатьСоответствиеИзСтроки(СтрокаТегов);
	
	Импорт_Заголовок = Новый Структура(СтрокаТегов);
	
КонецПроцедуры

Процедура СформироватьТегиРасчетногоСчета() //?
	
	СтрокаТегов = ВРЕГ("ДатаНачала,ДатаКонца,РасчСчет,НачальныйОстаток,ВсегоПоступило,ВсегоСписано,КонечныйОстаток,КонецРасчСчет");
	ТегиРасчетногоСчета = СоздатьСоответствиеИзСтроки(СтрокаТегов);
	
КонецПроцедуры

Процедура СформироватьСоответствиеЗагружаемых() //?
	
	Импорт_Загружаемые = СоздатьСоответствиеИзСтроки(ВРЕГ(РеквизитыПлДок_Основные + ","
	 + РеквизитыПлДок_Плательщик + ","
	 + РеквизитыПлДок_ПлательщикНПР + ","
	 + РеквизитыПлДок_Получатель + ","
	 + РеквизитыПлДок_ПолучательНПР + ","
	 + РеквизитыПлДок_НеОбязательные + ","
	 + РеквизитыПлДок_БанкПосредник + ","
	 + РеквизитыПлДок_БюджетПлатеж + ","
	 + РеквизитыПлДок_Назначение));
	
КонецПроцедуры

Процедура ЗаполнитьРаспознаваемыеПриИмпорте() //?
	
	Импорт_Распознаваемые = Новый Массив;
	
	// определяютопреацию при для входящих документов
	Импорт_Распознаваемые.Добавить("Списано");
	Импорт_Распознаваемые.Добавить("Поступило");
	
	// Контрагент
	Импорт_Распознаваемые.Добавить("Контрагент");
	Импорт_Распознаваемые.Добавить("СчетКонтрагента");
	
	// Сумма
	Импорт_Распознаваемые.Добавить("СуммаДокумента");
	
	// Наконец, сам документ
	Импорт_Распознаваемые.Добавить("Документ");
	
КОнецПроцедуры

///////////////// Начальное формирование таблицы и поля ////////////////////

Функция СоздатьКолонкуВТаблице(РабочаяТаблица, ТабПоле, Имя, ТипКолонки = Неопределено, Заголовок = "", СоответсвиеХарактеристик)
	
	Если ПустаяСтрока(Имя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ШиринаКолонки = (СоответсвиеХарактеристик["Ширина"]);
	Если ТипЗнч(ШиринаКолонки) <> Тип("Число") Тогда
		ШиринаКолонки =  0;
	КонецЕсли;
	
	Если ТипЗнч(ТипКолонки) = Тип("ОписаниеТипов") Тогда
		РабочаяТаблица.Колонки.Добавить(Имя, ТипКолонки, Заголовок, ШиринаКолонки);
		
	Иначе
		РабочаяТаблица.Колонки.Добавить(Имя, , Заголовок, ШиринаКолонки);
		
	КонецЕсли;
	
	Если ТабПоле <> Неопределено Тогда
		// Создаем колонку в табличном поле
		КолонкаТабПоля = ТабПоле.Колонки.Добавить(Имя, Заголовок);
		
		Если ТипКолонки = Новый ОписаниеТипов("Булево") Тогда
			// связываем её с данными флажка
			КолонкаТабПоля.ДанныеФлажка = Имя;
			КолонкаТабПоля.УстановитьЭлементУправления(Тип("Флажок"));
			КолонкаТабПоля.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
			
		Иначе
			// связываем её с данными
			КолонкаТабПоля.Данные = Имя;
			КолонкаТабПоля.УстановитьЭлементУправления(Тип("ПолеВвода"));
			
			Если Имя = "Картинка" Тогда 
				КолонкаТабПоля.КартинкиСтрок = БиблиотекаКартинок.СостояниеДокумента;
				КолонкаТабПоля.ТекстШапки = "";
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(ШиринаКолонки) = Тип("Число") Тогда
			Если ШиринаКолонки > 0 Тогда
				КолонкаТабПоля.Ширина  = ШиринаКолонки;
			КонецЕсли;
		КонецЕсли;
		
		// устанавливаем характеристики
		КолонкаТабПоля.ИзменятьНастройку = (СоответсвиеХарактеристик["ИзменятьНастройку"] <> Ложь);
		//Устанавливаем список выбора для колонки "Операция" только для Табличного поля ДокументыКИмпорту
		Если Имя = "Операция" И ТабПоле.Имя = "ДокументыКИмпорту" Тогда 
			ПолеВыбораКолонки = (СоответсвиеХарактеристик["ЭлементУправления"]);
			КолонкаТабПоля.УстановитьЭлементУправления(Тип("ПолеВыбора"));
			КолонкаТабПоля.ЭлементУправления.СписокВыбора   = ПолеВыбораКолонки;
		КонецЕсли;
		
		КолонкаТабПоля.ИзменятьПозицию   = (СоответсвиеХарактеристик["ИзменятьПозицию"] <> Ложь);
		КолонкаТабПоля.Видимость         = (СоответсвиеХарактеристик["Видимость"] <> Ложь);
		КолонкаТабПоля.Доступность       = (СоответсвиеХарактеристик["Доступность"] <> Ложь);
		КолонкаТабПоля.ТолькоПросмотр    = (СоответсвиеХарактеристик["ТолькоПросмотр"] = Истина);
			
		КолонкаТабПоля.ИзменениеРазмера  = ?((СоответсвиеХарактеристик["ИзменениеРазмера"] <> Ложь), ИзменениеРазмераКолонки.Изменять, ИзменениеРазмераКолонки.НеИзменять);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СформироватьСтруктуруТаблицыЭкспорта(Таб, ТабПоле) Экспорт //+
	
	КлючиСтруктуры = "ИзменятьНастройку, ИзменятьПозицию, Видимость, Доступность, ТолькоПросмотр, ИзменениеРазмера, Ширина, АвтоПереносСтрок";
	
	Видимая      	= Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, 	Истина,  0, Ложь);
	ВидимаяПеренос 	= Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, 	Истина,  20, Истина);
	Видимая020   	= Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Ложь, 	Ложь,    3, Ложь);
	Видимая080   	= Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, 	Ложь,   10, Ложь);
	Видимая120   	= Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, 	Ложь,   15, Ложь);
	Видимая160   	= Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, 	Ложь,   20, Ложь);
	
	НеВидимая    = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Ложь,   Истина, Истина, Истина,  0, Ложь);
	
	Т_Булево    = Новый ОписаниеТипов("Булево");
	
	Т_Число15_2 = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2));
	Т_Число1    = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1));
	Т_Число10   = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10));
	
	Т_Строка    = Новый ОписаниеТипов("Строка");
	Т_Строка02  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(2));
    Т_Строка03  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3));
    Т_Строка06  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(6));
    Т_Строка09  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(9));
	Т_Строка10  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
	Т_Строка11  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(11));
	Т_Строка12  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12));
	Т_Строка20  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20));
	
	Т_Дата      = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Т_Документ  = Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручениеИсходящее");
	Т_БанкСчет  = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
	Т_Контрагент  = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	
	
	Таб.Очистить();
	Таб.Колонки.Очистить();
	
	//  Имя, заголовок, выгружать, не пустая, ширина, изменять размер
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Картинка",          		  		  ,    "",                        			  Видимая020);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Выгружать",          		  Т_Булево,    "_",                        			  Видимая020);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Готовность",          	  Т_Число1,    "Готовность",               			  НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НомерДокумента",     		  Т_Строка,    "№ Документа",              			  Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаДокумента",      		  Т_Дата,      "Дата",                     			  Видимая080);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Операция",           		  Т_Строка,    "Операция",                 			  Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СчетОрганизации",           Т_БанкСчет,  "Эл. Р/с организации",     		      НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НомерСчетаОрганизации",     Т_Строка,    "Р/с организации",          			  Видимая160);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Сумма",                     Т_Строка20,  "Сумма",                     		  Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СуммаДокумента",            Т_Число15_2, "Сумма",                     		  НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПенсионныеОтчисления",      Т_Строка02,  "Пенсионные отчисления",               НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СоциальныеОтчисления",      Т_Строка02,  "Социальные отчисления",               НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПеречислениеНаКартСчета",	  Т_Строка02,  "Заработная плата",               	  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПеречислениеПоИЛ",	  	  Т_Строка02,  "Перечисление по исполнительным листам",НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПеречислениеПодотчетнику",  Т_Строка02,  "Перечисление подотчетнику",			  НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Контрагент",                Т_Строка,    "Контрагент",              		      Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ЭлементКонтрагент",         Т_Контрагент,"Контрагент",              		      НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СчетКонтрагента",           Т_БанкСчет,  "Р/с контрагента",          			  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НомерСчетаКонтрагента",     Т_Строка,    "Р/с контрагента",           		  Видимая160);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикНаименование",    Т_Строка,    "Отправитель",                     	  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикРНН",             Т_Строка12,  "РНН отправителя",                 	  НеВидимая);
	///////////////////
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБИН_ИИН",         Т_Строка12,  "БИН / ИИН отправителя",      	  	  НеВидимая);
	//////////////////
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикКБЕ",             Т_Строка02,  "Кбе отправителя",                 	  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикИИК",             Т_Строка20,  "Расчетный счет отправителя",      	  НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБанкНаименование",Т_Строка,    "Наименование банка отправителя",  	  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБанкРНН",         Т_Строка12,  "РНН банка-отправителя",            	  НеВидимая);
	//////////////////
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБанкБИН_ИИН",     Т_Строка12,  "БИН / ИИН банка отправителя",         НеВидимая);
	//////////////////	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБанкБИК",         Т_Строка09,  "БИК банка-отправителя",          	  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБанкИИК",         Т_Строка20,  "ИИК банка-отправителя",           	  НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательНаименование",    Т_Строка,    "Бенефициар",                          НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательРНН",             Т_Строка12,  "РНН бенефициара",                  	  НеВидимая);
	//////////////////
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБИН_ИИН",         Т_Строка12,  "БИН / ИИН бенефициара",               НеВидимая);
	//////////////////
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательКБЕ",             Т_Строка02,  "Кбе бенефициара",                     НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательИИК",             Т_Строка20,  "ИИК бенефициара",                 	  НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБанкНаименование",Т_Строка,    "Наименование банка получателя", 	  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБанкРНН",         Т_Строка12,  "РНН банка-получателя",           	  НеВидимая);
	//////////////////
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБанкБИН_ИИН",     Т_Строка12,  "БИН / ИИН банка получателя",	      НеВидимая);
	//////////////////
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБанкБИК",         Т_Строка09,  "БИК банка-получателя",            	  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБанкИИК",         Т_Строка20,  "ИИК банка-получателя",            	  НеВидимая);

    СоздатьКолонкуВТаблице(Таб, ТабПоле, "БанкПосредникНаименование", Т_Строка,    "Наименование банка посредника",       НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "БанкПосредникРНН",          Т_Строка12,  "РНН банка-посредника",                НеВидимая);
	//////////////////
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "БанкПосредникБИН_ИИН",     Т_Строка12,   "БИН / ИИН банка посредника",	   	  НеВидимая);
	//////////////////
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "БанкПосредникБИК",          Т_Строка09,  "БИК банка-посредника",                НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "БанкПосредникИИК",          Т_Строка20,  "ИИК банка-посредника",                НеВидимая);
	
    СоздатьКолонкуВТаблице(Таб, ТабПоле, "ГЦВПРНН",                   Т_Строка12,  "РНН Гос. центра по выплате пенсий",   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ГЦВПБИН_ИИН",               Т_Строка12,  "БИН / ИИН Гос. центра по выплате пенсий", НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ГЦВПИИК",                   Т_Строка20,  "Р/с ГЦВП",                            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ГЦВПБанкНаименование",      Т_Строка,    "Наименование банка ГЦВП",             НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ГЦВПБанкБИК",               Т_Строка09,  "БИК банка ГЦВП",                      НеВидимая);

	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаПолученияТовара",       Т_Дата,      "Дата получения товара",      		  НеВидимая);	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа",         Т_Строка,    "Назначение платежа",         		  ВидимаяПеренос);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "КодНазначенияПлатежа",      Т_Строка03,  "Код назначения платежа",     		  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "КодБюджетнойКлассификации", Т_Строка06,  "Код бюджетной классификации",		  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаВалютирования",         Т_Дата,      "Дата валютирования",        		  НеВидимая);	
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Документ",            	  Т_Документ,  "Источник",                 			  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СекцияДокумент",      	  Т_Строка,    "Выгрузка",             			      НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ОписаниеОшибок",      	  Т_Строка,    "Замечания",              			  Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ТипДокумента",        	  Т_Число10,   "Тип пл. документа",          		  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Проведен",          		  Т_Булево,    "",                        			  НеВидимая);
	
КонецПроцедуры

Процедура СформироватьСтруктуруТаблицыИмпорта(Таб, ТабПоле) Экспорт //+
	
	КлючиСтруктуры = "ИзменятьНастройку, ИзменятьПозицию, Видимость, Доступность, ТолькоПросмотр, ИзменениеРазмера, Ширина, ЭлементУправления, АвтоПереносСтрок";
	ПолеВыбора = Новый СписокЗначений();
	ПолеВыбора.Добавить("ПлатежноеПоручение");
	ПолеВыбора.Добавить("ПлатежныйОрдер");
	Видимая         = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, 	Истина,  0, , Ложь);
	ВидимаяПеренос 	= Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, 	Истина,  20, , Истина);
	Видимая020      = Новый Структура(КлючиСтруктуры, Истина, Истина, Истина, Истина, Истина, 	Ложь,    3, , Ложь);
	Видимая080      = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, 	Истина,  10, , Ложь);
	Видимая120      = Новый Структура(КлючиСтруктуры, Истина, Истина, Истина, Истина, Истина, 	Истина,  15, , Ложь);
	Видимая160      = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, 	Истина,  20, , Ложь);
	ВидимаяОперация = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Ложь, 	Истина,  20, ПолеВыбора, Ложь);

	
	НеВидимая    = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Ложь,   Истина, Истина, Истина,  0, , Ложь);
	
	Т_Булево    = Новый ОписаниеТипов("Булево");
	
	Т_Число15_2 = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2));
	Т_Число1    = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1));
	Т_Число10   = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10));
	
	Т_Строка    = Новый ОписаниеТипов("Строка");
	Т_Строка02  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(2));
    Т_Строка03  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3));
    Т_Строка06  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(6));
	Т_Строка09  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(9));
	Т_Строка10  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
	Т_Строка11  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(11));
	Т_Строка12  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12));
	Т_Строка20  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20));
	
	Т_Дата      = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Т_Документ  = Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручениеИсходящее,ДокументСсылка.ПлатежноеПоручениеВходящее,ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств,ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств");
	Т_ПлОрдер   = Новый ОписаниеТипов("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств");
	Т_Контрагент = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	Т_БанкСчет   = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
	
	Таб.Очистить();
	Таб.Колонки.Очистить();
	
	//  Имя, заголовок, выгружать, не пустая, ширина, изменять размер
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Картинка",          		  		  ,    "",                        		   Видимая020);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Загрузить",          		  Т_Булево,    "_",                        		  Видимая020);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Готовность",        	      Т_Число1,    "Готовность",            	       НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НомерДок",           		  Т_Строка,    "№ Документа",          		       Видимая120);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НомерДокумента",     		  Т_Строка,    "Номер",                            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаДок",            		  Т_Дата,      "Дата документа",         		   Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаДокумента",      	      Т_Строка,    "Дата (из файла)",                  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Операция",            	  Т_Строка,    "Операция",            		       ВидимаяОперация);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СчетОрганизации",     	  Т_БанкСчет,  "Р/с организации",        	       Видимая160);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СуммаДокумента",      	  Т_Число15_2, "Сумма",                   		   Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Сумма",               	  Т_Строка,    "Сумма (из файла)",        		   НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Контрагент",          	  Т_Контрагент,"Контрагент",              		   Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СчетКонтрагента",    	 	  Т_БанкСчет,  "Р/с контрагента",         		   Видимая160);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаОперации",        	  Т_Строка,    "Дата операции",            		   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СуммаПриход",         	  Т_Строка,    "Сумма приход",           	       НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СуммаРасход",         	  Т_Строка,    "Сумма расход",              	   НеВидимая);

	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Списано",             	  Т_Дата,      "Дата списания",                    Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаСписано",         	  Т_Строка,    "Списано",                		   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Поступило",           	  Т_Дата,      "Дата поступления",                 Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаПоступило",       	  Т_Строка,    "Поступило",                		   НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикНаименование",    Т_Строка,    "Отправитель",                      НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикРНН",             Т_Строка12,  "РНН отправителя",                  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикКБЕ",             Т_Строка02,  "Кбе отправителя",                  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикИИК",             Т_Строка20,  "Расчетный счет отправителя",       НеВидимая);
	
	///////////////////
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБИН_ИИН",         Т_Строка12,  "БИН / ИИН отправителя",      	   НеВидимая);
	//////////////////	
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБанкНаименование",Т_Строка,    "Наименование банка отправителя",   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБанкРНН",         Т_Строка12,  "РНН банка-отправителя",            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБанкБИН_ИИН",     Т_Строка12,  "БИН / ИИН банка отправителя",         НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБанкБИК",         Т_Строка09,  "БИК банка-отправителя",            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБанкИИК",         Т_Строка20,  "ИИК банка-отправителя",            НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательНаименование",    Т_Строка,    "Бенефициар",                       НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательРНН",             Т_Строка12,  "Кбе бенефициара",                  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательКБЕ",             Т_Строка02,  "ИИК бенефициара",                  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательИИК",             Т_Строка20,  "РНН бенефициара",                  НеВидимая);
	
	//////////////////
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБИН_ИИН",         Т_Строка12,  "БИН / ИИН бенефициара",            НеВидимая);
	
	//////////////////
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБанкНаименование",Т_Строка,    "Наименование банка получателя",    НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБанкРНН",         Т_Строка12,  "РНН банка-получателя",             НеВидимая);	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБанкБИН_ИИН",     Т_Строка12,  "БИН / ИИН банка получателя",       НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБанкБИК",         Т_Строка09,  "БИК банка-получателя",             НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБанкИИК",         Т_Строка20,  "ИИК банка-получателя",             НеВидимая);
	
	//////////////////
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "БанкПосредникНаименование", Т_Строка,    "Наименование банка посредника",       НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "БанкПосредникРНН",          Т_Строка12,  "РНН банка-посредника",                НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "БанкПосредникБИН_ИИН",     Т_Строка12,   "БИН / ИИН банка посредника",	   	  НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "БанкПосредникБИК",          Т_Строка09,  "БИК банка-посредника",                НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "БанкПосредникИИК",          Т_Строка20,  "ИИК банка-посредника",                НеВидимая);

	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаПолученияТовара",       Т_Дата,      "Дата получения товара",      	   НеВидимая);		
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа",         Т_Строка,    "Назначение платежа",         	   ВидимаяПеренос);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "КодНазначенияПлатежа",      Т_Строка03,  "Код назначения платежа",    	   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "КодБюджетнойКлассификации", Т_Строка06,  "Код бюджетной классификации",	   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаВалютирования",         Т_Дата,      "Дата валютирования",      		   НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Документ",             	  Т_Документ,  "Источник",                 		   Видимая);

	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СекцияДокумент",       	  Т_Строка,    "Выгрузка",                		   НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ОписаниеОшибок",            Т_Строка,    "Замечания",               		   Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ТипДокумента",              Т_Число10,   "Тип пл. документа",        		   НеВидимая);
	
КонецПроцедуры

Процедура СформироватьСтруктуруТаблицыРасчСчетов(Таб) Экспорт //+
	
	КлючиСтруктуры = "ИзменятьНастройку,ИзменятьПозицию,Видимость,Доступность,ТолькоПросмотр,ИзменениеРазмера,Ширина";
	Видимая      = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Истина,  0);
	
	Т_Строка     = Новый ОписаниеТипов("Строка");
	
	Таб.Очистить();
	Таб.Колонки.Очистить();
	
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ДатаНачала",       Т_Строка,     "Дата начала интервала",      Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ДатаКонца",        Т_Строка,     "Дата конца интервала",       Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "РасчСчет",         Т_Строка,     "Расчетный счет организации", Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "НачальныйОстаток", Т_Строка,     "Начальный остаток",          Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ВсегоПоступило",   Т_Строка,     "Обороты входящих платежей",  Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ВсегоСписано",     Т_Строка,     "Обороты исходящих платежей", Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "КонечныйОстаток",  Т_Строка,     "Конечный остаток",           Видимая);
	
КонецПроцедуры

Процедура СформироватьСтруктуруТаблицыРеквизитовКонтрагента(Таб) Экспорт //?
	
	КлючиСтруктуры = "ИзменятьНастройку,ИзменятьПозицию,Видимость,Доступность,ТолькоПросмотр,ИзменениеРазмера,Ширина";
	Видимая      = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Истина,  0);
	
	Т_Строка     = Новый ОписаниеТипов("Строка");
			
	Таб.Очистить();
	Таб.Колонки.Очистить();
	
	СоздатьКолонкуВТаблице(Таб, Неопределено, "Реквизит",         Т_Строка,     "Реквизит",                   Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "Значение",         Т_Строка,     "Значение",                   Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "Представление",    Т_Строка,     "Представление",              Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ТипКонтрагента",   Т_Строка,     "ТипКонтрагента",             Видимая);
	
КонецПроцедуры

////////////// ОБЩИЕ //////////////////////////////////////////////////

Процедура ДобавитьВСтроку(Буфер, НоваяСтрока) //+
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
		
	Иначе
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьАктераПлательщика(СсылкаНаДокумент)
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		Возврат "Контрагент";
		
	Иначе
		Возврат "Организация";
		
	КонецЕсли;
	
КонецФункции

Функция ОпределитьАктераПолучателя(СсылкаНаДокумент)
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		Возврат "Организация";
		
	Иначе
		Возврат "Контрагент";
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТегСекции(СсылкаНаДокумент)
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		Возврат "ПлатежноеПоручение";
		
	Иначе
		Возврат "Прочее";
		
	КонецЕсли;
	
КонецФункции

Функция ПривестиЗначение(Значение) //+
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат СокрЛП(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧРД=.; ЧРГ=' '; ЧГ=0");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Формат(Значение, "ДФ=dd.MM.yyyy");
		
	Иначе
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

Функция ПривестиЗначениеXML(СтруктураДокумента, ИмяРеквизита, НеПреобразовыватьВСтроку)
	Значение = СтруктураДокумента[ИмяРеквизита];
	НеПреобразовыватьВСтроку = Истина;
	Если (ИмяРеквизита = "ДатаДокумента") ИЛИ 
		 (ИмяРеквизита = "ДатаВалютирования") Тогда
		Возврат Значение;
	ИначеЕсли ИмяРеквизита = "Сумма" Тогда
		Возврат СтруктураДокумента["СуммаДокумента"];
	ИначеЕсли ИмяРеквизита = "ПенсионныеОтчисления" Тогда
		Если СокрЛП(Значение) = "1" Тогда
			Возврат Истина;
		Иначе
			Возврат "";
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "СоциальныеОтчисления" Тогда
		Если СокрЛП(Значение) = "1" Тогда
			Возврат Истина;
		Иначе
			Возврат "";
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ПеречислениеНаКартСчета" Тогда
		Если СокрЛП(Значение) = "1" Тогда
			Возврат Истина;
		Иначе
			Возврат "";
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ПеречислениеПоИЛ" Тогда
		Если СокрЛП(Значение) = "1" Тогда
			Возврат Истина;
		Иначе
			Возврат "";
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ПеречислениеПодотчетнику" Тогда
		Если СокрЛП(Значение) = "1" Тогда
			Возврат Истина;
		Иначе
			Возврат "";
		КонецЕсли;
	Иначе
		НеПреобразовыватьВСтроку = Ложь;
		Возврат ПривестиЗначение(Значение);
	КонецЕсли;
КонецФункции

Функция ПолучитьДатуИзСтроки(Приемник, Источник)
	
	Буфер = Источник;
	
	ПозицияТочки = Найти(Буфер, ".");
	
	Если ПозицияТочки = 0 Тогда
		Возврат "Неверный формат строки с датой";
	КонецЕсли;
	
	ЧислоДаты = Лев(Буфер, ПозицияТочки - 1);
	Буфер = Сред(Буфер, ПозицияТочки + 1);
	
	ПозицияТочки = Найти(Буфер, ".");
	
	Если ПозицияТочки = 0 Тогда
		Возврат "Неверный формат строки с датой";
	КонецЕсли;
	
	МесяцДаты = Лев(Буфер, ПозицияТочки - 1);
	ГодДаты = Сред(Буфер, ПозицияТочки + 1);
	
	Попытка
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
		
	Исключение
		Возврат "Не удалось преобразовать строку в дату";
		
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

Процедура ДобавитьЗамечание(СтруктураДокумента, НоваяГотовность, ТекстЗамечания)
	
	УстановитьГотовность(СтруктураДокумента.Готовность, НоваяГотовность);
	ДобавитьВСтроку(СтруктураДокумента.ОписаниеОшибок, ТекстЗамечания);
	
КонецПроцедуры

////////////// ПОДОТОВКА ВЫГРУЗКИ //////////////////////////////////////////////////

Процедура ЗаполнитьДокументыНаЭкспорт(ДокументыНаЭкспорт) Экспорт //+
	
	ДокументыНаЭкспорт.Очистить();
	ИмяРеквизитаБИК = УправлениеДенежнымиСредствами.ПолучитьИмяРеквизитаБИКБанка(КонПериода);
	
	Если ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда
		СтруктурноеПодразделениеЗапрос = ?(СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации, "Организация", "СтруктурноеПодразделениеОтправитель");
	Иначе
		СтруктурноеПодразделениеЗапрос = "Организация";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручениеИсходящее.Ссылка,
	|	ПлатежноеПоручениеИсходящее.Номер,
	|	ПлатежноеПоручениеИсходящее.ДатаВыписки КАК Дата,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.НазначениеПлатежа КАК СТРОКА(1000)) КАК НазначениеПлатежа,
	|	ПлатежноеПоручениеИсходящее.СуммаДокумента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПлательщика КАК СТРОКА(1000)) КАК ТекстПлательщика,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПолучателя КАК СТРОКА(1000)) КАК ТекстПолучателя,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделениеЗапрос + ".НаименованиеПолное КАК СТРОКА(1000)) КАК Организация,
	|	ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделениеЗапрос + ".Наименование,
	|	ПлатежноеПоручениеИсходящее.Проведен,
	|	ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделениеЗапрос + ".РНН КАК ОрганизацияРНН,
	|	ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделениеЗапрос + ".ИдентификационныйНомер КАК ПлательщикБИН_ИИН,
	|	ПлатежноеПоручениеИсходящее.Организация.КБЕ КАК ОрганизацияКБЕ,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации КАК ОрганизацияСчет,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета КАК ОрганизацияИИК,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк." + ИмяРеквизитаБИК + " КАК ОрганизацияБанкБИК,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Наименование КАК ОрганизацияБанк,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.РНН КАК ОрганизацияБанкРНН,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.КоррСчет КАК ОрганизацияБанкИИК,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.СчетОрганизации.ТекстКорреспондента КАК СТРОКА(1000)) КАК ОрганизацияТекстКорреспондента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.СчетОрганизации.ТекстНазначения КАК СТРОКА(1000)) КАК ОрганизацияТекстНазначения,
	|	ПлатежноеПоручениеИсходящее.Контрагент КАК ЭлементКонтрагент,
	| 	Выбор Когда ПлатежноеПоручениеИсходящее.Контрагент.ЮрФизЛицо = Значение(Перечисление.ЮрФизЛицо.ФизЛицо) Тогда
  	| 		ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.Контрагент.Наименование КАК СТРОКА(1000))
  	| 	Иначе
  	| 		ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.Контрагент.НаименованиеПолное КАК СТРОКА(1000))
  	| 	Конец КАК Контрагент,
	|	ПлатежноеПоручениеИсходящее.Контрагент.Наименование,
	|	ПлатежноеПоручениеИсходящее.Контрагент.РНН КАК КонтрагентРНН,
	|	ПлатежноеПоручениеИсходящее.Контрагент.ИдентификационныйКодЛичности КАК КонтрагентИдентификационныйКод,
	|	ПлатежноеПоручениеИсходящее.Контрагент.КБЕ КАК КонтрагентКБЕ,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента КАК КонтрагентСчет,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета КАК КонтрагентИИК,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Наименование КАК КонтрагентБанк,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.РНН КАК КонтрагентБанкРНН,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк." + ИмяРеквизитаБИК + " КАК КонтрагентБанкБИК,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.КоррСчет КАК КонтрагентБанкИИК,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.СчетКонтрагента.ТекстКорреспондента КАК СТРОКА(1000)) КАК КонтрагентТекстКорреспондента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.СчетКонтрагента.ТекстНазначения КАК СТРОКА(1000)) КАК КонтрагентТекстНазначения,
	|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.Банк.КоррСчет КАК БанкПосредникИИК,
	|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.Банк." + ИмяРеквизитаБИК + " КАК БанкПосредникБИК,
	|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.Банк.Наименование КАК БанкПосредникБанкНаименование,
	|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.НомерСчета КАК БанкПосредникНомерСчета,
	|	ПлатежноеПоручениеИсходящее.БанкПосредник.Наименование КАК БанкПосредник,
	|	ПлатежноеПоручениеИсходящее.БанкПосредник.РНН КАК БанкПосредникРНН,
	|	ПлатежноеПоручениеИсходящее.ДатаПолученияТовара,
	|	ПлатежноеПоручениеИсходящее.КодНазначенияПлатежа,
	|	ПлатежноеПоручениеИсходящее.КодБК,
	|	ПлатежноеПоручениеИсходящее.ДатаВалютирования,
	|	ПлатежноеПоручениеИсходящее.ВидОперации,
	|	ПлатежноеПоручениеИсходящее.РННПлательщика,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПлательщика КАК СТРОКА(1000)) КАК ТекстПлательщика1,
	|	ПлатежноеПоручениеИсходящее.РННПолучателя,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПолучателя КАК СТРОКА(1000)) КАК ТекстПолучателя1,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = &Пенс
	|			ТОГДА 1
	|		ИНАЧЕ &парамПустаяСтрока
	|	КОНЕЦ КАК ПенсионныеОтчисления,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = &Соц
	|			ТОГДА 1
	|		ИНАЧЕ &парамПустаяСтрока
	|	КОНЕЦ КАК СоциальныеОтчисления,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = &ЗП
	|			ТОГДА 1
	|		ИНАЧЕ &парамПустаяСтрока
	|	КОНЕЦ КАК ПеречислениеНаКартСчета,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = &ИЛ
	|			ТОГДА 1
	|		ИНАЧЕ &парамПустаяСтрока
	|	КОНЕЦ КАК ПеречислениеПоИЛ,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = &Подотчет
	|			ТОГДА 1
	|		ИНАЧЕ &парамПустаяСтрока
	|	КОНЕЦ КАК ПеречислениеПодотчетнику,
	|	ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделениеЗапрос + ".ИдентификационныйНомер КАК ОрганизацияБИН_ИИН,
	|	ПлатежноеПоручениеИсходящее.Контрагент.ИдентификационныйКодЛичности КАК КонтрагентБИН_ИИН,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.ИдентификационныйНомер КАК ОрганизацияБанкБИН_ИИН,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.ИдентификационныйНомер КАК КонтрагентБанкБИН_ИИН,
	|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.Банк.ИдентификационныйНомер КАК БанкПосредникБИН_ИИН,
	|ВЫБОР
	|	КОГДА ЕСТЬNULL(ЦС_ИсторияБанкКлиент.ДокументСсылка, 0) = 0
	|		ТОГДА 0
	|	ИНАЧЕ 1
	|КОНЕЦ КАК УжеВыгружен
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦС_ИсторияБанкКлиент КАК ЦС_ИсторияБанкКлиент
	|	ПО ПлатежноеПоручениеИсходящее.Ссылка = ЦС_ИсторияБанкКлиент.ДокументСсылка
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Дата >= &ДатаНачало
	|	И ПлатежноеПоручениеИсходящее.Дата <= &ДатаОкончание
	|	И ПлатежноеПоручениеИсходящее.ПометкаУдаления = &Булево_Ложь
	|	И ПлатежноеПоручениеИсходящее.Организация = &парамОрганизация 
	|	И ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель = &парамСтруктурноеПодразделение
	|	И (ПлатежноеПоручениеИсходящее.СчетОрганизации = &Счет1";
	
	МассивСчетов = Новый Массив;
	
	Для каждого СтрокаСчетов из ТаблицаСчетов Цикл
		Если СтрокаСчетов.Пометка Тогда
			МассивСчетов.Добавить(СтрокаСчетов.Счет);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для СчСчетов = 2 По МассивСчетов.Количество() Цикл
		ТекстЗапроса = ТекстЗапроса + "
	               |	ИЛИ ПлатежноеПоручениеИсходящее.СчетОрганизации = &Счет" + СчСчетов;
		
	КонецЦикла;
		                    
	ТекстЗапроса = ТекстЗапроса + ")";
		
	СчСчетов = 1;
	ЗапросПоДокументам = Новый Запрос(ТекстЗапроса);
	ЗапросПоДокументам.УстановитьПараметр("ДатаНачало", НачалоДня(НачПериода));
	ЗапросПоДокументам.УстановитьПараметр("ДатаОкончание", КонецДня(КонПериода));
	ЗапросПоДокументам.УстановитьПараметр("Булево_Ложь", Ложь);
	ЗапросПоДокументам.УстановитьПараметр("Пенс",Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов);
	ЗапросПоДокументам.УстановитьПараметр("Соц",Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений);
	ЗапросПоДокументам.УстановитьПараметр("ЗП",Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты);
	ЗапросПоДокументам.УстановитьПараметр("ИЛ",Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам);
	ЗапросПоДокументам.УстановитьПараметр("Подотчет",Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику);
	ЗапросПоДокументам.УстановитьПараметр("парамПустаяСтрока","");
	ЗапросПоДокументам.УстановитьПараметр("парамСтруктурноеПодразделение", СтруктурноеПодразделение);
	ЗапросПоДокументам.УстановитьПараметр("парамОрганизация", Организация);
	
	Для каждого ЭлементМассива из МассивСчетов Цикл
	ЗапросПоДокументам.УстановитьПараметр("Счет" + СчСчетов, ЭлементМассива);
		СчСчетов = СчСчетов + 1;
		
	КонецЦикла;
	
	ВыборкаДляЭкспорта = ЗапросПоДокументам.Выполнить().Выбрать();
	
	СформироватьСоответствиеНеПустыхПриЭкспорте();
	
	Пока ВыборкаДляЭкспорта.Следующий() Цикл
		
		СтрЭкс = ДокументыНаЭкспорт.Добавить();
		
		ЗаполнитьСтрокуЭкспорта(СтрЭкс, ВыборкаДляЭкспорта, ДокументыНаЭкспорт.Колонки);
		
		//ЦС
		Если ВыборкаДляЭкспорта.УжеВыгружен = 1 Тогда
			СтрЭкс.Выгружать = Ложь;
		Иначе
			СтрЭкс.Выгружать = ПустаяСтрока(СтрЭкс.ОписаниеОшибок);
		КонецЕсли;
	    //ЦС
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта, КоллекцияСвойств) //+
	
	АктерПлательщика = ОпределитьАктераПлательщика(ВыборкаДляЭкспорта.Ссылка);
	АктерПолучателя  = ОпределитьАктераПолучателя (ВыборкаДляЭкспорта.Ссылка);
	
	Для каждого СвойстоЭкспорта из КоллекцияСвойств Цикл
		ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта, СвойстоЭкспорта.Имя, АктерПлательщика, АктерПолучателя);
		
	КонецЦикла;
	
	Для каждого СвойстоЭкспорта из КоллекцияСвойств Цикл
		ПроверитьНаПустоеЗначениеЭкспорта(СтрокаЭкспорта, СвойстоЭкспорта.Имя, СвойстоЭкспорта.Заголовок);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта, ИмяСвойства, Плательщик, Получатель) //+
	
	//Названия колонок в ДокументыНаЭкспорт

	Если ИмяСвойства = "ДатаДокумента" Тогда      		
		СтрокаЭкспорта.ДатаДокумента = ВыборкаДляЭкспорта.Дата;
		
	ИначеЕсли ИмяСвойства = "НомерДокумента" Тогда
		СтрокаЭкспорта.НомерДокумента = ВыборкаДляЭкспорта.Номер;
		
	ИначеЕсли ИмяСвойства = "Операция" Тогда
		СтрокаЭкспорта.Операция = Строка(ВыборкаДляЭкспорта.ВидОперации);
		
	ИначеЕсли ИмяСвойства = "СчетОрганизации" Тогда
		СтрокаЭкспорта.СчетОрганизации = ВыборкаДляЭкспорта.ОрганизацияСчет;
		СтрокаЭкспорта.НомерСчетаОрганизации = ВыборкаДляЭкспорта.ОрганизацияИИК;
		
	ИначеЕсли ИмяСвойства = "Сумма" Тогда
		СтрокаЭкспорта.Сумма = Формат(ВыборкаДляЭкспорта.СуммаДокумента, "ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0");
		СтрокаЭкспорта.СуммаДокумента = ВыборкаДляЭкспорта.СуммаДокумента;
		
	ИначеЕсли ИмяСвойства = "ЭлементКонтрагент" Тогда
		СтрокаЭкспорта.ЭлементКонтрагент = ВыборкаДляЭкспорта.ЭлементКонтрагент;
		
	ИначеЕсли ИмяСвойства = "Контрагент" Тогда
		СтрокаЭкспорта.Контрагент = ВыборкаДляЭкспорта.Контрагент;
		
	ИначеЕсли ИмяСвойства = "СчетКонтрагента" Тогда
		СтрокаЭкспорта.СчетКонтрагента = ВыборкаДляЭкспорта.КонтрагентСчет;
		СтрокаЭкспорта.НомерСчетаКонтрагента = ВыборкаДляЭкспорта.КонтрагентИИК;
		
	ИначеЕсли ИмяСвойства = "ПлательщикНаименование" Тогда
//		СтрокаЭкспорта.ПлательщикНаименование = ВыборкаДляЭкспорта[Плательщик];
		ТекстПлательщика = СокрЛП(ВыборкаДляЭкспорта["ТекстПлательщика"]);
		Если ПустаяСтрока(ТекстПлательщика) Тогда
			СтрокаЭкспорта.ПлательщикНаименование = ВыборкаДляЭкспорта[Плательщик];
		Иначе
			СтрокаЭкспорта.ПлательщикНаименование = ТекстПлательщика;
		КонецЕсли;
		
	ИначеЕсли ИмяСвойства = "ПлательщикРНН" Тогда
//		СтрокаЭкспорта.ПлательщикРНН = ВыборкаДляЭкспорта[Плательщик + "РНН"];
		РННПлательщика = СокрЛП(ВыборкаДляЭкспорта["РННПлательщика"]);
		Если ПустаяСтрока(РННПлательщика) Тогда
			СтрокаЭкспорта.ПлательщикРНН = ВыборкаДляЭкспорта[Плательщик + "РНН"];
		Иначе
			СтрокаЭкспорта.ПлательщикРНН = РННПлательщика;
		КонецЕсли;
		
	ИначеЕсли ИмяСвойства = "ПлательщикКБЕ" Тогда
		СтрокаЭкспорта.ПлательщикКБЕ = ВыборкаДляЭкспорта[Плательщик + "КБЕ"];
		
	ИначеЕсли ИмяСвойства = "ПлательщикИИК" Тогда
		СтрокаЭкспорта.ПлательщикИИК = ВыборкаДляЭкспорта[Плательщик + "ИИК"];
		
	///////////////	
	ИначеЕсли ИмяСвойства = "ПлательщикБИН_ИИН" Тогда
		СтрокаЭкспорта.ПлательщикБИН_ИИН = ВыборкаДляЭкспорта[Плательщик + "БИН_ИИН"];
	//////////////
		
	ИначеЕсли ИмяСвойства = "ПлательщикБанкНаименование" Тогда
		СтрокаЭкспорта.ПлательщикБанкНаименование = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		
	ИначеЕсли ИмяСвойства = "ПлательщикБанкРНН" Тогда
		СтрокаЭкспорта.ПлательщикБанкРНН = ВыборкаДляЭкспорта[Плательщик + "БанкРНН"];
		
	///////////////	
	ИначеЕсли ИмяСвойства = "ПлательщикБанкБИН_ИИН" Тогда
		СтрокаЭкспорта.ПлательщикБанкБИН_ИИН = ВыборкаДляЭкспорта[Плательщик + "БанкБИН_ИИН"];
	///////////////
		
	ИначеЕсли ИмяСвойства = "ПлательщикБанкБИК" Тогда
		СтрокаЭкспорта.ПлательщикБанкБИК = ВыборкаДляЭкспорта[Плательщик + "БанкБИК"];
		
	ИначеЕсли ИмяСвойства = "ПлательщикБанкИИК" Тогда
		СтрокаЭкспорта.ПлательщикБанкИИК = ВыборкаДляЭкспорта[Плательщик + "БанкИИК"];
		             		   	
	ИначеЕсли ИмяСвойства = "ПолучательИИК" Тогда
		СтрокаЭкспорта.ПолучательИИК = ВыборкаДляЭкспорта[Получатель + "ИИК"];
		
	/////////////		
	ИначеЕсли ИмяСвойства = "ПолучательБИН_ИИН" Тогда
		СтрокаЭкспорта.ПолучательБИН_ИИН = ВыборкаДляЭкспорта[Получатель + "БИН_ИИН"];
	////////////
		
	ИначеЕсли ИмяСвойства = "ПолучательНаименование" Тогда 
		
		ТекстПолучателя = "";
		Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			ТекстПолучателя = ВыборкаДляЭкспорта.Организация;
		КонецЕсли;
				
		Если ПустаяСтрока(ТекстПолучателя) Тогда
//			ТекстПолучателя = ВыборкаДляЭкспорта[Получатель];
			ТекстПолучателя = СокрЛП(ВыборкаДляЭкспорта["ТекстПолучателя"]);
			Если ПустаяСтрока(ТекстПолучателя) Тогда
				ТекстПолучателя = ВыборкаДляЭкспорта[Получатель];
			КонецЕсли;
		КонецЕсли;
				
		СтрокаЭкспорта.ПолучательНаименование  = ТекстПолучателя;
		
		
	ИначеЕсли ИмяСвойства = "ПолучательРНН" Тогда
		
		Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			Значение = ВыборкаДляЭкспорта.ОрганизацияРНН;
		Иначе
//			Значение = ВыборкаДляЭкспорта[Получатель + "РНН"];
			Значение = СокрЛП(ВыборкаДляЭкспорта["РННПолучателя"]);
			Если ПустаяСтрока(Значение) Тогда
				Значение = ВыборкаДляЭкспорта[Получатель + "РНН"];
			КонецЕсли;
		КонецЕсли;
				
		СтрокаЭкспорта.ПолучательРНН = Значение;
		
	ИначеЕсли ИмяСвойства = "ПолучательКБЕ" Тогда
		
		Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			Значение = ВыборкаДляЭкспорта.ОрганизацияКБЕ;
		Иначе
			Значение = ВыборкаДляЭкспорта[Получатель + "КБЕ"];
		КонецЕсли;
				
		СтрокаЭкспорта.ПолучательКБЕ = Значение;
		
	ИначеЕсли ИмяСвойства = "ПолучательБанкНаименование" Тогда
		СтрокаЭкспорта.ПолучательБанкНаименование = ВыборкаДляЭкспорта[Получатель + "Банк"]; 
		
	ИначеЕсли ИмяСвойства = "ПолучательБанкРНН" Тогда
		СтрокаЭкспорта.ПолучательБанкРНН = ВыборкаДляЭкспорта[Получатель + "БанкРНН"];
		
	///////////////	
	ИначеЕсли ИмяСвойства = "ПолучательБанкБИН_ИИН" Тогда
		СтрокаЭкспорта.ПолучательБанкБИН_ИИН = ВыборкаДляЭкспорта[Плательщик + "БанкБИН_ИИН"];
	///////////////
		
	ИначеЕсли ИмяСвойства = "ПолучательБанкБИК" Тогда
		СтрокаЭкспорта.ПолучательБанкБИК = ВыборкаДляЭкспорта[Получатель + "БанкБИК"];
		
	ИначеЕсли ИмяСвойства = "ПолучательБанкИИК" Тогда
		СтрокаЭкспорта.ПолучательБанкИИК = ВыборкаДляЭкспорта[Получатель + "БанкИИК"];
		            		
	ИначеЕсли ИмяСвойства = "БанкПосредникНаименование" Тогда
		СтрокаЭкспорта.БанкПосредникНаименование = ВыборкаДляЭкспорта.БанкПосредник; 
		
	ИначеЕсли ИмяСвойства = "БанкПосредникРНН" Тогда
		СтрокаЭкспорта.БанкПосредникРНН = ВыборкаДляЭкспорта.БанкПосредникРНН; 
		
	///////////////	
	ИначеЕсли ИмяСвойства = "БанкПосредникБИН_ИИН" Тогда
		СтрокаЭкспорта.БанкПосредникБИН_ИИН = ВыборкаДляЭкспорта.БанкПосредникБИН_ИИН;
	///////////////
		
	ИначеЕсли ИмяСвойства = "БанкПосредникБИК" Тогда
		СтрокаЭкспорта.БанкПосредникБИК = ВыборкаДляЭкспорта.БанкПосредникБИК; 
		
	ИначеЕсли ИмяСвойства = "БанкПосредникИИК" Тогда
		СтрокаЭкспорта.БанкПосредникИИК = ВыборкаДляЭкспорта.БанкПосредникИИК; 
		
		
	ИначеЕсли ИмяСвойства = "ГЦВПРНН" Тогда
		СтрокаЭкспорта.ГЦВПРНН = ВыборкаДляЭкспорта.БанкПосредникРНН; 
		
	ИначеЕсли ИмяСвойства = "ГЦВПИИК" Тогда
		СтрокаЭкспорта.ГЦВПИИК = ВыборкаДляЭкспорта.БанкПосредникНомерСчета; 
		
	ИначеЕсли ИмяСвойства = "ГЦВПБанкНаименование" Тогда
		СтрокаЭкспорта.ГЦВПБанкНаименование = ВыборкаДляЭкспорта.БанкПосредникБанкНаименование; 
		
	ИначеЕсли ИмяСвойства = "ГЦВПБанкБИК" Тогда
		СтрокаЭкспорта.ГЦВПБанкБИК = ВыборкаДляЭкспорта.БанкПосредникБИК; 		
		
		
	ИначеЕсли ИмяСвойства = "КодБюджетнойКлассификации" Тогда
		Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
			 СтрокаЭкспорта.КодБюджетнойКлассификации = ВыборкаДляЭкспорта.КодБК;
		 КонецЕсли;
		               		
	ИначеЕсли ИмяСвойства = "НазначениеПлатежа" Тогда 
		СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(СтрЗаменить(СтрЗаменить(ВыборкаДляЭкспорта.НазначениеПлатежа, Символы.ПС, " "), Символы.ВК, ""), Символы.ПФ, " ");
	
	ИначеЕсли ИмяСвойства = "КодНазначенияПлатежа" Тогда
		 СтрокаЭкспорта.КодНазначенияПлатежа = ВыборкаДляЭкспорта.КодНазначенияПлатежа;
		 
	ИначеЕсли ИмяСвойства = "ДатаПолученияТовара" Тогда
		 СтрокаЭкспорта.ДатаПолученияТовара = ВыборкаДляЭкспорта.ДатаПолученияТовара;
		 
	ИначеЕсли ИмяСвойства = "ДатаВалютирования" Тогда
		 СтрокаЭкспорта.ДатаВалютирования = ВыборкаДляЭкспорта.ДатаВалютирования;
		 
	ИначеЕсли ИмяСвойства = "СоциальныеОтчисления" Тогда
		СтрокаЭкспорта.СоциальныеОтчисления = ВыборкаДляЭкспорта.СоциальныеОтчисления;
				
	ИначеЕсли ИмяСвойства = "ПенсионныеОтчисления" Тогда
		СтрокаЭкспорта.ПенсионныеОтчисления = ВыборкаДляЭкспорта.ПенсионныеОтчисления;
			
	ИначеЕсли ИмяСвойства = "ПеречислениеНаКартСчета" Тогда
		СтрокаЭкспорта.ПеречислениеНаКартСчета = ВыборкаДляЭкспорта.ПеречислениеНаКартСчета;
			
	ИначеЕсли ИмяСвойства = "ПеречислениеПоИЛ" Тогда
		СтрокаЭкспорта.ПеречислениеПоИЛ = ВыборкаДляЭкспорта.ПеречислениеПоИЛ;
		
	ИначеЕсли ИмяСвойства = "ПеречислениеПодотчетнику" Тогда
		СтрокаЭкспорта.ПеречислениеПодотчетнику = ВыборкаДляЭкспорта.ПеречислениеПодотчетнику;
			
	ИначеЕсли ИмяСвойства = "Документ" Тогда
		СтрокаЭкспорта.Документ = ВыборкаДляЭкспорта.Ссылка;
		
	ИначеЕсли ИмяСвойства = "Проведен" Тогда
		СтрокаЭкспорта.Проведен = ВыборкаДляЭкспорта.Проведен;
		
	ИначеЕсли ИмяСвойства = "ТипДокумента" Тогда
		
		Если ТипЗнч(ВыборкаДляЭкспорта.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
			
			ПеречислениеНалога          = (ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога);
			ТипДокумента = ?(ПеречислениеНалога, 1, 0) * 4 + 2 + 1 + 1;
			
		Иначе
			ТипДокумента = 0;
			
		КонецЕсли;
		
		СтрокаЭкспорта.ТипДокумента = ТипДокумента;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаПустоеЗначениеЭкспорта(СтрокаЭкспорта, ИмяСвойства, ПредставлениеСвойства)
	
	Если Экспорт_НеПустые[СтрокаЭкспорта.ТипДокумента][ИмяСвойства] = Истина Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта[ИмяСвойства]) Тогда
			Если ИмяСвойства = "ПолучательБанкРНН" Тогда
				Возврат;
			КонецЕсли;
			ДобавитьЗамечание(СтрокаЭкспорта, 3, "Не заполнено """ + ПредставлениеСвойства + """!");
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


////////////// ВЫГРУЗКА //////////////////////////////////////////////////

Функция ВыделитьСлово(ИсходнаяСтрока, СчетчикВызова) //+
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если (ПозицияПослПробела = 0)
		 Или (СчетчикВызова >= 3) Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	
	Возврат ВыделенноеСлово;
	
КонецФункции

Функция ПолучитьСекциюДокумент(СтруктураДокумента, КоллекцияРеквизитов) //+
	
	Буфер = "";
	
	ДобавитьВСтроку(Буфер, "СекцияДокумент=" + ПолучитьТегСекции(СтруктураДокумента.Документ));     
	ПенсионныеОтчисления_Есть = ПривестиЗначение(СтруктураДокумента[КоллекцияРеквизитов.ПенсионныеОтчисления.Имя]);
	СоциальныеОтчисления_Есть = ПривестиЗначение(СтруктураДокумента[КоллекцияРеквизитов.СоциальныеОтчисления.Имя]);
	ПеречислениеНаКартСчета_Есть = ПривестиЗначение(СтруктураДокумента[КоллекцияРеквизитов.ПеречислениеНаКартСчета.Имя]);
	ПеречислениеПоИЛ_Есть = ПривестиЗначение(СтруктураДокумента[КоллекцияРеквизитов.ПеречислениеПоИЛ.Имя]);
	ПеречислениеПодотчетнику_Есть = ПривестиЗначение(СтруктураДокумента[КоллекцияРеквизитов.ПеречислениеПодотчетнику.Имя]);
	
	
	//Получим настройки проверки заполненности реквизитов
	ПроверятьРНН 		= ПолучитьНастройкуЗаполнения("ПроверятьРНН");
	ПроверятьБИН_ИИН 	= ПолучитьНастройкуЗаполнения("ПроверятьБИН_ИИН");
    	
//	Если ПенсионныеОтчисления_Есть="1" И СоциальныеОтчисления_Есть="0" Тогда 	
	Если ПенсионныеОтчисления_Есть="1" Тогда 	
		Для каждого ВыгружаемыйРеквизит из КоллекцияРеквизитов Цикл
            Если Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях[ВыгружаемыйРеквизит.Имя] = Истина Тогда
			Значение = ПривестиЗначение(СтруктураДокумента[ВыгружаемыйРеквизит.Имя]);
				Если НЕ ПустаяСтрока(Значение) Тогда
					ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Имя + "=" + Значение);
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;
		ДобавитьВСтроку(Буфер, "СПИСОКСОТРУДНИКОВ");
		Для каждого ВыгружаемыйРеквизит из КоллекцияРеквизитов Цикл
            Если Экспорт_ВыгружаемыеГЦВП[ВыгружаемыйРеквизит.Имя] = Истина Тогда
			Значение = ПривестиЗначение(СтруктураДокумента[ВыгружаемыйРеквизит.Имя]);
				Если НЕ ПустаяСтрока(Значение) Тогда
					ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Имя + "=" + Значение);
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;		
		
		Запрос = Новый Запрос;
		Запрос.Текст =    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                  |	ОПВПоСотрудникам.ФизЛицоНаименование КАК Сотрудник,
		                  |	ОПВПоСотрудникам.Фамилия КАК РегистрацияФамилия,
		                  |	ОПВПоСотрудникам.Имя КАК РегистрацияИмя,
		                  |	ОПВПоСотрудникам.Отчество КАК РегистрацияОтчество,
		                  |	ОПВПоСотрудникам.ФизЛицоРНН КАК СотрудникРНН,
		                  |	ОПВПоСотрудникам.ФизЛицоДатаРождения КАК СотрудникДатаРождения,
		                  |	ОПВПоСотрудникам.Сумма,
		                  |	ОПВПеречислениеВФонды.ПериодРегистрации КАК Период,
		                  |	ОПВПоСотрудникам.БИН_ИИН КАК СотрудникБИН_ИИН
		                  |ИЗ
		                  |	(ВЫБРАТЬ
		                  |		ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка КАК Ссылка,
		                  |		ДанныеФизЛиц.Наименование КАК ФизЛицоНаименование,
		                  |		ДанныеФизЛиц.Ссылка КАК ФизЛицо,
		                  |		ФИОФизЛиц.Фамилия КАК Фамилия,
		                  |		ФИОФизЛиц.Имя КАК Имя,
		                  |		ФИОФизЛиц.Отчество КАК Отчество,
		                  |		ДанныеФизЛиц.РНН КАК ФизЛицоРНН,
		                  |		ДанныеФизЛиц.ДатаРождения КАК ФизЛицоДатаРождения,
		                  |		ОПВПеречислениеВФондыПенсионныеВзносы.Сумма КАК Сумма,
		                  |		ДанныеФизЛиц.ИдентификационныйКодЛичности КАК БИН_ИИН
		                  |	ИЗ
		                  |		Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК ОПВПеречислениеВФондыПенсионныеВзносы
		                  |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ДанныеФизЛиц
		                  |			ПО (ВЫБОР
		                  |					КОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо ССЫЛКА Справочник.Контрагенты
		                  |						ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ФизЛицо
		                  |					ИНАЧЕ ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо
		                  |				КОНЕЦ = ДанныеФизЛиц.Ссылка)
		                  |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛиц
		                  |			ПО (ВЫБОР
		                  |					КОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо ССЫЛКА Справочник.Контрагенты
		                  |						ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ФизЛицо
		                  |					ИНАЧЕ ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо
		                  |				КОНЕЦ = ФИОФизЛиц.ФизЛицо)) КАК ОПВПоСотрудникам
		                  |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОПВПеречислениеВФонды КАК ОПВПеречислениеВФонды
		                  |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
		                  |			ПО ОПВПеречислениеВФонды.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ.Ссылка
		                  |		ПО ОПВПоСотрудникам.Ссылка = ОПВПеречислениеВФонды.Ссылка
		                  |ГДЕ
		                  |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка = &Документ";
					   
		Запрос.УстановитьПараметр("Документ",СтруктураДокумента.Документ); 
		Запрос.УстановитьПараметр("парамДата", СтруктураДокумента.Документ.Дата);

		ВыборкаСотрудников = Запрос.Выполнить().Выбрать();
		Пока ВыборкаСотрудников.Следующий() Цикл
			Если НЕ ПустаяСтрока(ВыборкаСотрудников.Сотрудник) Тогда
				ДобавитьВСтроку(Буфер, "СОТРУДНИК="+ВыборкаСотрудников.Сотрудник);
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.РегистрацияФамилия) Тогда 
					ДобавитьВСтроку(Буфер, "Регистрация="+СокрЛП(ВыборкаСотрудников.РегистрацияФамилия)+" "+СокрЛП(ВыборкаСотрудников.РегистрацияИмя)+" "+СокрЛП(ВыборкаСотрудников.РегистрацияОтчество));
				Иначе
					ДобавитьВСтроку(Буфер, "Регистрация="+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникРНН) Тогда
					ДобавитьВСтроку(Буфер, "СотрудникРНН="+ВыборкаСотрудников.СотрудникРНН);
				ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН
					Сообщить("Не заполнен РНН сотрудника:"+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				
				///////////////////
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникБИН_ИИН) Тогда
					ДобавитьВСтроку(Буфер, "СотрудникБИН_ИИН="+ВыборкаСотрудников.СотрудникБИН_ИИН);
				ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН
					Сообщить("Не заполнен ИИН сотрудника:"+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				////////////////////
				
				Если НЕ ВыборкаСотрудников.СотрудникДатаРождения=ПустаяДата Тогда
					ДобавитьВСтроку(Буфер, "СотрудникДатаРождения="+Формат(ВыборкаСотрудников.СотрудникДатаРождения, "ДФ=dd.MM.yyyy"));
				Иначе Сообщить("Не заполнена дата рождения сотрудника:"+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				Если НЕ ВыборкаСотрудников.Период=ПустаяДата Тогда
					ДобавитьВСтроку(Буфер, "Период=" + НРег(Формат(ВыборкаСотрудников.Период, "ДФ='ММгггг'")));
				КонецЕсли;
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.Сумма) Тогда
					ДобавитьВСтроку(Буфер, "Сумма="+Формат(ВыборкаСотрудников.Сумма, "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2"));
				Иначе Сообщить("Не заполнена сумма пенсионных перечислений сотрудника:"+ВыборкаСотрудников.Сотрудник+" за "+НРег(Формат(ВыборкаСотрудников.Период, "ДФ='ММММ гггг'"))+"г.");
				КонецЕсли;
				ДобавитьВСтроку(Буфер, "КОНЕЦСОТРУДНИК");
			КонецЕсли;
		КонецЦикла;
		ДобавитьВСтроку(Буфер, "КОНЕЦСПИСКАСОТРУДНИКОВ");
		
//	ИначеЕсли ПенсионныеОтчисления_Есть="0" И СоциальныеОтчисления_Есть="1" Тогда 	
	ИначеЕсли СоциальныеОтчисления_Есть="1" Тогда 	
		Для каждого ВыгружаемыйРеквизит из КоллекцияРеквизитов Цикл
			Если Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях[ВыгружаемыйРеквизит.Имя] = Истина Тогда
				Значение = ПривестиЗначение(СтруктураДокумента[ВыгружаемыйРеквизит.Имя]);
				Если НЕ ПустаяСтрока(Значение) Тогда
					ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Имя + "=" + Значение);
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;
		ДобавитьВСтроку(Буфер, "СПИСОКСОТРУДНИКОВ");
		Для каждого ВыгружаемыйРеквизит из КоллекцияРеквизитов Цикл
            Если Экспорт_ВыгружаемыеГЦВП[ВыгружаемыйРеквизит.Имя] = Истина Тогда
			Значение = ПривестиЗначение(СтруктураДокумента[ВыгружаемыйРеквизит.Имя]);
				Если НЕ ПустаяСтрока(Значение) Тогда
					ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Имя + "=" + Значение);
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СОПоСотрудникам.ФизЛицоНаименование КАК Сотрудник,
		               |	СОПоСотрудникам.Фамилия КАК РегистрацияФамилия,
		               |	СОПоСотрудникам.Имя КАК РегистрацияИмя,
		               |	СОПоСотрудникам.Отчество КАК РегистрацияОтчество,
		               |	СОПоСотрудникам.ФизЛицоРНН КАК СотрудникРНН,
		               |	СОПоСотрудникам.ФизЛицоСИК КАК СотрудникСИК,
		               |	СОПоСотрудникам.ФизЛицоДатаРождения КАК СотрудникДатаРождения,
		               |	СОПоСотрудникам.Сумма,
		               |	СОПеречислениеВФонды.ПериодРегистрации КАК Период,
		               |	СОПоСотрудникам.БИН_ИИН КАК СотрудникБИН_ИИН
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		СОПеречислениеВФондыСоциальныеОтчисления.Ссылка КАК Ссылка,
		               |		СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.Наименование КАК ФизЛицоНаименование,
		               |		ФИОФизЛицПриПрисвоенииСИК.Фамилия КАК Фамилия,
		               |		ФИОФизЛицПриПрисвоенииСИК.Имя КАК Имя,
		               |		ФИОФизЛицПриПрисвоенииСИК.Отчество КАК Отчество,
		               |		СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.РНН КАК ФизЛицоРНН,
		               |		СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.СИК КАК ФизЛицоСИК,
		               |		ВЫБОР
		               |			КОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо ССЫЛКА Справочник.Контрагенты
		               |				ТОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ФизЛицо.ДатаРождения
		               |			ИНАЧЕ СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ДатаРождения
		               |		КОНЕЦ КАК ФизЛицоДатаРождения,
		               |		СОПеречислениеВФондыСоциальныеОтчисления.Сумма КАК Сумма,
		               |		СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ИдентификационныйКодЛичности КАК БИН_ИИН
		               |	ИЗ
		               |		Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК СОПеречислениеВФондыСоциальныеОтчисления
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛицПриПрисвоенииСИК КАК ФИОФизЛицПриПрисвоенииСИК
		               |			ПО (ВЫБОР
		               |					КОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо ССЫЛКА Справочник.Контрагенты
		               |						ТОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ФизЛицо = ФИОФизЛицПриПрисвоенииСИК.ФизЛицо
		               |					ИНАЧЕ СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо = ФИОФизЛицПриПрисвоенииСИК.ФизЛицо
		               |				КОНЕЦ)) КАК СОПоСотрудникам					   
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СОПеречислениеВФонды КАК СОПеречислениеВФонды
		               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений
		               |			ПО СОПеречислениеВФонды.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ.Ссылка
		               |		ПО СОПоСотрудникам.Ссылка = СОПеречислениеВФонды.Ссылка
		               |ГДЕ
		               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка = &Документ";
		Запрос.УстановитьПараметр("Документ",СтруктураДокумента.Документ); 
		ВыборкаСотрудников = Запрос.Выполнить().Выбрать();
		Пока ВыборкаСотрудников.Следующий() Цикл
			Если НЕ ПустаяСтрока(ВыборкаСотрудников.Сотрудник) Тогда
				ДобавитьВСтроку(Буфер, "СОТРУДНИК="+ВыборкаСотрудников.Сотрудник);
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.РегистрацияФамилия) Тогда 
					ДобавитьВСтроку(Буфер, "Регистрация="+СокрЛП(ВыборкаСотрудников.РегистрацияФамилия)+" "+СокрЛП(ВыборкаСотрудников.РегистрацияИмя)+" "+СокрЛП(ВыборкаСотрудников.РегистрацияОтчество));
				Иначе
					ДобавитьВСтроку(Буфер, "Регистрация="+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникРНН) Тогда
					ДобавитьВСтроку(Буфер, "СотрудникРНН="+ВыборкаСотрудников.СотрудникРНН);
				ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН
					Сообщить("Не заполнен РНН сотрудника:"+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				
				///////////////////
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникБИН_ИИН) Тогда
					ДобавитьВСтроку(Буфер, "СотрудникБИН_ИИН="+ВыборкаСотрудников.СотрудникБИН_ИИН);
				ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН
					Сообщить("Не заполнен ИИН сотрудника:"+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				////////////////////
				
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникСИК) Тогда
					ДобавитьВСтроку(Буфер, "СотрудникСИК="+ВыборкаСотрудников.СотрудникСИК);
				ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН
					Сообщить("Не заполнен СИК сотрудника:"+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				Если НЕ ВыборкаСотрудников.СотрудникДатаРождения=ПустаяДата Тогда
					ДобавитьВСтроку(Буфер, "СотрудникДатаРождения="+Формат(ВыборкаСотрудников.СотрудникДатаРождения, "ДФ=dd.MM.yyyy"));
				Иначе Сообщить("Не заполнена дата рождения сотрудника:"+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				Если НЕ ВыборкаСотрудников.Период=ПустаяДата Тогда
					ДобавитьВСтроку(Буфер, "Период=" + НРег(Формат(ВыборкаСотрудников.Период, "ДФ='ММгггг'")));
				КонецЕсли;
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.Сумма) Тогда
					ДобавитьВСтроку(Буфер, "Сумма="+Формат(ВыборкаСотрудников.Сумма, "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2"));
				Иначе Сообщить("Не заполнена сумма социальных отчислений сотрудника:"+ВыборкаСотрудников.Сотрудник+" за "+НРег(Формат(ВыборкаСотрудников.Период, "ДФ='ММММ гггг'"))+"г.");
				КонецЕсли;
				ДобавитьВСтроку(Буфер, "КОНЕЦСОТРУДНИК");
			КонецЕсли;
		КонецЦикла;
		ДобавитьВСтроку(Буфер, "КОНЕЦСПИСКАСОТРУДНИКОВ");
		
//	ИначеЕсли ПеречислениеНаКартСчета_Есть="1" И ПенсионныеОтчисления_Есть="0" И СоциальныеОтчисления_Есть="0" Тогда 	
	ИначеЕсли ПеречислениеНаКартСчета_Есть="1" Тогда 	
		Для каждого ВыгружаемыйРеквизит из КоллекцияРеквизитов Цикл
			Если Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях[ВыгружаемыйРеквизит.Имя] = Истина Тогда
			Значение = ПривестиЗначение(СтруктураДокумента[ВыгружаемыйРеквизит.Имя]);
				Если НЕ ПустаяСтрока(Значение) Тогда
					ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Имя + "=" + Значение);
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;
		ДобавитьВСтроку(Буфер, "СПИСОКСОТРУДНИКОВ");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВЫБОР
		               |		КОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.НеЯвляетсяВладельцемСчета
		               |			ТОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.РНН
		               |		ИНАЧЕ ЗарплатаКВыплатеОрганизаций.ФизЛицо.РНН
		               |	КОНЕЦ КАК СотрудникРНН,
		               |	ЗарплатаКВыплатеОрганизаций.НомерКартСчета.НомерСчета КАК СотрудникКартСчет,
		               |	ВЫБОР
		               |		КОГДА ЗарплатаКВыплатеОрганизаций.Сумма ЕСТЬ NULL 
		               |			ТОГДА 0
		               |		ИНАЧЕ ЗарплатаКВыплатеОрганизаций.Сумма
		               |	КОНЕЦ КАК Сумма,
		               |	ВЫБОР
		               |		КОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.НеЯвляетсяВладельцемСчета
		               |			ТОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.Фамилия
		               |		ИНАЧЕ ФИОФизЛиц.Фамилия
		               |	КОНЕЦ КАК Фамилия,
		               |	ВЫБОР
		               |		КОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.НеЯвляетсяВладельцемСчета
		               |			ТОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.Имя
		               |		ИНАЧЕ ФИОФизЛиц.Имя
		               |	КОНЕЦ КАК Имя,
		               |	ВЫБОР
		               |		КОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.НеЯвляетсяВладельцемСчета
		               |			ТОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.Отчество
		               |		ИНАЧЕ ФИОФизЛиц.Отчество
		               |	КОНЕЦ КАК Отчество,
		               |	ЗарплатаКВыплатеОрганизаций.ФизЛицо.Наименование КАК Сотрудник,
		               |	ВЫБОР
		               |		КОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.НеЯвляетсяВладельцемСчета
		               |			ТОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.ИдентификационныйКодЛичности
		               |		ИНАЧЕ ЗарплатаКВыплатеОрганизаций.ФизЛицо.ИдентификационныйКодЛичности
		               |	КОНЕЦ КАК СотрудникБИН_ИИН
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ЗарплатаКВыплатеОрганизацийЗарплата.ФизЛицо КАК ФизЛицо,
		               |		ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета КАК НомерКартСчета,
		               |		СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК Сумма
		               |	ИЗ
		               |		(ВЫБРАТЬ
		               |			ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК ФизЛицо,
		               |			ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета КАК НомерКартСчета,
		               |			ЗарплатаКВыплатеОрганизацийЗарплата.СуммаКВыплате КАК Сумма
		               |		ИЗ
		               |			Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		               |		ГДЕ
		               |			ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка В
		               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |						ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость.Ссылка
		               |					ИЗ
		               |						Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		               |					ГДЕ
		               |						ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка = &парамДокументСсылка)) КАК ЗарплатаКВыплатеОрганизацийЗарплата
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		ЗарплатаКВыплатеОрганизацийЗарплата.ФизЛицо,
		               |		ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета) КАК ЗарплатаКВыплатеОрганизаций
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛиц
		               |		ПО (ФИОФизЛиц.ФизЛицо = ЗарплатаКВыплатеОрганизаций.ФизЛицо)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
		               |		ПО (ПлатежноеПоручениеИсходящее.Ссылка = &парамДокументСсылка)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Фамилия,
		               |	Имя,
		               |	Отчество";
		Запрос.УстановитьПараметр("парамДокументСсылка",СтруктураДокумента.Документ); 
		Запрос.УстановитьПараметр("парамДата", СтруктураДокумента.Документ.Дата);
		ВыборкаСотрудников = Запрос.Выполнить().Выбрать();
		ОбщаяСумма = 0;
		Пока ВыборкаСотрудников.Следующий() Цикл
			Если НЕ ПустаяСтрока(ВыборкаСотрудников.Фамилия) Тогда
				Если ПустаяСтрока(ВыборкаСотрудников.СотрудникКартСчет) Тогда
					Сообщить("Не указан номер карт-счета сотрудника:"+СокрЛП(ВыборкаСотрудников.Фамилия) + " " + СокрЛП(ВыборкаСотрудников.Имя) + " " + СокрЛП(ВыборкаСотрудников.Отчество));
				КонецЕсли;
				ДобавитьВСтроку(Буфер, "СОТРУДНИК="+СокрЛП(ВыборкаСотрудников.Фамилия) + " " + СокрЛП(ВыборкаСотрудников.Имя) + " " + СокрЛП(ВыборкаСотрудников.Отчество));
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникРНН) Тогда
					ДобавитьВСтроку(Буфер, "СотрудникРНН="+ВыборкаСотрудников.СотрудникРНН);
				ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН
					Сообщить("Не заполнен РНН сотрудника:"+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;          				
				
				///////////////////
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникБИН_ИИН) Тогда
					ДобавитьВСтроку(Буфер, "СотрудникБИН_ИИН="+ВыборкаСотрудников.СотрудникБИН_ИИН);
				ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН
					Сообщить("Не заполнен ИИН сотрудника:"+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				////////////////////
				
				ДобавитьВСтроку(Буфер, "СотрудникНомерКартСчета="+ВыборкаСотрудников.СотрудникКартСчет);
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.Сумма) Тогда
					ДобавитьВСтроку(Буфер, "Сумма="+Формат(ВыборкаСотрудников.Сумма, "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2"));
					ОбщаяСумма = ОбщаяСумма + ВыборкаСотрудников.Сумма;
				Иначе Сообщить("Не заполнена сумма заработной платы сотрудника:"+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				ДобавитьВСтроку(Буфер, "КОНЕЦСОТРУДНИК");
			КонецЕсли;
		КонецЦикла;
		ДобавитьВСтроку(Буфер, "КОНЕЦСПИСКАСОТРУДНИКОВ");
		
		Если ОбщаяСумма <> СтруктураДокумента.Документ.СуммаДокумента Тогда
			СуммаКомиссии = СтруктураДокумента.Документ.СуммаДокумента - ОбщаяСумма;
			ДобавитьВСтроку(Буфер, "СуммаКомиссииБанка=" + Формат(СуммаКомиссии, "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2"));
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", СтруктураДокумента.Документ.Организация);
			Отбор.Вставить("Банк", СтруктураДокумента.Документ.СчетКонтрагента.Банк);
			ЗначеияРегистра = РегистрыСведений.КодыОрганизацийВБанковскойСистеме.Получить(Отбор);
			Если ЗначеияРегистра <> Неопределено Тогда
				Если Не ПустаяСтрока(ЗначеияРегистра.КодОрганизации) Тогда
					ДобавитьВСтроку(Буфер, "КодОрганизацииВБанковскойСистеме=" + СокрЛП(ЗначеияРегистра.КодОрганизации));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
//	ИначеЕсли ПеречислениеПоИЛ_Есть="1" И ПенсионныеОтчисления_Есть="0" И СоциальныеОтчисления_Есть="0" Тогда 	
	ИначеЕсли ПеречислениеПоИЛ_Есть="1" Тогда 	
		//Формат(Число(СтруктураДокумента["Сумма"]), "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2")
		Для каждого ВыгружаемыйРеквизит из КоллекцияРеквизитов Цикл
			Если Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях[ВыгружаемыйРеквизит.Имя] = Истина Тогда
			Значение = ПривестиЗначение(СтруктураДокумента[ВыгружаемыйРеквизит.Имя]);
				Если НЕ ПустаяСтрока(Значение) Тогда
					ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Имя + "=" + Значение);
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;
		ДобавитьВСтроку(Буфер, "СПИСОКПОЛУЧАТЕЛЕЙПОИЛ");
		
		ИмяРеквизитаБИК = УправлениеДенежнымиСредствами.ПолучитьИмяРеквизитаБИКБанка(КонПериода);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.НаименованиеПолное КАК СТРОКА(1000)) КАК ПолучательПоИЛФИО,
		|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.РНН КАК ПолучательПоИЛРНН,
		|	ИЛПеречислениеПолучателямИсполнительныеЛисты.СуммаСборов,
		|	ИЛПеречислениеПолучателямИсполнительныеЛисты.СуммаВзаиморасчетов,
		|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Ссылка.СпособПеречисления КАК ПеречислятьЧерез,
		|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.ОсновнойБанковскийСчет.Банк.Наименование КАК БанкНаименвание,
		|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.ОсновнойБанковскийСчет.Банк." + ИмяРеквизитаБИК + " КАК БанкБИК,
		|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.ОсновнойБанковскийСчет.НомерСчета КАК ПолучательПоИЛИИК,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК ПолучательПоИЛАдрес,
		|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.ИдентификационныйКодЛичности КАК ПолучательПоИЛБИН_ИИН
		|ИЗ
		|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателямИсполнительныеЛисты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ПлатежноеПоручениеИсходящееПеречислениеПоИсполнительнымЛистам.Документ КАК Документ
		|		ИЗ
		|			Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПоИсполнительнымЛистам КАК ПлатежноеПоручениеИсходящееПеречислениеПоИсполнительнымЛистам
		|		ГДЕ
		|			ПлатежноеПоручениеИсходящееПеречислениеПоИсполнительнымЛистам.Ссылка = &парамДокументСсылка) КАК ВложенныйЗапрос
		|		ПО ИЛПеречислениеПолучателямИсполнительныеЛисты.Ссылка = ВложенныйЗапрос.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Вид = &парамВид)";
		Запрос.УстановитьПараметр("парамДокументСсылка",СтруктураДокумента.Документ); 
		Запрос.УстановитьПараметр("парамДата", СтруктураДокумента.Документ.Дата);
		Запрос.УстановитьПараметр("парамВид", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		ВыборкаПолучателей = Запрос.Выполнить().Выбрать();
		
		ОбщаяСумма = 0;
		Пока ВыборкаПолучателей.Следующий() Цикл
			Если НЕ ПустаяСтрока(ВыборкаПолучателей.ПолучательПоИЛФИО) Тогда
				ДобавитьВСтроку(Буфер, "ПОЛУЧАТЕЛЬПОИЛ="+СокрЛП(ВыборкаПолучателей.ПолучательПоИЛФИО));
				Если НЕ ПустаяСтрока(ВыборкаПолучателей.ПолучательПоИЛРНН) Тогда
					ДобавитьВСтроку(Буфер, "ПолучательПоИЛРНН="+ВыборкаПолучателей.ПолучательПоИЛРНН);
				ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН
					Сообщить("Не заполнен РНН получателя по исполнительным листам:"+ВыборкаПолучателей.ПолучательПоИЛФИО);
				КонецЕсли;
				
				////////////////////
				Если НЕ ПустаяСтрока(ВыборкаПолучателей.ПолучательПоИЛБИН_ИИН) Тогда
					ДобавитьВСтроку(Буфер, "ПолучательПоИЛБИН_ИИН="+ВыборкаПолучателей.ПолучательПоИЛБИН_ИИН);
				ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН
					Сообщить("Не заполнен ИИН получателя по исполнительным листам:"+ВыборкаПолучателей.ПолучательПоИЛФИО);
				КонецЕсли;
				///////////////////
				
				Если ВыборкаПолучателей.ПеречислятьЧерез = Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезБанк Тогда
					ДобавитьВСтроку(Буфер, "ПолучательПоИЛБанкНаименование="+ВыборкаПолучателей.БанкНаименвание);
					ДобавитьВСтроку(Буфер, "ПолучательПоИЛБанкБИК="+ВыборкаПолучателей.БанкБИК);
					ДобавитьВСтроку(Буфер, "ПолучательПоИЛИИК="+ВыборкаПолучателей.ПолучательПоИЛИИК);
				Иначе
					ДобавитьВСтроку(Буфер, "ПолучательПоИЛАдрес="+?(ВыборкаПолучателей.ПолучательПоИЛАдрес = NULL, "", ВыборкаПолучателей.ПолучательПоИЛАдрес));
					Если ВыборкаПолучателей.ПолучательПоИЛАдрес = NULL Тогда
						Сообщить("Не заполнен фактический адрес контрагента для пролучателя по ИЛ: "+ВыборкаПолучателей.ПолучательПоИЛФИО);
					КонецЕсли;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ВыборкаПолучателей.СуммаВзаиморасчетов) Тогда
					ДобавитьВСтроку(Буфер, "Сумма="+Формат(ВыборкаПолучателей.СуммаВзаиморасчетов, "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2"));
					ОбщаяСумма = ОбщаяСумма + ВыборкаПолучателей.СуммаВзаиморасчетов;
				Иначе Сообщить("Не заполнена сумма к перечислению по исполнительным листам для получателя:"+ВыборкаПолучателей.ПолучательПоИЛФИО);
				КонецЕсли;
				ДобавитьВСтроку(Буфер, "КОНЕЦПОЛУЧАТЕЛЬПОИЛ");
			КонецЕсли;
		КонецЦикла;
		ДобавитьВСтроку(Буфер, "КОНЕЦСПИСКАПОЛУЧАТЕЛЕЙПОИЛ");
		
		Если ОбщаяСумма <> СтруктураДокумента.Документ.СуммаДокумента Тогда
			СуммаКомиссии = СтруктураДокумента.Документ.СуммаДокумента - ОбщаяСумма;
			ДобавитьВСтроку(Буфер, "СуммаКомиссии=" + Формат(СуммаКомиссии, "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2"));
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", СтруктураДокумента.Документ.Организация);
			Отбор.Вставить("Банк", СтруктураДокумента.Документ.СчетКонтрагента.Банк);
			ЗначеияРегистра = РегистрыСведений.КодыОрганизацийВБанковскойСистеме.Получить(Отбор);
			Если ЗначеияРегистра <> Неопределено Тогда
				Если Не ПустаяСтрока(ЗначеияРегистра.КодОрганизации) Тогда
					ДобавитьВСтроку(Буфер, "КодОрганизацииВБанковскойСистеме=" + СокрЛП(ЗначеияРегистра.КодОрганизации));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПеречислениеПодотчетнику_Есть="1" Тогда 	
		Для каждого ВыгружаемыйРеквизит из КоллекцияРеквизитов Цикл
			Если Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях[ВыгружаемыйРеквизит.Имя] = Истина Тогда
			Значение = ПривестиЗначение(СтруктураДокумента[ВыгружаемыйРеквизит.Имя]);
				Если НЕ ПустаяСтрока(Значение) И НЕ ВыгружаемыйРеквизит.Имя = "ПеречислениеПодотчетнику" Тогда
					ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Имя + "=" + Значение);
				ИначеЕсли НЕ ПустаяСтрока(Значение) И ВыгружаемыйРеквизит.Имя = "ПеречислениеПодотчетнику" Тогда 
					ДобавитьВСтроку(Буфер, "ПеречислениеНаКартСчета" + "=" + Значение);
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;
		ДобавитьВСтроку(Буфер, "СПИСОКСОТРУДНИКОВ");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПеречислениеВПодотчет.ФизЛицо.Наименование КАК НаименованиеФизЛица,
		|	ВЫБОР
		|		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.РНН
		|		ИНАЧЕ ПеречислениеВПодотчет.ФизЛицо.РНН
		|	КОНЕЦ КАК РНН,
		|	ПеречислениеВПодотчет.НомерКартСчета.НомерСчета КАК НомерКартСчета,
		|	ЕСТЬNULL(ПеречислениеВПодотчет.Ссылка.СчетКонтрагента.Банк.Наименование, """") КАК БанкКонтрагента,
		|	ВЫБОР
		|		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Фамилия
		|		ИНАЧЕ ФИОФизЛиц.Фамилия
		|	КОНЕЦ КАК Фамилия,
		|	ВЫБОР
		|		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Имя
		|		ИНАЧЕ ФИОФизЛиц.Имя
		|	КОНЕЦ КАК Имя,
		|	ВЫБОР
		|		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Отчество
		|		ИНАЧЕ ФИОФизЛиц.Отчество
		|	КОНЕЦ КАК Отчество,
		|	СУММА(ВЫБОР
		|			КОГДА ПеречислениеВПодотчет.СуммаПлатежа ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ ПеречислениеВПодотчет.СуммаПлатежа
		|		КОНЕЦ) КАК СуммаКПеречислению,
		|	ВЫБОР
		|		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.ИдентификационныйКодЛичности
		|		ИНАЧЕ ПеречислениеВПодотчет.ФизЛицо.ИдентификационныйКодЛичности
		|	КОНЕЦ КАК ПодотчетникБИН_ИИН
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеВПодотчет КАК ПеречислениеВПодотчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛиц
		|		ПО (ФИОФизЛиц.ФизЛицо = ПеречислениеВПодотчет.ФизЛицо)
		|ГДЕ
		|	ПеречислениеВПодотчет.Ссылка = &парамДокументСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПеречислениеВПодотчет.ФизЛицо.Наименование,
		|	ВЫБОР
		|		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.РНН
		|		ИНАЧЕ ПеречислениеВПодотчет.ФизЛицо.РНН
		|	КОНЕЦ,
		|	ПеречислениеВПодотчет.НомерКартСчета,
		|	ЕСТЬNULL(ПеречислениеВПодотчет.Ссылка.СчетКонтрагента.Банк.Наименование, """"),
		|	ВЫБОР
		|		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Фамилия
		|		ИНАЧЕ ФИОФизЛиц.Фамилия
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Имя
		|		ИНАЧЕ ФИОФизЛиц.Имя
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Отчество
		|		ИНАЧЕ ФИОФизЛиц.Отчество
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.ИдентификационныйКодЛичности
		|		ИНАЧЕ ПеречислениеВПодотчет.ФизЛицо.ИдентификационныйКодЛичности
		|	КОНЕЦ,
		|	ПеречислениеВПодотчет.НомерКартСчета.НомерСчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	Фамилия,
		|	Имя,
		|	Отчество";
		
		Запрос.УстановитьПараметр("парамДокументСсылка",СтруктураДокумента.Документ); 
		Запрос.УстановитьПараметр("парамДата", СтруктураДокумента.Документ.Дата);
		ВыборкаПодотчетников = Запрос.Выполнить().Выбрать();
		
		ОбщаяСумма = 0;
		Пока ВыборкаПодотчетников.Следующий() Цикл
			Если НЕ ПустаяСтрока(ВыборкаПодотчетников.НаименованиеФизЛица) Тогда
				ДобавитьВСтроку(Буфер, "СОТРУДНИК="+СокрЛП(ВыборкаПодотчетников.Фамилия) + " " + СокрЛП(ВыборкаПодотчетников.Имя) + " " + СокрЛП(ВыборкаПодотчетников.Отчество));
				Если НЕ ПустаяСтрока(ВыборкаПодотчетников.РНН) Тогда
					ДобавитьВСтроку(Буфер, "СотрудникРНН="+ВыборкаПодотчетников.РНН);
				ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН
					Сообщить("Не заполнен РНН подотчетника:"+ВыборкаПодотчетников.НаименованиеФизЛица);
				КонецЕсли;
				
				////////////////////
				Если НЕ ПустаяСтрока(ВыборкаПодотчетников.ПодотчетникБИН_ИИН) Тогда
					ДобавитьВСтроку(Буфер, "СотрудникБИН_ИИН="+ВыборкаПодотчетников.ПодотчетникБИН_ИИН);
				ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН
					Сообщить("Не заполнен ИИН подотчетника:"+ВыборкаПодотчетников.НаименованиеФизЛица);
				КонецЕсли;
				////////////////////				
				
				
				Если ПустаяСтрока(ВыборкаПодотчетников.НомерКартСчета) Тогда
					Сообщить("Не указан номер карт-счета подотчетника :"+СокрЛП(ВыборкаПодотчетников.НаименованиеФизЛица));
				КонецЕсли;
				ДобавитьВСтроку(Буфер, "СотрудникНомерКартСчета="+ВыборкаПодотчетников.НомерКартСчета);
				Если НЕ ПустаяСтрока(ВыборкаПодотчетников.СуммаКПеречислению) Тогда
					ДобавитьВСтроку(Буфер, "Сумма="+Формат(ВыборкаПодотчетников.СуммаКПеречислению, "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2"));
					ОбщаяСумма = ОбщаяСумма + ВыборкаПодотчетников.СуммаКПеречислению;
				Иначе 
					Сообщить("Не заполнена сумма выдачи в подотчет для подотчетника:"+ВыборкаПодотчетников.НаименованиеФизЛица);
				КонецЕсли;
				ДобавитьВСтроку(Буфер, "КОНЕЦСОТРУДНИК");
			КонецЕсли;
		КонецЦикла;
		ДобавитьВСтроку(Буфер, "КОНЕЦСПИСКАСОТРУДНИКОВ");
		
		Если ОбщаяСумма <> СтруктураДокумента.Документ.СуммаДокумента Тогда
			СуммаКомиссии = СтруктураДокумента.Документ.СуммаДокумента - ОбщаяСумма;
			ДобавитьВСтроку(Буфер, "СуммаКомиссии=" + Формат(СуммаКомиссии, "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2"));
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", СтруктураДокумента.Документ.Организация);
			Отбор.Вставить("Банк", СтруктураДокумента.Документ.СчетКонтрагента.Банк);
			ЗначеияРегистра = РегистрыСведений.КодыОрганизацийВБанковскойСистеме.Получить(Отбор);
			Если ЗначеияРегистра <> Неопределено Тогда
				Если Не ПустаяСтрока(ЗначеияРегистра.КодОрганизации) Тогда
					ДобавитьВСтроку(Буфер, "КодОрганизацииВБанковскойСистеме=" + СокрЛП(ЗначеияРегистра.КодОрганизации));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Для каждого ВыгружаемыйРеквизит из КоллекцияРеквизитов Цикл
			Если Экспорт_Выгружаемые[ВыгружаемыйРеквизит.Имя] = Истина Тогда
				Значение = ПривестиЗначение(СтруктураДокумента[ВыгружаемыйРеквизит.Имя]);
				Если НЕ ПустаяСтрока(Значение) Тогда
					
					//+++ Oleg SmartT. 2021-08-13
					Если ВыгружаемыйРеквизит.Имя = "НомерДокумента" Тогда
						ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Имя + "=" + Прав(Значение,4));
					Иначе
						ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Имя + "=" + Значение);
					КонецЕсли;
					//--- Oleg SmartT. 2021-08-13	
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ДобавитьВСтроку(Буфер, "Валюта="+СокрЛП(СтруктураДокумента.СчетОрганизации.ВалютаДенежныхСредств.Наименование));
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование Как Наименование,
	               |	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо.Ссылка КАК ОТВ
	               |ИЗ
	               |	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	               |		,
	               |		ОтветственноеЛицо.Ссылка = &ГлавныйБухгалтер
	               |		    ИЛИ ОтветственноеЛицо.Ссылка = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
	               |ГДЕ
	               |	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
				   
	Если ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда
		СтруктурнаяЕдиница = ?(СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации, Организация, СтруктурноеПодразделение);
	Иначе 
		СтруктурнаяЕдиница = Организация;
	КонецЕсли;
					
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ГлавныйБухгалтер",   Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтерДляПодписиБанковскихДокументов);
	Запрос.УстановитьПараметр("Руководитель", 	    Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Отв=Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтерДляПодписиБанковскихДокументов Тогда 
			        ФИО = Выборка.Наименование;
					Фамилия  = ВыделитьСлово(ФИО, 1);
            		Имя      = ВыделитьСлово(ФИО, 2);
					Отчество = ВыделитьСлово(ФИО, 3);
 			ДобавитьВСтроку(Буфер, "ГлавныйБухгалтер="+(СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество)));
		КонецЕсли;
	    Если Выборка.Отв=Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда 
			        ФИО = Выборка.Наименование;
					Фамилия  = ВыделитьСлово(ФИО, 1);
            		Имя      = ВыделитьСлово(ФИО, 2);
					Отчество = ВыделитьСлово(ФИО, 3);
 			ДобавитьВСтроку(Буфер, "Руководитель="+(СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество)));
		КонецЕсли;
	КонецЦикла;

	ДобавитьВСтроку(Буфер, "КонецДокумента");
	
	Возврат Буфер;
	
КонецФункции

Процедура УдалитьРазделители(ТекстЗаписи)
	Пока Истина Цикл
		ПозицияПробела = Найти(ТекстЗаписи, Символ(160));
		Если ПозицияПробела = 0 Тогда
			Прервать;
		Иначе
			ТекстЗаписи = Лев(ТекстЗаписи,ПозицияПробела-1) + Прав(ТекстЗаписи, СтрДлина(ТекстЗаписи) - ПозицияПробела);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПреобразоватьДату(ПреобразовываемаяДата)
	Год = СокрЛП(Формат(Год(ПреобразовываемаяДата), "ЧРД=.; ЧРГ=''; ЧГ=0"));
	Месяц = СокрЛП(Формат(Месяц(ПреобразовываемаяДата), "ЧРД=.; ЧРГ=''; ЧГ=0"));
	День = СокрЛП(Формат(День(ПреобразовываемаяДата), "ЧРД=.; ЧРГ=''; ЧГ=0"));
	Если СтрДлина(Месяц) = 1 Тогда
		Месяц = "0" + Месяц;
	КонецЕсли;
	Если СтрДлина(День) = 1 Тогда
		День = "0" + День;
	КонецЕсли;
	Если СтрДлина(Год) < 4 Тогда
		ДлинаГода = СтрДлина(Год);
		Для Сч = 1 По 4 - ДлинаГода Цикл
			Год = "0" + Год;
		КонецЦикла;
	КонецЕсли;
	ТекстЗаписи = Год + "-" + Месяц + "-" + День;
	Возврат ТекстЗаписи;
КонецФункции
	
Процедура ЗаписатьXMLОбъект(ЗаписьXML, ИмяОбъекта, ТекстОбъекта="", НеЗакрывать=0, СписокАтрибутов=Неопределено, НеПриводитьВСтроку=Ложь)
	ЗаписьXML.ЗаписатьНачалоЭлемента(СокрЛП(ИмяОбъекта));
	Если Не(СписокАтрибутов = Неопределено) Тогда
		Для Каждого Атрибут Из СписокАтрибутов Цикл
			ЗаписьXML.ЗаписатьАтрибут(СокрЛП(Атрибут.Ключ), СокрЛП(Атрибут.Значение));
		КонецЦикла;
	КонецЕсли;
	Если НеЗакрывать=0 Тогда
		Если Не НеПриводитьВСтроку Тогда
			ЗаписьXML.ЗаписатьТекст(СокрЛП(ТекстОбъекта));
		Иначе
			Если ТипЗнч(ТекстОбъекта) = Тип("Дата") Тогда
				ТекстЗаписи = ПреобразоватьДату(ТекстОбъекта)
			ИначеЕсли ТипЗнч(ТекстОбъекта) = Тип("Число") Тогда
				ТекстЗаписи = СокрЛП(Формат(ТекстОбъекта, "ЧРД=.; ЧРГ=''; ЧГ=0"));
			ИначеЕсли ТипЗнч(ТекстОбъекта) = Тип("Булево") Тогда
				ТекстЗаписи = ?(ТекстОбъекта=Истина, "true", "false");
			Иначе
				ТекстЗаписи = СокрЛП(ТекстОбъекта);
			КонецЕсли;
			ЗаписьXML.ЗаписатьТекст(ТекстЗаписи);
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьСтруктуруВXML(ЗаписьXML, СтруктураДляЗаписи, ИмяУзла)
	ЗаписатьXMLОбъект(ЗаписьXML,ИмяУзла,,1,);
	Для Каждого ЭлементСтруктуры Из СтруктураДляЗаписи Цикл
		ИмяЭлемента = ЭлементСтруктуры.Ключ;
		Если Найти(ИмяЭлемента, "БанкИИК") > 0 Тогда
			ИмяЭлемента = "КоррСчет";
		КонецЕсли;
		Если Найти(ИмяЭлемента, "ПлательщикБанк") > 0 Тогда
			ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"ПлательщикБанк","");
		КонецЕсли;
		Если Найти(ИмяЭлемента, "Плательщик") > 0 Тогда
			ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"Плательщик","");
		КонецЕсли;
		Если Найти(ИмяЭлемента, "ПолучательБанк") > 0 Тогда
			ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"ПолучательБанк","");
		КонецЕсли;
		Если Найти(ИмяЭлемента, "Получатель") > 0 Тогда
			ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"Получатель","");
		КонецЕсли;
		ЗаписатьXMLОбъект(ЗаписьXML,ИмяЭлемента,ЭлементСтруктуры.Значение,,,);
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

Процедура ЗаписатьОбщиеРеквизитыВXML(ЗаписьXML, СтруктураДокумента, КоллекцияРеквизитов, ПлатежныйДокументБезСписка)
	Перем НеПреобразовыватьВСтроку;
	
	СтруктураРеквизитовПлательщика = Новый Структура;
	РеквизитПлательщика = Ложь;
	ЗаписатьРеквизитыПлательщика = Ложь;
	СтруктураРеквизитовПолучателя = Новый Структура;
	РеквизитПолучателя = Ложь;
	ЗаписатьРеквизитыПолучателя = Ложь;
	СтруктураРеквизитовБанкаПлательщика = Новый Структура;
	РеквизитБанкаПлательщика = Ложь;
	ЗаписатьРеквизитыБанкаПлательщика = Ложь;
	СтруктураРеквизитовБанкаПолучателя = Новый Структура;
	РеквизитБанкаПолучателя = Ложь;
	ЗаписатьРеквизитыБанкаПолучателя = Ложь;
	Для каждого ВыгружаемыйРеквизит из КоллекцияРеквизитов Цикл
		ВыгружатьРеквизит = ?(ПлатежныйДокументБезСписка,Экспорт_Выгружаемые[ВыгружаемыйРеквизит.Имя],Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях[ВыгружаемыйРеквизит.Имя]);
		Если ВыгружатьРеквизит = Истина Тогда
			Значение = ПривестиЗначениеXML(СтруктураДокумента, ВыгружаемыйРеквизит.Имя, НеПреобразовыватьВСтроку);
			Если НЕ ПустаяСтрока(Значение) Тогда
				// плательщик
				Если Найти(РеквизитыПлДок_Плательщик, ВыгружаемыйРеквизит.Имя) > 0
					////////////////////
					Или (Найти("ПлательщикБИН_ИИН", ВыгружаемыйРеквизит.Имя) > 0) Тогда
					///////////////////
					РеквизитПлательщика = Истина;
					СтруктураРеквизитовПлательщика.Вставить(ВыгружаемыйРеквизит.Имя, Значение);
				Иначе
					Если РеквизитПлательщика Тогда
						ЗаписатьРеквизитыПлательщика = Истина;
						РеквизитПлательщика = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если ЗаписатьРеквизитыПлательщика Тогда
					ЗаписатьРеквизитыПлательщика = Ложь;
					ЗаписатьСтруктуруВXML(ЗаписьXML, СтруктураРеквизитовПлательщика, "Плательщик");
				КонецЕсли;
				// банк плательщика
				Если Найти("ПлательщикБанкНаименование,ПлательщикБанкРНН,ПлательщикБанкБИК,ПлательщикБанкБИН_ИИН,ПлательщикБанкИИК", ВыгружаемыйРеквизит.Имя) > 0 Тогда
					РеквизитБанкаПлательщика = Истина;
					СтруктураРеквизитовБанкаПлательщика.Вставить(ВыгружаемыйРеквизит.Имя, Значение);
				Иначе
					Если РеквизитБанкаПлательщика Тогда
						ЗаписатьРеквизитыБанкаПлательщика = Истина;
						РеквизитБанкаПлательщика = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если ЗаписатьРеквизитыБанкаПлательщика Тогда
					ЗаписатьРеквизитыБанкаПлательщика = Ложь;
					ЗаписатьСтруктуруВXML(ЗаписьXML, СтруктураРеквизитовБанкаПлательщика, "БанкПлательщика");
				КонецЕсли;
				// получатель
				Если Найти(РеквизитыПлДок_Получатель, ВыгружаемыйРеквизит.Имя) > 0
					////////////////////
					Или (Найти("ПолучательБИН_ИИН", ВыгружаемыйРеквизит.Имя) > 0) Тогда
					///////////////////
					РеквизитПолучателя = Истина;
					СтруктураРеквизитовПолучателя.Вставить(ВыгружаемыйРеквизит.Имя, Значение);
				Иначе
					Если РеквизитПолучателя Тогда
						ЗаписатьРеквизитыПолучателя = Истина;
						РеквизитПолучателя = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если ЗаписатьРеквизитыПолучателя Тогда
					ЗаписатьРеквизитыПолучателя = Ложь;
					ЗаписатьСтруктуруВXML(ЗаписьXML, СтруктураРеквизитовПолучателя, "Получатель");
				КонецЕсли;
				// банк получателя
				Если Найти("ПолучательБанкНаименование,ПолучательБанкРНН,ПолучательБанкБИК,ПолучательБанкБИН_ИИН,ПолучательБанкИИК", ВыгружаемыйРеквизит.Имя) > 0 Тогда
					РеквизитБанкаПолучателя = Истина;
					СтруктураРеквизитовБанкаПолучателя.Вставить(ВыгружаемыйРеквизит.Имя, Значение);
				Иначе
					Если РеквизитБанкаПолучателя Тогда
						ЗаписатьРеквизитыБанкаПолучателя = Истина;
						РеквизитБанкаПолучателя = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если ЗаписатьРеквизитыБанкаПолучателя Тогда
					ЗаписатьРеквизитыБанкаПолучателя = Ложь;
					ЗаписатьСтруктуруВXML(ЗаписьXML, СтруктураРеквизитовБанкаПолучателя, "БанкПолучателя");
				КонецЕсли;
				Если (Не РеквизитПлательщика) И (Не РеквизитПолучателя) И (НЕ РеквизитБанкаПлательщика) И (Не РеквизитБанкаПолучателя) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,ВыгружаемыйРеквизит.Имя,Значение,,, НеПреобразовыватьВСтроку);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;			
	КонецЦикла;
КонецПроцедуры

//ЗаписатьСекциюДокументВXML
Процедура ЗаписатьСекциюДокументВXML(ЗаписьXML, СтруктураДокумента, КоллекцияРеквизитов) //+
	Перем НеПреобразовыватьВСтроку;
	
	ИмяРеквизитаБИК = УправлениеДенежнымиСредствами.ПолучитьИмяРеквизитаБИКБанка(КонПериода);

	ЗаписатьXMLОбъект(ЗаписьXML,"ПлатежныйДокумент",,1, Новый Структура("ВидДокумента", ПолучитьТегСекции(СтруктураДокумента.Документ)));
	ПенсионныеОтчисления_Есть = ПривестиЗначение(СтруктураДокумента[КоллекцияРеквизитов.ПенсионныеОтчисления.Имя]);
	СоциальныеОтчисления_Есть = ПривестиЗначение(СтруктураДокумента[КоллекцияРеквизитов.СоциальныеОтчисления.Имя]);
	ПеречислениеНаКартСчета_Есть = ПривестиЗначение(СтруктураДокумента[КоллекцияРеквизитов.ПеречислениеНаКартСчета.Имя]);
   	ПеречислениеПоИЛ_Есть = ПривестиЗначение(СтруктураДокумента[КоллекцияРеквизитов.ПеречислениеПоИЛ.Имя]);
	ПеречислениеПодотчетнику_Есть = ПривестиЗначение(СтруктураДокумента[КоллекцияРеквизитов.ПеречислениеПодотчетнику.Имя]);
	
	//Получим настройки проверки заполненности реквизитов
	ПроверятьРНН 		= ПолучитьНастройкуЗаполнения("ПроверятьРНН");
	ПроверятьБИН_ИИН 	= ПолучитьНастройкуЗаполнения("ПроверятьБИН_ИИН");
	
	Если ПенсионныеОтчисления_Есть="1" Тогда 	
		
		ЗаписатьОбщиеРеквизитыВXML(ЗаписьXML, СтруктураДокумента, КоллекцияРеквизитов, Ложь);
		
		ЗаписатьXMLОбъект(ЗаписьXML,"СписокСотрудников",,1);
		Для каждого ВыгружаемыйРеквизит из КоллекцияРеквизитов Цикл
            Если Экспорт_ВыгружаемыеГЦВП[ВыгружаемыйРеквизит.Имя] = Истина Тогда
				Значение = ПривестиЗначениеXML(СтруктураДокумента, ВыгружаемыйРеквизит.Имя, НеПреобразовыватьВСтроку);
				Если НЕ ПустаяСтрока(Значение) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,ВыгружаемыйРеквизит.Имя,Значение,,, НеПреобразовыватьВСтроку);
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОПВПоСотрудникам.ФизЛицоНаименование КАК Сотрудник,
		               |	ОПВПоСотрудникам.Фамилия КАК РегистрацияФамилия,
		               |	ОПВПоСотрудникам.Имя КАК РегистрацияИмя,
		               |	ОПВПоСотрудникам.Отчество КАК РегистрацияОтчество,
		               |	ОПВПоСотрудникам.ФизЛицоРНН КАК СотрудникРНН,
		               |	ОПВПоСотрудникам.ФизЛицоДатаРождения КАК СотрудникДатаРождения,
		               |	ОПВПоСотрудникам.Сумма,
		               |	ОПВПеречислениеВФонды.ПериодРегистрации КАК Период,
		               |	ОПВПоСотрудникам.СотрудникБИН_ИИН
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка КАК Ссылка,
		               |		ДанныеФизЛиц.Наименование КАК ФизЛицоНаименование,
		               |		ФИОФизЛиц.Фамилия КАК Фамилия,
		               |		ФИОФизЛиц.Имя КАК Имя,
		               |		ФИОФизЛиц.Отчество КАК Отчество,
		               |		ДанныеФизЛиц.РНН КАК ФизЛицоРНН,
		               |		ДанныеФизЛиц.ДатаРождения КАК ФизЛицоДатаРождения,
		               |		ОПВПеречислениеВФондыПенсионныеВзносы.Сумма КАК Сумма,
		               |		ДанныеФизЛиц.ИдентификационныйКодЛичности КАК СотрудникБИН_ИИН
		               |	ИЗ
		               |		Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК ОПВПеречислениеВФондыПенсионныеВзносы
		               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ДанныеФизЛиц
		               |			ПО (ВЫБОР
		               |					КОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо ССЫЛКА Справочник.Контрагенты
		               |						ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ФизЛицо
		               |					ИНАЧЕ ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо
		               |				КОНЕЦ = ДанныеФизЛиц.Ссылка)
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
		               |			ПО ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.Ссылка = ФИОФизЛиц.ФизЛицо) КАК ОПВПоСотрудникам
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОПВПеречислениеВФонды КАК ОПВПеречислениеВФонды
		               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
		               |			ПО ОПВПеречислениеВФонды.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ.Ссылка
		               |		ПО ОПВПоСотрудникам.Ссылка = ОПВПеречислениеВФонды.Ссылка
		               |ГДЕ
		               |	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка = &Документ";
		Запрос.УстановитьПараметр("Документ",СтруктураДокумента.Документ); 
		ВыборкаСотрудников = Запрос.Выполнить().Выбрать();
		Пока ВыборкаСотрудников.Следующий() Цикл
			Если НЕ ПустаяСтрока(ВыборкаСотрудников.Сотрудник) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"Сотрудник",,1, Новый Структура("ФИО", ВыборкаСотрудников.Сотрудник));
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.РегистрацияФамилия) Тогда 
					ЗаписатьXMLОбъект(ЗаписьXML,"Регистрация",СокрЛП(ВыборкаСотрудников.РегистрацияФамилия)+" "+СокрЛП(ВыборкаСотрудников.РегистрацияИмя)+" "+СокрЛП(ВыборкаСотрудников.РегистрацияОтчество));
				Иначе
					ЗаписатьXMLОбъект(ЗаписьXML,"Регистрация",ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникРНН) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникРНН",ВыборкаСотрудников.СотрудникРНН);
				ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН
					Сообщить("Не заполнен РНН сотрудника:"+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				
				//////////////////////////
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникБИН_ИИН) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникБИН_ИИН",ВыборкаСотрудников.СотрудникБИН_ИИН);
				ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН
					Сообщить("Не заполнен ИИН сотрудника:"+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				/////////////////////////
				Если НЕ ВыборкаСотрудников.СотрудникДатаРождения=ПустаяДата Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникДатаРождения",ВыборкаСотрудников.СотрудникДатаРождения,,,Истина);
				Иначе Сообщить("Не заполнена дата рождения сотрудника:"+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				Если НЕ ВыборкаСотрудников.Период=ПустаяДата Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"Период",НРег(Формат(ВыборкаСотрудников.Период, "ДФ='ММгггг'")));
				КонецЕсли;
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.Сумма) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"Сумма",ВыборкаСотрудников.Сумма,,,Истина);
				Иначе Сообщить("Не заполнена сумма пенсионных перечислений сотрудника:"+ВыборкаСотрудников.Сотрудник+" за "+НРег(Формат(ВыборкаСотрудников.Период, "ДФ='ММММ гггг'"))+"г.");
				КонецЕсли;
				ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "СОТРУДНИК"
			КонецЕсли;
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "СПИСОКСОТРУДНИКОВ"
		
	ИначеЕсли СоциальныеОтчисления_Есть="1" Тогда 	
		
		ЗаписатьОбщиеРеквизитыВXML(ЗаписьXML, СтруктураДокумента, КоллекцияРеквизитов, Ложь);
		
		ЗаписатьXMLОбъект(ЗаписьXML,"СписокСотрудников",,1);
		Для каждого ВыгружаемыйРеквизит из КоллекцияРеквизитов Цикл
            Если Экспорт_ВыгружаемыеГЦВП[ВыгружаемыйРеквизит.Имя] = Истина Тогда
				Значение = ПривестиЗначениеXML(СтруктураДокумента, ВыгружаемыйРеквизит.Имя, НеПреобразовыватьВСтроку);
				Если НЕ ПустаяСтрока(Значение) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,ВыгружаемыйРеквизит.Имя,Значение,,, НеПреобразовыватьВСтроку);
				КонецЕсли;
			КонецЕсли;			
			КонецЦикла;		         			
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СОПоСотрудникам.ФизЛицоНаименование КАК Сотрудник,
		               |	СОПоСотрудникам.Фамилия КАК РегистрацияФамилия,
		               |	СОПоСотрудникам.Имя КАК РегистрацияИмя,
		               |	СОПоСотрудникам.Отчество КАК РегистрацияОтчество,
		               |	СОПоСотрудникам.ФизЛицоРНН КАК СотрудникРНН,
		               |	СОПоСотрудникам.ФизЛицоСИК КАК СотрудникСИК,
		               |	СОПоСотрудникам.ФизЛицоДатаРождения КАК СотрудникДатаРождения,
		               |	СОПоСотрудникам.Сумма,
		               |	СОПеречислениеВФонды.ПериодРегистрации КАК Период,
		               |	СОПоСотрудникам.СотрудникБИН_ИИН
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		СОПеречислениеВФондыСоциальныеОтчисления.Ссылка КАК Ссылка,
		               |		СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.Наименование КАК ФизЛицоНаименование,
		               |		ФИОФизЛицПриПрисвоенииСИК.Фамилия КАК Фамилия,
		               |		ФИОФизЛицПриПрисвоенииСИК.Имя КАК Имя,
		               |		ФИОФизЛицПриПрисвоенииСИК.Отчество КАК Отчество,
		               |		СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.РНН КАК ФизЛицоРНН,
		               |		СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.СИК КАК ФизЛицоСИК,
		               |		ВЫБОР
		               |			КОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо ССЫЛКА Справочник.Контрагенты
		               |				ТОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ФизЛицо.ДатаРождения
		               |			ИНАЧЕ СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ДатаРождения
		               |		КОНЕЦ КАК ФизЛицоДатаРождения,
		               |		СОПеречислениеВФондыСоциальныеОтчисления.Сумма КАК Сумма,
		               |		СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ИдентификационныйКодЛичности КАК СотрудникБИН_ИИН
		               |	ИЗ
		               |		Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК СОПеречислениеВФондыСоциальныеОтчисления
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛицПриПрисвоенииСИК КАК ФИОФизЛицПриПрисвоенииСИК
		               |			ПО (ВЫБОР
		               |					КОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо ССЫЛКА Справочник.Контрагенты
		               |						ТОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ФизЛицо = ФИОФизЛицПриПрисвоенииСИК.ФизЛицо
		               |					ИНАЧЕ СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо = ФИОФизЛицПриПрисвоенииСИК.ФизЛицо
		               |				КОНЕЦ)) КАК СОПоСотрудникам					   
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СОПеречислениеВФонды КАК СОПеречислениеВФонды
		               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений
		               |			ПО СОПеречислениеВФонды.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ.Ссылка
		               |		ПО СОПоСотрудникам.Ссылка = СОПеречислениеВФонды.Ссылка
		               |ГДЕ
		               |	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка = &Документ";
		Запрос.УстановитьПараметр("Документ",СтруктураДокумента.Документ); 
		ВыборкаСотрудников = Запрос.Выполнить().Выбрать();
		Пока ВыборкаСотрудников.Следующий() Цикл
			Если НЕ ПустаяСтрока(ВыборкаСотрудников.Сотрудник) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"Сотрудник",,1, Новый Структура("ФИО", ВыборкаСотрудников.Сотрудник));
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.РегистрацияФамилия) Тогда 
					ЗаписатьXMLОбъект(ЗаписьXML,"Регистрация",СокрЛП(ВыборкаСотрудников.РегистрацияФамилия)+" "+СокрЛП(ВыборкаСотрудников.РегистрацияИмя)+" "+СокрЛП(ВыборкаСотрудников.РегистрацияОтчество));
				Иначе
					ЗаписатьXMLОбъект(ЗаписьXML,"Регистрация",ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникРНН) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникРНН",ВыборкаСотрудников.СотрудникРНН);
				ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН
					Сообщить("Не заполнен РНН сотрудника:"+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				
				
				//////////////////////////
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникБИН_ИИН) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникБИН_ИИН",ВыборкаСотрудников.СотрудникБИН_ИИН);
				ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН
					Сообщить("Не заполнен ИИН сотрудника:"+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				/////////////////////////
				
				
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникСИК) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникСИК",ВыборкаСотрудников.СотрудникСИК);
				ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН
					Сообщить("Не заполнен СИК сотрудника:"+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				Если НЕ ВыборкаСотрудников.СотрудникДатаРождения=ПустаяДата Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникДатаРождения",ВыборкаСотрудников.СотрудникДатаРождения,,,Истина);
				Иначе Сообщить("Не заполнена дата рождения сотрудника:"+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				Если НЕ ВыборкаСотрудников.Период=ПустаяДата Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"Период",НРег(Формат(ВыборкаСотрудников.Период, "ДФ='ММгггг'")));
				КонецЕсли;
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.Сумма) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"Сумма",ВыборкаСотрудников.Сумма,,,Истина);
				Иначе Сообщить("Не заполнена сумма социальных отчислений сотрудника:"+ВыборкаСотрудников.Сотрудник+" за "+НРег(Формат(ВыборкаСотрудников.Период, "ДФ='ММММ гггг'"))+"г.");
				КонецЕсли;
				ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "СОТРУДНИК"
			КонецЕсли;
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "СПИСОКСОТРУДНИКОВ"
		
	ИначеЕсли ПеречислениеНаКартСчета_Есть="1" Тогда 	
		
		ЗаписатьОбщиеРеквизитыВXML(ЗаписьXML, СтруктураДокумента, КоллекцияРеквизитов, Ложь);
		
		ЗаписатьXMLОбъект(ЗаписьXML,"СписокСотрудников",,1);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВЫБОР
		               |		КОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.НеЯвляетсяВладельцемСчета
		               |			ТОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.РНН
		               |		ИНАЧЕ ЗарплатаКВыплатеОрганизаций.ФизЛицо.РНН
		               |	КОНЕЦ КАК СотрудникРНН,
		               |	ЗарплатаКВыплатеОрганизаций.НомерКартСчета.НомерСчета КАК СотрудникКартСчет,
		               |	ВЫБОР
		               |		КОГДА ЗарплатаКВыплатеОрганизаций.Сумма ЕСТЬ NULL 
		               |			ТОГДА 0
		               |		ИНАЧЕ ЗарплатаКВыплатеОрганизаций.Сумма
		               |	КОНЕЦ КАК Сумма,
		               |	ВЫБОР
		               |		КОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.НеЯвляетсяВладельцемСчета
		               |			ТОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.Фамилия
		               |		ИНАЧЕ ФИОФизЛиц.Фамилия
		               |	КОНЕЦ КАК Фамилия,
		               |	ВЫБОР
		               |		КОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.НеЯвляетсяВладельцемСчета
		               |			ТОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.Имя
		               |		ИНАЧЕ ФИОФизЛиц.Имя
		               |	КОНЕЦ КАК Имя,
		               |	ВЫБОР
		               |		КОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.НеЯвляетсяВладельцемСчета
		               |			ТОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.Отчество
		               |		ИНАЧЕ ФИОФизЛиц.Отчество
		               |	КОНЕЦ КАК Отчество,
		               |	ЗарплатаКВыплатеОрганизаций.ФизЛицо.Наименование КАК Сотрудник,
		               |	ВЫБОР
		               |		КОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.НеЯвляетсяВладельцемСчета
		               |			ТОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.ИдентификационныйКодЛичности
		               |		ИНАЧЕ ЗарплатаКВыплатеОрганизаций.ФизЛицо.ИдентификационныйКодЛичности
		               |	КОНЕЦ КАК СотрудникБИН_ИИН
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ЗарплатаКВыплатеОрганизацийЗарплата.ФизЛицо КАК ФизЛицо,
		               |		ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета КАК НомерКартСчета,
		               |		СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК Сумма
		               |	ИЗ
		               |		(ВЫБРАТЬ
		               |			ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК ФизЛицо,
		               |			ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета КАК НомерКартСчета,
		               |			ЗарплатаКВыплатеОрганизацийЗарплата.СуммаКВыплате КАК Сумма
		               |		ИЗ
		               |			Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		               |		ГДЕ
		               |			ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка В
		               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |						ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость.Ссылка
		               |					ИЗ
		               |						Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		               |					ГДЕ
		               |						ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка = &парамДокументСсылка)) КАК ЗарплатаКВыплатеОрганизацийЗарплата
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		ЗарплатаКВыплатеОрганизацийЗарплата.ФизЛицо,
		               |		ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета) КАК ЗарплатаКВыплатеОрганизаций
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛиц
		               |		ПО (ФИОФизЛиц.ФизЛицо = ЗарплатаКВыплатеОрганизаций.ФизЛицо)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
		               |		ПО (ПлатежноеПоручениеИсходящее.Ссылка = &парамДокументСсылка)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Фамилия,
		               |	Имя,
		               |	Отчество";
		Запрос.УстановитьПараметр("парамДокументСсылка",СтруктураДокумента.Документ); 
		Запрос.УстановитьПараметр("парамДата", СтруктураДокумента.Документ.Дата);
		ВыборкаСотрудников = Запрос.Выполнить().Выбрать();
		ОбщаяСумма = 0;
		Пока ВыборкаСотрудников.Следующий() Цикл
			Если НЕ ПустаяСтрока(ВыборкаСотрудников.Фамилия) Тогда                    
				Если ПустаяСтрока(ВыборкаСотрудников.СотрудникКартСчет) Тогда
					Сообщить("Не указан номер карт-счета сотрудника:"+СокрЛП(ВыборкаСотрудников.Фамилия) + " " + СокрЛП(ВыборкаСотрудников.Имя) + " " + СокрЛП(ВыборкаСотрудников.Отчество));
					//Возврат "";
				КонецЕсли;
				ЗаписатьXMLОбъект(ЗаписьXML,"Сотрудник",,1, Новый Структура("ФИО", СокрЛП(ВыборкаСотрудников.Фамилия) + " " + СокрЛП(ВыборкаСотрудников.Имя) + " " + СокрЛП(ВыборкаСотрудников.Отчество)));
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникРНН) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникРНН",ВыборкаСотрудников.СотрудникРНН);
				ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН
					Сообщить("Не заполнен РНН сотрудника:"+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				
				//////////////////////////
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникБИН_ИИН) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникБИН_ИИН",ВыборкаСотрудников.СотрудникБИН_ИИН);
				ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН
					Сообщить("Не заполнен ИИН сотрудника:"+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				/////////////////////////				
				
				ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникНомерКартСчета",ВыборкаСотрудников.СотрудникКартСчет);
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.Сумма) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"Сумма",ВыборкаСотрудников.Сумма,,,Истина);
					ОбщаяСумма = ОбщаяСумма + ВыборкаСотрудников.Сумма;
				Иначе Сообщить("Не заполнена сумма заработной платы сотрудника:"+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "СОТРУДНИК"
			КонецЕсли;
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "СПИСОКСОТРУДНИКОВ"
		
		Если ОбщаяСумма <> СтруктураДокумента.Документ.СуммаДокумента Тогда
			СуммаКомиссии = СтруктураДокумента.Документ.СуммаДокумента - ОбщаяСумма;
			ЗаписатьXMLОбъект(ЗаписьXML,"СуммаКомиссииБанка",СуммаКомиссии,,,Истина);
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", СтруктураДокумента.Документ.Организация);
			Отбор.Вставить("Банк", СтруктураДокумента.Документ.СчетКонтрагента.Банк);
			ЗначеияРегистра = РегистрыСведений.КодыОрганизацийВБанковскойСистеме.Получить(Отбор);
			ЗаписатьXMLОбъект(ЗаписьXML,"КодОрганизацииВБанковскойСистеме", ЗначеияРегистра.КодОрганизации);
		КонецЕсли;
		
	ИначеЕсли ПеречислениеПоИЛ_Есть="1" Тогда 	
		
		ЗаписатьОбщиеРеквизитыВXML(ЗаписьXML, СтруктураДокумента, КоллекцияРеквизитов, Ложь);
		
		ЗаписатьXMLОбъект(ЗаписьXML,"СписокПолучателейПоИЛ",,1);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.НаименованиеПолное КАК СТРОКА(1000)) КАК ПолучательПоИЛФИО,
		|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.РНН КАК ПолучательПоИЛРНН,
		|	ИЛПеречислениеПолучателямИсполнительныеЛисты.СуммаСборов,
		|	ИЛПеречислениеПолучателямИсполнительныеЛисты.СуммаВзаиморасчетов,
		|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Ссылка.СпособПеречисления КАК ПеречислятьЧерез,
		|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.ОсновнойБанковскийСчет.Банк.Наименование КАК БанкНаименвание,
		|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.ОсновнойБанковскийСчет.Банк." + ИмяРеквизитаБИК + " КАК БанкБИК,
		|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.ОсновнойБанковскийСчет.НомерСчета КАК ПолучательПоИЛИИК,
		|	ВЫРАЗИТЬ(КонтактнаяИнф.Представление КАК СТРОКА(1000)) КАК ПолучательПоИЛАдрес,
		|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.ИдентификационныйКодЛичности КАК ПолучательПоИЛБИН_ИИН
		|ИЗ
		|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателямИсполнительныеЛисты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ПлатежноеПоручениеИсходящееПеречислениеПоИсполнительнымЛистам.Документ КАК Документ
		|		ИЗ
		|			Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПоИсполнительнымЛистам КАК ПлатежноеПоручениеИсходящееПеречислениеПоИсполнительнымЛистам
		|		ГДЕ
		|			ПлатежноеПоручениеИсходящееПеречислениеПоИсполнительнымЛистам.Ссылка = &парамДокументСсылка) КАК ВложенныйЗапрос
		|		ПО ИЛПеречислениеПолучателямИсполнительныеЛисты.Ссылка = ВложенныйЗапрос.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК Представление,
		|			КонтактнаяИнформация.Объект КАК Объект
		|		ИЗ
		|			РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ГДЕ
		|			КонтактнаяИнформация.Вид = &парамВид) КАК КонтактнаяИнф
		|		ПО ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель = КонтактнаяИнф.Объект";
		Запрос.УстановитьПараметр("парамДокументСсылка",СтруктураДокумента.Документ); 
		Запрос.УстановитьПараметр("парамДата", СтруктураДокумента.Документ.Дата);
		Запрос.УстановитьПараметр("парамВид", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		ВыборкаПолучателей = Запрос.Выполнить().Выбрать();
		
		ОбщаяСумма = 0;
		Пока ВыборкаПолучателей.Следующий() Цикл
			Если НЕ ПустаяСтрока(ВыборкаПолучателей.ПолучательПоИЛФИО) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"ПолучательПоИЛ",,1, Новый Структура("ФИО", СокрЛП(ВыборкаПолучателей.ПолучательПоИЛФИО)));
				Если НЕ ПустаяСтрока(ВыборкаПолучателей.ПолучательПоИЛРНН) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"ПолучательПоИЛРНН",ВыборкаПолучателей.ПолучательПоИЛРНН);
				ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН
					Сообщить("Не заполнен РНН получателя по исполнительным листам:"+ВыборкаПолучателей.ПолучательПоИЛФИО);
				КонецЕсли;
				
				
				/////////////////////////
				Если НЕ ПустаяСтрока(ВыборкаПолучателей.ПолучательПоИЛБИН_ИИН) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"ПолучательПоИЛБИН_ИИН",ВыборкаПолучателей.ПолучательПоИЛБИН_ИИН);
				ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН
					Сообщить("Не заполнен БИН/ИИН получателя по исполнительным листам:"+ВыборкаПолучателей.ПолучательПоИЛФИО);
				КонецЕсли;
				/////////////////////////
				
				Если ВыборкаПолучателей.ПеречислятьЧерез = Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезБанк Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"ПолучательПоИЛБанкНаименование",ВыборкаПолучателей.БанкНаименвание);
					ЗаписатьXMLОбъект(ЗаписьXML,"ПолучательПоИЛБанкБИК",ВыборкаПолучателей.БанкБИК);
					ЗаписатьXMLОбъект(ЗаписьXML,"ПолучательПоИЛИИК",ВыборкаПолучателей.ПолучательПоИЛИИК);
				Иначе
					ЗаписатьXMLОбъект(ЗаписьXML,"ПолучательПоИЛАдрес",ВыборкаПолучателей.ПолучательПоИЛАдрес);
				КонецЕсли;
				Если НЕ ПустаяСтрока(ВыборкаПолучателей.СуммаВзаиморасчетов) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"Сумма",ВыборкаПолучателей.СуммаВзаиморасчетов,,,Истина);
					ОбщаяСумма = ОбщаяСумма + ВыборкаПолучателей.СуммаВзаиморасчетов;
				Иначе Сообщить("Не заполнена сумма к перечислению по исполнительным листам для получателя:"+ВыборкаПолучателей.ПолучательПоИЛФИО);
				КонецЕсли;
				ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "ПОЛУЧАТЕЛЬПОИЛ"
			КонецЕсли;
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "СПИСОКПОЛУЧАТЕЛЕЙПОИЛ"
		
		Если ОбщаяСумма <> СтруктураДокумента.Документ.СуммаДокумента Тогда
			СуммаКомиссии = СтруктураДокумента.Документ.СуммаДокумента - ОбщаяСумма;
			ЗаписатьXMLОбъект(ЗаписьXML,"СуммаКомиссииБанка",СуммаКомиссии,,,Истина);
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", СтруктураДокумента.Документ.Организация);
			Отбор.Вставить("Банк", СтруктураДокумента.Документ.СчетКонтрагента.Банк);
			ЗначеияРегистра = РегистрыСведений.КодыОрганизацийВБанковскойСистеме.Получить(Отбор);
			Если ЗначеияРегистра <> Неопределено Тогда
				Если Не ПустаяСтрока(ЗначеияРегистра.КодОрганизации) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"КодОрганизацииВБанковскойСистеме", ЗначеияРегистра.КодОрганизации);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПеречислениеПодотчетнику_Есть="1" Тогда 	
		
		ЗаписатьОбщиеРеквизитыВXML(ЗаписьXML, СтруктураДокумента, КоллекцияРеквизитов, Ложь);
		
		ЗаписатьXMLОбъект(ЗаписьXML,"СПИСОКСОТРУДНИКОВ",,1);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПеречислениеВПодотчет.ФизЛицо.Наименование КАК НаименованиеФизЛица,
		|	ВЫБОР
		|		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.РНН
		|		ИНАЧЕ ПеречислениеВПодотчет.ФизЛицо.РНН
		|	КОНЕЦ КАК РНН,
		|	ПеречислениеВПодотчет.НомерКартСчета КАК НомерКартСчета,
		|	ЕСТЬNULL(ПеречислениеВПодотчет.Ссылка.СчетКонтрагента.Банк.Наименование, """") КАК БанкКонтрагента,
		|	ВЫБОР
		|		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Фамилия
		|		ИНАЧЕ ФИОФизЛиц.Фамилия
		|	КОНЕЦ КАК Фамилия,
		|	ВЫБОР
		|		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Имя
		|		ИНАЧЕ ФИОФизЛиц.Имя
		|	КОНЕЦ КАК Имя,
		|	ВЫБОР
		|		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Отчество
		|		ИНАЧЕ ФИОФизЛиц.Отчество
		|	КОНЕЦ КАК Отчество,
		|	СУММА(ВЫБОР
		|			КОГДА ПеречислениеВПодотчет.СуммаПлатежа ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ ПеречислениеВПодотчет.СуммаПлатежа
		|		КОНЕЦ) КАК СуммаКПеречислению,
		|	ВЫБОР
		|		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.ИдентификационныйКодЛичности
		|		ИНАЧЕ ПеречислениеВПодотчет.ФизЛицо.ИдентификационныйКодЛичности
		|	КОНЕЦ КАК ПодотчетникБИН_ИИН
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеВПодотчет КАК ПеречислениеВПодотчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛиц
		|		ПО (ФИОФизЛиц.ФизЛицо = ПеречислениеВПодотчет.ФизЛицо)
		|ГДЕ
		|	ПеречислениеВПодотчет.Ссылка = &парамДокументСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПеречислениеВПодотчет.ФизЛицо.Наименование,
		|	ВЫБОР
		|		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.РНН
		|		ИНАЧЕ ПеречислениеВПодотчет.ФизЛицо.РНН
		|	КОНЕЦ,
		|	ПеречислениеВПодотчет.НомерКартСчета,
		|	ЕСТЬNULL(ПеречислениеВПодотчет.Ссылка.СчетКонтрагента.Банк.Наименование, """"),
		|	ВЫБОР
		|		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Фамилия
		|		ИНАЧЕ ФИОФизЛиц.Фамилия
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Имя
		|		ИНАЧЕ ФИОФизЛиц.Имя
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Отчество
		|		ИНАЧЕ ФИОФизЛиц.Отчество
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ПеречислениеВПодотчет.НомерКартСчета.ИдентификационныйКодЛичности
		|		ИНАЧЕ ПеречислениеВПодотчет.ФизЛицо.ИдентификационныйКодЛичности
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Фамилия,
		|	Имя,
		|	Отчество";
		
		Запрос.УстановитьПараметр("парамДокументСсылка",СтруктураДокумента.Документ); 
		Запрос.УстановитьПараметр("парамДата", СтруктураДокумента.Документ.Дата);
		ВыборкаПодотчетников = Запрос.Выполнить().Выбрать();
		
		ОбщаяСумма = 0;
		Пока ВыборкаПодотчетников.Следующий() Цикл
			Если НЕ ПустаяСтрока(ВыборкаПодотчетников.НаименованиеФизЛица) Тогда
				Если ПустаяСтрока(ВыборкаПодотчетников.НомерКартСчета) Тогда
					Сообщить("Не указан номер карт-счета подотчетника:"+ВыборкаПодотчетников.НаименованиеФизЛица);
				КонецЕсли;
				ЗаписатьXMLОбъект(ЗаписьXML,"СОТРУДНИК",,1, Новый Структура("ФИО", СокрЛП(ВыборкаПодотчетников.Фамилия) + " " + СокрЛП(ВыборкаПодотчетников.Имя) + " " + СокрЛП(ВыборкаПодотчетников.Отчество)));
				Если НЕ ПустаяСтрока(ВыборкаПодотчетников.РНН) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникРНН",ВыборкаПодотчетников.РНН);
				ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН
					Сообщить("Не заполнен РНН подотчетника:"+ВыборкаПодотчетников.НаименнованиеФизЛица);
				КонецЕсли;
				
				
				////////////////////
				Если НЕ ПустаяСтрока(ВыборкаПодотчетников.ПодотчетникБИН_ИИН) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникБИН_ИИН", ВыборкаПодотчетников.ПодотчетникБИН_ИИН);
				ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН
					Сообщить("Не заполнен БИН/ИИН подотчетника:" + ВыборкаПодотчетников.НаименованиеФизЛица);
				КонецЕсли;
				///////////////////			  
				                              
				
				ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникНомерКартСчета",ВыборкаПодотчетников.НомерКартСчета);
				Если НЕ ПустаяСтрока(ВыборкаПодотчетников.СуммаКПеречислению) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"Сумма",ВыборкаПодотчетников.СуммаКПеречислению,,,Истина);
					ОбщаяСумма = ОбщаяСумма + ВыборкаПодотчетников.СуммаКПеречислению;
				Иначе 
					Сообщить("Не заполнена сумма выдачи в подотчет для подотчетника:"+ВыборкаПодотчетников.НаименованиеФизЛица);
				КонецЕсли;
				ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "Подотчетник"
			КонецЕсли;
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "СписокПодотчеттников"
		
		Если ОбщаяСумма <> СтруктураДокумента.Документ.СуммаДокумента Тогда
			СуммаКомиссии = СтруктураДокумента.Документ.СуммаДокумента - ОбщаяСумма;
			ЗаписатьXMLОбъект(ЗаписьXML,"СуммаКомиссииБанка",СуммаКомиссии,,,Истина);
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", СтруктураДокумента.Документ.Организация);
			Отбор.Вставить("Банк", СтруктураДокумента.Документ.СчетКонтрагента.Банк);
			ЗначеияРегистра = РегистрыСведений.КодыОрганизацийВБанковскойСистеме.Получить(Отбор);
			Если ЗначеияРегистра <> Неопределено Тогда
				Если Не ПустаяСтрока(ЗначеияРегистра.КодОрганизации) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"КодОрганизацииВБанковскойСистеме", ЗначеияРегистра.КодОрганизации);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ЗаписатьОбщиеРеквизитыВXML(ЗаписьXML, СтруктураДокумента, КоллекцияРеквизитов, Истина);
		
	КонецЕсли;
	
	ЗаписатьXMLОбъект(ЗаписьXML,"Валюта",СокрЛП(СтруктураДокумента.СчетОрганизации.ВалютаДенежныхСредств.Наименование));
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование Как Наименование,
	               |	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо.Ссылка КАК ОТВ
	               |ИЗ
	               |	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	               |		,
	               |		ОтветственноеЛицо.Ссылка = &ГлавныйБухгалтер
	               |		    ИЛИ ОтветственноеЛицо.Ссылка = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
	               |ГДЕ
	               |	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница = &Организация";
				   
	Если ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда
		СтруктурнаяЕдиница = ?(СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации, Организация, СтруктурноеПодразделение);
	Иначе 
		СтруктурнаяЕдиница = Организация;
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	Запрос.УстановитьПараметр("Руководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Отв=Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда 
			        ФИО = Выборка.Наименование;
					Фамилия  = ВыделитьСлово(ФИО, 1);
            		Имя      = ВыделитьСлово(ФИО, 2);
					Отчество = ВыделитьСлово(ФИО, 3);
			ЗаписатьXMLОбъект(ЗаписьXML,"ГлавныйБухгалтер",(СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+ "."));
		КонецЕсли;
	    Если Выборка.Отв=Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда 
			        ФИО = Выборка.Наименование;
					Фамилия  = ВыделитьСлово(ФИО, 1);
            		Имя      = ВыделитьСлово(ФИО, 2);
					Отчество = ВыделитьСлово(ФИО, 3);
			ЗаписатьXMLОбъект(ЗаписьXML,"Руководитель",(СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+ "."));
		КонецЕсли;
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "СекцияДокумент"
	
КонецПроцедуры

Процедура Выгрузить(ДокументыНаЭкспорт) Экспорт //+
	//ЦС
	//Получаем банки, где по правилам в заголовке нужно прописывать GROSS CLEAR
	МассивБанковСОбособленнымУчетом = ПолучитьМассивБанковСОбособленнымУчетом();
	//ЦС
	Если НЕ ВыгружатьВXMLФормате Тогда
		Если КлиентБанка = "ККБ OnLine-Bank" тогда
			ПотокВыгрузки = Новый ТекстовыйДокумент();
			Для Каждого СтрокаСекции  Из ДокументыНаЭкспорт Цикл
				Если НЕ(СтрокаСекции.Выгружать)Тогда
					Продолжить;
				КонецЕсли;
				
				// Формируем заголовок
				ПотокВыгрузки.ДобавитьСтроку("{1:F01K059260000000010228724}");
				//ЦС
				Если МассивБанковСОбособленнымУчетом.Найти(СтрокаСекции.счеторганизации.Банк) = Неопределено  тогда
					ПотокВыгрузки.ДобавитьСтроку("{2:O100SCLEAR00000000000000000106190951U}");
				Иначе
					Если СтрокаСекции.суммадокумента >= 5000000 тогда
						ПотокВыгрузки.ДобавитьСтроку("{2:O100SGROSS00000000000000000106190951U}");	
					Иначе 
						Если ТекущаяДата() > НачалоДня(ТекущаяДата())+46800 тогда
							ПотокВыгрузки.ДобавитьСтроку("{2:O100SGROSS00000000000000000106190951U}");
						иначе
							ПотокВыгрузки.ДобавитьСтроку("{2:O100SCLEAR00000000000000000106190951U}");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				//ЦС
				
				ПотокВыгрузки.ДобавитьСтроку("{4:");
				ПотокВыгрузки.ДобавитьСтроку(":20:REFERENCE");
				ПотокВыгрузки.ДобавитьСтроку(":32A:"+Формат(СтрокаСекции.ДатаДокумента, "ДФ=""ггММдд""") + "KZT" + Формат(СтрокаСекции.СуммаДокумента, "ЧЦ=21; ЧДЦ=2; ЧРД=,; ЧРГ=; ЧГ=0,0"));
				ПотокВыгрузки.ДобавитьСтроку(":50:/D/"+СтрокаСекции.НомерСчетаОрганизации);
				Плательщик= "/NAME/" + СокрЛП(СтрокаСекции.ПлательщикНаименование);
				Пока СтрДлина(Плательщик) > 0 Цикл
					ПотокВыгрузки.ДобавитьСтроку(Сред(Плательщик, 1, 60));
					Плательщик = СокрЛП(Сред(Плательщик, 61));
				КонецЦикла;
				
				//ПотокВыгрузки.ДобавитьСтроку("/NAME/"+СтрокаСекции.ПлательщикНаименование);
				ПотокВыгрузки.ДобавитьСтроку("/IDN/"+СтрокаСекции.ПлательщикБИН_ИИН);
				Запрос = Новый Запрос;
				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование Как Наименование,
				|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо.Ссылка КАК ОТВ
				|ИЗ
				|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
				|		,
				|		ОтветственноеЛицо.Ссылка = &ГлавныйБухгалтер
				|		    ИЛИ ОтветственноеЛицо.Ссылка = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
				|ГДЕ
				|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница = &Организация";
				
				Запрос.УстановитьПараметр("Организация",Организация);
				Запрос.УстановитьПараметр("ГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтерДляПодписиБанковскихДокументов);
				Запрос.УстановитьПараметр("Руководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
				Запрос.Текст = ТекстЗапроса;
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Если Выборка.Отв=Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда 
						ФИО = Выборка.Наименование;
						Фамилия  = ВыделитьСлово(ФИО, 1);
						Имя      = ВыделитьСлово(ФИО, 2);
						Отчество = ВыделитьСлово(ФИО, 3);
						ПотокВыгрузки.ДобавитьСтроку("/CHIEF/"+СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+ ".");
					КонецЕсли;
					Если Выборка.Отв=Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтерДляПодписиБанковскихДокументов Тогда 
						ФИО = Выборка.Наименование;
						Фамилия  = ВыделитьСлово(ФИО, 1);
						Имя      = ВыделитьСлово(ФИО, 2);
						Отчество = ВыделитьСлово(ФИО, 3);
						ПотокВыгрузки.ДобавитьСтроку("/MAINBK/"+СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+".");
					КонецЕсли;
				КонецЦикла;
				
				НомерПП = ОбщегоНазначения.ПолучитьНомерНаПечать(СтрокаСекции.Документ, глСписокПрефиксовУзлов);
				//ПотокВыгрузки.ДобавитьСтроку("/CHIEF/"+ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование);
				//ПотокВыгрузки.ДобавитьСтроку("/MAINBK/"+ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование);
				ПотокВыгрузки.ДобавитьСтроку("/IRS/"+ЛЕВ(СтрокаСекции.ПлательщикКБЕ,1));
				ПотокВыгрузки.ДобавитьСтроку("/SECO/"+ПРАВ(СтрокаСекции.ПлательщикКБЕ,1));
				ПотокВыгрузки.ДобавитьСтроку(":52B:"+СтрокаСекции.ПлательщикБанкБИК);
				ПотокВыгрузки.ДобавитьСтроку(":57B:"+СтрокаСекции.ПолучательБанкБИК);
				ПотокВыгрузки.ДобавитьСтроку(":59:"+СтрокаСекции.НомерСчетаКонтрагента);
				ПотокВыгрузки.ДобавитьСтроку("/NAME/"+СтрокаСекции.Контрагент);
				ПотокВыгрузки.ДобавитьСтроку("/IDN/"+СтрокаСекции.ПолучательБИН_ИИН);
				ПотокВыгрузки.ДобавитьСтроку("/IRS/"+ЛЕВ(СтрокаСекции.ПолучательКБЕ,1));
				ПотокВыгрузки.ДобавитьСтроку("/SECO/"+ПРАВ(СтрокаСекции.ПолучательКБЕ,1));
				ПотокВыгрузки.ДобавитьСтроку(":70:/NUM/"+СокрЛП(НомерПП));
				ПотокВыгрузки.ДобавитьСтроку("/VO/01");
				ПотокВыгрузки.ДобавитьСтроку("/DATE/"+Формат(СтрокаСекции.ДатаВалютирования,"ДФ=""ггММдд"""));
				ПотокВыгрузки.ДобавитьСтроку("/SEND/07");
				ПотокВыгрузки.ДобавитьСтроку("/KNP/"+СтрокаСекции.КодНазначенияПлатежа);
				ПотокВыгрузки.ДобавитьСтроку("/BCLASS/"+СтрокаСекции.КодБюджетнойКлассификации);
				ТекстНазначенияПлатежа = "/ASSIGN/" + СокрЛП(СтрокаСекции.НазначениеПлатежа);
				Пока СтрДлина(ТекстНазначенияПлатежа) > 0 Цикл
					ПотокВыгрузки.ДобавитьСтроку(Сред(ТекстНазначенияПлатежа, 1, 60));
					ТекстНазначенияПлатежа = СокрЛП(Сред(ТекстНазначенияПлатежа, 61));
				КонецЦикла;
				
				//ПотокВыгрузки.ДобавитьСтроку("/ASSIGN/"+СтрокаСекции.НазначениеПлатежа);
				ПотокВыгрузки.ДобавитьСтроку("-}");
			КонецЦикла;
			
			// записываем на диск
			
			Если Кодировка = "DOS" Тогда
				Попытка
					ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.OEM);
					Сообщить("Данные выгружены в файл " + ФайлВыгрузки);
					//ЦС
					РегистрыСведений.ЦС_ИсторияБанкКлиент.СохранитьНастройкиНаСервере(ДокументыНаЭкспорт);
					//ЦС
				Исключение
					Сообщить("Не удалось записать данные в файл. Возможно, отсутствует каталог." + ФайлВыгрузки);
				КонецПопытки
			ИначеЕсли Кодировка = "UTF8" Тогда
				Попытка
					ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.UTF8);
					Сообщить("Данные выгружены в файл " + ФайлВыгрузки);
					//ЦС
					РегистрыСведений.ЦС_ИсторияБанкКлиент.СохранитьНастройкиНаСервере(ДокументыНаЭкспорт);
					//ЦС
				Исключение
					Сообщить("Не удалось записать данные в файл. Возможно, отсутствует каталог." + ФайлВыгрузки);
				КонецПопытки
				
			Иначе
				Попытка
					ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.ANSI);
					Сообщить("Данные выгружены в файл " + ФайлВыгрузки);
					//ЦС
					РегистрыСведений.ЦС_ИсторияБанкКлиент.СохранитьНастройкиНаСервере(ДокументыНаЭкспорт);
					//ЦС
				Исключение
					Сообщить("Не удалось записать данные в файл. Возможно, отсутствует каталог." + ФайлВыгрузки);
				КонецПопытки
				
			КонецЕсли;
			
		ИначеЕсли КлиентБанка = "Банк Астана" тогда
			ПотокВыгрузки = Новый ТекстовыйДокумент();
			Для Каждого СтрокаСекции  Из ДокументыНаЭкспорт Цикл
				Если НЕ(СтрокаСекции.Выгружать)Тогда
					Продолжить;
				КонецЕсли;
				
				// Формируем заголовок
				ПотокВыгрузки.ДобавитьСтроку("1CClientBankExchange");
								
				ПотокВыгрузки.ДобавитьСтроку("ВерсияФормата=1.01");
				ПотокВыгрузки.ДобавитьСтроку("Кодировка=" + Кодировка);
				ПотокВыгрузки.ДобавитьСтроку("Отправитель=" + Метаданные.Синоним);
				ПотокВыгрузки.ДобавитьСтроку("Получатель=" + КлиентБанка);
				ПотокВыгрузки.ДобавитьСтроку("ДатаСоздания=" + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy"));
				ПотокВыгрузки.ДобавитьСтроку("ВремяСоздания=" + Формат(ТекущаяДата(), "ДЛФ=T"));
				ПотокВыгрузки.ДобавитьСтроку("ДатаНачала=" + Формат(НачПериода, "ДФ=dd.MM.yyyy"));
				ПотокВыгрузки.ДобавитьСтроку("ДатаКонца=" + Формат(КонПериода, "ДФ=dd.MM.yyyy"));
				
				Для Каждого Строка Из ТаблицаСчетов Цикл
					Если Строка.Пометка = Истина Тогда
						ПотокВыгрузки.ДобавитьСтроку("РасчСчет=" + Строка.Счет.НомерСчета);
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого Строка Из ТаблицаДокументов Цикл
					Если Строка.Пометка = Истина Тогда
						ИмяДокумента = СокрЛП(Строка.ДокументКратко);
						ПотокВыгрузки.ДобавитьСтроку("Документ=" + ИмяДокумента);
						ПотокВыгрузки.ДобавитьСтроку("СекцияДокумент=" + ИмяДокумента);
					КонецЕсли;	
				КонецЦикла; 			
				
				// выводим отмеченные секции документов
				//Для Каждого СтрокаСекции из ДокументыНаЭкспорт Цикл
				//	Если НЕ(СтрокаСекции.Выгружать)Тогда
				//		Продолжить;
				//	КонецЕсли;
				//	Буфер = ПолучитьСекциюДокумент(СтрокаСекции, ДокументыНаЭкспорт.Колонки);
				//	Если ПустаяСтрока(Буфер) Тогда
				//		Сообщить("Документ:" + СокрЛП(СтрокаСекции.Документ) + " не выгружен!", СтатусСообщения.Важное);
				//		Продолжить;
				//	КонецЕсли;
				//	КоличествоСрокСекции = СтрЧислоСтрок(Буфер);
				//	Для Сч = 1 По КоличествоСрокСекции Цикл
				//		ПотокВыгрузки.ДобавитьСтроку(СтрПолучитьСтроку(Буфер, Сч));
				//	КонецЦикла;
				//КонецЦикла;
			
				НомерПП = ОбщегоНазначения.ПолучитьНомерНаПечать(СтрокаСекции.Документ, глСписокПрефиксовУзлов);
				ПотокВыгрузки.ДобавитьСтроку("НомерДокумента="+Прав(НомерПП,4));
				ПотокВыгрузки.ДобавитьСтроку("ДатаДокумента="+Формат(СтрокаСекции.Документ.ДатаВыписки, "ДФ=dd.MM.yyyy"));
				ПотокВыгрузки.ДобавитьСтроку("Сумма="+Формат(СтрокаСекции.СуммаДокумента, "ЧРД=.; ЧГ=0"));
				ПотокВыгрузки.ДобавитьСтроку("ПенсионныеОтчисления=0");                 
				ПотокВыгрузки.ДобавитьСтроку("СоциальныеОтчисления=0");
				ПотокВыгрузки.ДобавитьСтроку("ПлательщикНаименование="+СтрокаСекции.ПлательщикНаименование);
				ПотокВыгрузки.ДобавитьСтроку("ПлательщикБИН_ИИН="+СтрокаСекции.ПлательщикБИН_ИИН);
				ПотокВыгрузки.ДобавитьСтроку("ПлательщикКБЕ="+СтрокаСекции.ПлательщикКБЕ);
				ПотокВыгрузки.ДобавитьСтроку("ПлательщикИИК="+СтрокаСекции.НомерСчетаОрганизации);
				ПотокВыгрузки.ДобавитьСтроку("ПлательщикБанкНаименование="+СтрокаСекции.Документ.СчетОрганизации.Банк);
				ПотокВыгрузки.ДобавитьСтроку("ПлательщикБанкБИК="+СтрокаСекции.ПлательщикБанкБИК);
				ПотокВыгрузки.ДобавитьСтроку("ПолучательНаименование="+СтрокаСекции.Контрагент);
				ПотокВыгрузки.ДобавитьСтроку("ПолучательБИН_ИИН="+СтрокаСекции.ПолучательБИН_ИИН);
				ПотокВыгрузки.ДобавитьСтроку("ПолучательКБЕ="+СтрокаСекции.ПолучательКБЕ);
				ПотокВыгрузки.ДобавитьСтроку("ПолучательИИК="+СтрокаСекции.НомерСчетаКонтрагента);
				ПотокВыгрузки.ДобавитьСтроку("ПолучательБанкНаименование="+СтрокаСекции.Документ.СчетКонтрагента.Банк);				
				ПотокВыгрузки.ДобавитьСтроку("ПолучательБанкБИК="+СтрокаСекции.ПолучательБанкБИК);
				ПотокВыгрузки.ДобавитьСтроку("НазначениеПлатежа=" + СокрЛП(СтрокаСекции.НазначениеПлатежа));
				ПотокВыгрузки.ДобавитьСтроку("КодНазначенияПлатежа="+СтрокаСекции.КодНазначенияПлатежа);
				ПотокВыгрузки.ДобавитьСтроку("ДатаВалютирования="+Формат(СтрокаСекции.ДатаВалютирования,"ДФ=dd.MM.yyyy"));
				Запрос = Новый Запрос;
				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование Как Наименование,
				|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо.Ссылка КАК ОТВ
				|ИЗ
				|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
				|		,
				|		ОтветственноеЛицо.Ссылка = &ГлавныйБухгалтер
				|		    ИЛИ ОтветственноеЛицо.Ссылка = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
				|ГДЕ
				|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница = &Организация";
				
				Запрос.УстановитьПараметр("Организация",Организация);
				Запрос.УстановитьПараметр("ГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтерДляПодписиБанковскихДокументов);
				Запрос.УстановитьПараметр("Руководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
				Запрос.Текст = ТекстЗапроса;
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Если Выборка.Отв=Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтерДляПодписиБанковскихДокументов Тогда 
						ФИО = Выборка.Наименование;
						Фамилия  = ВыделитьСлово(ФИО, 1);
						Имя      = ВыделитьСлово(ФИО, 2);
						Отчество = ВыделитьСлово(ФИО, 3);
						ПотокВыгрузки.ДобавитьСтроку("ГлавныйБухгалтер="+СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+ ".");
					КонецЕсли;
					Если Выборка.Отв=Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда 
						ФИО = Выборка.Наименование;
						Фамилия  = ВыделитьСлово(ФИО, 1);
						Имя      = ВыделитьСлово(ФИО, 2);
						Отчество = ВыделитьСлово(ФИО, 3);
						ПотокВыгрузки.ДобавитьСтроку("Руководитель="+СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+ ".");
					КонецЕсли; 					
				КонецЦикла;
							
				ПотокВыгрузки.ДобавитьСтроку("КонецДокумента"); 				
			КонецЦикла;
			
			ПотокВыгрузки.ДобавитьСтроку("КонецФайла");
			
			// записываем на диск
			
			Если Кодировка = "DOS" Тогда
				Попытка
					ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.OEM);
					Сообщить("Данные выгружены в файл " + ФайлВыгрузки);
					//ЦС
					РегистрыСведений.ЦС_ИсторияБанкКлиент.СохранитьНастройкиНаСервере(ДокументыНаЭкспорт);
					//ЦС
				Исключение
					Сообщить("Не удалось записать данные в файл. Возможно, отсутствует каталог." + ФайлВыгрузки);
				КонецПопытки
			ИначеЕсли Кодировка = "UTF8" Тогда
				Попытка
					ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.UTF8);
					Сообщить("Данные выгружены в файл " + ФайлВыгрузки);
					//ЦС
					РегистрыСведений.ЦС_ИсторияБанкКлиент.СохранитьНастройкиНаСервере(ДокументыНаЭкспорт);
					//ЦС
				Исключение
					Сообщить("Не удалось записать данные в файл. Возможно, отсутствует каталог." + ФайлВыгрузки);
				КонецПопытки
				
			Иначе
				Попытка
					ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.ANSI);
					Сообщить("Данные выгружены в файл " + ФайлВыгрузки);
					//ЦС
					РегистрыСведений.ЦС_ИсторияБанкКлиент.СохранитьНастройкиНаСервере(ДокументыНаЭкспорт);
					//ЦС
				Исключение
					Сообщить("Не удалось записать данные в файл. Возможно, отсутствует каталог." + ФайлВыгрузки);
				КонецПопытки
				
			КонецЕсли;
			
		ИначеЕсли КлиентБанка = "ККБ Клиент-Bank" тогда
			ПотокВыгрузки = Новый ТекстовыйДокумент();
			Для Каждого СтрокаСекции  Из ДокументыНаЭкспорт Цикл
				Если НЕ(СтрокаСекции.Выгружать)Тогда
					Продолжить;
				КонецЕсли;
				
				// Формируем заголовок
				ПотокВыгрузки.ДобавитьСтроку("{1:F01K059260000000010228724}");
				//ЦС
				Если МассивБанковСОбособленнымУчетом.Найти(СтрокаСекции.счеторганизации.Банк) = Неопределено  тогда
					ПотокВыгрузки.ДобавитьСтроку("{2:O100SCLEAR00000000000000000106190951U}");
				Иначе
					Если СтрокаСекции.суммадокумента >= 5000000 тогда
						ПотокВыгрузки.ДобавитьСтроку("{2:O100SGROSS00000000000000000106190951U}");	
					Иначе 
						Если ТекущаяДата() > НачалоДня(ТекущаяДата())+46800 тогда
							ПотокВыгрузки.ДобавитьСтроку("{2:O100SGROSS00000000000000000106190951U}");
						иначе
							ПотокВыгрузки.ДобавитьСтроку("{2:O100SCLEAR00000000000000000106190951U}");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				//ЦС
				ПотокВыгрузки.ДобавитьСтроку("{4:");
				ПотокВыгрузки.ДобавитьСтроку(":20:REFERENCE");
				ПотокВыгрузки.ДобавитьСтроку(":32A:"+Формат(СтрокаСекции.ДатаДокумента, "ДФ=""ггММдд""") + "KZT" + Формат(СтрокаСекции.СуммаДокумента, "ЧЦ=21; ЧДЦ=2; ЧРД=,; ЧРГ=; ЧГ=0,0"));
				ПотокВыгрузки.ДобавитьСтроку(":50:/D/"+СтрокаСекции.НомерСчетаОрганизации);
				Плательщик= "/NAME/" + СокрЛП(СтрокаСекции.ПлательщикНаименование);
				Пока СтрДлина(Плательщик) > 0 Цикл
					ПотокВыгрузки.ДобавитьСтроку(Сред(Плательщик, 1, 60));
					Плательщик = СокрЛП(Сред(Плательщик, 61));
				КонецЦикла;
				
				//ПотокВыгрузки.ДобавитьСтроку("/NAME/"+СтрокаСекции.ПлательщикНаименование);
				ПотокВыгрузки.ДобавитьСтроку("/IDN/"+СтрокаСекции.ПлательщикБИН_ИИН);
				Запрос = Новый Запрос;
				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование Как Наименование,
				|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо.Ссылка КАК ОТВ
				|ИЗ
				|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
				|		,
				|		ОтветственноеЛицо.Ссылка = &ГлавныйБухгалтер
				|		    ИЛИ ОтветственноеЛицо.Ссылка = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
				|ГДЕ
				|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница = &Организация";
				
				Запрос.УстановитьПараметр("Организация",Организация);
				Запрос.УстановитьПараметр("ГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтерДляПодписиБанковскихДокументов);
				Запрос.УстановитьПараметр("Руководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
				Запрос.Текст = ТекстЗапроса;
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Если Выборка.Отв=Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда 
						ФИО = Выборка.Наименование;
						Фамилия  = ВыделитьСлово(ФИО, 1);
						Имя      = ВыделитьСлово(ФИО, 2);
						Отчество = ВыделитьСлово(ФИО, 3);
						ПотокВыгрузки.ДобавитьСтроку("/CHIEF/"+СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+ ".");
					КонецЕсли;
					Если Выборка.Отв=Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтерДляПодписиБанковскихДокументов Тогда 
						ФИО = Выборка.Наименование;
						Фамилия  = ВыделитьСлово(ФИО, 1);
						Имя      = ВыделитьСлово(ФИО, 2);
						Отчество = ВыделитьСлово(ФИО, 3);
						ПотокВыгрузки.ДобавитьСтроку("/MAINBK/"+СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+".");
					КонецЕсли;
				КонецЦикла;
				
				НомерПП = ОбщегоНазначения.ПолучитьНомерНаПечать(СтрокаСекции.Документ, глСписокПрефиксовУзлов);
				//ПотокВыгрузки.ДобавитьСтроку("/CHIEF/"+ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование);
				//ПотокВыгрузки.ДобавитьСтроку("/MAINBK/"+ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование);
				ПотокВыгрузки.ДобавитьСтроку("/IRS/"+ЛЕВ(СтрокаСекции.ПлательщикКБЕ,1));
				ПотокВыгрузки.ДобавитьСтроку("/SECO/"+ПРАВ(СтрокаСекции.ПлательщикКБЕ,1));
				ПотокВыгрузки.ДобавитьСтроку(":52B:"+СтрокаСекции.ПлательщикБанкБИК);
				ПотокВыгрузки.ДобавитьСтроку(":57B:"+СтрокаСекции.ПолучательБанкБИК);
				ПотокВыгрузки.ДобавитьСтроку(":59:"+СтрокаСекции.НомерСчетаКонтрагента);
				ПотокВыгрузки.ДобавитьСтроку("/NAME/"+СтрокаСекции.Контрагент);
				ПотокВыгрузки.ДобавитьСтроку("/IDN/"+СтрокаСекции.ПолучательБИН_ИИН);
				ПотокВыгрузки.ДобавитьСтроку("/IRS/"+ЛЕВ(СтрокаСекции.ПолучательКБЕ,1));
				ПотокВыгрузки.ДобавитьСтроку("/SECO/"+ПРАВ(СтрокаСекции.ПолучательКБЕ,1));
				ПотокВыгрузки.ДобавитьСтроку(":70:/NUM/"+СокрЛП(НомерПП));
				ПотокВыгрузки.ДобавитьСтроку("/VO/01");
				ПотокВыгрузки.ДобавитьСтроку("/DATE/"+Формат(СтрокаСекции.ДатаВалютирования,"ДФ=""ггММдд"""));
				ПотокВыгрузки.ДобавитьСтроку("/SEND/07");
				ПотокВыгрузки.ДобавитьСтроку("/KNP/"+СтрокаСекции.КодНазначенияПлатежа);
				ТекстНазначенияПлатежа = "/ASSIGN/" + СокрЛП(СтрокаСекции.НазначениеПлатежа);
				Пока СтрДлина(ТекстНазначенияПлатежа) > 0 Цикл
					ПотокВыгрузки.ДобавитьСтроку(Сред(ТекстНазначенияПлатежа, 1, 60));
					ТекстНазначенияПлатежа = СокрЛП(Сред(ТекстНазначенияПлатежа, 61));
				КонецЦикла;
				
				//ПотокВыгрузки.ДобавитьСтроку("/ASSIGN/"+СтрокаСекции.НазначениеПлатежа);
				ПотокВыгрузки.ДобавитьСтроку("-}");
			КонецЦикла;
			
			// записываем на диск
			
			Если Кодировка = "DOS" Тогда
				Попытка
					ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.OEM);
					Сообщить("Данные выгружены в файл " + ФайлВыгрузки);
					//ЦС
					РегистрыСведений.ЦС_ИсторияБанкКлиент.СохранитьНастройкиНаСервере(ДокументыНаЭкспорт);
					//ЦС
				Исключение
					Сообщить("Не удалось записать данные в файл. Возможно, отсутствует каталог." + ФайлВыгрузки);
				КонецПопытки
			ИначеЕсли Кодировка = "UTF8" Тогда
				Попытка
					ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.UTF8);
					Сообщить("Данные выгружены в файл " + ФайлВыгрузки);
					//ЦС
					РегистрыСведений.ЦС_ИсторияБанкКлиент.СохранитьНастройкиНаСервере(ДокументыНаЭкспорт);
					//ЦС
				Исключение
					Сообщить("Не удалось записать данные в файл. Возможно, отсутствует каталог." + ФайлВыгрузки);
				КонецПопытки
				
			Иначе
				Попытка
					ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.ANSI);
					Сообщить("Данные выгружены в файл " + ФайлВыгрузки);
					//ЦС
					РегистрыСведений.ЦС_ИсторияБанкКлиент.СохранитьНастройкиНаСервере(ДокументыНаЭкспорт);
					//ЦС
				Исключение
					Сообщить("Не удалось записать данные в файл. Возможно, отсутствует каталог." + ФайлВыгрузки);
				КонецПопытки
				
			КонецЕсли;
		ИначеЕсли КлиентБанка = "Банк ЦентрКредит Интернет-Клиент" тогда
			ПотокВыгрузки = Новый ТекстовыйДокумент();
			Для Каждого СтрокаСекции  Из ДокументыНаЭкспорт Цикл
				Если НЕ(СтрокаСекции.Выгружать)Тогда
					Продолжить;
				КонецЕсли;
				
				// Формируем заголовок
				ПотокВыгрузки.ДобавитьСтроку("{1:F01000000000000010000001}");
				ПотокВыгрузки.ДобавитьСтроку("{2:I100SGROSS000000U3003}");
				ПотокВыгрузки.ДобавитьСтроку("{4:");
				ПотокВыгрузки.ДобавитьСтроку(":20:REFERENCE");
				ПотокВыгрузки.ДобавитьСтроку(":32A:"+Формат(СтрокаСекции.ДатаДокумента, "ДФ=""ггММдд""") + "KZT" + Формат(СтрокаСекции.СуммаДокумента, "ЧЦ=10; ЧДЦ=2; ЧРД=,; ЧРГ=; ЧГ=0,0"));
				ПотокВыгрузки.ДобавитьСтроку(":50:/D/"+СтрокаСекции.НомерСчетаОрганизации);
				Плательщик= "/NAME/" + СокрЛП(СтрокаСекции.ПлательщикНаименование);
				Пока СтрДлина(Плательщик) > 0 Цикл
					ПотокВыгрузки.ДобавитьСтроку(Сред(Плательщик, 1, 60));
					Плательщик = СокрЛП(Сред(Плательщик, 61));
				КонецЦикла;

				//ПотокВыгрузки.ДобавитьСтроку("/NAME/"+СтрокаСекции.ПлательщикНаименование);
				ПотокВыгрузки.ДобавитьСтроку("/IDN/"+СтрокаСекции.ПлательщикБИН_ИИН);
				Запрос = Новый Запрос;
				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование Как Наименование,
				|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо.Ссылка КАК ОТВ
				|ИЗ
				|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
				|		,
				|		ОтветственноеЛицо.Ссылка = &ГлавныйБухгалтер
				|		    ИЛИ ОтветственноеЛицо.Ссылка = &Руководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследних
				|ГДЕ
				|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница = &Организация";
				
				Запрос.УстановитьПараметр("Организация",Организация);
				Запрос.УстановитьПараметр("ГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
				Запрос.УстановитьПараметр("Руководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
				Запрос.Текст = ТекстЗапроса;
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Если Выборка.Отв=Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда 
						ФИО = Выборка.Наименование;
						Фамилия  = ВыделитьСлово(ФИО, 1);
						Имя      = ВыделитьСлово(ФИО, 2);
						Отчество = ВыделитьСлово(ФИО, 3);
						ПотокВыгрузки.ДобавитьСтроку("/CHIEF/"+СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+ ".");
					КонецЕсли;
				КонецЦикла;
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Если Выборка.Отв=Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда 
						ФИО = Выборка.Наименование;
						Фамилия  = ВыделитьСлово(ФИО, 1);
						Имя      = ВыделитьСлово(ФИО, 2);
						Отчество = ВыделитьСлово(ФИО, 3);
						ПотокВыгрузки.ДобавитьСтроку("/MAINBK/"+СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+".");
					КонецЕсли;
                КонецЦикла;

				 НомерПП = ОбщегоНазначения.ПолучитьНомерНаПечать(СтрокаСекции.Документ, глСписокПрефиксовУзлов);
				//ПотокВыгрузки.ДобавитьСтроку("/CHIEF/"+ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование);
				//ПотокВыгрузки.ДобавитьСтроку("/MAINBK/"+ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование);
				ПотокВыгрузки.ДобавитьСтроку("/IRS/"+ЛЕВ(СтрокаСекции.ПлательщикКБЕ,1));
				ПотокВыгрузки.ДобавитьСтроку("/SECO/"+ПРАВ(СтрокаСекции.ПлательщикКБЕ,1));
				ПотокВыгрузки.ДобавитьСтроку(":52B:"+СтрокаСекции.ПлательщикБанкБИК);
				ПотокВыгрузки.ДобавитьСтроку(":57B:"+СтрокаСекции.ПолучательБанкБИК);
				ПотокВыгрузки.ДобавитьСтроку(":59:"+СтрокаСекции.НомерСчетаКонтрагента);
				ПотокВыгрузки.ДобавитьСтроку("/NAME/"+СтрокаСекции.Контрагент);
				ПотокВыгрузки.ДобавитьСтроку("/IDN/"+СтрокаСекции.ПолучательБИН_ИИН);
				ПотокВыгрузки.ДобавитьСтроку("/IRS/1");
				ПотокВыгрузки.ДобавитьСтроку("/SECO/9");
				ПотокВыгрузки.ДобавитьСтроку(":70:/NUM/"+СокрЛП(НомерПП));
				ПотокВыгрузки.ДобавитьСтроку("/VO/01");
                ПотокВыгрузки.ДобавитьСтроку("/DATE/"+Формат(СтрокаСекции.ДатаВалютирования,"ДФ=""ггММдд"""));
                ПотокВыгрузки.ДобавитьСтроку("/SEND/07");
                ПотокВыгрузки.ДобавитьСтроку("/KNP/"+СтрокаСекции.КодНазначенияПлатежа);
				ПотокВыгрузки.ДобавитьСтроку("/BCLASS/"+СтрокаСекции.КодБюджетнойКлассификации);
				ТекстНазначенияПлатежа = "/ASSIGN/" + СокрЛП(СтрокаСекции.НазначениеПлатежа);
				Пока СтрДлина(ТекстНазначенияПлатежа) > 0 Цикл
					ПотокВыгрузки.ДобавитьСтроку(Сред(ТекстНазначенияПлатежа, 1, 60));
					ТекстНазначенияПлатежа = СокрЛП(Сред(ТекстНазначенияПлатежа, 61));
				КонецЦикла;
				
				//ПотокВыгрузки.ДобавитьСтроку("/ASSIGN/"+СтрокаСекции.НазначениеПлатежа);
				ПотокВыгрузки.ДобавитьСтроку("-}");
			КонецЦикла;
						
            // записываем на диск
		
			Если Кодировка = "DOS" Тогда
				Попытка
					ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.OEM);
					Сообщить("Данные выгружены в файл " + ФайлВыгрузки);
					//ЦС
					РегистрыСведений.ЦС_ИсторияБанкКлиент.СохранитьНастройкиНаСервере(ДокументыНаЭкспорт);
					//ЦС
				Исключение
					Сообщить("Не удалось записать данные в файл. Возможно, отсутствует каталог." + ФайлВыгрузки);
				КонецПопытки
			ИначеЕсли Кодировка = "UTF8" Тогда
				Попытка
					ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.UTF8);
					Сообщить("Данные выгружены в файл " + ФайлВыгрузки);
					//ЦС
					РегистрыСведений.ЦС_ИсторияБанкКлиент.СохранитьНастройкиНаСервере(ДокументыНаЭкспорт);
					//ЦС
				Исключение
					Сообщить("Не удалось записать данные в файл. Возможно, отсутствует каталог." + ФайлВыгрузки);
				КонецПопытки
				
			Иначе
				Попытка
					ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.ANSI);
					Сообщить("Данные выгружены в файл " + ФайлВыгрузки);
					//ЦС
					РегистрыСведений.ЦС_ИсторияБанкКлиент.СохранитьНастройкиНаСервере(ДокументыНаЭкспорт);
					//ЦС
				Исключение
					Сообщить("Не удалось записать данные в файл. Возможно, отсутствует каталог." + ФайлВыгрузки);
				КонецПопытки
				
			КонецЕсли;
		иначе	
			
			ПотокВыгрузки = Новый ТекстовыйДокумент();
			
			// Формируем заголовок
			ПотокВыгрузки.ДобавитьСтроку("1CClientBankExchange");
			ПотокВыгрузки.ДобавитьСтроку("ВерсияФормата=2.00");
			
			ПотокВыгрузки.ДобавитьСтроку("Кодировка=" + Кодировка);
			ПотокВыгрузки.ДобавитьСтроку("Отправитель=" + Метаданные.Синоним);
			ПотокВыгрузки.ДобавитьСтроку("Получатель=" + КлиентБанка);
			ПотокВыгрузки.ДобавитьСтроку("ДатаСоздания=" + Формат(ТекущаяДата(),"ДЛФ=Д"));
			ПотокВыгрузки.ДобавитьСтроку("ВремяСоздания=" + Формат(ТекущаяДата(),"ДЛФ=В"));
			ПотокВыгрузки.ДобавитьСтроку("ДатаНачала=" + Формат(НачПериода,"ДЛФ=Д"));
			ПотокВыгрузки.ДобавитьСтроку("ДатаКонца=" + Формат(КонПериода,"ДЛФ=Д"));
			
			Для Каждого Строка Из ТаблицаСчетов Цикл
				Если Строка.Пометка = Истина Тогда
					ПотокВыгрузки.ДобавитьСтроку("РасчСчет=" + Строка.Счет.НомерСчета);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Строка Из ТаблицаДокументов Цикл
				Если Строка.Пометка = Истина Тогда
					ИмяДокумента = СокрЛП(Строка.ДокументКратко);
					ПотокВыгрузки.ДобавитьСтроку("Документ=" + ИмяДокумента);
				КонецЕсли;	
			КонецЦикла;
			
			// выводим отмеченные секции документов
			Для Каждого СтрокаСекции из ДокументыНаЭкспорт Цикл
				Если НЕ(СтрокаСекции.Выгружать)Тогда
					Продолжить;
				КонецЕсли;
				Буфер = ПолучитьСекциюДокумент(СтрокаСекции, ДокументыНаЭкспорт.Колонки);
				Если ПустаяСтрока(Буфер) Тогда
					Сообщить("Документ:" + СокрЛП(СтрокаСекции.Документ) + " не выгружен!", СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;
				КоличествоСрокСекции = СтрЧислоСтрок(Буфер);
				Для Сч = 1 По КоличествоСрокСекции Цикл
					ПотокВыгрузки.ДобавитьСтроку(СтрПолучитьСтроку(Буфер, Сч));
				КонецЦикла;
			КонецЦикла;
			
			// записываем на диск
			ПотокВыгрузки.ДобавитьСтроку("КонецФайла");
			Если Кодировка = "DOS" Тогда
				Попытка
					ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.OEM);
					Сообщить("Данные выгружены в файл " + ФайлВыгрузки);
					//ЦС
					РегистрыСведений.ЦС_ИсторияБанкКлиент.СохранитьНастройкиНаСервере(ДокументыНаЭкспорт);
					//ЦС
				Исключение
					Сообщить("Не удалось записать данные в файл. Возможно, отсутствует каталог." + ФайлВыгрузки);
				КонецПопытки
			ИначеЕсли Кодировка = "UTF8" Тогда
				Попытка
					ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.UTF8);
					Сообщить("Данные выгружены в файл " + ФайлВыгрузки);
					//ЦС
					РегистрыСведений.ЦС_ИсторияБанкКлиент.СохранитьНастройкиНаСервере(ДокументыНаЭкспорт);
					//ЦС
				Исключение
					Сообщить("Не удалось записать данные в файл. Возможно, отсутствует каталог." + ФайлВыгрузки);
				КонецПопытки
				
			Иначе
				Попытка
					ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.ANSI);
					Сообщить("Данные выгружены в файл " + ФайлВыгрузки);
					//ЦС
					РегистрыСведений.ЦС_ИсторияБанкКлиент.СохранитьНастройкиНаСервере(ДокументыНаЭкспорт);
					//ЦС
				Исключение
					Сообщить("Не удалось записать данные в файл. Возможно, отсутствует каталог." + ФайлВыгрузки);
				КонецПопытки
				
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ФайлВыгрузки);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьКомментарий("Файл выгрузки платежных документов из 1С:Предприятия в Банк-Клиент");
		ЗаписьXML.ЗаписатьНачалоЭлемента("XML1CClientBankExchange");
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi","http://www.w3.org/2001/XMLSchema-instance");
		ЗаписьXML.ЗаписатьАтрибут("ВерсияФормата", "1.0");
		ЗаписьXML.ЗаписатьАтрибут("Отправитель", СокрЛП(Метаданные.Синоним));
		ЗаписьXML.ЗаписатьАтрибут("Получатель", СокрЛП(КлиентБанка));
		ТекстВремени = Формат(ТекущаяДата(),"ДЛФ=В");
		Если Найти(ТекстВремени, ":") = 2 Тогда
			ТекстВремени = "0" + ТекстВремени;
		КонецЕсли;
		ТекстЗаписи = ПреобразоватьДату(ТекущаяДата()) + "T" + ТекстВремени;
		ЗаписьXML.ЗаписатьАтрибут("ДатаВремяСоздания", ТекстЗаписи);
		ТекстЗаписи = ПреобразоватьДату(НачПериода);
		ЗаписьXML.ЗаписатьАтрибут("ДатаНачала", ТекстЗаписи);
		ТекстЗаписи = ПреобразоватьДату(КонПериода);
		ЗаписьXML.ЗаписатьАтрибут("ДатаКонца", ТекстЗаписи);
		
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("РасчетныеСчета");
		Для каждого Строка Из ТаблицаСчетов Цикл
			Если Строка.Пометка = Истина Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("Счет");
				ЗаписьXML.ЗаписатьТекст(СокрЛП(Строка.Счет.НомерСчета));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ВидыПлатежныхДокументов");
		Для каждого Строка Из ТаблицаДокументов Цикл
			Если Строка.Пометка = Истина Тогда
				ИмяДокумента = СокрЛП(Строка.ДокументКратко);
				ЗаписьXML.ЗаписатьНачалоЭлемента("ВидДокумента");
				ЗаписьXML.ЗаписатьТекст(ИмяДокумента);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;	
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// выводим отмеченные секции документов
		Для Каждого СтрокаСекции из ДокументыНаЭкспорт Цикл
			Если НЕ(СтрокаСекции.Выгружать)Тогда
				Продолжить;
			КонецЕсли;
	 		ЗаписатьСекциюДокументВXML(ЗаписьXML, СтрокаСекции, ДокументыНаЭкспорт.Колонки);
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();
		Сообщить("Данные выгружены в файл " + ФайлВыгрузки);
	КонецЕсли;
КонецПроцедуры

////////////// ПОГОТОВКА ЗАГРУЗКИ //////////////////////////////////////////////////

Функция ПолучитьВариантНеПустых(ТипДокумента)
	
	Если (ТипДокумента < 3) ИЛИ (ТипДокумента = 11)  ИЛИ (ТипДокумента = 12) Тогда
		Возврат 0;
		
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

Функция ПолучитьСтрокуИмпорта() //+
	
	Буфер = "";
	
	Пока (ПустаяСтрока(Буфер)) ИЛИ (Лев(Буфер, 2) = "//") Цикл
		Если Импорт_ТекущаяСтрока > Импорт_КоличествоСтрок Тогда
			Возврат "";
		КонецЕсли;
			
		Буфер = СокрЛП(СтрПолучитьСтроку(Импорт_ТекстДляРазбора, Импорт_ТекущаяСтрока));
		Импорт_ТекущаяСтрока = Импорт_ТекущаяСтрока + 1;
		
	КонецЦикла;
	
	Возврат Буфер;
	
КонецФункции

Функция РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) //+
	
	ПозицияПрисваивания = Найти(СтрокаРазбора, "=");
	Если ПозицияПрисваивания = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тег = ВРЕГ(СокрЛП(Лев(СтрокаРазбора, ПозицияПрисваивания - 1)));
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияПрисваивания + 1));
	
	Возврат НЕ ПустаяСтрока(Тег);
	
КонецФункции
                                             
// Загрузка заголовка файла обмена
//
Функция ЗагрузитьСтрокуЗаголовка(ТекстСтрокиЗаголовка) //+
	
	Значение = "";
	Тег = "";
	РазобратьТеговуюСтроку(ТекстСтрокиЗаголовка, Тег, Значение);
	
	Если ТегиЗаголовка[Тег] = Истина Тогда
		Импорт_Заголовок[Тег] = Значение;
		
	Иначе
		// неправильный реквизит заголовка
		Сообщить("Неверный реквизит заголовка, строка " + (Импорт_ТекущаяСтрока - 1) + " : " + ТекстСтрокиЗаголовка);
		
	КонецЕсли;
		
КонецФункции

// Загружает секцию документа
//
Функция ЗагрузитьСекциюДокумента(СтрокаДокумента) //+
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта();
	Приход = 0;
	Расход = 0;
	Пока Лев(Врег(СокрЛП(СтрокаРазбора)), 14) <> "КОНЕЦДОКУМЕНТА" Цикл
		
		Значение = "";
		Тег = "";
		
		Если РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Тогда
			
			Если Импорт_Загружаемые[Тег] = Истина Тогда
				Если  Тег = "ВИДДОКУМЕНТА" Тогда 
					СтрокаДокумента.Операция = Значение;
				Иначе
				СтрокаДокумента[Тег] = Значение;                 
				КонецЕсли;
			КонецЕсли;
			
			Если Тег = "СУММАПРИХОД" Тогда 
				Приход = 1;
				СтрокаДокумента.Сумма=Значение;
			КонецЕсли;
			
			Если Тег = "СУММАРАСХОД" Тогда 
				Расход = 1;
				СтрокаДокумента.Сумма=Значение;    
			КонецЕсли;		
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта();
		
	КонецЦикла;
	
	Если приход = 1 Тогда 
		СтрокаДокумента.ДатаПоступило = СтрокаДокумента.ДатаОперации;
	КонецЕсли;
	
	Если Расход = 1 Тогда 
		СтрокаДокумента.ДатаСписано = СтрокаДокумента.ДатаОперации;
	КонецЕсли;
	
	
	Возврат Истина;
	
КонецФункции

// Загрузка секции расчетного счета
//
Функция ЗагрузитьСекциюРасчСчета(СтрокаРССчета) //+
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта();
	
	Значение = "";
	Тег = "";
	
	Пока РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Цикл   
		
		Если ТегиРасчетногоСчета[Тег] = Истина Тогда
			СтрокаРССчета[Тег] = Значение;       
			
		Иначе
			Если Тег = "РАСЧЕТНЫЙСЧЕТ" Тогда 
				СтрокаРССчета["РасчСчет"] = Значение;
			ИначеЕсли Тег = "НАЧАЛЬНЫЙ ОСТАТОК" Тогда
				СтрокаРССчета["НачальныйОстаток"] = Значение;
			Иначе
				
			// неправиьный реквизит заголовка
			Сообщить("Неверный реквизит в секции описания расчетного счета, строка " + (Импорт_ТекущаяСтрока - 1) + " : " + СтрокаРазбора);
			Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта();
		
		Значение = "";
		Тег = "";
		
	КонецЦикла;
	
	Если ВРЕГ(Лев(СокрЛП(СтрокаРазбора), 13)) = "КОНЕЦРАСЧСЧЕТ" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПериодичность(ВидДокумента)
	
	Док = Метаданные.Документы[ВидДокумента];
	Период = Док.ПериодичностьНомера;
	
	Возврат Период;
КонецФункции
                                                	
Процедура РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, РеквизитИмпорта, ДокументыДляИмпорта, Принудительно = Ложь) Экспорт
	
 	Если РеквизитИмпорта = "Документ" Тогда     
		
		// Распознаем дату документа
		ДатаДок = ПустаяДата;
		
		Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.ДатаДокумента);
		
		СтрокаДокумента.ДатаДок = ДатаДок;
		
		Если НЕ ПустаяСтрока(Результат) Тогда
			Возврат;
		КонецЕсли;
		
		Попытка     
			
			НомерДок = Строка(СтрокаДокумента.НомерДокумента);
			СтрокаДокумента.НомерДок = СокрЛП(НомерДок);
			
		Исключение
			
			Возврат;
			
		КонецПопытки;
		
		// Документ распознается по виду, дате и номеру
	
		ВидДокумента = ПолучитьВидДокумента(СтрокаДокумента.Операция, СтрокаДокумента.Списано, СтрокаДокумента.Поступило);
		Если ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
		//РеквизитДаты и РеквизитНомера заполняются теми значениями, которые в процедуре ЗаполнитьРеквизитыППисх() и др
		//заполняются значениями НомерДок и ДатаДок
			РеквизитДаты = "ДатаВходящегоДокумента";
			РеквизитНомера = "НомерВходящегоДокумента";
			РеквизитСП     = "СтруктурноеПодразделениеПолучатель";
			
		ИначеЕсли ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда         
			РеквизитДаты = "ДатаВходящегоДокумента";
			РеквизитНомера = "НомерВходящегоДокумента";
			РеквизитСП     = "СтруктурноеПодразделениеПолучатель";

		ИначеЕсли ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
			РеквизитДаты = "ДатаВыписки";
			РеквизитНомера = "Номер";
			РеквизитСП     = "СтруктурноеПодразделениеОтправитель";
			
		Иначе
			РеквизитДаты = "ДатаВыписки";
			РеквизитНомера = "Номер"; 
			РеквизитСП     = "СтруктурноеПодразделениеОтправитель";
			
		КонецЕсли;
		                                                  
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ               
		                |	ПлатежноеПоручение.Ссылка,
		                |	ПлатежноеПоручение." + РеквизитНомера + ",
		                |	ПлатежноеПоручение." + РеквизитДаты + ",
		                |	ПлатежноеПоручение.Организация,
						|	ПлатежноеПоручение.Контрагент,
						|	ПлатежноеПоручение.СуммаДокумента,
		                |	ПлатежноеПоручение.СчетОрганизации
		                |ИЗ
		                |	Документ." + ВидДокумента + " КАК ПлатежноеПоручение
		                |ГДЕ
		                |	ПлатежноеПоручение." + РеквизитДаты + " >= &НачалоДня
		                |	И ПлатежноеПоручение." + РеквизитДаты + " <= &КонецДня
		                |	И ПлатежноеПоручение.Организация = &Организация
						|	И ПлатежноеПоручение." + РеквизитСП + " = &СтруктурноеПодразделение";
	
		Если ВидДокумента = "ПлатежноеПоручениеВходящее" ИЛИ ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + "И ПлатежноеПоручение.Контрагент = &Контрагент";
		КонецЕсли;
		
		ЗапросПоискаДокумента = Новый Запрос(ТекстЗапроса);
		
		
		ЗапросПоискаДокумента.УстановитьПараметр("НачалоДня", НачалоДня(ДатаДок));
		ЗапросПоискаДокумента.УстановитьПараметр("КонецДня", КонецДня(ДатаДок));
		ЗапросПоискаДокумента.УстановитьПараметр("Организация", Организация);
		ЗапросПоискаДокумента.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		ЗапросПоискаДокумента.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
		
		ВыборкаПоиска = ЗапросПоискаДокумента.Выполнить().Выбрать();
		
		Пока ВыборкаПоиска.Следующий() Цикл
			Попытка
				
				Если ВидДокумента = "ПлатежноеПоручениеВходящее" ИЛИ ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
					Если СокрЛП(ВыборкаПоиска[РеквизитНомера]) = НомерДок Тогда
						СтрокаДокумента.Документ = ВыборкаПоиска.Ссылка;
						СтрокаДокумента.НомерДок = ВыборкаПоиска[РеквизитНомера];
						СтрокаДокумента.ДатаДок = ВыборкаПоиска[РеквизитДаты];
						Если ВыборкаПоиска.СчетОрганизации <> "" И ВыборкаПоиска.СчетОрганизации <> СтрокаДокумента.СчетОрганизации Тогда 
							ДобавитьЗамечание(СтрокаДокумента, 1, "Банковский счет в документе, загружаемом из файла "+СтрокаДокумента.СчетОрганизации+" не соответствует банковскому счету в документе информационной базы "+ВыборкаПоиска.СчетОрганизации+". Для документа "+ВыборкаПоиска.Ссылка+" будет установлен счет "+СтрокаДокумента.СчетОрганизации+"!");
						КонецЕсли;
						Если ВыборкаПоиска.Контрагент <> "" И ВыборкаПоиска.Контрагент <> СтрокаДокумента.Контрагент Тогда 
							ДобавитьЗамечание(СтрокаДокумента, 1, "Контрагент в документе, загружаемом из файла "+СтрокаДокумента.Контрагент+" не соответствует контрагенту в документе информационной базы "+ВыборкаПоиска.Контрагент+". Для документа "+ВыборкаПоиска.Ссылка+" будет установлен контрагент "+СтрокаДокумента.Контрагент+"!");
						КонецЕсли;
						Если ВыборкаПоиска.СуммаДокумента <> "" И ВыборкаПоиска.СуммаДокумента <> СтрокаДокумента.СуммаДокумента Тогда 
							ДобавитьЗамечание(СтрокаДокумента, 1, "Сумма документа в документе, загружаемом из файла "+СтрокаДокумента.СуммаДокумента+" не соответствует сумме документа в документе информационной базы "+ВыборкаПоиска.СуммаДокумента+". Для документа "+ВыборкаПоиска.Ссылка+" будет установлена сумма документа "+СтрокаДокумента.СуммаДокумента+"!");
						КонецЕсли;
						
						Прервать;
					КонецЕсли;
				Иначе
					
					// получим номер документа из выборки, обрезав начальные буквы и лидирующие нули
					СокрНомерДокумента = СокрЛП(ВыборкаПоиска[РеквизитНомера]);
					НомерПервойЦифры = 0;
					Для а = 1 По СтрДлина(СокрНомерДокумента) Цикл
						НомерПервойЦифры = НомерПервойЦифры + 1;
						КодСимвола = КодСимвола(Сред(СокрНомерДокумента, а, 1));
						Если (КодСимвола > 48 И КодСимвола <= 57) Тогда
							СокрНомерДокумента = Сред(СокрНомерДокумента, НомерПервойЦифры);
							Если ОбщегоНазначения.ТолькоЦифрыВСтроке(СокрНомерДокумента) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;    				
					
					Если СокрЛП(ВыборкаПоиска[РеквизитНомера]) = НомерДок ИЛИ СокрНомерДокумента = НомерДок Тогда
						СтрокаДокумента.Документ = ВыборкаПоиска.Ссылка;
						СтрокаДокумента.НомерДок = ВыборкаПоиска[РеквизитНомера];
						СтрокаДокумента.ДатаДок = ВыборкаПоиска[РеквизитДаты];
						Если ВыборкаПоиска.СчетОрганизации <> "" И ВыборкаПоиска.СчетОрганизации <> СтрокаДокумента.СчетОрганизации Тогда 
							ДобавитьЗамечание(СтрокаДокумента, 1, "Банковский счет в документе, загружаемом из файла "+СтрокаДокумента.СчетОрганизации+" не соответствует банковскому счету в документе информационной базы "+ВыборкаПоиска.СчетОрганизации+". Для документа "+ВыборкаПоиска.Ссылка+" будет установлен счет "+СтрокаДокумента.СчетОрганизации+"!");
						КонецЕсли;
						Если ВыборкаПоиска.Контрагент <> "" И ВыборкаПоиска.Контрагент <> СтрокаДокумента.Контрагент Тогда 
							ДобавитьЗамечание(СтрокаДокумента, 1, "Контрагент в документе, загружаемом из файла "+СтрокаДокумента.Контрагент+" не соответствует контрагенту в документе информационной базы "+ВыборкаПоиска.Контрагент+". Для документа "+ВыборкаПоиска.Ссылка+" будет установлен контрагент "+СтрокаДокумента.Контрагент+"!");
						КонецЕсли;
						Если ВыборкаПоиска.СуммаДокумента <> "" И ВыборкаПоиска.СуммаДокумента <> СтрокаДокумента.СуммаДокумента Тогда 
							ДобавитьЗамечание(СтрокаДокумента, 1, "Сумма документа в документе, загружаемом из файла "+СтрокаДокумента.СуммаДокумента+" не соответствует сумме документа в документе информационной базы "+ВыборкаПоиска.СуммаДокумента+". Для документа "+ВыборкаПоиска.Ссылка+" будет установлена сумма документа "+СтрокаДокумента.СуммаДокумента+"!");
						КонецЕсли;
						
						Прервать;
					КонецЕсли;					
				КонецЕсли;
			Исключение
			КонецПопытки	
		КонецЦикла;
		
		//Если документ с датой и номером из файла не найден, то проводится дополнительный поиск
		//по номеру, организации, расчетному счету за определенный период,
		//который берется из Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента документа,
		//в который входит дата документа из файла
		// В поиске участвуют ППисх и ПОспис, так как поиск ППвх и ПОпоступ проводится только по входящему номеру
		
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Документ) и (ВидДокумента = "ПлатежноеПоручениеИсходящее" ИЛИ ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
			
	
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ               
		                |	ПлатежноеПоручение.Ссылка,
		                |	ПлатежноеПоручение." + РеквизитНомера + ",
		                |	ПлатежноеПоручение." + РеквизитДаты + ",
		                |	ПлатежноеПоручение.Организация,
						|	ПлатежноеПоручение.Контрагент,
						|	ПлатежноеПоручение.СуммаДокумента,
		                |	ПлатежноеПоручение.СчетОрганизации
		                |ИЗ
		                |	Документ." + ВидДокумента + " КАК ПлатежноеПоручение
		                |ГДЕ
				   		|	ПлатежноеПоручение." + РеквизитНомера + " = &ПарамНомер
		                |	И ПлатежноеПоручение.Организация = &Организация
						|	И ПлатежноеПоручение.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение";
	
							
			Периодичность = ПолучитьПериодичность(ВидДокумента);
			
			Если Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
								
				ТекстЗапроса = ТекстЗапроса + Символы.ПС + " И ПлатежноеПоручение." + РеквизитДаты + " >= &НачалоПериода
				        								|	И ПлатежноеПоручение." + РеквизитДаты + " <= &КонецПериода";
														
				ЗапросПоискаДокумента = Новый Запрос(ТекстЗапроса);
			
				ЗапросПоискаДокумента.УстановитьПараметр("НачалоПериода", НачалоГода(ДатаДок));
				ЗапросПоискаДокумента.УстановитьПараметр("КонецПериода", КонецГода(ДатаДок));
 
			ИначеЕсли Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда 
				
				ТекстЗапроса = ТекстЗапроса + Символы.ПС + " И ПлатежноеПоручение." + РеквизитДаты + " >= &НачалоПериода
				        								|	И ПлатежноеПоручение." + РеквизитДаты + " <= &КонецПериода";
														
				ЗапросПоискаДокумента = Новый Запрос(ТекстЗапроса);
			
				ЗапросПоискаДокумента.УстановитьПараметр("НачалоПериода", НачалоДня(ДатаДок));
				ЗапросПоискаДокумента.УстановитьПараметр("КонецПериода", КонецДня(ДатаДок));
				
			ИначеЕсли Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда 
				ТекстЗапроса = ТекстЗапроса + Символы.ПС + " И ПлатежноеПоручение." + РеквизитДаты + " >= &НачалоПериода
				        								|	И ПлатежноеПоручение." + РеквизитДаты + " <= &КонецПериода";
														
				ЗапросПоискаДокумента = Новый Запрос(ТекстЗапроса);
			
				ЗапросПоискаДокумента.УстановитьПараметр("НачалоПериода", НачалоКвартала(ДатаДок));
				ЗапросПоискаДокумента.УстановитьПараметр("КонецПериода", КонецКвартала(ДатаДок));
				
			ИначеЕсли Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда 
				ТекстЗапроса = ТекстЗапроса + Символы.ПС + " И ПлатежноеПоручение." + РеквизитДаты + " >= &НачалоПериода
				        								|	И ПлатежноеПоручение." + РеквизитДаты + " <= &КонецПериода";
														
				ЗапросПоискаДокумента = Новый Запрос(ТекстЗапроса);
			
				ЗапросПоискаДокумента.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДатаДок));
				ЗапросПоискаДокумента.УстановитьПараметр("КонецПериода", КонецМесяца(ДатаДок));		
				
			ИначеЕсли Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический Тогда 
				ЗапросПоискаДокумента = Новый Запрос(ТекстЗапроса);
			КонецЕсли;
			
						
			ЗапросПоискаДокумента.УстановитьПараметр("Организация", Организация);
			ЗапросПоискаДокумента.УстановитьПараметр("ПарамНомер", НомерДок);
			ЗапросПоискаДокумента.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
		 		
			ВыборкаПоиска = ЗапросПоискаДокумента.Выполнить().Выбрать();
		
			Если ВыборкаПоиска.Следующий()Тогда 
				Попытка
						СтрокаДокумента.Документ = ВыборкаПоиска.Ссылка;
						СтрокаДокумента.НомерДок = ВыборкаПоиска[РеквизитНомера];
						//Дату найденного документа не запоминаем, потому что мы ее заменим на дату из файла
						Если ВыборкаПоиска[РеквизитДаты] <> "" И ВыборкаПоиска[РеквизитДаты] <>СтрокаДокумента.ДатаДок Тогда 
							 ДобавитьЗамечание(СтрокаДокумента, 1, "Дата документа, загружаемого из файла "+СтрокаДокумента.ДатаДок+" не соответствует дате найденного документа информационной базы "+ВыборкаПоиска[РеквизитДаты]+". Для документа "+ВыборкаПоиска.Ссылка+" будет установлна дата "+СтрокаДокумента.ДатаДок+"!");		
						КонецЕсли;
						Если ВыборкаПоиска.СчетОрганизации <> "" И ВыборкаПоиска.СчетОрганизации <> СтрокаДокумента.СчетОрганизации Тогда 
							 ДобавитьЗамечание(СтрокаДокумента, 1, "Банковский счет в документе, загружаемом из файла "+СтрокаДокумента.СчетОрганизации+" не соответствует банковскому счету в документе информационной базы "+ВыборкаПоиска.СчетОрганизации+". Для документа "+ВыборкаПоиска.Ссылка+" будет установлен счет "+СтрокаДокумента.СчетОрганизации+"!");
						КонецЕсли;
  				    	Если ВыборкаПоиска.Контрагент <> "" И ВыборкаПоиска.Контрагент <> СтрокаДокумента.Контрагент Тогда 
							 ДобавитьЗамечание(СтрокаДокумента, 1, "Контрагент в документе, загружаемом из файла "+СтрокаДокумента.Контрагент+" не соответствует контрагенту в документе информационной базы "+ВыборкаПоиска.Контрагент+". Для документа "+ВыборкаПоиска.Ссылка+" будет установлен контрагент "+СтрокаДокумента.Контрагент+"!");
						КонецЕсли;
                    	Если ВыборкаПоиска.СуммаДокумента <> "" И ВыборкаПоиска.СуммаДокумента <> СтрокаДокумента.СуммаДокумента Тогда 
							 ДобавитьЗамечание(СтрокаДокумента, 1, "Сумма документа в документе, загружаемом из файла "+СтрокаДокумента.СуммаДокумента+" не соответствует сумме документа в документе информационной базы "+ВыборкаПоиска.СуммаДокумента+". Для документа "+ВыборкаПоиска.Ссылка+" будет установлена сумма документа "+СтрокаДокумента.СуммаДокумента+"!");
						КонецЕсли;

				Исключение
				КонецПопытки
			КонецЕсли;
			
		КонецЕсли;
		
		//Если документ не был найден в ИБ
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
			Если ВидДокумента = "ПлатежноеПоручениеИсходящее" ИЛИ ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
				ДобавитьЗамечание(СтрокаДокумента, 1, "Документ не найден в информационной базе! Будет создан документ с номером:"+СтрокаДокумента.НомерДок+" и датой документа:"+СтрокаДокумента.ДатаДок+"");
			КонецЕсли;
		КонецЕсли;
		
		
		Если ИспользоватьГраницуОбработки Тогда
			Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
				Если НачалоДня(ДатаДок) <= НачалоДня(ДатаГраницыОбработки) Тогда
					ДобавитьЗамечание(СтрокаДокумента, 3, "Документ имеет дату равной или меньшей границы обработки !");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли РеквизитИмпорта = "ТипДокумента" Тогда
		
		// Преобразуем в дату из строки, если не пустая
		Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаСписано) Тогда  
			Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Списано, СтрокаДокумента.ДатаСписано);
			Если Не ПустаяСтрока(Результат) Тогда        
				СтрокаДокумента.Списано = ПустаяДата;
			КонецЕсли;
			
		Иначе
			СтрокаДокумента.Списано = ПустаяДата;
			
		КонецЕсли;
		
		// Преобразуем в дату из строки, если не пустая
		Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаПоступило) Тогда
			Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Поступило, СтрокаДокумента.ДатаПоступило);
			Если Не ПустаяСтрока(Результат) Тогда            
				СтрокаДокумента.Поступило = ПустаяДата;
			КонецЕсли;
			
		Иначе
			СтрокаДокумента.Поступило = ПустаяДата;
			
		КонецЕсли;
		
		Если Не Принудительно Тогда 
			//!!!Здесь нужно проверить на макс-мин и присвоить СтрокаДокумента.Операция для мин ПОспис, для макс ППисх.
			НовыйВидДокумента = ПроверитьДокументНаПовторяемостьВФайле(СтрокаДокумента,ДокументыДляИмпорта);
		КонецЕсли;
		
		ВидДокумента = ПолучитьВидДокумента(СтрокаДокумента.Операция, СтрокаДокумента.Списано, СтрокаДокумента.Поступило);
		
		Если ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
			// платежное поручение исходящее
			СтрокаДокумента.ТипДокумента = 1;
			
			Если ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					Если ЗначениеЗаполнено(СтрокаДокумента.Списано) Тогда
						Если НачалоДня(СтрокаДокумента.Списано) <= НачалоДня(ДатаГраницыОбработки) Тогда
							ДобавитьЗамечание(СтрокаДокумента, 3, "Документ имеет дату списания равной или меньшей границы обработки !");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
			СтрокаДокумента.ТипДокумента = 2;

		ИначеЕсли ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
			СтрокаДокумента.ТипДокумента = 11;
			
			Если ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					Если ЗначениеЗаполнено(СтрокаДокумента.Поступило) Тогда
						Если НачалоДня(СтрокаДокумента.Поступило) <= НачалоДня(ДатаГраницыОбработки) Тогда
							ДобавитьЗамечание(СтрокаДокумента, 3, "Документ имеет дату поступления равной или меньшей границы обработки !");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
			СтрокаДокумента.ТипДокумента = 12;
			
		Иначе
			// платежное поручение входящее
			СтрокаДокумента.ТипДокумента = 0;
			
		КонецЕсли;
	
	
	ИначеЕсли РеквизитИмпорта = "Контрагент" Тогда
		// Поиск контрагента осуществляется по РНН
		// Нужно будет добавить поиск по ИИН / БИН
		
		Если ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда
			СтруктурнаяЕдиница = ?(СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации, Организация, СтруктурноеПодразделение);
		Иначе 
			СтруктурнаяЕдиница = Организация;
		КонецЕсли;
				
		////////////////////////
		ЗапросПоискаКонтрагента = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                                       |	Контрагенты.Ссылка,
		                                       |	Контрагенты.Наименование,
		                                       |	Контрагенты.ИдентификационныйКодЛичности
		                                       |ИЗ
		                                       |	Справочник.Контрагенты КАК Контрагенты
		                                       |ГДЕ
		                                       |	Контрагенты.ИдентификационныйКодЛичности = &КонтрагентБИН_ИИН");
		
		Если СтрокаДокумента.ТипДокумента < 10 Тогда
			ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентБИН_ИИН", СтрокаДокумента.ПолучательБИН_ИИН);
			БИН_ИИНОрганизации = СтрокаДокумента.ПлательщикБИН_ИИН;
			БИН_ИИНКонтр = СтрокаДокумента.ПолучательБИН_ИИН;
			
		Иначе
			ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентБИН_ИИН", СтрокаДокумента.ПлательщикБИН_ИИН);
			БИН_ИИНОрганизации = СтрокаДокумента.ПолучательБИН_ИИН;
			БИН_ИИНКонтр = СтрокаДокумента.ПлательщикБИН_ИИН;
			
		КонецЕсли;
		
		Если СокрЛП(СтруктурнаяЕдиница.ИдентификационныйНомер) <> СокрЛП(БИН_ИИНОрганизации) Тогда
			ДобавитьЗамечание(СтрокаДокумента, 2, "В документе указан неверный БИН/ИИН организации: " + БИН_ИИНОрганизации + " !");
		КонецЕсли;
		
		ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выбрать();
		
		//Если контрагент найден по БИН/ИИН то он прописывается с строке таблицы импорта,
		//а если не был найден, то производится поиск по наименованию.
		Если ВыборкаПоиска.Следующий() Тогда 
			СтрокаДокумента.Контрагент = ВыборкаПоиска.Ссылка;
		Иначе
			ЗапросПоискаКонтрагента.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контрагенты.Ссылка,
			|	Контрагенты.ИдентификационныйКодЛичности,
			|	Контрагенты.Наименование
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Наименование = &КонтрагентНаименование";
			Если СтрокаДокумента.ТипДокумента < 10 Тогда
				ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентНаименование", СтрокаДокумента.ПолучательНаименование);
			Иначе
				ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентНаименование", СтрокаДокумента.ПлательщикНаименование);
			КонецЕсли;
			ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выбрать();
			ВыборкаПоиска.Следующий();
			СтрокаДокумента.Контрагент = ВыборкаПоиска.Ссылка;
			Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда 
				Сообщить("Контрагент """+СтрокаДокумента.Контрагент+""" найден по наименованию. БИН/ИИН контрагента "+ВыборкаПоиска.ИдентификационныйКодЛичности+" не совпадает с БИН/ИИН контрагента из файла "+БИН_ИИНКонтр, СтатусСообщения.Информация);	
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли РеквизитИмпорта = "СчетКонтрагента" Тогда
		// Ищем по номеру счета среди счетов контрагента
		// Если контранета распознать не удалось ищем счет везде и подставляем в контрагента его владельца
		
		ЗапросПоискаСчета = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                                  |	БанковскиеСчета.Ссылка,
		                                  |	БанковскиеСчета.НомерСчета,
		                                  |	БанковскиеСчета.Владелец
		                                  |ИЗ
		                                  |	Справочник.БанковскиеСчета КАК БанковскиеСчета
		                                  |ГДЕ
		                                  |	БанковскиеСчета.НомерСчета = &НомерСчета");
		
		Если СтрокаДокумента.ТипДокумента < 10 Тогда
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПолучательИИК);
			СчетОрганизации = СтрокаДокумента.ПлательщикИИК;
			
		Иначе
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПлательщикИИК);
			СчетОрганизации = СтрокаДокумента.ПолучательИИК;
			
		КонецЕсли;
		
		ВыборкаПоиска = ЗапросПоискаСчета.Выполнить().Выбрать();
		
		Кандидат = Неопределено;
		СтепеньКандидата = 0;
		
		Пока ВыборкаПоиска.Следующий() Цикл
			
			Если СтепеньКандидата = 0 Тогда
				Кандидат = ВыборкаПоиска.Ссылка;
				
				Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
					Прервать;
					
				КонецЕсли;
				
				Если ВыборкаПоиска.Владелец = СтрокаДокумента.Контрагент Тогда
					Прервать;
					
				Иначе
					СтепеньКандидата = 1;
					
				КонецЕсли;
				
			Иначе
				Если ВыборкаПоиска.Владелец = СтрокаДокумента.Контрагент Тогда
					Прервать;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаДокумента.СчетКонтрагента = Кандидат;
		
		// Еще определяем счет организации
		ЗапросПоискаСчета = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                                  |	БанковскиеСчета.Ссылка,
		                                  |	БанковскиеСчета.НомерСчета,
		                                  |	БанковскиеСчета.Владелец
		                                  |ИЗ
		                                  |	Справочник.БанковскиеСчета КАК БанковскиеСчета
		                                  |ГДЕ
										  |	БанковскиеСчета.Владелец = &Организация
										  |	И БанковскиеСчета.НомерСчета = &НомерСчета");
		
		ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СчетОрганизации);
		ЗапросПоискаСчета.УстановитьПараметр("Организация", Организация);
		
		ВыборкаПоиска = ЗапросПоискаСчета.Выполнить().Выбрать();
		
		Если ВыборкаПоиска.Следующий() Тогда
			
			СтрокаРССчетов = Импорт_РассчетныеСчета.Найти(СчетОрганизации, "РасчСчет");
			
			Если СтрокаРССчетов = Неопределено Тогда
				ДобавитьЗамечание(СтрокаДокумента, 2, "В документе указан счет, не определенный в заголовке:" + СчетОрганизации + "!");
			КонецЕсли;
			
			СтрокаДокумента.СчетОрганизации = ВыборкаПоиска.Ссылка;
			
		Иначе
			ДобавитьЗамечание(СтрокаДокумента, 2, "В документе указан счет, не принадлежащий организации!");
			
		КонецЕсли;
		
	ИначеЕсли РеквизитИмпорта = "СуммаДокумента" Тогда
		// Преобразуем из строки в число
		Буфер = СокрЛП(СтрЗаменить(СтрокаДокумента.Сумма, " ", ""));
		
		Попытка
			Сумма = Число(Буфер);
			
			Если Сумма < 0 Тогда
				Сумма = - Сумма;
			КонецЕсли;
			
			СтрокаДокумента.СуммаДокумента =Сумма ;
			
		Исключение
			ДобавитьЗамечание(СтрокаДокумента, 4, "Указана неверная сумма документа!");
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаПустоеЗначениеИмпорта(СтрокаИмпорта, ИмяСвойства, ПредставлениеСвойства) Экспорт
	
	ВариантНеПустых = ПолучитьВариантНеПустых(СтрокаИмпорта.ТипДокумента);
	Если Импорт_НеПустые[ВариантНеПустых][ИмяСвойства] = Истина Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаИмпорта[ИмяСвойства]) Тогда
			ДобавитьЗамечание(СтрокаИмпорта, 3, "Не заполнено """ + ПредставлениеСвойства + """!");
		КонецЕсли; 		
	КонецЕсли;
	
КонецПроцедуры

Функция СчетПринадлежитОрганизации(НомерСчета) //+
	
	ЗапросПоСчету = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                              |	БанковскиеСчета.Владелец,
	                              |	БанковскиеСчета.НомерСчета,
	                              |	БанковскиеСчета.Ссылка
	                              |ИЗ
	                              |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	                              |ГДЕ
	                              |	БанковскиеСчета.Владелец = &Организация
	                              |	И БанковскиеСчета.НомерСчета = &НомерСчета");
	
	ЗапросПоСчету.УстановитьПараметр("НомерСчета", НомерСчета);
	ЗапросПоСчету.УстановитьПараметр("Организация", Организация);
	ВыборкаЗапроса = ЗапросПоСчету.Выполнить().Выбрать();
	
	Возврат ВыборкаЗапроса.Следующий();
	
КонецФункции

// Процедура сборка*
Процедура ЗаполнитьДокументыНаИмпорт(ДокументыДляИмпорта) Экспорт //+
	
	// Подготавливаем структуры обработки данных
	Импорт_ПризнакОбмена = Ложь;
	
	СформироватьСоответствияНеПустыхПриИмпорте();
	
	ЗагрРасчетныеСчета = Новый СписокЗначений;
	СписокДокументов = Новый СписокЗначений;
	ЗагрВидыДокументов = Новый СписокЗначений;
	
	Импорт_РассчетныеСчета.Очистить();
	
	ДокументыДляИмпорта.Очистить();
	
	Сч = 0;
	Строка = СокрЛП(ФайлЗагрузки);
	Расширение = "";
	Если Не ПустаяСтрока(Строка) Тогда
		Пока True Цикл
			СимволСтроки = Сред(Строка, СтрДлина(Строка)-Сч, 1);
			Если СимволСтроки = "." Тогда
				Прервать;
			Иначе
				Расширение = СимволСтроки + Расширение;
			КонецЕсли;
			Сч = Сч + 1;
			Если Сч > СтрДлина(Строка) Тогда
				Прервать;
			КонецЕсли
		КонецЦикла;
	КонецЕсли;
	
	Если Расширение = "xml" Тогда
		
		Импорт_ФайлДляРазбора = Новый ЧтениеXML;
		Импорт_ФайлДляРазбора.ОткрытьФайл(ФайлЗагрузки);
		КорневойЭлемент = 1;
		ОшибкаЗагрузки = "";
		Пока Импорт_ФайлДляРазбора.Прочитать() Цикл
			Если КорневойЭлемент = 1 Тогда
				Если Импорт_ФайлДляРазбора.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Если Импорт_ФайлДляРазбора.Имя = "XML1CClientBankExchange" Тогда
						КорневойЭлемент = 0;
					Иначе
						ОшибкаЗагрузки = "В файле импорта отсутствует признак обмена ""XML1CClientBankExchange""!";
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если Импорт_ФайлДляРазбора.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				Если Импорт_ФайлДляРазбора.Имя = "XML1CClientBankExchange" Тогда
					Пока Импорт_ФайлДляРазбора.ПрочитатьАтрибут() Цикл
						Тег = СокрЛП(Импорт_ФайлДляРазбора.Имя);
						Тег = ВРег(Тег);
						Значение = СокрЛП(Импорт_ФайлДляРазбора.Значение);
						Если Тег = "РАСЧСЧЕТ" Тогда
							Если СчетПринадлежитОрганизации(Значение) Тогда
								СтрокаРССчетов = Импорт_РассчетныеСчета.Найти(Значение, "РасчСчет");
								Если СтрокаРССчетов = Неопределено Тогда
									СтрокаРССчетов = Импорт_РассчетныеСчета.Добавить();
									СтрокаРССчетов.РасчСчет = Значение;
								КонецЕсли;
							Иначе
								ОшибкаЗагрузки = "В заголовке файла импорта указан счет, не принадлежащий организации: " + Значение + " !";
								Прервать;
							КонецЕсли;
							Продолжить;
						КонецЕсли;
						Если ТегиЗаголовка[Тег] = Истина Тогда
							Импорт_Заголовок[Тег] = Значение;
						Иначе
							ОшибкаЗагрузки = "Неверный реквизит заголовка " + Тег;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если Импорт_ФайлДляРазбора.Имя = "СЕКЦИЯРАСЧСЧЕТ" Тогда
					СтрокаРССчетов = Импорт_РассчетныеСчета.Добавить();
					Если Импорт_ФайлДляРазбора.ПрочитатьАтрибут() Тогда
						СтрокаРССчетов["РасчСчет"] = Импорт_ФайлДляРазбора.Значение;
					КонецЕсли;
					Пока Импорт_ФайлДляРазбора.Прочитать() Цикл
						Если Импорт_ФайлДляРазбора.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
							Если Импорт_ФайлДляРазбора.Имя = "СЕКЦИЯРАСЧСЧЕТ" Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						Если Импорт_ФайлДляРазбора.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
							Тег = Импорт_ФайлДляРазбора.Имя;
							Тег = ВРег(Тег);
							Импорт_ФайлДляРазбора.Прочитать();
							Значение = Импорт_ФайлДляРазбора.Значение;
							Импорт_ФайлДляРазбора.Прочитать();
							Если ТегиРасчетногоСчета[Тег] = Истина Тогда
								СтрокаРССчетов[Тег] = Значение;       
							Иначе
								ОшибкаЗагрузки = "Неверный реквизит в секции описания расчетного счета " + Тег;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если Импорт_ФайлДляРазбора.Имя = "СЕКЦИЯДОКУМЕНТ" Тогда
					СтрокаДокумента = ДокументыДляИмпорта.Добавить();
					Приход = 0;
					Расход = 0;
					Пока Импорт_ФайлДляРазбора.Прочитать() Цикл
						Если Импорт_ФайлДляРазбора.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
							Если Импорт_ФайлДляРазбора.Имя = "СЕКЦИЯДОКУМЕНТ" Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						Если Импорт_ФайлДляРазбора.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
							Тег = Импорт_ФайлДляРазбора.Имя;
							Тег = ВРег(Тег);
							Импорт_ФайлДляРазбора.Прочитать();
							Значение = Импорт_ФайлДляРазбора.Значение;
							Импорт_ФайлДляРазбора.Прочитать();
							Если Импорт_Загружаемые[Тег] = Истина Тогда
								Если  Тег = "ВИДДОКУМЕНТА" Тогда 
									СтрокаДокумента.Операция = Значение;
								Иначе
									СтрокаДокумента[Тег] = Значение;                 
								КонецЕсли;
							Иначе
								ОшибкаЗагрузки = "Неверный реквизит платежного документа " + Тег;
								Прервать;
							КонецЕсли;
							Если Тег = "СУММАПРИХОД" Тогда 
								Приход = 1;
								СтрокаДокумента.Сумма=Значение;
							КонецЕсли;
							Если Тег = "СУММАРАСХОД" Тогда 
								Расход = 1;
								СтрокаДокумента.Сумма=Значение;    
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					Если Приход = 1 Тогда 
						СтрокаДокумента.ДатаПоступило = СтрокаДокумента.ДатаОперации;
					КонецЕсли;
					Если Расход = 1 Тогда 
						СтрокаДокумента.ДатаСписано = СтрокаДокумента.ДатаОперации;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Импорт_ФайлДляРазбора.Закрыть();
		
		Если НЕ ПустаяСтрока(ОшибкаЗагрузки) Тогда
			ДокументыДляИмпорта.Очистить();
			Сообщить(ОшибкаЗагрузки);
			Сообщить("Импорт не выполнен.", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаДокумента Из ДокументыДляИмпорта Цикл
			// Последовательно обрабатываем каждую загруженную строку
								
			//Распознаем реквизиты - порядок распознания важен
			РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "СуммаДокумента", ,Ложь);

			РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "ТипДокумента", ДокументыДляИмпорта,Ложь);
					
			РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "Контрагент", ,Ложь);
			РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "СчетКонтрагента", ,Ложь);
					
			//Производим поиск документа в ИБ
			РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "Документ", ,Ложь);
					
			// Для каждого реквизита (= колонка) надо проверить на пустое значение
			Для Каждого КолонкаИмпорта Из ДокументыДляИмпорта.Колонки Цикл
				ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента, КолонкаИмпорта.Имя, КолонкаИмпорта.Заголовок);
			КонецЦикла;
					
			Если СтрокаДокумента.Готовность < 3 И НЕ ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
				СтрокаДокумента.Загрузить = Истина;
			КонецЕсли;
					
		КонецЦикла;
				
		Сообщить("Обработка файла импорта завершена успешно.");
		
		Возврат;
	КонецЕсли;
	// Получаем исходные данные
	Импорт_ТекстДляРазбора = ПрочитатьФайл(ФайлЗагрузки);
	
	Если Импорт_ТекстДляРазбора = Неопределено Тогда
		Предупреждение("Файл импорта не содержит данных!");
		Возврат;
	КонецЕсли;
	
	// Заполняем первичные структуры данных
	Импорт_КоличествоСтрок = СтрЧислоСтрок(Импорт_ТекстДляРазбора);
	Импорт_ТекущаяСтрока = 1;
	Наличие = 0;
	Пока Импорт_ТекущаяСтрока <= Импорт_КоличествоСтрок Цикл
		
		Стр = ПолучитьСтрокуИмпорта();
		
		Если Лев(Врег(СокрЛП(Стр)), 14)="СЕКЦИЯДОКУМЕНТ" Тогда
			
			Значение = "";
			Тег 	 = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);  
			
			Если Тег = "СЕКЦИЯДОКУМЕНТ" Тогда //?
				НоваяСтрокаДокументов = ДокументыДляИмпорта.Добавить();
				
				Если НЕ ЗагрузитьСекциюДокумента(НоваяСтрокаДокументов) Тогда
					Возврат;
				КонецЕсли;
				
				Если (Импорт_ТекущаяСтрока-1) = Импорт_КоличествоСтрок Тогда 
					Наличие = 1;
					Если НЕ Импорт_ПризнакОбмена Тогда
						Сообщить("В файле импорта отсутствует признак обмена ""1CClientBankExchange""!");
						Возврат;
					КонецЕсли;
			        // Формируем объектные структуры данных
					Для каждого СтрокаДокумента Из ДокументыДляИмпорта Цикл
						// Последовательно обрабатываем каждую загруженную строку
				
						//Распознаем реквизиты - порядок распознания важен
						РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "СуммаДокумента", ,Ложь);
						РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "ТипДокумента", ДокументыДляИмпорта,Ложь);
				
						РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "Контрагент",,Ложь );
						РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "СчетКонтрагента",,Ложь );
						
						
						//Производим поиск документа в ИБ
						РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "Документ", ,Ложь);
				
						// Для каждого реквизита (= колонка) надо проверить на пустое значение
						Для каждого КолонкаИмпорта из ДокументыДляИмпорта.Колонки Цикл
							ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента, КолонкаИмпорта.Имя, КолонкаИмпорта.Заголовок);
						КонецЦикла;
				
						Если СтрокаДокумента.Готовность < 3 И НЕ ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
							СтрокаДокумента.Загрузить = Истина;
						КонецЕсли;
				
					КонецЦикла;
			        	Сообщить("Обработка файла импорта завершена успешно.");
			        Возврат;
				КонецЕсли;
								
			Иначе
				Предупреждение("Нарушена структура файла импорта, строка " + (Импорт_ТекущаяСтрока - 1) + " : " + Стр);
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 14)="СЕКЦИЯРАСЧСЧЕТ" Тогда
			СтрокаРССчетов = Импорт_РассчетныеСчета.Добавить();
			Если НЕ ЗагрузитьСекциюРасчСчета(СтрокаРССчетов) Тогда
				Сообщить("Нарушена структура файла импорта в секции описания расчетного счета! Строка: " + (Импорт_ТекущаяСтрока - 1));
				Возврат;
			КонецЕсли;
				
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8)="РАСЧСЧЕТ" Тогда
			Значение = "";
			Тег = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "РАСЧСЧЕТ" Тогда
				Если СчетПринадлежитОрганизации(Значение) Тогда
					СтрокаРССчетов = Импорт_РассчетныеСчета.Найти(Значение, "РасчСчет");
					Если СтрокаРССчетов = Неопределено Тогда
						СтрокаРССчетов = Импорт_РассчетныеСчета.Добавить();
						СтрокаРССчетов.РасчСчет = Значение;
					КонецЕсли;
				Иначе
					Сообщить("В заголовке файла импорта указан счет, не принадлежащий организации: " + Значение + " !", СтатусСообщения.ОченьВажное);
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8)="ДОКУМЕНТ" Тогда
			Импорт_ВидыДокументов.Добавить(Значение);

		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 10)="КОНЕЦФАЙЛА" И Наличие = 0 Тогда
			Если НЕ Импорт_ПризнакОбмена Тогда
				Сообщить("В файле импорта отсутствует признак обмена ""1CClientBankExchange""!");
				Возврат;
			КонецЕсли;
			
			
			// Формируем объектные структуры данных
			Для Каждого СтрокаДокумента Из ДокументыДляИмпорта Цикл
				// Последовательно обрабатываем каждую загруженную строку
				
				Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Операция) Тогда
					СтрокаДокумента.Операция = "ПлатежноеПоручение";	
				КонецЕсли;
				
				//Распознаем реквизиты - порядок распознания важен
				РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "СуммаДокумента", ,Ложь);

				РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "ТипДокумента", ДокументыДляИмпорта,Ложь);
				
				РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "Контрагент", ,Ложь);
				РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "СчетКонтрагента", ,Ложь);
				
				//Производим поиск документа в ИБ
				РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "Документ", ,Ложь);
				
				// Для каждого реквизита (= колонка) надо проверить на пустое значение
				Для каждого КолонкаИмпорта из ДокументыДляИмпорта.Колонки Цикл
					Если Найти(КолонкаИмпорта.Имя, "РНН") = 0 Тогда
						// РНН не проверяем
						ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента, КолонкаИмпорта.Имя, КолонкаИмпорта.Заголовок);
					КонецЕсли;
				КонецЦикла;
				
				Если СтрокаДокумента.Готовность < 3 И НЕ ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
					СтрокаДокумента.Загрузить = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Сообщить("Обработка файла импорта завершена успешно.");
			
			Возврат;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 20)="1CCLIENTBANKEXCHANGE" Тогда
			Импорт_ПризнакОбмена = Истина;
			
		Иначе
			ЗагрузитьСтрокуЗаголовка(Стр);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////// ЗАГРУЗКА //////////////////////////////////////////////////

Процедура УстановитьСвойство(Объект, ИмяСвойства, ЗначениеСвойства)
	
	Если Объект[ИмяСвойства] <> ЗначениеСвойства Тогда
		Объект[ИмяСвойства] = ЗначениеСвойства;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредставлениеОбъекта(Объект)
	
	Номер = ?(ПустаяСтрока(Объект.Номер), "%Номер%", СокрЛП(Объект.Номер));
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручениеВходящее") Тогда
		НазваниеОбъекта = "документ ""Входящее платежное поручение"" № " + Номер + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее") Тогда
		НазваниеОбъекта = "документ ""Исходящее платежное поручение"" № " + Номер + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
		НазваниеОбъекта = "документ ""Платежный ордер (списание)"" № " + Номер + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
		НазваниеОбъекта = "документ ""Платежный ордер (поступление)"" № " + Номер + " от " + Объект.Дата;
		
	Иначе
		НазваниеОбъекта = "объект";
		
	КонецЕсли;
	
	Возврат НазваниеОбъекта;
	
КонецФункции

Процедура ЗадатьПометкуНаУдаление(ОбъектДляПометки, Пометка)
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляПометки);
	НазваниеДействия = ?(Пометка, " помечен на удаление", " отменена пометка на удаление");
	Попытка
		
		ОбъектДляПометки.Записать(РежимЗаписиДокумента.Запись);
		ОбъектДляПометки.УстановитьПометкуУдаления(Пометка);
		
		Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2) + ": " + НазваниеДействия + ".", СтатусСообщения.Информация);
		
	Исключение
		
		Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2)+ ": не " + НазваниеДействия + "! Произошли ошибки при записи!", СтатусСообщения.Важное);
		
	КонецПопытки
	
КонецПроцедуры

Процедура ЗаписатьОбъект(ОбъектДляЗаписи)
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи);
	
	Если НЕ ЗначениеЗаполнено(ОбъектДляЗаписи.Дата) Тогда
		ОбъектДляЗаписи.Дата = ОбъектДляЗаписи.ДатаВыписки;
	КонецЕсли;
	
	ТипДокумента = ОбъектДляЗаписи.Метаданные().Имя;
	
		Если ТипДокумента = "ПлатежноеПоручениеИсходящее" Тогда
			НастройкаЗаполнять  = "ППИсх_ЗаполнятьДанныеАвтоматически";
			НастройкаОтражатьНУ = "ППИсх_УчитыватьКПН";
			НастройкаПроводить  = "ППИсх_ПроводитьНовыеДокументы";
			НастройкаВидУчетаНУ = "ППИсх_ВидУчетаНУ";
			
		ИначеЕсли ТипДокумента = "ПлатежноеПоручениеВходящее" Тогда
			НастройкаЗаполнять 	= "ППВх_ЗаполнятьДанныеАвтоматически";
			НастройкаОтражатьНУ = "ППВх_УчитыватьКПН";
			НастройкаПроводить 	= "ППВх_ПроводитьНовыеДокументы";
			//НастройкаВидУчетаНУ = "ППВх_ВидУчетаНУ";
			
		ИначеЕсли ТипДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
			НастройкаЗаполнять	= "ПОСпис_ЗаполнятьДанныеАвтоматически";
			НастройкаОтражатьНУ = "ПОСпис_УчитыватьКПН";
			НастройкаПроводить 	= "ПОСпис_ПроводитьНовыеДокументы";
			НастройкаВидУчетаНУ = "ПОСпис_ВидУчетаНУ";
			
		ИначеЕсли ТипДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
			НастройкаЗаполнять 	= "ПОПост_ЗаполнятьДанныеАвтоматически";
			НастройкаОтражатьНУ = "ПОПост_УчитыватьКПН";
			НастройкаПроводить 	= "ПОПост_ПроводитьНовыеДокументы";
			НастройкаВидУчетаНУ = "ПОПост_ВидУчетаНУ";
			
		КонецЕсли;
	
		ЗаполнятьАвтоматически = ПолучитьНастройкуЗаполнения(НастройкаЗаполнять);
		Проводить = Ложь;
		
		Если (ЗаполнятьАвтоматически = Истина) Тогда
			ПризнакНалоговогоУчета = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация,ОбъектДляЗаписи.Дата);
			Если ПолучитьНастройкуЗаполнения(НастройкаОтражатьНУ) = Истина Тогда 
				УстановитьСвойство(ОбъектДляЗаписи, "УчитыватьКПН",ПризнакНалоговогоУчета);
			Иначе 
				УстановитьСвойство(ОбъектДляЗаписи, "УчитыватьКПН",(ПолучитьНастройкуЗаполнения(НастройкаОтражатьНУ) = Истина));
			КонецЕсли;
			УстановитьСвойство(ОбъектДляЗаписи, "ВидУчетаНУ", Справочники.ВидыУчетаНУ.НУ);
			Проводить = (ПолучитьНастройкуЗаполнения(НастройкаПроводить) = Истина);
		КонецЕсли;
			
	Попытка
		ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);  
		
		Если ОбъектДляЗаписи.ЭтоНовый() Тогда
			Сообщить("Создан " + НазваниеОбъекта + ".");
			
		Иначе
			Сообщить("Записан " + НазваниеОбъекта + ".");
			
		КонецЕсли;
		
	Исключение
		
		Если ОбъектДляЗаписи.ЭтоНовый() Тогда
			Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2) + " не создан! Произошли ошибки при записи!", СтатусСообщения.Важное);
		
		Иначе
			Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2) + " не записан! Произошли ошибки при записи!", СтатусСообщения.Важное);
			
		КонецЕсли;
		
		Возврат;
		
	КонецПопытки;
	
	Попытка
		
		Если Проводить Тогда
			ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);  
			Сообщить("Проведен " + НазваниеОбъекта + ".");
		КонецЕсли;
		
	Исключение
		Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2) + " не проведен! Произошли ошибки при проведении!", СтатусСообщения.Важное);
		
	КонецПопытки

КонецПроцедуры

Функция ПроверитьДокументДляЗагрузки(СтуктураДокумента)
	
	Результат = "";
	
	Если СтуктураДокумента.Готовность > 3 Тогда
		Результат = СтуктураДокумента.ОписаниеОшибок;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьДокументНаПовторяемостьВФайле(СтрокаСекции,ДокументыКИмпорту)

	Значение = "";
	
	СовпадающиеДокументы = ДокументыКИмпорту.Скопировать();
	СовпадающиеДокументы.Очистить();
	
	ВидТекущегоДокумента = ПолучитьВидДокумента(СтрокаСекции.Операция, СтрокаСекции.Списано, СтрокаСекции.Поступило);
	
	ЭтоМин = Ложь;
	
	Для Каждого Стр Из ДокументыКИмпорту Цикл
		
		ВидДокумента = ПолучитьВидДокумента(Стр.Операция, Стр.Списано, Стр.Поступило);
		
		ДатаДок = ПустаяДата;
		Результат = ПолучитьДатуИзСтроки(ДатаДок,СтрокаСекции.ДатаДокумента);
		СтрокаСекции.ДатаДок = ДатаДок;
		
		ДатаДок = ПустаяДата;
		Результат = ПолучитьДатуИзСтроки(ДатаДок,Стр.ДатаДокумента);
		Стр.ДатаДок = ДатаДок;
		
		Если ПустаяСтрока(Результат) Тогда
			Если (СтрокаСекции.НомерДокумента = Стр.НомерДокумента) И Год(СтрокаСекции.ДатаДок) = Год(Стр.ДатаДок) И
				ЗначениеЗаполнено(СтрокаСекции.СуммаРасход) И 
				ЗначениеЗаполнено(Стр.СуммаРасход) И ВидТекущегоДокумента = ВидДокумента Тогда 
				Новая = СовпадающиеДокументы.Добавить();
				ЗаполнитьЗначенияСвойств(Новая,Стр);
				РаспознатьДанныеВСтрокеДокумента(Новая, "СуммаДокумента", );
			КонецЕсли;
		КонецЕсли;
				
	КонецЦикла;
	
	Если СовпадающиеДокументы.Количество()= 2 Тогда 
		
			Мин = 0;
			НомерСтроки = 0;
			Для Каждого Док Из СовпадающиеДокументы Цикл 
				СуммаДок = Док.СуммаДокумента;
				Если СуммаДок < Мин Тогда 
					Мин = СуммаДок;
					//НомерСтроки = СовпадающиеДокументы.Индекс();
				Иначе
					Мин = СуммаДок;
					//НомерСтроки = СовпадающиеДокументы.Индекс();
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаСекции.СуммаДокумента = Мин Тогда 
				СтрокаСекции.Операция = "ПлатежныйОрдер";
			Иначе
				СтрокаСекции.Операция = "ПлатежноеПоручение";
			КонецЕсли;
			
	//ИначеЕсли СовпадающиеДокументы.Количество()>2 Тогда 
	//		ДобавитьЗамечание(СтрокаСекции, 3, "Количество платежных документов с одинаковыми номерами превышает допустимое значение!");
	//		УстановитьГотовность(СтрокаСекции.Готовность, 4);
	КонецЕсли;

	
	
	Значение = ПолучитьВидДокумента(СтрокаСекции.Операция, СтрокаСекции.Списано, СтрокаСекции.Поступило);
	
	Возврат Значение;
	
КонецФункции // ПроверитьДокументНаПовторяемостьВФайле()


Функция ПолучитьВидДокумента(ПлатежнаяОперация, Списано, Поступило)
	
	ПлатежноеПоручение = (СокрЛП(ВРЕГ(СтрЗаменить(ПлатежнаяОперация, " ", "")) = "ПЛАТЕЖНОЕПОРУЧЕНИЕ"));
	Списали = ЗначениеЗаполнено(Списано);
	Зачислили = ЗначениеЗаполнено(Поступило);
	
	Если Списали И Зачислили Тогда
		// Это исходящее платежное поручение с операцией "перевод на другой счет"
			ВидДокумента = "ПлатежноеПоручениеИсходящее";
		
		
	ИначеЕсли Списали Тогда
		Если ПлатежноеПоручение Тогда
			// Списали средства платежным поручением
			ВидДокумента = "ПлатежноеПоручениеИсходящее";
			
		Иначе
			// Списали средства прочим документом
			ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств";
			
		КонецЕсли;
		
	ИначеЕсли Зачислили Тогда
		Если ПлатежноеПоручение Тогда
			// Зачислили средства платежным поручением
			ВидДокумента = "ПлатежноеПоручениеВходящее";
			
		Иначе
			// Зачислили средства прочим документом
			ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств";
			
		КонецЕсли;
		
	Иначе
		// Движение средств не произошло
		Если ПлатежноеПоручение Тогда
			// Платежное поручение исходящее - выгруженное, но не исполненное
			ВидДокумента = "ПлатежноеПоручениеИсходящее";
			
		Иначе
			ВидДокумента = "ПлатежноеПоручениеИсходящее";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидДокумента;
	
КонецФункции

Функция ПривестиНомер(НомерДокумента, Номер)
	
	НовыйНомер = "";
	ДлинаНомера = СтрДлина(Номер);
	ДлинаНомераДокумента = СтрДлина(НомерДокумента);
	
	Возврат Лев(НомерДокумента, ДлинаНомераДокумента - ДлинаНомера) + Номер;
	
КонецФункции

Функция СоздатьНовыйПлатежныйДокумент(ВидДокумента, Номер, Дата)
	
	НовыйДокумент = Документы[ВидДокумента].СоздатьДокумент();
	
	Если ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		НовыйДокумент.Номер = ПривестиНомер(НовыйДокумент.Номер, Номер);
		НовыйДокумент.ДатаВыписки = Дата;
		
	ИначеЕсли ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		НовыйДокумент.Номер = ПривестиНомер(НовыйДокумент.Номер, Номер);
		НовыйДокумент.Дата = Дата;
		
	ИначеЕсли ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
		НовыйДокумент.НомерВходящегоДокумента = Номер;              
		НовыйДокумент.ДатаВходящегоДокумента = Дата;

	ИначеЕсли ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
		НовыйДокумент.НомерВходящегоДокумента = Номер;              
		НовыйДокумент.ДатаВходящегоДокумента = Дата;
		
	КонецЕсли;

	Возврат НовыйДокумент;
	
КонецФункции

Процедура ЗаполнитьРеквизитПлатежногоПорученияИсходящее(ОбъектДокумента, ИсходныеДанные, ИмяРеквизита)
	
	ЗаполнятьКомментарии = ПолучитьНастройкуЗаполнения("ЗаполнятьКомментарии");
	
	Если ИмяРеквизита = "Организация" Тогда
		// зяполняются разом и номер и дата документа и организация
		
		УстановитьСвойство(ОбъектДокумента, "Организация", 			    Организация);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеОтправитель", СтруктурноеПодразделение);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеПолучатель", СтруктурноеПодразделение);
		
		
		Если ОбъектДокумента.ДатаВыписки <> ПустаяДата И ОбъектДокумента.ДатаВыписки <> ИсходныеДанные.ДатаДок Тогда 
			Сообщить("В документе:"+ОбъектДокумента.Ссылка+" значение реквизита ""ДатаВыписки"":"""+ ОбъектДокумента.ДатаВыписки+""" заменено на:"""+ИсходныеДанные.ДатаДок+"""!",СтатусСообщения.Важное);
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "ДатаВыписки", ИсходныеДанные.ДатаДок);
		УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
		УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
		
		Если ОбъектДокумента.ЭтоНовый() Тогда
			УстановитьСвойство(ОбъектДокумента, "Номер", ИсходныеДанные.НомерДок);

		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Контрагент" Тогда
		
		Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент)   И ОбъектДокумента.Контрагент <> ИсходныеДанные.Контрагент Тогда 
			Сообщить("В документе:"+ОбъектДокумента.Ссылка+" значение реквизита ""Контрагент"":"""+ ОбъектДокумента.Контрагент+""" заменено на:"""+ИсходныеДанные.Контрагент+"""!",СтатусСообщения.Важное);
		КонецЕсли;
		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
			
		////информация о ДоговореВзаиморасчетов в файле не передается, но
		////она нужна для корректной записи документов
		////поэтому устанавливаем договор по умолчанию "Основной договор"
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
			Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) Тогда
				СтрокаРасшифровки.ДоговорКонтрагента = СоздатьНужныйДоговор(ОбъектДокумента.Контрагент, Организация, Ложь, ИсходныеДанные.СчетОрганизации.ВалютаДенежныхСредств);
			КонецЕсли;
		КонецЕсли;
	
		СчетУчета = ПолучитьНастройкуЗаполнения("ППИсх_СчетУчетаРасчетовСКонтрагентом");
		СчетАванса = ПолучитьНастройкуЗаполнения("ППИсх_СчетУчетаРасчетовПоАвансам");
		
		ЗаполнятьАвтоматически = ПолучитьНастройкуЗаполнения("ППИсх_ЗаполнятьДанныеАвтоматически");
		
		Если (ЗаполнятьАвтоматически <> Истина) Тогда
		//Если счетУчета не проставлен в форме Настройка, то он берется для организации из РегистраСведений,
		Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
			СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
			СчетУчетаРегистр = СчетаУчета.СчетРасчетовПокупателя;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СчетУчетаРегистр) Тогда
		//а иначе СчетУчета (счетРасчетов) проставляется вручную.
			
				Если НЕ ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда 
					СчетУчета = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам;
				КонецЕсли;
								
		КонецЕсли;
		
		Иначе
			УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам", СчетАванса);
			УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", ПолучитьНастройкуЗаполнения("ППИсх_СтатьяДвиженияДенежныхСредств"));
			
		КонецЕсли;
		
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентомБУ", СчетУчета);
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаРасчетовСКонтрагентомБУ", СчетУчета);
	
	
	ИначеЕсли ИмяРеквизита = "ДоговорКонтрагента" Тогда //заполняется при заполнении Контрагент
	
	ИначеЕсли ИмяРеквизита = "СчетОрганизации" Тогда //заполняется при заполнении Контрагент
		
		Если ЗначениеЗаполнено(ОбъектДокумента.СчетОрганизации) И ОбъектДокумента.СчетОрганизации <> ИсходныеДанные.СчетОрганизации Тогда 
			Сообщить("В документе:"+ОбъектДокумента.Ссылка+" значение реквизита ""СчетОрганизации"":"""+ ОбъектДокумента.СчетОрганизации+""" заменено на:"""+ИсходныеДанные.СчетОрганизации+"""!",СтатусСообщения.Важное);
		КонецЕсли;
		УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
		
		//валюта документа
		УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.СчетБанк) Тогда
			// счет банк
			УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетахСоб);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "ВалютаДокумента" Тогда //заполняется при заполнении СчетОрганизации
	ИначеЕсли ИмяРеквизита = "СчетБанк" Тогда //заполняется при заполнении СчетОрганизации
	
	ИначеЕсли ИмяРеквизита = "ВидОперации" Тогда 
		
		Если ОбъектДокумента.ЭтоНовый() Тогда            
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
			УстановитьСвойство(ОбъектДокумента, "ВидОперации", ВидОперации);
		КонецЕсли;
				
	ИначеЕсли ИмяРеквизита = "СуммаДокумента" Тогда

			Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда 
				СтрокаРасшифровки.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяСтавкаНДС");
				УстановитьСвойство(СтрокаРасшифровки, "СтавкаНДС", СтрокаРасшифровки.СтавкаНДС);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбъектДокумента.СуммаДокумента) И ОбъектДокумента.СуммаДокумента <> ИсходныеДанные.СуммаДокумента Тогда 
				Сообщить("В документе:"+ОбъектДокумента.Ссылка+" значение реквизита ""СуммаДокумента"":"""+ ОбъектДокумента.СуммаДокумента+""" заменено на:"""+ИсходныеДанные.СуммаДокумента+"""!",СтатусСообщения.Важное);
			КонецЕсли;

			УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
			Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			КонецЕсли;
			СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
			Если Не СтрокаРасшифровки.ДоговорКонтрагента.Пустая() Тогда
				Если ОбъектДокумента.ВалютаДокумента = СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
					СтрокаРасшифровки.КурсВзаиморасчетов = 1;
					СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
					СтрокаРасшифровки.СуммаВзаиморасчетов = ОбъектДокумента.СуммаДокумента;
				Иначе
					КурсДокумента = 1;
					КратностьДокумента = 1;
					КурсДоговора = 1;
					КратностьДоговора = 1;
					тзКурсКратностьДокумента = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", ОбъектДокумента.ВалютаДокумента));
					Если тзКурсКратностьДокумента.Количество() > 0 Тогда
						КурсДокумента = ?(тзКурсКратностьДокумента[0].Курс > 0, тзКурсКратностьДокумента[0].Курс, 1);
						//КратностьДокумента = ?(тзКурсКратностьДокумента[0].Кратность > 0, тзКурсКратностьДокумента[0].Кратность, 1);
					КонецЕсли;
					тзКурсКратностьДоговора = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов));
					Если тзКурсКратностьДоговора.Количество() > 0 Тогда
						КурсДоговора = ?(тзКурсКратностьДоговора[0].Курс > 0, тзКурсКратностьДоговора[0].Курс, 1);
						//КратностьДоговора = ?(тзКурсКратностьДоговора[0].Кратность > 0, тзКурсКратностьДоговора[0].Кратность, 1);
					КонецЕсли;
					КурсПересчета = (КурсДокумента / КурсДоговора) * (КратностьДоговора / КратностьДокумента);
					СтрокаРасшифровки.КурсВзаиморасчетов = КурсДокумента / КурсДоговора;
					СтрокаРасшифровки.КратностьВзаиморасчетов = КратностьДоговора / КратностьДокумента;
					СтрокаРасшифровки.СуммаВзаиморасчетов = ОбъектДокумента.СуммаДокумента * КурсПересчета;
				КонецЕсли;
			Иначе
				СтрокаРасшифровки.КурсВзаиморасчетов = 1;
				СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
				СтрокаРасшифровки.СуммаВзаиморасчетов = ОбъектДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
				ЗначениеСтавкиНДС     = УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
				СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
				УстановитьСвойство(СтрокаРасшифровки, "СуммаНДС", СтрокаРасшифровки.СуммаНДС);
			КонецЕсли;

			
			Если ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда
				УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
				УстановитьСвойство(ОбъектДокумента, "Дата", НачалоДня(ИсходныеДанные.Списано));
				
			КонецЕсли;
			
		
	ИначеЕсли ИмяРеквизита = "Оплачено" Тогда
	
	ИначеЕсли ИмяРеквизита = "РННПлательщика" Тогда
		УстановитьСвойство(ОбъектДокумента, "РННПлательщика", ИсходныеДанные.ПлательщикРНН);
	
	ИначеЕсли ИмяРеквизита = "РННПолучателя" Тогда
		УстановитьСвойство(ОбъектДокумента, "РННПолучателя", ИсходныеДанные.ПолучательРНН);
	
	ИначеЕсли ИмяРеквизита = "Ответственный" Тогда
		//Устанавливаем ответственного как: глТекущийПользователь
		УстановитьСвойство(ОбъектДокумента, "Ответственный", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойОтветственный"));
		
	ИначеЕсли ИмяРеквизита = "Комментарий" И ЗаполнятьКомментарии Тогда 
		// В реквизит "Комментарий" записываем назначение платежа.
		УстановитьСвойство(ОбъектДокумента, "Комментарий", ИсходныеДанные.НазначениеПлатежа);
		
	Иначе
		
		Попытка
			ЗначениеРеквизита = ИсходныеДанные[ИмяРеквизита];
		Исключение
			ЗначениеРеквизита = Неопределено;
		КонецПопытки;
			
		Если ЗначениеРеквизита <> Неопределено Тогда
			УстановитьСвойство(ОбъектДокумента, ИмяРеквизита, ЗначениеРеквизита);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоПорученияВходящее(ОбъектДокумента, ИсходныеДанные, ИмяРеквизита)
	
	ЗаполнятьКомментарии = ПолучитьНастройкуЗаполнения("ЗаполнятьКомментарии");
	
	Если ИмяРеквизита = "Организация" Тогда
		// зяполняются разом и номер и дата документа и организация
		
		УстановитьСвойство(ОбъектДокумента, "Организация", 				Организация);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеПолучатель", СтруктурноеПодразделение);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеОтправитель", СтруктурноеПодразделение);

		Если ОбъектДокумента.ДатаВходящегоДокумента <> ПустаяДата И ОбъектДокумента.ДатаВходящегоДокумента <> ИсходныеДанные.ДатаДок Тогда 
			Сообщить("В документе:"+ОбъектДокумента.Ссылка+" значение реквизита ""ДатаВходящегоДокумента"":"""+ ОбъектДокумента.ДатаВходящегоДокумента+""" заменено на:"""+ИсходныеДанные.ДатаДок+"""!",СтатусСообщения.Важное);
		КонецЕсли;

		УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерДок);
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.ДатаДок);  
		
		Если ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда
			УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
			УстановитьСвойство(ОбъектДокумента, "Дата", НачалоДня(ИсходныеДанные.Поступило));
			УстановитьСвойство(ОбъектДокумента, "ДатаВыписки", НачалоДня(ИсходныеДанные.Поступило));
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
			УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
			УстановитьСвойство(ОбъектДокумента, "ДатаВыписки", ИсходныеДанные.ДатаДок);
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "ИсточникФинансирования", Справочники.ИсточникиФинансирования.СобственныеСредства);
		УстановитьСвойство(ОбъектДокумента, "ОтражатьВБухгалтерскомУчете", Истина);
		УстановитьСвойство(ОбъектДокумента, "ОтраженоВОперУчете", Истина);
		УстановитьСвойство(ОбъектДокумента, "УчитыватьКПН", Истина);
		УстановитьСвойство(ОбъектДокумента, "ТипОперации", ?(Год(ОбъектДокумента.Дата) = 2015, Справочники.ТипыОпераций.НайтиПоНаименованию("Закуп  2015 г (СПК)"), Справочники.ТипыОпераций.НайтиПоНаименованию("Закуп  2016 г (СПК)"))); 
		УстановитьСвойство(ОбъектДокумента, "ВидУчетаНУ", Справочники.ВидыУчетаНУ.НУ);

		//Если ОбъектДокумента.ЭтоНовый() Тогда
		//	ОбъектДокумента.УстановитьНовыйНомер(Организация.Префикс);
		//КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Контрагент" Тогда
		
		Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент)   И ОбъектДокумента.Контрагент <> ИсходныеДанные.Контрагент Тогда 
			Сообщить("В документе:"+ОбъектДокумента.Ссылка+" значение реквизита ""Контрагент"":"""+ ОбъектДокумента.Контрагент+""" заменено на:"""+ИсходныеДанные.Контрагент+"""!",СтатусСообщения.Важное);
		КонецЕсли;

		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
			
		////информация о ДоговореВзаиморасчетов в файле не передается, но
		////она нужна для корректной записи документов
		////поэтому устанавливаем договор по умолчанию "Основной договор"
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
			Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) Тогда
				СтрокаРасшифровки.ДоговорКонтрагента = СоздатьНужныйДоговор(ОбъектДокумента.Контрагент, ОбъектДокумента.Организация, Истина, ИсходныеДанные.СчетОрганизации.ВалютаДенежныхСредств);
			КонецЕсли;
		КонецЕсли;
		
		СчетУчета = ПолучитьНастройкуЗаполнения("ППВх_СчетУчетаРасчетовСКонтрагентом");
		СчетАванса = ПолучитьНастройкуЗаполнения("ППВх_СчетУчетаРасчетовПоАвансам");
		
		ЗаполнятьАвтоматически = ПолучитьНастройкуЗаполнения("ППВх_ЗаполнятьДанныеАвтоматически");
		
		Если (ЗаполнятьАвтоматически <> Истина) Тогда
			
			Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
				СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
				СчетУчетаРегистр=СчетаУчета.СчетРасчетов;
				
			Иначе
				СчетУчетаРегистр = Неопределено;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СчетУчетаРегистр) Тогда
				
				Если НЕ ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда // платят нам в тенге или в валюте - ДЛЯ ВХОДЯЩЕГО
					СчетУчета = ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам", СчетАванса);
			УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", ПолучитьНастройкуЗаполнения("ППВх_СтатьяДвиженияДенежныхСредств"));
			
		КонецЕсли;
		
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентомБУ", СчетУчета);
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаРасчетовСКонтрагентомБУ", СчетУчета);

	
	ИначеЕсли ИмяРеквизита = "ДоговорКонтрагента" Тогда //заполняет при заполнении Контаргент

	ИначеЕсли ИмяРеквизита = "СчетОрганизации" Тогда //заполняет при заполнении Контаргент
		
		Если ЗначениеЗаполнено(ОбъектДокумента.СчетОрганизации) И ОбъектДокумента.СчетОрганизации <> ИсходныеДанные.СчетОрганизации Тогда 
			Сообщить("В документе:"+ОбъектДокумента.Ссылка+" значение реквизита ""СчетОрганизации"":"""+ ОбъектДокумента.СчетОрганизации+""" заменено на:"""+ИсходныеДанные.СчетОрганизации+"""!",СтатусСообщения.Важное);
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
		
		//валюта документа
		УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
		
		// счет банк
		УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетахСоб);
		
	ИначеЕсли ИмяРеквизита = "ВалютаДокумента" Тогда //заполняет при заполнении СчетОрганизации
	ИначеЕсли ИмяРеквизита = "СчетБанк" Тогда //заполняет при заполнении СчетОрганизации
	
	ИначеЕсли ИмяРеквизита = "СуммаДокумента" Тогда
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда 
			СтрокаРасшифровки.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяСтавкаНДС");
			УстановитьСвойство(СтрокаРасшифровки, "СтавкаНДС", СтрокаРасшифровки.СтавкаНДС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектДокумента.СуммаДокумента) И ОбъектДокумента.СуммаДокумента <> ИсходныеДанные.СуммаДокумента Тогда 
				Сообщить("В документе:"+ОбъектДокумента.Ссылка+" значение реквизита ""СуммаДокумента"":"""+ ОбъектДокумента.СуммаДокумента+""" заменено на:"""+ИсходныеДанные.СуммаДокумента+"""!",СтатусСообщения.Важное);
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		Если Не СтрокаРасшифровки.ДоговорКонтрагента.Пустая() Тогда
			Если ОбъектДокумента.ВалютаДокумента = СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
				СтрокаРасшифровки.КурсВзаиморасчетов = 1;
				СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
				СтрокаРасшифровки.СуммаВзаиморасчетов = ОбъектДокумента.СуммаДокумента;
			Иначе
				КурсДокумента = 1;
				КратностьДокумента = 1;
				КурсДоговора = 1;
				КратностьДоговора = 1;
				тзКурсКратностьДокумента = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", ОбъектДокумента.ВалютаДокумента));
				Если тзКурсКратностьДокумента.Количество() > 0 Тогда
					КурсДокумента = ?(тзКурсКратностьДокумента[0].Курс > 0, тзКурсКратностьДокумента[0].Курс, 1);
					//КратностьДокумента = ?(тзКурсКратностьДокумента[0].Кратность > 0, тзКурсКратностьДокумента[0].Кратность, 1);
				КонецЕсли;
				тзКурсКратностьДоговора = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов));
				Если тзКурсКратностьДоговора.Количество() > 0 Тогда
					КурсДоговора = ?(тзКурсКратностьДоговора[0].Курс > 0, тзКурсКратностьДоговора[0].Курс, 1);
					//КратностьДоговора = ?(тзКурсКратностьДоговора[0].Кратность > 0, тзКурсКратностьДоговора[0].Кратность, 1);
				КонецЕсли;
				КурсПересчета = (КурсДокумента / КурсДоговора) * (КратностьДоговора / КратностьДокумента);
				СтрокаРасшифровки.КурсВзаиморасчетов = КурсДокумента / КурсДоговора;
				СтрокаРасшифровки.КратностьВзаиморасчетов = КратностьДоговора / КратностьДокумента;
				СтрокаРасшифровки.СуммаВзаиморасчетов = ОбъектДокумента.СуммаДокумента * КурсПересчета;
			КонецЕсли;
		Иначе
			СтрокаРасшифровки.КурсВзаиморасчетов = 1;
			СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
			СтрокаРасшифровки.СуммаВзаиморасчетов = ОбъектДокумента.СуммаДокумента;
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
			ЗначениеСтавкиНДС     = УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
			СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
			УстановитьСвойство(СтрокаРасшифровки, "СуммаНДС", СтрокаРасшифровки.СуммаНДС);
		КонецЕсли;
			
			
	ИначеЕсли ИмяРеквизита = "Оплачено" Тогда
		
		//проставляем признаки того, что платеж прошел:
		Если ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда
			УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
			УстановитьСвойство(ОбъектДокумента, "Дата", НачалоДня(ИсходныеДанные.Поступило));
		КонецЕсли;
	
	ИначеЕсли ИмяРеквизита = "ВидОперации" Тогда 
		
		Если ОбъектДокумента.ЭтоНовый() Тогда            
			ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
			УстановитьСвойство(ОбъектДокумента, "ВидОперации", ВидОперации);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Ответственный" Тогда
		//Устанавливаем ответственного как: глТекущийПользователь
		УстановитьСвойство(ОбъектДокумента, "Ответственный", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойОтветственный"));
		
	ИначеЕсли ИмяРеквизита = "Комментарий" И ЗаполнятьКомментарии Тогда 
		// В реквизит "Комментарий" записываем назначение платежа.
		УстановитьСвойство(ОбъектДокумента, "Комментарий", ИсходныеДанные.НазначениеПлатежа);
		
	Иначе
		
		Попытка
			ЗначениеРеквизита = ИсходныеДанные[ИмяРеквизита];
		Исключение
			ЗначениеРеквизита = Неопределено;
		КонецПопытки;
			
		Если ЗначениеРеквизита <> Неопределено Тогда
			УстановитьСвойство(ОбъектДокумента, ИмяРеквизита, ЗначениеРеквизита);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоОрдераСписание(ОбъектДокумента, ИсходныеДанные, ИмяРеквизита)
	
	ЗаполнятьКомментарии = ПолучитьНастройкуЗаполнения("ЗаполнятьКомментарии");
	
	Если ИмяРеквизита = "Организация" Тогда
		// зяполняются разом и номер и дата документа и организация
		
		УстановитьСвойство(ОбъектДокумента, "Организация", 			    Организация);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеОтправитель", СтруктурноеПодразделение);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеПолучатель", СтруктурноеПодразделение);
		
		УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Списано);
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
			УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "ДатаВыписки", ИсходныеДанные.ДатаДок);
			
		Если ОбъектДокумента.ЭтоНовый() Тогда
			
			УстановитьСвойство(ОбъектДокумента, "Номер", ИсходныеДанные.НомерДок);

		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Контрагент" Тогда
		
		Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент)   И ОбъектДокумента.Контрагент <> ИсходныеДанные.Контрагент Тогда 
			Сообщить("В документе:"+ОбъектДокумента.Ссылка+" значение реквизита ""Контрагент"":"""+ ОбъектДокумента.Контрагент+""" заменено на:"""+ИсходныеДанные.Контрагент+"""!",СтатусСообщения.Важное);
		КонецЕсли;

		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
			
		////информация о ДоговореВзаиморасчетов в файле не передается, но
		////она нужна для корректной записи документов
		////поэтому устанавливаем договор по умолчанию "Основной договор"
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
			Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) Тогда
				СтрокаРасшифровки.ДоговорКонтрагента = СоздатьНужныйДоговор(ОбъектДокумента.Контрагент, Организация, Ложь, ИсходныеДанные.СчетОрганизации.ВалютаДенежныхСредств);
			КонецЕсли;
		КонецЕсли;
	
		СчетУчета = ПолучитьНастройкуЗаполнения("ПОСпис_СчетУчетаРасчетовСКонтрагентом");
		СчетАванса = ПолучитьНастройкуЗаполнения("ПОСпис_СчетУчетаРасчетовПоАвансам");
		
		ЗаполнятьАвтоматически = ПолучитьНастройкуЗаполнения("ПОСпис_ЗаполнятьДанныеАвтоматически");
		
		Если (ЗаполнятьАвтоматически <> Истина) Тогда
			
		Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
			СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
			СчетУчетаРегистр = СчетаУчета.СчетРасчетовПокупателя;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СчетУчетаРегистр) Тогда
			    			
				Если НЕ ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда
					СчетУчета = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам;
				КонецЕсли;
										
		КонецЕсли;
			
		Иначе
			УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам", СчетАванса);
			УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", ПолучитьНастройкуЗаполнения("ПОСпис_СтатьяДвиженияДенежныхСредств"));
			
		КонецЕсли;
		
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентомБУ", СчетУчета);
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаРасчетовСКонтрагентомБУ", СчетУчета);
	
	ИначеЕсли ИмяРеквизита = "ДоговорКонтрагента" Тогда //заполняет при заполнении Контаргент
	
	ИначеЕсли ИмяРеквизита = "СчетОрганизации" Тогда //заполняет при заполнении Контаргент
		
		Если ЗначениеЗаполнено(ОбъектДокумента.СчетОрганизации) И ОбъектДокумента.СчетОрганизации <> ИсходныеДанные.СчетОрганизации Тогда 
			Сообщить("В документе:"+ОбъектДокумента.Ссылка+" значение реквизита ""СчетОрганизации"":"""+ ОбъектДокумента.СчетОрганизации+""" заменено на:"""+ИсходныеДанные.СчетОрганизации+"""!",СтатусСообщения.Важное);
		КонецЕсли;

		УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
		
		//валюта документа
		УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
		
		// счет банк
		УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетахСоб);
		
	ИначеЕсли ИмяРеквизита = "ВалютаДокумента" Тогда //заполняет при заполнении СчетОрганизации
	ИначеЕсли ИмяРеквизита = "СчетБанк" Тогда //заполняет при заполнении СчетОрганизации
	
	ИначеЕсли ИмяРеквизита = "ВидОперации" Тогда 
		
		Если ОбъектДокумента.ЭтоНовый() Тогда            
			ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
			УстановитьСвойство(ОбъектДокумента, "ВидОперации", ВидОперации);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "СуммаДокумента" Тогда

			Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда 
				СтрокаРасшифровки.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяСтавкаНДС");
				УстановитьСвойство(СтрокаРасшифровки, "СтавкаНДС", СтрокаРасшифровки.СтавкаНДС);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбъектДокумента.СуммаДокумента) И ОбъектДокумента.СуммаДокумента <> ИсходныеДанные.СуммаДокумента Тогда 
				Сообщить("В документе:"+ОбъектДокумента.Ссылка+" значение реквизита ""СуммаДокумента"":"""+ ОбъектДокумента.СуммаДокумента+""" заменено на:"""+ИсходныеДанные.СуммаДокумента+"""!",СтатусСообщения.Важное);
			КонецЕсли;

			УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
			Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
				ЗначениеСтавкиНДС     = УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
				СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
				УстановитьСвойство(СтрокаРасшифровки, "СуммаНДС", СтрокаРасшифровки.СуммаНДС);
			КонецЕсли;
			СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
			Если Не СтрокаРасшифровки.ДоговорКонтрагента.Пустая() Тогда
				Если ОбъектДокумента.ВалютаДокумента = СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
					СтрокаРасшифровки.КурсВзаиморасчетов = 1;
					СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
					СтрокаРасшифровки.СуммаВзаиморасчетов = ОбъектДокумента.СуммаДокумента;
				Иначе
					КурсДокумента = 1;
					КратностьДокумента = 1;
					КурсДоговора = 1;
					КратностьДоговора = 1;
					тзКурсКратностьДокумента = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", ОбъектДокумента.ВалютаДокумента));
					Если тзКурсКратностьДокумента.Количество() > 0 Тогда
						КурсДокумента = ?(тзКурсКратностьДокумента[0].Курс > 0, тзКурсКратностьДокумента[0].Курс, 1);
						//КратностьДокумента = ?(тзКурсКратностьДокумента[0].Кратность > 0, тзКурсКратностьДокумента[0].Кратность, 1);
					КонецЕсли;
					тзКурсКратностьДоговора = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов));
					Если тзКурсКратностьДоговора.Количество() > 0 Тогда
						КурсДоговора = ?(тзКурсКратностьДоговора[0].Курс > 0, тзКурсКратностьДоговора[0].Курс, 1);
						//КратностьДоговора = ?(тзКурсКратностьДоговора[0].Кратность > 0, тзКурсКратностьДоговора[0].Кратность, 1);
					КонецЕсли;
					КурсПересчета = (КурсДокумента / КурсДоговора) * (КратностьДоговора / КратностьДокумента);
					СтрокаРасшифровки.КурсВзаиморасчетов = КурсДокумента / КурсДоговора;
					СтрокаРасшифровки.КратностьВзаиморасчетов = КратностьДоговора / КратностьДокумента;
					СтрокаРасшифровки.СуммаВзаиморасчетов = ОбъектДокумента.СуммаДокумента * КурсПересчета;
				КонецЕсли;
			Иначе
				СтрокаРасшифровки.КурсВзаиморасчетов = 1;
				СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
				СтрокаРасшифровки.СуммаВзаиморасчетов = ОбъектДокумента.СуммаДокумента;
			КонецЕсли;
			
			//проставляем признаки того, что платеж прошел:
			Если ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда
				УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
				//УстановитьСвойство(ОбъектДокумента, "ДатаВыписки", ИсходныеДанные.Списано);
			КонецЕсли;
			
	ИначеЕсли ИмяРеквизита = "Оплачено" Тогда     
		
	ИначеЕсли ИмяРеквизита = "Ответственный" Тогда
		//Устанавливаем ответственного как: глТекущийПользователь
		УстановитьСвойство(ОбъектДокумента, "Ответственный", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойОтветственный"));
		
	ИначеЕсли ИмяРеквизита = "Комментарий" И ЗаполнятьКомментарии Тогда 
		// В реквизит "Комментарий" записываем назначение платежа.
		УстановитьСвойство(ОбъектДокумента, "Комментарий", ИсходныеДанные.НазначениеПлатежа);
		
	Иначе
		
		Попытка
			ЗначениеРеквизита = ИсходныеДанные[ИмяРеквизита];
		Исключение
			ЗначениеРеквизита = Неопределено;
		КонецПопытки;
			
		Если ЗначениеРеквизита <> Неопределено Тогда
			УстановитьСвойство(ОбъектДокумента, ИмяРеквизита, ЗначениеРеквизита);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоОрдераПоступление(ОбъектДокумента, ИсходныеДанные, ИмяРеквизита)
	
	ЗаполнятьКомментарии = ПолучитьНастройкуЗаполнения("ЗаполнятьКомментарии");
	
	Если ИмяРеквизита = "Организация" Тогда
		// зяполняются разом и номер и дата документа и организация
		
		УстановитьСвойство(ОбъектДокумента, "Организация", 				Организация);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеОтправитель", СтруктурноеПодразделение);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеПолучатель", СтруктурноеПодразделение);

		Если ОбъектДокумента.ДатаВходящегоДокумента <> ПустаяДата И ОбъектДокумента.ДатаВходящегоДокумента <> ИсходныеДанные.ДатаДок Тогда 
			Сообщить("В документе:"+ОбъектДокумента.Ссылка+" значение реквизита ""ДатаВходящегоДокумента"":"""+ ОбъектДокумента.ДатаВходящегоДокумента+""" заменено на:"""+ИсходныеДанные.ДатаДок+"""!",СтатусСообщения.Важное);
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерДок);
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.ДатаДок);
		УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Поступило);
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
			УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
		КонецЕсли;
       // ОбъектДокумента.УстановитьНовыйНомер(Организация.Префикс);
		
	ИначеЕсли ИмяРеквизита = "Контрагент" Тогда
		
		Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент)   И ОбъектДокумента.Контрагент <> ИсходныеДанные.Контрагент Тогда 
			Сообщить("В документе:"+ОбъектДокумента.Ссылка+" значение реквизита ""Контрагент"":"""+ ОбъектДокумента.Контрагент+""" заменено на:"""+ИсходныеДанные.Контрагент+"""!",СтатусСообщения.Важное);
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
			
		////информация о ДоговореВзаиморасчетов в файле не передается, но
		////она нужна для корректной записи документов
		////поэтому устанавливаем договор по умолчанию "Основной договор"
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
			Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) Тогда
				СтрокаРасшифровки.ДоговорКонтрагента = СоздатьНужныйДоговор(ОбъектДокумента.Контрагент, Организация, Истина, ИсходныеДанные.СчетОрганизации.ВалютаДенежныхСредств);		
			КонецЕсли;
		КонецЕсли;
	
		СчетУчета = ПолучитьНастройкуЗаполнения("ПОПост_СчетУчетаРасчетовСКонтрагентом");
		СчетАванса = ПолучитьНастройкуЗаполнения("ПОПост_СчетУчетаРасчетовПоАвансам");
		
		ЗаполнятьАвтоматически = ПолучитьНастройкуЗаполнения("ПОПост_ЗаполнятьДанныеАвтоматически");
		
		Если (ЗаполнятьАвтоматически <> Истина) Тогда
			
		Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
			СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
			СчетУчетаРегистр=СчетаУчета.СчетРасчетов;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СчетУчетаРегистр) Тогда
			
					Если НЕ ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда // платят нам в тенге или в валюте - ДЛЯ ВХОДЯЩЕГО
						СчетУчета = ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков;
					КонецЕсли;
			
		КонецЕсли;
		
			
		Иначе
			УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам", СчетАванса);
			УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", ПолучитьНастройкуЗаполнения("ПОПост_СтатьяДвиженияДенежныхСредств"));
			
		КонецЕсли;
		
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентомБУ", СчетУчета);
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаРасчетовСКонтрагентомБУ", СчетУчета);
	
	ИначеЕсли ИмяРеквизита = "ДоговорКонтрагента" Тогда //заполняет при заполнении Контаргент
	
	ИначеЕсли ИмяРеквизита = "СчетОрганизации" Тогда //заполняет при заполнении Контаргент
		
		Если ЗначениеЗаполнено(ОбъектДокумента.СчетОрганизации) И ОбъектДокумента.СчетОрганизации <> ИсходныеДанные.СчетОрганизации Тогда 
			Сообщить("В документе:"+ОбъектДокумента.Ссылка+" значение реквизита ""СчетОрганизации"":"""+ ОбъектДокумента.СчетОрганизации+""" заменено на:"""+ИсходныеДанные.СчетОрганизации+"""!",СтатусСообщения.Важное);
		КонецЕсли;

		УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
		
		//валюта документа
		УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
		
		// счет банк
		УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетахСоб);
		
	ИначеЕсли ИмяРеквизита = "ВалютаДокумента" Тогда //заполняет при заполнении СчетОрганизации
	ИначеЕсли ИмяРеквизита = "СчетБанк" Тогда //заполняет при заполнении СчетОрганизации
	
	ИначеЕсли ИмяРеквизита = "Оплачено" Тогда
		
	ИначеЕсли ИмяРеквизита = "ВидОперации" Тогда 
		
		Если ОбъектДокумента.ЭтоНовый() Тогда            
			ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
			УстановитьСвойство(ОбъектДокумента, "ВидОперации", ВидОперации);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "СуммаДокумента" Тогда

			Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			КонецЕсли;
		
			Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда 
				СтрокаРасшифровки.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяСтавкаНДС");
				УстановитьСвойство(СтрокаРасшифровки, "СтавкаНДС", СтрокаРасшифровки.СтавкаНДС);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбъектДокумента.СуммаДокумента) И ОбъектДокумента.СуммаДокумента <> ИсходныеДанные.СуммаДокумента Тогда 
				Сообщить("В документе:"+ОбъектДокумента.Ссылка+" значение реквизита ""СуммаДокумента"":"""+ ОбъектДокумента.СуммаДокумента+""" заменено на:"""+ИсходныеДанные.СуммаДокумента+"""!",СтатусСообщения.Важное);
			КонецЕсли;
			
			УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
			Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			КонецЕсли;
			СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
			Если Не СтрокаРасшифровки.ДоговорКонтрагента.Пустая() Тогда
				Если ОбъектДокумента.ВалютаДокумента = СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
					СтрокаРасшифровки.КурсВзаиморасчетов = 1;
					СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
					СтрокаРасшифровки.СуммаВзаиморасчетов = ОбъектДокумента.СуммаДокумента;
				Иначе
					КурсДокумента = 1;
					КратностьДокумента = 1;
					КурсДоговора = 1;
					КратностьДоговора = 1;
					тзКурсКратностьДокумента = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", ОбъектДокумента.ВалютаДокумента));
					Если тзКурсКратностьДокумента.Количество() > 0 Тогда
						КурсДокумента = ?(тзКурсКратностьДокумента[0].Курс > 0, тзКурсКратностьДокумента[0].Курс, 1);
						//КратностьДокумента = ?(тзКурсКратностьДокумента[0].Кратность > 0, тзКурсКратностьДокумента[0].Кратность, 1);
					КонецЕсли;
					тзКурсКратностьДоговора = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов));
					Если тзКурсКратностьДоговора.Количество() > 0 Тогда
						КурсДоговора = ?(тзКурсКратностьДоговора[0].Курс > 0, тзКурсКратностьДоговора[0].Курс, 1);
						//КратностьДоговора = ?(тзКурсКратностьДоговора[0].Кратность > 0, тзКурсКратностьДоговора[0].Кратность, 1);
					КонецЕсли;
					КурсПересчета = (КурсДокумента / КурсДоговора) * (КратностьДоговора / КратностьДокумента);
					СтрокаРасшифровки.КурсВзаиморасчетов = КурсДокумента / КурсДоговора;
					СтрокаРасшифровки.КратностьВзаиморасчетов = КратностьДоговора / КратностьДокумента;
					СтрокаРасшифровки.СуммаВзаиморасчетов = ОбъектДокумента.СуммаДокумента * КурсПересчета;
				КонецЕсли;
			Иначе
				СтрокаРасшифровки.КурсВзаиморасчетов = 1;
				СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
				СтрокаРасшифровки.СуммаВзаиморасчетов = ОбъектДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
				ЗначениеСтавкиНДС     = УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
				СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
				УстановитьСвойство(СтрокаРасшифровки, "СуммаНДС", СтрокаРасшифровки.СуммаНДС);
			КонецЕсли;

	
			//проставляем признаки того, что платеж прошел:
			Если ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда     
				УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
				УстановитьСвойство(ОбъектДокумента, "ДатаВыписки", НачалоДня(ИсходныеДанные.Поступило));
			КонецЕсли;
			//В данном случае ДатуВыписки не закомментируем, потому что поиск в ПОпост проводится по входящей
			//дате, в отличие от ПОспис, где поиск проводится по ДатеВыписки.
			
	ИначеЕсли ИмяРеквизита = "Ответственный" Тогда
		//Устанавливаем ответственного как: глТекущийПользователь
		УстановитьСвойство(ОбъектДокумента, "Ответственный", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойОтветственный"));
		
	ИначеЕсли ИмяРеквизита = "Комментарий" И ЗаполнятьКомментарии Тогда 
		// В реквизит "Комментарий" записываем назначение платежа.
		УстановитьСвойство(ОбъектДокумента, "Комментарий", ИсходныеДанные.НазначениеПлатежа);
		
	Иначе
		
		Попытка
			ЗначениеРеквизита = ИсходныеДанные[ИмяРеквизита];
		Исключение
			ЗначениеРеквизита = Неопределено;
		КонецПопытки;
			
		Если ЗначениеРеквизита <> Неопределено Тогда
			УстановитьСвойство(ОбъектДокумента, ИмяРеквизита, ЗначениеРеквизита);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьСтруктуруЗначенийДокумента(ИсходныеДанные, КоллецияКолонок)
	
	НоваяСтруктура = Новый Структура;
	
	Для каждого КолонкаТаблицы из КоллецияКолонок  Цикл
		НоваяСтруктура.Вставить(КолонкаТаблицы.Имя, ИсходныеДанные[КолонкаТаблицы.Имя]);
	КонецЦикла;
	
	Возврат НоваяСтруктура;
	
КонецФункции

Процедура ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, Имя)
	
	ТипДокумента = ОбъектДокумента.Метаданные().Имя;
	
	Если ТипДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		ЗаполнитьРеквизитПлатежногоПорученияИсходящее(ОбъектДокумента, СтрокаСекции, Имя);
		
	ИначеЕсли ТипДокумента = "ПлатежноеПоручениеВходящее" Тогда
		ЗаполнитьРеквизитПлатежногоПорученияВходящее(ОбъектДокумента, СтрокаСекции, Имя);
		
	ИначеЕсли ТипДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		ЗаполнитьРеквизитПлатежногоОрдераСписание(ОбъектДокумента, СтрокаСекции, Имя);
		
	ИначеЕсли ТипДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
		ЗаполнитьРеквизитПлатежногоОрдераПоступление(ОбъектДокумента, СтрокаСекции, Имя);
		
	КонецЕсли;
	
КонецПроцедуры


// Процедура сборка*
Процедура Загрузить(ДокументыКИмпорту) Экспорт
	
	НачалоИнтервалаЗагрузки = ПустаяДата;
	КонецИнтервалаЗагрузки  = ПустаяДата;
	
	Результат = ПолучитьДатуИзСтроки(НачалоИнтервалаЗагрузки, Импорт_Заголовок.ДатаНачала);
	
	Если Не ПустаяСтрока(Результат) Тогда
		Сообщить("В заголовке файла импорта неверно указана дата начала интервала! Файл не может быть загружен!", СтатусСообщения.ОченьВажное);
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьДатуИзСтроки(КонецИнтервалаЗагрузки, Импорт_Заголовок.ДатаКонца);
	
	Если НЕ ПустаяСтрока(Результат) Тогда
		Сообщить("В заголовке файла импорта неверно указана дата окончания интервала!", СтатусСообщения.ОченьВажное);
		//Возврат;
	КонецЕсли;
	
	// загружаем отмеченные секции документов
	Для каждого СтрокаСекции из ДокументыКИмпорту Цикл
						
		Если СтрокаСекции.Загрузить Тогда
			
			Если ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					Если НачалоДня(СтрокаСекции.ДатаДок) <= НачалоДня(ДатаГраницыОбработки) Тогда
						Ответ = Вопрос("Платежный документ """ + СтрокаСекции.Операция + """ №" + СтрокаСекции.НомерДок + " от " + СтрокаСекции.ДатаДок + """ имеет дату равной или меньшей границы обработки ! Загрузить?", РежимДиалогаВопрос.ДаНет);
						Если Ответ = КодВозвратаДиалога.Нет Тогда
							Продолжить;
						КонецЕсли;
						
					ИначеЕсли ЗначениеЗаполнено(СтрокаСекции.Поступило) Тогда
						Если НачалоДня(СтрокаСекции.ДатаДок) <= НачалоДня(ДатаГраницыОбработки) Тогда
							Ответ = Вопрос("Платежный документ """ + СтрокаСекции.Операция + """ №" + СтрокаСекции.НомерДок + " от " + СтрокаСекции.ДатаДок + """ имеет дату поступления средств равной или меньшей границы обработки ! Загрузить?", РежимДиалогаВопрос.ДаНет);
							Если Ответ = КодВозвратаДиалога.Нет Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
					ИначеЕсли ЗначениеЗаполнено(СтрокаСекции.Списано) Тогда
						Если НачалоДня(СтрокаСекции.ДатаДок) <= НачалоДня(ДатаГраницыОбработки) Тогда
							Ответ = Вопрос("Платежный документ """ + СтрокаСекции.Операция + """ №" + СтрокаСекции.НомерДок + " от " + СтрокаСекции.ДатаДок + """ имеет дату списания средств равной или меньшей границы обработки ! Загрузить?", РежимДиалогаВопрос.ДаНет);
							Если Ответ = КодВозвратаДиалога.Нет Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
	
			РезультатПроверки = ПроверитьДокументДляЗагрузки(СтрокаСекции);  
			
			//Вид = ПроверитьДокументНаПовторяемостьВФайле(СтрокаСекции,ДокументыКИмпорту);
			
			Если ПустаяСтрока(РезультатПроверки) Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
					// В ИБ не найден документ, необходимо создать новый
					ВидДокумента = ПолучитьВидДокумента(СтрокаСекции.Операция, СтрокаСекции.Списано, СтрокаСекции.Поступило);
					ОбъектДокумента = СоздатьНовыйПлатежныйДокумент(ВидДокумента, СтрокаСекции.НомерДок, СтрокаСекции.ДатаДок);
					
				Иначе
					// В ИБ найден документ, необходимо получить его объект
					ОбъектДокумента = СтрокаСекции.Документ.ПолучитьОбъект();
					
				КонецЕсли;
				
				// При заполнении Организации заполняется СтруктурноеПодразделение
				ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, "Организация");
				ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, "Контрагент");
				
				Для каждого РеквизитДокумента Из ОбъектДокумента.Метаданные().Реквизиты Цикл
					
					Если (РеквизитДокумента.Имя <> "Организация") И (РеквизитДокумента.Имя <> "Контрагент") Тогда
						ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, РеквизитДокумента.Имя);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда   
					СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			    ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
					СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			    КонецЕсли;
                            				
				Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) 
				 ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) 
				 ИЛИ НЕ ЗначениеЗаполнено(СтрокаСекции.СчетКонтрагента) Тогда
					
					СписокНенайденных(СоздатьСтруктуруЗначенийДокумента(СтрокаСекции, ДокументыКИмпорту.Колонки), ОбъектДокумента,, СтрокаСекции);
					ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, "Контрагент");
					ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, "СчетКонтрагента");
				КонецЕсли;
				
				//Если ОбъектДокумента.ПометкаУдаления Тогда
				//	ЗадатьПометкуНаУдаление(ОбъектДокумента, Ложь);
				//КонецЕсли;
				
				Если ОбъектДокумента.Модифицированность() Тогда   
					ЗаписатьОбъект(ОбъектДокумента);
				КонецЕсли;
				
				Если НЕ ОбъектДокумента.ЭтоНовый() Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
						СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
					КонецЕсли;
					    СтрокаСекции.ОписаниеОшибок = "";
 						СтрокаСекции.Готовность = 0;
				КонецЕсли;
				    				
			Иначе
				Сообщить("Платежный документ """ + СтрокаСекции.Операция + """ №" + СтрокаСекции.НомерДок + " от " + СтрокаСекции.ДатаДок + " не может быть загружен:" + Символы.ПС + РезультатПроверки + "!", СтатусСообщения.ОченьВажное);
				
			КонецЕсли;
				
		КонецЕсли;
	КонецЦикла;
	
	// Платежные поручения исходящие, отсутствующие в списке загруженным помечаем на удаление
	
	//Составляем список счетов
	
	СписокСчетов = Новый СписокЗначений;
	
	Для каждого СтрокаСчета Из Импорт_РассчетныеСчета Цикл
		СписокСчетов.Добавить(СокрЛП(СтрокаСчета.РасчСчет));
	КонецЦикла;
	
	ДокументыНаУдаление = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                   |	ПлатежноеПоручениеИсходящее.Ссылка,
	                                   |	ПлатежноеПоручениеИсходящее.ДатаВыписки,
	                                   |	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета
	                                   |ИЗ
	                                   |	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	                                   |ГДЕ
	                                   |	ПлатежноеПоручениеИсходящее.ДатаВыписки >= &ДатаНач
	                                   |	И ПлатежноеПоручениеИсходящее.ДатаВыписки <= &ДатаКон
	                                   |	И ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета В(&НомераСчетов)
									   |    И ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение");
	
	ДокументыНаУдаление.УстановитьПараметр("ДатаНач",				   НачалоИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("ДатаКон",				   КонецИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов", 			   СписокСчетов);
	ДокументыНаУдаление.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);

	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ");
		
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			Если ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					Если НачалоДня(ОбъектДокументаКУдаление.Дата) <= НачалоДня(ДатаГраницыОбработки) Тогда
						Сообщить("Платежный документ """ + ОбъектДокументаКУдаление + " не помечен на удаление, так как имеет дату равной или меньшей границы обработки!", СтатусСообщения.ОченьВажное);
						Продолжить;						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			//ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Платежные поручения входящие, отсутствующие в списке загруженным помечаем на удаление
	
	ДокументыНаУдаление = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                   |	ПлатежноеПоручениеВходящее.Ссылка,
	                                   |	ПлатежноеПоручениеВходящее.ДатаВходящегоДокумента,
	                                   |	ПлатежноеПоручениеВходящее.СчетОрганизации.НомерСчета
	                                   |ИЗ
	                                   |	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
	                                   |ГДЕ
	                                   |	ПлатежноеПоручениеВходящее.ДатаВходящегоДокумента >= &ДатаНач
	                                   |	И ПлатежноеПоручениеВходящее.ДатаВходящегоДокумента <= &ДатаКон
	                                   |	И ПлатежноеПоручениеВходящее.СчетОрганизации.НомерСчета В(&НомераСчетов)
									   |    И ПлатежноеПоручениеВходящее.СтруктурноеПодразделениеПолучатель = &СтруктурноеПодразделение");
	
	ДокументыНаУдаление.УстановитьПараметр("ДатаНач",				   НачалоИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("ДатаКон",				   КонецИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов",			   СписокСчетов);
	ДокументыНаУдаление.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);

	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ");
		
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			Если ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					Если НачалоДня(ОбъектДокументаКУдаление.Дата) <= НачалоДня(ДатаГраницыОбработки) Тогда
						Сообщить("Платежный документ """ + ОбъектДокументаКУдаление + " не помечен на удаление, так как имеет дату равной или меньшей границы обработки!", СтатусСообщения.ОченьВажное);
						Продолжить;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			//ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивБанковСОбособленнымУчетом()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦС_БанкиСОсобымУчетмВыписокБанкКлиента.Банк
	|ИЗ
	|	РегистрСведений.ЦС_БанкиСОсобымУчетмВыписокБанкКлиента КАК ЦС_БанкиСОсобымУчетмВыписокБанкКлиента";

	возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Банк");
КонецФункции


///////////// Модуль     //////////////////////////////////////////////////

ПустаяДата = Дата("00010101");

СтрокаНастроек = ВосстановитьЗначение(Метаданные().Имя + "СтрокаНастроек");

Попытка
	НастройкаЗаполнения = ЗначениеИзСтрокиВнутр(СтрокаНастроек);
Исключение
	НастройкаЗаполнения.Очистить();
	НастройкаЗаполнения.Добавить(Истина, "ПроверятьБИН_ИИН");
	НастройкаЗаполнения.Добавить(Ложь,   "ПроверятьРНН");
	НастройкаЗаполнения.Добавить(Ложь,   "ЗаполнятьКомментарии");
КонецПопытки;

//Получим настройки проверки заполненности реквизитов
ПроверятьРНН 		 = ПолучитьНастройкуЗаполнения("ПроверятьРНН");
ПроверятьБИН_ИИН 	 = ПолучитьНастройкуЗаполнения("ПроверятьБИН_ИИН");
ЗаполнятьКомментарии = ПолучитьНастройкуЗаполнения("ЗаполнятьКомментарии");

Если ПроверятьРНН = Неопределено Тогда
	НастройкаЗаполнения.Добавить(Ложь, "ПроверятьРНН");
КонецЕсли;

Если ПроверятьБИН_ИИН = Неопределено Тогда
	НастройкаЗаполнения.Добавить(Истина, "ПроверятьБИН_ИИН");
КонецЕсли;

Если ЗаполнятьКомментарии = Неопределено Тогда
	НастройкаЗаполнения.Добавить(Ложь, "ЗаполнятьКомментарии");
КонецЕсли;

ЗаполнитьСтрокиРеквизитовПлДокументов();

// Общее
СформироватьТегиЗаголовка();
СформироватьТегиРасчетногоСчета();

// Экспорт
СформироватьСоответствиеВыгружаемых();
СформироватьСоответствиеНеПустыхПриЭкспорте();
Импорт_ТекстДляРазбора = "";

ЗаполнитьОбязательныеСвойстваПриЭкспорте();

// Импорт
Импорт_РассчетныеСчета = Новый ТаблицаЗначений;
СформироватьСтруктуруТаблицыРасчСчетов(Импорт_РассчетныеСчета);

РеквизитыКонтрагента = Новый ТаблицаЗначений;
СформироватьСтруктуруТаблицыРеквизитовКонтрагента(РеквизитыКонтрагента);

Импорт_ВидыДокументов = Новый Массив;

СформироватьСоответствиеЗагружаемых();
ЗаполнитьРаспознаваемыеПриИмпорте();
СформироватьСоответствияНеПустыхПриИмпорте();

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
СписокКонтрагентов =Новый СписокЗначений();
мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();

#КонецЕсли