
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ФайловаяИБ = фин_ОбщегоНазначенияСервер.ИнформационнаяБазаФайловая();
	Если Параметры.Свойство("ФиксированныйВыгружаемыйОбъект") Тогда
		Объект.ФиксированныйВыгружаемыйОбъект = Параметры.ФиксированныйВыгружаемыйОбъект;	
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ФиксированныйВыгружаемыйОбъект) Тогда
		Элементы.ПравилаВыгрузки.Видимость			= Ложь;
		Элементы.ФормаУстановитьВариантСинхронизацииДляСправочников.Видимость = Ложь;
		Элементы.ФормаУстановитьВсеФлажки.Видимость	= Ложь;
		Элементы.ФормаСнятьВсеФлажки.Видимость		= Ложь;
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект.ФиксированныйВыгружаемыйОбъект)) Тогда
			Элементы.ВариантСинхронизацииФиксированногоОбъекта.ОграничениеТипа=Новый ОписаниеТипов("ПеречислениеСсылка.фин_ВариантыСинхронизацииДокументов");
			Объект.ВариантСинхронизацииФиксированногоОбъекта=Перечисления.фин_ВариантыСинхронизацииДокументов.ПоНомеруВПределахПериода;
		Иначе	
			Элементы.ВариантСинхронизацииФиксированногоОбъекта.ОграничениеТипа=Новый ОписаниеТипов("ПеречислениеСсылка.фин_ВариантыСинхронизацииСправочников");
			Объект.ВариантСинхронизацииФиксированногоОбъекта=Перечисления.фин_ВариантыСинхронизацииСправочников.ПоНаименованию;
		КонецЕсли;
		Возврат;
	Иначе
		Элементы.ГруппаФиксированныйОбъект.Видимость	= Ложь;
	КонецЕсли;
	Макет = Обработки.фин_ЗагрузкаВыгрузкаДанныхБюджетирования.ПолучитьМакет("РазделыПереносаДанных");
	Объект.ВариантСинхронизации = Перечисления.фин_ВариантыСинхронизацииСправочников.ПоНаименованию;
	ТекущийРодитель1 = Неопределено;
	ТекущийРодитель2 = Неопределено;
	ТекущийРодитель = ПравилаВыгрузки;
	Для Инд = 1 По Макет.ВысотаТаблицы Цикл
		Область = Макет.Область("R"+Формат(Инд,"ЧГ="));
		Уровень = Макет.Область("R"+Формат(Инд,"ЧГ=")+"C1").Текст;
		Если Уровень = "1" Тогда
			КоллекцияДляДобавления = ПравилаВыгрузки.ПолучитьЭлементы();
		ИначеЕсли Уровень = "2" Тогда
			КоллекцияДляДобавления = ТекущийРодитель1.ПолучитьЭлементы();
		ИначеЕсли Уровень = "3" Тогда
			КоллекцияДляДобавления = ТекущийРодитель2.ПолучитьЭлементы();
		Иначе
			КоллекцияДляДобавления = ТекущийРодитель.ПолучитьЭлементы();
		КонецЕсли;
		НоваяСтрока = КоллекцияДляДобавления.Добавить();
		Если Уровень = "1" Тогда
			ТекущийРодитель1 = НоваяСтрока;
			ТекущийРодитель = НоваяСтрока;
		ИначеЕсли Уровень = "2" Тогда
			ТекущийРодитель2 = НоваяСтрока;
			ТекущийРодитель = НоваяСтрока;
		ИначеЕсли Уровень = "3" Тогда
			ТекущийРодитель = НоваяСтрока;
		КонецЕсли;
		НоваяСтрока.ЭтоГруппа = ЗначениеЗаполнено(Уровень);
		НоваяСтрока.Наименование = Макет.Область("R"+Формат(Инд,"ЧГ=")+"C3").Текст;
		НоваяСтрока.Пометка = НЕ ЗначениеЗаполнено(Макет.Область("R"+Формат(Инд,"ЧГ=")+"C2").Текст);
		НоваяСтрока.ГруппаОбъектов = Макет.Область("R"+Формат(Инд,"ЧГ=")+"C4").Текст;
		НоваяСтрока.ИмяКроссплатформенное = Макет.Область("R"+Формат(Инд,"ЧГ=")+"C5").Текст;
		НоваяСтрока.Объект = фин_ОбщегоНазначенияКлиентСервер.ИмяОбъектаИБ(Макет.Область("R"+Формат(Инд,"ЧГ=")+"C5").Текст);
		ПоНаименованию = Макет.Область("R"+Формат(Инд,"ЧГ=")+"C6").Текст="+";
		Если НоваяСтрока.ЭтоГруппа Тогда
			НоваяСтрока.Картинка = 0;
		ИначеЕсли НРег(НоваяСтрока.ГруппаОбъектов)=НРег("Справочники") Тогда
			НоваяСтрока.ВариантСинхронизацииСправочник = ?(ПоНаименованию,Перечисления.фин_ВариантыСинхронизацииСправочников.ПоНаименованию,Перечисления.фин_ВариантыСинхронизацииСправочников.ПоКоду);
			НоваяСтрока.Картинка = 1;
		ИначеЕсли НРег(НоваяСтрока.ГруппаОбъектов)=НРег("Документы") Тогда
			НоваяСтрока.ВариантСинхронизацииДокумент = Перечисления.фин_ВариантыСинхронизацииДокументов.ПоНомеруВПределахПериода;
			НоваяСтрока.Картинка = 2;
		ИначеЕсли НРег(НоваяСтрока.ГруппаОбъектов)=НРег("Алгоритм") Тогда
			НоваяСтрока.Картинка = 3;
		ИначеЕсли НРег(НоваяСтрока.ГруппаОбъектов)=НРег("РегистрыСведений") Тогда
			НоваяСтрока.Картинка = 4;
		ИначеЕсли НРег(НоваяСтрока.ГруппаОбъектов)=НРег("ПланыВидовХарактеристик") Тогда
			НоваяСтрока.ВариантСинхронизацииСправочник = ?(ПоНаименованию,Перечисления.фин_ВариантыСинхронизацииСправочников.ПоНаименованию,Перечисления.фин_ВариантыСинхронизацииСправочников.ПоКоду);
			НоваяСтрока.Картинка = 5;
		ИначеЕсли НРег(НоваяСтрока.ГруппаОбъектов)=НРег("ПланыСчетов") Тогда
			НоваяСтрока.ВариантСинхронизацииСправочник = Перечисления.фин_ВариантыСинхронизацииСправочников.ПоКоду;
			НоваяСтрока.Картинка = 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	Диалог = Новый ДиалогВыбораФайла(Режим);
	Диалог.Заголовок = "Выбор файла для выгрузки данных";
	Диалог.Фильтр = "XML-файл (*.xml)|*.xml";
	ОписаниеОбработкаВыбораФайла = Новый ОписаниеОповещения("ОбработкаВыбораФайла",ЭтотОбъект);
	Диалог.Показать(ОписаниеОбработкаВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораФайла(МассивФайлов,ДополнительныеПараметры) Экспорт
	Если МассивФайлов<>Неопределено И МассивФайлов.Количество()>0 Тогда
		Объект.ПутьКФайлу = МассивФайлов[0];
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПравилаВыгрузкиПометкаПриИзменении(Элемент)
	УстановитьПометкиВПодчиненных(Элементы.ПравилаВыгрузки.ТекущиеДанные);
	Если Элементы.ПравилаВыгрузки.ТекущиеДанные.Пометка Тогда
		ТекСтрока = Элементы.ПравилаВыгрузки.ТекущиеДанные;
		Пока ТекСтрока.ПолучитьРодителя()<>Неопределено Цикл
			ТекСтрока = ТекСтрока.ПолучитьРодителя();
			ТекСтрока.пометка = Истина;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиВПодчиненных(ЭлементДанных)
	Для Каждого ПодчиненнаяСтрока Из ЭлементДанных.ПолучитьЭлементы() Цикл
		ПодчиненнаяСтрока.Пометка = ЭлементДанных.Пометка;
		УстановитьПометкиВПодчиненных(ПодчиненнаяСтрока);
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура УстановитьВариантСинхронизацииДляСправочников(Команда)
	Список = Новый СписокЗначений;
	Список.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВариантыСинхронизацииСправочников.ПоКоду"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВариантыСинхронизацииСправочников.ПоНаименованию"));
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораВарианта",ЭтотОбъект);
	Список.ПоказатьВыборЭлемента(ОписаниеОповещения,"Выберите вариант");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВарианта(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		УстановитьВариантВПодчиненных(ПравилаВыгрузки.ПолучитьЭлементы(),РезультатВыбора.Значение);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантВПодчиненных(КоллекцияДанных,Вариант)
	Для Каждого ПодчиненнаяСтрока Из КоллекцияДанных Цикл
		Если НРег(ПодчиненнаяСтрока.ГруппаОбъектов)=НРег("Справочники") ИЛИ НРег(ПодчиненнаяСтрока.ГруппаОбъектов)=НРег("ПланыВидовХарактеристик") Тогда
			ПодчиненнаяСтрока.ВариантСинхронизацииСправочник = Вариант;
		КонецЕсли;
		УстановитьВариантВПодчиненных(ПодчиненнаяСтрока.ПолучитьЭлементы(),Вариант);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьДанныеНаСервере()
	ВыгружаемыеОбъекты.Очистить();
	ДобавитьВыгружаемые(ПравилаВыгрузки.ПолучитьЭлементы());
	СоответствиеВыгруженныхОбъектов = Новый Соответствие;
	ОбъектыКВыгрузке = Новый Соответствие;
	ЗаписьXML = Новый ЗаписьXML;
	Если ФайловаяИБ Тогда
		ИмяФайла = Объект.ПутьКФайлу;
	Иначе
		МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Объект.ПутьКФайлу,"\");
		ПоследнееЗначение = МассивСтрок[МассивСтрок.Количество()-1];
		ИмяФайла = КаталогВременныхФайлов()+ПоследнееЗначение;
	КонецЕсли;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	//ЗаписьXML.ЗаписатьНачалоЭлемента("_1CV8DtUD", "http://www.1c.ru/V8/1CV8DtUD/"); 
	//ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("V8Exch", "http://www.1c.ru/V8/1CV8DtUD/");
	//ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	//ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
	ЗаписьXML.ЗаписатьАтрибут("ВерсияФормата","1.0");
	
	Если НЕ ЗначениеЗаполнено(Объект.ФиксированныйВыгружаемыйОбъект) Тогда
		ВыгружаемыеКонстанты = Новый Массив;
		ВыгружаемыеКонстанты.Добавить("ВалютаУправленческогоУчета");
	 	ВыгружаемыеКонстанты.Добавить("фин_БюджетированиеПоОрганизациям");
		ВыгружаемыеКонстанты.Добавить("фин_ВестиКалендарноеПланированиеБюджетногоПроцесса");
		ВыгружаемыеКонстанты.Добавить("фин_ВестиУчетПоПлановойНоменклатуре");
		ВыгружаемыеКонстанты.Добавить("фин_ВестиУчетПоПлануСчетовБюджетирования");
		ВыгружаемыеКонстанты.Добавить("фин_ВестиУчетПоПроектам");
		ВыгружаемыеКонстанты.Добавить("фин_ИспользоватьАнализОтклоненийФактическихДанных");
		ВыгружаемыеКонстанты.Добавить("фин_ИспользоватьЗависимостиФинансовыхПоказателей");
		ВыгружаемыеКонстанты.Добавить("фин_ИспользоватьМоделиРаспределения");
		ВыгружаемыеКонстанты.Добавить("фин_ИспользоватьПроизводственныеМодели");
		ВыгружаемыеКонстанты.Добавить("фин_ИспользоватьРасчетныеМоделиБюджетирования");
		ВыгружаемыеКонстанты.Добавить("фин_ИспользоватьУниверсальнуюАналитику");
		ВыгружаемыеКонстанты.Добавить("фин_ОграничитьВыборПериодовБюджетированияИнтерваламиБюджетныхКампаний");
		ВыгружаемыеКонстанты.Добавить("фин_ОсновнойСценарийПланирования");
		ВыгружаемыеКонстанты.Добавить("фин_ОтключитьАвтоматическоеСозданиеФинансовыхПоказателей");
		ВыгружаемыеКонстанты.Добавить("фин_ПериодичностьФормированияБюджетногоРегламента");
	 	ВыгружаемыеКонстанты.Добавить("фин_ПоддержкаЦиклическихМоделей");
		ВыгружаемыеКонстанты.Добавить("фин_ПрименятьРазрядностьДляКоличества");
		ВыгружаемыеКонстанты.Добавить("фин_РазделительКодаСтатьиВОтчетах");
	 	ВыгружаемыеКонстанты.Добавить("фин_РазрядностьПланированияБюджетов");
		ВыгружаемыеКонстанты.Добавить("фин_РазрешитьФормированиеБюджетовВнеПорядкаРегламента");
		ВыгружаемыеКонстанты.Добавить("фин_РасчетПлановыхЗатратТрудаВРазрезеДолжностей");
		ВыгружаемыеКонстанты.Добавить("фин_РасширенныйРежимФормированияПроводокПриРасчетеПоМоделям");
		ВыгружаемыеКонстанты.Добавить("фин_РежимФормированияНаименованияФинансовыхПоказателей");
		ВыгружаемыеКонстанты.Добавить("фин_СтруктурироватьБюджетныйПроцессПоЭтапам");
		ВыгружаемыеКонстанты.Добавить("фин_УчитыватьФактическиеДанныеПоДвижениямРегистров");
		СтруктураКонстанты = Новый Структура;
		Для Каждого ИмяКонстанты Из ВыгружаемыеКонстанты Цикл
			Значение  = ПолучитьЗначениеДляЗаписиВXML(Константы[фин_ОбщегоНазначенияКлиентСервер.ИмяОбъектаИБ(ИмяКонстанты)].Получить(),СоответствиеВыгруженныхОбъектов,ЗаписьXML,ОбъектыКВыгрузке);
			СтруктураКонстанты.Вставить(ИмяКонстанты,Значение);
		КонецЦикла;
		ЗаписьXML.ЗаписатьНачалоЭлемента("Константы");
		ЗаписьXML.ЗаписатьАтрибут("ГруппаОбъектов","Константы");
		ЗаписьXML.ЗаписатьАтрибут("Тип","ПараметрыУчета");
		Для Каждого ИмяКонстанты Из ВыгружаемыеКонстанты Цикл
			Значение  = СтруктураКонстанты[ИмяКонстанты];
			ЗаписьXML.ЗаписатьНачалоЭлемента("Реквизит");
			ЗаписьXML.ЗаписатьАтрибут("Тип","Реквизит");
			ЗаписьXML.ЗаписатьАтрибут("ИмяРеквизита",ИмяКонстанты);
			ЗаписьXML.ЗаписатьАтрибут("ЗначениеРеквизита",Значение);
			ЗаписьXML.ЗаписатьКонецЭлемента();// Реквизит
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();// Константы
		Попытка
			ПроизвестиВыгрузкуГруппы(ПравилаВыгрузки.ПолучитьЭлементы(),СоответствиеВыгруженныхОбъектов,ЗаписьXML,ОбъектыКВыгрузке);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	Иначе
		МетаданныеОбъекта = Объект.ФиксированныйВыгружаемыйОбъект.Метаданные();
		ПолноеИмя 		= МетаданныеОбъекта.ПолноеИмя();
		ВидОбъектов 	= Лев(ПолноеИмя,Найти(ПолноеИмя,".")-1);
		Если ВидОбъектов = "Документ" Тогда
			ВидОбъектов = "Документы";
		ИначеЕсли ВидОбъектов = "Справочник" Тогда
			ВидОбъектов = "Справочники";
		ИначеЕсли ВидОбъектов = "ПланВидовХарактеристик" Тогда
			ВидОбъектов = "ПланыВидовХарактеристик";
		ИначеЕсли ВидОбъектов = "ПланСчетов" Тогда
			ВидОбъектов = "ПланыСчетов";
		ИначеЕсли ВидОбъектов = "ПланВидовРасчета" Тогда
			ВидОбъектов = "ПланыВидовРасчета";
		КонецЕсли;
		СсылочныйТип 	= ВидОбъектов = "Справочники" ИЛИ ВидОбъектов = "Документы" ИЛИ ВидОбъектов = "ПланыВидовХарактеристик";
		СтрокаПравил = Новый Структура("Объект,ГруппаОбъектов,ИмяКроссплатформенное,ТолькоПоиск,ВариантСинхронизацииСправочник,ВариантСинхронизацииДокумент",МетаданныеОбъекта.Имя,ВидОбъектов,фин_ОбщегоНазначенияКлиентСервер.ИмяОбъектаКроссплатформенное(МетаданныеОбъекта.Имя),Ложь,Объект.ВариантСинхронизацииФиксированногоОбъекта,Объект.ВариантСинхронизацииФиксированногоОбъекта);
		ВыгрузитьЭлементКоллекции(Объект.ФиксированныйВыгружаемыйОбъект,СтрокаПравил,СоответствиеВыгруженныхОбъектов,ЗаписьXML,ВидОбъектов,СсылочныйТип,ОбъектыКВыгрузке);
    КонецЕсли;
  	ЗаписьXML.ЗаписатьКонецЭлемента(); //V8Exch:Data
 //   ЗаписьXML.ЗаписатьКонецЭлемента(); 
	ЗаписьXML.Закрыть();
	Если НЕ ФайловаяИБ Тогда
		ДанныеДляХранилища = Новый ДвоичныеДанные(ИмяФайла);
		АдресФайлаНаСервере = ПоместитьВоВременноеХранилище(ДанныеДляХранилища,УникальныйИдентификатор);
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыгружаемые(КоллекцияДанных)
	Для Каждого ПодчиненнаяСтрока Из КоллекцияДанных Цикл
		Если ПодчиненнаяСтрока.Пометка = Ложь Тогда
			Продолжить;
		КонецЕсли;
		Если ПодчиненнаяСтрока.ЭтоГруппа Тогда
			ДобавитьВыгружаемые(ПодчиненнаяСтрока.ПолучитьЭлементы());
		Иначе
			НоваяСтрока = ВыгружаемыеОбъекты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ПодчиненнаяСтрока);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПроизвестиВыгрузкуГруппы(КоллекцияДанных,СоответствиеВыгруженныхОбъектов,ЗаписьXML,ОбъектыКВыгрузке)
	Для Каждого ПодчиненнаяСтрока Из КоллекцияДанных Цикл
		Если ПодчиненнаяСтрока.Пометка = Ложь Тогда
			Продолжить;
		КонецЕсли;
		Если ПодчиненнаяСтрока.ЭтоГруппа Тогда
			ПроизвестиВыгрузкуГруппы(ПодчиненнаяСтрока.ПолучитьЭлементы(),СоответствиеВыгруженныхОбъектов,ЗаписьXML,ОбъектыКВыгрузке);
		Иначе
			ВыгрузитьОбъекты(ПодчиненнаяСтрока,СоответствиеВыгруженныхОбъектов,ЗаписьXML,ОбъектыКВыгрузке);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьОбъекты(СтрокаПравил,СоответствиеВыгруженныхОбъектов,ЗаписьXML,ОбъектыКВыгрузке)
	ВидОбъектов = СтрокаПравил.ГруппаОбъектов;
	СсылочныйТип = ВидОбъектов = "Справочники" ИЛИ ВидОбъектов = "Документы" ИЛИ ВидОбъектов = "ПланыВидовХарактеристик";
	ВыборкаОбъектов = ПолучитьВыборку(СтрокаПравил);
	Пока ВыборкаОбъектов.Следующий() Цикл
		Если СсылочныйТип И СоответствиеВыгруженныхОбъектов.Получить(ВыборкаОбъектов.Ссылка)<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ВыгрузитьЭлементКоллекции(ВыборкаОбъектов,СтрокаПравил,СоответствиеВыгруженныхОбъектов,ЗаписьXML,ВидОбъектов,СсылочныйТип,ОбъектыКВыгрузке);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ВыгрузитьЭлементКоллекции(ВыборкаОбъектов,СтрокаПравил,СоответствиеВыгруженныхОбъектов,ЗаписьXML,ВидОбъектов,СсылочныйТип,ОбъектыКВыгрузке)
	СтруктураПолей = Новый Структура;
	ОписаниеПолей = Новый Соответствие;
	ТолькоПоиск = Ложь;
	Если Типзнч(СтрокаПравил)=Тип("Структура") Тогда
		ТолькоПоиск = СтрокаПравил.ТолькоПоиск;
	КонецЕсли;
	Если ВидОбъектов = "Алгоритм" Тогда
		Если СтрокаПравил.Объект = "ФактическиеДанные" Тогда
			СтруктураПолей.Вставить("Дата",			ВыборкаОбъектов["Период"]);
			СтруктураПолей.Вставить("ДатаНачала",	ВыборкаОбъектов["Период"]);
			СтруктураПолей.Вставить("ДатаКонца",	КонецНедели(ВыборкаОбъектов["Период"]));
			СтруктураПолей.Вставить("Организация",	ВыборкаОбъектов["Организация"]);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	фин_ОборотыБюджетовОбороты.ПериодПланирования КАК Период,
				|	фин_ОборотыБюджетовОбороты.ФинансовыйПоказатель КАК ФинансовыйПоказатель,
				|	фин_ОборотыБюджетовОбороты.УправленческоеПодразделение,
				|	фин_ОборотыБюджетовОбороты.Проект,
				|	фин_ОборотыБюджетовОбороты.Контрагент,
				|	фин_ОборотыБюджетовОбороты.Номенклатура,
				|	фин_ОборотыБюджетовОбороты.Валюта,
				|	фин_ОборотыБюджетовОбороты.КоличествоОборот КАК Количество,
				|	фин_ОборотыБюджетовОбороты.ВалютнаяСуммаОборот КАК Сумма,
				|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез1,
				|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез2,
				|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез3,
				|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез4,
				|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез5,
				|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез6,
				|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез7,
				|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез8,
				|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез9,
				|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез10
				|ИЗ
				|	РегистрНакопления.фин_ОборотыБюджетов.Обороты(&НачалоНедели, &КонецНедели, , Организация = &Организация И Сценарий = &ПустойСценарий) КАК фин_ОборотыБюджетовОбороты
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторНаборовДополнительныхРазрезов КАК фин_КлассификаторНаборовДополнительныхРазрезов
				|		ПО фин_ОборотыБюджетовОбороты.ДополнительныеРазрезы = фин_КлассификаторНаборовДополнительныхРазрезов.Ссылка
				|
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ
				|	фин_ОборотыБюджетовОбороты.ПериодПланирования КАК Период,
				|	фин_ОборотыБюджетовОбороты.ФинансовыйПоказатель КАК ФинансовыйПоказатель,
				|	фин_ОборотыБюджетовОбороты.УправленческоеПодразделение,
				|	фин_ОборотыБюджетовОбороты.Проект,
				|	фин_ОборотыБюджетовОбороты.Контрагент,
				|	фин_ОборотыБюджетовОбороты.Номенклатура,
				|	фин_ОборотыБюджетовОбороты.Валюта,
				|	фин_ОборотыБюджетовОбороты.КоличествоОборот КАК Количество,
				|	фин_ОборотыБюджетовОбороты.ВалютнаяСуммаОборот КАК Сумма,
				|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез1,
				|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез2,
				|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез3,
				|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез4,
				|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез5,
				|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез6,
				|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез7,
				|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез8,
				|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез9,
				|	фин_КлассификаторНаборовДополнительныхРазрезов.Разрез10
				|ИЗ
				|	РегистрНакопления.фин_ФактическиеОборотыБюджетов.Обороты(&НачалоНедели, &КонецНедели, , Организация = &Организация) КАК фин_ОборотыБюджетовОбороты
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_КлассификаторНаборовДополнительныхРазрезов КАК фин_КлассификаторНаборовДополнительныхРазрезов
				|		ПО фин_ОборотыБюджетовОбороты.ДополнительныеРазрезы = фин_КлассификаторНаборовДополнительныхРазрезов.Ссылка
				|
				|УПОРЯДОЧИТЬ ПО
				|	Период,
				|	ФинансовыйПоказатель";
			
			Запрос.УстановитьПараметр("КонецНедели", 	КонецНедели(ВыборкаОбъектов["Период"]));
			Запрос.УстановитьПараметр("НачалоНедели",	ВыборкаОбъектов["Период"]);
			Запрос.УстановитьПараметр("Организация", 	ВыборкаОбъектов["Организация"]);
			Запрос.УстановитьПараметр("ПустойСценарий", фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий());
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ТабличныеЧасти = Новый Структура("БюджетныеОперации",РезультатЗапроса.Выгрузить());
			СтруктураПолей.Вставить("ТабличныеЧасти",ТабличныеЧасти);
			
			
		Иначе
			ВызватьИсключение "Неизвестный алгоритм "+СтрокаПравил.Объект;
		КонецЕсли;
	Иначе
		МетаданныеОбъекта = Метаданные[СтрокаПравил.ГруппаОбъектов][СтрокаПравил.Объект];
		Если ВидОбъектов = "РегистрыСведений" Тогда
			Для Каждого Реквизит Из МетаданныеОбъекта.Измерения Цикл
				СтруктураПолей.Вставить(Реквизит.Имя,ВыборкаОбъектов[Реквизит.Имя]);
				ОписаниеПолей.Вставить(Реквизит.Имя,"Измерения");
			КонецЦикла;
			Для Каждого Реквизит Из МетаданныеОбъекта.Ресурсы Цикл
				СтруктураПолей.Вставить(Реквизит.Имя,ВыборкаОбъектов[Реквизит.Имя]);
				ОписаниеПолей.Вставить(Реквизит.Имя,"Ресурсы");
			КонецЦикла;         
			Если Строка(МетаданныеОбъекта.ПериодичностьРегистраСведений)<>"Непериодический" Тогда
				СтруктураПолей.Вставить("Период",ВыборкаОбъектов["Период"]);
				ОписаниеПолей.Вставить(Реквизит.Имя,"Свойства");
			КонецЕсли;
		КонецЕсли;
		Если НЕ ТолькоПоиск Тогда
			Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
				Если (ВидОбъектов = "Справочники" ИЛИ ВидОбъектов = "ПланыВидовХарактеристик") И МетаданныеОбъекта.Иерархический Тогда
					Если ВыборкаОбъектов.Ссылка.ЭтоГруппа И Строка(Реквизит.Использование) = "ДляЭлемента" Тогда
						Продолжить;
					КонецЕсли;
					Если ВыборкаОбъектов.Ссылка.ЭтоГруппа = Ложь И Строка(Реквизит.Использование) = "ДляГруппы" Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;	
				СтруктураПолей.Вставить(Реквизит.Имя,ВыборкаОбъектов[Реквизит.Имя]);
				ОписаниеПолей.Вставить(Реквизит.Имя,"Реквизиты");
			КонецЦикла;
		КонецЕсли;
		Если ВидОбъектов = "Справочники" ИЛИ ВидОбъектов = "ПланыВидовХарактеристик" Тогда
			СтруктураПолей.Вставить("ТолькоПоиск",ТолькоПоиск);
			СтруктураПолей.Вставить("Код",ВыборкаОбъектов["Код"]);
			СтруктураПолей.Вставить("Наименование",ВыборкаОбъектов["Наименование"]);
			СтруктураПолей.Вставить("РежимПоиска",?(СтрокаПравил.ВариантСинхронизацииСправочник=Перечисления.фин_ВариантыСинхронизацииСправочников.ПоКоду,"Код","Наименование"));
			Если НЕ ТолькоПоиск Тогда
				Если ВидОбъектов = "Справочники" И НЕ ТолькоПоиск Тогда
					Если МетаданныеОбъекта.Иерархический Тогда
						СтруктураПолей.Вставить("ЭтоГруппа",ВыборкаОбъектов.Ссылка["ЭтоГруппа"]);
						СтруктураПолей.Вставить("Родитель",ВыборкаОбъектов["Родитель"]);
					КонецЕсли;
					Если МетаданныеОбъекта.Владельцы.Количество()>0 Тогда
						СтруктураПолей.Вставить("Владелец",ВыборкаОбъектов["Владелец"]);
					КонецЕсли;
				ИначеЕсли ВидОбъектов = "ПланыВидовХарактеристик" Тогда
					СтруктураПолей.Вставить("ТипЗначения",ВыборкаОбъектов.ТипЗначения);
				КонецЕсли;
			КонецЕсли;
			Если ВыборкаОбъектов.Предопределенный Тогда
				СтруктураПолей = Новый Структура("ИмяПредопределенныхДанных",ВыборкаОбъектов.ИмяПредопределенныхДанных);
				СтруктураПолей.Вставить("РежимПоиска","ИмяПредопределенныхДанных");
			КонецЕсли;
		ИначеЕсли ВидОбъектов = "ПланыСчетов" Тогда
			СтруктураПолей.Вставить("ТолькоПоиск",ТолькоПоиск);
			СтруктураПолей.Вставить("Код",ВыборкаОбъектов["Код"]);
			СтруктураПолей.Вставить("Наименование",ВыборкаОбъектов["Наименование"]);
			СтруктураПолей.Вставить("РежимПоиска",?(СтрокаПравил.ВариантСинхронизацииСправочник=Перечисления.фин_ВариантыСинхронизацииСправочников.ПоКоду,"Код","Наименование"));
			Если НЕ ТолькоПоиск Тогда
				СтруктураПолей.Вставить("Родитель",ВыборкаОбъектов["Родитель"]);
				СтруктураПолей.Вставить("Порядок",ВыборкаОбъектов["Порядок"]);
				СтруктураПолей.Вставить("Вид",ВыборкаОбъектов["Вид"]);
				СтруктураПолей.Вставить("Забалансовый",ВыборкаОбъектов["Забалансовый"]);
				Для Каждого Реквизит Из МетаданныеОбъекта.ПризнакиУчета Цикл
					СтруктураПолей.Вставить(Реквизит.Имя,ВыборкаОбъектов[Реквизит.Имя]);
					ОписаниеПолей.Вставить(Реквизит.Имя,"ПризнакиУчета");
				КонецЦикла;
			КонецЕсли;
			Если ВыборкаОбъектов.Предопределенный Тогда
				СтруктураПолей = Новый Структура("ИмяПредопределенныхДанных",ВыборкаОбъектов.ИмяПредопределенныхДанных);
				СтруктураПолей.Вставить("РежимПоиска","ИмяПредопределенныхДанных");
			КонецЕсли;
		ИначеЕсли ВидОбъектов = "Документы" Тогда
			СтруктураПолей.Вставить("ТолькоПоиск",ТолькоПоиск);
			СтруктураПолей.Вставить("Номер",ВыборкаОбъектов["Номер"]);
			СтруктураПолей.Вставить("Дата",ВыборкаОбъектов["Дата"]);
			СтруктураПолей.Вставить("РежимПоиска",?(СтрокаПравил.ВариантСинхронизацииДокумент=Перечисления.фин_ВариантыСинхронизацииДокументов.ПоНомеруВПределахПериода,"Номер",""));
		КонецЕсли;
		Если ((ВидОбъектов = "Справочники" ИЛИ ВидОбъектов = "ПланыВидовХарактеристик") И НЕ ВыборкаОбъектов.Предопределенный) ИЛИ ВидОбъектов = "Документы" Тогда
			Если МетаданныеОбъекта.ТабличныеЧасти.Количество()>0 И НЕ ТолькоПоиск Тогда
				ТабличныеЧасти = Новый Структура;
				Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
					ТабличныеЧасти.Вставить(ТабличнаяЧасть.Имя,ВыборкаОбъектов[ТабличнаяЧасть.Имя].Выгрузить());
				КонецЦикла;
				СтруктураПолей.Вставить("ТабличныеЧасти",ТабличныеЧасти);
			КонецЕсли;
		ИначеЕсли ВидОбъектов = "ПланыСчетов"  И НЕ ВыборкаОбъектов.Предопределенный Тогда
			ТабличныеЧасти = Новый Структура;
			ТабличныеЧасти.Вставить("ВидыСубконто",ВыборкаОбъектов["ВидыСубконто"].Выгрузить());
			СтруктураПолей.Вставить("ТабличныеЧасти",ТабличныеЧасти);
		КонецЕсли;
	КонецЕсли;
	Если СсылочныйТип Тогда
		НомерОбъекта = Формат(СоответствиеВыгруженныхОбъектов.Количество()+1,"ЧГ=");
		СоответствиеВыгруженныхОбъектов.Вставить(ВыборкаОбъектов.Ссылка,НомерОбъекта);
		СтруктураДляПоиска = Новый Структура("ТолькоПоиск,РежимПоиска");
		Если ВидОбъектов = "Справочники" ИЛИ ВидОбъектов = "ПланыВидовХарактеристик" ИЛИ ВидОбъектов = "ПланыСчетов" Тогда
			СтруктураДляПоиска.Вставить("Код");
			СтруктураДляПоиска.Вставить("Наименование");
			Если ВидОбъектов = "Справочники" Тогда
				Если МетаданныеОбъекта.Владельцы.Количество()>0 Тогда
					СтруктураДляПоиска.Вставить("Владелец");
				КонецЕсли;
				Если МетаданныеОбъекта.Иерархический Тогда
					СтруктураДляПоиска.Вставить("ЭтоГруппа");
					//СтруктураДляПоиска.Вставить("Родитель");
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВидОбъектов = "Документы" Тогда
			СтруктураДляПоиска.Вставить("Дата");
			СтруктураДляПоиска.Вставить("Номер");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураДляПоиска,СтруктураПолей);
		СтруктураПолей.Вставить("Представление",ПолучитьЗначениеДляЗаписиВXML(Строка(ВыборкаОбъектов.Ссылка),СоответствиеВыгруженныхОбъектов,ЗаписьXML,ОбъектыКВыгрузке));
		ОбъектыКВыгрузке.Вставить(НомерОбъекта,СтруктураДляПоиска);
	КонецЕсли;
	
	СтруктураСсылочныхПолей = Новый Структура;
	Для Каждого ЭлементСтруктуры Из СтруктураПолей Цикл
		Если ЭлементСтруктуры.Ключ<>"ТабличныеЧасти" Тогда
			ЗначениеСвойства = ПолучитьЗначениеДляЗаписиВXML(ЭлементСтруктуры.Значение,СоответствиеВыгруженныхОбъектов,ЗаписьXML,ОбъектыКВыгрузке);
			СтруктураСсылочныхПолей.Вставить(ЭлементСтруктуры.Ключ,ЗначениеСвойства);
		Иначе
			СтруктураТабличныеЧасти = Новый Структура;
			Для Каждого ЭлементТЧ Из ЭлементСтруктуры.Значение Цикл
				ПустаяТЧ = Новый ТаблицаЗначений;
				Для Каждого Колонка Из ЭлементТЧ.Значение.Колонки Цикл
					Если Колонка.Имя="Ссылка" тогда
						Продолжить;
					КонецЕсли;
					ПустаяТЧ.Колонки.Добавить(Колонка.Имя);
				КонецЦикла;
				Для Каждого СтрокаТЧ Из ЭлементТЧ.Значение Цикл
					НоваяСтрока = ПустаяТЧ.Добавить();
					Для Каждого Колонка Из ПустаяТЧ.Колонки Цикл
						Если Колонка.Имя="Ссылка" тогда
							Продолжить;
						КонецЕсли;
						НоваяСтрока[Колонка.Имя] = ПолучитьЗначениеДляЗаписиВXML(СтрокаТЧ[Колонка.Имя],СоответствиеВыгруженныхОбъектов,ЗаписьXML,ОбъектыКВыгрузке);
					КонецЦикла;
				КонецЦикла;
				СтруктураТабличныеЧасти.Вставить(ЭлементТЧ.Ключ,ПустаяТЧ);
			КонецЦикла;
			СтруктураСсылочныхПолей.Вставить("ТабличныеЧасти",СтруктураТабличныеЧасти);
		КонецЕсли;
	КонецЦикла;
//	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ЗаписатьНачалоЭлемента(СтрокаПравил.ГруппаОбъектов+"_"+СтрокаПравил.Объект);
	ЗаписьXML.ЗаписатьАтрибут("ГруппаОбъектов",СтрокаПравил.ГруппаОбъектов);
	ЗаписьXML.ЗаписатьАтрибут("Объект",СтрокаПравил.ИмяКроссплатформенное);
	Если СсылочныйТип Тогда
		ЗаписьXML.ЗаписатьАтрибут("Представление",Строка(ВыборкаОбъектов.Ссылка));
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("Тип","Объект");
	Если СсылочныйТип Тогда
		ЗаписьXML.ЗаписатьАтрибут("НомерОбъектаПП",НомерОбъекта);
	КонецЕсли;
	Для Каждого ЭлементСтруктуры Из СтруктураСсылочныхПолей Цикл
		Если ЭлементСтруктуры.Ключ<>"ТабличныеЧасти" Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Реквизит");
			ЗаписьXML.ЗаписатьАтрибут("Тип","Реквизит");
			ЗаписьXML.ЗаписатьАтрибут("Вид",?(ОписаниеПолей.Получить(ЭлементСтруктуры.Ключ)=Неопределено,"",ОписаниеПолей.Получить(ЭлементСтруктуры.Ключ)));
			ЗаписьXML.ЗаписатьАтрибут("ИмяРеквизита",ЭлементСтруктуры.Ключ);
			ЗаписьXML.ЗаписатьАтрибут("ЗначениеРеквизита",ЭлементСтруктуры.Значение);
			ЗаписьXML.ЗаписатьКонецЭлемента();// Реквизит
		КонецЕсли;
	КонецЦикла;
	Если СтруктураСсылочныхПолей.Свойство("ТабличныеЧасти") Тогда
		//ЗаписьXML.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
		//ЗаписьXML.ЗаписатьАтрибут("Тип","ТабличныеЧасти");
		Для Каждого ТабличнаяЧасть Из СтруктураСсылочныхПолей.ТабличныеЧасти Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("ТабличнаяЧасть."+ТабличнаяЧасть.Ключ);// ТЧ - начало
			ЗаписьXML.ЗаписатьАтрибут("Тип","ТабличнаяЧасть");
			ЗаписьXML.ЗаписатьАтрибут("ИмяТабличнойЧасти",ТабличнаяЧасть.Ключ);
			ТаблицаЗначений = ТабличнаяЧасть.Значение;
			НомерСтроки = 1;
			Для Каждого ЭлементКоллекции Из ТаблицаЗначений Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента("СтрокаТабличнойЧасти."+ТабличнаяЧасть.Ключ);// строка ТЧ - начало
				ЗаписьXML.ЗаписатьАтрибут("Тип","СтрокаТабличнойЧасти");
				ЗаписьXML.ЗаписатьАтрибут("НомерСтроки",ПолучитьЗначениеДляЗаписиВXML(НомерСтроки,СоответствиеВыгруженныхОбъектов,ЗаписьXML,ОбъектыКВыгрузке));
				Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
					ЗаписьXML.ЗаписатьНачалоЭлемента("Реквизит");// Реквизит строки ТЧ - начало
					ЗаписьXML.ЗаписатьАтрибут("Тип","РеквизитСтроки");
					ЗаписьXML.ЗаписатьАтрибут("ИмяРеквизита",Колонка.Имя);
					ЗаписьXML.ЗаписатьАтрибут("ЗначениеРеквизита",ЭлементКоллекции[Колонка.Имя]);
					ЗаписьXML.ЗаписатьКонецЭлемента(); //Реквизит строки ТЧ - конец
				КонецЦикла;
				ЗаписьXML.ЗаписатьКонецЭлемента(); //строка ТЧ - конец
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента(); //ТЧ - конец
		КонецЦикла;
		//ЗаписьXML.ЗаписатьКонецЭлемента(); //ТабличныеЧасти
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();// объект
	
	Если СсылочныйТип Тогда
		ОбъектыКВыгрузке.Удалить(НомерОбъекта);
		Возврат НомерОбъекта;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьЗначениеДляЗаписиВXML(Значение,СоответствиеВыгруженныхОбъектов,ЗаписьXML,ОбъектыКВыгрузке)
	//Если ТипЗнч(Значение)=Тип("Строка") Тогда
	//	Возврат """"+Значение+"""";
	//ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
	//	Возврат Формат(Значение,"ЧРД=.; ЧН=0; ЧГ=");
	//ИначеЕсли ТипЗнч(Значение)=Тип("Неопределено") Тогда
	//	Возврат """Неопределено""";
	//ИначеЕсли ТипЗнч(Значение)=Тип("Булево") Тогда
	//	Возврат Формат(Значение,"БЛ=Ложь; БИ=Истина");
	//ИначеЕсли ТипЗнч(Значение)=Тип("Дата") Тогда
	//	Возврат """ПолучитьДату("""+Формат(Значение,"ДФ=dd.MM.yyyy.ЧЧ.мм.сс")+""")""";
	//ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
	//	Возврат """ПолучитьЭлементПеречисления("""+Значение.Метаданные().Имя+""","""+фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Значение)+""")""";
	//ИначеЕсли ТипЗнч(Значение)=Тип("ХранилищеЗначения") Тогда
	//	Возврат "";
	Если ТипЗнч(Значение)=Тип("СправочникСсылка.фин_КлассификаторНаборовДополнительныхРазрезов") ИЛИ ТипЗнч(Значение)=Тип("СправочникСсылка.фин_НаборыРазрезовПоЗависимостям") Тогда
		Возврат "";
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат "";
	ИначеЕсли ТипЗнч(Значение)=Тип("Строка") ИЛИ ТипЗнч(Значение)=Тип("Число") ИЛИ ТипЗнч(Значение)=Тип("Неопределено") ИЛИ ТипЗнч(Значение)=Тип("Булево") ИЛИ ТипЗнч(Значение)=Тип("Дата") ИЛИ ТипЗнч(Значение)=Тип("ХранилищеЗначения") ИЛИ ТипЗнч(Значение)=Тип("ВидСчета") Тогда
		Возврат "XMLЗначение(Тип("""+?(ТипЗнч(Значение)=Тип("ХранилищеЗначения"),"ХранилищеЗначения",Строка(ТипЗнч(Значение)))+"""),"""+XMLСтрока(Значение)+""")";
	ИначеЕсли ТипЗнч(Значение)=Тип("УникальныйИдентификатор")  Тогда
		Возврат "XMLЗначение(Тип(""УникальныйИдентификатор""),"""+XMLСтрока(Значение)+""")";
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат "ПолучитьЭлементПеречисления("""+Значение.Метаданные().Имя+""","""+фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Значение)+""")";
	ИначеЕсли ТипЗнч(Значение)=Тип("ОписаниеТипов") Тогда
		Возврат "ОписаниеТиповИзСтроки("""+ОписаниеТиповВСтроку(Значение)+""")";
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат "";
	ИначеЕсли Найти(Строка(Значение),"<Объект не найден>")<>0 Тогда
		Возврат "";
	Иначе
		МетаданныеОбъекта 	= Значение.Метаданные();
		ИмяМетаданных 		= МетаданныеОбъекта.Имя;
		ИмяГруппыМетаданных = МетаданныеОбъекта.ПолноеИмя();
		ИмяГруппыМетаданных = Лев(ИмяГруппыМетаданных,Найти(ИмяГруппыМетаданных,".")-1);
		Если ИмяГруппыМетаданных = "Документ" Тогда
			ИмяГруппыМетаданных = "Документы";
		ИначеЕсли ИмяГруппыМетаданных = "Справочник" Тогда
			ИмяГруппыМетаданных = "Справочники";
		ИначеЕсли ИмяГруппыМетаданных = "ПланВидовХарактеристик" Тогда
			ИмяГруппыМетаданных = "ПланыВидовХарактеристик";
		ИначеЕсли ИмяГруппыМетаданных = "ПланСчетов" Тогда
			ИмяГруппыМетаданных = "ПланыСчетов";
		ИначеЕсли ИмяГруппыМетаданных = "ПланВидовРасчета" Тогда
			ИмяГруппыМетаданных = "ПланыВидовРасчета";
		КонецЕсли;
		СтрокиВыгружаемыхДанных = ВыгружаемыеОбъекты.НайтиСтроки(Новый Структура("Объект,ГруппаОбъектов",ИмяМетаданных,ИмяГруппыМетаданных));
		Если СтрокиВыгружаемыхДанных.Количество()=0 И (ИмяГруппыМетаданных = "Документы" ИЛИ НЕ Объект.ВыгружатьЭлементыБюджетнойАналитики) Тогда
			Возврат "";
		КонецЕсли;
		Если СтрокиВыгружаемыхДанных.Количество()>0 Тогда
			СтрокаПравил = СтрокиВыгружаемыхДанных[0];
		Иначе
			СтрокаПравил = Новый Структура("Объект,ГруппаОбъектов,ИмяКроссплатформенное,ТолькоПоиск,ВариантСинхронизацииСправочник",ИмяМетаданных,ИмяГруппыМетаданных,фин_ОбщегоНазначенияКлиентСервер.ИмяОбъектаКроссплатформенное(ИмяМетаданных),НЕ Объект.СоздаватьЭлементыБюджетнойАналитикиВПриемнике,Объект.ВариантСинхронизации);
		КонецЕсли;
		НомерОбъекта = СоответствиеВыгруженныхОбъектов.Получить(Значение);
		Если НомерОбъекта = Неопределено Тогда
			НомерОбъекта = ВыгрузитьЭлементКоллекции(Значение,СтрокаПравил,СоответствиеВыгруженныхОбъектов,ЗаписьXML,ИмяГруппыМетаданных,Истина,ОбъектыКВыгрузке);
		Иначе
			Если ОбъектыКВыгрузке.Получить(НомерОбъекта)<>Неопределено Тогда
				СтруктураСсылочныхПолей = Новый Структура;
				Для Каждого ЭлементСтруктуры Из ОбъектыКВыгрузке.Получить(НомерОбъекта) Цикл
					Если ЭлементСтруктуры.Ключ<>"ТабличныеЧасти" Тогда
						ЗначениеСвойства = ПолучитьЗначениеДляЗаписиВXML(ЭлементСтруктуры.Значение,СоответствиеВыгруженныхОбъектов,ЗаписьXML,ОбъектыКВыгрузке);
						СтруктураСсылочныхПолей.Вставить(ЭлементСтруктуры.Ключ,ЗначениеСвойства);
					КонецЕсли;
				КонецЦикла;
			//	ЗаписьXML = Новый ЗаписьXML;
				ЗаписьXML.ЗаписатьНачалоЭлемента(СтрокаПравил.ГруппаОбъектов+"_"+СтрокаПравил.Объект);
				ЗаписьXML.ЗаписатьАтрибут("ГруппаОбъектов",СтрокаПравил.ГруппаОбъектов);
				ЗаписьXML.ЗаписатьАтрибут("Объект",СтрокаПравил.ИмяКроссплатформенное);
				ЗаписьXML.ЗаписатьАтрибут("Тип","Объект");
				ЗаписьXML.ЗаписатьАтрибут("ОбменДанными",XMLСтрока(Истина));
				ЗаписьXML.ЗаписатьАтрибут("НомерОбъектаПП",НомерОбъекта);
				Для Каждого ЭлементСтруктуры Из СтруктураСсылочныхПолей Цикл
					Если ЭлементСтруктуры.Ключ<>"ТабличныеЧасти" Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("Реквизит");
						ЗаписьXML.ЗаписатьАтрибут("Тип","Реквизит");
						ЗаписьXML.ЗаписатьАтрибут("ИмяРеквизита",ЭлементСтруктуры.Ключ);
						ЗаписьXML.ЗаписатьАтрибут("ЗначениеРеквизита",ЭлементСтруктуры.Значение);
						ЗаписьXML.ЗаписатьКонецЭлемента();// Реквизит
					КонецЕсли;
				КонецЦикла;
				ЗаписьXML.ЗаписатьКонецЭлемента();// Объект
				ОбъектыКВыгрузке.Удалить(НомерОбъекта);
			КонецЕсли;
		КонецЕсли;
		Возврат "ПолучитьВыгруженныйОбъект("""+НомерОбъекта+""",СоответствиеВыгруженныхОбъектов)";
	КонецЕсли;	
КонецФункции

&НаСервере
Функция ОписаниеТиповВСтроку(ОписаниеТипов)
	Строка = "";
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Тогда
			ТекущаяСтрока = Строка(Тип);
		Иначе
			ТекущаяСтрока = СтрЗаменить(ОбъектМетаданных.ПолноеИмя(),".","Ссылка.");
		КонецЕсли;
		Строка = Строка + ?(Строка="","","|")+ТекущаяСтрока;
	КонецЦикла;
	Возврат Строка;
КонецФункции

&НаСервере
Функция ПолучитьВыборку(СтрокаПравил)
	ВидОбъектов = СтрокаПравил.ГруппаОбъектов;
	Если ВидОбъектов = "Алгоритм" Тогда
		Если СтрокаПравил.Объект = "ФактическиеДанные" Тогда
	
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ПустойСценарий", фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий());
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	фин_ФактическиеОборотыБюджетовОбороты.Период,
				|	фин_ФактическиеОборотыБюджетовОбороты.Организация
				|ПОМЕСТИТЬ ВТ
				|ИЗ
				|	РегистрНакопления.фин_ФактическиеОборотыБюджетов.Обороты(, , Неделя, ) КАК фин_ФактическиеОборотыБюджетовОбороты
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	фин_ОборотыБюджетовОбороты.Период,
				|	фин_ОборотыБюджетовОбороты.Организация
				|ИЗ
				|	РегистрНакопления.фин_ОборотыБюджетов.Обороты(, , Неделя, ) КАК фин_ОборотыБюджетовОбороты
				|ГДЕ
				|	фин_ОборотыБюджетовОбороты.Сценарий = &ПустойСценарий
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ.Период КАК Период,
				|	ВТ.Организация
				|ИЗ
				|	ВТ КАК ВТ
				|
				|УПОРЯДОЧИТЬ ПО
				|	Период";
		Иначе
			ВызватьИсключение "Неизвестный алгоритм "+СтрокаПравил.Объект;
		КонецЕсли;
	ИначеЕсли ВидОбъектов = "Справочники" Тогда
		ПоВладельцу = Метаданные.Справочники[СтрокаПравил.Объект].Владельцы.Количество()>0 И Метаданные.Справочники[СтрокаПравил.Объект].СерииКодов=Метаданные.СвойстваОбъектов.СерииКодовСправочника.ВПределахПодчиненияВладельцу;
		Запрос = Новый Запрос("ВЫБРАТЬ ОбъектДанныхИБ.* ИЗ Справочник."+СтрокаПравил.Объект+" КАК ОбъектДанныхИБ ГДЕ НЕ ОбъектДанныхИБ.ПометкаУдаления УПОРЯДОЧИТЬ ПО "+?(ПоВладельцу,"ОбъектДанныхИБ.Владелец,","")+?(СтрокаПравил.ВариантСинхронизацииСправочник = Перечисления.фин_ВариантыСинхронизацииСправочников.ПоНаименованию,"ОбъектДанныхИБ.Наименование","ОбъектДанныхИБ.Код"));
		Если СтрокаПравил.ВариантСинхронизацииСправочник = Перечисления.фин_ВариантыСинхронизацииСправочников.ПоНаименованию Тогда
			ЗапросПроверки = Новый Запрос("ВЫБРАТЬ
			                              |	СправочникБазы.Ссылка,
			                              |	СправочникБазы.Наименование
			                              |ПОМЕСТИТЬ ВТ_Справочник
			                              |ИЗ
			                              |	Справочник."+СтрокаПравил.Объект+" КАК СправочникБазы
			                              |;
			                              |
			                              |////////////////////////////////////////////////////////////////////////////////
			                              |ВЫБРАТЬ РАЗЛИЧНЫЕ
			                              |	ВТ_Справочник.Наименование
			                              |ИЗ
			                              |	ВТ_Справочник КАК ВТ_Справочник
			                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Справочник КАК ВТ_Справочник1
			                              |		ПО ВТ_Справочник.Наименование = ВТ_Справочник1.Наименование
			                              |			И ВТ_Справочник.Ссылка <> ВТ_Справочник1.Ссылка");
			Результат = ЗапросПроверки.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ВНИМАНИЕ !!! Обнаружены дублирующиеся по наименованию элементы в справочнике "+СтрокаПравил.Наименование+"
				|	Это приведет к ошибкам при загрузке в базу-приемник!");
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("	- "+Выборка.Наименование);
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли СтрокаПравил.ВариантСинхронизацииСправочник = Перечисления.фин_ВариантыСинхронизацииСправочников.ПоКоду Тогда
			ПоРодителю = Метаданные.Справочники[СтрокаПравил.Объект].Иерархический И Метаданные.Справочники[СтрокаПравил.Объект].СерииКодов=Метаданные.СвойстваОбъектов.СерииКодовСправочника.ВПределахПодчинения;
			ЗапросПроверки = Новый Запрос("ВЫБРАТЬ
			                              |	СправочникБазы.Ссылка,"+?(ПоРодителю,"СправочникБазы.Родитель,","")+?(ПоВладельцу,"СправочникБазы.Владелец,","")+"
			                              |	СправочникБазы.Код
			                              |ПОМЕСТИТЬ ВТ_Справочник
			                              |ИЗ
			                              |	Справочник."+СтрокаПравил.Объект+" КАК СправочникБазы
			                              |;
			                              |
			                              |////////////////////////////////////////////////////////////////////////////////
			                              |ВЫБРАТЬ РАЗЛИЧНЫЕ
			                              |	ВТ_Справочник.Код"+?(ПоРодителю,",ВТ_Справочник.Родитель","")+?(ПоВладельцу,",ВТ_Справочник.Владелец","")+"
			                              |ИЗ
			                              |	ВТ_Справочник КАК ВТ_Справочник
			                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Справочник КАК ВТ_Справочник1
			                              |		ПО ВТ_Справочник.Код = ВТ_Справочник1.Код "+?(ПоРодителю," И ВТ_Справочник.Родитель = ВТ_Справочник1.Родитель","")+?(ПоВладельцу," И ВТ_Справочник.Владелец = ВТ_Справочник1.Владелец","")+"
			                              |			И ВТ_Справочник.Ссылка <> ВТ_Справочник1.Ссылка");
			Результат = ЗапросПроверки.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ВНИМАНИЕ !!! Обнаружены дублирующиеся по коду элементы в справочнике "+СтрокаПравил.Наименование+"
				|	Это приведет к ошибкам при загрузке в базу-приемник!");
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("	- "+Выборка.Код+?(ПоРодителю,", родитель: "+Выборка.Родитель,"")+?(ПоРодителю,", владелец: "+Выборка.владелец,""));
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидОбъектов = "Документы" Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ОбъектДанныхИБ.* ИЗ Документ."+СтрокаПравил.Объект+" КАК ОбъектДанныхИБ ГДЕ ОбъектДанныхИБ.Проведен УПОРЯДОЧИТЬ ПО ОбъектДанныхИБ.Дата");
		Если СтрокаПравил.ВариантСинхронизацииДокумент = Перечисления.фин_ВариантыСинхронизацииДокументов.ПоНомеруВПределахПериода Тогда
			ПериодичностьНомера = ?(Метаданные.Документы[СтрокаПравил.Объект].ПериодичностьНомера=Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический,"ДЕНЬ",Строка(Метаданные.Документы[СтрокаПравил.Объект].ПериодичностьНомера));
			ЗапросПроверки = Новый Запрос("ВЫБРАТЬ
			                              |	СправочникБазы.Ссылка,
			                              |	НАЧАЛОПЕРИОДА(СправочникБазы.Дата,"+ПериодичностьНомера+") КАК Дата,
			                              |	СправочникБазы.Номер
			                              |ПОМЕСТИТЬ ВТ_Справочник
			                              |ИЗ
			                              |	Документ."+СтрокаПравил.Объект+" КАК СправочникБазы
			                              |;
			                              |
			                              |////////////////////////////////////////////////////////////////////////////////
			                              |ВЫБРАТЬ РАЗЛИЧНЫЕ
			                              |	ВТ_Справочник.Номер
			                              |ИЗ
			                              |	ВТ_Справочник КАК ВТ_Справочник
			                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Справочник КАК ВТ_Справочник1
			                              |		ПО ВТ_Справочник.Номер = ВТ_Справочник1.Номер
			                              |		И ВТ_Справочник.Дата = ВТ_Справочник1.Дата
			                              |			И ВТ_Справочник.Ссылка <> ВТ_Справочник1.Ссылка");
			Результат = ЗапросПроверки.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ВНИМАНИЕ !!! Обнаружены дублирующиеся по номерам документы "+СтрокаПравил.Наименование+"
				|	Это приведет к ошибкам при загрузке в базу-приемник!");
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("	- "+Выборка.Номер);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидОбъектов = "ПланыВидовХарактеристик" Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ОбъектДанныхИБ.* ИЗ ПланВидовХарактеристик."+СтрокаПравил.Объект+" КАК ОбъектДанныхИБ ГДЕ НЕ ОбъектДанныхИБ.ПометкаУдаления УПОРЯДОЧИТЬ ПО ОбъектДанныхИБ.Код");
		Если СтрокаПравил.ВариантСинхронизацииСправочник = Перечисления.фин_ВариантыСинхронизацииСправочников.ПоНаименованию Тогда
			ЗапросПроверки = Новый Запрос("ВЫБРАТЬ
			                              |	СправочникБазы.Ссылка,
			                              |	СправочникБазы.Наименование
			                              |ПОМЕСТИТЬ ВТ_Справочник
			                              |ИЗ
			                              |	ПланВидовХарактеристик."+СтрокаПравил.Объект+" КАК СправочникБазы
			                              |;
			                              |
			                              |////////////////////////////////////////////////////////////////////////////////
			                              |ВЫБРАТЬ РАЗЛИЧНЫЕ
			                              |	ВТ_Справочник.Наименование
			                              |ИЗ
			                              |	ВТ_Справочник КАК ВТ_Справочник
			                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Справочник КАК ВТ_Справочник1
			                              |		ПО ВТ_Справочник.Наименование = ВТ_Справочник1.Наименование
			                              |			И ВТ_Справочник.Ссылка <> ВТ_Справочник1.Ссылка");
			Результат = ЗапросПроверки.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ВНИМАНИЕ !!! Обнаружены дублирующиеся по наименованию элементы в плане видов характеристик "+СтрокаПравил.Наименование+"
				|	Это приведет к ошибкам при загрузке в базу-приемник!");
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("	- "+Выборка.Наименование);
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли СтрокаПравил.ВариантСинхронизацииСправочник = Перечисления.фин_ВариантыСинхронизацииСправочников.ПоКоду Тогда
			ЗапросПроверки = Новый Запрос("ВЫБРАТЬ
			                              |	СправочникБазы.Ссылка,
			                              |	СправочникБазы.Код
			                              |ПОМЕСТИТЬ ВТ_Справочник
			                              |ИЗ
			                              |	ПланВидовХарактеристик."+СтрокаПравил.Объект+" КАК СправочникБазы
			                              |;
			                              |
			                              |////////////////////////////////////////////////////////////////////////////////
			                              |ВЫБРАТЬ РАЗЛИЧНЫЕ
			                              |	ВТ_Справочник.Код
			                              |ИЗ
			                              |	ВТ_Справочник КАК ВТ_Справочник
			                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Справочник КАК ВТ_Справочник1
			                              |		ПО ВТ_Справочник.Код = ВТ_Справочник1.Код
			                              |			И ВТ_Справочник.Ссылка <> ВТ_Справочник1.Ссылка");
			Результат = ЗапросПроверки.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ВНИМАНИЕ !!! Обнаружены дублирующиеся по коду элементы в плане видов характеристик "+СтрокаПравил.Наименование+"
				|	Это приведет к ошибкам при загрузке в базу-приемник!");
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("	- "+Выборка.Код);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидОбъектов = "ПланыСчетов" Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ОбъектДанныхИБ.* ИЗ ПланСчетов."+СтрокаПравил.Объект+" КАК ОбъектДанныхИБ ГДЕ НЕ ОбъектДанныхИБ.ПометкаУдаления УПОРЯДОЧИТЬ ПО ОбъектДанныхИБ.Код");
		Если СтрокаПравил.ВариантСинхронизацииСправочник = Перечисления.фин_ВариантыСинхронизацииСправочников.ПоНаименованию Тогда
			ЗапросПроверки = Новый Запрос("ВЫБРАТЬ
			                              |	СправочникБазы.Ссылка,
			                              |	СправочникБазы.Наименование
			                              |ПОМЕСТИТЬ ВТ_Справочник
			                              |ИЗ
			                              |	ПланСчетов."+СтрокаПравил.Объект+" КАК СправочникБазы
			                              |;
			                              |
			                              |////////////////////////////////////////////////////////////////////////////////
			                              |ВЫБРАТЬ РАЗЛИЧНЫЕ
			                              |	ВТ_Справочник.Наименование
			                              |ИЗ
			                              |	ВТ_Справочник КАК ВТ_Справочник
			                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Справочник КАК ВТ_Справочник1
			                              |		ПО ВТ_Справочник.Наименование = ВТ_Справочник1.Наименование
			                              |			И ВТ_Справочник.Ссылка <> ВТ_Справочник1.Ссылка");
			Результат = ЗапросПроверки.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ВНИМАНИЕ !!! Обнаружены дублирующиеся по наименованию элементы в плане счетов "+СтрокаПравил.Наименование+"
				|	Это приведет к ошибкам при загрузке в базу-приемник!");
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("	- "+Выборка.Наименование);
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли СтрокаПравил.ВариантСинхронизацииСправочник = Перечисления.фин_ВариантыСинхронизацииСправочников.ПоКоду Тогда
			ЗапросПроверки = Новый Запрос("ВЫБРАТЬ
			                              |	СправочникБазы.Ссылка,
			                              |	СправочникБазы.Код
			                              |ПОМЕСТИТЬ ВТ_Справочник
			                              |ИЗ
			                              |	ПланСчетов."+СтрокаПравил.Объект+" КАК СправочникБазы
			                              |;
			                              |
			                              |////////////////////////////////////////////////////////////////////////////////
			                              |ВЫБРАТЬ РАЗЛИЧНЫЕ
			                              |	ВТ_Справочник.Код
			                              |ИЗ
			                              |	ВТ_Справочник КАК ВТ_Справочник
			                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Справочник КАК ВТ_Справочник1
			                              |		ПО ВТ_Справочник.Код = ВТ_Справочник1.Код
			                              |			И ВТ_Справочник.Ссылка <> ВТ_Справочник1.Ссылка");
			Результат = ЗапросПроверки.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ВНИМАНИЕ !!! Обнаружены дублирующиеся по коду элементы в плане счетов "+СтрокаПравил.Наименование+"
				|	Это приведет к ошибкам при загрузке в базу-приемник!");
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("	- "+Выборка.Код);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидОбъектов = "РегистрыСведений" Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ОбъектДанныхИБ.* ИЗ РегистрСведений."+СтрокаПравил.Объект+" КАК ОбъектДанныхИБ");
	Иначе
		ВызватьИсключение "Неизвестный вид объектов "+ВидОбъектов;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Возврат ВыборкаДетальныеЗаписи;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьДанные(Команда)
	Если ПроверитьЗаполнение() Тогда
		Попытка
			ВыгрузитьДанныеНаСервере();
		Исключение
			ПоказатьПредупреждение(,"При выгрузке возникла ошибка: 
			|	"+ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		Если ФайловаяИБ Тогда
			ПоказатьПредупреждение(,"Готово");
		Иначе
			ОбработкаПолученияФайла = Новый ОписаниеОповещения("ПроцедураОбработкиПолученияФайла",ЭтотОбъект);
			ПолучаемыеФайлы = Новый Массив;
			ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(Объект.ПутьКФайлу,АдресФайлаНаСервере));
			НачатьПолучениеФайлов(ОбработкаПолученияФайла,ПолучаемыеФайлы,Объект.ПутьКФайлу,Ложь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроцедураОбработкиПолученияФайла(ПолучаемыеФайлы,ДополнительныеПараметры) Экспорт
	Если ПолучаемыеФайлы<>Неопределено Тогда
		ПоказатьПредупреждение(,"Готово");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	НачатьЗапускПриложения(,Объект.ПутьКФайлу);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеФлажки(Команда)
	Для Каждого СтрокаДанных Из ПравилаВыгрузки.ПолучитьЭлементы() Цикл
		СтрокаДанных.Пометка = Ложь;
		УстановитьПометкиВПодчиненных(СтрокаДанных);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеФлажки(Команда)
	Для Каждого СтрокаДанных Из ПравилаВыгрузки.ПолучитьЭлементы() Цикл
		СтрокаДанных.Пометка = Истина;
		УстановитьПометкиВПодчиненных(СтрокаДанных);
	КонецЦикла;
КонецПроцедуры
