
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Период.ДатаНачала 		= НачалоМесяца(ТекущаяДата());
	Период.ДатаОкончания 	= КонецМесяца(ТекущаяДата());
	Если Параметры.Свойство("Договор") Тогда
		Объект.Договор = Параметры.Договор;
	КонецЕсли;
	Если Параметры.Свойство("Контрагент") Тогда
		Объект.Контрагент = Параметры.Контрагент;
	КонецЕсли;
	Если Параметры.Свойство("Организация") Тогда
		Объект.Организация = Параметры.Организация;
	Иначе
		Объект.Организация=фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");;
	КонецЕсли;
	Параметры.Свойство("ОтображатьДанныеПоПодчиненнымДоговорамКонтрагента",ОтображатьДанныеПоПодчиненнымДоговорамКонтрагента);
	НадписьПериод 			= "Период";
	НадписьОтбор			= "Отбор";
	НадписьСписокПлатежей	= "Список событий на оплату";
	ПодготовитьФормуНаСервере();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_РаботаСоСтруктурнымиПодразделениями.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация,Владелец",Объект.Организация,Объект.Контрагент));
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора",ПараметрыФормы,Элемент);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
			
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	Объект.Организация = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяОрганизация");

	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
	
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьНаСервере()
	РассчитаннаяТаблица = ПолучитьДанныеПоРасчетуСуммСобытий(Период.ДатаНачала,Период.ДатаОкончания,Объект.Организация,Объект.СтруктурноеПодразделение,ПоддержкаРаботыСоСтруктурнымиПодразделениями,Объект.ВключаяПодчиненные,Объект.Контрагент,Объект.Договор,ОтображатьДанныеПоПодчиненнымДоговорамКонтрагента);
	ТаблицаСобытий.Очистить();
	Для Каждого СтрокаТаблицы Из РассчитаннаяТаблица Цикл
		НоваяСтрока = ТаблицаСобытий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоРасчетуСуммСобытий(ДатаНачала,ДатаОкончания,Организация,СтруктурноеПодразделение,ОтображатьСтруктурныеПодразделения,ВключаяПодчиненные,Контрагент=Неопределено,Договор=Неопределено,ОтображатьДанныеПоПодчиненнымДоговорамКонтрагента=Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	дог_ЗарегистрированныеДоговорыКонтрагентовСрезПоследних.Организация,
		|	дог_ЗарегистрированныеДоговорыКонтрагентовСрезПоследних.СтруктурноеПодразделение,
		|	дог_ЗарегистрированныеДоговорыКонтрагентовСрезПоследних.Контрагент,
		|	дог_ЗарегистрированныеДоговорыКонтрагентовСрезПоследних.Договор КАК Договор
		|ПОМЕСТИТЬ ВТ_Договоры
		|ИЗ
		|	РегистрСведений.дог_ЗарегистрированныеДоговорыКонтрагентов.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И ВЫБОР
		|					КОГДА &УчетПоСтруктурнымПодразделениям
		|						ТОГДА ВЫБОР
		|								КОГДА &ВключаяПодчиненныеСП
		|									ТОГДА СтруктурноеПодразделение В ИЕРАРХИИ (&СтруктурноеПодразделение)
		|								ИНАЧЕ СтруктурноеПодразделение = &СтруктурноеПодразделение
		|							КОНЕЦ
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Контрагент = &Контрагент
		|				КОНЕЦ) КАК дог_ЗарегистрированныеДоговорыКонтрагентовСрезПоследних
		|ГДЕ
		|	дог_ЗарегистрированныеДоговорыКонтрагентовСрезПоследних.ЗамещающийДоговор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|	И ВЫБОР
		|			КОГДА &Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &ВключаяСвязанныеДоговоры
		|						ТОГДА дог_ЗарегистрированныеДоговорыКонтрагентовСрезПоследних.Договор = &Договор
		|								ИЛИ дог_ЗарегистрированныеДоговорыКонтрагентовСрезПоследних.ПервоначальныйДоговор = &Договор
		|					ИНАЧЕ дог_ЗарегистрированныеДоговорыКонтрагентовСрезПоследних.Договор = &Договор
		|				КОНЕЦ
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.Организация,
		|	дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.СтруктурноеПодразделение,
		|	дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.Договор,
		|	дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.ПравилоРасчетаПлатежей,
		|	дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.ДатаНачалаОплаты,
		|	дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.ДатаОкончанияОплаты,
		|	дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.ДеньОплаты,
		|	дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.ПериодичностьОплаты,
		|	дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.ПериодичностьСмещения,
		|	дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.СмещениеВПериодах,
		|	ВТ_Договоры.Контрагент,
		|	0 КАК СуммаСобытия
		|ИЗ
		|	РегистрСведений.дог_ДоговорыИДополнительныеСоглашения.СрезПоследних(
		|			&КонецПериода,
		|			Договор В
		|				(ВЫБРАТЬ
		|					ВТ_Договоры.Договор
		|				ИЗ
		|					ВТ_Договоры КАК ВТ_Договоры)) КАК дог_ДоговорыИДополнительныеСоглашенияСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договоры КАК ВТ_Договоры
		|		ПО дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.Договор = ВТ_Договоры.Договор
		|ГДЕ
		|	дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.АвтоматическоеСозданиеСобытийДляРасчетовПоГрафику
		|	И дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.дог_ВидыОплатыПоДоговору.ПоГрафику)
		|	И дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.ДатаНачалаОплаты <= &КонецПериода
		|	И дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.ДатаОкончанияОплаты >= &НачалоПериода
		|	И дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.ПравилоРасчетаПлатежей <> ЗНАЧЕНИЕ(Справочник.дог_ПроизвольныеПравилаРасчетаПлатежей.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Организация", 						Организация);
	Запрос.УстановитьПараметр("УчетПоСтруктурнымПодразделениям", 	ОтображатьСтруктурныеПодразделения);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", 			СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("ВключаяПодчиненныеСП", 				ВключаяПодчиненные);
	Запрос.УстановитьПараметр("НачалоПериода", 						ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", 						ДатаОкончания);
	Запрос.УстановитьПараметр("Контрагент", 						Контрагент);
	Запрос.УстановитьПараметр("Договор", 							Договор);
	Запрос.УстановитьПараметр("ВключаяСвязанныеДоговоры", 			ОтображатьДанныеПоПодчиненнымДоговорамКонтрагента);
	
	РезультатЗапроса 	= Запрос.Выполнить().Выгрузить();
	ТаблицаРасчет 		= РезультатЗапроса.СкопироватьКолонки();
	ТаблицаРасчет.Колонки.Добавить("НачалоПериодаРасчета");
	ТаблицаРасчет.Колонки.Добавить("ОкончаниеПериодаРасчета");
	ТаблицаРасчет.Колонки.Добавить("Событие");
	
	// тиражирование событий по интервалам расчета
	Для Каждого СтрокаТаблицы Из РезультатЗапроса Цикл
		ДатаНачалаОтсчета 	= СтрокаТаблицы.ДатаНачалаОплаты;
		ПредыдущаяДата 		= ДатаНачалаОтсчета;
		СледующаяДата		= ПолучитьСледующуюДату(ПредыдущаяДата,СтрокаТаблицы);
		
		Пока СледующаяДата<=ДатаОкончания И СледующаяДата < СтрокаТаблицы.ДатаОкончанияОплаты Цикл
			Если СледующаяДата >= ДатаНачала Тогда
				НоваяСтрока = ТаблицаРасчет.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
				НоваяСтрока.НачалоПериодаРасчета 	= ПредыдущаяДата;
				НоваяСтрока.ОкончаниеПериодаРасчета	= СледующаяДата;
			КонецЕсли;
			
			ПредыдущаяДата 	= СледующаяДата + 24*60*60;
			СледующаяДата 	= ПолучитьСледующуюДату(СледующаяДата,СтрокаТаблицы);
		КонецЦикла;
	КонецЦикла;
	
	
	// расчет сумм событий
	Для Каждого СтрокаТаблицы Из ТаблицаРасчет Цикл
		СтрокаТаблицы.СуммаСобытия = дог_УправлениеДоговорами.РассчитатьСуммуСобытия(СтрокаТаблицы);
		СтрокаТаблицы.Событие = ПолучитьСобытие(СтрокаТаблицы);
	КонецЦикла;

	Возврат ТаблицаРасчет;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСобытие(СтруктураДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	дог_РегистрацияСобытийДоговоров.Ссылка
		|ИЗ
		|	Документ.дог_РегистрацияСобытийДоговоров КАК дог_РегистрацияСобытийДоговоров
		|ГДЕ
		|	дог_РегистрацияСобытийДоговоров.ПометкаУдаления = ЛОЖЬ
		|	И НАЧАЛОПЕРИОДА(дог_РегистрацияСобытийДоговоров.Дата, ДЕНЬ) = &Дата
		|	И дог_РегистрацияСобытийДоговоров.ДоговорКонтрагента = &ДоговорКонтрагента
		|	И дог_РегистрацияСобытийДоговоров.Событие = &Событие";
	
	Запрос.УстановитьПараметр("Дата", СтруктураДанных.ОкончаниеПериодаРасчета);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураДанных.Договор);
	Запрос.УстановитьПараметр("Событие", Справочники.дог_СобытияПоДоговору.АвтоматическийРасчетОплаты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Документы.дог_РегистрацияСобытийДоговоров.ПустаяСсылка();


КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьСледующуюДату(Дата, СтруктураДанных)
	Смещение 			= СтруктураДанных.ДеньОплаты-1;
	СмещениеП 			= СтруктураДанных.СмещениеВПериодах;
	Возврат дог_УправлениеДоговорами.ПолучитьДеньОплаты(Дата,СтруктураДанных.ПериодичностьОплаты,Смещение,СмещениеП, СтруктураДанных.ПериодичностьСмещения);			
КонецФункции	
	
&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура СформироватьСобытияНаСервере()
	Для Каждого СтрокаТЗ Из ТаблицаСобытий Цикл
		ДокументСобытие = ?(ЗначениеЗаполнено(СтрокаТЗ.Событие),СтрокаТЗ.Событие.ПолучитьОбъект(),Документы.дог_РегистрацияСобытийДоговоров.СоздатьДокумент());
		ДокументСобытие = Документы.дог_РегистрацияСобытийДоговоров.СоздатьДокумент();
		ДокументСобытие.Дата = СтрокаТЗ.ОкончаниеПериодаРасчета;
		ЗаполнитьЗначенияСвойств(ДокументСобытие,СтрокаТЗ);
		ДокументСобытие.Организация = Объект.Организация;
		ДокументСобытие.ДоговорКонтрагента = СтрокаТЗ.Договор;
		ДокументСобытие.Событие = Справочники.дог_СобытияПоДоговору.АвтоматическийРасчетОплаты;
		Если ДокументСобытие.ЭтоНовый() Тогда
			ДокументСобытие.УстановитьНовыйНомер();
		КонецЕсли;
		Попытка
			ДокументСобытие.Записать(РежимЗаписиДокумента.Проведение);
			СтрокаТЗ.Событие = ДокументСобытие.Ссылка;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСобытия(Команда)
	СформироватьСобытияНаСервере();
КонецПроцедуры


