////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_РаботаСоСтруктурнымиПодразделениями.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Заявки>

&НаКлиенте
Процедура ЗаявкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчетОбщейСуммыТоварногоДоговора();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОбновитьСписокЗаявок(Команда)
	
	Если Объект.Контрагент.Пустая() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан контрагент!'"));
		Возврат;
	КонецЕсли;
	ВыполнитьОбновлениеСпискаЗаявок();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалюта(Команда)
		
	СпособЗаполненияЦен = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов");
	ПарметрыОткрытия = Новый Структура("БезКонтроляВалютыВзаиморасчетов", Истина);
	дог_УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма, СпособЗаполненияЦен, , ,ПарметрыОткрытия);
	
	Возврат;
	
	СтруктураРеквизитовДокумента = 	СтруктураРеквизитовДокумента();
	ФормаЦены = ПолучитьФорму("ОбщаяФорма.дог_ФормаЦеныИВалюта");
	Структура = СтруктураДанныхФормыЦеныВалюта();
	
	ЦеныИВалютаНаСервере(Структура,СпособЗаполненияЦен,СтруктураРеквизитовДокумента);
	Для Каждого ЭлементСтруктуры Из Структура Цикл
		Если Найти(ЭлементСтруктуры.Ключ,"_")=0 Тогда
			ФормаЦены[ЭлементСтруктуры.Ключ]=ЭлементСтруктуры.Значение;
		Иначе
			ИмяЭлемента = Лев(ЭлементСтруктуры.Ключ,Найти(ЭлементСтруктуры.Ключ,"_")-1);
			СвойствоЭлемента = Сред(ЭлементСтруктуры.Ключ,Найти(ЭлементСтруктуры.Ключ,"_")+1);
			Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Массив") Тогда
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					ФормаЦены.ЭлементыФормы[ИмяЭлемента][СвойствоЭлемента].Добавить(ЭлементМассива);
				КонецЦикла;
			Иначе
				ФормаЦены.ЭлементыФормы[ИмяЭлемента][СвойствоЭлемента]=ЭлементСтруктуры.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СтруктураЗначений = ФормаЦены.ОткрытьМодально();
	ЦеныИВалютаНаСервереПослеВыбора(СтруктураЗначений,СпособЗаполненияЦен,СтруктураРеквизитовДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПланЗакупок(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	Если Объект.Заказы.Количество()=0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не введено ни одного заказа!'"));
		Возврат;
	КонецЕсли;  
	
	ФормаПлан = ПолучитьФорму("Документ.дог_РегистрацияДоговоров.ФормаОбъекта");
	План = ФормаПлан.Объект;
	ФормаПлан.СтруктураЗаполнения = СоздатьПланЗакупок(План);
	КопироватьДанныеФормы(План, ФормаПлан.Объект);
	ФормаПлан.Открыть();
	Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
		
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		//
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	НеИзменять = Ложь;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	фин_ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ОбработкаОбъект);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");	
	
	Объект.ТипЦен = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойТипЦенЗаказовПоставщикам");
	Объект.ВалютаДокумента = ?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПланированиеЗакупокВВалютеРеглУчета"), фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"), фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета"));		
	Объект.Дата = ТекущаяДата();
	
	УчетПоПроектам = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ВестиУчетЗакупокПоПроектам");
	НадписьИсточникЗаявки = "Отбор данных";
	НадписьПараметрыПланирования = "Параметры планирования";
	НадписьСуммаДокумента = "Сумма документа";
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
			
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	
КонецПроцедуры


&НаСервере
Процедура РассчетОбщейСуммыТоварногоДоговора()
	
	СуммаДокумента = 0;
	СтрокиТовары = Объект.Заказы.НайтиСтроки(Новый Структура("Включать",Истина));
	Для Каждого СтрокаТовар Из СтрокиТовары Цикл
		СуммаДокумента = СуммаДокумента+ СтрокаТовар.Заказ.СуммаДокумента;
	КонецЦикла;
	Объект.СуммаДокумента = СуммаДокумента;
	
КонецПроцедуры

&НаСервере
Функция СоздатьПланЗакупок(План)
	СуммаТекущая = 0;	
	ДокументОбъект = ДанныеФормыВЗначение(План, Тип("ДокументОбъект.дог_РегистрацияДоговоров"));
	ДокументОбъект.Дата = ТекущаяДата();
	Для Каждого Реквизит Из Метаданные.Обработки.узп_ФормированиеРегистрацииДоговоровПоЗаказамПоставщикам.Реквизиты Цикл
		Если ДокументОбъект.Метаданные().Реквизиты.Найти(Реквизит.Имя)<>Неопределено Тогда
			ДокументОбъект[Реквизит.Имя] = Объект[Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	СписокЗаказов = Объект.Заказы.НайтиСтроки(Новый Структура("Включать",Истина));
	Заказы = Новый Массив;
	Для Каждого СтрокаЗаказ Из СписокЗаказов Цикл
		Заказы.Добавить(СтрокаЗаказ.Заказ);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказы", Заказы);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщикуТовары.Ссылка КАК Заказ,
		|	ЗаказПоставщикуТовары.Номенклатура,
		|	ЗаказПоставщикуТовары.СрокПоставки КАК ДатаПоставки,
		|	ЗаказПоставщикуТовары.ЕдиницаИзмерения,
		|	СУММА(ЗаказПоставщикуТовары.Количество) КАК Количество,
		|	ЗаказПоставщикуТовары.Цена,
		|	СУММА(ЗаказПоставщикуТовары.Сумма) КАК Сумма,
		|	ЗаказПоставщикуТовары.ОбъектРемонта,
		|	ЗаказПоставщикуТовары.Подразделение,"+?(УчетПоПроектам,"
		|	ЗаказПоставщикуТовары.Проект,","")+"
		|	ЗаказПоставщикуТовары.Характеристика,
		|	ЗаказПоставщикуТовары.Коэффициент,
		|	ЗаказПоставщикуТовары.СтавкаНДС,
		|	СУММА(ЗаказПоставщикуТовары.СуммаНДС) КАК СуммаНДС,
		|	ЗаказПоставщикуТовары.ЗаявкаМТС,
		|	ЗаказПоставщикуТовары.Ссылка.УчитыватьНДС,
		|	ЗаказПоставщикуТовары.Ссылка.СуммаВключаетНДС
		|ИЗ
		|	Документ.узп_ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка В(&Заказы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПоставщикуТовары.ЕдиницаИзмерения,
		|	ЗаказПоставщикуТовары.Номенклатура,
		|	ЗаказПоставщикуТовары.СтавкаНДС,
		|	ЗаказПоставщикуТовары.ЗаявкаМТС,
		|	ЗаказПоставщикуТовары.ОбъектРемонта,
		|	ЗаказПоставщикуТовары.СрокПоставки,
		|	ЗаказПоставщикуТовары.Подразделение,"+?(УчетПоПроектам,"
		|	ЗаказПоставщикуТовары.Проект,","")+"
		|	ЗаказПоставщикуТовары.Характеристика,
		|	ЗаказПоставщикуТовары.Ссылка,
		|	ЗаказПоставщикуТовары.Цена,
		|	ЗаказПоставщикуТовары.Коэффициент";

	Результат = Запрос.Выполнить();

	СтрокиЗаполнения = Новый Структура;
	
	СтрокиТовар = Результат.Выгрузить();
	Для Каждого СтрокаТовар Из СтрокиТовар Цикл
		НоваяСтрока = ?(ТипЗнч(СтрокаТовар.Номенклатура)=Тип("СправочникСсылка.фин_ПлановаяНоменклатура") И СтрокаТовар.Номенклатура.ТипПозицииВПланеЗакупок<>Перечисления.узп_ТипыПозицийПлановойНоменклатурыВПланеЗакупок.Товар,ДокументОбъект.ОС.Добавить(),ДокументОбъект.Товары.Добавить());
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТовар);
		Если НЕ (ТипЗнч(СтрокаТовар.Номенклатура)=Тип("СправочникСсылка.фин_ПлановаяНоменклатура") И СтрокаТовар.Номенклатура.ТипПозицииВПланеЗакупок<>Перечисления.узп_ТипыПозицийПлановойНоменклатурыВПланеЗакупок.Товар) Тогда
			Номенклатура = дог_УправлениеДоговорами.ПолучитьРегламентированнуюНоменклатуру(СтрокаТовар.Номенклатура,СтрокаТовар.Характеристика,Объект.Дата);
			Если ТипЗнч(Номенклатура) = Тип("Массив") ИЛИ НЕ ЗначениеЗаполнено(Номенклатура) Тогда
				Если СтрокиЗаполнения.Свойство("Товары") Тогда
					СтрокиЗаполненияТовары = СтрокиЗаполнения.Товары;
				Иначе
					СтрокиЗаполненияТовары = Новый Соответствие;
				КонецЕсли;
				СтрокиЗаполненияТовары.Вставить(НоваяСтрока.НомерСтроки, Новый Структура("Номенклатура,ПлановаяНоменклатура,Характеристика", Номенклатура, СтрокаТовар.Номенклатура, СтрокаТовар.Характеристика));
				СтрокиЗаполнения.Вставить("Товары", СтрокиЗаполненияТовары);
			Иначе
				НоваяСтрока.Номенклатура = Номенклатура;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаТовар.УчитыватьНДС И (Объект.УчитыватьНДС=Ложь ИЛИ СтрокаТовар.СуммаВключаетНДС<>Объект.СуммаВключаетНДС) Тогда
			Если НЕ Объект.УчитыватьНДС Тогда
				НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
				Если СтрокаТовар.СуммаВключаетНДС Тогда
					НоваяСтрока.Сумма = НоваяСтрока.Сумма - НоваяСтрока.СуммаНДС;
				КонецЕсли;
				НоваяСтрока.СуммаНДС = 0;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТовар.СтавкаНДС) Тогда
				СтавкаНДС = дог_УправлениеДоговорамиСерверПовтИсп.ПолучитьСтавкуНДС(СтрокаТовар.СтавкаНДС);
				Если СтрокаТовар.СуммаВключаетНДС Тогда
					НоваяСтрока.Сумма = НоваяСтрока.Сумма - НоваяСтрока.СуммаНДС;
					НоваяСтрока.Цена = (НоваяСтрока.Цена * 100)/(100+СтавкаНДС);
				Иначе
					НоваяСтрока.Сумма = НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС;
					НоваяСтрока.Цена = НоваяСтрока.Цена +(НоваяСтрока.Цена * СтавкаНДС/100);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СуммаТекущая = ДокументОбъект.ОС.итог("Сумма") + ДокументОбъект.Товары.Итог("Сумма");
 	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщикуУслуги.Ссылка КАК Заказ,
		|	ЗаказПоставщикуУслуги.Номенклатура,
		|	ЗаказПоставщикуУслуги.СрокПоставки КАК ДатаПоставки,
		|	СУММА(ЗаказПоставщикуУслуги.Количество) КАК Количество,
		|	ЗаказПоставщикуУслуги.Цена,
		|	СУММА(ЗаказПоставщикуУслуги.Сумма) КАК Сумма,
		|	ЗаказПоставщикуУслуги.ОбъектРемонта,
		|	ЗаказПоставщикуУслуги.Подразделение,"+?(УчетПоПроектам,"
		|	ЗаказПоставщикуУслуги.Проект,","")+"
		|	ЗаказПоставщикуУслуги.Характеристика,
		|	ЗаказПоставщикуУслуги.СтавкаНДС,
		|	СУММА(ЗаказПоставщикуУслуги.СуммаНДС) КАК СуммаНДС,
		|	ЗаказПоставщикуУслуги.ЗаявкаМТС,
		|	ЗаказПоставщикуУслуги.Ссылка.УчитыватьНДС,
		|	ЗаказПоставщикуУслуги.Ссылка.СуммаВключаетНДС
		|ИЗ
		|	Документ.узп_ЗаказПоставщику.Услуги КАК ЗаказПоставщикуУслуги
		|ГДЕ
		|	ЗаказПоставщикуУслуги.Ссылка В(&Заказы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПоставщикуУслуги.Номенклатура,
		|	ЗаказПоставщикуУслуги.СтавкаНДС,
		|	ЗаказПоставщикуУслуги.ЗаявкаМТС,
		|	ЗаказПоставщикуУслуги.ОбъектРемонта,
		|	ЗаказПоставщикуУслуги.СрокПоставки,
		|	ЗаказПоставщикуУслуги.Подразделение,"+?(УчетПоПроектам,"
		|	ЗаказПоставщикуУслуги.Проект,","")+"
		|	ЗаказПоставщикуУслуги.Характеристика,
		|	ЗаказПоставщикуУслуги.Ссылка,
		|	ЗаказПоставщикуУслуги.Цена";

	Результат = Запрос.Выполнить();

	СтрокиТовар = Результат.Выгрузить();
	Для Каждого СтрокаТовар Из СтрокиТовар Цикл
		НоваяСтрока = ДокументОбъект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТовар);
		Номенклатура = дог_УправлениеДоговорами.ПолучитьРегламентированнуюНоменклатуру(СтрокаТовар.Номенклатура,СтрокаТовар.Характеристика,Объект.Дата);
		Если ТипЗнч(Номенклатура)=Тип("Массив") ИЛИ НЕ ЗначениеЗаполнено(Номенклатура) Тогда
			Если СтрокиЗаполнения.Свойство("Услуги") Тогда
				СтрокиЗаполненияУслуги = СтрокиЗаполнения.Услуги;
			Иначе
				СтрокиЗаполненияУслуги = Новый Соответствие;
			КонецЕсли;
			СтрокиЗаполненияУслуги.Вставить(НоваяСтрока.НомерСтроки, Новый Структура("Номенклатура, ПлановаяНоменклатура, Характеристика", Номенклатура, СтрокаТовар.Номенклатура, СтрокаТовар.Характеристика));
			СтрокиЗаполнения.Вставить("Услуги", СтрокиЗаполненияУслуги);			
		Иначе
			НоваяСтрока.Номенклатура = Номенклатура;
		КонецЕсли;
		Если СтрокаТовар.УчитыватьНДС И (Объект.УчитыватьНДС=Ложь ИЛИ СтрокаТовар.СуммаВключаетНДС<>Объект.СуммаВключаетНДС) Тогда
			Если НЕ Объект.УчитыватьНДС Тогда
				НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
				Если СтрокаТовар.СуммаВключаетНДС Тогда
					НоваяСтрока.Сумма = НоваяСтрока.Сумма - НоваяСтрока.СуммаНДС;
				КонецЕсли;
				НоваяСтрока.СуммаНДС = 0;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТовар.СтавкаНДС) Тогда
				СтавкаНДС = дог_УправлениеДоговорамиСерверПовтИсп.ПолучитьСтавкуНДС(СтрокаТовар.СтавкаНДС);
				Если СтрокаТовар.СуммаВключаетНДС Тогда
					НоваяСтрока.Сумма = НоваяСтрока.Сумма - НоваяСтрока.СуммаНДС;
					НоваяСтрока.Цена = (НоваяСтрока.Цена * 100)/(100+СтавкаНДС);
				Иначе
					НоваяСтрока.Сумма = НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС;
					НоваяСтрока.Цена = НоваяСтрока.Цена +(НоваяСтрока.Цена * СтавкаНДС/100);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СуммаТекущая = СуммаТекущая + ДокументОбъект.Услуги.Итог("Сумма");
	ДокументОбъект.СуммаПлатежа = СуммаТекущая;
	ДокументОбъект.ОбщаяСуммаДоговора = СуммаТекущая;
	Если ДокументОбъект.ВидОплаты=Перечисления.дог_ВидыОплатыПоДоговору.Разовая Тогда
		ДокументОбъект.СуммаПлатежа = ДокументОбъект.ОбщаяСуммаДоговора;
	КонецЕсли;
	ЗначениеВДанныеФормы(ДокументОбъект, План);
	
	Если СтрокиЗаполнения.Количество() > 0 Тогда 
		СтруктураЗаполненияПлана = Новый Структура("Дата, СтрокиЗаполнения", НачалоДня(ТекущаяДата()), СтрокиЗаполнения); 	
		Возврат ЗначениеВСтрокуВнутр(СтруктураЗаполненияПлана);
	Иначе 
		Возврат "";
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура ВыполнитьОбновлениеСпискаЗаявок()

	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗаказПоставщику.Ссылка КАК Заказ,
	               |	ИСТИНА КАК Включать
	               |ИЗ
	               |	Документ.узп_ЗаказПоставщику КАК ЗаказПоставщику
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.узп_ЗаказыПоставщикам КАК ЗаказыПоставщикам
	               |		ПО ЗаказПоставщику.Ссылка = ЗаказыПоставщикам.Заказ
	               |			И (ЗаказыПоставщикам.ПриходРасход <> ЗНАЧЕНИЕ(Перечисление.узп_ВидыОборотовПоЗаказам.Заказано))
	               |ГДЕ
	               |	ЗаказыПоставщикам.НомерСтроки ЕСТЬ NULL 
	               |	И ЗаказПоставщику.Контрагент = &Контрагент
	               |	И ЗаказПоставщику.Организация = &Организация
	               |	И ЗаказПоставщику.СтруктурноеПодразделение = &СтруктурноеПодразделение
	               |	И ЗаказПоставщику.Проведен
	               |	И ЗаказПоставщику.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)";		

	Запрос.УстановитьПараметр("Организация", 				Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент", 				Объект.Контрагент);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", 	Объект.СтруктурноеПодразделение);

	Результат = Запрос.Выполнить();

    Объект.Заказы.Очистить();
	Объект.Заказы.Загрузить(Результат.Выгрузить());
    РассчетОбщейСуммыТоварногоДоговора();
	
КонецПроцедуры

&НаСервере
Функция СтруктураДанныхФормыЦеныВалюта()
    Возврат дог_УправлениеДоговорами.СтруктураДанныхФормыЦеныВалюта();
КонецФункции

&НаСервере
Функция  СтруктураРеквизитовДокумента()
	мЭтотОбъект = РеквизитФормыВЗначение("Объект");
	Возврат УправлениеЦенообразованием.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(мЭтотОбъект);
КонецФункции	
	
&НаСервере
Процедура ЦеныИВалютаНаСервере(ФормаЦеныВалюты,СпособЗаполненияЦен,СтруктураРеквизитовДокумента)
	мЭтотОбъект = РеквизитФормыВЗначение("Объект");

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	 дог_УправлениеДоговорами.ПолучитьФормуЦеныИВалютаТонкийКлиент(ФормаЦеныВалюты, мЭтотОбъект, СтруктураРеквизитовДокумента, фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"),
	                                            , "Товары");
КонецПроцедуры

&НаСервере
Процедура ЦеныИВалютаНаСервереПослеВыбора(СтруктураЗначений, СпособЗаполненияЦен, СтруктураРеквизитовДокумента)
	
	мЭтотОбъект = РеквизитФормыВЗначение("Объект");
	// Задать набор реквизитов для редактирования.
	Если СтруктураЗначений <> Неопределено Тогда
		УправлениеВзаиморасчетами.ИзменитьЦеныВалюту(мЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , , фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"), Ложь, СтруктураЗначений);			
	КонецЕсли;

	ЗначениеВРеквизитФормы(мЭтотОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	дог_УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	
КонецПроцедуры