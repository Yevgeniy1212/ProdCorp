Перем мНаборыШаблон;

Перем мКэшОбработки;

Перем мОтображатьСтруктурныеПодразделения Экспорт;

// Процедура перепроведения документов
//
// Параметры: 
//  ДатаНач - дата, начиная с которой перепроводятся документы
//  Организация - организация, по которой перепроводятся документы
//  СдвигатьГраницуАктуальности - флаг сдвига назад даты актульности по разделам учета при ошибке проведения документа

Процедура ПерепроведениеДокументов(ДатаНач, ДатаКон = '00010101', ФильтрПоОрганизации = Неопределено, СдвигатьГраницуАктуальности = Ложь) Экспорт
	
	Перем ФормаПрогрессора;
	
	мНаборыШаблон = Новый Структура;
	
	#Если Клиент Тогда
		ФормаПрогрессора = ПолучитьОбщуюФорму("ФормаИндикатора");
		ФормаПрогрессора.НаименованиеОбработкиДанных = "Групповое перепроведение документов";
	#КонецЕсли
	
	Если ТипЗнч(ФильтрПоОрганизации) = Тип("СправочникСсылка.Организации") Тогда
		СписокОрганизаций = Новый ТаблицаЗначений;
		СписокОрганизаций.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
		СписокОрганизаций.Колонки.Добавить("СтруктурноеПодразделение",Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		
		НоваяСтрока = СписокОрганизаций.Добавить();
		НоваяСтрока.Организация =  ФильтрПоОрганизации;
	Иначе
		СписокОрганизаций = ФильтрПоОрганизации;		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Для Каждого ДокументМетаданные ИЗ Метаданные.Документы Цикл
		
		ЕстьРучнаяКорректировка = ОбщегоНазначения.ЕстьРеквизитДокумента("РучнаяКорректировка", ДокументМетаданные);
		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "", "
		|ОБЪЕДИНИТЬ ВСЕ
		|") + "ВЫБРАТЬ """ + ДокументМетаданные.Имя + """ КАК ИмяДокумента, Представление КАК Представление, Ссылка КАК Ссылка, Дата КАК Дата, 
		|" + ?(ЕстьРучнаяКорректировка, "РучнаяКорректировка", "ЛОЖЬ") + " КАК РучнаяКорректировка
		|ИЗ Документ." + ДокументМетаданные.Имя + "
		|ГДЕ Проведен И Дата >= &ДатаНач";
		
		Если ДатаКон <> Дата('00010101') Тогда
			Запрос.Текст = Запрос.Текст + " И Дата <= &ДатаКон";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ЕстьРучнаяКорректировка", ЕстьРучнаяКорректировка);
		
		Если СписокОрганизаций <> Неопределено Тогда
				
				Если ДокументМетаданные.Реквизиты.Найти("Организация") <> Неопределено Тогда
					
					Условие 	 = " И (";
					СчетчикСтрок = 1;
					
					Для Каждого СтрокаСписокОрганизаций Из СписокОрганизаций Цикл
						Условие = Условие + "(Организация = &Организация" + Строка(СчетчикСтрок); 
						
						Если ДокументМетаданные.Реквизиты.Найти("СтруктурноеПодразделение") <> Неопределено Тогда
							Условие = Условие + " И СтруктурноеПодразделение = &СтруктурноеПодразделение" + Строка(СчетчикСтрок);
						ИначеЕсли ДокументМетаданные.Реквизиты.Найти("СтруктурноеПодразделениеОтправитель") <> Неопределено Тогда
							Условие = Условие + " И (СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение" + Строка(СчетчикСтрок) + " ИЛИ СтруктурноеПодразделениеПолучатель = &СтруктурноеПодразделение" + Строка(СчетчикСтрок) + ")";
						ИначеЕсли ДокументМетаданные.Реквизиты.Найти("СтруктурноеПодразделениеОткуда") <> Неопределено Тогда
							Условие = Условие + " И (СтруктурноеПодразделениеОткуда = &СтруктурноеПодразделение" + Строка(СчетчикСтрок) + " ИЛИ СтруктурноеПодразделениеКуда = &СтруктурноеПодразделение" + Строка(СчетчикСтрок) + ")";
						КонецЕсли;

						Условие = Условие + ")";
						
						Если СчетчикСтрок <> СписокОрганизаций.Количество() Тогда
							Условие = Условие + " ИЛИ ";
						КонецЕсли;
						
						Запрос.УстановитьПараметр("Организация" + Строка(СчетчикСтрок), СтрокаСписокОрганизаций.Организация);				
						Запрос.УстановитьПараметр("СтруктурноеПодразделение" + Строка(СчетчикСтрок), СтрокаСписокОрганизаций.СтруктурноеПодразделение);				
						СчетчикСтрок = СчетчикСтрок + 1;
					КонецЦикла;
					Условие 	 = Условие + ")";
				Иначе 
					Условие = "";
				КонецЕсли;
				
				Запрос.Текст = Запрос.Текст + Условие;

		КонецЕсли;                                            
		                              
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО Дата, Ссылка";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	ТаблицаДокументов.Колонки.Добавить("БылаОшибка", Новый ОписаниеТипов("Булево"));
	ВсегоДокументов = ТаблицаДокументов.Количество();
	
	
	Если ФормаПрогрессора <> Неопределено Тогда
		ФормаПрогрессора.ЗначениеИндикатора = 0;
		ФормаПрогрессора.МаксимальноеЗначение = ВсегоДокументов;		
		ФормаПрогрессора.СтрокаСостоянияПрогрессора  = "Удаление движений проведенных документов";		
		ФормаПрогрессора.Открыть();
	КонецЕсли;	
	
	Для Каждого СтрокаДокумента ИЗ ТаблицаДокументов Цикл
		
		Если ФормаПрогрессора <> Неопределено Тогда
			ФормаПрогрессора.НадписьСостоянияПрогрессора = СтрокаДокумента.Представление;
			ФормаПрогрессора.ЗначениеИндикатора = ФормаПрогрессора.ЗначениеИндикатора + 1;
		КонецЕсли;
		
		Если СтрокаДокумента.РучнаяКорректировка Тогда			
			Продолжить;
		КонецЕсли;   
		
		Регистратор = СтрокаДокумента.Ссылка;
		КоллекцияДвижений = Метаданные.Документы[СтрокаДокумента.ИмяДокумента].Движения;
		НачатьТранзакцию();
		Для Каждого НаборМетаданные ИЗ КоллекцияДвижений Цикл
			Набор = ПолучитьНаборЗаписей(НаборМетаданные);
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Записать();
			Запрос.УстановитьПараметр(СтрокаДокумента.ИмяДокумента + "Ссылка", Регистратор);
			Запрос.УстановитьПараметр(СтрокаДокумента.ИмяДокумента + "Дата", СтрокаДокумента.Дата);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;	
	
	Если ФормаПрогрессора <> Неопределено Тогда
		ФормаПрогрессора.ЗначениеИндикатора = 0;
		ФормаПрогрессора.МаксимальноеЗначение = ВсегоДокументов;
		ФормаПрогрессора.СтрокаСостоянияПрогрессора  = "Проведение документов";		
		ФормаПрогрессора.Открыть();
	КонецЕсли;	
	
	
	
	ИндексСтрокиНачалаДаты = Неопределено;
	ТекущаяДатаПроведения = Неопределено;
	
	Для индекс = 0 ПО ВсегоДокументов - 1 Цикл
		СтрокаДокумента = ТаблицаДокументов[индекс];
		Если ФормаПрогрессора <> Неопределено Тогда
			ФормаПрогрессора.НадписьСостоянияПрогрессора = СтрокаДокумента.Представление;
			ФормаПрогрессора.ЗначениеИндикатора = ФормаПрогрессора.ЗначениеИндикатора + 1;
		КонецЕсли;
		
		ДокументОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
		Если ТекущаяДатаПроведения <> ДокументОбъект.Дата Тогда
			ИндексСтрокиНачалаДаты = индекс;
			ТекущаяДатаПроведения = ДокументОбъект.Дата;
		КонецЕсли;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			Если СдвигатьГраницуАктуальности Тогда
				
				Если СтрокаДокумента.БылаОшибка Тогда
					// для документа уже была ошибка проведения, продолжение не возможно
					ОбщегоНазначения.СообщитьОбОшибке("Документ " + Строка(ДокументОбъект) + " не проведен!" + Символы.ПС + "По причине: " + ОписаниеОшибки(), , "Ошибка проведения!");
					Прервать;
				КонецЕсли;
				
				СдвигГраницыАктуалностиПоРазделам(СтрокаДокумента.ИмяДокумента, ДокументОбъект);
				СтрокаДокумента.БылаОшибка = Истина;
				индекс = ИндексСтрокиНачалаДаты;
				
			Иначе
				
				ОбщегоНазначения.СообщитьОбОшибке("Документ " + Строка(ДокументОбъект) + " не проведен!" + Символы.ПС + "По причине: " + ОписаниеОшибки(), , "Ошибка проведения!");
				Прервать;
				
			КонецЕсли;
		КонецПопытки;
		
	КонецЦикла;
	
	Если ФормаПрогрессора <> Неопределено Тогда
		ФормаПрогрессора.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура СдвигГраницыАктуалностиПоРазделам(ИмяДокумента, ДокументОбъект)
	
	МетаданныеОбъекта = мКэшОбработки.МетаданныеОбъектов[ИмяДокумента];
	Если МетаданныеОбъекта = Неопределено Тогда
		МетаданныеОбъекта = ДокументОбъект.Метаданные();
		мКэшОбработки.МетаданныеОбъектов[ИмяДокумента] = МетаданныеОбъекта;
	КонецЕсли;
	
	Если МетаданныеОбъекта.Реквизиты.Найти("Организация") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатыПоРазделам = мКэшОбработки.АктуальностьРазделовПоОрганизации[ДокументОбъект.Организация];
	Если ДатыПоРазделам = Неопределено Тогда
		ДатыПоРазделам = РегистрыСведений.ДатаАктуальностиУчета.Получить(Новый Структура("Организация", ДокументОбъект.Организация));
		мКэшОбработки.АктуальностьРазделовПоОрганизации[ДокументОбъект.Организация] = ДатыПоРазделам;		
	КонецЕсли;
	
	НужнаЗапись = Ложь;
	Для Каждого КлючИЗначение ИЗ ДатыПоРазделам Цикл
		Если КлючИЗначение.Значение > НачалоДня(НачалоДня(ДокументОбъект.Дата) - 1) Тогда
			ДатыПоРазделам[КлючИЗначение.Ключ] = НачалоДня(НачалоДня(ДокументОбъект.Дата) - 1);
			НужнаЗапись = Истина;
		КонецЕсли;		
	КонецЦикла;	
	
	Если НужнаЗапись Тогда
		Запись = РегистрыСведений.ДатаАктуальностиУчета.СоздатьМенеджерЗаписи();
		Запись.Организация = ДокументОбъект.Организация;
		Для Каждого КлючИЗначение ИЗ ДатыПоРазделам Цикл
			Запись[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла;
		Запись.Записать();
	КонецЕсли;
			
КонецПроцедуры

Функция ПолучитьНаборЗаписей(НаборМетаданные)
	
	Если мНаборыШаблон.Свойство(НаборМетаданные.Имя) Тогда
		Возврат мНаборыШаблон[НаборМетаданные.Имя];
		
	Иначе
		Если Метаданные.РегистрыСведений.Содержит(НаборМетаданные) Тогда
			Набор = РегистрыСведений[НаборМетаданные.Имя].СоздатьНаборЗаписей();
			
		ИначеЕсли Метаданные.РегистрыНакопления.Содержит(НаборМетаданные) Тогда
			Набор = РегистрыНакопления[НаборМетаданные.Имя].СоздатьНаборЗаписей();
			
		ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(НаборМетаданные) Тогда
			Набор = РегистрыБухгалтерии[НаборМетаданные.Имя].СоздатьНаборЗаписей();
			
		ИначеЕсли Метаданные.РегистрыРасчета.Содержит(НаборМетаданные) Тогда
			Набор = РегистрыРасчета[НаборМетаданные.Имя].СоздатьНаборЗаписей();
			
		КонецЕсли;	
		
		мНаборыШаблон.Вставить(НаборМетаданные.Имя, Набор);
		Возврат Набор;
		
	КонецЕсли;
	
КонецФункции

мКэшОбработки = Новый Структура;
мКэшОбработки.Вставить("МетаданныеОбъектов", Новый Соответствие);
мКэшОбработки.Вставить("АктуальностьРазделовПоОрганизации", Новый Соответствие);

мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();