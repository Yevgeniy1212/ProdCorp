
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	фин_ПроцедурыКалендарногоПланирования.ЗаполнитьПереченьВидовЗадач(ПереченьВидовЗадач);
	Если Параметры.Свойство("ТолькоПросмотр") И ТипЗнч(Параметры.ТолькоПросмотр)=Тип("Булево") Тогда
		ТолькоПросмотр = Параметры.ТолькоПросмотр;
		Если ТолькоПросмотр Тогда
			Элементы.ФормаЗаписать.Доступность=Ложь;
			Элементы.ФормаЗаписатьИЗакрыть.Доступность=Ложь;
		КонецЕсли;
	КонецЕсли;
	Параметры.Свойство("БюджетныйРегламент",Объект.БюджетныйРегламент);
	ПоляКЗаполнению.Добавить("ДатаОтсчета");
	ПоляКЗаполнению.Добавить("ДнейОтсчета");
	ПоляКЗаполнению.Добавить("ЕдиницаИзмеренияВремениОтсчета");
	ПоляКЗаполнению.Добавить("ВидОтсчета");
	ПоляКЗаполнению.Добавить("СрокИсполнения");
	ПоляКЗаполнению.Добавить("ЕдиницаИзмеренияВремениИсполнения");
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.РедактируемыйГрафик);
	ПолучитьДанныеФормы();
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикисобытийРеквизитовШапки

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ЗаполнитьГрафикПоПараметрам();
	Диаграмма.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	ЗаполнитьГрафикПоПараметрам();
	Диаграмма.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ВидЗадачПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиДереваРедактируемыйГрафик


&НаКлиенте
Процедура РедактируемыйГрафикТекстОткрытие(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.РедактируемыйГрафик.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	ТекущаяКолонка = Элементы.РедактируемыйГрафик.ТекущийЭлемент;
	ИмяКолонки = СтрЗаменить(ТекущаяКолонка.Имя,"РедактируемыйГрафикТекст","");
	СтруктураДанных = Новый Структура("Заголовок",ТекущаяКолонка.Заголовок+"/"+ТекущиеДанные.Бюджет);
	Для Каждого Поле Из ПоляКЗаполнению Цикл
		СтруктураДанных.Вставить(Поле.Значение,ТекущиеДанные[Поле.Значение+ИмяКолонки]);
	КонецЦикла;
	СтруктураПоиска = Новый Структура("Организация,СценарийПланирования,Бюджет,УправленческоеПодразделение,Проект,ЭтапБюджетногоПроцесса",Объект.Организация,Объект.Сценарий,ТекущиеДанные.Бюджет,ТекущиеДанные.УправленческоеПодразделение,ТекущиеДанные.Проект,ТекущиеДанные.ЭтапБюджетногоПроцесса);
	ОтборПоВидуЗадачи = ОтборПоВидуЗадачи(ИмяКолонки);
	Для Каждого ЭлементОтбора Из ОтборПоВидуЗадачи Цикл
		СтруктураПоиска.Вставить(ЭлементОтбора.Ключ,ЭлементОтбора.Значение);
	КонецЦикла;
	СтрокиГрафика = Объект.ГрафикПроцесса.НайтиСтроки(СтруктураПоиска);
	Исполнители = Новый Массив;
	Если СтрокиГрафика.Количество()>0 Тогда
		СтрокиИсполнители = Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторСтроки",СтрокиГрафика[0].ИдентификаторСтроки));
		Для Каждого СтрокаИсполнители Из СтрокиИсполнители Цикл
			Исполнители.Добавить(СтрокаИсполнители.Исполнитель);
		КонецЦикла;
	КонецЕсли;
	СтруктураДанных.Вставить("Исполнители",Исполнители);
	ОписаниеРедактированияГрафика = Новый ОписаниеОповещения("ОбработкаРедактированияЗадачиГрафика",ЭтотОбъект,Новый Структура("Идентификатор,ИмяКолонки",ТекущиеДанные.ПолучитьИдентификатор(),ИмяКолонки));
	ОткрытьФорму("Обработка.фин_ГрафикБюджетногоПроцесса.Форма.ФормаРедактированияСроков",СтруктураДанных,Элемент,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеРедактированияГрафика);
КонецПроцедуры

&НаКлиенте
Процедура РедактируемыйГрафикТекстАналитикаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.РедактируемыйГрафик.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбработчикВыбораАналитикиДляСуществующего = Новый ОписаниеОповещения("ОбработкаВыбораАналитики",ЭтотОбъект,Новый Структура("Создание,Бюджет,Идентификатор",Ложь,ТекущиеДанные.Бюджет,ТекущиеДанные.ПолучитьИдентификатор()));
	ПараметрыАналитика = Новый Структура("ЭтапБюджетногоПроцесса,УправленческоеПодразделение,Проект");
	ЗаполнитьЗначенияСвойств(ПараметрыАналитика,ТекущиеДанные);
	ОткрытьФорму("Обработка.фин_ГрафикБюджетногоПроцесса.Форма.ФормаНастройкиДетализации",ПараметрыАналитика,Элементы.РедактируемыйГрафик,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОбработчикВыбораАналитикиДляСуществующего);
КонецПроцедуры

&НаКлиенте
Процедура РедактируемыйГрафикЭтапБюджетногоПроцессаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область СобытияДиаграммы

&НаКлиенте
Процедура ДиаграммаОбработкаРасшифровки(Элемент, Расшифровки, СтандартнаяОбработка, Дата)
	Если ТипЗнч(Расшифровки)=Тип("Массив") Тогда
		Для Каждого Расшифровка Из Расшифровки Цикл
			Если ТипЗнч(Расшифровка)=Тип("Структура") Тогда
				Если Расшифровка.Свойство("ДанныеРасшифровки") Тогда
					Попытка
						ПоказатьЗначение(,Расшифровка.ДанныеРасшифровки);
					Исключение
						СтандартнаяОбработка = Ложь;
					КонецПопытки;
				Иначе
					СтандартнаяОбработка = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПриОкончанииРедактированияИнтервала(Элемент, Интервал, ОтменаРедактирования)
	Если ТолькоПросмотр Тогда
		ОтменаРедактирования = Истина;
		Возврат;
	КонецЕсли;
	Интервал.Начало = НачалоДня(Интервал.Начало);
	Интервал.Конец  = КонецДня(Интервал.Конец);
	НачалоПериода 	= Интервал.Начало;
	КонецПериода 	= Интервал.Конец;
	СтруктураПоиска = Новый Структура(Новый ФиксированнаяСтруктура(Интервал.Расшифровка));
	Если СтруктураПоиска.Свойство("УровеньДетализации") Тогда
		Если ТипЗнч(СтруктураПоиска.УровеньДетализации)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникаПроектов() Тогда
			СтруктураПоиска.Вставить("Проект",СтруктураПоиска.УровеньДетализации);
		ИначеЕсли ТипЗнч(СтруктураПоиска.УровеньДетализации)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникУправленческихПодразделений() Тогда
			СтруктураПоиска.Вставить("УправленческоеПодразделение",СтруктураПоиска.УровеньДетализации);
		КонецЕсли;
		СтруктураПоиска.Удалить("УровеньДетализации");
	КонецЕсли;
	
	СтрокиТЧ = Объект.ГрафикПроцесса.НайтиСтроки(СтруктураПоиска);
	Разница = Окр((НачалоДня(ТекущаяДата()) - КонецПериода)/(24*60*60));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		СтрокаТЧ.ДнейОтсчета 	= ?(Разница<0,-Разница,Разница);
		СтрокаТЧ.СрокИсполнения = Окр((КонецПериода - НачалоПериода)/(24*60*60));
		СтрокаТЧ.ВидОтсчета = ?(Разница<0,ПредопределенноеЗначение("Перечисление.фин_ВидыОтсчетовСроковИсполнения.После"),ПредопределенноеЗначение("Перечисление.фин_ВидыОтсчетовСроковИсполнения.До"));
		СтрокаТЧ.ДатаОтсчета = ПредопределенноеЗначение("Перечисление.фин_ГраницыБюджетногоПериода.НачалоБюджетногоПериода"); 
	КонецЦикла;
	ОтменаРедактирования = Ложь;
	Модифицированность = Истина;
	ВывестиДанныеПриЗаполнении();
	ОбновитьДиаграммуНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьДетальнуюСтроку(Команда)
	ТекущиеДанные = Элементы.РедактируемыйГрафик.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.РедактируемыйГрафик.ТекущийРодитель<>Неопределено Тогда
		ТекущиеДанные = РедактируемыйГрафик.НайтиПоИдентификатору(Элементы.РедактируемыйГрафик.ТекущийРодитель);
	КонецЕсли;
	ОбработчикВыбораАналитикиДляНового = Новый ОписаниеОповещения("ОбработкаВыбораАналитики",ЭтотОбъект,Новый Структура("Создание,Бюджет,Идентификатор",Истина,ТекущиеДанные.Бюджет,ТекущиеДанные.ПолучитьИдентификатор()));
	ПараметрыАналитика = Новый Структура;
	ОткрытьФорму("Обработка.фин_ГрафикБюджетногоПроцесса.Форма.ФормаНастройкиДетализации",ПараметрыАналитика,Элементы.РедактируемыйГрафик,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОбработчикВыбораАналитикиДляНового);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДетальнуюСтроку(Команда)
	ТекущиеДанные = Элементы.РедактируемыйГрафик.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.РедактируемыйГрафик.ТекущиеДанные.ПолучитьРодителя()<>Неопределено Тогда
		РодительСтроки = Элементы.РедактируемыйГрафик.ТекущиеДанные.ПолучитьРодителя();
	Иначе
		Возврат;
	КонецЕсли;
	СтруктураПоиска = Новый Структура("Организация,СценарийПланирования,Бюджет,УправленческоеПодразделение,Проект,ЭтапБюджетногоПроцесса",Объект.Организация,Объект.Сценарий,ТекущиеДанные.Бюджет,ТекущиеДанные.УправленческоеПодразделение,ТекущиеДанные.Проект,ТекущиеДанные.ЭтапБюджетногоПроцесса);
	СтрокиУдалить = Объект.ГрафикПроцесса.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		СтрокиИсполнителиУдалить = Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторСтроки",СтрокаУдалить.ИдентификаторСтроки));
		Для Каждого СтрокаИсполнителиУдалить Из СтрокиИсполнителиУдалить Цикл
			Объект.Исполнители.Удалить(СтрокаИсполнителиУдалить);
		КонецЦикла;
		Объект.ГрафикПроцесса.Удалить(СтрокаУдалить);
	КонецЦикла;
	РодительСтроки.ПолучитьЭлементы().Удалить(ТекущиеДанные);
	УправлениеСпискамиВыбора(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	ЗаписатьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ЗаписатьНаСервере();
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДиаграмму(Команда)
	ОбновитьДиаграммуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Автозаполнение(Команда)
	АвтозаполнениеНаСервере();
	Диаграмма.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьГрафикПоОрганизацииСценарию(Команда)
	ОписаниеОбработкиВыбора = Новый ОписаниеОповещения("ОбработкаВыбораОрганизацииИСценарияДляКопирования",ЭтотОбъект);
	ОткрытьФорму("Обработка.фин_ГрафикБюджетногоПроцесса.Форма.ФормаВыбораОрганизацииИСценария",,ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОбработкиВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГанта(Команда)
	ДиаграммаГантаНаСервере();
	ПараметрыОтчета = Новый Структура("Адрес,Организация,СценарийПланирования,БюджетныйРегламент,ИзОбъекта",Адрес,Объект.Организация,Объект.Сценарий,Объект.БюджетныйРегламент,Истина);
	ОткрытьФорму("Отчет.фин_ДиаграммаГантаБюджетногоПроцесса.Форма",ПараметрыОтчета,ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольПоРегламенту(Команда)
	Если ЗначениеЗаполнено(Объект.БюджетныйРегламент) Тогда
		РезультатПроверки = КонтрольПоРегламентуНаСервере();
		Если РезультатПроверки = "" Тогда
			ПоказатьПредупреждение(,"Ошибок не обнаружено");
		Иначе
			ОткрытьФорму("Обработка.фин_ГрафикБюджетногоПроцесса.Форма.ИнформацияОбОшибках",Новый Структура("Текст",РезультатПроверки),ЭтотОбъект,Новый УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(,"Редактируемый график не связан с регламентом!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОбразцуДругогоРегламента(Команда)
	ОповещениеОбработкиВыбораРегламента = Новый ОписаниеОповещения("ОбработкаВыбораРегламента",ЭтотОбъект);
	ОткрытьФорму("Документ.фин_БюджетныйРегламент.ФормаВыбора",,ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОповещениеОбработкиВыбораРегламента);
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции


&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеСпискамиВыбора(Форма)
	Объект 		= Форма.Объект;
	Элементы 	= Форма.Элементы;
	Для Каждого ЭлементСписка Из Элементы.Организация.СписокВыбора Цикл
		ПредставлениеЗначения = ?(ЗначениеЗаполнено(ЭлементСписка.Значение),Строка(ЭлементСписка.Значение),"<по всем организациям>");
		ЭлементСписка.Представление = ?(Объект.ГрафикПроцесса.НайтиСтроки(Новый Структура("Организация",ЭлементСписка.Значение)).Количество()=0,ПредставлениеЗначения,ПредставлениеЗначения+" *");
	КонецЦикла;
	Для Каждого ЭлементСписка Из Элементы.Сценарий.СписокВыбора Цикл
		ПредставлениеЗначения = ?(ЗначениеЗаполнено(ЭлементСписка.Значение),Строка(ЭлементСписка.Значение),"<по всем сценариям>");
		ЭлементСписка.Представление = ?(Объект.ГрафикПроцесса.НайтиСтроки(Новый Структура("СценарийПланирования",ЭлементСписка.Значение)).Количество()=0,ПредставлениеЗначения,ПредставлениеЗначения+" *");
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	Объект 		= Форма.Объект;
	Элементы 	= Форма.Элементы;
	Для Каждого ЭлементСписка Из Форма.ПереченьВидовЗадач Цикл
		ВидЗадачи = ЭлементСписка.Значение;
		Элементы["РедактируемыйГрафикТекст"+ВидЗадачи].Видимость = Объект[ВидЗадачи];
	КонецЦикла;
	УправлениеСпискамиВыбора(Форма);
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеФормы()
	
	
	Элементы.Организация.СписокВыбора.Очистить();
	Элементы.Организация.СписокВыбора.Добавить(Справочники.Организации.ПустаяСсылка(),"<по всем организациям>");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка,
		|	Организации.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Элементы.Организация.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	
	Элементы.Сценарий.СписокВыбора.Очистить();
	Элементы.Сценарий.СписокВыбора.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий(),"<по всем сценариям>");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СценарииПланирования.Ссылка,
		|	СценарииПланирования.Наименование КАК Наименование
		|ИЗ
		|	Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования КАК СценарииПланирования
		|ГДЕ
		|	НЕ СценарииПланирования.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Элементы.Сценарий.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Регламент = Объект.БюджетныйРегламент;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_Бюджеты.Ссылка КАК Бюджет,
		|	фин_БюджетныйРегламентРегламент.Ранг КАК Ранг
		|ИЗ
		|	Справочник.фин_Бюджеты КАК фин_Бюджеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.фин_БюджетныйРегламент.Регламент КАК фин_БюджетныйРегламентРегламент
		|		ПО фин_Бюджеты.Ссылка = фин_БюджетныйРегламентРегламент.Бюджет
		|			И (фин_БюджетныйРегламентРегламент.Ссылка = &Регламент)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ранг,
		|	фин_Бюджеты.Наименование";
		
		Если ЗначениеЗаполнено(Регламент) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЛЕВОЕ","ВНУТРЕННЕЕ");
		КонецЕсли;
	
	Запрос.УстановитьПараметр("Регламент", Регламент);
	РезультатЗапроса = Запрос.Выполнить();
	
	Объект.Бюджеты.Загрузить(РезультатЗапроса.Выгрузить());
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СрокиРазработкиБюджетов.Бюджет,
		|	СрокиРазработкиБюджетов.ПодачаЗаявок,
		|	СрокиРазработкиБюджетов.СогласованиеЗаявок,
		|	СрокиРазработкиБюджетов.ФормированиеБюджета,
		|	СрокиРазработкиБюджетов.СогласованиеБюджета
		|ИЗ
		|	Документ.фин_БюджетныйРегламент.СрокиРазработкиБюджетов КАК СрокиРазработкиБюджетов
		|ГДЕ
		|	СрокиРазработкиБюджетов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Регламент);
	РезультатЗапроса = Запрос.Выполнить();
	
	Объект.СрокиРазработкиБюджетов.Загрузить(РезультатЗапроса.Выгрузить());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПредшествующиеБюджеты.Ссылка,
		|	ПредшествующиеБюджеты.НомерСтроки,
		|	ПредшествующиеБюджеты.Бюджет,
		|	ПредшествующиеБюджеты.Предшественник,
		|	ПредшествующиеБюджеты.Обязательный
		|ИЗ
		|	Документ.фин_БюджетныйРегламент.ПредшествующиеБюджеты КАК ПредшествующиеБюджеты
		|ГДЕ
		|	ПредшествующиеБюджеты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Регламент);
	РезультатЗапроса = Запрос.Выполнить();
	
	Объект.ПредшествующиеБюджеты.Загрузить(РезультатЗапроса.Выгрузить());
	
	ЗаполнитьПоРегламенту(Регламент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРегламенту(Регламент)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.ВидЗадачи,
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.Бюджет,
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.Организация,
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.ЭтапБюджетногоПроцесса,
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.Проект,
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.УправленческоеПодразделение,
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.СценарийПланирования,
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.Регламент,
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.ДатаОтсчета,
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.ДнейОтсчета,
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.ЕдиницаИзмеренияВремениОтсчета,
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.ВидОтсчета,
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.СрокИсполнения,
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.ЕдиницаИзмеренияВремениИсполнения
		|ИЗ
		|	РегистрСведений.фин_КалендарноеПланированиеБюджетногоПроцесса КАК фин_КалендарноеПланированиеБюджетногоПроцесса
		|ГДЕ
		|	фин_КалендарноеПланированиеБюджетногоПроцесса.Регламент = &Регламент";
	
	Запрос.УстановитьПараметр("Регламент", Регламент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Объект.ГрафикПроцесса.Загрузить(РезультатЗапроса.Выгрузить());
	
	Для Каждого СтрокаТЧ Из Объект.ГрафикПроцесса Цикл
		СтрокаТЧ.ИдентификаторСтроки = ПолучитьИдентификаторСтроки(ЭтотОбъект);
		СтрокиБюджетов = Объект.Бюджеты.НайтиСтроки(Новый Структура("Бюджет",СтрокаТЧ.Бюджет));
		Если СтрокиБюджетов.Количество()>0 Тогда
			СтрокаТЧ.Ранг = СтрокиБюджетов[0].Ранг;
		КонецЕсли;
	КонецЦикла;
	
	СписокОрганизаций = Объект.ГрафикПроцесса.Выгрузить();
	СписокОрганизаций.Свернуть("Организация,СценарийПланирования");
	Если СписокОрганизаций.Количество()>0 Тогда
		Объект.Организация = СписокОрганизаций[0].Организация;	
		Объект.Сценарий = СписокОрганизаций[0].СценарийПланирования;
	Иначе
		Объект.Сценарий = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ОсновнойСценарийПланирования");
	КонецЕсли;
	
	Для Каждого ЭлементВидыЗадач Из ПереченьВидовЗадач Цикл
		СтруктураОтбор = ОтборПоВидуЗадачи(ЭлементВидыЗадач.Значение);
		СтрокиГрафикаПоВидуЗадач = Объект.ГрафикПроцесса.НайтиСтроки(СтруктураОтбор);
		Объект[ЭлементВидыЗадач.Значение] = СтрокиГрафикаПоВидуЗадач.Количество()>0;
	КонецЦикла;
	Объект.ФормированиеБюджета = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ИсполнителиЗадачБюджетногоПроцесса.ВидЗадачи,
		|	фин_ИсполнителиЗадачБюджетногоПроцесса.Бюджет,
		|	фин_ИсполнителиЗадачБюджетногоПроцесса.Исполнитель КАК Пользователь,
		|	фин_ИсполнителиЗадачБюджетногоПроцесса.Организация,
		|	фин_ИсполнителиЗадачБюджетногоПроцесса.ЭтапБюджетногоПроцесса,
		|	фин_ИсполнителиЗадачБюджетногоПроцесса.Проект,
		|	фин_ИсполнителиЗадачБюджетногоПроцесса.УправленческоеПодразделение,
		|	фин_ИсполнителиЗадачБюджетногоПроцесса.Регламент
		|ИЗ
		|	РегистрСведений.фин_ИсполнителиЗадачБюджетногоПроцесса КАК фин_ИсполнителиЗадачБюджетногоПроцесса
		|ГДЕ
		|	фин_ИсполнителиЗадачБюджетногоПроцесса.Регламент = &Регламент";
	
	Запрос.УстановитьПараметр("Регламент", Регламент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СтруктураПоиска = Новый Структура("ВидЗадачи,Бюджет,Организация,ЭтапБюджетногоПроцесса,Проект,УправленческоеПодразделение");
	Объект.Исполнители.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,ВыборкаДетальныеЗаписи);
		СтрокиГрафика = Объект.ГрафикПроцесса.НайтиСтроки(СтруктураПоиска);
		Если СтрокиГрафика.Количество()>0 Тогда
			НоваяСтрока = Объект.Исполнители.Добавить();
			НоваяСтрока.Исполнитель 		= ВыборкаДетальныеЗаписи.Пользователь;
			НоваяСтрока.ИдентификаторСтроки = СтрокиГрафика[0].ИдентификаторСтроки;
		КонецЕсли;
	КонецЦикла;
	ВывестиДанныеПриЗаполнении();
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеПриЗаполнении()
	Для Каждого ЭлементВидыЗадач Из ПереченьВидовЗадач Цикл
		СтруктураОтбор = ОтборПоВидуЗадачи(ЭлементВидыЗадач.Значение);
		СтрокиГрафикаПоВидуЗадач = Объект.ГрафикПроцесса.НайтиСтроки(СтруктураОтбор);
		Объект[ЭлементВидыЗадач.Значение] = СтрокиГрафикаПоВидуЗадач.Количество()>0;
	КонецЦикла;
	Объект.ФормированиеБюджета = Истина;
	ЗаполнитьГрафикПоПараметрам();
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрафикПоПараметрам()
	Дерево = ДанныеФормыВЗначение(РедактируемыйГрафик,Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();
	
	Для Каждого СтрокаБюджеты Из Объект.Бюджеты Цикл
		НоваяСтрока 		= Дерево.Строки.Добавить();
		НоваяСтрока.Бюджет 	= СтрокаБюджеты.Бюджет;
		
		СтрокиГрафика = Объект.ГрафикПроцесса.Выгрузить(Новый Структура("Бюджет,Организация,СценарийПланирования",СтрокаБюджеты.Бюджет,Объект.Организация,Объект.Сценарий),"Проект,УправленческоеПодразделение,ЭтапБюджетногоПроцесса");
		СтрокиГрафика.Свернуть("Проект,УправленческоеПодразделение,ЭтапБюджетногоПроцесса");
		Если СтрокиГрафика.Количество() = 1 Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокиГрафика[0]);
			ЗаполнитьСтрокуГрафика(НоваяСтрока);
		ИначеЕсли СтрокиГрафика.Количество()>1 Тогда
			ЗаполнитьСтрокуГрафика(НоваяСтрока);
			Для Каждого СтрокаГрафика Из СтрокиГрафика Цикл
				Если ЗначениеЗаполнено(СтрокаГрафика.Проект) ИЛИ ЗначениеЗаполнено(СтрокаГрафика.УправленческоеПодразделение) ИЛИ ЗначениеЗаполнено(СтрокаГрафика.ЭтапБюджетногоПроцесса) Тогда
					ПодчиненнаяСтрока 			= НоваяСтрока.Строки.Добавить();
					ПодчиненнаяСтрока.Бюджет 	= СтрокаБюджеты.Бюджет;
					ЗаполнитьЗначенияСвойств(ПодчиненнаяСтрока,СтрокаГрафика);
					ЗаполнитьСтрокуГрафика(ПодчиненнаяСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(Дерево,РедактируемыйГрафик);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОтборПоВидуЗадачи(ВидЗадачи)
	Если ВидЗадачи = "ПодачаЗаявок" Тогда
		СтруктураОтбор = Новый Структура("ВидЗадачи",ПредопределенноеЗначение("Перечисление.фин_ВидыЗадачПоБюджетам.ПодачаЗаявок"));
	ИначеЕсли ВидЗадачи = "СогласованиеЗаявок" Тогда
		СтруктураОтбор = Новый Структура("ВидЗадачи",ПредопределенноеЗначение("Перечисление.фин_ВидыЗадачПоБюджетам.СогласованиеЗаявок"));
	ИначеЕсли ВидЗадачи = "ФормированиеБюджета" Тогда
		СтруктураОтбор = Новый Структура("ВидЗадачи",ПредопределенноеЗначение("Перечисление.фин_ВидыЗадачПоБюджетам.ФормированиеБюджета"));
	ИначеЕсли ВидЗадачи = "СогласованиеБюджета" Тогда
		СтруктураОтбор = Новый Структура("ВидЗадачи",ПредопределенноеЗначение("Перечисление.фин_ВидыЗадачПоБюджетам.СогласованиеБюджета"));
	ИначеЕсли ВидЗадачи = "КорректировкаБюджета" Тогда
		СтруктураОтбор = Новый Структура("ВидЗадачи",ПредопределенноеЗначение("Перечисление.фин_ВидыЗадачПоБюджетам.КорректировкаБюджета"));
	ИначеЕсли ВидЗадачи = "АнализИсполненияБюджета" Тогда
		СтруктураОтбор = Новый Структура("ВидЗадачи",ПредопределенноеЗначение("Перечисление.фин_ВидыЗадачПоБюджетам.АнализИсполненияБюджета"));
	КонецЕсли;
	Возврат СтруктураОтбор;
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуГрафика(СтрокаДерева)
	СтрокиГрафика 	= Объект.ГрафикПроцесса.Выгрузить(Новый Структура("Бюджет,Организация,СценарийПланирования,Проект,УправленческоеПодразделение,ЭтапБюджетногоПроцесса",СтрокаДерева.Бюджет,Объект.Организация,Объект.Сценарий,СтрокаДерева.Проект,СтрокаДерева.УправленческоеПодразделение,СтрокаДерева.ЭтапБюджетногоПроцесса));
	Для Каждого ЭлементВидыЗадач Из ПереченьВидовЗадач Цикл
		СтруктураОтбор = ОтборПоВидуЗадачи(ЭлементВидыЗадач.Значение);
		СтрокиГрафикаПоВидуЗадач = СтрокиГрафика.НайтиСтроки(СтруктураОтбор);
		Если СтрокиГрафикаПоВидуЗадач.Количество()>0 Тогда
			СтрокаПараметры = СтрокиГрафикаПоВидуЗадач[0];
			Для Каждого Поле Из ПоляКЗаполнению Цикл
				СтрокаДерева[Поле.Значение+ЭлементВидыЗадач.Значение] = СтрокаПараметры[Поле.Значение];
			КонецЦикла;
			ТекстЗадача = ПолучитьТекстЗадачи(СтрокаПараметры);
			СтрокиИсполнители = Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторСтроки",СтрокаПараметры.ИдентификаторСтроки));
			Если СтрокиИсполнители.Количество()>0 Тогда
				ТекстИсполнители = "";
				Для Каждого СтрокаИсполнитель Из СтрокиИсполнители Цикл
					ТекстИсполнители = ТекстИсполнители + ?(ТекстИсполнители="","","; ")+ СтрокаИсполнитель.Исполнитель;
				КонецЦикла;
				ТекстЗадача = ТекстЗадача+Символы.ПС+"исполнител"+?(СтрокиИсполнители.Количество()=1,"ь","и")+": "+ТекстИсполнители;
			Иначе
				ТекстЗадача = ТекстЗадача+Символы.ПС+"<исполнитель не указан>";
			КонецЕсли;
			СтрокаДерева["Текст"+ЭлементВидыЗадач.Значение] = ТекстЗадача;
			СтрокаДерева.ТекстАналитика = ?(ЗначениеЗаполнено(СтрокаДерева.УправленческоеПодразделение),СтрокаДерева.УправленческоеПодразделение,?(ЗначениеЗаполнено(СтрокаДерева.Проект),СтрокаДерева.Проект,""));
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекстЗадачи(СтрокаОбъекта,Постфикс="")
	ТекстЗадача = "";
	Если ЗначениеЗаполнено(СтрокаОбъекта["СрокИсполнения"+Постфикс]) И ЗначениеЗаполнено(СтрокаОбъекта["ЕдиницаИзмеренияВремениИсполнения"+Постфикс]) Тогда
		//Фрагмент = НРег(СтрокаОбъекта["ЕдиницаИзмеренияВремениИсполнения"+Постфикс]);
		//Фрагмент = Строка(СтрокаОбъекта["СрокИсполнения"+Постфикс])+" "+Фрагмент;
		ТекстЗадача = ТекстЗадача + ?(ТекстЗадача="","",Символы.ПС) + "срок исполнения: " + фин_ОбщегоНазначенияКлиентСервер.ПредставлениеСрокаИсполнения(СтрокаОбъекта["СрокИсполнения"+Постфикс],СтрокаОбъекта["ЕдиницаИзмеренияВремениИсполнения"+Постфикс]);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаОбъекта["ДнейОтсчета"+Постфикс]) И ЗначениеЗаполнено(СтрокаОбъекта["ЕдиницаИзмеренияВремениОтсчета"+Постфикс]) И ЗначениеЗаполнено(СтрокаОбъекта["ВидОтсчета"+Постфикс]) И ЗначениеЗаполнено(СтрокаОбъекта["ДатаОтсчета"+Постфикс]) Тогда
		Фрагмент = НРег(СтрокаОбъекта["ДатаОтсчета"+Постфикс]);
		Фрагмент = СтрЗаменить(Фрагмент,"начало","начала");
		Фрагмент = СтрЗаменить(Фрагмент,"окончание","окончания");
		Фрагмент = НРег(СтрокаОбъекта["ВидОтсчета"+Постфикс])+" "+Фрагмент;
		//Фрагмент = НРег(СтрокаОбъекта["ЕдиницаИзмеренияВремениОтсчета"+Постфикс])+" "+Фрагмент;
		//Фрагмент = Строка(СтрокаОбъекта["ДнейОтсчета"+Постфикс])+" "+Фрагмент;
		Фрагмент = фин_ОбщегоНазначенияКлиентСервер.ПредставлениеСрокаИсполнения(СтрокаОбъекта["ДнейОтсчета"+Постфикс],СтрокаОбъекта["ЕдиницаИзмеренияВремениОтсчета"+Постфикс])+" "+ Фрагмент;
		Фрагмент = "заканчивается "+?(СтрокаОбъекта["ВидОтсчета"+Постфикс]=ПредопределенноеЗначение("Перечисление.фин_ВидыОтсчетовСроковИсполнения.До"),"за","через")+" "+Фрагмент;
		ТекстЗадача = ТекстЗадача  + ?(ТекстЗадача="","",Символы.ПС) + фрагмент;
	КонецЕсли;

	Возврат ТекстЗадача;
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИдентификаторСтроки(Форма)
	Идентификатор = 1;
	Пока Форма.Объект.ГрафикПроцесса.НайтиСтроки(Новый Структура("ИдентификаторСтроки",Идентификатор)).Количество()>0 Цикл
		Идентификатор = Идентификатор + 1;
	КонецЦикла;
	Возврат Идентификатор;
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораАналитики(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	Если ДополнительныеПараметры.Создание Тогда
		ТекущиеДанные 	= РедактируемыйГрафик.НайтиПоИдентификатору(ДополнительныеПараметры.Идентификатор);
		НайденыСтроки 	= Ложь;
		Если ТекущиеДанные.Проект = РезультатВыбора.Проект И ТекущиеДанные.УправленческоеПодразделение = РезультатВыбора.УправленческоеПодразделение И ТекущиеДанные.ЭтапБюджетногоПроцесса = РезультатВыбора.ЭтапБюджетногоПроцесса Тогда
			НайденыСтроки = Истина;
		Иначе
			Для Каждого ПодчиненнаяСтрока Из ТекущиеДанные.ПолучитьЭлементы() Цикл
				Если ПодчиненнаяСтрока.Проект = РезультатВыбора.Проект И ПодчиненнаяСтрока.УправленческоеПодразделение = РезультатВыбора.УправленческоеПодразделение И ПодчиненнаяСтрока.ЭтапБюджетногоПроцесса = РезультатВыбора.ЭтапБюджетногоПроцесса Тогда
					НайденыСтроки = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если НайденыСтроки Тогда
			ПоказатьПредупреждение(,"Строка графика с указанной аналитикой уже существует!");
		Иначе
			НоваяСтрока 	= ТекущиеДанные.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Бюджет = ТекущиеДанные.Бюджет;
			ЗаполнитьЗначенияСвойств(НоваяСтрока,РезультатВыбора);
			НоваяСтрока.ТекстАналитика = ?(ЗначениеЗаполнено(НоваяСтрока.УправленческоеПодразделение),НоваяСтрока.УправленческоеПодразделение,?(ЗначениеЗаполнено(НоваяСтрока.Проект),НоваяСтрока.Проект,""));
		КонецЕсли;
	Иначе
		ТекущиеДанные 	= РедактируемыйГрафик.НайтиПоИдентификатору(ДополнительныеПараметры.Идентификатор);
		Если ТекущиеДанные.Проект = РезультатВыбора.Проект И ТекущиеДанные.УправленческоеПодразделение = РезультатВыбора.УправленческоеПодразделение И ТекущиеДанные.ЭтапБюджетногоПроцесса = РезультатВыбора.ЭтапБюджетногоПроцесса Тогда
			Возврат; // ничего делать не нужно
		КонецЕсли;
		РодительСтроки = ?(ТекущиеДанные.ПолучитьРодителя()=Неопределено,ТекущиеДанные,ТекущиеДанные.ПолучитьРодителя());
		НайденыСтроки 	= Ложь;
		Если РодительСтроки.Проект = РезультатВыбора.Проект И РодительСтроки.УправленческоеПодразделение = РезультатВыбора.УправленческоеПодразделение И РодительСтроки.ЭтапБюджетногоПроцесса = РезультатВыбора.ЭтапБюджетногоПроцесса Тогда
			НайденыСтроки = Истина;
		Иначе
			Для Каждого ПодчиненнаяСтрока Из РодительСтроки.ПолучитьЭлементы() Цикл
				Если ПодчиненнаяСтрока<>ТекущиеДанные И ПодчиненнаяСтрока.Проект = РезультатВыбора.Проект И ПодчиненнаяСтрока.УправленческоеПодразделение = РезультатВыбора.УправленческоеПодразделение И ПодчиненнаяСтрока.ЭтапБюджетногоПроцесса = РезультатВыбора.ЭтапБюджетногоПроцесса Тогда
					НайденыСтроки = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если НайденыСтроки Тогда
			ПоказатьПредупреждение(,"Строка графика с указанной аналитикой уже существует!");
		Иначе
			СтруктураПоиска = Новый Структура("Организация,СценарийПланирования,Бюджет,УправленческоеПодразделение,Проект,ЭтапБюджетногоПроцесса",Объект.Организация,Объект.Сценарий,ТекущиеДанные.Бюджет,ТекущиеДанные.УправленческоеПодразделение,ТекущиеДанные.Проект,ТекущиеДанные.ЭтапБюджетногоПроцесса);
			СтрокиИзменить = Объект.ГрафикПроцесса.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаИзменить Из СтрокиИзменить Цикл
				ЗаполнитьЗначенияСвойств(СтрокаИзменить,РезультатВыбора);
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(ТекущиеДанные,РезультатВыбора);
			ТекущиеДанные.ТекстАналитика = ?(ЗначениеЗаполнено(ТекущиеДанные.УправленческоеПодразделение),ТекущиеДанные.УправленческоеПодразделение,?(ЗначениеЗаполнено(ТекущиеДанные.Проект),ТекущиеДанные.Проект,""));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРедактированияЗадачиГрафика(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	ИмяКолонки = ДополнительныеПараметры.ИмяКолонки;
	ТекущиеДанные = РедактируемыйГрафик.НайтиПоИдентификатору(ДополнительныеПараметры.Идентификатор);
	Если НЕ РезультатВыбора.Удалить Тогда
		Для Каждого Поле Из ПоляКЗаполнению Цикл
			ТекущиеДанные[Поле.Значение+ИмяКолонки] = РезультатВыбора[Поле.Значение];
		КонецЦикла;
		ТекстЗадача = ПолучитьТекстЗадачи(ТекущиеДанные,ИмяКолонки);
		СтрокиИсполнители = РезультатВыбора.Исполнители;
		Если СтрокиИсполнители.Количество()>0 Тогда
			ТекстИсполнители = "";
			Для Каждого СтрокаИсполнитель Из СтрокиИсполнители Цикл
				ТекстИсполнители = ТекстИсполнители + ?(ТекстИсполнители="","","; ")+ СтрокаИсполнитель;
			КонецЦикла;
			ТекстЗадача = ТекстЗадача+Символы.ПС+"исполнител"+?(СтрокиИсполнители.Количество()=1,"ь","и")+": "+ТекстИсполнители;
		Иначе
			ТекстЗадача = ТекстЗадача+Символы.ПС+"<исполнитель не указан>";
		КонецЕсли;
		ТекущиеДанные["Текст"+ИмяКолонки] = ТекстЗадача;
	Иначе
		ТекущиеДанные["Текст"+ИмяКолонки] = "";
	КонецЕсли;
	// запись в таблицы формы
	СтруктураПоиска = Новый Структура("Организация,СценарийПланирования,Бюджет,УправленческоеПодразделение,Проект,ЭтапБюджетногоПроцесса",Объект.Организация,Объект.Сценарий,ТекущиеДанные.Бюджет,ТекущиеДанные.УправленческоеПодразделение,ТекущиеДанные.Проект,ТекущиеДанные.ЭтапБюджетногоПроцесса);
	ОтборПоВидуЗадачи = ОтборПоВидуЗадачи(ИмяКолонки);
	Для Каждого ЭлементОтбора Из ОтборПоВидуЗадачи Цикл
		СтруктураПоиска.Вставить(ЭлементОтбора.Ключ,ЭлементОтбора.Значение);
	КонецЦикла;
	СтрокиУдалить = Объект.ГрафикПроцесса.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаУдалить Из СтрокиУдалить Цикл
		СтрокиИсполнителиУдалить = Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторСтроки",СтрокаУдалить.ИдентификаторСтроки));
		Для Каждого СтрокаИсполнителиУдалить Из СтрокиИсполнителиУдалить Цикл
			Объект.Исполнители.Удалить(СтрокаИсполнителиУдалить);
		КонецЦикла;
		Объект.ГрафикПроцесса.Удалить(СтрокаУдалить);
	КонецЦикла;
	Если НЕ РезультатВыбора.Удалить Тогда
		СтрокаГрафика = Объект.ГрафикПроцесса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаГрафика,СтруктураПоиска);
		ЗаполнитьЗначенияСвойств(СтрокаГрафика,РезультатВыбора);
		СтрокаГрафика.ИдентификаторСтроки = ПолучитьИдентификаторСтроки(ЭтотОбъект);
		Для Каждого Исполнитель Из РезультатВыбора.Исполнители Цикл
			НоваяСтрока = Объект.Исполнители.Добавить();
			НоваяСтрока.Исполнитель = Исполнитель;
			НоваяСтрока.ИдентификаторСтроки = СтрокаГрафика.ИдентификаторСтроки;
		КонецЦикла;
	КонецЕсли;
	УправлениеСпискамиВыбора(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	НаборЗаписей = РегистрыСведений.фин_КалендарноеПланированиеБюджетногоПроцесса.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регламент.Установить(Объект.БюджетныйРегламент);
	НаборЗаписейАдресация = РегистрыСведений.фин_ИсполнителиЗадачБюджетногоПроцесса.СоздатьНаборЗаписей();
	НаборЗаписейАдресация.Отбор.Регламент.Установить(Объект.БюджетныйРегламент);
	Для Каждого ВидЗадачи Из ПереченьВидовЗадач Цикл
		Если Объект[ВидЗадачи.Значение] Тогда
			СтрокиКЗаписи = Объект.ГрафикПроцесса.НайтиСтроки(ОтборПоВидуЗадачи(ВидЗадачи.Значение));
			Для Каждого СтрокаКЗаписи Из СтрокиКЗаписи Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись,СтрокаКЗаписи);
				НоваяЗапись.Регламент = Объект.БюджетныйРегламент;
				ИсполнителиПоСтроке = Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторСтроки",СтрокаКЗаписи.ИдентификаторСтроки));
				Для Каждого СтрокаИсполнитель Из ИсполнителиПоСтроке Цикл
					НоваяЗапись = НаборЗаписейАдресация.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись,СтрокаКЗаписи);
					НоваяЗапись.Исполнитель = СтрокаИсполнитель.Исполнитель;
					НоваяЗапись.Регламент = Объект.БюджетныйРегламент;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		НачатьТранзакцию();
		НаборЗаписей.Записать();
		НаборЗаписейАдресация.Записать();
		ЗафиксироватьТранзакцию();
		Модифицированность = Ложь;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось выполнить запись:
		|	"+ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция КонтрольПоРегламентуНаСервере()
	
	СтрокиСценарии = Объект.ГрафикПроцесса.Выгрузить(,"Организация,СценарийПланирования");
	СтрокиСценарии.Свернуть("Организация,СценарийПланирования");
	
	ВсеОшибки = "";
	Для Каждого СтрокаСценарий Из СтрокиСценарии Цикл
		СтрокиГрафика = Объект.ГрафикПроцесса.Выгрузить(Новый Структура("Организация,СценарийПланирования",СтрокаСценарий.Организация,СтрокаСценарий.СценарийПланирования));
		Ошибки = фин_ПроцедурыКалендарногоПланирования.ИмеющиесяРасхожденияСРегламентом(Объект.БюджетныйРегламент,СтрокиГрафика,СтрокаСценарий.СценарийПланирования,ЭтотОбъект,,Объект.Бюджеты,Объект.ПредшествующиеБюджеты.Выгрузить());
		Если Ошибки <> "" Тогда
			Ошибки = "Результаты проверки для сценария: " + ?(ЗначениеЗаполнено(СтрокаСценарий.СценарийПланирования),СтрокаСценарий.СценарийПланирования,"<по всем сценариям>") + ?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("БюджетированиеПоОрганизациям"),", организация: "+ ?(ЗначениеЗаполнено(СтрокаСценарий.Организация),СтрокаСценарий.Организация,"<по всем организациям>"),"") + ":
			|	"+Ошибки;
			ВсеОшибки = ВсеОшибки + Символы.ПС+Ошибки;
		КонецЕсли;
	КонецЦикла;
	Возврат ВсеОшибки;
КонецФункции

&НаСервере
Функция НачалоСобытия(СтрокаГрафика,Сценарий) Экспорт
	Возврат фин_ПроцедурыКалендарногоПланирования.НачалоСобытия(СтрокаГрафика,Сценарий,ЭтотОбъект);
КонецФункции

&НаСервере
Функция КонецСобытия(СтрокаГрафика,Сценарий) Экспорт
	Возврат фин_ПроцедурыКалендарногоПланирования.КонецСобытия(СтрокаГрафика,Сценарий,ЭтотОбъект);
КонецФункции

&НаСервере
Процедура ДиаграммаГантаНаСервере()
	ТаблицаДетализация = Новый ТаблицаЗначений;
	ТаблицаДетализация.Колонки.Добавить("ВидДетализации");
	НС = ТаблицаДетализация.Добавить();
	НС.ВидДетализации = Перечисления.фин_ВидыДетализацииДиаграммыГантаБюджетногоПроцесса.Бюджет;
	НС = ТаблицаДетализация.Добавить();
	НС.ВидДетализации = Перечисления.фин_ВидыДетализацииДиаграммыГантаБюджетногоПроцесса.ВидЗадачи;
	
	ТаблицаГрафикПроцесса = Объект.ГрафикПроцесса.Выгрузить();
	ТаблицаГрафикПроцесса.Колонки.Добавить("УровеньДетализации");
	ТаблицаГрафикПроцесса.Колонки.Добавить("ДатаНачала");
	ТаблицаГрафикПроцесса.Колонки.Добавить("ДатаЗавершения");
	ТаблицаГрафикПроцесса.Колонки.СценарийПланирования.Имя = "Сценарий";
	
	ТаблицаГрафикПроцессаСИсполнителями = ТаблицаГрафикПроцесса.СкопироватьКолонки();
	ТаблицаГрафикПроцессаСИсполнителями.Колонки.Добавить("Пользователь");
	
	ТаблицаИсполнители = фин_ПроцедурыКалендарногоПланирования.ТаблицаИсполнителей(Объект.Исполнители.Выгрузить().ВыгрузитьКолонку("Исполнитель"));
	
	Для Каждого СтрокаГрафик Из ТаблицаГрафикПроцесса Цикл
		СтрокаГрафик.УровеньДетализации 	= ?(ЗначениеЗаполнено(СтрокаГрафик.УправленческоеПодразделение),СтрокаГрафик.УправленческоеПодразделение,СтрокаГрафик.Проект);
		СтрокаГрафик.ДатаНачала 	= НачалоДня(ТекущаяДата()) + НачалоСобытия(СтрокаГрафик,Объект.Сценарий)*60;
		СтрокаГрафик.ДатаЗавершения	= НачалоДня(ТекущаяДата()) + КонецСобытия(СтрокаГрафик,Объект.Сценарий)*60-1;
		СтрокаГрафик.Сценарий 		= Объект.Сценарий;
		СтрокаГрафик.Организация	= Объект.Организация;
		
		ИсполнителиПоСтроке = Объект.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторСтроки",СтрокаГрафик.ИдентификаторСтроки));
		Если ИсполнителиПоСтроке.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаГрафикПроцессаСИсполнителями.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаГрафик);
		Иначе
			Для Каждого СтрокаИсполнитель Из ИсполнителиПоСтроке Цикл
				Если ТипЗнч(СтрокаИсполнитель.Исполнитель)=Тип("СправочникСсылка.Пользователи") ИЛИ НЕ ЗначениеЗаполнено(СтрокаИсполнитель.Исполнитель) Тогда
					НоваяСтрока = ТаблицаГрафикПроцессаСИсполнителями.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаГрафик);
					НоваяСтрока.Пользователь = СтрокаИсполнитель.Исполнитель;
				Иначе
					СтрокиСостава = ТаблицаИсполнители.НайтиСтроки(Новый Структура("Исполнитель",СтрокаИсполнитель.Исполнитель));
					Если СтрокиСостава.Количество()=0 Тогда
						НоваяСтрока = ТаблицаГрафикПроцессаСИсполнителями.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаГрафик);
					Иначе
						Для Каждого СтрокаСостава Из СтрокиСостава Цикл
							НоваяСтрока = ТаблицаГрафикПроцессаСИсполнителями.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаГрафик);
							НоваяСтрока.Пользователь = СтрокаСостава.Пользователь;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Если ТаблицаГрафикПроцесса.НайтиСтроки(Новый Структура("УровеньДетализации",фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза("Проект"))).Количество()<>ТаблицаГрафикПроцесса.Количество() Тогда
		НС = ТаблицаДетализация.Добавить();
		НС.ВидДетализации = Перечисления.фин_ВидыДетализацииДиаграммыГантаБюджетногоПроцесса.УровеньДетализации;
	КонецЕсли;
	НС = ТаблицаДетализация.Добавить();
	НС.ВидДетализации = Перечисления.фин_ВидыДетализацииДиаграммыГантаБюджетногоПроцесса.Пользователь;
	
	 Адрес = ПоместитьВоВременноеХранилище(Новый Структура("Детализация,ГрафикПроцесса",ТаблицаДетализация,ТаблицаГрафикПроцессаСИсполнителями),УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораРегламента(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		ЗаполнитьПоРегламенту(РезультатВыбора);	
		Диаграмма.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура АвтозаполнениеНаСервере()
	СтрокиГрафика = Объект.ГрафикПроцесса.НайтиСтроки(Новый Структура("Организация,СценарийПланирования",Объект.Организация,Объект.Сценарий));
	Для Каждого СтрокаГрафика Из СтрокиГрафика Цикл
		Объект.ГрафикПроцесса.Удалить(СтрокаГрафика);	
	КонецЦикла;
	
	СписокЗадач = Новый Массив;
	СписокЗадач.Добавить("СогласованиеБюджета");
	СписокЗадач.Добавить("ФормированиеБюджета");
	СписокЗадач.Добавить("СогласованиеЗаявок");
	СписокЗадач.Добавить("ПодачаЗаявок");
	
	СписокРангов = Объект.Бюджеты.Выгрузить();
	СписокРангов.Свернуть("Ранг");
	СписокРангов.Сортировать("Ранг УБЫВ");
	
	СрокиНачалаРаботыПоБюджетам = Новый Соответствие;
	СрокиНачалаРаботыПоРангам 	= Новый Соответствие;
	
	
	Для Каждого СтрокаРанг Из СписокРангов Цикл
		БюджетыРанга = Объект.Бюджеты.НайтиСтроки(Новый Структура("Ранг",СтрокаРанг.Ранг));
		Для Каждого СтрокаБюджеты Из БюджетыРанга Цикл
			СрокЗавершения = 0;
			МинимумПоРангу = 0;
			СтрокиНаследников = Объект.ПредшествующиеБюджеты.НайтиСтроки(Новый Структура("Предшественник",СтрокаБюджеты.Бюджет));
			НайденыНаследники = Ложь;
			Для Каждого СтрокаНаследников Из СтрокиНаследников Цикл
				Срок = СрокиНачалаРаботыПоБюджетам.Получить(СтрокаНаследников.Бюджет);	
				Если Срок<>Неопределено Тогда
					СрокЗавершения = Мин(СрокЗавершения,Срок);
					НайденыНаследники = Истина;
				КонецЕсли;
			КонецЦикла;
			Если НЕ НайденыНаследники Тогда
				Для Инд = СтрокаРанг.Ранг По СписокРангов[СписокРангов.Количество()-1].Ранг Цикл
					Срок = СрокиНачалаРаботыПоРангам.Получить(СтрокаРанг.Ранг);	
					Если Срок<>Неопределено Тогда
						СрокЗавершения = Мин(СрокЗавершения,Срок);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СтрокиСроков = Объект.СрокиРазработкиБюджетов.НайтиСтроки(Новый Структура("Бюджет",СтрокаБюджеты.Бюджет));
			Если СтрокиСроков.Количество()=0 Тогда
				СрокиПоБюджету = Новый Структура("СогласованиеБюджета,ФормированиеБюджета,СогласованиеЗаявок,ПодачаЗаявок",0,1,0,0);
			Иначе	
				СрокиПоБюджету = СтрокиСроков[0];
			КонецЕсли;
			Для Каждого Задача Из СписокЗадач Цикл
				Если СрокиПоБюджету[Задача]=0 Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока = Объект.ГрафикПроцесса.Добавить();
				НоваяСтрока.Бюджет 					= СтрокаБюджеты.Бюджет;
				НоваяСтрока.Организация 			= Объект.Организация;
				НоваяСтрока.СценарийПланирования 	= Объект.Сценарий;
				НоваяСтрока.Ранг 					= СтрокаРанг.Ранг;
				НоваяСтрока.ВидЗадачи 				= Перечисления.фин_ВидыЗадачПоБюджетам[Задача];
				НоваяСтрока.ДатаОтсчета 			= Перечисления.фин_ГраницыБюджетногоПериода.НачалоБюджетногоПериода;
				НоваяСтрока.ВидОтсчета 				= Перечисления.фин_ВидыОтсчетовСроковИсполнения.До;
				НоваяСтрока.ЕдиницаИзмеренияВремениОтсчета = Перечисления.усд_ЕдиницыИзмеренияВремениИсполненияЗадачСогласования.РабочихДней;
				НоваяСтрока.ДнейОтсчета 			= -(СрокЗавершения-1);
				НоваяСтрока.ЕдиницаИзмеренияВремениИсполнения = Перечисления.усд_ЕдиницыИзмеренияВремениИсполненияЗадачСогласования.РабочихДней;
				НоваяСтрока.СрокИсполнения 			= СрокиПоБюджету[Задача];
				СрокЗавершения 						= СрокЗавершения - СрокиПоБюджету[Задача];
				МинимумПоРангу = Мин(МинимумПоРангу,СрокЗавершения);
				СрокиНачалаРаботыПоБюджетам.Вставить(СтрокаБюджеты.Бюджет,СрокЗавершения);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ВывестиДанныеПриЗаполнении();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДиаграммуНаСервере()
	ТаблицаДетализация = Новый ТаблицаЗначений;
	ТаблицаДетализация.Колонки.Добавить("ВидДетализации");
	НС = ТаблицаДетализация.Добавить();
	НС.ВидДетализации = Перечисления.фин_ВидыДетализацииДиаграммыГантаБюджетногоПроцесса.Бюджет;
	НС = ТаблицаДетализация.Добавить();
	НС.ВидДетализации = Перечисления.фин_ВидыДетализацииДиаграммыГантаБюджетногоПроцесса.ВидЗадачи;
	
	ТаблицаГрафикПроцесса = Объект.ГрафикПроцесса.Выгрузить(Новый Структура("Организация,СценарийПланирования",Объект.Организация,Объект.Сценарий));
	ТаблицаГрафикПроцесса.Колонки.Добавить("УровеньДетализации");
	ТаблицаГрафикПроцесса.Колонки.Добавить("ДатаНачала");
	ТаблицаГрафикПроцесса.Колонки.Добавить("ДатаЗавершения");
	ТаблицаГрафикПроцесса.Колонки.СценарийПланирования.Имя = "Сценарий";
	
	Для Каждого СтрокаГрафик Из ТаблицаГрафикПроцесса Цикл
		СтрокаГрафик.УровеньДетализации 	= ?(ЗначениеЗаполнено(СтрокаГрафик.УправленческоеПодразделение),СтрокаГрафик.УправленческоеПодразделение,СтрокаГрафик.Проект);
		СтрокаГрафик.ДатаНачала 	= НачалоДня(ТекущаяДата()) + НачалоСобытия(СтрокаГрафик,Объект.Сценарий)*60;
		СтрокаГрафик.ДатаЗавершения	= НачалоДня(ТекущаяДата()) + КонецСобытия(СтрокаГрафик,Объект.Сценарий)*60-1;
		СтрокаГрафик.Сценарий 		= Объект.Сценарий;
		СтрокаГрафик.Организация	= Объект.Организация;
	КонецЦикла;
	Если ТаблицаГрафикПроцесса.НайтиСтроки(Новый Структура("УровеньДетализации",фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза("Проект"))).Количество()<>ТаблицаГрафикПроцесса.Количество() Тогда
		НС = ТаблицаДетализация.Добавить();
		НС.ВидДетализации = Перечисления.фин_ВидыДетализацииДиаграммыГантаБюджетногоПроцесса.УровеньДетализации;
	КонецЕсли;
	
	Отчет = Отчеты.фин_ДиаграммаГантаБюджетногоПроцесса.Создать();
	Отчет.БюджетныйРегламент 	= Объект.БюджетныйРегламент;
	Отчет.Организация 			= Объект.Организация;
	Отчет.СценарийПланирования 	= Объект.Сценарий;
	Отчет.ГрафикПроцесса.Загрузить(ТаблицаГрафикПроцесса);
	Отчет.Детализация.Загрузить(ТаблицаДетализация);
	Отчеты.фин_ДиаграммаГантаБюджетногоПроцесса.СформироватьДиаграмму(Отчет,Диаграмма,,Ложь,Ложь,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораОрганизацииИСценарияДляКопирования(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если РезультатВыбора.Организация = Объект.Организация И РезультатВыбора.Сценарий = Объект.Сценарий Тогда
		ПоказатьПредупреждение(,"Копируемые разрезы не могут совпадать с текущими выбранными в обработке!");
		Возврат;
	КонецЕсли;
	СтрокиГрафика = Объект.ГрафикПроцесса.НайтиСтроки(Новый Структура("Организация,СценарийПланирования",Объект.Организация,Объект.Сценарий));
	Для Каждого СтрокаГрафика Из СтрокиГрафика Цикл
		Объект.ГрафикПроцесса.Удалить(СтрокаГрафика);	
	КонецЦикла;
	СтрокиГрафика = Объект.ГрафикПроцесса.НайтиСтроки(Новый Структура("Организация,СценарийПланирования",РезультатВыбора.Организация,РезультатВыбора.Сценарий));
	Для Каждого СтрокаГрафика Из СтрокиГрафика Цикл
		НоваяСтрока = Объект.ГрафикПроцесса.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаГрафика);
		НоваяСтрока.Организация = Объект.Организация;
		НоваяСтрока.СценарийПланирования = Объект.Сценарий;
	КонецЦикла;
	ВывестиДанныеПриЗаполнении();
КонецПроцедуры

&НаКлиенте
Процедура РедактируемыйГрафикЭтапБюджетногоПроцессаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущиеДанные 	= Элементы.РедактируемыйГрафик.ТекущиеДанные;
	РодительСтроки = ?(ТекущиеДанные.ПолучитьРодителя()=Неопределено,ТекущиеДанные,ТекущиеДанные.ПолучитьРодителя());
	НайденыСтроки 	= Ложь;
	Если РодительСтроки<>ТекущиеДанные И РодительСтроки.Проект = ТекущиеДанные.Проект И РодительСтроки.УправленческоеПодразделение = ТекущиеДанные.УправленческоеПодразделение И РодительСтроки.ЭтапБюджетногоПроцесса = ТекущиеДанные.ЭтапБюджетногоПроцесса Тогда
		НайденыСтроки = Истина;
	Иначе
		Для Каждого ПодчиненнаяСтрока Из РодительСтроки.ПолучитьЭлементы() Цикл
			Если ПодчиненнаяСтрока<>ТекущиеДанные И ПодчиненнаяСтрока.Проект = ТекущиеДанные.Проект И ПодчиненнаяСтрока.УправленческоеПодразделение = ТекущиеДанные.УправленческоеПодразделение И ПодчиненнаяСтрока.ЭтапБюджетногоПроцесса = ВыбранноеЗначение Тогда
				НайденыСтроки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если НайденыСтроки Тогда
		ПоказатьПредупреждение(,"Строка графика с указанной аналитикой уже существует!");
		СтандартнаяОбработка = Ложь;
	Иначе
		СтруктураПоиска = Новый Структура("Организация,СценарийПланирования,Бюджет,УправленческоеПодразделение,Проект,ЭтапБюджетногоПроцесса",Объект.Организация,Объект.Сценарий,ТекущиеДанные.Бюджет,ТекущиеДанные.УправленческоеПодразделение,ТекущиеДанные.Проект,ТекущиеДанные.ЭтапБюджетногоПроцесса);
		СтрокиИзменить = Объект.ГрафикПроцесса.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаИзменить Из СтрокиИзменить Цикл
			ЗаполнитьЗначенияСвойств(СтрокаИзменить,ТекущиеДанные);
			СтрокаИзменить.ЭтапБюджетногоПроцесса = ВыбранноеЗначение;
		КонецЦикла;
		ТекущиеДанные.ТекстАналитика = ?(ЗначениеЗаполнено(ТекущиеДанные.УправленческоеПодразделение),ТекущиеДанные.УправленческоеПодразделение,?(ЗначениеЗаполнено(ТекущиеДанные.Проект),ТекущиеДанные.Проект,""));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
