
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТекущийШаг=-1;
	АнимацияШагов(Истина);
	
	ФлагПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);		 
	КонецЕсли;
	Если ИсточникВыбора.ИмяФормы = "Справочник.фин_ПлановаяНоменклатура.Форма.ФормаПодбора" Тогда
		ОбработкаВыбораПодборПлановойНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_РаботаСоСтруктурнымиПодразделениями.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ФлагПриИзменении(Элемент)
	Если не ФлагСтандартПлан тогда
		СтандартПлан=ПредопределенноеЗначение("Документ.узп_ПланЗакупок.ПустаяСсылка");
	КонецЕсли;
	Если ФлагЗаявки Тогда
		Если Элементы.ГруппаЗаявки.Видимость<>ФлагЗаявки Тогда
			ОбновитьСписокЗаявок(Неопределено);
		КонецЕсли;
	Иначе
		Объект.Заявки.Очистить();
	КонецЕсли;
	Элементы.ГруппаОбщиеСклады.Видимость = ФлагОстатки;
	Если Элементы.ОбщиеСклады.Видимость<>ФлагОстаткиОбщие и ФлагОстаткиОбщие тогда
		ЗагрузкаСпискаСкладов();
	КонецЕсли;
	Элементы.ОбщиеСклады.Видимость = ФлагОстаткиОбщие;
	Элементы.КПСписокОбщихСкладов.Видимость = ФлагОстаткиОбщие;
	Элементы.ГруппаСтандартПлан.Видимость = ФлагСтандартПлан;
	Элементы.ГруппаЗаявки.Видимость = ФлагЗаявки;
	Элементы.КПСписокЗаявок.Видимость = ФлагЗаявки;
	Элементы.ОткрытьРегистрСоответствияСкладовИЦФО.Видимость = ФлагОстатки;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникЗаявкиПриИзменении(Элемент)
	Если Объект.ОбластьПланирования=ПредопределенноеЗначение("Перечисление.узп_ОбластиПланированияЗакупок.ПоОрганизации") Тогда
		Объект.Подразделение=ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка");
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	ПриИзмененииСценария();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРегистрСоответствияСкладовИЦФОНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.узп_СоответствиеСкладовИЦФО.ФормаСписка");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "Товары"

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	НоменклатураПриИзмененииНаСервере(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ЦенаКоличествоПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ЦенаКоличествоПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры
 
&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	мКоэффициент = Элементы.Товары.ТекущиеДанные.Коэффициент;
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.Товары.ТекущиеДанные.ПериодПланирования = Объект.ПериодПланирования;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	мКоэффициент = Элементы.Товары.ТекущиеДанные.Коэффициент;
	Элементы.Товары.ТекущиеДанные.Коэффициент = ПолучитьКоэффициентПересчета(Элементы.Товары.ТекущиеДанные.ЕдиницаИзмерения,Элементы.Товары.ТекущиеДанные.Номенклатура);
	Если мКоэффициент<>Элементы.Товары.ТекущиеДанные.Коэффициент И Элементы.Товары.ТекущиеДанные.Цена<>0 Тогда
		Элементы.Товары.ТекущиеДанные.Цена = Элементы.Товары.ТекущиеДанные.Цена / (Элементы.Товары.ТекущиеДанные.Коэффициент/?(мКоэффициент=0,1,мКоэффициент)); 
		ЦенаКоличествоПриИзменении();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоэффициентПриИзменении(Элемент)
	Если мКоэффициент<>Элементы.Товары.ТекущиеДанные.Коэффициент И Элементы.Товары.ТекущиеДанные.Цена<>0 Тогда
		Элементы.Товары.ТекущиеДанные.Цена = Элементы.Товары.ТекущиеДанные.Цена / (Элементы.Товары.ТекущиеДанные.Коэффициент/?(мКоэффициент=0,1,мКоэффициент)); 
		ЦенаКоличествоПриИзменении();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДатаПоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТоварыДатаПоставкиНачалоВыбораНаСервере(ДанныеВыбора)
КонецПроцедуры

&НаСервере
Процедура ТоварыДатаПоставкиНачалоВыбораНаСервере(ДанныеВыбора)
	ДанныеВыбора = СписокПериодов(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура",ВыбранноеЗначение)).Количество()=0 Тогда
		НС = Объект.Товары.Добавить();
		НС.Номенклатура = ВыбранноеЗначение;
		НоменклатураПриИзмененииНаСервере(НС.ПолучитьИдентификатор());
		Элементы.Товары.ТекущаяСтрока = НС.ПолучитьИдентификатор();
		ТоварыПриНачалеРедактирования(Элемент, Истина, Ложь);
		//НС.ЕдиницаИзмерения = ПолучитьСвойство(НС.Номенклатура, "ПлановаяЕдиницаИзмерения");
		НС.Коэффициент = 1;
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущаяНоменклатура = Элементы.Товары.ТекущиеДанные.Номенклатура;
	узп_УправлениеЗакупкамиКлиент.НоменклатураНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, Ложь, ТекущаяНоменклатура);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "Услуги"

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	НоменклатураПриИзмененииНаСервере(Элементы.Услуги.ТекущиеДанные.ПолучитьИдентификатор(),"Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	ЦенаКоличествоПриИзменении("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	ЦенаКоличествоПриИзменении("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.Услуги.ТекущиеДанные.ПериодПланирования = Объект.ПериодПланирования;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.Услуги.НайтиСтроки(Новый Структура("Номенклатура",ВыбранноеЗначение)).Количество()=0 Тогда
		НС = Объект.Услуги.Добавить();
		НС.Номенклатура = ВыбранноеЗначение;
		НоменклатураПриИзмененииНаСервере(НС.ПолучитьИдентификатор(),"Услуги");
		Элементы.Услуги.ТекущаяСтрока = НС.ПолучитьИдентификатор();
		УслугиПриНачалеРедактирования(Элемент, Истина, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущаяНоменклатура = Элементы.Услуги.ТекущиеДанные.Номенклатура;
	узп_УправлениеЗакупкамиКлиент.НоменклатураНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, Истина, ТекущаяНоменклатура);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура НавигацияВперед(Команда)
	Если Элементы.ПанельСтраниц.ТекущаяСтраница = Элементы.Страница1 Тогда //переход вперед из страницы ввода основных параметров плана
		ФлагПриИзменении(Неопределено);
	КонецЕсли;
	Если Элементы.ПанельСтраниц.ТекущаяСтраница = Элементы.Страница2 Тогда //переход вперед из страницы выбора источников
		ЗагрузкаСпецификации();
	КонецЕсли;
	Если Элементы.ПанельСтраниц.ТекущаяСтраница = Элементы.Страница4 Тогда //переход вперед из страницы списка номенклатур
		//Проверка на наличие номенклатурных позиций в ТЧ
		Если Объект.Товары.Количество()=0 и Объект.Услуги.Количество()=0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не введено ни одной номенклатурной позиции";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		//Проверка на флаг "Включать" у номенклатурных позиций
		Если Объект.Товары.НайтиСтроки(Новый Структура("Включать", Истина)).Количество()=0 
			и Объект.Услуги.НайтиСтроки(Новый Структура("Включать", Истина)).Количество()=0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не отмечено ни одной номенклатурной позиции";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		ВывестиСвод();
	КонецЕсли;
	Если Элементы.ПанельСтраниц.ТекущаяСтраница = Элементы.Страница5 Тогда //переход вперед из страницы сводных данных
	КонецЕсли;
	АнимацияШагов(Истина);
	Элементы.ПанельСтраниц.ТекущаяСтраница = Элементы["Страница"+ТекущийШаг];
	
	оф_ЗаголовокСтраницыЗаголовок = Элементы["Страница"+ТекущийШаг].Заголовок;
КонецПроцедуры

&НаКлиенте
Процедура НавигацияНазад(Команда)
	Если Элементы.ПанельСтраниц.ТекущаяСтраница = Элементы.Страница2 и Объект.Заявки.Количество()>0 Тогда
		//Ответ = Вопрос("При переходе на шаг назад, текущая табличная часть будет очищена! Продолжить?",РежимДиалогаВопрос.ДаНет);
		//Если Ответ = КодВозвратаДиалога.Нет Тогда
		//	Возврат;
		//Иначе
		//	Объект.Заявки.Очистить();
		//КонецЕсли;
	КонецЕсли;
	Если Элементы.ПанельСтраниц.ТекущаяСтраница = Элементы.Страница3 и (Объект.Товары.Количество()>0 ИЛИ Объект.Услуги.Количество()>0) Тогда
		Ответ = Вопрос("При переходе на шаг назад, текущая табличная часть ""Спецификация"" будет очищена! Продолжить?",РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			Объект.Товары.Очистить();
			Объект.Услуги.Очистить();
		КонецЕсли;
	КонецЕсли;
	Если Элементы.ПанельСтраниц.ТекущаяСтраница = Элементы.Страница5 и ТоварыСвод.ПолучитьЭлементы().Количество()>0 Тогда
		//Ответ = Вопрос("При переходе на шаг назад, текущая табличная часть будет очищена! Продолжить?",РежимДиалогаВопрос.ДаНет);
		//Если Ответ = КодВозвратаДиалога.Нет Тогда
		//	Возврат;
		//Иначе
		//	ТоварыСвод.ПолучитьЭлементы().Очистить();
		//КонецЕсли;
	КонецЕсли;
	
	АнимацияШагов(Ложь);
	Элементы.ПанельСтраниц.ТекущаяСтраница = Элементы["Страница"+ТекущийШаг];
	//Элементы.ПанельЗаполненияДанных.Заголовок = Элементы["Страница"+ТекущийШаг].Заголовок;
	оф_ЗаголовокСтраницыЗаголовок = Элементы["Страница"+ТекущийШаг].Заголовок;
КонецПроцедуры

&НаКлиенте
Процедура ПериодНазад(Команда)
	ДобавитьПериод(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПериодВперед(Команда)
	ДобавитьПериод(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПериодВыбрать(Команда)
	ВыбратьПериодПланирования(Объект.ПериодПланирования);
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	НачатьПодбор(Элементы.Товары,Ложь,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПодборТоварыПлановая(Команда)
	НачатьПодбор(Элементы.Товары,Истина,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)
	НачатьПодбор(Элементы.Услуги,Ложь,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслугиПлановая(Команда)
	НачатьПодбор(Элементы.Услуги,Истина,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗаявок(Команда)
	Если Объект.Сценарий.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан сценарий!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	ВыполнитьОбновлениеСпискаЗаявок();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпецификациюПоЗаявкам(Команда)
	ОбновитьСпецификацию();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПланЗакупок(Команда)
	ПроверитьТЧ();
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	Если Объект.Товары.Количество()=0 И Объект.Услуги.Количество()=0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не введено ни одной номенклатурной позиции";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	//СоздатьПланЗакупок(План);
	Адрес = ПоместитьТЧВХранилище();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Адрес",Адрес);
	ФормаПлан = ПолучитьФорму("Документ.узп_ПланЗакупок.ФормаОбъекта",ПараметрыФормы);
	//План = ФормаПлан.Объект;
	
	//КопироватьДанныеФормы(Объект, ФормаПлан.Объект);
	ФормаПлан.Открыть();
	Закрыть();
КонецПроцедуры

&НаСервере
Функция ПоместитьТЧВХранилище()
	СтруктураДокумента = Новый Структура;
	Для Каждого Реквизит Из Метаданные.Обработки.узп_ФормированиеПланаЗакупок.Реквизиты Цикл
		Если Реквизит.Имя = "Ссылка" Тогда 
			Продолжить;
		КонецЕсли;
		СтруктураДокумента.Вставить(Реквизит.Имя,Объект[Реквизит.Имя]);
		//ДокументОбъект[Реквизит.Имя] = Объект[Реквизит.Имя];
	КонецЦикла;
	
	ТЧТовары = Объект.Товары.Выгрузить();
	ТЧТовары.Очистить();
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если СтрокаТЧ.Включать = Ложь Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТЧТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
	КонецЦикла;
	ТЧУслуги = Объект.Услуги.Выгрузить();
	ТЧУслуги.Очистить();
	Для Каждого СтрокаТЧ Из Объект.Услуги Цикл
		Если СтрокаТЧ.Включать = Ложь Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТЧУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
	КонецЦикла;
	
	
	СтруктураТЧ = Новый Структура("Товары,Услуги,ПараметрыШапки",ТЧТовары,ТЧУслуги,СтруктураДокумента);
	Адрес = ПоместитьВоВременноеХранилище(СтруктураТЧ,ЭтаФорма.УникальныйИдентификатор);
	Возврат Адрес;
КонецФункции
	
&НаКлиенте
Процедура ПолучитьСводныеДанные(Команда)
	ВывестиСвод();
КонецПроцедуры

&НаКлиенте
Процедура НавигацияОтмена(Команда)
	Ответ = Вопрос("Закрыть мастер формирования плана закупок?",РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиУбратьВсеОтметки(Команда)
	УправлениеОтметками(Объект.Заявки, Ложь,"Включать")
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиОтметитьВсе(Команда)
	УправлениеОтметками(Объект.Заявки, Истина,"Включать");
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОтметитьВсе(Команда)
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТовары тогда
		УправлениеОтметками(Объект.Товары, Истина, "Включать");
	Иначе
		УправлениеОтметками(Объект.Услуги, Истина, "Включать");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураУбратьВсеОтметки(Команда)
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТовары тогда
		УправлениеОтметками(Объект.Товары, Ложь, "Включать");
	Иначе
		УправлениеОтметками(Объект.Услуги, Ложь, "Включать");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпецификациюПоСтандартПлану(Команда)
	ЗагрузкаСпецификации();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждения(Команда)
	ТаблицыИсточники = Новый Массив;
	ТаблицыИсточники.Добавить(Объект.Товары);
	ТаблицыИсточники.Добавить(Объект.Услуги);
	Для каждого таблица из ТаблицыИсточники Цикл
		Для каждого СтрокаТЧ из Таблица Цикл
			ТекстСообщения = "";
			Если СтрокаТЧ.Сумма = 0 Тогда
				ТекстСообщения = "" + ТекстСообщения + "Необходимо обратить внимание. Сумма по данной позиции равна 0 " + Символы.ПС;
				Отбор = Новый Структура;
				Отбор.Вставить("Номенклатура",СтрокаТЧ.Номенклатура);
				Отбор.Вставить("Подразделение",СтрокаТЧ.Подразделение);
				НайденныеСтроки = ОстаткиНоменклатуры.НайтиСтроки(отбор);
				Если НайденныеСтроки.Количество()>0 Тогда
					Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						Если ФлагОстатки тогда
							ТекстСообщения = "" + ТекстСообщения + "Текущий остаток на складе: " + НайденнаяСтрока.КоличествоОстаткаПрогнозное+Символы.ПС+"Количество использованное: "+НайденнаяСтрока.КоличествоОстаткаИспользованное+Символы.ПС;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Товары["+Строка(СтрокаТЧ.НомерСтроки-1)+"].Номенклатура","Объект",Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСкладрв(Команда)
	ЗагрузкаСпискаСкладов();
КонецПроцедуры

&НаКлиенте
Процедура СкладыОтметитьВсе(Команда)
	УправлениеОтметками(ОбщиеСклады, Истина, "Общий");
КонецПроцедуры

&НаКлиенте
Процедура СкладыУбратьВсеОтметки(Команда)
	УправлениеОтметками(ОбщиеСклады, Ложь, "Общий");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
		
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		//
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
	
	ВалютаДокумента = ?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПланированиеЗакупокВВалютеРеглУчета"),фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"),фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета"));
	ЗаполнитьШапку(Объект);
	Объект.Сценарий = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ОсновнойСценарийПланированияЗакупок");
    Объект.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекущаяДата(),Объект.Сценарий);
	Объект.ОбластьПланирования=Перечисления.узп_ОбластиПланированияЗакупок.ПоОрганизации;
	Объект.состояние = Перечисления.СостоянияОбъектов.Подготовлен;
	ТипЦен = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТипПлановыхЦенЗаявокМТС");
	ТипНоменклатуры = дог_УправлениеДоговорами.ПолучитьТипВводаНоменклатуры();
	Элементы.ТоварыНоменклатура.ОграничениеТипа = ТипНоменклатуры;
	Элементы.УслугиНоменклатура.ОграничениеТипа = ТипНоменклатуры;
	Объект.Дата = ТекущаяДата();	
	мПериод = Объект.ПериодПланирования;
	УстановитьТекстПериода();
	//УстановитьВидимостьНаСервере();	
	Если НЕ ТипНоменклатуры.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
		Элементы.УслугиПодборУслуги.Видимость = Ложь;
		Элементы.ТоварыПодборТовары.Видимость = Ложь;
	КонецЕсли;
	Если НЕ ТипНоменклатуры.СодержитТип(Тип("СправочникСсылка.фин_ПлановаяНоменклатура")) Тогда
		Элементы.УслугиПодборУслугиПлановая.Видимость = Ложь;
		Элементы.ТоварыПодборТоварыПлановая.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьЗаголовки();
	
	НастроитьУсловноеОформление();
	
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	мВалютаРегламентированногоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.Подразделение.Видимость = (Объект.ОбластьПланирования=ПредопределенноеЗначение("Перечисление.узп_ОбластиПланированияЗакупок.ПоПодразделению"));
	Элементы.ТоварыПодразделение.Видимость = НЕ (Объект.ОбластьПланирования=ПредопределенноеЗначение("Перечисление.узп_ОбластиПланированияЗакупок.ПоПодразделению"));
	Элементы.УслугиПодразделение.Видимость = НЕ (Объект.ОбластьПланирования=ПредопределенноеЗначение("Перечисление.узп_ОбластиПланированияЗакупок.ПоПодразделению"));
	ПродолжительностьЦикла = ПолучитьПродолжительностьЦикла(Объект.Сценарий);
	Элементы.ТоварыДатаПоставки.Видимость = (ПродолжительностьЦикла>1);
	Элементы.УслугиДатаПоставки.Видимость = (ПродолжительностьЦикла>1);
    мФормат = ПолучитьФормат(Объект.Сценарий);
	Элементы.ТоварыДатаПоставки.Формат = мФормат;
	Элементы.ТоварыДатаПоставки.ФорматРедактирования = мФормат;
	Элементы.УслугиДатаПоставки.Формат = мФормат;
	Элементы.УслугиДатаПоставки.ФорматРедактирования = мФормат;
	Элементы.ТоварыСводПериодПланирования.Формат = мФормат;
	Элементы.ТоварыСводПериодПланирования.ФорматРедактирования = мФормат;
	Элементы.ПодразделенияСводПериодПланирования.Формат = мФормат;
	Элементы.ПодразделенияСводПериодПланирования.ФорматРедактирования = мФормат;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Исполнители",                   "Исполнители");
	СписокТабличныхЧастей.Добавить("Выработка",                     "Выработка");
	СписокТабличныхЧастей.Добавить("СоставРабот",                	"СоставРабот");
	
	АктивизироватьТабличнуюЧасть = фин_ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюВидимуюТабличнуюЧасть(ЭтаФорма, СписокТабличныхЧастей);
	фин_ОбщегоНазначенияСервер.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаСервере
Процедура УстановитьЗаголовки()
	НадписьИсточникЗаявки = "Область планирования";
	НадписьПараметрыПланирования = "Параметры планирования";
	НадписьСуммаДокумента = "Сумма документа";
	оф_СписокЗаявокЗаголовок = "Заявки";
	оф_СтандартПланЗаголовок = "Стандарт-План";
КонецПроцедуры

&НаКлиенте
Процедура ОтрисовкаЭлементов()
	
КонецПроцедуры

&НаСервере
Процедура НастроитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();
	СписокДоступныхПериодов = СписокПериодов(ЭтаФорма);
	Для Каждого ДоступныйПериод Из СписокДоступныхПериодов Цикл
		// товары
		НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование=Истина;
		ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение = ДоступныйПериод.Значение;
		ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ПериодПланирования");
		ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование=Истина;
		ПолеОформления.Поле=Новый ПолеКомпоновкиДанных("ТоварыДатаПоставки");
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",ДоступныйПериод.Представление);
		// услуги
		НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование=Истина;
		ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение = ДоступныйПериод.Значение;
		ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Услуги.ПериодПланирования");
		ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование=Истина;
		ПолеОформления.Поле=Новый ПолеКомпоновкиДанных("УслугиДатаПоставки");
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",ДоступныйПериод.Представление);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПродолжительностьЦикла(Сценарий)
	Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Сценарий);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФормат(Сценарий)
	Возврат фин_ПроцедурыМеханизмовБюджетирования.ПолучитьФормат(Сценарий)
КонецФункции

&НаСервере
Процедура УстановитьТекстПериода()
	ГоризонтПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(Объект.ПериодПланирования,Объект.Сценарий);
	НадписьПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(Объект.ПериодПланирования,Объект.Сценарий);
	ТекстГоризонт = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(ГоризонтПланирования,Объект.Сценарий);
	Если ТекстГоризонт<>НадписьПериодПланирования Тогда
		НадписьПериодПланирования = НадписьПериодПланирования+" - "+ТекстГоризонт;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РассчетОбщейСуммыТоварногоДоговора()
	СуммаДокумента = 0;
	СтрокиТовары = Объект.Товары.НайтиСтроки(Новый Структура("Включать",Истина));
	ТоварыВключеноПозиций = СтрокиТовары.Количество();
	ТоварыКоличество = 0;
	ТоварыСумма = 0;
	Для Каждого СтрокаТовар Из СтрокиТовары Цикл
		СуммаДокумента = СуммаДокумента + СтрокаТовар.Сумма;
		ТоварыКоличество = ТоварыКоличество+ СтрокаТовар.Количество;
		ТоварыСумма = ТоварыСумма+ СтрокаТовар.Сумма;
	КонецЦикла;
	СтрокиТовары = Объект.Услуги.НайтиСтроки(Новый Структура("Включать",Истина));
	УслугиВключеноПозиций = СтрокиТовары.Количество();
	УслугиКоличество = 0;
	УслугиСумма = 0;
	Для Каждого СтрокаТовар Из СтрокиТовары Цикл
		СуммаДокумента = СуммаДокумента + СтрокаТовар.Сумма;
		УслугиКоличество = УслугиКоличество + СтрокаТовар.Количество;
		УслугиСумма = УслугиСумма + СтрокаТовар.Сумма;
	КонецЦикла;
	Объект.СуммаДокумента = СуммаДокумента;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентПересчета(ЕдиницаИзмерения,Номенклатура)
   	Возврат дог_УправлениеДоговорами.КоэффициентПересчетаВБазовую(ЕдиницаИзмерения,Номенклатура);
КонецФункции	

&НаСервереБезКонтекста
Функция СписокПериодов(Форма)
	//Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СписокПериодовВШаге(Объект.ПериодПланирования,Объект.Сценарий);
	Объект = Форма.Объект;
	Список = Новый СписокЗначений;
	Список.Добавить(Объект.ПериодПланирования,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(Объект.ПериодПланирования,Объект.Сценарий));
	СледующийПериод = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Объект.ПериодПланирования,Объект.Сценарий,1);
	Пока СледующийПериод<=Форма.ГоризонтПланирования Цикл
		Список.Добавить(СледующийПериод,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(СледующийПериод,Объект.Сценарий));
		СледующийПериод = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(СледующийПериод,Объект.Сценарий,1);
	КонецЦикла;
	Возврат Список;
КонецФункции

&НаСервере
Процедура ПриИзмененииСценария()
   	Объект.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ПериодПланирования,Объект.Сценарий);
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить("Товары");
	МассивТЧ.Добавить("Услуги");
	Для Каждого ТЧ ИЗ МассивТЧ Цикл
		Для Каждого СтрокаТЧ Из Объект[ТЧ] Цикл
			СтрокаТЧ.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаТЧ.ПериодПланирования,Объект.Сценарий);
		КонецЦикла;
	КонецЦикла;
	УстановитьТекстПериода();
	Для Каждого ТЧ ИЗ МассивТЧ Цикл
		Для Каждого СтрокаТЧ Из Объект[ТЧ] Цикл
			СтрокаТЧ.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаТЧ.ПериодПланирования,Объект.Сценарий);
			Если СтрокаТЧ.ПериодПланирования<Объект.ПериодПланирования Тогда
				СтрокаТЧ.ПериодПланирования = Объект.ПериодПланирования;
			ИначеЕсли СтрокаТЧ.ПериодПланирования>ГоризонтПланирования Тогда
				СтрокаТЧ.ПериодПланирования = ГоризонтПланирования;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ДобавитьПериод(Добавить)
	Объект.ПериодПланирования=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СледующийПериодПланирования(Объект.ПериодПланирования,Объект.Сценарий,Добавить);
	УстановитьТекстПериода();
	ПриИзмененииПериода();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодПланирования(Период)
	СписокПериодов = ПолучитьСписокПериодов(Период,Объект.Сценарий);
	Если СписокПериодов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	Оп = Новый ОписаниеОповещения("ОбработатьВыборПериодаПланирования", ЭтотОбъект, );
	ПоказатьВыборИзСписка(Оп, СписокПериодов, Элементы.ПериодВыбрать);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПериодаПланирования(Результат, Параметры) Экспорт
	
	Если Результат<>Неопределено Тогда
		Если ТипЗнч(Результат.Значение) = Тип("Число") Тогда
			ВыбратьПериодПланирования(Дата(Результат.Значение,1,1));
		Иначе
			Объект.ПериодПланирования = Результат.Значение;
			УстановитьТекстПериода();
			ПриИзмененииПериода();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокПериодов(ПериодПланирования,Сценарий)
	Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодыДляВыбора(ПериодПланирования,Сценарий);	
КонецФункции

&НаСервере
Процедура ПриИзмененииПериода()
	Если мПериод<>Объект.ПериодПланирования Тогда
		ПериодПланирования = Объект.ПериодПланирования;
		МассивТЧ = Новый Массив;
		МассивТЧ.Добавить("Товары");
		МассивТЧ.Добавить("Услуги");
		Для Каждого ТЧ Из МассивТЧ Цикл
			фин_ПроцедурыМеханизмовБюджетирования.ПереносПериодовПланированияВТабличнойЧасти(Объект[ТЧ],Объект.Сценарий,ПериодПланирования,мПериод,ГоризонтПланирования);
		КонецЦикла;
		мПериод = Объект.ПериодПланирования;
		НастроитьУсловноеОформление();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодбор(Элемент,ПлановаяНоменклатура,Услуги)

	Если Не ПлановаяНоменклатура Тогда
		узп_УправлениеЗакупкамиКлиент.ПодборНоменклатуры(ЭтаФорма,УникальныйИдентификатор,?(Услуги,"Услуги","Товары"));
	Иначе
		//узп_УправлениеЗакупкамиКлиент.НачалоПодбораНоменклатуры(Элемент,ПлановаяНоменклатура,Услуги,УникальныйИдентификатор);
		узп_УправлениеЗакупкамиКлиент.НачалоПодбораНоменклатуры(Элемент,ПлановаяНоменклатура,Услуги,УникальныйИдентификатор,Истина,ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбновлениеСпискаЗаявок()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаМТС.Ссылка КАК Заявка,
		|	ИСТИНА КАК Включать
		|ИЗ
		|	Документ.узп_ЗаявкаМТС КАК ЗаявкаМТС
		|ГДЕ
		|	ЗаявкаМТС.Организация = &Организация
		|	И ЗаявкаМТС.СтруктурноеПодразделение = &СтруктурноеПодразделение
		|	И ЗаявкаМТС.Сценарий = &Сценарий
		|	И ЗаявкаМТС.ПериодПланирования = &ПериодПланирования"+?(Объект.ОбластьПланирования=Перечисления.узп_ОбластиПланированияЗакупок.ПоОрганизации,"","
		|	И ЗаявкаМТС.Подразделение = &Подразделение");
	Запрос.УстановитьПараметр("Организация", 				Объект.Организация);
	Запрос.УстановитьПараметр("ПериодПланирования", 		Объект.ПериодПланирования);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", 	Объект.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("Сценарий", 					Объект.Сценарий);
 	Запрос.УстановитьПараметр("Подразделение", 				Объект.Подразделение);
	Результат = Запрос.Выполнить();
    Объект.Заявки.Очистить();
	Объект.Заявки.Загрузить(Результат.Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпецификацию()
	ПризнакПроекта = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ВестиУчетЗакупокПоПроектам");
	Если ПризнакПроекта тогда
		Проект = ",	ЗаявкаМТСТовары.Проект";
	Иначе
		Проект = "";
	КонецЕсли;
	СУчетомЗаявок = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("УказыватьДляПозицийПланаЗакупокЗаявкиОснования");
	Ссылки = новый Массив;
	СтрокиСсылок = Объект.Заявки.НайтиСтроки(Новый Структура("Включать",Истина));
	Для Каждого СтрокаСсылок Из СтрокиСсылок Цикл
		Ссылки.Добавить(СтрокаСсылок.Заявка);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ"+?(СУчетомЗаявок,"
		|	ЗаявкаМТСТовары.Ссылка КАК Заявка,","")+"
		|	ИСТИНА КАК Включать,
		|	ЗаявкаМТСТовары.ЕдиницаИзмерения,
		|	СУММА(ЗаявкаМТСТовары.Количество) КАК Количество,
		|	ЗаявкаМТСТовары.Коэффициент,
		|	ЗаявкаМТСТовары.Номенклатура,
		|	ЗаявкаМТСТовары.Ссылка.ОбъектРемонта КАК ОбъектРемонта,
		|	ЗаявкаМТСТовары.ПериодПланирования,
		|	ЗаявкаМТСТовары.Подразделение,
		|	ЗаявкаМТСТовары.Приоритет,
		|	СУММА(ЗаявкаМТСТовары.Сумма) КАК Сумма,
		|	ЗаявкаМТСТовары.Характеристика,
		|	ЗаявкаМТСТовары.Цена,
		|	ЗаявкаМТСТовары.Номенклатура.ОсновнойПоставщик КАК Поставщик"+Проект+"
		|ИЗ
		|	Документ.узп_ЗаявкаМТС.Товары КАК ЗаявкаМТСТовары
		|ГДЕ
		|	ЗаявкаМТСТовары.Ссылка В(&Ссылки)
		|
		|СГРУППИРОВАТЬ ПО"+?(СУчетомЗаявок,"
		|	ЗаявкаМТСТовары.Ссылка,","")+"
		|	ИСТИНА,
		|	ЗаявкаМТСТовары.Номенклатура,
		|	ЗаявкаМТСТовары.Характеристика,
		|	ЗаявкаМТСТовары.ЕдиницаИзмерения,
		|	ЗаявкаМТСТовары.Ссылка.ОбъектРемонта,
		|	ЗаявкаМТСТовары.Приоритет,
		|	ЗаявкаМТСТовары.Подразделение,
		|	ЗаявкаМТСТовары.ПериодПланирования,
		|	ЗаявкаМТСТовары.Цена,
		|	ЗаявкаМТСТовары.Коэффициент"+Проект+"
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаявкаМТСТовары.Номенклатура.Наименование,
		|	ЗаявкаМТСТовары.ПериодПланирования,
		|	ЗаявкаМТСТовары.Подразделение.Наименование
		|;
		|ВЫБРАТЬ"+?(СУчетомЗаявок,"
		|	ЗаявкаМТСТовары.Ссылка КАК Заявка,","")+"
		|	ИСТИНА КАК Включать,
		|	СУММА(ЗаявкаМТСТовары.Количество) КАК Количество,
		|	ЗаявкаМТСТовары.Номенклатура,
		|	ЗаявкаМТСТовары.Ссылка.ОбъектРемонта КАК ОбъектРемонта,
		|	ЗаявкаМТСТовары.ПериодПланирования,
		|	ЗаявкаМТСТовары.Подразделение,
		|	ЗаявкаМТСТовары.Приоритет,
		|	СУММА(ЗаявкаМТСТовары.Сумма) КАК Сумма,
		|	ЗаявкаМТСТовары.Характеристика,
		|	ЗаявкаМТСТовары.Цена,
		|	ЗаявкаМТСТовары.Номенклатура.ОсновнойПоставщик КАК Поставщик"+Проект+"
		|ИЗ
		|	Документ.узп_ЗаявкаМТС.Услуги КАК ЗаявкаМТСТовары
		|ГДЕ
		|	ЗаявкаМТСТовары.Ссылка В(&Ссылки)
		|
		|СГРУППИРОВАТЬ ПО"+?(СУчетомЗаявок,"
		|	ЗаявкаМТСТовары.Ссылка,","")+"
		|	ИСТИНА,
		|	ЗаявкаМТСТовары.Номенклатура,
		|	ЗаявкаМТСТовары.Характеристика,
		|	ЗаявкаМТСТовары.Ссылка.ОбъектРемонта,
		|	ЗаявкаМТСТовары.Приоритет,
		|	ЗаявкаМТСТовары.Подразделение,
		|	ЗаявкаМТСТовары.ПериодПланирования,
		|	ЗаявкаМТСТовары.Цена"+Проект+"
		|УПОРЯДОЧИТЬ ПО
		|	ЗаявкаМТСТовары.Номенклатура.Наименование,
		|	ЗаявкаМТСТовары.ПериодПланирования,
		|	ЗаявкаМТСТовары.Подразделение.Наименование";

	Запрос.УстановитьПараметр("Ссылки", Ссылки);

	Результат = Запрос.ВыполнитьПакет();
    Объект.Товары.Загрузить(Результат[0].Выгрузить());
    Объект.Услуги.Загрузить(Результат[1].Выгрузить());
 	РассчетОбщейСуммыТоварногоДоговора();	

КонецПроцедуры

&НаСервере
Процедура ПроверитьТЧ()
	ТаблицыИсточники =Новый Массив;															//массив для перебора ТЧ
	ТаблицыИсточники.Добавить(Объект.Товары);                                               //добавление в перебор таблицы Товары
	ТаблицыИсточники.Добавить(Объект.Услуги);                                               //добавление в перебор таблицы Услуги
	Для каждого таблица из ТаблицыИсточники Цикл                                            //перебор всех ТЧ формы
		к=0;
		Пока к<Таблица.Количество() Цикл
			СтрокаТЧ = Таблица[к];
			к=к+1;
			Если СтрокаТЧ.Количество = 0 тогда
				ИндексСтроки = Таблица.Индекс(СтрокаТЧ);
				Таблица.Удалить(ИндексСтроки);												//удаление строк с нулевым количеством номенклатуры
				к=к-1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СоздатьПланЗакупок(План)
	ДокументОбъект = ДанныеФормыВЗначение(План,Тип("ДокументОбъект.узп_ПланЗакупок"));
	ДокументОбъект.Дата = ТекущаяДата();
	Для Каждого Реквизит Из Метаданные.Обработки.узп_ФормированиеПланаЗакупок.Реквизиты Цикл
		Если Реквизит.Имя = "Ссылка" Тогда 
			Продолжить;
		КонецЕсли;
		ДокументОбъект[Реквизит.Имя] = Объект[Реквизит.Имя];
	КонецЦикла;
	//СтрокиТовар = Объект.Товары.НайтиСтроки(Новый Структура("Включать",Истина));
	//Для Каждого СтрокаТовар Из СтрокиТовар Цикл
	//	НоваяСтрока = ДокументОбъект.Товары.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТовар);
	//КонецЦикла;
	//СтрокиТовар = Объект.Услуги.НайтиСтроки(Новый Структура("Включать",Истина));
	//Для Каждого СтрокаТовар Из СтрокиТовар Цикл
	//	НоваяСтрока = ДокументОбъект.Услуги.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТовар);
	//КонецЦикла;
	ЗначениеВДанныеФормы(ДокументОбъект,План);
КонецПроцедуры

&НаСервере
Процедура ВывестиСвод()
	ДеревоНоменклатура = ДанныеФормыВЗначение(ТоварыСвод,Тип("ДеревоЗначений"));
	ДеревоНоменклатура.Строки.Очистить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Услуги",Объект.Услуги.Выгрузить());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.ПериодПланирования,
		|	Товары.ЕдиницаИзмерения,
		|	Товары.Количество,
		|	Товары.Цена,
		|	Товары.Сумма,
		|	Товары.Характеристика,
		|	Товары.Коэффициент,
		|	ИСТИНА КАК Включать,
		|	Товары.Количество * Товары.Коэффициент КАК КоличествоБазовое
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК Товары
		|ГДЕ
		|	Товары.Включать = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Услуги.Номенклатура,
		|	Услуги.ПериодПланирования,
		|	Услуги.Количество,
		|	Услуги.Цена,
		|	Услуги.Сумма,
		|	Услуги.Характеристика,
		|	ИСТИНА КАК Поле3,
		|	Услуги.Количество КАК Количество1
		|ПОМЕСТИТЬ ВТ_Услуги
		|ИЗ
		|	&Услуги КАК Услуги
		|ГДЕ
		|	Услуги.Включать = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.Номенклатура,
		|	ВТ_Товары.ПериодПланирования,
		|	ВТ_Товары.ЕдиницаИзмерения,
		|	ВТ_Товары.Количество,
		|	ВТ_Товары.Цена,
		|	ВТ_Товары.Сумма,
		|	ВТ_Товары.Характеристика,
		|	ВТ_Товары.Коэффициент,
		|	ВТ_Товары.Включать,
		|	ВТ_Товары.КоличествоБазовое
		|ПОМЕСТИТЬ ВТ_База
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Услуги.Номенклатура,
		|	ВТ_Услуги.ПериодПланирования,
		|	NULL,
		|	ВТ_Услуги.Количество,
		|	ВТ_Услуги.Цена,
		|	ВТ_Услуги.Сумма,
		|	ВТ_Услуги.Характеристика,
		|	NULL,
		|	ВТ_Услуги.Поле3,
		|	ВТ_Услуги.Количество1
		|ИЗ
		|	ВТ_Услуги КАК ВТ_Услуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_База.Номенклатура КАК Номенклатура,
		|	ВТ_База.ПериодПланирования КАК ПериодПланирования,
		|	ВТ_База.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВТ_База.Количество КАК Количество,
		|	ВТ_База.Цена,
		|	ВТ_База.Сумма КАК Сумма,
		|	ВТ_База.Характеристика КАК Характеристика,
		|	ВТ_База.Коэффициент,
		|	ВТ_База.Включать,
		|	ВТ_База.КоличествоБазовое КАК КоличествоБазовое,
		|	ВЫБОР
		|		КОГДА ВТ_База.Номенклатура ССЫЛКА Справочник.фин_ПлановаяНоменклатура
		|			ТОГДА ВТ_База.Номенклатура.ТипПозицииВПланеЗакупок
		|		КОГДА ВТ_База.Номенклатура.Услуга
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.узп_ТипыПозицийПлановойНоменклатурыВПланеЗакупок.Услуга)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.узп_ТипыПозицийПлановойНоменклатурыВПланеЗакупок.Товар)
		|	КОНЕЦ КАК ТипПозиции
		|ИЗ
		|	ВТ_База КАК ВТ_База
		|ИТОГИ
		|	СУММА(Количество),
		|	СУММА(Сумма),
		|	СУММА(КоличествоБазовое)
		|ПО ТипПозиции,
		|	Номенклатура,
		|	ПериодПланирования";

	Результат = Запрос.Выполнить();

	ВыборкаТипПозиции = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаТипПозиции.Следующий() Цикл
		СтрокаТип = ДеревоНоменклатура.Строки.Добавить();
		СтрокаТип.ТипПозиции 	= ВыборкаТипПозиции.ТипПозиции;
		СтрокаТип.Сумма 		= ВыборкаТипПозиции.Сумма;
		СтрокаТип.Количество 	= ВыборкаТипПозиции.КоличествоБазовое;

		ВыборкаНоменклатура = ВыборкаТипПозиции.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаНоменклатура.Следующий() Цикл
			СтрокаНоменклатура = СтрокаТип.Строки.Добавить();
			СтрокаНоменклатура.Номенклатура 	= ВыборкаНоменклатура.Номенклатура;
			СтрокаНоменклатура.Сумма 			= ВыборкаНоменклатура.Сумма;
			СтрокаНоменклатура.Количество 		= ВыборкаНоменклатура.КоличествоБазовое;
            СтрокаНоменклатура.КартинкаНоменклатура = Истина;
			
			ВыборкаПериодПланирования = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаПериодПланирования.Следующий() Цикл
				СтрокаПериод = СтрокаНоменклатура.Строки.Добавить();
				СтрокаПериод.ПериодПланирования 	= ВыборкаПериодПланирования.ПериодПланирования;
				СтрокаПериод.Сумма 			= ВыборкаПериодПланирования.Сумма;
				СтрокаПериод.Количество 	= ВыборкаПериодПланирования.КоличествоБазовое;
             	СтрокаПериод.КартинкаПериод = Истина;

				ВыборкаХарактеристика = ВыборкаПериодПланирования.Выбрать();

				Пока ВыборкаХарактеристика.Следующий() Цикл
					СтрокаХарактеристика = СтрокаПериод.Строки.Добавить();
					СтрокаХарактеристика.Характеристика 	= ВыборкаХарактеристика.Характеристика;
					СтрокаХарактеристика.ЕдиницаИзмерения 	= ВыборкаХарактеристика.ЕдиницаИзмерения;
					СтрокаХарактеристика.Сумма 				= ВыборкаХарактеристика.Сумма;
					СтрокаХарактеристика.Количество 		= ВыборкаХарактеристика.Количество;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
    ЗначениеВДанныеФормы(ДеревоНоменклатура,ТоварыСвод);

	ДеревоПодразделения = ДанныеФормыВЗначение(ПодразделенияСвод,Тип("ДеревоЗначений"));
	ДеревоПодразделения.Строки.Очистить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Услуги",Объект.Услуги.Выгрузить());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.ПериодПланирования,
		|	Товары.Сумма,
		|	Товары.Подразделение
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК Товары
		|ГДЕ
		|	Товары.Включать = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Услуги.ПериодПланирования,
		|	Услуги.Сумма,
		|	Услуги.Подразделение
		|ПОМЕСТИТЬ ВТ_Услуги
		|ИЗ
		|	&Услуги КАК Услуги
		|ГДЕ
		|	Услуги.Включать = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.ПериодПланирования,
		|	ВТ_Товары.Сумма,
		|	ВТ_Товары.Подразделение
		|ПОМЕСТИТЬ ВТ_База
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Услуги.ПериодПланирования,
		|	ВТ_Услуги.Сумма,
		|	ВТ_Услуги.Подразделение
		|ИЗ
		|	ВТ_Услуги КАК ВТ_Услуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_База.ПериодПланирования КАК ПериодПланирования,
		|	ВТ_База.Сумма КАК Сумма,
		|	ВТ_База.Подразделение КАК Подразделение
		|ИЗ
		|	ВТ_База КАК ВТ_База
		|ИТОГИ
		|	СУММА(Сумма)
		|ПО 
		|	Подразделение,
		|	ПериодПланирования";

	Результат = Запрос.Выполнить();

	ВыборкаТипПозиции = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаТипПозиции.Следующий() Цикл
		СтрокаТип = ДеревоПодразделения.Строки.Добавить();
		СтрокаТип.Подразделение 	= ВыборкаТипПозиции.Подразделение;
		СтрокаТип.Сумма 			= ВыборкаТипПозиции.Сумма;

		ВыборкаНоменклатура = ВыборкаТипПозиции.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаНоменклатура.Следующий() Цикл
			СтрокаНоменклатура = СтрокаТип.Строки.Добавить();
			СтрокаНоменклатура.Сумма 			= ВыборкаНоменклатура.Сумма;
			СтрокаНоменклатура.ПериодПланирования 		= ВыборкаНоменклатура.ПериодПланирования;
			
		КонецЦикла;
	КонецЦикла;
    ЗначениеВДанныеФормы(ДеревоПодразделения,ПодразделенияСвод);

	
КонецПроцедуры

&НаКлиенте
Процедура АнимацияШагов(Вперед)
	КартинкаПустая = БиблиотекаКартинок.ПустаяКартинка1х25;
	КартинкаЭтапПройден = БиблиотекаКартинок.ОперацияВыполненаУспешно;
	КартинкаТекущийЭтап = БиблиотекаКартинок.СформироватьОтчет;
	Если Вперед Тогда
		Если ТекущийШаг<6 Тогда
			ТекущийШаг = ?(не ФлагОстатки и ТекущийШаг = 2, ТекущийШаг + 2, ТекущийШаг + 1);
		КонецЕсли;
	Иначе
		Если ТекущийШаг>0 Тогда
			ТекущийШаг = ?(не ФлагОстатки и ТекущийШаг = 4, ТекущийШаг - 2, ТекущийШаг - 1);
		КонецЕсли;
	КонецЕсли;
	к=0;
	Пока к<=6 Цикл
		Элементы["Декорация"+Строка(к)].Шрифт = Новый Шрифт(,11,,,Ложь,);
		Элементы["Декорация"+Строка(к)].ЦветТекста = Новый Цвет(192,192,192);
		Элементы["Картинка"+Строка(к)].Картинка = КартинкаПустая;
		к=к+1;
	КонецЦикла;
	к=0;
	Пока к<ТекущийШаг Цикл
		Элементы["Картинка"+Строка(к)].Картинка = КартинкаЭтапПройден;
		к=к+1;
	КонецЦикла;	
	Элементы["Декорация"+Строка(ТекущийШаг)].Шрифт = Новый Шрифт(,11,Истина,,Ложь,);
	Элементы["Декорация"+Строка(ТекущийШаг)].ЦветТекста = Новый Цвет(0,0,0);
	Элементы["Картинка"+Строка(ТекущийШаг)].Картинка = КартинкаТекущийЭтап;
	Если ТекущийШаг = 6 Тогда
		Элементы.НавигацияВперед.Видимость = Ложь;
		Элементы.НавигацияНазад.Доступность = Истина;
		Элементы.СформироватьПланЗакупок.Видимость = Истина;
		ФормированиеСводной();
		//Этаформа.ОбновитьОтображениеДанных();
	ИначеЕсли ТекущийШаг = 0 Тогда
		Элементы.НавигацияНазад.Доступность = Ложь;
	Иначе
		Элементы.НавигацияВперед.Видимость = Истина;
		Элементы.НавигацияНазад.Доступность = Истина;
		Элементы.СформироватьПланЗакупок.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеСводной()
	УчетОбъектовРемонта = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ВестиУчетПлановыхЗатратНаРемонт");
	УчетПроектов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ВестиУчетЗакупокПоПроектам");
	ТекстСводной = "<html><body bgcolor = ""FCFAEB"">";
	ТекстСводной = ТекстСводной + "<head><meta charset=""utf-8""><title>font-size</title>
	|<style>
  	|* {font-size: 12px}
  	|#ourtable {border-collapse: collapse; background: #ffffff}
  	|#ourtable, #ourtable td {border: 1px solid #B0C4DE}
  	|#ourtable td {padding: 2px 5px}
  	|#ourtable tr.odd {background: #F0FFF0}
  	|#ourtable tr.top td {background: #B0C4DE; color: black; text-align: center}
	|#toptable tr.top td {background: #B0C4DE; color: black; text-align: center; border: 1px solid #4682B4; font-size:x-small;font-weight:bold}
	|#toptable {font-size:x-small}
	|</style></head>";
	//ТекстСводной = ТекстСводной + "<table style=""font-size:x-small"" id=""toptable"">";
	ТекстСводной = ТекстСводной + "<table id=""toptable"">";
	ТекстСводной = ТекстСводной + "<tr class=""top""><td colspan = 2>Формирование плана закупок</td></tr>";
	//ТекстСводной = ТекстСводной + "<table><tr><td colspan = 2><h2><center>Формирование плана закупок</center></h2></td></tr>";
	ТекстСводной = ТекстСводной + "<tr><td >Структурная единица:</td><td> "+СтруктурноеПодразделениеОрганизация+"</td></tr>";
	ТекстСводной = ТекстСводной + "<tr><td>Область планирования:</td><td> "+Объект.ОбластьПланирования+"</td></tr>";
	ТекстСводной = ТекстСводной + "<tr><td>Подразделение:</td><td> "+Объект.Подразделение+"</td></tr>";
	ТекстСводной = ТекстСводной + "<tr><td>Сценарий:</td><td> "+Объект.Сценарий+"</td></tr>";
	ТекстСводной = ТекстСводной + "<tr><td>Период планирования:</td><td> "+НадписьПериодПланирования+"</td></tr>";
	ТекстСводной = ТекстСводной + "<tr><td>Состояние:</td><td> "+Объект.Состояние+"</td></tr>";
	ТекстСводной = ТекстСводной + "<tr><td colspan = 2><b>Список включенных заявок</b></td></tr>";
	//Список заявок
	//ТекстСводной = ТекстСводной + "<tr><td colspan = 2><table border=1 style=""font-size:x-small;border:1px;border-spacing:1"" width = '100%'><tr><td>№</td>
	ТекстСводной = ТекстСводной + "<tr><td colspan = 2><table border = 1 width = '100%' id=""ourtable"">
																  |<tr class=""top""><td>№</td>
															      |<td>Заявка</td>
																  |<td>Сумма документа</td>
																  |<td>Состояние</td>
																  |<td>Источник заявки</td>
																  |<td>Подразделение - заявитель</td></tr>";
	четный = ложь;
	Если Объект.Заявки.Количество()>0 
		И (Объект.Товары.НайтиСтроки(Новый Структура("Включать", Истина)).Количество()=0
			ИЛИ Объект.Услуги.НайтиСтроки(Новый Структура("Включать", Истина)).Количество()=0) Тогда
		Для каждого СтрокаТЧ Из Объект.Заявки Цикл
			Если строкаТЧ.Включать Тогда
				четный = не четный;
				ТекстСводной = ТекстСводной + ?(четный,"<tr class=""odd"">","<tr>");
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.НомерСтроки+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Заявка+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+ПолучитьСвойство(СтрокаТЧ.Заявка,"СуммаДокумента")+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+ПолучитьСвойство(СтрокаТЧ.Заявка,"Состояние")+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+ПолучитьСвойство(СтрокаТЧ.Заявка,"ИсточникЗаявки")+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+ПолучитьСвойство(СтрокаТЧ.Заявка,"Подразделение")+"&nbsp</td>";
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТекстСводной = ТекстСводной + "<td colspan = 6>"+"Включенные заявки отсутствуют"+"&nbsp</td>";
	КонецЕсли;
	//Список товаров
	ТекстСводной = ТекстСводной + "</tr></table><tr><td><b>Включенная номенклатура</b></td></tr>";
	
	//ТекстСводной = ТекстСводной + "<tr><td colspan = 2><table border=1 style=""font-size:x-small;border:1px;border-spacing:1""><tr><td>№</td>
	ТекстСводной = ТекстСводной + "<tr><td colspan = 2><table border=1 id=""ourtable"">
																  |<tr class=""top""><td>№</td>
															      |<td>Номенклатура</td>
																  |<td>Характеристика</td>
																  |<td>Ед.изм</td>
																  |" + ?(УчетПроектов,"<td>Проект</td>","") + "
																  |<td>Коэф</td>
																  |<td>Период планирования</td>
																  |<td>Количество</td>
																  |<td>Цена</td>
																  |<td>Сумма</td>
																  |<td>Подразделение</td>
																  |" + ?(УчетОбъектовРемонта,"<td>Объект ремонта</td>", "") + "
																  |<td>Приоритет</td>
																  |<td>Поставщик</td>
																  |<td>По заявке</td></tr>";
	четный = Ложь;
	Если Объект.Товары.Количество()>0 Тогда 
		ТекстСводной = ТекстСводной + "<tr><td colspan = 15>Товары:</td></tr>";
		Для каждого СтрокаТЧ Из Объект.Товары Цикл
			Если строкаТЧ.Включать Тогда
				четный = не четный;
				ТекстСводной = ТекстСводной + ?(четный,"<tr class=""odd"">","<tr>");
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.НомерСтроки+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Номенклатура+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Характеристика+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.ЕдиницаИзмерения+"&nbsp</td>";
				Если УчетПроектов Тогда 
					ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Проект+"&nbsp</td>";
				КонецЕсли;
								
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Коэффициент+"&nbsp</td>";
				//ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.ПериодПланирования+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+ПолучитьПериодСтрокой(СтрокаТЧ.ПериодПланирования, Объект.Сценарий)+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Количество+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Цена+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Сумма+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Подразделение+"&nbsp</td>";
				Если УчетОбъектовРемонта Тогда
					ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.ОбъектРемонта+"&nbsp</td>";
				КонецЕсли;
								
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Приоритет+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Поставщик+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Заявка+"&nbsp</td>";
			КонецЕсли;
		КонецЦикла;
	Иначе
		//ТекстСводной = ТекстСводной + "<td>"+"Отсутствуют"+"&nbsp</td>";
	КонецЕсли;
	Если Объект.Услуги.Количество()>0 Тогда
		ТекстСводной = ТекстСводной + "<tr><td colspan = 15>Услуги:</td></tr>";
		Для каждого СтрокаТЧ Из Объект.Услуги Цикл
			Если строкаТЧ.Включать Тогда
				ТекстСводной = ТекстСводной + "<tr>";
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.НомерСтроки+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Номенклатура+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Характеристика+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>&nbsp</td>";
				Если УчетПроектов Тогда 
					ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Проект+"&nbsp</td>";
				КонецЕсли;
								
				ТекстСводной = ТекстСводной + "<td>&nbsp</td>";
				//ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.ПериодПланирования+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+ПолучитьПериодСтрокой(СтрокаТЧ.ПериодПланирования, Объект.Сценарий)+"&nbsp</td>";
				
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Количество+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Цена+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Сумма+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Подразделение+"&nbsp</td>";
				Если УчетОбъектовРемонта Тогда
					ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.ОбъектРемонта+"&nbsp</td>";
				КонецЕсли;
								
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Приоритет+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Поставщик+"&nbsp</td>";
				ТекстСводной = ТекстСводной + "<td>"+СтрокаТЧ.Заявка+"&nbsp</td>";
			КонецЕсли;
		КонецЦикла;
	Иначе
		//ТекстСводной = ТекстСводной + "<td>"+"Отсутствуют"+"&nbsp</td>";
	КонецЕсли;	
	//ТекстСводной = ТекстСводной + "<tr><td>Сводные данные:</td></tr>";
	//Для каждого СтрокаТЧ Из ТоварыСвод Цикл
	//	Если строкаТЧ.Включать Тогда
	//		ТекстСводной = ТекстСводной + "<tr><td>"+СтрокаТЧ.Номенклатура+"</td></tr>";
	//	КонецЕсли;
	//КонецЦикла;

	
	
	ТекстСводной = ТекстСводной+"</table></body></html>";
	Сводная = ТекстСводной;
	ЭтаФорма.ТекущийЭлемент = Элементы.Сводная;
КонецПроцедуры

&НаСервере
Функция ПолучитьПериодСтрокой(Период, Сценарий)
	Возврат	фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(Период,Сценарий)
КонецФункции

&НаКлиенте
Процедура УправлениеОтметками(ТЧ, Включать, ИмяПоля)
	Для каждого СтрокаТЧ Из ТЧ Цикл
		//СтрокаТЧ.Включать = Включать;
		СтрокаТЧ[ИмяПоля] = Включать;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПодразделений()
	СписокПодразделений= новый Массив;
	Для каждого СтрокаТЧ из Объект.Товары Цикл
		СписокПодразделений.Добавить(СтрокаТЧ.Подразделение);
	КонецЦикла;
	Для каждого СтрокаТЧ из Объект.Услуги Цикл
		СписокПодразделений.Добавить(СтрокаТЧ.Подразделение);
	КонецЦикла;
	//Если по организации тогда загружать соответствия подразделений организации
	Если Объект.ОбластьПланирования = Перечисления.узп_ОбластиПланированияЗакупок.ПоОрганизации Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",СтруктурноеПодразделениеОрганизация);
		Запрос.Текст = "ВЫБРАТЬ
		               |	Соответствие.Подразделение,
		               |	Соответствие.Организация,
		               |	Соответствие.ПодразделениеОрганизации
		               |ИЗ
		               |	РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК Соответствие
		               |ГДЕ
		               |	Соответствие.Организация = &Организация";
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			СписокПодразделений.Добавить(Результат.подразделение);
		КонецЦикла;
	Иначе
		СписокПодразделений.Добавить(Объект.Подразделение);
	КонецЕсли;
Возврат СписокПодразделений;	
КонецФункции

&НаСервере
Функция ПолучитьСписокНоменклатур()
	СписокНоменклатур = Новый Массив;
	ТаблицыИсточники = Новый Массив;
	ТаблицыИсточники.Добавить(Объект.Товары);
	ТаблицыИсточники.Добавить(Объект.Услуги);
	Для каждого Таблица Из ТаблицыИсточники Цикл
		Для каждого СтрокаТЧ из Таблица Цикл
			Если СписокНоменклатур.Найти(СтрокаТЧ.Номенклатура)=неопределено Тогда
				СписокНоменклатур.Добавить(СтрокаТЧ.Номенклатура);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат СписокНоменклатур;
КонецФункции

&НаСервере
Процедура ЗагрузкаСпецификации()
	//Загрузка номенклатурных позиций из планов закупок и заявок МТС
	ПолучитьНоменклатуруНаОснований();
	//Длительность цикла в единицах
	мПродолжительностьЦикла = Объект.Сценарий.ПродолжительностьЦикла;
	//загрузка всех подразделений из табличной части
	СписокПодразделений = ПолучитьСписокПодразделений();	
	//Нормирование по нормам запасов
	НормированиеПоНормам(СписокПодразделений,мПродолжительностьЦикла);
	////Нормирование по остаткам склада
	//НормированиеПоОстаткам(мПродолжительностьЦикла);
	СписокНоменклатур = ПолучитьСписокНоменклатур();
	//Неисполненные остатки
	//НормированиеПоПрогнозируемымОстаткам(мПродолжительностьЦикла,СписокПодразделений,СписокНоменклатур);
	НормированиеПоОстаткамПредварительныйПрогноз(мПродолжительностьЦикла,СписокПодразделений,СписокНоменклатур);
	НормированиеПоОстаткам(мПродолжительностьЦикла);

	Если Элементы.ТоварыКоличествоНорма.Видимость или Элементы.ТоварыКоличествоПрогнозируемыеОстатки.Видимость Тогда
		Элементы.ТоварыКоличествоНаОсновании.Видимость = Истина;
	Иначе
		Элементы.ТоварыКоличествоНаОсновании.Видимость = Ложь;
	КонецЕсли;
	//Сортировка по номенклатуре
	
	//Объект.Товары.Сортировать("ПериодПланирования");
	//Объект.Товары.Сортировать("Номенклатура");
	
	РассчетОбщейСуммыТоварногоДоговора();
КонецПроцедуры

&НаСервере
Процедура ПолучитьНоменклатуруНаОснований()
	//ведется ли учет по проектам
	СУчетомПроекта = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ВестиУчетЗакупокПоПроектам");
	СУчетомЗаявок = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("УказыватьДляПозицийПланаЗакупокЗаявкиОснования");
	//Список планов закупа
	СсылкиПланов = новый Массив;
	СсылкиПланов.Добавить(СтандартПлан);
	//Список заявок
	СсылкиЗаявок = новый Массив;
	СтрокиСсылок = Объект.Заявки.НайтиСтроки(Новый Структура("Включать",Истина));
	Для Каждого СтрокаСсылок Из СтрокиСсылок Цикл
		СсылкиЗаявок.Добавить(СтрокаСсылок.Заявка);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|"+?(СУчетомЗаявок,"ВложенныйЗапрос.Заявка КАК Заявка,", "")+"		
		|	ВложенныйЗапрос.Включать,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.ЕдиницаИзмерения,
		|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
		|	СУММА(ВложенныйЗапрос.Количество) КАК КоличествоНаОсновании,
		|	ВложенныйЗапрос.ПериодПланирования,
		|	ВложенныйЗапрос.Коэффициент,
		|	ВложенныйЗапрос.Подразделение,
		|	ВложенныйЗапрос.Приоритет,
		|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
		|	СРЕДНЕЕ(ВложенныйЗапрос.Цена) КАК Цена,
		|	ВложенныйЗапрос.Поставщик,
		|	ВложенныйЗапрос.ОбъектРемонта КАК ОбъектРемонта,
		|"+?(СУчетомПроекта,"ВложенныйЗапрос.Проект КАК Проект,", "")+"		
		//|	""На основании плана закупа"" КАК Примечание
		|	ВложенныйЗапрос.Примечание
		|ИЗ
		|	(ВЫБРАТЬ
		|"+?(СУчетомЗаявок,"узп_ПланЗакупокТовары.Ссылка КАК Заявка,", "")+"		
		|		ИСТИНА КАК Включать,
		|		узп_ПланЗакупокТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		СУММА(узп_ПланЗакупокТовары.Количество) КАК Количество,
		|		узп_ПланЗакупокТовары.Коэффициент КАК Коэффициент,
		|		узп_ПланЗакупокТовары.Номенклатура КАК Номенклатура,
		|		ДОБАВИТЬКДАТЕ(узп_ПланЗакупокТовары.ПериодПланирования, МЕСЯЦ, РАЗНОСТЬДАТ(узп_ПланЗакупокТовары.Ссылка.ПериодПланирования, &ДатаПериода, МЕСЯЦ)) КАК ПериодПланирования,
		|		узп_ПланЗакупокТовары.Подразделение КАК Подразделение,
		|		узп_ПланЗакупокТовары.Приоритет КАК Приоритет,
		|		СУММА(узп_ПланЗакупокТовары.Сумма) КАК Сумма,
		|		узп_ПланЗакупокТовары.Характеристика КАК Характеристика,
		|		узп_ПланЗакупокТовары.Цена КАК Цена,
		//|		узп_ПланЗакупокТовары.Номенклатура.ОсновнойПоставщик КАК Поставщик,
		|		узп_ПланЗакупокТовары.Поставщик КАК Поставщик,
		|		узп_ПланЗакупокТовары.ОбъектРемонта КАК ОбъектРемонта,
		|"+?(СУчетомПроекта,"узп_ПланЗакупокТовары.Проект КАК Проект,", "")+"		
		|		""На основании стандарт-плана. "" КАК Примечание
		|	ИЗ
		|		Документ.узп_ПланЗакупок.Товары КАК узп_ПланЗакупокТовары
		|	ГДЕ
		|		узп_ПланЗакупокТовары.Ссылка В(&СсылкиПланов)
		|	
		|	СГРУППИРОВАТЬ ПО
		|"+?(СУчетомЗаявок,"узп_ПланЗакупокТовары.Ссылка,","")+"
		|		узп_ПланЗакупокТовары.Номенклатура,
		|		узп_ПланЗакупокТовары.Характеристика,
		|		узп_ПланЗакупокТовары.ЕдиницаИзмерения,
		|		узп_ПланЗакупокТовары.Приоритет,
		|		узп_ПланЗакупокТовары.Подразделение,
		|		узп_ПланЗакупокТовары.Цена,
		|		узп_ПланЗакупокТовары.Коэффициент,
		|"+?(СУчетомПроекта,"узп_ПланЗакупокТовары.Проект,","")+"				
		|		узп_ПланЗакупокТовары.Поставщик,
		|		узп_ПланЗакупокТовары.ОбъектРемонта,
		|		узп_ПланЗакупокТовары.Ссылка.ПериодПланирования,
		|		узп_ПланЗакупокТовары.ПериодПланирования
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|"+?(СУчетомЗаявок,"узп_ЗаявкаМТСТовары.Ссылка КАК Заявка,", "")+"
		|		ИСТИНА,
		|		узп_ЗаявкаМТСТовары.ЕдиницаИзмерения,
		|		СУММА(узп_ЗаявкаМТСТовары.Количество),
		|		узп_ЗаявкаМТСТовары.Коэффициент,
		|		узп_ЗаявкаМТСТовары.Номенклатура,
		//|		ДОБАВИТЬКДАТЕ(узп_ЗаявкаМТСТовары.ПериодПланирования, МЕСЯЦ, РАЗНОСТЬДАТ(узп_ЗаявкаМТСТовары.Ссылка.ПериодПланирования, &ДатаПериода, МЕСЯЦ)),
		|		узп_ЗаявкаМТСТовары.ПериодПланирования,
		|		узп_ЗаявкаМТСТовары.Подразделение,
		|		узп_ЗаявкаМТСТовары.Приоритет,
		|		СУММА(узп_ЗаявкаМТСТовары.Сумма),
		|		узп_ЗаявкаМТСТовары.Характеристика,
		|		узп_ЗаявкаМТСТовары.Цена,
		|		узп_ЗаявкаМТСТовары.Номенклатура.ОсновнойПоставщик,
		|		узп_ЗаявкаМТСТовары.ОбъектРемонта КАК ОбъектРемонта,
		|"+?(СУчетомПроекта,"узп_ЗаявкаМТСТовары.Проект КАК Проект,", "")+"
		|		""На основании заявки. ""
		|	ИЗ
		|		Документ.узп_ЗаявкаМТС.Товары КАК узп_ЗаявкаМТСТовары
		|	ГДЕ
		|		узп_ЗаявкаМТСТовары.Ссылка В(&СсылкиЗаявок)
		|	
		|	СГРУППИРОВАТЬ ПО
		|"+?(СУчетомЗаявок,"узп_ЗаявкаМТСТовары.Ссылка,","")+"
		|		узп_ЗаявкаМТСТовары.Номенклатура,
		|		узп_ЗаявкаМТСТовары.Характеристика,
		|		узп_ЗаявкаМТСТовары.ЕдиницаИзмерения,
		|		узп_ЗаявкаМТСТовары.Приоритет,
		|		узп_ЗаявкаМТСТовары.Подразделение,
		|		узп_ЗаявкаМТСТовары.Цена,
		|		узп_ЗаявкаМТСТовары.Коэффициент,
		|		узп_ЗаявкаМТСТовары.Номенклатура.ОсновнойПоставщик,
		|		узп_ЗаявкаМТСТовары.ОбъектРемонта,
		|"+?(СУчетомПроекта,"узп_ЗаявкаМТСТовары.Проект,","")+"
		|		узп_ЗаявкаМТСТовары.Ссылка.ПериодПланирования,
		|		узп_ЗаявкаМТСТовары.ПериодПланирования) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|"+?(СУчетомЗаявок,"ВложенныйЗапрос.Заявка,","")+"
		|	ВложенныйЗапрос.Включать,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.ЕдиницаИзмерения,
		|	ВложенныйЗапрос.Приоритет,
		|	ВложенныйЗапрос.Подразделение,
		//|	ВложенныйЗапрос.Цена,
		|	ВложенныйЗапрос.Коэффициент,
		|"+?(СУчетомПроекта,"ВложенныйЗапрос.Проект,","")+"
		|	ВложенныйЗапрос.Поставщик,
		|	ВложенныйЗапрос.ОбъектРемонта,
		|	ВложенныйЗапрос.ПериодПланирования,
		|	ВложенныйЗапрос.Примечание
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ПериодПланирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|"+?(СУчетомЗаявок,"ВложенныйЗапрос.Заявка КАК Заявка,", "")+"
		|	ВложенныйЗапрос.Включать,
		|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
		|	СУММА(ВложенныйЗапрос.Количество) КАК КоличествоНаОсновании,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ПериодПланирования,
		|	ВложенныйЗапрос.Подразделение,
		|	ВложенныйЗапрос.Приоритет,
		|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
		|	ВложенныйЗапрос.Характеристика,
		|	СРЕДНЕЕ(ВложенныйЗапрос.Цена) КАК Цена,
		|	ВложенныйЗапрос.Поставщик,
		|	ВложенныйЗапрос.ОбъектРемонта КАК ОбъектРемонта,
		|"+?(СУчетомПроекта,"ВложенныйЗапрос.Проект КАК Проект,", "")+"
		//|	""На основании стандарт-плана."" КАК Примечание
		|	ВложенныйЗапрос.Примечание
		|ИЗ
		|	(ВЫБРАТЬ
		|"+?(СУчетомЗаявок,"узп_ПланЗакупокУслуги.Ссылка КАК Заявка,", "")+"
		|		ИСТИНА КАК Включать,
		|		СУММА(узп_ПланЗакупокУслуги.Количество) КАК Количество,
		|		узп_ПланЗакупокУслуги.Номенклатура КАК Номенклатура,
		//|		узп_ПланЗакупокУслуги.ПериодПланирования КАК ПериодПланирования,
		|		ДОБАВИТЬКДАТЕ(узп_ПланЗакупокУслуги.ПериодПланирования, МЕСЯЦ, РАЗНОСТЬДАТ(узп_ПланЗакупокУслуги.Ссылка.ПериодПланирования, &ДатаПериода, МЕСЯЦ)) КАК ПериодПланирования,
		|		узп_ПланЗакупокУслуги.Подразделение КАК Подразделение,
		|		узп_ПланЗакупокУслуги.Приоритет КАК Приоритет,
		|		СУММА(узп_ПланЗакупокУслуги.Сумма) КАК Сумма,
		|		узп_ПланЗакупокУслуги.Характеристика КАК Характеристика,
		|		узп_ПланЗакупокУслуги.Цена КАК Цена,
		//|		узп_ПланЗакупокУслуги.Номенклатура.ОсновнойПоставщик КАК Поставщик,
		|		узп_ПланЗакупокУслуги.Поставщик КАК Поставщик,
		|		узп_ПланЗакупокУслуги.ОбъектРемонта КАК ОбъектРемонта,
		|"+?(СУчетомПроекта,"узп_ПланЗакупокУслуги.Проект КАК Проект,", "")+"
		|		""На основании стандарт-плана. "" КАК Примечание
		//|		узп_ПланЗакупокУслуги.Ссылка.ПериодПланирования КАК ПериодПланированияИсточника
		|	ИЗ
		|		Документ.узп_ПланЗакупок.Услуги КАК узп_ПланЗакупокУслуги
		|	ГДЕ
		|		узп_ПланЗакупокУслуги.Ссылка В(&СсылкиПланов)
		|	
		|	СГРУППИРОВАТЬ ПО
		|"+?(СУчетомЗаявок,"узп_ПланЗакупокУслуги.Ссылка,","")+"
		|		узп_ПланЗакупокУслуги.Номенклатура,
		|		узп_ПланЗакупокУслуги.Характеристика,
		|		узп_ПланЗакупокУслуги.Приоритет,
		|		узп_ПланЗакупокУслуги.Подразделение,
		|		узп_ПланЗакупокУслуги.ПериодПланирования,
		|		узп_ПланЗакупокУслуги.Цена,
		|		узп_ПланЗакупокУслуги.Поставщик,
		|		узп_ПланЗакупокУслуги.Номенклатура.ОсновнойПоставщик,
		|		узп_ПланЗакупокУслуги.ОбъектРемонта,
		|"+?(СУчетомПроекта,"узп_ПланЗакупокУслуги.Проект,","")+"
		|		узп_ПланЗакупокУслуги.Ссылка.ПериодПланирования
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|"+?(СУчетомЗаявок,"узп_ЗаявкаМТСУслуги.Ссылка КАК Заявка,", "")+"
		|		ИСТИНА,
		|		СУММА(узп_ЗаявкаМТСУслуги.Количество),
		|		узп_ЗаявкаМТСУслуги.Номенклатура,
		|		узп_ЗаявкаМТСУслуги.ПериодПланирования,
		|		узп_ЗаявкаМТСУслуги.Подразделение,
		|		узп_ЗаявкаМТСУслуги.Приоритет,
		|		СУММА(узп_ЗаявкаМТСУслуги.Сумма),
		|		узп_ЗаявкаМТСУслуги.Характеристика,
		|		узп_ЗаявкаМТСУслуги.Цена,
		|		узп_ЗаявкаМТСУслуги.Номенклатура.ОсновнойПоставщик,
		|		узп_ЗаявкаМТСУслуги.ОбъектРемонта КАК ОбъектРемонта,
		|"+?(СУчетомПроекта,"узп_ЗаявкаМТСУслуги.Проект КАК Проект,", "")+"
		|		""На основании заявки. ""
		//|		узп_ЗаявкаМТСУслуги.Ссылка.ПериодПланирования
		|	ИЗ
		|		Документ.узп_ЗаявкаМТС.Услуги КАК узп_ЗаявкаМТСУслуги
		|	ГДЕ
		|		узп_ЗаявкаМТСУслуги.Ссылка В(&СсылкиЗаявок)
		|	
		|	СГРУППИРОВАТЬ ПО
		|"+?(СУчетомЗаявок,"узп_ЗаявкаМТСУслуги.Ссылка,","")+"
		|		узп_ЗаявкаМТСУслуги.Номенклатура,
		|		узп_ЗаявкаМТСУслуги.Характеристика,
		|		узп_ЗаявкаМТСУслуги.Приоритет,
		|		узп_ЗаявкаМТСУслуги.Подразделение,
		|		узп_ЗаявкаМТСУслуги.ПериодПланирования,
		|		узп_ЗаявкаМТСУслуги.Цена,
		|		узп_ЗаявкаМТСУслуги.Номенклатура.ОсновнойПоставщик,
		|		узп_ЗаявкаМТСУслуги.ОбъектРемонта,
		|"+?(СУчетомПроекта,"узп_ЗаявкаМТСУслуги.Проект,","")+"
		|		узп_ЗаявкаМТСУслуги.Ссылка.ПериодПланирования) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|"+?(СУчетомЗаявок,"ВложенныйЗапрос.Заявка,","")+"
		|	ВложенныйЗапрос.ПериодПланирования,		
		|	ВложенныйЗапрос.Включать,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Приоритет,
		|	ВложенныйЗапрос.Подразделение,
		|"+?(СУчетомПроекта,"ВложенныйЗапрос.Проект,","")+"
		|	ВложенныйЗапрос.Примечание,
		|	ВложенныйЗапрос.Поставщик,
		|	ВложенныйЗапрос.ОбъектРемонта
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ПериодПланирования
		|";
		//|	ВложенныйЗапрос.ПериодПланированияИсточника";

	Запрос.УстановитьПараметр("СсылкиПланов", СсылкиПланов);
	Запрос.УстановитьПараметр("СсылкиЗаявок", СсылкиЗаявок);
	Запрос.УстановитьПараметр("ДатаПериода", Объект.ПериодПланирования);
	Запрос.УстановитьПараметр("ПриходРасход", Перечисления.узп_ВидыОборотовПоЗаказам.Заказано);
	Результат = Запрос.ВыполнитьПакет();
	Объект.Товары.Загрузить(Результат[0].Выгрузить());
	Объект.Услуги.Загрузить(Результат[1].Выгрузить());
КонецПроцедуры

//Нормирование по нормам запасов
&НаСервере
Процедура НормированиеПоНормам(СписокПодразделений,мПродолжительностьЦикла)
	Если ФлагНормы Тогда
		Элементы.ТоварыКоличествоНорма.Видимость = Истина;
		//Загрузка норм запасов в разрезе подразделений
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Подразделение",СписокПодразделений);
		ТекстЗапроса="";
		СписокНорм = Новый Массив;
		Для НомерПериода = 1 ПО мПродолжительностьЦикла Цикл
			ТекущийПериод = ДобавитьМесяц(Объект.ПериодПланирования,НомерПериода-1);
			Запрос.УстановитьПараметр("Дата"+НомерПериода,ТекущийПериод);
			ТекстЗапроса = ТекстЗапроса + ?(НомерПериода>1,";","")+"
										   |ВЫБРАТЬ
							               |	узп_НормыЗапасовТоваровПоПодразделениямСрезПоследних.Подразделение,
							               |	узп_НормыЗапасовТоваровПоПодразделениямСрезПоследних.Номенклатура,
							               |	узп_НормыЗапасовТоваровПоПодразделениямСрезПоследних.НормыЗапаса,
							               |	узп_НормыЗапасовТоваровПоПодразделениямСрезПоследних.Период КАК Период
							               |ИЗ
							               |	РегистрСведений.узп_НормыЗапасовТоваровПоПодразделениям.СрезПоследних(&Дата"+НомерПериода+", ) КАК узп_НормыЗапасовТоваровПоПодразделениямСрезПоследних
							               |ГДЕ
							               |	узп_НормыЗапасовТоваровПоПодразделениямСрезПоследних.Подразделение В(&Подразделение)
							               |";
			
			
		КонецЦикла;
		Запрос.Текст = ТекстЗапроса;
		Результат = Запрос.ВыполнитьПакет();
		Для НомерПериода = 1 ПО мПродолжительностьЦикла Цикл
			СписокНорм.Добавить(Результат[НомерПериода-1].Выбрать());
		КонецЦикла;
		
		Для НомерПериода = 1 ПО мПродолжительностьЦикла Цикл
			Пока СписокНорм[НомерПериода-1].Следующий() Цикл
				ТекущийПериод = ДобавитьМесяц(Объект.ПериодПланирования,НомерПериода-1);
				
				Отбор = Новый Структура;
				Отбор.Вставить("Подразделение",СписокНорм[НомерПериода-1].Подразделение);
				Отбор.Вставить("Номенклатура",СписокНорм[НомерПериода-1].Номенклатура);
				Отбор.Вставить("ПериодПланирования",ТекущийПериод);
				Отбор.Вставить("Заявка",Документы.узп_ЗаявкаМТС.ПустаяСсылка());
				НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
				Если Не НайденныеСтроки.Количество()=0 Тогда
					НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + СписокНорм[НомерПериода-1].НормыЗапаса;
					НайденныеСтроки[0].Примечание = НайденныеСтроки[0].Примечание + "Произведено нормирование запасов. "; //установка примечаний
					НайденныеСтроки[0].КоличествоНорма = СписокНорм[НомерПериода-1].НормыЗапаса;
					ДанныеОбъекта = фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка);
					ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
					ДанныеСтрокиТаблицы = фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка,"Товары");
					ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, НайденныеСтроки[0]);
					дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокиТаблицы);
					ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ДанныеСтрокиТаблицы);
				Иначе
					Если НЕ СписокНорм[НомерПериода-1].Номенклатура.Услуга Тогда
						НоваяСтрока = Объект.Товары.Добавить();
						НоваяСтрока.Номенклатура = СписокНорм[НомерПериода-1].Номенклатура;
						НоваяСтрока.Подразделение = СписокНорм[НомерПериода-1].Подразделение;
						НоваяСтрока.Количество = СписокНорм[НомерПериода-1].НормыЗапаса;
						НоваяСтрока.Примечание = НоваяСтрока.Примечание + "Произведено нормирование запасов. "; //установка примечаний
						НоваяСтрока.ПериодПланирования = ТекущийПериод;
						НоваяСтрока.Включать = Истина;
						НоваяСтрока.КоличествоНорма = СписокНорм[НомерПериода-1].НормыЗапаса;
						дог_УправлениеДоговорами.ЗаполнитьЕдиницуЦенуПродажиТабЧастиПлан(НоваяСтрока, Объект, ЭтаФорма.мВалютаРегламентированногоУчета,ТипЦен,ВалютаДокумента);
						ДанныеОбъекта = фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка);
						ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
						ДанныеСтрокиТаблицы = фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка,"Товары");
						ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, НоваяСтрока);
						дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокиТаблицы);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтрокиТаблицы);
					Иначе
						НоваяСтрока = Объект.Услуги.Добавить();
						НоваяСтрока.Номенклатура = СписокНорм[НомерПериода-1].Номенклатура;
						НоваяСтрока.Подразделение = СписокНорм[НомерПериода-1].Подразделение;
						НоваяСтрока.Количество = СписокНорм[НомерПериода-1].НормыЗапаса;
						НоваяСтрока.Примечание = НоваяСтрока.Примечание + "Произведено нормирование запасов. "; //установка примечаний
						НоваяСтрока.ПериодПланирования = ТекущийПериод;
						НоваяСтрока.Включать = Истина;
						НоваяСтрока.КоличествоНорма = СписокНорм[НомерПериода-1].НормыЗапаса;
						дог_УправлениеДоговорами.ЗаполнитьЕдиницуЦенуПродажиТабЧастиПлан(НоваяСтрока, Объект, ЭтаФорма.мВалютаРегламентированногоУчета,ТипЦен,ВалютаДокумента);
						ДанныеОбъекта = фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка);
						ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
						ДанныеСтрокиТаблицы = фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка,"Товары");
						ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, НоваяСтрока);
						дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокиТаблицы);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтрокиТаблицы);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Элементы.ТоварыКоличествоНорма.Видимость = Ложь
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура НормированиеПоОстаткамПредварительныйПрогноз(мПродолжительностьЦикла,СписокПодразделений,СписокНоменклатур)
	Если ФлагОстатки Тогда
		СУчетомПроекта = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ВестиУчетЗакупокПоПроектам");
		СУчетомЗаявок = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("УказыватьДляПозицийПланаЗакупокЗаявкиОснования");
		
		СкладыМассив = Новый Массив;											//формирование списка складов
		ОбщиеСкладыМассив = Новый Массив;										//формирование списка общих складов
		Если ФлагОстаткиОбщие Тогда                                             //
			Для каждого СтрокаТЧ Из ОбщиеСклады Цикл                            //
				Если СтрокаТЧ.Общий тогда                                       //
					СкладыМассив.Добавить(СтрокаТЧ.Склад);                 		//
					ОбщиеСкладыМассив.Добавить(СтрокаТЧ.Склад);                 //
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокПодразделений",СписокПодразделений);
		Запрос.Текст = "ВЫБРАТЬ
		               |	узп_СоответствиеСкладовИЦФО.Склад,
		               |	узп_СоответствиеСкладовИЦФО.Подразделения
		               |ИЗ
		               |	РегистрСведений.узп_СоответствиеСкладовИЦФО КАК узп_СоответствиеСкладовИЦФО
		               |ГДЕ
		               |	узп_СоответствиеСкладовИЦФО.Подразделения В(&СписокПодразделений)";
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			СкладыМассив.Добавить(Результат.Склад);
		КонецЦикла;
		Элементы.ТоварыКоличествоПрогнозируемыеОстатки.Видимость = Истина;
		Запрос= Новый Запрос;
		ВидыСубконто = Новый СписокЗначений;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);
		Запрос.УстановитьПараметр("ВидыСубконто",ВидыСубконто);
		Запрос.УстановитьПараметр("Организация",Объект.Организация);
		Запрос.УстановитьПараметр("Счета", ПланыСчетов.Типовой.Запасы);
		Запрос.УстановитьПараметр("ДатаПолученияОстатков", ТекущаяДата());
		Запрос.УстановитьПараметр("СписокНоменклатуры",СписокНоменклатур);
		Запрос.УстановитьПараметр("СписокПодразделений",СписокПодразделений);
		Запрос.УстановитьПараметр("ДатаПланирования",Объект.ПериодПланирования);
		Запрос.УстановитьПараметр("ДатаНачалаПредыдущегоСценария",фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.Дата, Объект.Сценарий.Периодичность));
		Запрос.УстановитьПараметр("Склады",СкладыМассив);
		Запрос.УстановитьПараметр("ОбщиеСклады",ОбщиеСкладыМассив);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЕСТЬNULL(ЕСТЬNULL(ЕСТЬNULL(ЕСТЬNULL(ЕСТЬNULL(ЕСТЬNULL(ТиповойОстатки.Субконто1, ПЗХотелиЗакупить.Номенклатура), ПЗХотелиЗакупить.НоменклатураПлановая), ПЗЗакупили.Номенклатура), ПЗЗакупили.НоменклатураПлановая), ЗМТСПросили.Номенклатура), ЗМТСВыдали.Номенклатура) КАК Номенклатура,
		               |	узп_СоответствиеСкладовИЦФО.Подразделения КАК Подразделение,
		               |	СУММА(ЕСТЬNULL(ТиповойОстатки.КоличествоОстатокДт, 0)) КАК ОстатокБУ,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(ПЗХотелиЗакупить.КоличествоОборот, 0) - ЕСТЬNULL(ПЗЗакупили.КоличествоОборот, 0) < 0
		               |			ТОГДА 0
		               |		ИНАЧЕ ЕСТЬNULL(ПЗХотелиЗакупить.КоличествоОборот, 0) - ЕСТЬNULL(ПЗЗакупили.КоличествоОборот, 0)
		               |	КОНЕЦ КАК ПланируетсяЗакупить,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(ЗМТСПросили.КоличествоОборот, 0) - ЕСТЬNULL(ЗМТСВыдали.КоличествоОборот, 0) < 0
		               |			ТОГДА 0
		               |		ИНАЧЕ ЕСТЬNULL(ЗМТСПросили.КоличествоОборот, 0) - ЕСТЬNULL(ЗМТСВыдали.КоличествоОборот, 0)
		               |	КОНЕЦ КАК ПланируетсяСписать,
		               |	ТиповойОстатки.Субконто2 КАК Склад,
		               |	ВЫБОР
		               |		КОГДА ТиповойОстатки.Субконто2 В (&ОбщиеСклады)
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК Общий,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(ТиповойОстатки.КоличествоОстатокДт, 0) + ВЫБОР
		               |				КОГДА ЕСТЬNULL(ПЗХотелиЗакупить.КоличествоОборот, 0) - ЕСТЬNULL(ПЗЗакупили.КоличествоОборот, 0) < 0
		               |					ТОГДА 0
		               |				ИНАЧЕ ЕСТЬNULL(ПЗХотелиЗакупить.КоличествоОборот, 0) - ЕСТЬNULL(ПЗЗакупили.КоличествоОборот, 0)
		               |			КОНЕЦ - ВЫБОР
		               |				КОГДА ЕСТЬNULL(ЗМТСПросили.КоличествоОборот, 0) - ЕСТЬNULL(ЗМТСВыдали.КоличествоОборот, 0) < 0
		               |					ТОГДА 0
		               |				ИНАЧЕ ЕСТЬNULL(ЗМТСПросили.КоличествоОборот, 0) - ЕСТЬNULL(ЗМТСВыдали.КоличествоОборот, 0)
		               |			КОНЕЦ < 0
		               |			ТОГДА 0
		               |		ИНАЧЕ ЕСТЬNULL(ТиповойОстатки.КоличествоОстатокДт, 0) + ВЫБОР
		               |				КОГДА ЕСТЬNULL(ПЗХотелиЗакупить.КоличествоОборот, 0) - ЕСТЬNULL(ПЗЗакупили.КоличествоОборот, 0) < 0
		               |					ТОГДА 0
		               |				ИНАЧЕ ЕСТЬNULL(ПЗХотелиЗакупить.КоличествоОборот, 0) - ЕСТЬNULL(ПЗЗакупили.КоличествоОборот, 0)
		               |			КОНЕЦ - ВЫБОР
		               |				КОГДА ЕСТЬNULL(ЗМТСПросили.КоличествоОборот, 0) - ЕСТЬNULL(ЗМТСВыдали.КоличествоОборот, 0) < 0
		               |					ТОГДА 0
		               |				ИНАЧЕ ЕСТЬNULL(ЗМТСПросили.КоличествоОборот, 0) - ЕСТЬNULL(ЗМТСВыдали.КоличествоОборот, 0)
		               |			КОНЕЦ
		               |	КОНЕЦ КАК ПрогнозныйОстаток
		               |ИЗ
		               |	РегистрБухгалтерии.Типовой.Остатки(
		               |			&ДатаПолученияОстатков,
		               |			Счет В ИЕРАРХИИ (&Счета),
		               |			&ВидыСубконто,
		               |			Организация = &Организация
		               |				И Субконто1 В (&СписокНоменклатуры)) КАК ТиповойОстатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.узп_СоответствиеСкладовИЦФО КАК узп_СоответствиеСкладовИЦФО
		               |		ПО ТиповойОстатки.Субконто2 = узп_СоответствиеСкладовИЦФО.Склад
		               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.узп_ПланыЗакупок.Обороты(
		               |				,
		               |				,
		               |				,
		               |				(Номенклатура В (&СписокНоменклатуры)
		               |					ИЛИ НоменклатураПлановая В (&СписокНоменклатуры))
		               |					И Подразделение В (&СписокПодразделений)
		               |					И (ПериодПланирования МЕЖДУ &ДатаНачалаПредыдущегоСценария И &ДатаПланирования)
		               |					И НЕ Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка)) КАК ПЗХотелиЗакупить
		               |		ПО ((ТиповойОстатки.Субконто1 = ПЗХотелиЗакупить.Номенклатура
		               |				ИЛИ ТиповойОстатки.Субконто1 = ПЗХотелиЗакупить.НоменклатураПлановая)
		               |				И узп_СоответствиеСкладовИЦФО.Подразделения = ПЗХотелиЗакупить.Подразделение)
		               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.узп_ПланыЗакупок.Обороты(
		               |				,
		               |				,
		               |				,
		               |				(Номенклатура В (&СписокНоменклатуры)
		               |					ИЛИ НоменклатураПлановая В (&СписокНоменклатуры))
		               |					И Подразделение В (&СписокПодразделений)
		               |					И (ПериодПланирования МЕЖДУ &ДатаНачалаПредыдущегоСценария И &ДатаПланирования)
		               |					И Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка)) КАК ПЗЗакупили
		               |		ПО ((ТиповойОстатки.Субконто1 = ПЗЗакупили.Номенклатура
		               |				ИЛИ ТиповойОстатки.Субконто1 = ПЗЗакупили.НоменклатураПлановая)
		               |				И узп_СоответствиеСкладовИЦФО.Подразделения = ПЗЗакупили.Подразделение)
		               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.узп_ЗаявкиМТС.Обороты(
		               |				,
		               |				,
		               |				,
		               |				(Номенклатура В (&СписокНоменклатуры)
		               |					ИЛИ НоменклатураПлановая В (&СписокНоменклатуры))
		               |					И Подразделение В (&СписокПодразделений)
		               |					И (ПериодПланирования МЕЖДУ &ДатаНачалаПредыдущегоСценария И &ДатаПланирования)
		               |					И ПриходРасход = ЗНАЧЕНИЕ(Перечисление.узп_ВидыОборотовПоЗаказам.Заказано)) КАК ЗМТСПросили
		               |		ПО ((ТиповойОстатки.Субконто1 = ЗМТСПросили.Номенклатура
		               |				ИЛИ ТиповойОстатки.Субконто1 = ЗМТСПросили.НоменклатураПлановая)
		               |				И узп_СоответствиеСкладовИЦФО.Подразделения = ЗМТСПросили.Подразделение)
		               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.узп_ЗаявкиМТС.Обороты(
		               |				,
		               |				,
		               |				,
		               |				(Номенклатура В (&СписокНоменклатуры)
		               |					ИЛИ НоменклатураПлановая В (&СписокНоменклатуры))
		               |					И Подразделение В (&СписокПодразделений)
		               |					И (ПериодПланирования МЕЖДУ &ДатаНачалаПредыдущегоСценария И &ДатаПланирования)
		               |					И ПриходРасход = ЗНАЧЕНИЕ(Перечисление.узп_ВидыОборотовПоЗаказам.ВыданоСписано)) КАК ЗМТСВыдали
		               |		ПО ((ТиповойОстатки.Субконто1 = ЗМТСВыдали.Номенклатура
		               |				ИЛИ ТиповойОстатки.Субконто1 = ЗМТСВыдали.НоменклатураПлановая)
		               |				И узп_СоответствиеСкладовИЦФО.Подразделения = ЗМТСВыдали.Подразделение)
		               |ГДЕ
		               |	ТиповойОстатки.Субконто2 В(&Склады)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	узп_СоответствиеСкладовИЦФО.Подразделения,
		               |	ТиповойОстатки.Субконто2,
		               |	ЕСТЬNULL(ЕСТЬNULL(ЕСТЬNULL(ЕСТЬNULL(ЕСТЬNULL(ЕСТЬNULL(ТиповойОстатки.Субконто1, ПЗХотелиЗакупить.Номенклатура), ПЗХотелиЗакупить.НоменклатураПлановая), ПЗЗакупили.Номенклатура), ПЗЗакупили.НоменклатураПлановая), ЗМТСПросили.Номенклатура), ЗМТСВыдали.Номенклатура),
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(ПЗХотелиЗакупить.КоличествоОборот, 0) - ЕСТЬNULL(ПЗЗакупили.КоличествоОборот, 0) < 0
		               |			ТОГДА 0
		               |		ИНАЧЕ ЕСТЬNULL(ПЗХотелиЗакупить.КоличествоОборот, 0) - ЕСТЬNULL(ПЗЗакупили.КоличествоОборот, 0)
		               |	КОНЕЦ,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(ЗМТСПросили.КоличествоОборот, 0) - ЕСТЬNULL(ЗМТСВыдали.КоличествоОборот, 0) < 0
		               |			ТОГДА 0
		               |		ИНАЧЕ ЕСТЬNULL(ЗМТСПросили.КоличествоОборот, 0) - ЕСТЬNULL(ЗМТСВыдали.КоличествоОборот, 0)
		               |	КОНЕЦ,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(ТиповойОстатки.КоличествоОстатокДт, 0) + ВЫБОР
		               |				КОГДА ЕСТЬNULL(ПЗХотелиЗакупить.КоличествоОборот, 0) - ЕСТЬNULL(ПЗЗакупили.КоличествоОборот, 0) < 0
		               |					ТОГДА 0
		               |				ИНАЧЕ ЕСТЬNULL(ПЗХотелиЗакупить.КоличествоОборот, 0) - ЕСТЬNULL(ПЗЗакупили.КоличествоОборот, 0)
		               |			КОНЕЦ - ВЫБОР
		               |				КОГДА ЕСТЬNULL(ЗМТСПросили.КоличествоОборот, 0) - ЕСТЬNULL(ЗМТСВыдали.КоличествоОборот, 0) < 0
		               |					ТОГДА 0
		               |				ИНАЧЕ ЕСТЬNULL(ЗМТСПросили.КоличествоОборот, 0) - ЕСТЬNULL(ЗМТСВыдали.КоличествоОборот, 0)
		               |			КОНЕЦ < 0
		               |			ТОГДА 0
		               |		ИНАЧЕ ЕСТЬNULL(ТиповойОстатки.КоличествоОстатокДт, 0) + ВЫБОР
		               |				КОГДА ЕСТЬNULL(ПЗХотелиЗакупить.КоличествоОборот, 0) - ЕСТЬNULL(ПЗЗакупили.КоличествоОборот, 0) < 0
		               |					ТОГДА 0
		               |				ИНАЧЕ ЕСТЬNULL(ПЗХотелиЗакупить.КоличествоОборот, 0) - ЕСТЬNULL(ПЗЗакупили.КоличествоОборот, 0)
		               |			КОНЕЦ - ВЫБОР
		               |				КОГДА ЕСТЬNULL(ЗМТСПросили.КоличествоОборот, 0) - ЕСТЬNULL(ЗМТСВыдали.КоличествоОборот, 0) < 0
		               |					ТОГДА 0
		               |				ИНАЧЕ ЕСТЬNULL(ЗМТСПросили.КоличествоОборот, 0) - ЕСТЬNULL(ЗМТСВыдали.КоличествоОборот, 0)
		               |			КОНЕЦ
		               |	КОНЕЦ
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Подразделение,
		               |	Номенклатура";
		Попытка				   
			Результат = Запрос.Выполнить().Выгрузить();
			ПрогнозОстатковВходящий.Загрузить(Результат);
			
		Исключение
			Сообщить("У пользователя недостаточно прав для получения данных по складам. Расчет прогнозных остатков недоступен")
		КонецПопытки;
		ФормированиеДереваПрогнозныхОстатков(Результат);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ФормированиеДереваПрогнозныхОстатков(ТаблицаСОстатками)
	мТаблицаОстатки = РеквизитФормыВЗначение("ПрогнозОстатковВходящий1");
	мТаблицаОстатки.Строки.Очистить();
	СверткаПоНоменклатуре = ТаблицаСОстатками.Скопировать();
	СверткаПоНоменклатуре.Свернуть("Номенклатура", "ПланируетсяЗакупить, ПланируетсяСписать,ОстатокБУ");
	Для каждого строкаТЧ из СверткаПоНоменклатуре Цикл
		НоваяСтрока = мТаблицаОстатки.Строки.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
		НоваяСтрока.ОстатокБУ = СтрокаТЧ.ОстатокБУ;
		НоваяСтрока.ПланируетсяЗакупить = СтрокаТЧ.ПланируетсяЗакупить;
		НоваяСтрока.ПланируетсяСписать = СтрокаТЧ.ПланируетсяСписать;
		НоваяСтрока.ПрогнозныйОстаток = ?((СтрокаТЧ.ОстатокБУ+СтрокаТЧ.ПланируетсяЗакупить-СтрокаТЧ.ПланируетсяСписать)<0,0,СтрокаТЧ.ОстатокБУ+СтрокаТЧ.ПланируетсяЗакупить-СтрокаТЧ.ПланируетсяСписать);
		СверткаПоПодразделению = ТаблицаСОстатками.Скопировать();
		СверткаПоПодразделению.Свернуть("Номенклатура, Подразделение, ПланируетсяЗакупить, ПланируетсяСписать", "ОстатокБУ");
		НайденныеСтроки = СверткаПоПодразделению.НайтиСтроки(Новый Структура("Номенклатура", НоваяСтрока.Номенклатура));
		Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
			НоваяПодстрока = НоваяСтрока.Строки.Добавить();
			НоваяПодстрока.Подразделение = ?(ЗначениеЗаполнено(НайденнаяСтрока.Подразделение),НайденнаяСтрока.Подразделение,"<Общий склад>");
			НоваяПодстрока.ОстатокБУ = НайденнаяСтрока.ОстатокБУ;
			НоваяПодстрока.ПланируетсяЗакупить = НайденнаяСтрока.ПланируетсяЗакупить;
			НоваяПодстрока.ПланируетсяСписать = НайденнаяСтрока.ПланируетсяСписать;
			//НоваяПодстрока.ПрогнозныйОстаток = ?((НайденнаяСтрока.ОстатокБУ+НайденнаяСтрока.ПланируетсяЗакупить-НайденнаяСтрока.ПланируетсяСписать)<0,0,НайденнаяСтрока.ОстатокБУ+НайденнаяСтрока.ПланируетсяЗакупить-НайденнаяСтрока.ПланируетсяСписать);
			СверткаПоСкладам = ТаблицаСОстатками.Скопировать();
			СверткаПоСкладам.Свернуть("Номенклатура,Подразделение,Склад,ОстатокБУ");
			НайденныеСтроки = СверткаПоСкладам.НайтиСтроки(Новый Структура("Номенклатура,Подразделение", НоваяСтрока.Номенклатура,НоваяПодСтрока.Подразделение));
			Для каждого НайденнаяПодСтрока из НайденныеСтроки Цикл
				НоваяПодПодстрока = НоваяПодстрока.Строки.Добавить();
				НоваяПодПодстрока.Склад = НайденнаяПодСтрока.Склад;
				НоваяПодПодстрока.ОстатокБУ = НайденнаяПодСтрока.ОстатокБУ;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ЗначениеВРеквизитФормы(мТаблицаОстатки, "ПрогнозОстатковВходящий1");

	УО = УсловноеОформление.Элементы.Добавить();
	УО.Оформление.УстановитьЗначениеПараметра("Текст","<Общий склад>");
	ЭУ = УО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭУ.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПрогнозОстатковВходящий1Общий");
	ЭУ.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ЭУ.ПравоеЗначение = Истина;
	ОП = УО.Поля.Элементы.Добавить();
	ОП.Поле = Новый ПолеКомпоновкиДанных("ПрогнозОстатковВходящий1Подразделение");
КонецПроцедуры

&НаСервере
Процедура НормированиеПоОстаткам(мПродолжительностьЦикла)
	Если ФлагОстатки Тогда
		ВременныйПрогнозОстатков = ПрогнозОстатковВходящий.Выгрузить();
		СУчетомПроекта = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ВестиУчетЗакупокПоПроектам");
		СУчетомЗаявок = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("УказыватьДляПозицийПланаЗакупокЗаявкиОснования");
		ТаблицыИсточники = Новый Массив;
		ТаблицыИсточники.Добавить(Объект.Товары);
		//ТаблицыИсточники.Добавить(Объект.Услуги);
		ОстаткиНоменклатурыПолныйПрогноз.Очистить();
		//1 итеррация: заполнение первичных полей таблицы прогноза
		Для Каждого Таблица Из ТаблицыИсточники Цикл
			Для Каждого СтрокаТЧ Из Таблица Цикл
				НоваяСтрока = ОстаткиНоменклатурыПолныйПрогноз.Добавить();
				НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
				НоваяСтрока.ПериодПланирования = СтрокаТЧ.ПериодПланирования;
				НоваяСтрока.ПериодПланированияСтрокой = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(СтрокаТЧ.ПериодПланирования,Объект.Сценарий);
				НоваяСтрока.КоличествоЗаказано = СтрокаТЧ.Количество;
				НоваяСтрока.Подразделение = СтрокаТЧ.Подразделение;
				Если СУчетомЗаявок Тогда
					НоваяСтрока.Заявка = СтрокаТЧ.Заявка;
				КонецЕсли;
				Если СУчетомПроекта Тогда
					НоваяСтрока.Проект = СтрокаТЧ.Проект;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ОстаткиНоменклатурыПолныйПрогноз.Сортировать("Подразделение,Номенклатура, ПериодПланирования");
		//2 итеррация: расчет закупаемого количества
		Для Каждого СтрокаТЧ Из ОстаткиНоменклатурыПолныйПрогноз Цикл
			СтрокаТЧ.КоличествоВПлан = СтрокаТЧ.КоличествоЗаказано;
		КонецЦикла;
		//3 итеррация: заполнение начальных остатков по данным БУ
		Для Каждого СтрокаТЧ Из ВременныйПрогнозОстатков Цикл
			Для НомерПериода = 1 По мПродолжительностьЦикла Цикл
				ТекущийПериод = ДобавитьМесяц(Объект.ПериодПланирования,НомерПериода-1);
				Если СтрокаТЧ.Общий Тогда
					ПараметрыПоиска = Новый Структура("Номенклатура, ПериодПланирования", СтрокаТЧ.Номенклатура,ТекущийПериод);
				Иначе
					ПараметрыПоиска = Новый Структура("Номенклатура, Подразделение, ПериодПланирования", СтрокаТЧ.Номенклатура,СтрокаТЧ.Подразделение,ТекущийПериод);
				КонецЕсли;
			    НайденнаяНоменклатура = ОстаткиНоменклатурыПолныйПрогноз.НайтиСтроки(ПараметрыПоиска);
				Для к=0 По НайденнаяНоменклатура.Количество()-1 Цикл
					Если к=0 Тогда
						//НайденнаяНоменклатура[к].ОстатокВходящий = СтрокаТЧ.ПрогнозныйОстаток;
						НайденнаяНоменклатура[к].ОстатокВходящий = НайденнаяНоменклатура[к].ОстатокВходящий+СтрокаТЧ.ОстатокБУ;
					Иначе
						НайденнаяНоменклатура[к].ОстатокВходящий = НайденнаяНоменклатура[к-1].ОстатокИсходящий;
					КонецЕсли;
					НайденнаяНоменклатура[к].КоличествоВПлан = ?(НайденнаяНоменклатура[к].КоличествоЗаказано>НайденнаяНоменклатура[к].ОстатокВходящий,НайденнаяНоменклатура[к].КоличествоЗаказано-НайденнаяНоменклатура[к].ОстатокВходящий,0);
					НайденнаяНоменклатура[к].ОстатокИсходящий = ?(НайденнаяНоменклатура[к].КоличествоЗаказано>НайденнаяНоменклатура[к].ОстатокВходящий,0,НайденнаяНоменклатура[к].ОстатокВходящий-НайденнаяНоменклатура[к].КоличествоЗаказано);
					//СтрокаТЧ.ПрогнозныйОстаток = НайденнаяНоменклатура[к].ОстатокИсходящий;
					СтрокаТЧ.ОстатокБУ = НайденнаяНоменклатура[к].ОстатокИсходящий;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		//4 итеррация: заполнение спецификации данными о прогнозных остатках
		Для Каждого СтрокаТЧ Из ОстаткиНоменклатурыПолныйПрогноз Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.ОстатокВходящий) Тогда
				ПараметрыПоиска = Новый Структура("Номенклатура,Подразделение,ПериодПланирования,Заявка"+?(СУчетомПроекта,",Проект",""), СтрокаТЧ.Номенклатура,СтрокаТЧ.Подразделение,СтрокаТЧ.ПериодПланирования,СтрокаТЧ.Заявка,СтрокаТЧ.Проект);
				НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыПоиска);
				Если Не НайденныеСтроки.Количество()=0 Тогда
					НайденныеСтроки[0].Количество = СтрокаТЧ.КоличествоВПлан;
					НайденныеСтроки[0].КоличествоПрогнозируемыеОстатки = СтрокаТЧ.ОстатокВходящий - СтрокаТЧ.ОстатокИсходящий;
					НайденныеСтроки[0].Примечание = НайденныеСтроки[0].Примечание+"Произведена корректировка по прогнозным остаткам. ";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		//5 итеррация: Проверка наличия нулевых номенклатур и исключение их из формируемого плана
		Для Каждого Таблица Из ТаблицыИсточники Цикл
			Для Каждого СтрокаТЧ Из Таблица Цикл
				Если СтрокаТЧ.Количество = 0 тогда
					СтрокаТЧ.Включать = Ложь;
					ДанныеОбъекта = фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка);
					ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
					ДанныеСтрокиТаблицы = фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка,"Товары");
					ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы,СтрокаТЧ);
					дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокиТаблицы);
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДанныеСтрокиТаблицы);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаСпискаСкладов()
	Запрос= Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация); 
	Запрос.Текст = "ВЫБРАТЬ
	               |	Склады.Ссылка КАК Склад,
	               |	узп_СоответствиеСкладовИЦФО.Подразделения КАК Подразделение
	               |ИЗ
	               |	Справочник.Склады КАК Склады
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.узп_СоответствиеСкладовИЦФО КАК узп_СоответствиеСкладовИЦФО
	               |		ПО узп_СоответствиеСкладовИЦФО.Склад = Склады.Ссылка";
	Результат = Запрос.Выполнить().Выгрузить();
	ОбщиеСклады.Загрузить(Результат);
КонецПроцедуры

&НаСервере 
Процедура НоменклатураПриИзмененииНаСервере(Идентификатор,ТЧ = "Товары")
	ДанныеОбъекта 							= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("ТипЦен",ТипЦен);
	ТекущиеДанные 							= Объект[ТЧ].НайтиПоИдентификатору(Идентификатор);
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Номенклатура) = Тип("СправочникСсылка.фин_ПлановаяНоменклатура") 
		И ТЧ = "Товары" Тогда
		ТекущиеДанные.ЕдиницаИзмерения = ТекущиеДанные.Номенклатура.ПлановаяЕдиницаИзмерения;
		ТекущиеДанные.Коэффициент = 1;
		узп_УправлениеЗакупками.ПолучитьЦенуПлановойНоменклатуры(ТекущиеДанные,Объект.Сценарий,ТипЦен);
		ТекущиеДанные.Поставщик = ТекущиеДанные.Номенклатура.ОсновнойПоставщик;
		Возврат;
	КонецЕсли;	
	
	ДанныеСтрокиТаблицы 					= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка,ТЧ);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
    
	МетаданныеДокумента 					= ДанныеОбъекта.Ссылка.Метаданные();
	СведенияОНоменклатуре 					= дог_УправлениеДоговорами.ПолучитьСведенияОНоменклатуре(ДанныеСтрокиТаблицы.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТЧ = "Товары" Тогда
		ДанныеСтрокиТаблицы.ЕдиницаИзмерения  	= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
		ДанныеСтрокиТаблицы.Коэффициент	   		= СведенияОНоменклатуре.Коэффициент;
	КонецЕсли;
	ДанныеСтрокиТаблицы.Цена			   	= СведенияОНоменклатуре.Цена;
	//дог_УправлениеДоговорами.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта, ТЧ, МетаданныеДокумента); 
	//дог_УправлениеДоговорами.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта,мВалютаРегламентированногоУчета,Истина);
	
	// Рассчитываем реквизиты табличной части.
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокиТаблицы);
	Если ТЧ = "Товары" Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеСтрокиТаблицы.ЕдиницаИзмерения) Тогда
			ДанныеСтрокиТаблицы.ЕдиницаИзмерения  = ДанныеСтрокиТаблицы.Номенклатура.БазоваяЕдиницаИзмерения;
			ДанныеСтрокиТаблицы.Коэффициент = 1;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСтрокиТаблицы.Поставщик = ДанныеСтрокиТаблицы.Номенклатура.ОсновнойПоставщик;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаКоличествоПриИзменении(ТЧ = "Товары", Строка = Неопределено)
	Если Строка = Неопределено Тогда
		ТекущиеДанные 						= Элементы[ТЧ].ТекущиеДанные;
	Иначе
		ТекущиеДанные = Строка;
	КонецЕсли;
	
	ДанныеОбъекта 							= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ДанныеСтрокиТаблицы 					= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка,ТЧ);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
    
	// Рассчитываем реквизиты табличной части.
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Товары" и ИмяТаблицы <> "Услуги"Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СведенияОСпискеНоменклатуры = дог_УправлениеДоговорами.ПолучитьСведенияОСпискеНоменклатуры(
		фин_ОбщегоНазначенияКлиентСервер.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект);
		
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		Если ИмяТаблицы = "Товары" Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
			СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
		КонецЕсли;

		СтрокаТабличнойЧасти = фин_ОбщегоНазначенияКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
						
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			Если ИмяТаблицы = "Товары" Тогда
				СтрокаТабличнойЧасти.Коэффициент = СведенияОНоменклатуре.Коэффициент;
			КонецЕсли;
		КонецЕсли;
		СтрокаТабличнойЧасти.ПериодПланирования = Объект.ПериодПланирования;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСвойство(Значение,Свойство)
	Возврат Значение[Свойство];
КонецФункции

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ПриОткрытии" в модулех форм всех документов.
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа,
//  ТекПользователь                - ссылка на справочник, определяет текущего пользователя  
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ТипОперации                    - необязаетельный, строка вида операции ("Покупка" или "Продажа"),
//                                   если не передан, то реквизиты, зависящие от вида операции, не заполняются
//
&НаСервереБезКонтекста
Процедура ЗаполнитьШапку(Объект)
	ТекПользователь = Пользователи.ТекущийПользователь();
  	Объект.ПериодПланирования = НачалоДня(ТекущаяДата());
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.СтруктурноеПодразделение) Тогда
		СтруктурноеПодразделение = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеСтруктурноеПодразделениеОрганизации");
		Если СтруктурноеПодразделение = Неопределено Тогда
			Объект.СтруктурноеПодразделение = Объект.Организация;
		ИначеЕсли ТипЗнч(СтруктурноеПодразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			Объект.СтруктурноеПодразделение = СтруктурноеПодразделение;
		Иначе
			Объект.СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ЗаполнитьШапкуДокумента()

&НаСервере
Процедура ОбработкаВыбораПодборПлановойНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Товары" и ИмяТаблицы <> "Услуги"Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("ТипЦен",ТипЦен);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		Если ИмяТаблицы = "Товары" Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
		КонецЕсли;

		СтрокаТабличнойЧасти = фин_ОбщегоНазначенияКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			//СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			Если ИмяТаблицы = "Товары" Тогда
				СтрокаТабличнойЧасти.Коэффициент = 1;
			КонецЕсли;
			СтрокаТабличнойЧасти.ПериодПланирования = Объект.ПериодПланирования;
			НоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти.ПолучитьИдентификатор(),ИмяТаблицы)
		КонецЕсли;
	КонецЦикла;
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры