
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПутьГруппаСтраницы 					= "Страницы";
	ПутьГруппаФормыСписокШагов 			= "ГруппаПанельЛевая";
	ОпределитьСоставШагов();
	ВестиУчетПоПроектам 				= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ВестиУчетПоПроектам");
	БюджетированиеПоОрганизациям 		= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям");
	ПериодичностьФормированияБюджетногоРегламента	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ПериодичностьФормированияБюджетногоРегламента");
	ОсновнойСценарийПланирования 		= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ОсновнойСценарийПланирования");
	Если НЕ ЗначениеЗаполнено(ПериодичностьФормированияБюджетногоРегламента) Тогда
		ПериодичностьФормированияБюджетногоРегламента = Перечисления.фин_Периодичность.Квартал;
	КонецЕсли;
	Если Параметры.Свойство("Регламент") Тогда
		ПрочитатьСуществующиеНастройки(Параметры.Регламент);
	Иначе
		Элементы.СоставНастроекДляСоздания.Видимость = Ложь;
	КонецЕсли;
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.КомпонентыКомплектаБюджетов);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.ДополнительныеПараметрыКомплекта);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.ДеревоНастроекРазрезов);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.ДеревоНастроекРасчетов);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.УточнениеРазрезов);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.Бюджеты);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.РасчетныеСтавки);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.ДеревоПользовательскихПараметров);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.СпискиДанныхКЗаполнению);
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.СоответствияКЗаполнению);
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.РежимИнтеграции()=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3
		ИЛИ фин_ОбщегоНазначенияВызовСервераПовтИсп.РежимИнтеграции()=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный Тогда
		НеФормироватьНастройкиФактическихДанных = Истина;
		Элементы.НеФормироватьНастройкиФактическихДанных.ТолькоПросмотр=Истина;
		Элементы.ОпределятьСтатьиБюджетаДДСПоУказанномуДляСтатьиДДС.Видимость = Ложь;
		Элементы.ОпределятьСтатьиБюджетаДДСПоУказанномуДляСтатьиДДС.ТолькоПросмотр = Истина;
		Элементы.ДекорацияФакт.Видимость = Ложь;
		Элементы.ГруппаФакт.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСуществующиеНастройки(Регламент)
	Объект.ДатаВводаВДействие = Регламент.Дата;
	Объект.ВариантРазвертыванияКомплектаБюджетов=Перечисления.фин_ВариантыРазвертыванияКомплектаБюджетов.ПриНаличииСуществующихНастроекКомплектаВнестиВНихИзменения;
	
	
	Для Каждого УстановленныйПараметр Из Регламент.УстановленныеПараметрыКомплекта Цикл
		Если ТипЗнч(УстановленныйПараметр.Параметр)=Тип("ПеречислениеСсылка.фин_ПараметрыУчетаФактическихДанных") Тогда
			ИмяЭлемента = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(УстановленныйПараметр.Параметр);
			ЭтотОбъект[ИмяЭлемента]=Истина;
		ИначеЕсли ТипЗнч(УстановленныйПараметр.Параметр)=Тип("ПеречислениеСсылка.фин_КомпонентыМастерБюджета") Тогда
			НоваяСтрока = Объект.КомпонентыКомплектаБюджетов.Добавить();
			НоваяСтрока.Использовать = Истина;
			НоваяСтрока.Компонент = УстановленныйПараметр.Параметр;
		ИначеЕсли ТипЗнч(УстановленныйПараметр.Параметр)=Тип("ПеречислениеСсылка.фин_УсловияИспользованияКомпонентМастерБюджета") Тогда
			НоваяСтрока = Объект.ДополнительныеПараметрыКомплекта.Добавить();
			НоваяСтрока.Значение = Истина;
			НоваяСтрока.Параметр = УстановленныйПараметр.Параметр;
			
			НоваяСтрока = Объект.РасчетныеОпцииБюджетов.Добавить();
			НоваяСтрока.Параметр = УстановленныйПараметр.Параметр;
		КонецЕсли;

	КонецЦикла;
	Для Каждого УстановленныйПараметр Из Регламент.ЗначенияПользовательскихПараметровКомплектаБюджетов Цикл
		Если ТипЗнч(УстановленныйПараметр.Параметр)=Тип("ПеречислениеСсылка.фин_КлассификаторРасчетныхПоказателей") Тогда
			НоваяСтрока = Объект.РасчетныеСтавки.Добавить();
			НоваяСтрока.Значение = УстановленныйПараметр.Значение;
			НоваяСтрока.РасчетныйПоказатель = УстановленныйПараметр.Параметр;
		ИначеЕсли ТипЗнч(УстановленныйПараметр.Параметр)=Тип("ПланВидовХарактеристикСсылка.фин_ПользовательскиеПараметрыКомплектаБюджетов") Тогда
			НоваяСтрока = Объект.ПользовательскиеПараметры.Добавить();
			НоваяСтрока.Значение = УстановленныйПараметр.Значение;
			НоваяСтрока.Параметр = УстановленныйПараметр.Параметр;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#Область ОбработчикиМеханизмовПошаговогоМастера

&НаСервере
Процедура ВыполнитьОбработчик(Страница)
	ЭтоБК = НЕ (фин_ОбщегоНазначенияВызовСервераПовтИсп.РежимИнтеграции()=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3
			ИЛИ фин_ОбщегоНазначенияВызовСервераПовтИсп.РежимИнтеграции()=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.Самостоятельный);
	Если Страница = "ГруппаКомпонентыМастерБюджета" Тогда
		СтарыеЗначения = Объект.КомпонентыКомплектаБюджетов.Выгрузить();
		Объект.КомпонентыКомплектаБюджетов.Очистить();
		Для Каждого Значение Из Метаданные.Перечисления.фин_КомпонентыМастерБюджета.ЗначенияПеречисления Цикл
			Если Значение.Имя = "ОперационныеБюджетыПроектнойКомпании" И НЕ ВестиУчетПоПроектам Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = Объект.КомпонентыКомплектаБюджетов.Добавить();
			НоваяСтрока.Компонент = Перечисления.фин_КомпонентыМастерБюджета[Значение.Имя];
			НоваяСтрока.Использовать = СтарыеЗначения.НайтиСтроки(Новый Структура("Компонент,Использовать",НоваяСтрока.Компонент,Истина)).Количество()>0;
		КонецЦикла;
	ИначеЕсли Страница = "ГруппаДополнительныеПараметрыКомплектаБюджетов" Тогда
		СтарыеЗначения = Объект.ДополнительныеПараметрыКомплекта.Выгрузить();
		Объект.ДополнительныеПараметрыКомплекта.Очистить();
		Если Объект.КомпонентыКомплектаБюджетов.НайтиСтроки(Новый Структура("Компонент,Использовать",Перечисления.фин_КомпонентыМастерБюджета.ОперационныеБюджетыПроектнойКомпании,Истина)).Количество()>0 Тогда
			НоваяСтрока = Объект.ДополнительныеПараметрыКомплекта.Добавить();
			НоваяСтрока.Параметр = Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.РучнойВводДанныхПоОплатеУслуг;
		КонецЕсли;
		Если Объект.КомпонентыКомплектаБюджетов.НайтиСтроки(Новый Структура("Компонент,Использовать",Перечисления.фин_КомпонентыМастерБюджета.ОперационныеБюджетыБазовые,Истина)).Количество()>0 Тогда
			НоваяСтрока = Объект.ДополнительныеПараметрыКомплекта.Добавить();
			НоваяСтрока.Параметр = Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.СтруктурироватьБюджетЗакупокПоФункциональномуНазначению;
			НоваяСтрока = Объект.ДополнительныеПараметрыКомплекта.Добавить();
			НоваяСтрока.Параметр = Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.ПриобретениеТМЗИУслугПланируетсяСНДС;
			Если ЭтоБК Тогда
				НоваяСтрока = Объект.ДополнительныеПараметрыКомплекта.Добавить();
				НоваяСтрока.Параметр = Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.ПланироватьЗатратыНаАмортизациюИСодержаниеВнеоборотныхАктивовВРазрезеОСиНМА;
			КонецЕсли;
		КонецЕсли;
		Если Объект.КомпонентыКомплектаБюджетов.НайтиСтроки(Новый Структура("Компонент,Использовать",Перечисления.фин_КомпонентыМастерБюджета.ОперационныеБюджетыПроизводства,Истина)).Количество()>0
			ИЛИ Объект.КомпонентыКомплектаБюджетов.НайтиСтроки(Новый Структура("Компонент,Использовать",Перечисления.фин_КомпонентыМастерБюджета.ОперационныеБюджетыПроектнойКомпании,Истина)).Количество()>0 Тогда
			НоваяСтрока = Объект.ДополнительныеПараметрыКомплекта.Добавить();
			НоваяСтрока.Параметр = Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.ПланироватьЗатратыПоОППВ;
			НоваяСтрока = Объект.ДополнительныеПараметрыКомплекта.Добавить();
			НоваяСтрока.Параметр = Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.ВестиПроизводственныеЗатратыВРазрезеПодразделений;
		КонецЕсли;
		Если ЭтоБК Тогда
			Если Объект.КомпонентыКомплектаБюджетов.НайтиСтроки(Новый Структура("Компонент,Использовать",Перечисления.фин_КомпонентыМастерБюджета.ОперационныеБюджетыБазовые,Истина)).Количество()>0
				ИЛИ Объект.КомпонентыКомплектаБюджетов.НайтиСтроки(Новый Структура("Компонент,Использовать",Перечисления.фин_КомпонентыМастерБюджета.БюджетНалогов,Истина)).Количество()>0 Тогда
				НоваяСтрока = Объект.ДополнительныеПараметрыКомплекта.Добавить();
				НоваяСтрока.Параметр = Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.ДетализироватьНалогиПоВидам;
			КонецЕсли;
		КонецЕсли;
		Если Объект.КомпонентыКомплектаБюджетов.НайтиСтроки(Новый Структура("Компонент,Использовать",Перечисления.фин_КомпонентыМастерБюджета.ОперационныеБюджетыПроизводства,Истина)).Количество()>0 Тогда
			НоваяСтрока = Объект.ДополнительныеПараметрыКомплекта.Добавить();
			НоваяСтрока.Параметр = Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.ВестиУчетПроизводстваПродукции;
			НоваяСтрока = Объект.ДополнительныеПараметрыКомплекта.Добавить();
			НоваяСтрока.Параметр = Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.НормативнаяКалькуляцияЗатратНаПроизводствоУслуг;
			НоваяСтрока = Объект.ДополнительныеПараметрыКомплекта.Добавить();
			НоваяСтрока.Параметр = Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.ВключатьНачисленияСО_СН_ОППВ_ВСоставПрямыхЗатратНаОплатуТруда;
		КонецЕсли;
		
		Для Каждого СтрокаПараметр Из Объект.ДополнительныеПараметрыКомплекта Цикл
			СтрокаПараметр.Значение = СтарыеЗначения.НайтиСтроки(Новый Структура("Параметр,Значение",СтрокаПараметр.Параметр,Истина)).Количество()>0;
		КонецЦикла;
		
	ИначеЕсли Страница = "ГруппаНастройкиРазрезовПланированияБюджетов" Тогда
		ВыбранныеВарианты = Новый Массив;
		Для Каждого СтрокаТЧ Из Объект.КомпонентыКомплектаБюджетов.НайтиСтроки(Новый Структура("Использовать",Истина)) Цикл
			ВыбранныеВарианты.Добавить(СтрокаТЧ.Компонент);
		КонецЦикла;
		Для Каждого СтрокаТЧ Из Объект.ДополнительныеПараметрыКомплекта.НайтиСтроки(Новый Структура("Значение",Истина)) Цикл
			ВыбранныеВарианты.Добавить(СтрокаТЧ.Параметр);
		КонецЦикла;
		ТаблицаБюджетов = фин_УправлениеБюджетнойМоделью.ПолучитьТаблицуПеречняБюджетов(ВыбранныеВарианты);
		Адрес = ПоместитьВоВременноеХранилище(ТаблицаБюджетов,УникальныйИдентификатор);
		Дерево = ДанныеФормыВЗначение(ДеревоНастроекРазрезов,Тип("ДеревоЗначений"));
		Дерево.Строки.Очистить();
		Для Каждого СтрокаБюджетов Из ТаблицаБюджетов Цикл
			Если ЗначениеЗаполнено(СтрокаБюджетов.ОпциональныеРазрезы) Тогда
				СтрокаБюджет = Дерево.Строки.Добавить();
				СтрокаБюджет.Бюджет = СтрокаБюджетов.Бюджет;
				Для Каждого ЭлементВыбора Из СтрокаБюджетов.ОпциональныеРазрезы Цикл
					СтрокаРазрез = СтрокаБюджет.Строки.Добавить();
					СтрокаРазрез.Бюджет = СтрокаБюджетов.Бюджет;
					СтрокаРазрез.Разрез = ЭлементВыбора.Ключ;
					СтрокаРазрез.Опция 	= ЭлементВыбора.Значение;
					СтрокаРазрез.Использовать = Объект.ОтмеченныеРазрезы.НайтиСтроки(Новый Структура("Бюджет,Разрез",СтрокаРазрез.Бюджет,СтрокаРазрез.Разрез)).Количество()>0;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	    ЗначениеВДанныеФормы(Дерево,ДеревоНастроекРазрезов);
		ВыбранныеВариантыКомплекта.Очистить();
		ВыбранныеВариантыКомплекта.ЗагрузитьЗначения(ВыбранныеВарианты);
	ИначеЕсли Страница = "ГруппаОпределениеРасчетныхПараметровБюджетов" Тогда
		//запомним разрезы
		Объект.ОтмеченныеРазрезы.Очистить();
		ДеревоРазрезы = ДанныеФормыВЗначение(ДеревоНастроекРазрезов,Тип("ДеревоЗначений"));
		СтрокиДерева = ДеревоРазрезы.Строки.НайтиСтроки(Новый Структура("Использовать",Истина),Истина);
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			НС = Объект.ОтмеченныеРазрезы.Добавить();
			НС.Бюджет = СтрокаДерева.Бюджет;
			НС.Разрез = СтрокаДерева.Разрез;
		КонецЦикла;
		
		//выполним действия
		ТаблицаБюджетов = ПолучитьИзВременногоХранилища(Адрес);
		Дерево = ДанныеФормыВЗначение(ДеревоНастроекРасчетов,Тип("ДеревоЗначений"));
		Дерево.Строки.Очистить();
		Для Каждого СтрокаБюджетов Из ТаблицаБюджетов Цикл
			Если ЗначениеЗаполнено(СтрокаБюджетов.ДополнительныеНастройки) Тогда
				СтрокаБюджет = Дерево.Строки.Добавить();
				СтрокаБюджет.Бюджет = СтрокаБюджетов.Бюджет;
				Для Каждого ЭлементВыбора Из СтрокаБюджетов.ДополнительныеНастройки Цикл
					СтрокаРазрез = СтрокаБюджет.Строки.Добавить();
					СтрокаРазрез.Бюджет = СтрокаБюджетов.Бюджет;
					СтрокаРазрез.Опция 	= Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета[ЭлементВыбора.Ключ];
					СтрокаРазрез.Использовать = Объект.РасчетныеОпцииБюджетов.НайтиСтроки(Новый Структура("Параметр",СтрокаРазрез.Опция)).Количество()>0;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	    ЗначениеВДанныеФормы(Дерево,ДеревоНастроекРасчетов);
	ИначеЕсли Страница = "ГруппаНастройкаДополнительныхРазрезовБюджетирования" Тогда
		Объект.РасчетныеОпцииБюджетов.Очистить();
		ВыбранныеВарианты = Новый Массив;
		Для Каждого СтрокаТЧ Из Объект.КомпонентыКомплектаБюджетов.НайтиСтроки(Новый Структура("Использовать",Истина)) Цикл
			ВыбранныеВарианты.Добавить(СтрокаТЧ.Компонент);
		КонецЦикла;
		Для Каждого СтрокаТЧ Из Объект.ДополнительныеПараметрыКомплекта.НайтиСтроки(Новый Структура("Значение",Истина)) Цикл
			ВыбранныеВарианты.Добавить(СтрокаТЧ.Параметр);
		КонецЦикла;
		ДеревоНастройки = ДанныеФормыВЗначение(ДеревоНастроекРасчетов,Тип("ДеревоЗначений"));
		СтрокиНастроек 	= ДеревоНастройки.Строки.НайтиСтроки(Новый Структура("Использовать",Истина),Истина);
		Для Каждого СтрокаТЧ Из СтрокиНастроек Цикл
			ВыбранныеВарианты.Добавить(СтрокаТЧ.Опция);
			
			НС = Объект.РасчетныеОпцииБюджетов.Добавить();
			НС.Параметр = СтрокаТЧ.Опция;
		КонецЦикла;
		ВыбранныеВариантыКомплекта.Очистить();
		ВыбранныеВариантыКомплекта.ЗагрузитьЗначения(ВыбранныеВарианты);
		
		
		ТаблицаБюджетов = ПолучитьИзВременногоХранилища(Адрес);
		ДеревоРазрезы = ДанныеФормыВЗначение(ДеревоНастроекРазрезов,Тип("ДеревоЗначений"));
		Объект.Бюджеты.Очистить();
		Объект.РазрезыБюджетов.Очистить();
		Объект.ПредшествующиеБюджеты.Очистить();
		Для Каждого СтрокаБюджетов Из ТаблицаБюджетов Цикл
			НС = Объект.Бюджеты.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаБюджетов);
			РазрезыБюджета = Новый Структура(СтрокаБюджетов.Разрезы);
			Для Каждого ЭлементРазрез Из РазрезыБюджета Цикл
				Если ЗначениеЗаполнено(СтрокаБюджетов.ОпциональныеРазрезы) И СтрокаБюджетов.ОпциональныеРазрезы.Свойство(ЭлементРазрез.Ключ) Тогда
					СтрокиДерева = ДеревоРазрезы.Строки.НайтиСтроки(Новый Структура("Бюджет,Разрез",СтрокаБюджетов.Бюджет,ЭлементРазрез.Ключ),Истина);
					Если СтрокиДерева.Количество()=0 Тогда
						Продолжить;
					КонецЕсли;
					Если СтрокиДерева[0].Использовать = Ложь Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли; 
				Если ЗначениеЗаполнено(СтрокаБюджетов.СвязьДополнительныхНастроекИРазрезов) И СтрокаБюджетов.СвязьДополнительныхНастроекИРазрезов.Свойство(ЭлементРазрез.Ключ) Тогда
					Если Метаданные.Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.ЗначенияПеречисления.Найти(СтрокаБюджетов.СвязьДополнительныхНастроекИРазрезов[ЭлементРазрез.Ключ])<>Неопределено Тогда
						НайденнаяОпция = ВыбранныеВарианты.Найти(Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета[СтрокаБюджетов.СвязьДополнительныхНастроекИРазрезов[ЭлементРазрез.Ключ]]);
					Иначе
						НайденнаяОпция = ВыбранныеВарианты.Найти(Перечисления.фин_КомпонентыМастерБюджета[СтрокаБюджетов.СвязьДополнительныхНастроекИРазрезов[ЭлементРазрез.Ключ]]);
					КонецЕсли;
					Если НайденнаяОпция = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если ЭтоБК=Ложь Тогда
					Если Перечисления.фин_КлассификаторРазрезовБюджетов[ЭлементРазрез.Ключ]= Перечисления.фин_КлассификаторРазрезовБюджетов.ВнеоборотныеАктивы
						ИЛИ Перечисления.фин_КлассификаторРазрезовБюджетов[ЭлементРазрез.Ключ]= Перечисления.фин_КлассификаторРазрезовБюджетов.НалогиСборыИОтчисления
						ИЛИ Перечисления.фин_КлассификаторРазрезовБюджетов[ЭлементРазрез.Ключ]= Перечисления.фин_КлассификаторРазрезовБюджетов.НоменклатурнаяГруппа
						ИЛИ Перечисления.фин_КлассификаторРазрезовБюджетов[ЭлементРазрез.Ключ]= Перечисления.фин_КлассификаторРазрезовБюджетов.СтатьиЗатрат Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				НоваяСтрока = Объект.РазрезыБюджетов.Добавить();
				НоваяСтрока.Бюджет = СтрокаБюджетов.Бюджет;
				НоваяСтрока.Разрез = Перечисления.фин_КлассификаторРазрезовБюджетов[ЭлементРазрез.Ключ];
			КонецЦикла;
			ПредшествующиеБюджеты = Новый Структура(СтрокаБюджетов.ПредшествующийБюджет);
			Для Каждого ЭлементПредшественник Из ПредшествующиеБюджеты Цикл
				НоваяСтрока = Объект.ПредшествующиеБюджеты.Добавить();
				НоваяСтрока.Бюджет = СтрокаБюджетов.Бюджет;
				НоваяСтрока.Предшественник = Перечисления.фин_КлассификаторБюджетов[ЭлементПредшественник.Ключ];
			КонецЦикла;
		КонецЦикла;
		
		
		Исключаемые = Новый Массив;
		Исключаемые.Добавить(Перечисления.фин_КлассификаторРазрезовБюджетов.Номенклатура);
		Исключаемые.Добавить(Перечисления.фин_КлассификаторРазрезовБюджетов.Проект);
		Исключаемые.Добавить(Перечисления.фин_КлассификаторРазрезовБюджетов.УправленческоеПодразделение);
		Если ВыбранныеВарианты.Найти(Перечисления.фин_КомпонентыМастерБюджета.ОперационныеБюджетыПроизводства)= Неопределено Тогда
			Исключаемые.Добавить(Перечисления.фин_КлассификаторРазрезовБюджетов.ПроизводимаяНоменклатура);
			Исключаемые.Добавить(Перечисления.фин_КлассификаторРазрезовБюджетов.НоменклатурнаяГруппа);
		ИначеЕсли ЭтоБК = ЛОЖЬ Тогда
			Исключаемые.Добавить(Перечисления.фин_КлассификаторРазрезовБюджетов.НоменклатурнаяГруппа);
		КонецЕсли;
		Если ЭтоБК = ЛОЖЬ ИЛИ ВыбранныеВарианты.Найти(Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.ДетализироватьНалогиПоВидам)= Неопределено Тогда
			Исключаемые.Добавить(Перечисления.фин_КлассификаторРазрезовБюджетов.НалогиСборыИОтчисления);
		КонецЕсли;
		Если ЭтоБК = ЛОЖЬ ИЛИ ВыбранныеВарианты.Найти(Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.ПланироватьЗатратыНаАмортизациюИСодержаниеВнеоборотныхАктивовВРазрезеОСиНМА)= Неопределено Тогда
			Исключаемые.Добавить(Перечисления.фин_КлассификаторРазрезовБюджетов.ВнеоборотныеАктивы);
		КонецЕсли;
		Если ДеревоРазрезы.Строки.НайтиСтроки(Новый Структура("Разрез,Использовать","СтатьиДДС",Истина),Истина).Количество()=0 Тогда
			Исключаемые.Добавить(Перечисления.фин_КлассификаторРазрезовБюджетов.СтатьиДДС);
		КонецЕсли;
		Если ЭтоБК = ЛОЖЬ ИЛИ (ВыбранныеВарианты.Найти(Перечисления.фин_КомпонентыМастерБюджета.ОперационныеБюджетыПроизводства)= Неопределено
			И ВыбранныеВарианты.Найти(Перечисления.фин_КомпонентыМастерБюджета.ОперационныеБюджетыПроектнойКомпании)= Неопределено
			И ВыбранныеВарианты.Найти(Перечисления.фин_КомпонентыМастерБюджета.ОперационныеБюджетыБазовые)= Неопределено) Тогда
			Исключаемые.Добавить(Перечисления.фин_КлассификаторРазрезовБюджетов.СтатьиЗатрат);
		КонецЕсли;
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Исключаемые",Исключаемые);
		Запрос.УстановитьПараметр("ВыводитьВсе",Объект.ВариантРазвертыванияКомплектаБюджетов=Перечисления.фин_ВариантыРазвертыванияКомплектаБюджетов.УстановитьНезависимоОтСуществующихНастроек);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_ВидыСубконтоБюджетирования.Ссылка КАК РазрезВИнформационнойБазе,
			|	фин_КлассификаторРазрезовБюджетов.Ссылка КАК РазрезКомплектаБюджетов
			|ИЗ
			|	Перечисление.фин_КлассификаторРазрезовБюджетов КАК фин_КлассификаторРазрезовБюджетов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.фин_ВидыСубконтоБюджетирования КАК фин_ВидыСубконтоБюджетирования
			|		ПО фин_КлассификаторРазрезовБюджетов.Ссылка = фин_ВидыСубконтоБюджетирования.ПозицияКлассификатора
			|ГДЕ
			|	(фин_ВидыСубконтоБюджетирования.Ссылка ЕСТЬ NULL ИЛИ &ВыводитьВсе) 
			|	И НЕ фин_КлассификаторРазрезовБюджетов.Ссылка В (&Исключаемые)";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		СтарыеЗначения =Объект.УточнениеРазрезов.Выгрузить(); 
		Объект.УточнениеРазрезов.Очистить();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НС = Объект.УточнениеРазрезов.Добавить();
			НС.Разрез 	= ВыборкаДетальныеЗаписи.РазрезКомплектаБюджетов;
			НС.РазрезИБ	= ВыборкаДетальныеЗаписи.РазрезВИнформационнойБазе;
			Строки = СтарыеЗначения.НайтиСтроки(Новый Структура("Разрез",НС.Разрез));
			Если Строки.Количество()>0 Тогда
				НС.РазрезИБ	= Строки[0].РазрезИБ;
			КонецЕсли;
		КонецЦикла;
	
	ИначеЕсли Страница = "ГруппаОпределениеНастроекФактическихДанных" Тогда
		Элементы.ОпределятьСтатьиБюджетаДДСПоУказанномуДляСтатьиДДС.Видимость = Объект.КомпонентыКомплектаБюджетов.НайтиСтроки(Новый Структура("Использовать,Компонент",Истина,Перечисления.фин_КомпонентыМастерБюджета.ФинансовыеБюджеты)).Количество()>0;
		Для Каждого ЭлементПеречисления Из Метаданные.Перечисления.фин_ПараметрыУчетаФактическихДанных.ЗначенияПеречисления Цикл
			Если ЭтотОбъект[ЭлементПеречисления.Имя]=Истина Тогда
				ВыбранныеВариантыКомплекта.Добавить(Перечисления.фин_ПараметрыУчетаФактическихДанных[ЭлементПеречисления.Имя]);
			Иначе
				Найдено = ВыбранныеВариантыКомплекта.НайтиПоЗначению(Перечисления.фин_ПараметрыУчетаФактическихДанных[ЭлементПеречисления.Имя]);
				Если Найдено<>Неопределено Тогда
					ВыбранныеВариантыКомплекта.Удалить(Найдено);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Страница = "ГруппаПросмотрПеречняСоздаваемыхБюджетов" Тогда
		
		ОбновитьПовторноИспользуемыеЗначения();
		Попытка
			УдалитьИзВременногоХранилища(АдресНастроек);
		Исключение
			
		КонецПопытки;
		АдресНастроек = "";
		Для Каждого СтрокаБюджетов Из Объект.Бюджеты Цикл
			СтрокаБюджетов.РазрезыУчета = "";
			СтрокиРазрезов = Объект.РазрезыБюджетов.НайтиСтроки(Новый Структура("Бюджет",СтрокаБюджетов.Бюджет));
			Для Каждого СтрокаРазрез Из СтрокиРазрезов Цикл
				СтрокаБюджетов.РазрезыУчета = СтрокаБюджетов.РазрезыУчета + ?(СтрокаБюджетов.РазрезыУчета ="","",", ")+ СтрокаРазрез.Разрез;
			КонецЦикла;
			СтрокаБюджетов.ФормируетсяПосле = "";
			СтрокиРазрезов = Объект.ПредшествующиеБюджеты.НайтиСтроки(Новый Структура("Бюджет",СтрокаБюджетов.Бюджет));
			Для Каждого СтрокаРазрез Из СтрокиРазрезов Цикл
				СтрокаБюджетов.ФормируетсяПосле = СтрокаБюджетов.ФормируетсяПосле + ?(СтрокаБюджетов.ФормируетсяПосле ="","",", ")+ СтрокаРазрез.Предшественник;
			КонецЦикла;
		КонецЦикла;
		
		// помещение расчетных настроек
		ВыбранныеВарианты 		= ВыбранныеВариантыКомплекта.ВыгрузитьЗначения();
		СтатьиБюджетов 			= фин_УправлениеБюджетнойМоделью.ПолучитьТаблицуПостатейногоСоставаБюджетов(ВыбранныеВарианты);
		АдресНастроек			= ПоместитьВоВременноеХранилище(Новый Структура("СтатьиБюджетов",СтатьиБюджетов),?(АдресНастроек="",фин_ОбщегоНазначенияВызовСервераПовтИсп.НовыйИдентификатор(),АдресНастроек));
		ВсеФормулыСуммы 		= фин_УправлениеБюджетнойМоделью.ФормулаСуммы(,ВыбранныеВарианты,Истина);
		ВсеФормулыКоличества 	= фин_УправлениеБюджетнойМоделью.ФормулаКоличества(,ВыбранныеВарианты,Истина);
		ВсеЗависимостиБазы 		= фин_УправлениеБюджетнойМоделью.ЗависимостиПоказателя(,,ВыбранныеВарианты,,,Истина);
		Модели 					= фин_УправлениеБюджетнойМоделью.ПроизводственнаяМодельПоказателя(,,ВыбранныеВарианты,,Истина);
		МоделиРаспределения		= фин_УправлениеБюджетнойМоделью.МодельРаспределенияПоказателя(,,ВыбранныеВарианты,,Истина);
		ФактическиеДанные		= фин_УправлениеБюджетнойМоделью.ПолучитьТаблицуНастроекФактическихДанных(ВыбранныеВарианты,Истина);
		НастройкиСоответствий	= фин_УправлениеБюджетнойМоделью.НастройкиСоответствий(ВыбранныеВарианты,,Истина);
		АдресНастроек			= ПоместитьВоВременноеХранилище(Новый Структура("СтатьиБюджетов,ВсеФормулыСуммы,ВсеФормулыКоличества,ВсеЗависимостиБазы,Модели,МоделиРаспределения,ФактическиеДанные,РазрезыБюджетов,НастройкиСоответствий",СтатьиБюджетов,ВсеФормулыСуммы,ВсеФормулыКоличества,ВсеЗависимостиБазы,Модели,МоделиРаспределения,ФактическиеДанные,Объект.РазрезыБюджетов.Выгрузить(),НастройкиСоответствий),?(АдресНастроек="",фин_ОбщегоНазначенияВызовСервераПовтИсп.НовыйИдентификатор(),АдресНастроек));
		
	ИначеЕсли Страница = "ГруппаОпределениеЗначенийРасчетныхСтавок" Тогда
		СтарыеЗначения = Объект.РасчетныеСтавки.Выгрузить();
		Объект.РасчетныеСтавки.Очистить();
		
		НоваяСтрока = Объект.РасчетныеСтавки.Добавить();
		НоваяСтрока.РасчетныйПоказатель = Перечисления.фин_КлассификаторРасчетныхПоказателей.СтавкаСН;
		НоваяСтрока.Значение = 11;
		
		НоваяСтрока = Объект.РасчетныеСтавки.Добавить();
		НоваяСтрока.РасчетныйПоказатель = Перечисления.фин_КлассификаторРасчетныхПоказателей.СтавкаСО;
		НоваяСтрока.Значение = 5;
		
		НоваяСтрока = Объект.РасчетныеСтавки.Добавить();
		НоваяСтрока.РасчетныйПоказатель = Перечисления.фин_КлассификаторРасчетныхПоказателей.СтавкаИПН;
		НоваяСтрока.Значение = 10;
		
		НоваяСтрока = Объект.РасчетныеСтавки.Добавить();
		НоваяСтрока.РасчетныйПоказатель = Перечисления.фин_КлассификаторРасчетныхПоказателей.СтавкаОПВ;
		НоваяСтрока.Значение = 10;
		
		Если ВыбранныеВариантыКомплекта.НайтиПоЗначению(Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.ПланироватьЗатратыПоОППВ)<>Неопределено Тогда
			
			НоваяСтрока = Объект.РасчетныеСтавки.Добавить();
			НоваяСтрока.РасчетныйПоказатель = Перечисления.фин_КлассификаторРасчетныхПоказателей.СтавкаОППВ;
			НоваяСтрока.Значение = 5;
			
			НоваяСтрока = Объект.РасчетныеСтавки.Добавить();
			НоваяСтрока.РасчетныйПоказатель = Перечисления.фин_КлассификаторРасчетныхПоказателей.ДоляДоходовОблагаемыхОППВ;
			НоваяСтрока.Значение = 0.5;
		
		КонецЕсли;
		
		НоваяСтрока = Объект.РасчетныеСтавки.Добавить();
		НоваяСтрока.РасчетныйПоказатель = Перечисления.фин_КлассификаторРасчетныхПоказателей.СтавкаНДС;
		НоваяСтрока.Значение = 12;
		
		Если ВыбранныеВариантыКомплекта.НайтиПоЗначению(Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.РассчитыватьЗапасНаКонецПериодаОтПродаж)<>Неопределено Тогда
			НоваяСтрока = Объект.РасчетныеСтавки.Добавить();
			НоваяСтрока.РасчетныйПоказатель = Перечисления.фин_КлассификаторРасчетныхПоказателей.ПроцентЗапасаОтОбъемаРеализации;
			НоваяСтрока.Значение = 10;
		КонецЕсли;
		Если ВыбранныеВариантыКомплекта.НайтиПоЗначению(Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.РассчитыватьЗапасТоваровНаКонецПериодаОтПродаж)<>Неопределено Тогда
			НоваяСтрока = Объект.РасчетныеСтавки.Добавить();
			НоваяСтрока.РасчетныйПоказатель = Перечисления.фин_КлассификаторРасчетныхПоказателей.ПроцентЗапасаОтПродаж;
			НоваяСтрока.Значение = 10;
		КонецЕсли;
		Если ВыбранныеВариантыКомплекта.НайтиПоЗначению(Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.РассчитыватьЗапасСырьяНаКонецПериодаОтПотребностей)<>Неопределено Тогда
			НоваяСтрока = Объект.РасчетныеСтавки.Добавить();
			НоваяСтрока.РасчетныйПоказатель = Перечисления.фин_КлассификаторРасчетныхПоказателей.ПроцентЗапасаОтПотребности;
			НоваяСтрока.Значение = 10;
		КонецЕсли;
		Для Каждого СтрокаПараметр Из Объект.РасчетныеСтавки Цикл
			СтрокиЗначение = СтарыеЗначения.НайтиСтроки(Новый Структура("РасчетныйПоказатель",СтрокаПараметр.РасчетныйПоказатель));
			Если СтрокиЗначение.Количество()>0 Тогда
				СтрокаПараметр.Значение = СтрокиЗначение[0].Значение;
			КонецЕсли;
		КонецЦикла;
		
		// пользовательские параметры
		СтарыеЗначения = Объект.ПользовательскиеПараметры.Выгрузить();
		ДеревоПользовательскихПараметров.ПолучитьЭлементы().Очистить();
		Если ВыбранныеВариантыКомплекта.НайтиПоЗначению(Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.РассчитыватьПоступлениеОплатыОтПокупателейРаспределениемПоПериодам)<>Неопределено Тогда
			ПараметрПользователя = ДеревоПользовательскихПараметров.ПолучитьЭлементы().Добавить();
			ПараметрПользователя.Параметр 	= ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПланированиеПоступленияОплатыОтПокупателей;
			ПараметрПользователя.ЭтоГруппа 	= Истина;
			
			ПараметрПользователяВложенный = ПараметрПользователя.ПолучитьЭлементы().Добавить();
			ПараметрПользователяВложенный.Параметр 		= ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.АвансыОтПокупателей;
			ПараметрПользователяВложенный.ЭтоГруппа 	= Истина;
			
			ПараметрПользователяДетальный = ПараметрПользователяВложенный.ПолучитьЭлементы().Добавить();
			ПараметрПользователяДетальный.Параметр 		= ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПроцентСуммыВыручкиОтносимойНаАвансы;
			
			ПараметрПользователяДетальный = ПараметрПользователяВложенный.ПолучитьЭлементы().Добавить();
			ПараметрПользователяДетальный.Параметр 		= ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПрофильРаспределенияПоПериодамДляАвансов;
			
			ПараметрПользователяВложенный = ПараметрПользователя.ПолучитьЭлементы().Добавить();
			ПараметрПользователяВложенный.Параметр 		= ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ОплатаПоФактуОтПокупателей;
			ПараметрПользователяВложенный.ЭтоГруппа 	= Истина;
			
			ПараметрПользователяДетальный = ПараметрПользователяВложенный.ПолучитьЭлементы().Добавить();
			ПараметрПользователяДетальный.Параметр 		= ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПроцентСуммыВыручкиОтносимойНаОплатуПоФакту;
			
			ПараметрПользователяДетальный = ПараметрПользователяВложенный.ПолучитьЭлементы().Добавить();
			ПараметрПользователяДетальный.Параметр 		= ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПрофильРаспределенияПоПериодамДляОплатыПоФакту;
		КонецЕсли;
		Если ВыбранныеВариантыКомплекта.НайтиПоЗначению(Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.РассчитыватьОплатуПоставщикамРаспределениемПоПериодам)<>Неопределено Тогда
			ПараметрПользователя = ДеревоПользовательскихПараметров.ПолучитьЭлементы().Добавить();
			ПараметрПользователя.Параметр 	= ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПланированиеОплатыПоставщикам;
			ПараметрПользователя.ЭтоГруппа 	= Истина;
			
			ПараметрПользователяВложенный = ПараметрПользователя.ПолучитьЭлементы().Добавить();
			ПараметрПользователяВложенный.Параметр 		= ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.АвансыПоставщикам;
			ПараметрПользователяВложенный.ЭтоГруппа 	= Истина;
			
			ПараметрПользователяДетальный = ПараметрПользователяВложенный.ПолучитьЭлементы().Добавить();
			ПараметрПользователяДетальный.Параметр 		= ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПроцентСуммыПриобретенныхТМЗИУслугОтносимойНаАвансы;
			
			ПараметрПользователяДетальный = ПараметрПользователяВложенный.ПолучитьЭлементы().Добавить();
			ПараметрПользователяДетальный.Параметр 		= ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПрофильРаспределенияПоПериодамДляАвансовПоставщикам;
			
			ПараметрПользователяВложенный = ПараметрПользователя.ПолучитьЭлементы().Добавить();
			ПараметрПользователяВложенный.Параметр 		= ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ОплатаПоставщикамПоФакту;
			ПараметрПользователяВложенный.ЭтоГруппа 	= Истина;
			
			ПараметрПользователяДетальный = ПараметрПользователяВложенный.ПолучитьЭлементы().Добавить();
			ПараметрПользователяДетальный.Параметр 		= ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПроцентСуммыПриобретенныхТМЗИУслугОтносимойНаОплатуПоФакту;
			
			ПараметрПользователяДетальный = ПараметрПользователяВложенный.ПолучитьЭлементы().Добавить();
			ПараметрПользователяДетальный.Параметр 		= ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПрофильРаспределенияПоПериодамДляОплатыПоставщикамПоФакту;
		КонецЕсли;

		ПараметрПользователя = ДеревоПользовательскихПараметров.ПолучитьЭлементы().Добавить();
		ПараметрПользователя.Параметр 	= ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.Ценообразование;
		ПараметрПользователя.ЭтоГруппа 	= Истина;
		
		ПараметрПользователяДетальный = ПараметрПользователя.ПолучитьЭлементы().Добавить();
		ПараметрПользователяДетальный.Параметр 		= ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенЗакупки;
		
		ПараметрПользователяДетальный = ПараметрПользователя.ПолучитьЭлементы().Добавить();
		ПараметрПользователяДетальный.Параметр 		= ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенЗакупкиБезНДС;
		
		ПараметрПользователяДетальный = ПараметрПользователя.ПолучитьЭлементы().Добавить();
		ПараметрПользователяДетальный.Параметр 		= ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенРеализации;
		
		Если ВыбранныеВариантыКомплекта.НайтиПоЗначению(Перечисления.фин_КомпонентыМастерБюджета.ОперационныеБюджетыПроизводства)<>Неопределено Тогда
		
			ПараметрПользователяДетальный = ПараметрПользователя.ПолучитьЭлементы().Добавить();
			ПараметрПользователяДетальный.Параметр 		= ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенПлановойСебестоимости;
		КонецЕсли;
		УстановитьЗначенияПараметровКБ(ДеревоПользовательскихПараметров.ПолучитьЭлементы(),СтарыеЗначения);
	ИначеЕсли Страница = "ГруппаЗавершениеНастройки" Тогда
		Объект.ПользовательскиеПараметры.Очистить();
		ДеревоНастроек 	= ДанныеФормыВЗначение(ДеревоПользовательскихПараметров,Тип("ДеревоЗначений"));
		СтрокиДерева 	= ДеревоНастроек.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа",Ложь),Истина);
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			НС = Объект.ПользовательскиеПараметры.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаДерева);
		КонецЦикла;
	//	
	//ИначеЕсли Страница = "ГруппаЗавершениеНастройки" Тогда
		//Если АдресНастроек<>"" Тогда
		//	Попытка
		//		УдалитьИзВременногоХранилища(АдресНастроек);
		//	Исключение
		//	КонецПопытки;
		//КонецЕсли;
		//ОбновитьПовторноИспользуемыеЗначения();
		//АдресНастроек = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикКлиент(Страница)
	Если Страница = "ГруппаНастройкиРазрезовПланированияБюджетов" Тогда
		Для Каждого ЭлементДерева Из ДеревоНастроекРазрезов.ПолучитьЭлементы() Цикл
			Элементы.ДеревоНастроекРазрезов.Развернуть(ЭлементДерева.ПолучитьИдентификатор(),Истина);
		КонецЦикла;
	ИначеЕсли Страница = "ГруппаОпределениеРасчетныхПараметровБюджетов" Тогда
		Для Каждого ЭлементДерева Из ДеревоНастроекРасчетов.ПолучитьЭлементы() Цикл
			Элементы.ДеревоНастроекРасчетов.Развернуть(ЭлементДерева.ПолучитьИдентификатор(),Истина);
		КонецЦикла;
	ИначеЕсли Страница = "ГруппаОпределениеЗначенийРасчетныхСтавок" Тогда
		Для Каждого ЭлементДерева Из ДеревоПользовательскихПараметров.ПолучитьЭлементы() Цикл
			Элементы.ДеревоПользовательскихПараметров.Развернуть(ЭлементДерева.ПолучитьИдентификатор(),Истина);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОпределитьСоставШагов()
	СписокШагов.Очистить();
	КоличествоШагов = 10;
	СписокШагов.Добавить("ГруппаОсновныеПараметрыУчета");//1
	СписокШагов.Добавить("ГруппаКомпонентыМастерБюджета");//2
	СписокШагов.Добавить("ГруппаДополнительныеПараметрыКомплектаБюджетов");//3
	СписокШагов.Добавить("ГруппаНастройкиРазрезовПланированияБюджетов");//4
	СписокШагов.Добавить("ГруппаОпределениеРасчетныхПараметровБюджетов");//5
	СписокШагов.Добавить("ГруппаНастройкаДополнительныхРазрезовБюджетирования");//6
	//Если фин_ОбщегоНазначенияВызовСервераПовтИсп.РежимИнтеграции()=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана
	//	ИЛИ фин_ОбщегоНазначенияВызовСервераПовтИсп.РежимИнтеграции()=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана
	//	ИЛИ фин_ОбщегоНазначенияВызовСервераПовтИсп.РежимИнтеграции()=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 Тогда
		СписокШагов.Добавить("ГруппаОпределениеНастроекФактическихДанных");//7
	//КонецЕсли;
	СписокШагов.Добавить("ГруппаПросмотрПеречняСоздаваемыхБюджетов");//8
	СписокШагов.Добавить("ГруппаОпределениеЗначенийРасчетныхСтавок");//9
	//СписокШагов.Добавить("ГруппаНастройкиСоответствияФактическихИПлановыхДанных");//10
	СписокШагов.Добавить("ГруппаЗавершениеНастройки");//11
	НастроитьСоставШагов(ЭтотОбъект,"Страницы","ГруппаПанельЛевая");
	ТекущийШаг 						= 1;
	ВыделитьАктивныйШаг(ЭтотОбъект);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НастроитьСоставШагов(Форма,ПутьГруппаСтраницы,ПутьГруппаФормыСписокШагов)
	Элементы 	= Форма.Элементы;
	СписокШагов = Форма.СписокШагов;
	ПутьГруппаСтраницы 				= Форма.ПутьГруппаСтраницы;
	ПутьГруппаФормыСписокШагов 		= Форма.ПутьГруппаФормыСписокШагов;
	Пока Элементы.Найти(ПутьГруппаФормыСписокШагов).ПодчиненныеЭлементы.Количество()>0 Цикл
		Элементы.Удалить(Элементы.Найти(ПутьГруппаФормыСписокШагов).ПодчиненныеЭлементы[0]);
	КонецЦикла;
	Для Инд = 1 По Форма.КоличествоШагов Цикл
		ИмяЭлемента = "ДекорацияШаг"+Строка(Инд);
		НовыйЭлемент 			= Элементы.Добавить(ИмяЭлемента,Тип("ДекорацияФормы"),Элементы.Найти(ПутьГруппаФормыСписокШагов));
		НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Заголовок 	= Строка(Инд)+". "+ Элементы.Найти(СписокШагов.Получить(Инд-1).Значение).Заголовок;
		НовыйЭлемент.ЦветТекста = Новый Цвет(25,25,112);
		//НовыйЭлемент.ВысотаЗаголовка		= 2;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВыделитьАктивныйШаг(Форма)
	Элементы 	= Форма.Элементы;
	СписокШагов = Форма.СписокШагов;
	Для Инд = 1 По Форма.КоличествоШагов Цикл
		Элементы.Найти("ДекорацияШаг"+Строка(Инд)).Шрифт = Новый Шрифт(,?(Инд = Форма.ТекущийШаг,9,8),Инд = Форма.ТекущийШаг);
	КонецЦикла;
	ПутьГруппаСтраницы	= Форма.ПутьГруппаСтраницы;
	Элементы[ПутьГруппаСтраницы].ТекущаяСтраница = Элементы[ПутьГруппаСтраницы].ПодчиненныеЭлементы[СписокШагов.Получить(Форма.ТекущийШаг-1).Значение];
	Элементы.КнопкаНазад.Видимость 		= Форма.ТекущийШаг <> 1;
	Элементы.КнопкаДалее.Видимость 		= Форма.ТекущийШаг <> Форма.КоличествоШагов;
	Элементы.КнопкаЗавершить.Видимость 	= Форма.ТекущийШаг = Форма.КоличествоШагов;
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	ТекущийШаг = ТекущийШаг - 1;
	ВыделитьАктивныйШаг(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	Если ПроверитьДанныеШага() Тогда
		Если ТекущийШаг = 7 Тогда
			Состояние("Выполняется генерация структуры бюджетов для предварительного просмотра. Это может занять некоторое время. Подождите...");	
		КонецЕсли;
		ТекущийШаг = ТекущийШаг + 1;
		ВыполнитьОбработчик(СписокШагов.Получить(ТекущийШаг-1).Значение);
		ВыполнитьОбработчикКлиент(СписокШагов.Получить(ТекущийШаг-1).Значение);
		ВыделитьАктивныйШаг(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДанныеШага()
	СписокРеквизитовДляПроверки = Новый СписокЗначений;
	Если ТекущийШаг = 1 Тогда
	    СписокРеквизитовДляПроверки.Добавить("ДатаВводаВДействие",						"Дата ввода в действие");
	    СписокРеквизитовДляПроверки.Добавить("ВариантРазвертыванияКомплектаБюджетов",	"Вариант развертывания комплекта бюджетов");
//	    СписокРеквизитовДляПроверки.Добавить("ОсновнойСценарийПланирования",			"Основной сценарий планирования");
		Если НЕ ЗначениеЗаполнено(ОсновнойСценарийПланирования) Тогда
			ПроверкаВыполнена = Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено поле ""Основной сценарий планирования""");
			Возврат Ложь;
		КонецЕсли;
	//    СписокРеквизитовДляПроверки.Добавить("ПериодПланирования",	"Период планирования");
	//    СписокРеквизитовДляПроверки.Добавить("СценарийФормируемый",	"Сценарий");
	//	Если БюджетированиеПоОрганизациям Тогда
	//    	СписокРеквизитовДляПроверки.Добавить("Организация",		"Организация");
	//	КонецЕсли;
	//ИначеЕсли ТекущийШаг = 2 Тогда
	//    СписокРеквизитовДляПроверки.Добавить("ПериодПланированияКопируемый",	"Период планирования");
	//    СписокРеквизитовДляПроверки.Добавить("Сценарий",	"Сценарий");
	КонецЕсли;
	Если ТекущийШаг = 6 Тогда
		КоличествоИмеющихсяДополнительныхРазрезов = КоличествоИмеющихсяДополнительныхРазрезов();
		Если КоличествоИмеющихсяДополнительныхРазрезов + Объект.УточнениеРазрезов.НайтиСтроки(Новый Структура("РазрезИБ",ПредопределенноеЗначение("ПланВидовХарактеристик.фин_ВидыСубконтоБюджетирования.ПустаяСсылка"))).Количество()> 10 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Количество создаваемых дополнительных разрезов, с учетом уже имеющихся в информационной базе, превышает допустимое количество!
			|Попробуйте использовать уже существующие разрезы, либо сократите детализацию создаваемых бюджетов");
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТекущийШаг = 2 Тогда
		Если Объект.КомпонентыКомплектаБюджетов.НайтиСтроки(Новый Структура("Использовать",Истина)).Количество()= 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран ни один компонент мастер-бюджета");
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТекущийШаг = 9 Тогда
		СуммаДолейОплата 		= 0;
		СуммаДолейПоступления 	= 0;
		Если ЕстьНезаполненныеПараметры(ДеревоПользовательскихПараметров.ПолучитьЭлементы(),СуммаДолейОплата,СуммаДолейПоступления) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если СуммаДолейОплата <> 0 И СуммаДолейОплата<>100 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сумма параметров """+ПредопределенноеЗначение("ПланВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПроцентСуммыПриобретенныхТМЗИУслугОтносимойНаАвансы")+""" и """+ПредопределенноеЗначение("ПланВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПроцентСуммыПриобретенныхТМЗИУслугОтносимойНаОплатуПоФакту")+""" должна равняться 100 %");
			Возврат Ложь;
		КонецЕсли;
		Если СуммаДолейПоступления <> 0 И СуммаДолейПоступления<>100 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сумма параметров """+ПредопределенноеЗначение("ПланВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПроцентСуммыВыручкиОтносимойНаАвансы")+""" и """+ПредопределенноеЗначение("ПланВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПроцентСуммыВыручкиОтносимойНаОплатуПоФакту")+""" должна равняться 100 %");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	ПроверкаВыполнена = Истина;
	Для Каждого Проверка Из СписокРеквизитовДляПроверки Цикл
		Если НЕ ЗначениеЗаполнено(Объект[Проверка.Значение]) Тогда
			ПроверкаВыполнена = Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено поле """+Проверка.Представление+"""");
		КонецЕсли;
	КонецЦикла;
	Возврат ПроверкаВыполнена;
КонецФункции

&НаКлиенте
Процедура Завершить(Команда)
	Если ЗавершитьНаСервере() Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаНастройкиСоответствияФактическихИПлановыхДанных;
		Элементы.ГруппаКомандыУправления.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ЗавершитьНаСервере()
	ОбновитьПовторноИспользуемыеЗначения();
	НачатьТранзакцию();
	// - очистка существующих
	Если Объект.ВариантРазвертыванияКомплектаБюджетов=Перечисления.фин_ВариантыРазвертыванияКомплектаБюджетов.УстановитьНезависимоОтСуществующихНастроек Тогда
		Обработки.фин_НастройкаКомплектаБюджетов.УдалитьУжеИмеющиесяНастройкиКомплекта(Истина);
	КонецЕсли;
	// - запись
	Константы.фин_ВестиУчетПоПроектам.Установить(ВестиУчетПоПроектам);	
	Константы.фин_ОсновнойСценарийПланирования.Установить(ОсновнойСценарийПланирования);
	//Константы.фин_ВестиУчетОстаточныхФинансовыхПоказателей.Установить(Истина);
	Константы.фин_ПериодичностьФормированияБюджетногоРегламента.Установить(ПериодичностьФормированияБюджетногоРегламента);
	Константы.фин_УчитыватьФактическиеДанныеПоДвижениямРегистров.Установить(Истина);
	Если ВыбранныеВариантыКомплекта.НайтиПоЗначению(Перечисления.фин_КомпонентыМастерБюджета.ОперационныеБюджетыПроизводства)<>Неопределено Тогда
		Константы.фин_ИспользоватьМоделиРаспределения.Установить(Истина);
		Константы.фин_ИспользоватьПроизводственныеМодели.Установить(Истина);
	КонецЕсли;
	Если ВыбранныеВариантыКомплекта.НайтиПоЗначению(Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.РассчитыватьОплатуПоставщикамРаспределениемПоПериодам)<>Неопределено
		ИЛИ ВыбранныеВариантыКомплекта.НайтиПоЗначению(Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.РассчитыватьПоступлениеОплатыОтПокупателейРаспределениемПоПериодам)<>Неопределено Тогда
		Константы.фин_ИспользоватьЗависимостиФинансовыхПоказателей.Установить(Истина);
	КонецЕсли;
	// создание разрезов
	Если СтруктураНастроекДляСоздания=Неопределено ИЛИ СтруктураНастроекДляСоздания.Свойство("РазрезыПланирования") И СтруктураНастроекДляСоздания.РазрезыПланирования=Истина Тогда
		Попытка 
			Если СоздатьРазрезыПланирования() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Настроены разрезы планирования");
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Формирование настроек прервано на этапе настройки разрезов планирования:
			|	"+ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресНастроек);
	// создание бюджетов и финансовых показателей
	СозданныеФП = Неопределено;
	СозданныеСтатьи = Неопределено;
	Если СтруктураНастроекДляСоздания=Неопределено ИЛИ СтруктураНастроекДляСоздания.Свойство("БюджетыИФинансовыеПоказатели") И СтруктураНастроекДляСоздания.БюджетыИФинансовыеПоказатели=Истина Тогда
		Попытка 
			Если СоздатьСтруктуруБюджетов(ДанныеХранилища,СозданныеФП,СозданныеСтатьи) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Настроен перечень бюджетов и статей");
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Формирование настроек прервано на этапе настройки перечня бюджетов и статей:
			|	"+ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	// создание расчетных показателей
	Если СтруктураНастроекДляСоздания=Неопределено ИЛИ СтруктураНастроекДляСоздания.Свойство("РасчетныеПоказатели") И СтруктураНастроекДляСоздания.РасчетныеПоказатели=Истина Тогда
		Попытка 
			Если СоздатьРасчетныеПоказатели() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Настроены расчетные показатели бюджетов");
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Формирование настроек прервано на этапе настройки расчетных показателей бюджетов:
			|	"+ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	ВыбранныеВарианты 		= ВыбранныеВариантыКомплекта.ВыгрузитьЗначения();
	ВсеФормулыСуммы 		= фин_УправлениеБюджетнойМоделью.ФормулаСуммы(,ВыбранныеВарианты);
	ВсеФормулыКоличества 	= фин_УправлениеБюджетнойМоделью.ФормулаКоличества(,ВыбранныеВарианты);
	ПользовательскиеПараметры = Новый Соответствие;
	Для Каждого П_Параметр Из Объект.ПользовательскиеПараметры Цикл
		ПользовательскиеПараметры.Вставить(П_Параметр.Параметр,П_Параметр.Значение);
	КонецЦикла;
	ВсеЗависимостиБазы 		= фин_УправлениеБюджетнойМоделью.ЗависимостиПоказателя(,,ВыбранныеВарианты,ПользовательскиеПараметры);
	Модели 					= фин_УправлениеБюджетнойМоделью.ПроизводственнаяМодельПоказателя(,,ВыбранныеВарианты);
	МоделиРаспределения		= фин_УправлениеБюджетнойМоделью.МодельРаспределенияПоказателя(,,ВыбранныеВарианты);
	ФактическиеДанные		= фин_УправлениеБюджетнойМоделью.ПолучитьТаблицуНастроекФактическихДанных(ВыбранныеВарианты);
	НастройкиСоответствий	= фин_УправлениеБюджетнойМоделью.НастройкиСоответствий(ВыбранныеВарианты);
	ПравилаРасчетаРазрезов	= фин_УправлениеБюджетнойМоделью.ПравилоРасчетаРазреза(,ВыбранныеВарианты);
	// создание регламента
	Если СтруктураНастроекДляСоздания=Неопределено ИЛИ СтруктураНастроекДляСоздания.Свойство("Регламент") И СтруктураНастроекДляСоздания.Регламент=Истина Тогда
		Попытка 
			Если СоздатьРегламент() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Настроен регламент формирования бюджетов");
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Формирование настроек прервано на этапе настройки регламента формирования бюджетов:
			|	"+ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	// создание формул расчета
	Если СтруктураНастроекДляСоздания=Неопределено ИЛИ СтруктураНастроекДляСоздания.Свойство("Формулы") И СтруктураНастроекДляСоздания.Формулы=Истина Тогда
		Попытка 
			Если СоздатьФормулы(ВсеФормулыСуммы,ВсеФормулыКоличества,СозданныеФП,СозданныеСтатьи) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Настроены формулы расчета");
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Формирование настроек прервано на этапе настройки формул расчета:
			|	"+ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	// создание зависимостей и профилей распределения по периодам
	Если СтруктураНастроекДляСоздания=Неопределено ИЛИ СтруктураНастроекДляСоздания.Свойство("Зависимости") И СтруктураНастроекДляСоздания.Зависимости=Истина Тогда
		Попытка 
			Если СоздатьЗависимости(ВсеЗависимостиБазы) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Настроены зависимости финансовых показателей");
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Формирование настроек прервано на этапе настройки зависимостей финансовых показателей:
			|	"+ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	Если СтруктураНастроекДляСоздания=Неопределено ИЛИ СтруктураНастроекДляСоздания.Свойство("Модели") И СтруктураНастроекДляСоздания.Модели=Истина Тогда
		// создание производственных моделей
		Попытка 
			Если СоздатьПроизводственныеМодели(Модели) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Настроены производственные модели");
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Формирование настроек прервано на этапе настройки производственных моделей:
			|	"+ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		// создание моделей распределения
		Попытка 
			Если СоздатьМоделиРаспределения(МоделиРаспределения) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Настроены модели распределения");
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Формирование настроек прервано на этапе настройки моделей распределения:
			|	"+ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	// создание правил расчета связанных разрезов
	Если СтруктураНастроекДляСоздания=Неопределено ИЛИ СтруктураНастроекДляСоздания.Свойство("РазрезыПланирования") И СтруктураНастроекДляСоздания.РазрезыПланирования=Истина Тогда
		Попытка 
			Если СоздатьПравилаРасчетаРазрезов(ПравилаРасчетаРазрезов) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Настроены правила расчета связанных разрезов");
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Формирование настроек прервано на этапе настройки правил расчета связанных разрезов:
			|	"+ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	Если НеФормироватьНастройкиФактическихДанных = Ложь Тогда
		Если СтруктураНастроекДляСоздания=Неопределено ИЛИ СтруктураНастроекДляСоздания.Свойство("СпискиДанныхИСоответствияФактическимДанным") И СтруктураНастроекДляСоздания.СпискиДанныхИСоответствияФактическимДанным=Истина Тогда
			// создание списков данных
			Попытка 
				Если СоздатьСпискиДанных(ВыбранныеВарианты) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Настроены списки отбора фактических данных");
				КонецЕсли;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Формирование настроек прервано на этапе настройки списков отбора фактических данных:
				|	"+ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
			// создание соответствий фактических данных
			Попытка 
				Если СоздатьСоответствияДанных(ВыбранныеВарианты) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Настроены соответствия фактических и плановых данных");
				КонецЕсли;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Формирование настроек прервано на этапе настройки соответствий фактических и плановых данных:
				|	"+ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		Если СтруктураНастроекДляСоздания=Неопределено ИЛИ СтруктураНастроекДляСоздания.Свойство("НастройкиФактическихДанных") И СтруктураНастроекДляСоздания.НастройкиФактическихДанных=Истина Тогда
			// создание настроек учета фактических данных
			Попытка 
				Если СоздатьНастройкиФакта(ВыбранныеВарианты) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Настроены правила учета фактических данных");
				КонецЕсли;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Формирование настроек прервано на этапе настройки правил учета фактических данных:
				|	"+ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	ЗафиксироватьТранзакцию();
	Если АдресНастроек<>"" Тогда
		Попытка
			УдалитьИзВременногоХранилища(АдресНастроек);
		Исключение
		КонецПопытки;
	КонецЕсли;
	АдресНастроек = "";
	Возврат Истина;
КонецФункции

#Область ОбработчикиСобытийПрочихПолей

&НаКлиенте
Процедура ДатаВводаВДействиеПриИзменении(Элемент)
	Объект.ДатаВводаВДействие = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ДатаВводаВДействие,ПериодичностьФормированияБюджетногоРегламента);
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьФормированияБюджетногоРегламентаПриИзменении(Элемент)
	Объект.ДатаВводаВДействие = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ДатаВводаВДействие,ПериодичностьФормированияБюджетногоРегламента);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПрочихКомандФормы

&НаКлиенте
Процедура ПросмотрСтруктурыБюджета(Команда)
	Если Элементы.Бюджеты.ТекущиеДанные<>Неопределено Тогда
		ПараметрыФормыБюджета = Новый Структура("Бюджет,УчетПоКоличеству,УчетПоСумме");
		ЗаполнитьЗначенияСвойств(ПараметрыФормыБюджета,Элементы.Бюджеты.ТекущиеДанные);
		ПараметрыФормыБюджета.Вставить("ВыбранныеВарианты",ВыбранныеВариантыКомплекта.ВыгрузитьЗначения());
		РазрезыУчета = Новый Массив;
		СтрокиРазрезов = Объект.РазрезыБюджетов.НайтиСтроки(Новый Структура("Бюджет",Элементы.Бюджеты.ТекущиеДанные.Бюджет));
		Для Каждого СтрокаРазрез Из СтрокиРазрезов Цикл
			РазрезыУчета.Добавить(СтрокаРазрез.Разрез);
		КонецЦикла;
		ПараметрыФормыБюджета.Вставить("РазрезыУчета",РазрезыУчета);
		ПараметрыФормыБюджета.Вставить("АдресНастроек",АдресНастроек);
		ОткрытьФорму("Обработка.фин_НастройкаКомплектаБюджетов.Форма.ФормаПросмотраСтатейБюджета",ПараметрыФормыБюджета,ЭтотОбъект,Элементы.Бюджеты.ТекущиеДанные.Бюджет,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСоответствие(Команда)
	ТекущиеДанные = Элементы.СоответствияКЗаполнению.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		ПоказатьЗначение(,ТекущиеДанные.Соответствие);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокДанных(Команда)
	ТекущиеДанные = Элементы.СпискиДанныхКЗаполнению.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		ПоказатьЗначение(,ТекущиеДанные.СписокДанных);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокУжеИмеющихсяНастроекКомплекта(Команда)
	ОткрытьФорму("Обработка.фин_НастройкаКомплектаБюджетов.Форма.ФормаПросмотраНастроекИДанныхКомплекта",,ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУжеИмеющиесяНастройкиКомплекта(Команда)
	ОписаниеОповещенияОтветНаВопросОбУдалении = Новый ОписаниеОповещения("ОбработатьОтветНаВопросОбУдалении",ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещенияОтветНаВопросОбУдалении,"Будут удалены все настройки структуры и документы ввода плановых данных по удаляемым бюджетам. Продолжить?",РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолеОбъекта(ОбъектДанных,ПолеОбъекта)
	Возврат ОбъектДанных[ПолеОбъекта];
КонецФункции

&НаСервере
Процедура УстановитьЗначенияПараметровКБ(ЭлементыДерева,СтарыеЗначения)
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.ЭтоГруппа Тогда
			УстановитьЗначенияПараметровКБ(ЭлементДерева.ПолучитьЭлементы(),СтарыеЗначения);
		Иначе
			Строки = СтарыеЗначения.НайтиСтроки(Новый Структура("Параметр",ЭлементДерева.Параметр));
			Если Строки.Количество()>0 Тогда
				ЭлементДерева.Значение = Строки[0].Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ЕстьНезаполненныеПараметры(ЭлементыДерева,СуммаДолейОплата,СуммаДолейПоступления)
	Необязательные = Новый Массив;
	Необязательные.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПрофильРаспределенияПоПериодамДляАвансов"));
	Необязательные.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПрофильРаспределенияПоПериодамДляАвансовПоставщикам"));
	Необязательные.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПрофильРаспределенияПоПериодамДляОплатыПоставщикамПоФакту"));
	Необязательные.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПрофильРаспределенияПоПериодамДляОплатыПоФакту"));
	Есть = Ложь;
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.ЭтоГруппа = Ложь Тогда
			Если Необязательные.Найти(ЭлементДерева.Параметр)=Неопределено И НЕ ЗначениеЗаполнено(ЭлементДерева.Значение) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не задано значение параметра: "+ЭлементДерева.Параметр);
				Есть = Истина;
			КонецЕсли;
			Если ЭлементДерева.Параметр = ПредопределенноеЗначение("ПланВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПроцентСуммыВыручкиОтносимойНаАвансы")
				ИЛИ ЭлементДерева.Параметр = ПредопределенноеЗначение("ПланВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПроцентСуммыВыручкиОтносимойНаОплатуПоФакту") Тогда
				СуммаДолейПоступления = СуммаДолейПоступления + ?(ЭлементДерева.Значение=Неопределено,0,ЭлементДерева.Значение);
			КонецЕсли;
			Если ЭлементДерева.Параметр = ПредопределенноеЗначение("ПланВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПроцентСуммыПриобретенныхТМЗИУслугОтносимойНаАвансы")
				ИЛИ ЭлементДерева.Параметр = ПредопределенноеЗначение("ПланВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ПроцентСуммыПриобретенныхТМЗИУслугОтносимойНаОплатуПоФакту") Тогда
				СуммаДолейОплата = СуммаДолейОплата + ?(ЭлементДерева.Значение=Неопределено,0,ЭлементДерева.Значение);
			КонецЕсли;
		Иначе
			Если ЕстьНезаполненныеПараметры(ЭлементДерева.ПолучитьЭлементы(),СуммаДолейОплата,СуммаДолейПоступления) Тогда
				Есть = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Есть;
КонецФункции

&НаСервереБезКонтекста
Функция КоличествоИмеющихсяДополнительныхРазрезов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_НастройкаДополнительныхРазрезовБюджетирования.Разрез
		|ИЗ
		|	РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК фин_НастройкаДополнительныхРазрезовБюджетирования";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи.Количество();
	
КонецФункции
	
#КонецОбласти

#Область РаботаСоСправочнойИнформацией

&НаКлиенте
Процедура СправкаСпискиДанных(Команда)
	Если Элементы.СпискиДанныхКЗаполнению.ТекущиеДанные<>Неопределено Тогда
		СписокДанных = Элементы.СпискиДанныхКЗаполнению.ТекущиеДанные.СписокДанных;
		Компонент = ПолеОбъекта(СписокДанных,"ПозицияКлассификатора");
		ОткрытьФорму("Обработка.фин_НастройкаКомплектаБюджетов.Форма.ФормаСправки",Новый Структура("Компонент",Компонент),ЭтотОбъект,Компонент,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СправкаСоответствия(Команда)
	Если Элементы.СоответствияКЗаполнению.ТекущиеДанные<>Неопределено Тогда
		СписокДанных = Элементы.СоответствияКЗаполнению.ТекущиеДанные.Соответствие;
		Компонент = ПолеОбъекта(СписокДанных,"ПозицияКлассификатора");
		ОткрытьФорму("Обработка.фин_НастройкаКомплектаБюджетов.Форма.ФормаСправки",Новый Структура("Компонент",Компонент),ЭтотОбъект,Компонент,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СправкаКомпонентыКомплектаБюджетов(Команда)
	Если Элементы.КомпонентыКомплектаБюджетов.ТекущиеДанные<>Неопределено Тогда
		Компонент = Элементы.КомпонентыКомплектаБюджетов.ТекущиеДанные.Компонент;
		ОткрытьФорму("Обработка.фин_НастройкаКомплектаБюджетов.Форма.ФормаСправки",Новый Структура("Компонент",Компонент),ЭтотОбъект,Компонент,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СправкаДополнительныеПараметрыКомплектаБюджетов(Команда)
	Если Элементы.ДополнительныеПараметрыКомплекта.ТекущиеДанные<>Неопределено Тогда
		Компонент = Элементы.ДополнительныеПараметрыКомплекта.ТекущиеДанные.Параметр;
		ОткрытьФорму("Обработка.фин_НастройкаКомплектаБюджетов.Форма.ФормаСправки",Новый Структура("Компонент",Компонент),ЭтотОбъект,Компонент,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СправкаНастройкиРасчетов(Команда)
	Если Элементы.ДеревоНастроекРасчетов.ТекущиеДанные<>Неопределено И ЗначениеЗаполнено(Элементы.ДеревоНастроекРасчетов.ТекущиеДанные.Опция) Тогда
		Компонент = Элементы.ДеревоНастроекРасчетов.ТекущиеДанные.Опция;
		ОткрытьФорму("Обработка.фин_НастройкаКомплектаБюджетов.Форма.ФормаСправки",Новый Структура("Компонент",Компонент),ЭтотОбъект,Компонент,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СправкаРазрезыПланирования(Команда)
	Если Элементы.УточнениеРазрезов.ТекущиеДанные<>Неопределено Тогда
		Компонент = Элементы.УточнениеРазрезов.ТекущиеДанные.Разрез;
		ОткрытьФорму("Обработка.фин_НастройкаКомплектаБюджетов.Форма.ФормаСправки",Новый Структура("Компонент",Компонент),ЭтотОбъект,Компонент,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СправкаРасчетныеПоказатели(Команда)
	Если Элементы.РасчетныеСтавки.ТекущиеДанные<>Неопределено Тогда
		Компонент = Элементы.РасчетныеСтавки.ТекущиеДанные.РасчетныйПоказатель;
		ОткрытьФорму("Обработка.фин_НастройкаКомплектаБюджетов.Форма.ФормаСправки",Новый Структура("Компонент",Компонент),ЭтотОбъект,Компонент,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СправкаПользовательскиеПараметры(Команда)
	Если Элементы.ДеревоПользовательскихПараметров.ТекущиеДанные<>Неопределено И Элементы.ДеревоПользовательскихПараметров.ТекущиеДанные.ЭтоГруппа = Ложь Тогда
		Компонент = Элементы.ДеревоПользовательскихПараметров.ТекущиеДанные.Параметр;
		ОткрытьФорму("Обработка.фин_НастройкаКомплектаБюджетов.Форма.ФормаСправки",Новый Структура("Компонент",Компонент),ЭтотОбъект,Компонент,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СправкаБюджет(Команда)
	Если Элементы.Бюджеты.ТекущиеДанные<>Неопределено Тогда
		Компонент = Элементы.Бюджеты.ТекущиеДанные.Бюджет;
		ОткрытьФорму("Обработка.фин_НастройкаКомплектаБюджетов.Форма.ФормаСправки",Новый Структура("Компонент",Компонент),ЭтотОбъект,Компонент,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияНастроекБазы

	&НаСервере
	Функция СоздатьНастройкиФакта(ВыбранныеВарианты)
		Правила = фин_УправлениеБюджетнойМоделью.ПолучитьТаблицуНастроекФактическихДанных(ВыбранныеВарианты);
		Если Правила.Количество()=0 Тогда
			Возврат Ложь;
		КонецЕсли;
		КопияПравила = Правила.Скопировать();
		КопияПравила.Свернуть("ВидОбъектаИБ,ИмяОбъектаИБ");
		Условия = Новый ТаблицаЗначений;
		Условия.Колонки.Добавить("Наименование");
		Условия.Колонки.Добавить("Условие");
		Если Объект.ВариантРазвертыванияКомплектаБюджетов=Перечисления.фин_ВариантыРазвертыванияКомплектаБюджетов.ПриНаличииСуществующихНастроекКомплектаВнестиВНихИзменения Тогда
	
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	усд_УсловияВыполненияОперацийПоДокументам.Ссылка КАК Условие,
				|	усд_УсловияВыполненияОперацийПоДокументам.Наименование
				|ИЗ
				|	Справочник.усд_УсловияВыполненияОперацийПоДокументам КАК усд_УсловияВыполненияОперацийПоДокументам
				|ГДЕ
				|	усд_УсловияВыполненияОперацийПоДокументам.ПометкаУдаления = ЛОЖЬ
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	усд_УсловияВыполненияОперацийПоСтрокамДокумента.Ссылка,
				|	усд_УсловияВыполненияОперацийПоСтрокамДокумента.Наименование
				|ИЗ
				|	Справочник.усд_УсловияВыполненияОперацийПоСтрокамДокумента КАК усд_УсловияВыполненияОперацийПоСтрокамДокумента
				|ГДЕ
				|	усд_УсловияВыполненияОперацийПоСтрокамДокумента.ПометкаУдаления = ЛОЖЬ";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				НС = условия.Добавить();
				НС.Условие = Выборка.Условие;
				НС.Наименование = НРег(СокрЛП(Выборка.Наименование));
			КонецЦикла;

		КонецЕсли;
		
		Для Каждого СтрокаНабор Из КопияПравила Цикл
			ПоДокументу = НРег(СтрокаНабор.ВидОбъектаИБ) = НРег("Документы");
			Если ПоДокументу Тогда
		
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	фин_ВидыДокументов.Ссылка
					|ИЗ
					|	Справочник.фин_ВидыДокументов КАК фин_ВидыДокументов
					|ГДЕ
					|	фин_ВидыДокументов.ПрограммныйИдентификатор = &ПрограммныйИдентификатор
					|	И НЕ фин_ВидыДокументов.ПометкаУдаления";
				
				Запрос.УстановитьПараметр("ПрограммныйИдентификатор", СтрокаНабор.ИмяОбъектаИБ);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					ОбъектВладелец = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Иначе
					ОбъектВладелец = Справочники.фин_ВидыДокументов.СоздатьЭлемент();
					ОбъектВладелец.ПрограммныйИдентификатор = СтрокаНабор.ИмяОбъектаИБ;
					ОбъектВладелец.УстановитьНовыйКод();
				КонецЕсли;
				ОбъектМетаданных = Метаданные.Документы[СтрокаНабор.ИмяОбъектаИБ];
				ОбъектВладелец.Наименование 									= ?(ЗначениеЗаполнено(ОбъектМетаданных.ПредставлениеСписка),ОбъектМетаданных.ПредставлениеСписка,ОбъектМетаданных.Синоним);
				ОбъектВладелец.НаименованиеПолное 								= ОбъектВладелец.Наименование;
				ОбъектВладелец.РегистрироватьПервичныеДанныеПоБюджетированию 	= Истина;
				//ОбъектВладелец.ИспользоватьСовместноСШаблонамиРегистров			= Истина;
		        ОбъектВладелец.Записать();
				ВладелецНастроек = ОбъектВладелец.Ссылка;
			Иначе	
				
				ВидРегистра = Перечисления.фин_ВидыРегистровСистемы[СтрокаНабор.ВидОбъектаИБ];
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	фин_КлассификаторРегистров.Ссылка
					|ИЗ
					|	Справочник.фин_КлассификаторРегистров КАК фин_КлассификаторРегистров
					|ГДЕ
					|	фин_КлассификаторРегистров.ПрограммныйИдентификатор = &ПрограммныйИдентификатор
					|	И фин_КлассификаторРегистров.ВидРегистра = &ВидРегистра
					|	И НЕ фин_КлассификаторРегистров.ПометкаУдаления";
				
				Запрос.УстановитьПараметр("ВидРегистра", ВидРегистра);
				Запрос.УстановитьПараметр("ПрограммныйИдентификатор", СтрокаНабор.ИмяОбъектаИБ);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					ОбъектВладелец = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Иначе
					ОбъектВладелец = Справочники.фин_КлассификаторРегистров.СоздатьЭлемент();
					ОбъектВладелец.ПрограммныйИдентификатор = СтрокаНабор.ИмяОбъектаИБ;
					ОбъектВладелец.УстановитьНовыйКод();
				КонецЕсли;
				ОбъектМетаданных = Метаданные[СтрокаНабор.ВидОбъектаИБ][СтрокаНабор.ИмяОбъектаИБ];
				ОбъектВладелец.Наименование 									= ?(ЗначениеЗаполнено(ОбъектМетаданных.ПредставлениеСписка),ОбъектМетаданных.ПредставлениеСписка,ОбъектМетаданных.Синоним);
				ОбъектВладелец.НаименованиеПолное 								= ОбъектВладелец.Наименование;
				ОбъектВладелец.РегистрироватьПервичныеДанныеПоБюджетированию 	= Истина;
				ОбъектВладелец.ВидРегистра										= ВидРегистра;
		        ОбъектВладелец.Записать();
				ВладелецНастроек = ОбъектВладелец.Ссылка;
			КонецЕсли;
			
			СтрокиПравилПоОбъекту = Правила.Скопировать(Новый Структура("ВидОбъектаИБ,ИмяОбъектаИБ",СтрокаНабор.ВидОбъектаИБ,СтрокаНабор.ИмяОбъектаИБ));
			
			Если ПоДокументу Тогда
				СтрокиУсловийПоОбъекту = Правила.Скопировать(Новый Структура("ВидОбъектаИБ,ИмяОбъектаИБ",СтрокаНабор.ВидОбъектаИБ,СтрокаНабор.ИмяОбъектаИБ));
				СтрокиУсловийПоОбъекту.Свернуть("УсловиеНаОбъект");
				Если СтрокиУсловийПоОбъекту.Количество()=1 И НЕ ЗначениеЗаполнено(СтрокиУсловийПоОбъекту[0].УсловиеНаОбъект) Тогда
					Правило_Ссылка = ПолучитьШаблон(ПоДокументу,ВладелецНастроек,СтрокиПравилПоОбъекту,СтрокаНабор.ИмяОбъектаИБ,Условия);
				Иначе
					Если Объект.ВариантРазвертыванияКомплектаБюджетов=Перечисления.фин_ВариантыРазвертыванияКомплектаБюджетов.ПриНаличииСуществующихНастроекКомплектаВнестиВНихИзменения Тогда
	
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ
							|	фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах.Ссылка
							|ИЗ
							|	Справочник.фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах КАК фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах
							|ГДЕ
							|	фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах.Владелец = &Владелец
							|	И НЕ фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах.ПометкаУдаления";
						
						Запрос.УстановитьПараметр("Владелец", ВладелецНастроек);
						
						РезультатЗапроса = Запрос.Выполнить();
						
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						
						Если ВыборкаДетальныеЗаписи.Следующий() Тогда
							НаборШаблонов = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
							НаборШаблонов.НаборШаблонов.Очистить();
						Иначе
							НаборШаблонов = Справочники.фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах.СоздатьЭлемент();
							НаборШаблонов.УстановитьНовыйКод();
						КонецЕсли;
	

					Иначе
						НаборШаблонов = Справочники.фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах.СоздатьЭлемент();
						НаборШаблонов.УстановитьНовыйКод();
					КонецЕсли;
					НаборШаблонов.ДляКомплектаБюджетов=Истина;
					НаборШаблонов.Владелец = ВладелецНастроек;
					НаборШаблонов.Наименование = Строка(ВладелецНастроек);
					Для Каждого СтрокаУсловие Из СтрокиУсловийПоОбъекту Цикл
						СтрокиПравилПоУсловию = СтрокиПравилПоОбъекту.Скопировать(Новый Структура("УсловиеНаОбъект",СтрокаУсловие.УсловиеНаОбъект));
						Шаблон_Ссылка = ПолучитьШаблон(ПоДокументу,ВладелецНастроек,СтрокиПравилПоУсловию,СтрокаНабор.ИмяОбъектаИБ,Условия);
						НС_Шаблон = НаборШаблонов.НаборШаблонов.Добавить();
						НС_Шаблон.СпособИспользования=Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.Всегда;
						НС_Шаблон.Схема = Шаблон_Ссылка;
						Если ЗначениеЗаполнено(СтрокаУсловие.УсловиеНаОбъект) Тогда
							НС_Шаблон.СпособИспользования=Перечисления.фин_СпособИспользованияШаблонаОтраженияВБюджетировании.ВсегдаЕслиУдовлетворяетУсловию;
							УсловиеПрименения = СтрокаУсловие.УсловиеНаОбъект;
							Наименование = УсловиеПрименения.Наименование;
							СтрокиИмеющиеся = Условия.НайтиСтроки(Новый Структура("Наименование",НРег(СокрЛП(Наименование))));
							Создано = Ложь;
							Если СтрокиИмеющиеся.Количество()>0 Тогда
								НовоеУсловие = СтрокиИмеющиеся[0].Условие.ПолучитьОбъект();
								НовоеУсловие.СоставныеЧастиУсловия.Очистить();
							Иначе
								Создано = Истина;
								НовоеУсловие = Справочники.усд_УсловияВыполненияОперацийПоДокументам.СоздатьЭлемент();
								НовоеУсловие.УстановитьНовыйКод();
							КонецЕсли;
							ЗаполнитьЗначенияСвойств(НовоеУсловие,УсловиеПрименения);
							НовоеУсловие.Владелец = ВладелецНастроек;
							НовоеУсловие.ДляКомплектаБюджетов = Истина;
							Для Каждого СоставнаяЧасть Из УсловиеПрименения.СоставныеЧастиУсловия Цикл
								НС = НовоеУсловие.СоставныеЧастиУсловия.Добавить();
								ЗаполнитьЗначенияСвойств(НС,СоставнаяЧасть);
								Если ЗначениеЗаполнено(СоставнаяЧасть.ПредопределенныйСписокКлассификатор) Тогда
									НС.ПредопределенныйСписок = фин_УправлениеБюджетнойМодельюВызовСервераПовтИсп.ПолучитьПоказательИнформационнойБазыПоИдентификатору(СоставнаяЧасть.ПредопределенныйСписокКлассификатор);
								КонецЕсли;
								НС.ОписаниеУсловия = Справочники.усд_УсловияВыполненияОперацийПоДокументам.ПолучитьОписаниеУсловия(НС);
							КонецЦикла;
							НовоеУсловие.Записать();
							НС_Шаблон.УсловиеПримененияШаблона = НовоеУсловие.Ссылка;
							Если Создано Тогда
								НС_Условие = Условия.Добавить();
								НС_Условие.Наименование = НРег(СокрЛП(Наименование));
								НС_Условие.Условие = НовоеУсловие.Ссылка;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					НаборШаблонов.Записать();
					Правило_Ссылка = НаборШаблонов.Ссылка;
				КонецЕсли;
			Иначе
				Правило_Ссылка = ПолучитьШаблон(ПоДокументу,ВладелецНастроек,СтрокиПравилПоОбъекту,СтрокаНабор.ИмяОбъектаИБ,Условия);
			КонецЕсли;
			
			Набор = РегистрыСведений.фин_ПрименениеСхемОтраженияФактическихДанных.СоздатьНаборЗаписей();
			Набор.Отбор.ОбъектИнформационнойБазы.Установить(ВладелецНастроек);
			Набор.Отбор.Период.Установить(Объект.ДатаВводаВДействие);
//			Набор.Прочитать();
			
			НС = Набор.Добавить();
			НС.ОбъектИнформационнойБазы 	= ВладелецНастроек;
			НС.Схема 	= Правило_Ссылка;
			НС.ИспользоватьСовместноСШаблонамиРегистров = ПоДокументу;
			НС.Период 			= Объект.ДатаВводаВДействие;
			
			Набор.Записать();
			
		КонецЦикла;
		Возврат Истина;
	КонецФункции

	&НаСервере
	Функция ПолучитьШаблон(ПоДокументу,ВладелецНастроек,СтрокиПравилПоОбъекту,ИмяОбъектаИБ,Условия)
			Если Объект.ВариантРазвертыванияКомплектаБюджетов=Перечисления.фин_ВариантыРазвертыванияКомплектаБюджетов.ПриНаличииСуществующихНастроекКомплектаВнестиВНихИзменения Тогда
	
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ШаблоныОтражения.Ссылка
					|ИЗ
					|	Справочник.фин_СхемыОтраженияФактическихДанных КАК ШаблоныОтражения
					|ГДЕ
					|	ШаблоныОтражения.Владелец = &Владелец
					|	И НЕ ШаблоныОтражения.ПометкаУдаления";
				
				Запрос.УстановитьПараметр("Владелец", ВладелецНастроек);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					Правило = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	фин_ГруппыПравилОтраженияФактическихДанных.Ссылка
						|ИЗ
						|	Справочник.фин_ГруппыПравилОтраженияФактическихДанных КАК фин_ГруппыПравилОтраженияФактическихДанных
						|ГДЕ
						|	фин_ГруппыПравилОтраженияФактическихДанных.Владелец = &Владелец
						|	И фин_ГруппыПравилОтраженияФактическихДанных.ПометкаУдаления = ЛОЖЬ
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	фин_ПравилаОтраженияФактическихДанных.Ссылка
						|ИЗ
						|	Справочник.фин_ПравилаОтраженияФактическихДанных КАК фин_ПравилаОтраженияФактическихДанных
						|ГДЕ
						|	фин_ПравилаОтраженияФактическихДанных.Владелец = &Владелец
						|	И фин_ПравилаОтраженияФактическихДанных.ПометкаУдаления = ЛОЖЬ";
					
					Запрос.УстановитьПараметр("Владелец", ВыборкаДетальныеЗаписи.Ссылка);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						ОбъектИБ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
						ОбъектИБ.УстановитьПометкуУдаления(Истина);
					КонецЦикла;

				Иначе	
					Правило = Справочники.фин_СхемыОтраженияФактическихДанных.СоздатьЭлемент();
					Правило.УстановитьНовыйКод();
				КонецЕсли;
			Иначе
				Правило = Справочники.фин_СхемыОтраженияФактическихДанных.СоздатьЭлемент();
				Правило.УстановитьНовыйКод();
			КонецЕсли;
			Правило.Владелец 		= ВладелецНастроек;
			Правило.Наименование	= "ШАБЛОН ФД: "+Строка(ВладелецНастроек); 
			Правило.ДляКомплектаБюджетов = Истина;
			
			Правило.Записать();
			Правило_Ссылка = Правило.Ссылка;
			
			СоответствиеГрупп = Новый Соответствие;
			
			Для Каждого СтрокаПравил Из СтрокиПравилПоОбъекту Цикл
				Если СтрокаПравил.ЭтоГруппаПравил Тогда
					Если Объект.ВариантРазвертыванияКомплектаБюджетов=Перечисления.фин_ВариантыРазвертыванияКомплектаБюджетов.ПриНаличииСуществующихНастроекКомплектаВнестиВНихИзменения Тогда
						ИскомаяГруппа = Справочники.фин_ГруппыПравилОтраженияФактическихДанных.НайтиПоНаименованию(СтрокаПравил.Наименование,Истина,,Правило_Ссылка);
					Иначе
					    ИскомаяГруппа = Неопределено;
					КонецЕсли;
					НоваяГруппа = ?(ЗначениеЗаполнено(ИскомаяГруппа),ИскомаяГруппа.ПолучитьОбъект(),Справочники.фин_ГруппыПравилОтраженияФактическихДанных.СоздатьЭлемент());
					Если ЗначениеЗаполнено(ИскомаяГруппа) Тогда
						 НоваяГруппа.УстановитьПометкуУдаления(Ложь);
					КонецЕсли;
					НоваяГруппа.Владелец = Правило_Ссылка;
					НоваяГруппа.ДляКомплектаБюджетов = Истина;
					ЗаполнитьЗначенияСвойств(НоваяГруппа,СтрокаПравил);
					Если НЕ ПоДокументу Тогда
						НоваяГруппа.ВидДанных=Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаПравил.УсловиеПрименения) Тогда
						УсловиеПрименения = СтрокаПравил.УсловиеПрименения;
						Наименование = УсловиеПрименения.Наименование;
						СтрокиИмеющиеся = Условия.НайтиСтроки(Новый Структура("Наименование",НРег(СокрЛП(Наименование))));
						Создано = Ложь;
						Если СтрокиИмеющиеся.Количество()>0 Тогда
							НовоеУсловие = СтрокиИмеющиеся[0].Условие.ПолучитьОбъект();
							НовоеУсловие.СоставныеЧастиУсловия.Очистить();
						Иначе
							Создано = Истина;
							НовоеУсловие = Справочники.усд_УсловияВыполненияОперацийПоСтрокамДокумента.СоздатьЭлемент();
							НовоеУсловие.УстановитьНовыйКод();
						КонецЕсли;
						ЗаполнитьЗначенияСвойств(НовоеУсловие,УсловиеПрименения);
						НовоеУсловие.Владелец = ВладелецНастроек;
						НовоеУсловие.ДляКомплектаБюджетов = Истина;
						Для Каждого СоставнаяЧасть Из УсловиеПрименения.СоставныеЧастиУсловия Цикл
							НС = НовоеУсловие.СоставныеЧастиУсловия.Добавить();
							ЗаполнитьЗначенияСвойств(НС,СоставнаяЧасть);
							Если ЗначениеЗаполнено(СоставнаяЧасть.ПредопределенныйСписокКлассификатор) Тогда
								НС.ПредопределенныйСписок = фин_УправлениеБюджетнойМодельюВызовСервераПовтИсп.ПолучитьПоказательИнформационнойБазыПоИдентификатору(СоставнаяЧасть.ПредопределенныйСписокКлассификатор);
							КонецЕсли;
							НС.ОписаниеУсловия = Справочники.усд_УсловияВыполненияОперацийПоСтрокамДокумента.ПолучитьОписаниеУсловия(НС);
						КонецЦикла;
						НовоеУсловие.Записать();
						НоваяГруппа.Условие = НовоеУсловие.Ссылка;
						
						Если Создано Тогда
							НС_Условие = Условия.Добавить();
							НС_Условие.Наименование = НРег(СокрЛП(Наименование));
							НС_Условие.Условие = НовоеУсловие.Ссылка;
						КонецЕсли;
					КонецЕсли;
					НоваяГруппа.УстановитьНовыйКод();
					НоваяГруппа.Записать();
					СоответствиеГрупп.Вставить(СтрокаПравил.ИдентификаторСтроки,НоваяГруппа.Ссылка);
				Иначе
					ВладелецПравила = ?(ЗначениеЗаполнено(СтрокаПравил.ГруппаПравил),?(СоответствиеГрупп.Получить(СтрокаПравил.ГруппаПравил)=Неопределено,Правило_Ссылка,СоответствиеГрупп.Получить(СтрокаПравил.ГруппаПравил)),Правило_Ссылка);
					Если Объект.ВариантРазвертыванияКомплектаБюджетов=Перечисления.фин_ВариантыРазвертыванияКомплектаБюджетов.ПриНаличииСуществующихНастроекКомплектаВнестиВНихИзменения Тогда
						ИскомоеПравило = Справочники.фин_ПравилаОтраженияФактическихДанных.НайтиПоНаименованию(СтрокаПравил.Наименование,Истина,,ВладелецПравила);
					Иначе
					    ИскомоеПравило = Неопределено;
					КонецЕсли;
					НовоеПравило = ?(ЗначениеЗаполнено(ИскомоеПравило),ИскомоеПравило.ПолучитьОбъект(),Справочники.фин_ПравилаОтраженияФактическихДанных.СоздатьЭлемент());
					Если ЗначениеЗаполнено(ИскомоеПравило) Тогда
						 НовоеПравило.УстановитьПометкуУдаления(Ложь);
					КонецЕсли;
					НовоеПравило.Владелец = ВладелецПравила;
					НовоеПравило.ДляКомплектаБюджетов = Истина;
					ЗаполнитьЗначенияСвойств(НовоеПравило,СтрокаПравил);
					Если НЕ ПоДокументу Тогда
						НовоеПравило.ВидДанных=Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаПравил.УсловиеПрименения) Тогда
						УсловиеПрименения = СтрокаПравил.УсловиеПрименения;
						Наименование = УсловиеПрименения.Наименование;
						СтрокиИмеющиеся = Условия.НайтиСтроки(Новый Структура("Наименование",НРег(СокрЛП(Наименование))));
						Создано = Ложь;
						Если СтрокиИмеющиеся.Количество()>0 Тогда
							НовоеУсловие = СтрокиИмеющиеся[0].Условие.ПолучитьОбъект();
							НовоеУсловие.СоставныеЧастиУсловия.Очистить();
						Иначе
							Создано = Истина;
							НовоеУсловие = Справочники.усд_УсловияВыполненияОперацийПоСтрокамДокумента.СоздатьЭлемент();
							НовоеУсловие.УстановитьНовыйКод();
							
						КонецЕсли;
						ЗаполнитьЗначенияСвойств(НовоеУсловие,УсловиеПрименения);
						НовоеУсловие.Владелец = ВладелецНастроек;
						НовоеУсловие.ДляКомплектаБюджетов = Истина;
						Для Каждого СоставнаяЧасть Из УсловиеПрименения.СоставныеЧастиУсловия Цикл
							НС = НовоеУсловие.СоставныеЧастиУсловия.Добавить();
							ЗаполнитьЗначенияСвойств(НС,СоставнаяЧасть);
							Если ЗначениеЗаполнено(СоставнаяЧасть.ПредопределенныйСписокКлассификатор) Тогда
								НС.ПредопределенныйСписок = фин_УправлениеБюджетнойМодельюВызовСервераПовтИсп.ПолучитьПоказательИнформационнойБазыПоИдентификатору(СоставнаяЧасть.ПредопределенныйСписокКлассификатор);
							КонецЕсли;
							НС.ОписаниеУсловия = Справочники.усд_УсловияВыполненияОперацийПоСтрокамДокумента.ПолучитьОписаниеУсловия(НС);
						КонецЦикла;
						НовоеУсловие.Записать();
						НовоеПравило.Условие = НовоеУсловие.Ссылка;
						Если Создано Тогда
							НС_Условие = Условия.Добавить();
							НС_Условие.Наименование = НРег(СокрЛП(Наименование));
							НС_Условие.Условие = НовоеУсловие.Ссылка;
						КонецЕсли;
					КонецЕсли;

					Если ТипЗнч(СтрокаПравил.ФинансовыйПоказательИсточник)=Тип("ПеречислениеСсылка.фин_КлассификаторСоответствийПервичныхДанных") Тогда
						СоответствиеВИБ = фин_УправлениеБюджетнойМодельюВызовСервераПовтИсп.ПолучитьПоказательИнформационнойБазыПоИдентификатору(СтрокаПравил.ФинансовыйПоказательИсточник);
						НоваяНастройкаСоответствия = Справочники.фин_НастройкиПолученияСоответствийДляПервичныхДанныхБюджетирования.СоздатьЭлемент();
						НоваяНастройкаСоответствия.Владелец 	= ВладелецНастроек;
						НоваяНастройкаСоответствия.Наименование = "НАСТРОЙКА ИСПОЛЬЗОВАНИЯ: "+Строка(СтрокаПравил.ФинансовыйПоказательИсточник);
						Если НЕ ЗначениеЗаполнено(СтрокаПравил.ВидДанных) Тогда
							Если ПоДокументу Тогда
								НоваяНастройкаСоответствия.ВидДанных 				= Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоШапкеДокумента;
							Иначе
								НоваяНастройкаСоответствия.ВидДанных 				= Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах;
								НоваяНастройкаСоответствия.ИмяИсточника 			= ИмяОбъектаИБ;
								НоваяНастройкаСоответствия.ПредставлениеИсточника 	= Строка(ВладелецНастроек);
							КонецЕсли;
						Иначе
							НоваяНастройкаСоответствия.ВидДанных 				= СтрокаПравил.ВидДанных;
							НоваяНастройкаСоответствия.ИмяИсточника 			= СтрокаПравил.ИмяИсточника;
							НоваяНастройкаСоответствия.ПредставлениеИсточника 	= СтрокаПравил.ПредставлениеИсточника;
						КонецЕсли;
						НоваяНастройкаСоответствия.Разрез = СоответствиеВИБ.Разрез;
						НоваяНастройкаСоответствия.ВариантПолученияСоответствийДляПервичныхДанных = СоответствиеВИБ;
						НоваяНастройкаСоответствия.ДляКомплектаБюджетов = Истина;
						
						ТребуемыйПоказатель = СоответствиеВИБ.ВходящиеПоказатели[0];
						
						НоваяСтрокаЗаполнение = НоваяНастройкаСоответствия.ЗаполнениеПоказателей.Добавить();
						НоваяСтрокаЗаполнение.ПоказательВарианта 	= ТребуемыйПоказатель.Показатель;
						НоваяСтрокаЗаполнение.ТипПоказателя 		= ТребуемыйПоказатель.ТипПоказателя;
						НоваяСтрокаЗаполнение.Числовой 				= ТребуемыйПоказатель.Числовой;
						НоваяСтрокаЗаполнение.Справочник 			= ТребуемыйПоказатель.Справочник;
						Если СтрокаПравил.ФинансовыйПоказательИсточник = Перечисления.фин_КлассификаторСоответствийПервичныхДанных.ПолныйСписокСоответствийСтатейБюджетаДДСИСтатейДДС
							ИЛИ СтрокаПравил.ФинансовыйПоказательИсточник = Перечисления.фин_КлассификаторСоответствийПервичныхДанных.СоответствиеСтатейБюджетаДДСПоОплатеВознагражденийИСтатейДДС
							ИЛИ СтрокаПравил.ФинансовыйПоказательИсточник = Перечисления.фин_КлассификаторСоответствийПервичныхДанных.СоответствиеСтатейБюджетаДДСПоОплатеПоставщикамИСтатейДДС
							ИЛИ СтрокаПравил.ФинансовыйПоказательИсточник = Перечисления.фин_КлассификаторСоответствийПервичныхДанных.СоответствиеСтатейБюджетаДДСПоАвансамИСтатейДДС
							ИЛИ СтрокаПравил.ФинансовыйПоказательИсточник = Перечисления.фин_КлассификаторСоответствийПервичныхДанных.СоответствиеПрочихСтатейБюджетаДДСИСтатейДДС Тогда
							
							НоваяСтрокаЗаполнение.РеквизитЗаполненияПоказателя = "РегистрыБухгалтерии.Типовой:АвтовыборПоТипу:СубконтоКт";
						Иначе
							НоваяСтрокаЗаполнение.РеквизитЗаполненияПоказателя = "РегистрыБухгалтерии.Типовой:АвтовыборПоТипу:СубконтоДт";
						КонецЕсли;
						
						НоваяНастройкаСоответствия.УстановитьНовыйКод();
						НоваяНастройкаСоответствия.Записать();
						
						НовоеПравило.ФинансовыйПоказательИсточник = НоваяНастройкаСоответствия.Ссылка;
						
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаПравил.ЗаполнениеРазрезов) Тогда
						Для Каждого ЭлементРазрез Из СтрокаПравил.ЗаполнениеРазрезов Цикл
							Если НРег(ЭлементРазрез.Ключ)=НРег("Валюта") Тогда
								ИмяПоля = "Валюта";
							Иначе	
								РазрезКомплекта = Перечисления.фин_КлассификаторРазрезовБюджетов[ЭлементРазрез.Ключ];
								РазрезКонфигурации = фин_УправлениеБюджетнойМодельюВызовСервераПовтИсп.ПолучитьИзмерениеПоИдентификатору(РазрезКомплекта);
								Если НЕ ЗначениеЗаполнено(РазрезКонфигурации) Тогда
									Продолжить;
								КонецЕсли;
								Если ТипЗнч(НовоеПравило.ФинансовыйПоказательИсточник)=Тип("СправочникСсылка.фин_ФинансовыеПоказатели") И НЕ фин_РаботаСДополнительнымиРазрезамиБюджетирования.УчетПоСтатьеПоРазрезу(НовоеПравило.ФинансовыйПоказательИсточник,РазрезКонфигурации) Тогда
									Продолжить;
								КонецЕсли;
								ИмяПоля = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(РазрезКонфигурации);
							КонецЕсли;
							НовоеПравило[ИмяПоля+"Источник"] 	= ?(Найти(ЭлементРазрез.Значение,"]")<>0,Сред(ЭлементРазрез.Значение,Найти(ЭлементРазрез.Значение,"]")+1),ЭлементРазрез.Значение);
							НовоеПравило[ИмяПоля+"ТипИсточника"] = ?(Найти(ЭлементРазрез.Значение,"[СтандартноеСоответствие")<>0,Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.СтандартноеСоответствие,?(Найти(ЭлементРазрез.Значение,":")=0,Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ШапкаДокумента,Перечисления.фин_ТипыИсточниковОтраженияПервичныхДвижений.ТабличнаяЧастьДвижения));
						КонецЦикла;
					КонецЕсли;
					НовоеПравило.Записать();
				КонецЕсли;
			КонецЦикла;
			
			возврат Правило_Ссылка;
	КонецФункции

	&НаСервере
	Функция СоздатьСоответствияДанных(ВыбранныеВарианты)
		Правила = фин_УправлениеБюджетнойМоделью.НастройкиСоответствий(ВыбранныеВарианты);
		Если Правила.Количество()=0 Тогда
			Возврат Ложь;
		КонецЕсли;
		Для Каждого ЭлементМодели Из Правила Цикл
			Если Объект.ВариантРазвертыванияКомплектаБюджетов=Перечисления.фин_ВариантыРазвертыванияКомплектаБюджетов.ПриНаличииСуществующихНастроекКомплектаВнестиВНихИзменения Тогда
		
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	фин_ВариантыПолученияСоответствийДляПервичныхДанных.Ссылка
					|ИЗ
					|	Справочник.фин_ВариантыПолученияСоответствийДляПервичныхДанных КАК фин_ВариантыПолученияСоответствийДляПервичныхДанных
					|ГДЕ
					|	фин_ВариантыПолученияСоответствийДляПервичныхДанных.ПозицияКлассификатора = &ПозицияКлассификатора
					|	И НЕ фин_ВариантыПолученияСоответствийДляПервичныхДанных.ПометкаУдаления";
				
				Запрос.УстановитьПараметр("ПозицияКлассификатора", ЭлементМодели.Ключ);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					НоваяМодель = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					Для Каждого ТЧ Из Метаданные.Справочники.фин_ВариантыПолученияСоответствийДляПервичныхДанных.ТабличныеЧасти Цикл
						НоваяМодель[ТЧ.Имя].Очистить();
					КонецЦикла;
				Иначе
					НоваяМодель = Справочники.фин_ВариантыПолученияСоответствийДляПервичныхДанных.СоздатьЭлемент();
					НоваяМодель.УстановитьНовыйКод();
				КонецЕсли;
			Иначе
				НоваяМодель = Справочники.фин_ВариантыПолученияСоответствийДляПервичныхДанных.СоздатьЭлемент();
				НоваяМодель.УстановитьНовыйКод();
			КонецЕсли;
			СтруктураНастроек = ЭлементМодели.Значение;
			НоваяМодель.Наименование = Строка(ЭлементМодели.Ключ);
			НоваяМодель.ПозицияКлассификатора = ЭлементМодели.Ключ;
			ЗаполнитьЗначенияСвойств(НоваяМодель,СтруктураНастроек);
			Если СтруктураНастроек.Свойство("ЗначениеИначе") И ТипЗнч(СтруктураНастроек.ЗначениеИначе)=Тип("ПеречислениеСсылка.фин_КлассификаторСтатейБюджетов") Тогда
				НоваяМодель.ЗначениеИначе = фин_УправлениеБюджетнойМодельюВызовСервераПовтИсп.ПолучитьПоказательИнформационнойБазыПоИдентификатору(СтруктураНастроек.ЗначениеИначе);
			КонецЕсли;
			Для Каждого ТЧ Из Метаданные.Справочники.фин_ВариантыПолученияСоответствийДляПервичныхДанных.ТабличныеЧасти Цикл
				Если СтруктураНастроек.Свойство(ТЧ.Имя) Тогда
					Для Каждого СтрокаДобавить Из СтруктураНастроек[ТЧ.Имя] Цикл
						НоваяСтрока = НоваяМодель[ТЧ.Имя].Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДобавить);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			НоваяМодель.Записать();
			
			НС = Объект.СоответствияКЗаполнению.Добавить();
			НС.Соответствие = НоваяМодель.Ссылка;
			
		КонецЦикла;

		Возврат Истина;
	КонецФункции

	&НаСервере
	Функция СоздатьСпискиДанных(ВыбранныеВарианты)
		Правила = фин_УправлениеБюджетнойМоделью.НастройкиСпискаДанных(ВыбранныеВарианты);
		Если Правила.Количество()=0 Тогда
			Возврат Ложь;
		КонецЕсли;
		Для Каждого ЭлементМодели Из Правила Цикл
			Если Объект.ВариантРазвертыванияКомплектаБюджетов=Перечисления.фин_ВариантыРазвертыванияКомплектаБюджетов.ПриНаличииСуществующихНастроекКомплектаВнестиВНихИзменения Тогда
		
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	фин_СпискиДанных.Ссылка
					|ИЗ
					|	Справочник.фин_СпискиДанных КАК фин_СпискиДанных
					|ГДЕ
					|	фин_СпискиДанных.ПозицияКлассификатора = &ПозицияКлассификатора
					|	И НЕ фин_СпискиДанных.ПометкаУдаления";
				
				Запрос.УстановитьПараметр("ПозицияКлассификатора", ЭлементМодели.Ключ);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					НоваяМодель = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					Для Каждого ТЧ Из Метаданные.Справочники.фин_СпискиДанных.ТабличныеЧасти Цикл
						НоваяМодель[ТЧ.Имя].Очистить();
					КонецЦикла;
				Иначе
					НоваяМодель = Справочники.фин_СпискиДанных.СоздатьЭлемент();
					НоваяМодель.УстановитьНовыйКод();
				КонецЕсли;
			Иначе
				НоваяМодель = Справочники.фин_СпискиДанных.СоздатьЭлемент();
				НоваяМодель.УстановитьНовыйКод();
			КонецЕсли;
			СтруктураНастроек = ЭлементМодели.Значение;
			НоваяМодель.Наименование = Строка(ЭлементМодели.Ключ);
			НоваяМодель.ПозицияКлассификатора = ЭлементМодели.Ключ;
			ЗаполнитьЗначенияСвойств(НоваяМодель,СтруктураНастроек);
			Для Каждого ТЧ Из Метаданные.Справочники.фин_СпискиДанных.ТабличныеЧасти Цикл
				Если СтруктураНастроек.Свойство(ТЧ.Имя) Тогда
					Для Каждого СтрокаДобавить Из СтруктураНастроек[ТЧ.Имя] Цикл
						НоваяСтрока = НоваяМодель[ТЧ.Имя].Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДобавить);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			НоваяМодель.Записать();
			
			НС = Объект.СпискиДанныхКЗаполнению.Добавить();
			НС.СписокДанных = НоваяМодель.Ссылка;
			
		КонецЦикла;

		Возврат Истина;
	КонецФункции

	&НаСервере
	Функция СоздатьПравилаРасчетаРазрезов(Правила)
		Если Правила.Количество()=0 Тогда
			Возврат Ложь;
		КонецЕсли;
		Для Каждого ЭлементМодели Из Правила Цикл
			Если НЕ ЗначениеЗаполнено(ЭлементМодели.Значение.РассчитываемыйРазрез) Тогда
				Продолжить;
			КонецЕсли;
			Если Объект.ВариантРазвертыванияКомплектаБюджетов=Перечисления.фин_ВариантыРазвертыванияКомплектаБюджетов.ПриНаличииСуществующихНастроекКомплектаВнестиВНихИзменения Тогда
		
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	фин_ПравилаАвтоматическогоРасчетаРазрезовБюджетирования.Ссылка
					|ИЗ
					|	Справочник.фин_ПравилаАвтоматическогоРасчетаРазрезовБюджетирования КАК фин_ПравилаАвтоматическогоРасчетаРазрезовБюджетирования
					|ГДЕ
					|	фин_ПравилаАвтоматическогоРасчетаРазрезовБюджетирования.ПозицияКлассификатора = &ПозицияКлассификатора
					|	И НЕ фин_ПравилаАвтоматическогоРасчетаРазрезовБюджетирования.ПометкаУдаления";
				
				Запрос.УстановитьПараметр("ПозицияКлассификатора", ЭлементМодели.Ключ);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					НоваяМодель = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					Для Каждого ТЧ Из Метаданные.Справочники.фин_ПравилаАвтоматическогоРасчетаРазрезовБюджетирования.ТабличныеЧасти Цикл
						НоваяМодель[ТЧ.Имя].Очистить();
					КонецЦикла;
				Иначе
					НоваяМодель = Справочники.фин_ПравилаАвтоматическогоРасчетаРазрезовБюджетирования.СоздатьЭлемент();
					НоваяМодель.УстановитьНовыйКод();
				КонецЕсли;
			Иначе
				НоваяМодель = Справочники.фин_ПравилаАвтоматическогоРасчетаРазрезовБюджетирования.СоздатьЭлемент();
				НоваяМодель.УстановитьНовыйКод();
			КонецЕсли;
			СтруктураНастроек = ЭлементМодели.Значение;
			НоваяМодель.Наименование = Строка(ЭлементМодели.Ключ);
			НоваяМодель.ПозицияКлассификатора = ЭлементМодели.Ключ;
			ЗаполнитьЗначенияСвойств(НоваяМодель,СтруктураНастроек);
			Для Каждого ТЧ Из Метаданные.Справочники.фин_ПравилаАвтоматическогоРасчетаРазрезовБюджетирования.ТабличныеЧасти Цикл
				Если СтруктураНастроек.Свойство(ТЧ.Имя) Тогда
					Для Каждого СтрокаДобавить Из СтруктураНастроек[ТЧ.Имя] Цикл
						НоваяСтрока = НоваяМодель[ТЧ.Имя].Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДобавить);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			НоваяМодель.Записать();
			
			Измерение 			= фин_УправлениеБюджетнойМодельюВызовСервераПовтИсп.ПолучитьИзмерениеПоИдентификатору(ЭлементМодели.Ключ);
			НаборЗаписей 		= РегистрыСведений.фин_ПрименениеПравилАвтоматическогоРасчетаРазрезов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Измерение.Установить(Измерение);
			НС 					= НаборЗаписей.Добавить();
			НС.Период 			= Объект.ДатаВводаВДействие;
			НС.Измерение 		= Измерение;
			НС.ПрименятьПравило	= Истина;
			НС.Правило 			= НоваяМодель.Ссылка;
			НаборЗаписей.Записать();
			
		КонецЦикла;

		Возврат Истина;
	КонецФункции

	&НаСервере
	Функция СоздатьМоделиРаспределения(Модели)
		Если Модели.Количество()=0 Тогда
			Возврат Ложь;
		КонецЕсли;
		Для Каждого ЭлементМодели Из Модели Цикл
			Если Объект.ВариантРазвертыванияКомплектаБюджетов=Перечисления.фин_ВариантыРазвертыванияКомплектаБюджетов.ПриНаличииСуществующихНастроекКомплектаВнестиВНихИзменения Тогда
		
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	фин_МоделиРаспределенияБюджетныхДанных.Ссылка
					|ИЗ
					|	Справочник.фин_МоделиРаспределенияБюджетныхДанных КАК фин_МоделиРаспределенияБюджетныхДанных
					|ГДЕ
					|	фин_МоделиРаспределенияБюджетныхДанных.ПозицияКлассификатора = &ПозицияКлассификатора
					|	И НЕ фин_МоделиРаспределенияБюджетныхДанных.ПометкаУдаления";
				
				Запрос.УстановитьПараметр("ПозицияКлассификатора", ЭлементМодели.Ключ);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					НоваяМодель = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					Для Каждого ТЧ Из Метаданные.Справочники.фин_МоделиРаспределенияБюджетныхДанных.ТабличныеЧасти Цикл
						НоваяМодель[ТЧ.Имя].Очистить();
					КонецЦикла;
				Иначе
					НоваяМодель = Справочники.фин_МоделиРаспределенияБюджетныхДанных.СоздатьЭлемент();
					НоваяМодель.УстановитьНовыйКод();
				КонецЕсли;
			Иначе
				НоваяМодель = Справочники.фин_МоделиРаспределенияБюджетныхДанных.СоздатьЭлемент();
				НоваяМодель.УстановитьНовыйКод();
			КонецЕсли;
			СтруктураНастроек = ЭлементМодели.Значение;
			НоваяМодель.Наименование = Строка(ЭлементМодели.Ключ);
			НоваяМодель.ПозицияКлассификатора = ЭлементМодели.Ключ;
			ЗаполнитьЗначенияСвойств(НоваяМодель,СтруктураНастроек);
			Для Каждого ТЧ Из Метаданные.Справочники.фин_МоделиРаспределенияБюджетныхДанных.ТабличныеЧасти Цикл
				Если СтруктураНастроек.Свойство(ТЧ.Имя) Тогда
					Для Каждого СтрокаДобавить Из СтруктураНастроек[ТЧ.Имя] Цикл
						НоваяСтрока = НоваяМодель[ТЧ.Имя].Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДобавить);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			НоваяМодель.Записать();
			
			ФП = фин_УправлениеБюджетнойМодельюВызовСервераПовтИсп.ПолучитьПоказательИнформационнойБазыПоИдентификатору(ЭлементМодели.Ключ);
			НаборЗаписей = РегистрыСведений.фин_РасчетМоделейРаспределения.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.РаспределяемыйПоказатель.Установить(ФП);
			НС = НаборЗаписей.Добавить();
			НС.Период = Объект.ДатаВводаВДействие;
			НС.РаспределяемыйПоказатель = ФП;
			НС.ПрименятьМодель = Истина;
			НС.Модель = НоваяМодель.Ссылка;
			НаборЗаписей.Записать();
			
		КонецЦикла;

		Возврат Истина;
	КонецФункции

	&НаСервере
	Функция СоздатьПроизводственныеМодели(Модели)
		Если Модели.Количество()=0 Тогда
			Возврат Ложь;
		КонецЕсли;
		Для Каждого ЭлементМодели Из Модели Цикл
			Если Объект.ВариантРазвертыванияКомплектаБюджетов=Перечисления.фин_ВариантыРазвертыванияКомплектаБюджетов.ПриНаличииСуществующихНастроекКомплектаВнестиВНихИзменения Тогда
		
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	фин_ПроизводственныеМодели.Ссылка
					|ИЗ
					|	Справочник.фин_ПроизводственныеМодели КАК фин_ПроизводственныеМодели
					|ГДЕ
					|	фин_ПроизводственныеМодели.ПозицияКлассификатора = &ПозицияКлассификатора
					|	И НЕ фин_ПроизводственныеМодели.ПометкаУдаления";
				
				Запрос.УстановитьПараметр("ПозицияКлассификатора", ЭлементМодели.Ключ);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					НоваяМодель = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					Для Каждого ТЧ Из Метаданные.Справочники.фин_ПроизводственныеМодели.ТабличныеЧасти Цикл
						НоваяМодель[ТЧ.Имя].Очистить();
					КонецЦикла;
				Иначе
					НоваяМодель = Справочники.фин_ПроизводственныеМодели.СоздатьЭлемент();
					НоваяМодель.УстановитьНовыйКод();
				КонецЕсли;
			Иначе
				НоваяМодель = Справочники.фин_ПроизводственныеМодели.СоздатьЭлемент();
				НоваяМодель.УстановитьНовыйКод();
			КонецЕсли;
			СтруктураНастроек = ЭлементМодели.Значение;
			НоваяМодель.Наименование = Строка(ЭлементМодели.Ключ);
			НоваяМодель.ПозицияКлассификатора = ЭлементМодели.Ключ;
			ЗаполнитьЗначенияСвойств(НоваяМодель,СтруктураНастроек);
			Для Каждого ТЧ Из Метаданные.Справочники.фин_ПроизводственныеМодели.ТабличныеЧасти Цикл
				Если СтруктураНастроек.Свойство(ТЧ.Имя) Тогда
					Для Каждого СтрокаДобавить Из СтруктураНастроек[ТЧ.Имя] Цикл
						НоваяСтрока = НоваяМодель[ТЧ.Имя].Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДобавить);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			НоваяМодель.Записать();
			
			ФП = фин_УправлениеБюджетнойМодельюВызовСервераПовтИсп.ПолучитьПоказательИнформационнойБазыПоИдентификатору(ЭлементМодели.Ключ);
			НаборЗаписей = РегистрыСведений.фин_РасчетПроизводственныхМоделей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПоказательПланированияПроизводстваПродукции.Установить(ФП);
			НС = НаборЗаписей.Добавить();
			НС.Период = Объект.ДатаВводаВДействие;
			НС.ПоказательПланированияПроизводстваПродукции = ФП;
			НС.ПрименятьМодель = Истина;
			НС.Модель = НоваяМодель.Ссылка;
			НаборЗаписей.Записать();
			
		КонецЦикла;

		Возврат Истина;
	КонецФункции

	&НаСервере
	Функция СоздатьЗависимости(ВсеЗависимостиБазы)
		Если ВсеЗависимостиБазы.Количество()=0 Тогда
			Возврат Ложь;
		КонецЕсли;
		Для Каждого ЭлементЗависимостейБазы Из ВсеЗависимостиБазы Цикл
			СтруктураНастроек = ЭлементЗависимостейБазы.Значение;
			Для Каждого ЭлементЗависимостей Из СтруктураНастроек Цикл
				Если Объект.ВариантРазвертыванияКомплектаБюджетов=Перечисления.фин_ВариантыРазвертыванияКомплектаБюджетов.ПриНаличииСуществующихНастроекКомплектаВнестиВНихИзменения Тогда
		
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	фин_НастройкаЗависимостейМеждуФинансовымиПоказателями.Ссылка
						|ИЗ
						|	Документ.фин_НастройкаЗависимостейМеждуФинансовымиПоказателями КАК фин_НастройкаЗависимостейМеждуФинансовымиПоказателями
						|ГДЕ
						|	фин_НастройкаЗависимостейМеждуФинансовымиПоказателями.ПозицияКлассификатора = &ПозицияКлассификатора
						|	И фин_НастройкаЗависимостейМеждуФинансовымиПоказателями.ФинансовыйПоказательВлияющая = &ФинансовыйПоказательВлияющая
						|	И фин_НастройкаЗависимостейМеждуФинансовымиПоказателями.Проведен";
					
					Запрос.УстановитьПараметр("ПозицияКлассификатора", ЭлементЗависимостейБазы.Ключ);
					Запрос.УстановитьПараметр("ФинансовыйПоказательВлияющая", ЭлементЗависимостей.ФинансовыйПоказательВлияющая);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Если ВыборкаДетальныеЗаписи.Следующий() Тогда
						НовыйДокумент = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
						НовыйДокумент.ЗависимостиОборотовПоСтатьям.Очистить();
					Иначе
						НовыйДокумент = Документы.фин_НастройкаЗависимостейМеждуФинансовымиПоказателями.СоздатьДокумент();
						НовыйДокумент.Дата = Объект.ДатаВводаВДействие;
						НовыйДокумент.УстановитьНовыйНомер();
					КонецЕсли;
				Иначе
					НовыйДокумент = Документы.фин_НастройкаЗависимостейМеждуФинансовымиПоказателями.СоздатьДокумент();
					НовыйДокумент.Дата = Объект.ДатаВводаВДействие;
					НовыйДокумент.УстановитьНовыйНомер();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НовыйДокумент,ЭлементЗависимостей);
				Для Каждого СтрокаТЧ Из ЭлементЗависимостей.ЗависимостиОборотовПоСтатьям Цикл
					НоваяСтрока = НовыйДокумент.ЗависимостиОборотовПоСтатьям.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
				КонецЦикла;
				НовыйДокумент.Состояние = фин_ОбщегоНазначенияВызовСервераПовтИсп.СостояниеОбъектаУтвержден();
				НовыйДокумент.Дата = Объект.ДатаВводаВДействие;
				НовыйДокумент.ПозицияКлассификатора = ЭлементЗависимостейБазы.Ключ;
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			КонецЦикла;
		КонецЦикла;

		Возврат Истина;
	КонецФункции

	&НаСервере
	Функция СоздатьФормулы(ВсеФормулыСуммы,ВсеФормулыКоличества,СозданныеФП,СозданныеСтатьи)
		Если ВсеФормулыСуммы.Количество()=0 И ВсеФормулыКоличества.Количество()=0 Тогда
			Возврат Ложь;
		КонецЕсли;
		Для Каждого ЭлементФормул Из ВсеФормулыСуммы Цикл
			Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ЭлементФормул.Ключ);
			Если Найти(Имя,"Группа")=1 Тогда
				Показатель = СозданныеСтатьи.Получить(ЭлементФормул.Ключ);
			Иначе
				Показатель = СозданныеФП.Получить(ЭлементФормул.Ключ);
			КонецЕсли;
			Если Показатель = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПоказательОбъект = Показатель.ПолучитьОбъект();
			ФормулаСсылка = СоздатьФормулу(ЭлементФормул.Значение,ЭлементФормул.Ключ);
			ПоказательОбъект.Формула = ФормулаСсылка;
			ПоказательОбъект.Записать();
		КонецЦикла;
		Для Каждого ЭлементФормул Из ВсеФормулыКоличества Цикл
			Имя = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ЭлементФормул.Ключ);
			Если Найти(Имя,"Группа")=1 Тогда
				Показатель = СозданныеСтатьи.Получить(ЭлементФормул.Ключ);
			Иначе
				Показатель = СозданныеФП.Получить(ЭлементФормул.Ключ);
			КонецЕсли;
			Если Показатель = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПоказательОбъект = Показатель.ПолучитьОбъект();
			ФормулаСсылка = СоздатьФормулу(ЭлементФормул.Значение,ЭлементФормул.Ключ);
			ПоказательОбъект.ФормулаКоличество = ФормулаСсылка;
			ПоказательОбъект.Записать();
		КонецЦикла;
		Возврат Истина;
	КонецФункции

	&НаСервере
	Функция СоздатьФормулу(СтруктураФормулы,ПозицияКлассификатора)
		Если СокрЛП(СтруктураФормулы.Формула)="" ИЛИ СтруктураФормулы.ВходящиеПоказатели.Количество()=0 Тогда
			Возврат Справочники.фин_ФормулыРасчетаФинансовыхПоказателей.ПустаяСсылка();
		КонецЕсли;
		НоваяФормула = Справочники.фин_ФормулыРасчетаФинансовыхПоказателей.СоздатьЭлемент();
		НоваяФормула.ПозицияКлассификатора 	= ПозицияКлассификатора;
		НоваяФормула.Наименование 			= Строка(ПозицияКлассификатора);
		НоваяФормула.Формула 				= СтруктураФормулы.Формула;
		СтруктураФормулы.Свойство("Комментарии",НоваяФормула.Комментарии);
		Для Каждого СтрокаПоказатель Из СтруктураФормулы.ВходящиеПоказатели Цикл
			НоваяСтрока = НоваяФормула.ВходящиеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПоказатель);
		КонецЦикла;
		Если СтруктураФормулы.Свойство("НастройкаЗаполненияРазрезов") Тогда
			Для Каждого СтрокаПоказатель Из СтруктураФормулы.НастройкаЗаполненияРазрезов Цикл
				НоваяСтрока = НоваяФормула.НастройкаЗаполненияРазрезов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПоказатель);
			КонецЦикла;
		КонецЕсли;
		НоваяФормула.УстановитьНовыйКод();
		НоваяФормула.Записать();
		Возврат НоваяФормула.Ссылка;
	КонецФункции

	&НаСервере
	Функция СоздатьРасчетныеПоказатели()
		Если Объект.РасчетныеСтавки.Количество()=0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_РасчетныеПоказатели.Ссылка,
			|	фин_РасчетныеПоказатели.ПозицияКлассификатора
			|ИЗ
			|	Справочник.фин_РасчетныеПоказатели КАК фин_РасчетныеПоказатели
			|ГДЕ
			|	фин_РасчетныеПоказатели.ПозицияКлассификатора В(&ПозицияКлассификатора)
			|	И НЕ фин_РасчетныеПоказатели.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ПозицияКлассификатора", Объект.РасчетныеСтавки.Выгрузить().ВыгрузитьКолонку("РасчетныйПоказатель"));
		
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаРП = РезультатЗапроса.Выгрузить();
		
		Для Каждого СтрокаРП Из Объект.РасчетныеСтавки Цикл
			Если Объект.ВариантРазвертыванияКомплектаБюджетов=Перечисления.фин_ВариантыРазвертыванияКомплектаБюджетов.ПриНаличииСуществующихНастроекКомплектаВнестиВНихИзменения Тогда
				СтрокиРП = ТаблицаРП.НайтиСтроки(Новый Структура("ПозицияКлассификатора",СтрокаРП.РасчетныйПоказатель));
				Если СтрокиРП.Количество()=0 Тогда
					НовыйРП = Справочники.фин_РасчетныеПоказатели.СоздатьЭлемент();
					НовыйРП.УстановитьНовыйКод();
				Иначе
					НовыйРП = СтрокиРП[0].Ссылка.ПолучитьОбъект();
				КонецЕсли;
				НовыйРП.ПозицияКлассификатора 	= СтрокаРП.РасчетныйПоказатель;
				НовыйРП.Наименование 			= Строка(СтрокаРП.РасчетныйПоказатель);
				НовыйРП.СпособВвода 			= Перечисления.фин_СпособыВводаЗначенийРасчетныхПоказателей.ПоМереИзменения;
				НовыйРП.Записать();
				РП = НовыйРП.Ссылка;
			Иначе
				НовыйРП = Справочники.фин_РасчетныеПоказатели.СоздатьЭлемент();
				НовыйРП.УстановитьНовыйКод();
				НовыйРП.ПозицияКлассификатора 	= СтрокаРП.РасчетныйПоказатель;
				НовыйРП.Наименование 			= Строка(СтрокаРП.РасчетныйПоказатель);
				НовыйРП.СпособВвода 			= Перечисления.фин_СпособыВводаЗначенийРасчетныхПоказателей.ПоМереИзменения;
				НовыйРП.Записать();
				РП = НовыйРП.Ссылка;
			КонецЕсли;
			// установка значения
			Если Объект.ВариантРазвертыванияКомплектаБюджетов=Перечисления.фин_ВариантыРазвертыванияКомплектаБюджетов.ПриНаличииСуществующихНастроекКомплектаВнестиВНихИзменения Тогда
		
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	фин_ВводЗначенийРасчетныхПоказателей.Ссылка
					|ИЗ
					|	Документ.фин_ВводЗначенийРасчетныхПоказателей КАК фин_ВводЗначенийРасчетныхПоказателей
					|ГДЕ
					|	фин_ВводЗначенийРасчетныхПоказателей.РасчетныйПоказатель = &РасчетныйПоказатель
					|	И фин_ВводЗначенийРасчетныхПоказателей.ПериодПланирования = &ПериодПланирования
					|	И фин_ВводЗначенийРасчетныхПоказателей.Сценарий = &Сценарий
					|	И НЕ фин_ВводЗначенийРасчетныхПоказателей.ПометкаУдаления";
				
				Запрос.УстановитьПараметр("ПериодПланирования", Объект.ДатаВводаВДействие);
				Запрос.УстановитьПараметр("РасчетныйПоказатель", РП);
				Запрос.УстановитьПараметр("Сценарий", ОсновнойСценарийПланирования);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					Документ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Иначе
					Документ = Документы.фин_ВводЗначенийРасчетныхПоказателей.СоздатьДокумент();
					Документ.Дата 				= Объект.ДатаВводаВДействие;
					Документ.УстановитьНовыйНомер();
				КонецЕсли;
		
			Иначе
				Документ = Документы.фин_ВводЗначенийРасчетныхПоказателей.СоздатьДокумент();
				Документ.Дата 				= Объект.ДатаВводаВДействие;
				Документ.УстановитьНовыйНомер();
			КонецЕсли;
			Документ.РасчетныйПоказатель = РП;
			Документ.Дата 				= Объект.ДатаВводаВДействие;
			Документ.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ДатаВводаВДействие,ОсновнойСценарийПланирования);
			Документ.Сценарий 			= ОсновнойСценарийПланирования;
			Документ.Состояние 			= фин_ОбщегоНазначенияВызовСервераПовтИсп.СостояниеОбъектаУтвержден();
			Документ.ИспользоватьЗначенияДляФактическихДанных=Истина;
			Документ.ЗначенияПоказателей.Очистить();
			НС = Документ.ЗначенияПоказателей.Добавить();
			НС.Значение = СтрокаРП.Значение;
			Документ.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла;

		Возврат Истина;
	КонецФункции

	&НаСервере
	Функция СоздатьРегламент()
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_БюджетныйРегламент.Ссылка
			|ИЗ
			|	Документ.фин_БюджетныйРегламент КАК фин_БюджетныйРегламент
			|ГДЕ
			|	фин_БюджетныйРегламент.Дата = &Дата
			|	И фин_БюджетныйРегламент.Проведен";
		
		Запрос.УстановитьПараметр("Дата", Объект.ДатаВводаВДействие);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Регламент = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Регламент.Регламент.Очистить();
			Регламент.ПредшествующиеБюджеты.Очистить();
			Регламент.УстановленныеПараметрыКомплекта.Очистить();
			Регламент.ЗначенияПользовательскихПараметровКомплектаБюджетов.Очистить();
		Иначе
			Регламент = Документы.фин_БюджетныйРегламент.СоздатьДокумент();
			Регламент.Дата = Объект.ДатаВводаВДействие;
			Регламент.УстановитьНовыйНомер();
		КонецЕсли;
		Регламент.Состояние=фин_ОбщегоНазначенияВызовСервераПовтИсп.СостояниеОбъектаУтвержден();
		Регламент.РасширенныйРежим = Истина;
		Регламент.ДляКомплектаБюджетов = Истина;
		Для Каждого СтрокаБюджет Из Объект.Бюджеты Цикл
			ПозицияКлассификатора = СтрокаБюджет.Бюджет;
			Бюджет = фин_УправлениеБюджетнойМодельюВызовСервераПовтИсп.ПолучитьПоказательИнформационнойБазыПоИдентификатору(ПозицияКлассификатора);
			НоваяСтрока = Регламент.Регламент.Добавить();
			НоваяСтрока.Бюджет 			= Бюджет;
			НоваяСтрока.Ранг 			= СтрокаБюджет.Уровень;
			НоваяСтрока.РангКУстановке 	= СтрокаБюджет.Уровень;
			НоваяСтрока.Ячейка 			= СтрокаБюджет.Ячейка;
			НоваяСтрока.ПоЦентру 		= СтрокаБюджет.ПоЦентру;
			
			СтрокиПредшественники = Объект.ПредшествующиеБюджеты.НайтиСтроки(Новый Структура("Бюджет",ПозицияКлассификатора));
			Для Каждого СтрокаПредшественник Из СтрокиПредшественники Цикл
				НоваяСтрокаПредшественник = Регламент.ПредшествующиеБюджеты.Добавить();
				НоваяСтрокаПредшественник.Бюджет 			= Бюджет;
				НоваяСтрокаПредшественник.Предшественник 	= фин_УправлениеБюджетнойМодельюВызовСервераПовтИсп.ПолучитьПоказательИнформационнойБазыПоИдентификатору(СтрокаПредшественник.Предшественник);
				НоваяСтрокаПредшественник.Обязательный		= Истина;
			КонецЦикла;
		КонецЦикла;
		Для Каждого Вариант Из ВыбранныеВариантыКомплекта Цикл
			Если Регламент.УстановленныеПараметрыКомплекта.НайтиСтроки(Новый Структура("Параметр",Вариант.Значение)).Количество()=0 Тогда
				НС = Регламент.УстановленныеПараметрыКомплекта.Добавить();
				НС.Параметр = Вариант.Значение;
			КонецЕсли;
		КонецЦикла;
		НС = Регламент.УстановленныеПараметрыКомплекта.Добавить();
		НС.Параметр = Объект.ВариантРазвертыванияКомплектаБюджетов;
		Для Каждого ПользовательскийПараметр Из Объект.ПользовательскиеПараметры Цикл
			НС = Регламент.ЗначенияПользовательскихПараметровКомплектаБюджетов.Добавить();
			НС.Параметр = ПользовательскийПараметр.Параметр;
			НС.Значение = ПользовательскийПараметр.Значение;
		КонецЦикла;
		Для Каждого ПользовательскийПараметр Из Объект.РасчетныеСтавки Цикл
			НС = Регламент.ЗначенияПользовательскихПараметровКомплектаБюджетов.Добавить();
			НС.Параметр = ПользовательскийПараметр.РасчетныйПоказатель;
			НС.Значение = ПользовательскийПараметр.Значение;
		КонецЦикла;
		//	Регламент.ОбменДанными.Загрузка=Истина;
		Регламент.ДополнительныеСвойства.Вставить("ВнешняяОбработка");
		Регламент.Записать(РежимЗаписиДокумента.Проведение);
		Возврат Истина;
	КонецФункции

	&НаСервере
	Функция СоздатьСтруктуруБюджетов(ДанныеХранилища,СозданныеФП,СозданныеСтатьи)
		СозданныеФП = Новый Соответствие;
		СозданныеСтатьи = Новый Соответствие;
		
		СоответствиеПоказателейИТиповЦен = Новый Соответствие;
		
		// по закупочной цене
		
		ТипЦен = ?(ВыбранныеВариантыКомплекта.НайтиПоЗначению(Перечисления.фин_УсловияИспользованияКомпонентМастерБюджета.ПриобретениеТМЗИУслугПланируетсяСНДС)=Неопределено,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенЗакупкиБезНДС,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенЗакупки);

		
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.ЗакупкаКанцелярскихИПрочихРасходныхМатериалов,			ТипЦен);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.ЗакупкаМатериаловДляОбщехозяйственныхНужд,				ТипЦен);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.ЗакупкаМатериаловНаОбслуживаниеТранспорта,				ТипЦен);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.ЗакупкаОргтехникиКомплектующихИПрограммногоОбеспечения,	ТипЦен);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.ЗакупкаСырьяИМатериалов,									ТипЦен);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.ЗакупкаСырьяИМатериаловДляВспомогательныхПроизводств,	ТипЦен);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.ЗакупкаТоваров,											ТипЦен);
		
		// закупочная, всегда с НДС
		
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.ЗакупкаТМЗ,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенЗакупки);
		
		
		// закупочная, всегда без НДС
		
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.КанцелярскиеИПрочиеРасходныеМатериалы,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенЗакупкиБезНДС);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.МатериалыДляОбщехозяйственныхНужд,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенЗакупкиБезНДС);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.МатериалыНаОбслуживаниеТранспорта,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенЗакупкиБезНДС);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.ОргтехникаКомплектующиеИПрограммноеОбеспечение,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенЗакупкиБезНДС);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.СырьеИМатериалыДляВспомогательныхПроизводств,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенЗакупкиБезНДС);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.ЗапасСырьяИМатериаловНаКонец,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенЗакупкиБезНДС);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.ЗапасСырьяИМатериаловНаНачало,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенЗакупкиБезНДС);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.ЗапасТоваровНаКонецПериода,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенЗакупкиБезНДС);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.ЗапасТоваровНаНачало,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенЗакупкиБезНДС);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.СписаниеСырьяИМатериаловВПроизводство,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенЗакупкиБезНДС);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.СписаниеСырьяИМатериаловВПроизводствоУслуг,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенЗакупкиБезНДС);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.СебестоимостьРеализованныхТоваров,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенЗакупкиБезНДС);
		
		// по себестоимости
		
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.ЗапасПродукцииНаКонец,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенПлановойСебестоимости);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.ЗапасПродукцииНаНачало,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенПлановойСебестоимости);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.ОбъемПроизводства,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенПлановойСебестоимости);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.СебестоимостьРеализованнойПродукции,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенПлановойСебестоимости);
		
		
		// реализация
		
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.РеализацияГотовойПродукции,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенРеализации);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.РеализацияТоваров,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенРеализации);
		СоответствиеПоказателейИТиповЦен.Вставить(Перечисления.фин_КлассификаторСтатейБюджетов.РеализацияУслуг,ПланыВидовХарактеристик.фин_ПользовательскиеПараметрыКомплектаБюджетов.ТипЦенРеализации);

		
		СозданныеГруппыФП = Новый Соответствие;
		ДеревоПоказателей = ДанныеФормыВЗначение(ДеревоПользовательскихПараметров,Тип("ДеревоЗначений"));
		Статьи = ДанныеХранилища.СтатьиБюджетов;
		Если Объект.ВариантРазвертыванияКомплектаБюджетов = Перечисления.фин_ВариантыРазвертыванияКомплектаБюджетов.ПриНаличииСуществующихНастроекКомплектаВнестиВНихИзменения Тогда
		
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	фин_ФинансовыеПоказатели.Ссылка,
				|	фин_ФинансовыеПоказатели.ПозицияКлассификатора
				|ИЗ
				|	Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
				|ГДЕ
				|	НЕ фин_ФинансовыеПоказатели.ПометкаУдаления
				|	И НЕ фин_ФинансовыеПоказатели.ЭтоГруппа";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ТаблицаФП = РезультатЗапроса.Выгрузить();
		Иначе
			ТаблицаФП = Неопределено;
		КонецЕсли;
		Для Каждого СтрокаБюджет Из Объект.Бюджеты Цикл
			Если Объект.ВариантРазвертыванияКомплектаБюджетов = Перечисления.фин_ВариантыРазвертыванияКомплектаБюджетов.ПриНаличииСуществующихНастроекКомплектаВнестиВНихИзменения Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	фин_Бюджеты.Ссылка
					|ИЗ
					|	Справочник.фин_Бюджеты КАК фин_Бюджеты
					|ГДЕ
					|	фин_Бюджеты.ПозицияКлассификатора = &ПозицияКлассификатора
					|	И НЕ фин_Бюджеты.ПометкаУдаления";
				
				Запрос.УстановитьПараметр("ПозицияКлассификатора", СтрокаБюджет.Бюджет);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					ОбъектБюджет = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Иначе
					ОбъектБюджет = Справочники.фин_Бюджеты.СоздатьЭлемент();
					ОбъектБюджет.УстановитьНовыйКод();
				КонецЕсли;
			Иначе
				ОбъектБюджет = Справочники.фин_Бюджеты.СоздатьЭлемент();
				ОбъектБюджет.УстановитьНовыйКод();
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаБюджет.ИтогиБюджета) Тогда
				ОбъектБюджет.РежимыРасчетаИтоговойСтрокиБюджета = Перечисления.фин_РежимыРасчетаИтоговойСтрокиБюджета.ПоИтоговойФункции;
				ОбъектБюджет.ИтоговаяФункция = СтрокаБюджет.ИтогиБюджета;
			Иначе
				ОбъектБюджет.РежимыРасчетаИтоговойСтрокиБюджета = Перечисления.фин_РежимыРасчетаИтоговойСтрокиБюджета.НеРассчитывать;
			КонецЕсли;
			ОбъектБюджет.ПозицияКлассификатора 			= СтрокаБюджет.Бюджет;
			ОбъектБюджет.НаименованиеПолное 			= Строка(СтрокаБюджет.Бюджет);
			ОбъектБюджет.Наименование 					= ОбъектБюджет.НаименованиеПолное;
			ОбъектБюджет.ИспользоватьКодыСтрокБюджета 	= Истина;
			ОбъектБюджет.РучнаяНастройкаИтоговПоГруппам = СтрокаБюджет.Бюджет = Перечисления.фин_КлассификаторБюджетов.БюджетДвиженияДенежныхСредств;
			ОбъектБюджет.СпособСортировкиСтатей 		= "КодСтрокиБюджета";
			ОбъектБюджет.СпособСортировкиСтатейПредставление = "Код строки бюджета";
			ОбъектБюджет.УчетПоКоличеству 				= СтрокаБюджет.УчетПоКоличеству;
			ОбъектБюджет.УчетПоСумме 					= СтрокаБюджет.УчетПоСумме;
			СтрокиРазрезов = Объект.РазрезыБюджетов.НайтиСтроки(Новый Структура("Бюджет",СтрокаБюджет.Бюджет));
			Для Каждого СтрокаРазрез Из СтрокиРазрезов Цикл
				РазрезБазы = фин_УправлениеБюджетнойМодельюВызовСервераПовтИсп.ПолучитьИзмерениеПоИдентификатору(СтрокаРазрез.Разрез);
				Если ОбъектБюджет.РазрезыУчета.НайтиСтроки(Новый Структура("Измерение",РазрезБазы)).Количество()=0 Тогда
					НС = ОбъектБюджет.РазрезыУчета.Добавить();
					НС.Измерение = РазрезБазы;
					НС.Разрез = фин_УправлениеБюджетнойМодельюВызовСервераПовтИсп.ПолучитьПоказательИнформационнойБазыПоИдентификатору(СтрокаРазрез.Разрез);
				КонецЕсли;
			КонецЦикла;
			СсылкаНаБюджет = ОбъектБюджет.Ссылка;
			ОбъектБюджет.Записать();
			Если ЗначениеЗаполнено(СсылкаНаБюджет) И Объект.ВариантРазвертыванияКомплектаБюджетов = Перечисления.фин_ВариантыРазвертыванияКомплектаБюджетов.ПриНаличииСуществующихНастроекКомплектаВнестиВНихИзменения Тогда
		
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	фин_СтатьиБюджета.Ссылка,
					|	фин_СтатьиБюджета.ПозицияКлассификатора
					|ИЗ
					|	Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
					|ГДЕ
					|	фин_СтатьиБюджета.Владелец = &Владелец
					//|	И фин_СтатьиБюджета.ЭтоГруппа = ЛОЖЬ
					|	И фин_СтатьиБюджета.ПометкаУдаления = ЛОЖЬ";
				
				Запрос.УстановитьПараметр("Владелец", СсылкаНаБюджет);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ТаблицаСтатей = РезультатЗапроса.Выгрузить();
			Иначе
				ТаблицаСтатей = Неопределено;
			КонецЕсли;
			СсылкаНаБюджет = ОбъектБюджет.Ссылка;
			СтатьиДанногоБюджета = Статьи.НайтиСтроки(Новый Структура("Бюджет",СтрокаБюджет.Бюджет));
			Для Каждого СтрокаСтатей Из СтатьиДанногоБюджета Цикл
				Если ТаблицаСтатей<>Неопределено Тогда
					СтрокиПоСуществующим = ТаблицаСтатей.НайтиСтроки(Новый Структура("ПозицияКлассификатора",СтрокаСтатей.Статья));
					Если СтрокиПоСуществующим.Количество()=0 Тогда
						Если СтрокаСтатей.ЭтоГруппа Тогда
							Статья = Справочники.фин_СтатьиБюджета.СоздатьГруппу();	
						Иначе
							Статья = Справочники.фин_СтатьиБюджета.СоздатьЭлемент();	
						КонецЕсли;
						Статья.УстановитьНовыйКод();
					Иначе
						Статья = СтрокиПоСуществующим[0].Ссылка.ПолучитьОбъект();	
					КонецЕсли;
				Иначе
					Если СтрокаСтатей.ЭтоГруппа Тогда
						Статья = Справочники.фин_СтатьиБюджета.СоздатьГруппу();	
					Иначе
						Статья = Справочники.фин_СтатьиБюджета.СоздатьЭлемент();	
					КонецЕсли;
					Статья.УстановитьНовыйКод();
				КонецЕсли;
				Статья.Владелец = СсылкаНаБюджет;
				Статья.Наименование = ?(ЗначениеЗаполнено(СтрокаСтатей.НаименованиеСтатьи),СтрокаСтатей.НаименованиеСтатьи,Строка(СтрокаСтатей.Статья));
				Статья.ПозицияКлассификатора = СтрокаСтатей.Статья;
				Статья.КодСтрокиБюджета = СтрокаСтатей.КодСтроки;
				Если ЗначениеЗаполнено(СтрокаСтатей.Родитель) Тогда
					Статья.Родитель = СозданныеСтатьи.Получить(СтрокаСтатей.Родитель);
				КонецЕсли;
				Если НЕ СтрокаСтатей.ЭтоГруппа Тогда
					Статья.ИтоговаяФункция = Перечисления.фин_ИтоговыеФункции.Сумма;
					ФП = СозданныеФП.Получить(СтрокаСтатей.Статья);
					Если ФП<>Неопределено Тогда
						Статья.ФинансовыйПоказатель = ФП;
					Иначе
						Если ТаблицаФП <> Неопределено Тогда
							СтрокиФП = ТаблицаФП.НайтиСтроки(Новый Структура("ПозицияКлассификатора",СтрокаСтатей.Статья));
							Если СтрокиФП.Количество()>0 Тогда
								НовыйПоказатель = СтрокиФП[0].Ссылка.ПолучитьОбъект();
								НовыйПоказатель.РазрезыУчета.Очистить();
							Иначе
								НовыйПоказатель = Справочники.фин_ФинансовыеПоказатели.СоздатьЭлемент();
								НовыйПоказатель.УстановитьНовыйКод();
							КонецЕсли;
						Иначе
							НовыйПоказатель = Справочники.фин_ФинансовыеПоказатели.СоздатьЭлемент();
							НовыйПоказатель.УстановитьНовыйКод();
						КонецЕсли;
						НовыйПоказатель.Наименование 			= Строка(СтрокаСтатей.Статья);
						НовыйПоказатель.НаименованиеПолное 		= НовыйПоказатель.Наименование;
						НовыйПоказатель.ВидПоказателя 			= ?(ДанныеХранилища.ВсеФормулыСуммы.Получить(СтрокаСтатей.Статья)=Неопределено И ДанныеХранилища.ВсеФормулыКоличества.Получить(СтрокаСтатей.Статья)=Неопределено,Перечисления.фин_ВидыФинансовыхПоказателей.Оборотный,Перечисления.фин_ВидыФинансовыхПоказателей.Рассчитываемый);
						НовыйПоказатель.ПозицияКлассификатора 	= СтрокаСтатей.Статья;
						НовыйПоказатель.ИспользуемыйНоменклатурныйПеречень=Перечисления.узп_ИспользуемыеНоменклатурныеПеречни.РегламентированнаяНоменклатура;
						НовыйПоказатель.ОсновнаяВалюта 				= фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
						НовыйПоказатель.ПоРасценкам 				= СтрокаСтатей.ПоРасценкам;
						НовыйПоказатель.ПризнакПеретекающегоОстатка = СтрокаСтатей.ПризнакПеретекающегоОстатка;
						НовыйПоказатель.ТолькоДляПлановыхДанных 	= СтрокаСтатей.РасчетТолькоПриПланировании;
						НовыйПоказатель.УчетПоКоличеству 			= СтрокаСтатей.УчетПоКоличеству;
						НовыйПоказатель.УчетПоСумме 				= СтрокаСтатей.УчетПоСумме;
						ТипЦен = СоответствиеПоказателейИТиповЦен.Получить(СтрокаСтатей.Статья);
						Если ТипЦен<>Неопределено Тогда
							НовыйПоказатель.СпособЦенообразования = Перечисления.фин_СпособыЦенообразованияПоФинансовымПоказателям.ПоПрогнознымЦенамНоменклатуры;
							СтрокиДерева = ДеревоПоказателей.Строки.НайтиСтроки(Новый Структура("Параметр",ТипЦен),Истина);
							Если СтрокиДерева.Количество()>0 Тогда
								НовыйПоказатель.ИспользуемыйТипЦен = СтрокиДерева[0].Значение;
							КонецЕсли;
						Иначе
							НовыйПоказатель.СпособЦенообразования = Перечисления.фин_СпособыЦенообразованияПоФинансовымПоказателям.НеРассчитывать;
						КонецЕсли;
						//Если ЗначениеЗаполнено(СтрокаСтатей.Родитель) Тогда
						//	ГруппаФП = ПолучитьГруппуФППоБюджету(СтрокаСтатей.Бюджет,СозданныеГруппыФП);
						//	НовыйПоказатель.Родитель = ГруппаФП;
						//Иначе
							ГруппаФП = ПолучитьГруппуФППоБюджету(СтрокаСтатей.Бюджет,СозданныеГруппыФП);
							НовыйПоказатель.Родитель = ГруппаФП;
						//КонецЕсли;
						РазрезыСтатьи = Новый Структура(СтрокаСтатей.Разрезы);
						СтрокиРазрезов = Объект.РазрезыБюджетов.НайтиСтроки(Новый Структура("Бюджет",СтрокаБюджет.Бюджет));
						Для Каждого СтрокаРазрез Из СтрокиРазрезов Цикл
							Если НЕ РазрезыСтатьи.Свойство(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаРазрез.Разрез)) Тогда
								Продолжить;
							КонецЕсли;
							РазрезБазы = фин_УправлениеБюджетнойМодельюВызовСервераПовтИсп.ПолучитьИзмерениеПоИдентификатору(СтрокаРазрез.Разрез);
							Если ЗначениеЗаполнено(РазрезБазы) И НовыйПоказатель.РазрезыУчета.НайтиСтроки(Новый Структура("Измерение",РазрезБазы)).Количество()=0 Тогда
								НС = НовыйПоказатель.РазрезыУчета.Добавить();
								НС.Измерение = РазрезБазы;
								НС.Разрез = фин_УправлениеБюджетнойМодельюВызовСервераПовтИсп.ПолучитьПоказательИнформационнойБазыПоИдентификатору(СтрокаРазрез.Разрез);
							КонецЕсли;
						КонецЦикла;
						НовыйПоказатель.Записать();
						ФП = НовыйПоказатель.Ссылка;
						СозданныеФП.Вставить(СтрокаСтатей.Статья,ФП);
						Статья.ФинансовыйПоказатель = ФП;
					КонецЕсли;
				КонецЕсли;
				Статья.Записать();
				СозданныеСтатьи.Вставить(СтрокаСтатей.Статья,Статья.Ссылка);
			КонецЦикла;
		КонецЦикла;
		Возврат Истина;
	КонецФункции

	&НаСервере
	Функция ПолучитьГруппуФППоБюджету(Бюджет,СозданныеГруппыФП)
		ГруппаФП = СозданныеГруппыФП.Получить(Бюджет);
		Если ГруппаФП = Неопределено Тогда
			НоваяГруппаФП = Справочники.фин_ФинансовыеПоказатели.НайтиПоНаименованию(Строка(Бюджет));
			Если ЗначениеЗаполнено(НоваяГруппаФП) Тогда
				ГруппаФП = НоваяГруппаФП;
			Иначе
				НоваяГруппаФП = Справочники.фин_ФинансовыеПоказатели.СоздатьГруппу();
				НоваяГруппаФП.Наименование = Строка(Бюджет);
				НоваяГруппаФП.УстановитьНовыйКод();
				НоваяГруппаФП.Записать();
				ГруппаФП = НоваяГруппаФП.Ссылка;
			КонецЕсли;
			СозданныеГруппыФП.Вставить(Бюджет,ГруппаФП);
		КонецЕсли;
		Возврат ГруппаФП;
	КонецФункции

	&НаСервере
	Функция СоздатьРазрезыПланирования()
		ОбъектРазрез = ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Номенклатура.ПолучитьОбъект();
		ОбъектРазрез.ПозицияКлассификатора = Перечисления.фин_КлассификаторРазрезовБюджетов.Номенклатура;
		ОбъектРазрез.Записать();
		ОбъектРазрез = ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.ЦФО.ПолучитьОбъект();
		ОбъектРазрез.ПозицияКлассификатора = Перечисления.фин_КлассификаторРазрезовБюджетов.УправленческоеПодразделение;
		ОбъектРазрез.Записать();
		ОбъектРазрез = ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Проекты.ПолучитьОбъект();
		ОбъектРазрез.ПозицияКлассификатора = Перечисления.фин_КлассификаторРазрезовБюджетов.Проект;
		ОбъектРазрез.Записать();
		
		Запрос = Новый Запрос;
		
		Ссылки = Новый Массив;
		Ссылки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Разрез1);
		Ссылки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Разрез2);
		Ссылки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Разрез3);
		Ссылки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Разрез4);
		Ссылки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Разрез5);
		Ссылки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Разрез6);
		Ссылки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Разрез7);
		Ссылки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Разрез8);
		Ссылки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Разрез9);
		Ссылки.Добавить(Перечисления.фин_ФактическиеПоказателиБюджетирования.Разрез10);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_ФактическиеПоказателиБюджетирования.Ссылка
			|ИЗ
			|	Перечисление.фин_ФактическиеПоказателиБюджетирования КАК фин_ФактическиеПоказателиБюджетирования
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК фин_НастройкаДополнительныхРазрезовБюджетирования
			|		ПО фин_ФактическиеПоказателиБюджетирования.Ссылка = фин_НастройкаДополнительныхРазрезовБюджетирования.Измерение
			|ГДЕ
			|	фин_НастройкаДополнительныхРазрезовБюджетирования.Разрез ЕСТЬ NULL 
			|	И фин_ФактическиеПоказателиБюджетирования.Ссылка В(&Ссылки)
			|
			|УПОРЯДОЧИТЬ ПО
			|	фин_ФактическиеПоказателиБюджетирования.Порядок";
		
		Запрос.УстановитьПараметр("Ссылки", Ссылки);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		МассивСвободных = Новый Массив;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивСвободных.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		
		Для Каждого СтрокаРазрез Из Объект.УточнениеРазрезов Цикл
			Если ЗначениеЗаполнено(СтрокаРазрез.РазрезИБ) Тогда
				ОбъектРазрез = СтрокаРазрез.РазрезИБ.ПолучитьОбъект();
				ОбъектРазрез.ПозицияКлассификатора = СтрокаРазрез.Разрез;
				ОбъектРазрез.Записать();
		
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	фин_НастройкаДополнительныхРазрезовБюджетирования.Измерение
					|ИЗ
					|	РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК фин_НастройкаДополнительныхРазрезовБюджетирования
					|ГДЕ
					|	фин_НастройкаДополнительныхРазрезовБюджетирования.Разрез = &Разрез";
				
				Запрос.УстановитьПараметр("Разрез", СтрокаРазрез.РазрезИБ);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Продолжить;
				КонецЕсли;
		
			Иначе
				ОбъектРазрез = ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.СоздатьЭлемент();
				ОбъектРазрез.Наименование = Строка(СтрокаРазрез.Разрез);
				ОбъектРазрез.ПозицияКлассификатора = СтрокаРазрез.Разрез;
				Если СтрокаРазрез.Разрез = Перечисления.фин_КлассификаторРазрезовБюджетов.ВнеоборотныеАктивы И Метаданные.Справочники.Найти("ОсновныеСредства")<>Неопределено И Метаданные.Справочники.Найти("НематериальныеАктивы")<>Неопределено Тогда
					МассивТипов = Новый Массив;
					МассивТипов.Добавить(Тип("СправочникСсылка.ОсновныеСредства"));
					МассивТипов.Добавить(Тип("СправочникСсылка.НематериальныеАктивы"));
					ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
				ИначеЕсли СтрокаРазрез.Разрез = Перечисления.фин_КлассификаторРазрезовБюджетов.НалогиСборыИОтчисления И Метаданные.Справочники.Найти("НалогиСборыОтчисления")<>Неопределено Тогда
					МассивТипов = Новый Массив;
					МассивТипов.Добавить(Тип("СправочникСсылка.НалогиСборыОтчисления"));
					ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
				ИначеЕсли СтрокаРазрез.Разрез = Перечисления.фин_КлассификаторРазрезовБюджетов.НоменклатурнаяГруппа И Метаданные.Справочники.Найти("НоменклатурныеГруппы")<>Неопределено Тогда
					МассивТипов = Новый Массив;
					МассивТипов.Добавить(фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипНоменклатурныеГруппыСсылка());
					ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
				ИначеЕсли СтрокаРазрез.Разрез = Перечисления.фин_КлассификаторРазрезовБюджетов.ПроизводимаяНоменклатура Тогда
					МассивТипов = Новый Массив;
					МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
					ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
				ИначеЕсли СтрокаРазрез.Разрез = Перечисления.фин_КлассификаторРазрезовБюджетов.СтатьиДДС И Метаданные.Справочники.Найти("СтатьиДвиженияДенежныхСредств")<>Неопределено Тогда
					МассивТипов = Новый Массив;
					МассивТипов.Добавить(Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
					ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
				ИначеЕсли СтрокаРазрез.Разрез = Перечисления.фин_КлассификаторРазрезовБюджетов.СтатьиЗатрат И Метаданные.Справочники.Найти("СтатьиЗатрат")<>Неопределено Тогда
					МассивТипов = Новый Массив;
					МассивТипов.Добавить(Тип("СправочникСсылка.СтатьиЗатрат"));
					ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
				Иначе
					ОписаниеТипа = Новый ОписаниеТипов("Неопределено");
				КонецЕсли;
				ТекстОшибок = "";
				Для Каждого ТипСоздаваемогоЭлемента Из ОписаниеТипа.Типы() Цикл
					Если НЕ Метаданные.ПланыВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Тип.СодержитТип(ТипСоздаваемогоЭлемента) Тогда
						ТекстОшибок = ТекстОшибок + символы.ПС+ "Для создания дополнительного разреза """+СтрокаРазрез.Разрез+""" в плане видов характеристик ""Виды аналитики бюджетирования"" должен быть добавлен тип "+ТипСоздаваемогоЭлемента;
					КонецЕсли;
				КонецЦикла;
				Если ТекстОшибок<>"" Тогда
					ВызватьИсключение ТекстОшибок;
					Возврат Ложь;
				КонецЕсли;
				ОбъектРазрез.ТипЗначения = ОписаниеТипа;
				ОбъектРазрез.УстановитьНовыйКод();
				ОбъектРазрез.Записать();
			КонецЕсли;
			Набор = РегистрыСведений.фин_НастройкаДополнительныхРазрезовБюджетирования.СоздатьНаборЗаписей();
			Измерение = МассивСвободных[Объект.УточнениеРазрезов.Индекс(СтрокаРазрез)];
			Набор.Отбор.Измерение.Установить(Измерение);
			НС = Набор.Добавить();
			НС.Измерение = Измерение;
			НС.Разрез = ОбъектРазрез.Ссылка;
			НС.ДляКомплектаБюджетов = Истина;
			Набор.Записать();
		КонецЦикла;
		
		Если Объект.УточнениеРазрезов.Количество()>0 Тогда
			Константы.фин_ИспользоватьУниверсальнуюАналитику.Установить(Истина);	
		КонецЕсли;
		
		Возврат Истина;
	КонецФункции

	&НаСервере
	Процедура УдалитьУжеИмеющиесяНастройкиКомплектаНаСервере()
		Обработки.фин_НастройкаКомплектаБюджетов.УдалитьУжеИмеющиесяНастройкиКомплекта();	
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьОтветНаВопросОбУдалении(ВариантОтвета,ДополнительныеПараметры) Экспорт
		Если ВариантОтвета = КодВозвратаДиалога.ОК Тогда
			УдалитьУжеИмеющиесяНастройкиКомплектаНаСервере();
			ПоказатьПредупреждение(,"Элементы помечены на удаление. Рекомендуется выполнить операцию удаления помеченных элементов.
			| Также, если имеются документы планирования бюджетов и настройки структуры, не связанные с комплектом бюджетов, рекомендуется выполнить обработку ""Реструктуризация данных бюджетирования при изменении разрезов планирования""");
		КонецЕсли;
	КонецПроцедуры

	&НаКлиенте
	Процедура СоставНастроекДляСоздания(Команда)
		ОписаниеОповещенияВыбораНастроек = Новый ОписаниеОповещения("ОповещениеВыбораНастроек",ЭтотОбъект);
		ОткрытьФорму("Обработка.фин_НастройкаКомплектаБюджетов.Форма.ФормаВыбораСоставаНастроек",Новый Структура("Значения",СтруктураНастроекДляСоздания),ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещенияВыбораНастроек);
	КонецПроцедуры

	&НаКлиенте
	Процедура ОповещениеВыбораНастроек(РезультатВыбора,ДополнительныеПараметры) Экспорт
		Если РезультатВыбора <> Неопределено Тогда
			СтруктураНастроекДляСоздания = Новый ФиксированнаяСтруктура(РезультатВыбора);
		КонецЕсли;
	КонецПроцедуры
	
#КонецОбласти