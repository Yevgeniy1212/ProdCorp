
// Проверяет значения констант из коллекции с текущим значением в ИБ,
// не проверяется для типа данных ХранилищеЗначений
// 
// Параметры: 
//  КоллекцияКонстантДляПроверки  - структура
//									ключ 		- строка, имя константы
//									значение 	- значение константы
//
// Возвращаемое значение:
//  Массив констант значение которых изменилось по сравнению с переданной коллекцией
//
Функция СоздатьМассивИзмененныхКонстант(КоллекцияКонстантДляПроверки) Экспорт
	
	МассивИзмененныхКонстант = Новый Массив;
	
	Для каждого ЭлементКоллекции Из КоллекцияКонстантДляПроверки Цикл
		
		ИмяКонстанты 	  = ЭлементКоллекции.Ключ;
		ЗначениеКонстанты = ЭлементКоллекции.Значение;
		
		ТекущееЗначение   = Константы[ИмяКонстанты].Получить();
		Если  ТипЗнч(ТекущееЗначение) = Тип("ХранилищеЗначения") Тогда
			// не сравниваем значения констант, у которых Тип данных - Хранилище значений
			Продолжить;
		КонецЕсли;	
		
		Если ЗначениеКонстанты <> ТекущееЗначение Тогда
			МассивИзмененныхКонстант.Добавить(Метаданные.Константы[ИмяКонстанты]);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат МассивИзмененныхКонстант;
	
КонецФункции

Процедура ВыполнитьУдалениеЗадач() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачаИсполнителя.Ссылка КАК Задача
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	НЕ ЗадачаИсполнителя.Выполнена";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗадачаОбъект = Выборка.Задача.ПолучитьОбъект();
		ЗадачаОбъект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

#Если Клиент Тогда

Функция ПолучитьТаблицуШаблоновТелефонов(ФормаОбработки) 
	
	// скопируем структуру таблицы
	ТаблицаШаблонов = ФормаОбработки.ШаблоныТелефонов.Скопировать();
	ТаблицаШаблонов.Очистить();

	Если ТипЗнч(ФормаОбработки.ШаблоныТелефонныхНомеров) <> Тип("ХранилищеЗначения") Тогда
		Возврат ТаблицаШаблонов;
	КонецЕсли;
	
	Шаблоны = ФормаОбработки.ШаблоныТелефонныхНомеров.Получить();
	
	Если ТипЗнч(Шаблоны) = Тип("Соответствие") Тогда
		
		Для Индекс = 1 По 50 Цикл //предполагаем, что больше 50-ти значных номеров не может быть
			НайденныйШаблон = Шаблоны.Получить(Индекс);
			Если НайденныйШаблон <> Неопределено Тогда
				СтрокаШаблонов = ТаблицаШаблонов.Добавить();
				СтрокаШаблонов.ШаблоныТелефонныхНомеров = НайденныйШаблон;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаШаблонов;

КонецФункции

Функция ПолучитьШаблоныНомеров(Шаблоны)

	ТаблицаСоответствий = Новый Соответствие;

	Для каждого СтрокаШаблонов Из Шаблоны Цикл

		Если ПустаяСтрока(СтрокаШаблонов.ШаблоныТелефонныхНомеров) Тогда
			Продолжить;
		КонецЕсли;

		ТаблицаСоответствий.Вставить(СтрЧислоВхождений(СокрЛП(СтрокаШаблонов.ШаблоныТелефонныхНомеров),"9"),СокрЛП(СтрокаШаблонов.ШаблоныТелефонныхНомеров));

	КонецЦикла;

	Возврат Новый ХранилищеЗначения(ТаблицаСоответствий);

КонецФункции // ПолучитьШаблоныНомеров()

Функция ИзменилсяШаблонТелефонныхНомеров(ФормаОбработки) 

	// получим из ИБ текущее значение шаблона, и сохраним его в переменной
	ФормаОбработки.ШаблоныТелефонныхНомеров = Константы.ШаблоныТелефонныхНомеров.Получить();
	
	// преобразуем полученное значение в таблицу значений
	ТекущийШаблонТаблица = ПолучитьТаблицуШаблоновТелефонов(ФормаОбработки);
	
	// сравним две таблицы значений
	ШаблонИзменился = ФормаОбработки.ШаблоныТелефонов.Количество() <> ТекущийШаблонТаблица.Количество();
	Если НЕ ШаблонИзменился Тогда
		ШаблонИзменился = НЕ ОбщегоНазначения.МассивыИдентичны(ФормаОбработки.ШаблоныТелефонов.ВыгрузитьКолонку("ШаблоныТелефонныхНомеров"), ТекущийШаблонТаблица.ВыгрузитьКолонку("ШаблоныТелефонныхНомеров"));
	КонецЕсли;
	
	// преобразуем таблицу значений в хранилище значений
	ФормаОбработки.ШаблоныТелефонныхНомеров = ПолучитьШаблоныНомеров(ФормаОбработки.ШаблоныТелефонов);
	
	Возврат ШаблонИзменился;

КонецФункции
	
Процедура ПроверитьИЗаписатьСписокВидовЗадач(СписокВидовЗадач) 

	ТекущийСписокЗадач 	 = Новый СписокЗначений;
	
	//получим список задач из ИБ
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыЗадачПользователей.Ссылка,
		|	ВидыЗадачПользователей.Использование,
		|	ПРЕДСТАВЛЕНИЕ(ВидыЗадачПользователей.Ссылка) КАК СсылкаПредставление
		|ИЗ
		|	Справочник.ВидыЗадачПользователей КАК ВидыЗадачПользователей
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыЗадачПользователей.Наименование";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекущийСписокЗадач.Добавить(Выборка.Ссылка, , Выборка.Использование);	
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокВидовЗадач Цикл
		
		НайденнаяЗадача = ТекущийСписокЗадач.НайтиПоЗначению(ЭлементСписка.Значение);
		
		Если НайденнаяЗадача <> Неопределено И НайденнаяЗадача.Пометка <> ЭлементСписка.Пометка Тогда
			СправочникОбъект = НайденнаяЗадача.Значение.ПолучитьОбъект();
			СправочникОбъект.Использование = ЭлементСписка.Пометка;
			СправочникОбъект.Записать();
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

// Процедура заполняет табличную часть РолиИИсполнители
//
Процедура ЗаполнитьТЧРолиИИсполнители(ФормаОбработки) Экспорт

	РолиИИсполнители.Очистить();
	
	МассивОрганизаций = Новый Массив;
	
	Если ФормаОбработки.РазделятьЗадачиПоОрганизациям Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации";
		МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	Если НЕ ФормаОбработки.РазделятьЗадачиПоОрганизациям И НЕ ФормаОбработки.РазделятьЗадачиПоРолямИсполнителей Тогда
		// нет разделения задач по ролям и организациям
		// не заполняем табличную часть РолиИИсполнители
	ИначеЕсли ФормаОбработки.РазделятьЗадачиПоОрганизациям И НЕ ФормаОбработки.РазделятьЗадачиПоРолямИсполнителей Тогда
		// задачи разделяются только по организациям
		СтруктураПоиска = Новый Структура("Исполнитель, Организация");
		
		Для Каждого ЭлементСоответствия Из ФормаОбработки.мСоответствиеПользователейИРолей Цикл
			Пользователь = ЭлементСоответствия.Ключ;
			СтруктураПоиска.Вставить("Исполнитель", Пользователь);
			
			Для Каждого Организация Из МассивОрганизаций Цикл
				
				СтруктураПоиска.Вставить("Организация", Организация);
				
				НоваяСтрока = РолиИИсполнители.Добавить();
				НоваяСтрока.Исполнитель = Пользователь;
				НоваяСтрока.Организация = Организация;
				НоваяСтрока.Роль = Справочники.РолиИсполнителей.ПустаяСсылка();
				НоваяСтрока.Использование = ТаблицаРолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() > 0;
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе // задачи разделяются по ролям
		
		Если ФормаОбработки.РазделятьЗадачиПоОрганизациям Тогда
			СтруктураПоиска = Новый Структура("Исполнитель, Организация, Роль");
		Иначе
			СтруктураПоиска = Новый Структура("Исполнитель, Роль");
		КонецЕсли;	
		
		Для Каждого ЭлементСоответствия Из ФормаОбработки.мСоответствиеПользователейИРолей Цикл
			
			Пользователь = ЭлементСоответствия.Ключ;
			МассивРолиИсполнителя = ЭлементСоответствия.Значение;
			СтруктураПоиска.Вставить("Исполнитель", Пользователь);
			
			Для Каждого РольИсполнителя Из МассивРолиИсполнителя Цикл
				
				СтруктураПоиска.Вставить("Роль", РольИсполнителя);
				
				Если ФормаОбработки.РазделятьЗадачиПоОрганизациям Тогда
					
					Для Каждого Организация Из МассивОрганизаций Цикл
						
						СтруктураПоиска.Вставить("Организация", Организация);
						
						НоваяСтрока = РолиИИсполнители.Добавить();
						НоваяСтрока.Исполнитель = Пользователь;
						НоваяСтрока.Роль = РольИсполнителя;
						НоваяСтрока.Организация = Организация;
						НоваяСтрока.Использование = ТаблицаРолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() > 0;
						
					КонецЦикла;
					
				Иначе
					НоваяСтрока = РолиИИсполнители.Добавить();
					НоваяСтрока.Исполнитель = Пользователь;
					НоваяСтрока.Роль = РольИсполнителя;
					НоваяСтрока.Организация = Справочники.Организации.ПустаяСсылка();
					НоваяСтрока.Использование = ТаблицаРолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() > 0;
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ОткрытьФормуНастройкиРолей(ФормаОбработки, КлючУникальности) Экспорт

	Форма = ПолучитьФорму("НастройкаРолейИсполнителей", ФормаОбработки, КлючУникальности);
	Форма.РазделятьЗадачиПоОрганизациям = ФормаОбработки.РазделятьЗадачиПоОрганизациям;    
	Форма.РазделятьЗадачиПоРолямИсполнителей = ФормаОбработки.РазделятьЗадачиПоРолямИсполнителей;
	Форма.Заголовок = "Настройка списка задач пользователей" ;
	Форма.ОткрытьМодально();

КонецПроцедуры

// Функция записывает измененые константы, список констант
// получаетсяиз строковой переменной формы обработки мСтрокаКонстант
//
//  ФормаОбработки - форма обработки
//
// Возвращаемое значение:
//   Булево   - Ложь, когда есть изменные константы, и записать набор констант не удалось
//
Функция ЗаписатьКонстанты(ФормаОбработки) Экспорт
	
	Если ЗначениеЗаполнено(ФормаОбработки.мСтрокаКонстант) Тогда
		//есть константы, которые могли измениться
		
		// подготовим массив констант, значения которых необходимо записать
		КоллекцияКонстантДляПроверки = Новый Структура(ФормаОбработки.мСтрокаКонстант);
		ЗаполнитьЗначенияСвойств(КоллекцияКонстантДляПроверки, ФормаОбработки);
		МассивИзмененныхКонстант = СоздатьМассивИзмененныхКонстант(КоллекцияКонстантДляПроверки);
		
		// изменение шаблонов телефонов проверим отдельно, т.к. тип данных ХранилищеЗначений
		Если ИзменилсяШаблонТелефонныхНомеров(ФормаОбработки) Тогда
			МассивИзмененныхКонстант.Добавить(Метаданные.Константы.ШаблоныТелефонныхНомеров);
		КонецЕсли;

		// запишем изменения
		Если МассивИзмененныхКонстант.Количество() > 0 Тогда
			
			// есть константы, значение которых изменилось, запишем их
			НаборКонстант = Константы.СоздатьНабор(МассивИзмененныхКонстант);
			СтрокаСвойств = "";
			
			Для Каждого Константа Из МассивИзмененныхКонстант Цикл
				СтрокаСвойств = СтрокаСвойств + Константа.Имя + ",";
			КонецЦикла;
			
			ЗаполнитьЗначенияСвойств(НаборКонстант, ФормаОбработки, СтрокаСвойств);
			
			Попытка
				НаборКонстант.Записать();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ИнформацияОбОшибке().Описание);
				Возврат Ложь;
			КонецПопытки;
			
			Для Каждого Константа Из МассивИзмененныхКонстант Цикл
				
				Если Найти(Константа.Имя, "РазделятьЗадачиПо") > 0 Тогда
					Оповестить("ИзменениеКонстантУправленияРолямиИИсполнителями");
				Иначе
					ОбщегоНазначения.УстановитьЗначениеПеременной("гл" + Константа.Имя, глОбщиеЗначения, Константы[Константа.Имя].Получить() , Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция записывает настройки в регистр сведений РолиИИсполнители
//
// Возвращаемое значение:
//   Булево   - Ложь, когда необходимо записать настройки и набор не удалось записать
//
Функция ЗаписатьНастройкиРолейИИсполнителей(ФормаОбработки) Экспорт
	
	// проверим необходимость записи настроек по задачам
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.СтраницаРаботаСЗадачами.Видимость Тогда
		
		ПроверитьИЗаписатьСписокВидовЗадач(ФормаОбработки.СписокВидовЗадач);
		
		Если НЕ ФормаОбработки.РазделятьЗадачиПоОрганизациям И НЕ ФормаОбработки.РазделятьЗадачиПоРолямИсполнителей Тогда
			
			НаборЗаписей = РегистрыСведений.РолиИИсполнители.СоздатьНаборЗаписей();
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Исполнитель
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи");
			Выборка = Запрос.Выполнить().Выбрать();
			
			НаборЗаписей.Отбор.Организация.Использование = Истина;
			НаборЗаписей.Отбор.Исполнитель.Использование = Истина;
			НаборЗаписей.Отбор.Роль.Использование 		 = Истина;
			
			Пока Выборка.Следующий() Цикл
				
				НаборЗаписей.Отбор.Организация.Значение = Справочники.Организации.ПустаяСсылка();
				НаборЗаписей.Отбор.Исполнитель.Значение = Выборка.Исполнитель;
				НаборЗаписей.Отбор.Роль.Значение 		= Справочники.РолиИсполнителей.ПустаяСсылка();
      			НаборЗаписей.Прочитать();

				Если НаборЗаписей.Количество() = 0 Тогда
					СтрокаРолиИИсполнители = НаборЗаписей.Добавить();
					СтрокаРолиИИсполнители.Исполнитель = Выборка.Исполнитель;
				КонецЕсли;
				
				Попытка
					НаборЗаписей.Записать();
				Исключение
					ОбщегоНазначения.СообщитьОбОшибке(ИнформацияОбОшибке().Описание);
					Возврат Ложь;
				КонецПопытки;

			КонецЦикла;

			Возврат Истина;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.РолиИИсполнители.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		ТаблицаРолиИИсполнители = НаборЗаписей.Выгрузить();
		
		МассивОрганизаций = Новый Массив;
		Если ФормаОбработки.РазделятьЗадачиПоОрганизациям Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации";
			МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		КонецЕсли;                                                
		
		НаборЗаписей.Отбор.Организация.Использование = Истина;
		НаборЗаписей.Отбор.Исполнитель.Использование = Истина;
		НаборЗаписей.Отбор.Роль.Использование = Истина;
		УправлениеЗадачамиПереопределяемый.ДополнитьОтборНабораЗаписей(НаборЗаписей);
		
		СтруктураПоиска = Новый Структура("Исполнитель, Организация");
		Для Каждого СтрокаТаблицы Из РолиИИсполнители Цикл
			
			НаборЗаписей.Очистить();
			
			НаборЗаписей.Отбор.Организация.Значение = СтрокаТаблицы.Организация;
			НаборЗаписей.Отбор.Исполнитель.Значение = СтрокаТаблицы.Исполнитель;
			НаборЗаписей.Отбор.Роль.Значение = СтрокаТаблицы.Роль;
			УправлениеЗадачамиПереопределяемый.УстановитьОтборНабораЗаписей(НаборЗаписей, СтрокаТаблицы);
			
			СтруктураПоиска.Вставить("Исполнитель", СтрокаТаблицы.Исполнитель);
			СтруктураПоиска.Вставить("Организация", СтрокаТаблицы.Организация);
			СтруктураПоиска.Вставить("Роль", СтрокаТаблицы.Роль);
			УправлениеЗадачамиПереопределяемый.ДополнитьСтруктуруПоиска(СтруктураПоиска, СтрокаТаблицы);
			
			НадоЗаписать = Ложь;
			
			Если СтрокаТаблицы.Использование И ТаблицаРолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаТаблицы);
				НадоЗаписать = Истина;
			ИначеЕсли НЕ СтрокаТаблицы.Использование И ТаблицаРолиИИсполнители.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
				// запишем пустой набор
				НадоЗаписать = Истина;
			КонецЕсли;	
			
			Если НадоЗаписать Тогда
				Попытка
					НаборЗаписей.Записать();
				Исключение
					ОбщегоНазначения.СообщитьОбОшибке(ИнформацияОбОшибке().Описание);
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ЗаписатьНастройкиРолейИИсполнителей()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ

Процедура ИзменитьВидимостьКомандыПерейтиКНастройкеЗадач(ФормаОбработки) Экспорт

	ФормаОбработки.ЭлементыФормы.НадписьПерейтиКНастройкеЗадач.Видимость = ФормаОбработки.ЭлементыФормы.РазделятьЗадачиПоРолямИсполнителей.Доступность
		И (ФормаОбработки.РазделятьЗадачиПоРолямИсполнителей ИЛИ ФормаОбработки.РазделятьЗадачиПоОрганизациям);	

// 	ФормаОбработки.ЭлементыФормы.НадписьПерейтиКНастройкеПравДоступа.Видимость = ФормаОбработки.ЭлементыФормы.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей.Значение;

	// установим доступность ЭУ на закладке шаблоны номеров, так как он системой не контролируются
	// а право запись константы ШаблоныНомеров есть не у всех
			
	ЕстьПравоИзменения = ПравоДоступа("Изменение", Метаданные.Константы.ШаблоныТелефонныхНомеров);
	
	ФормаОбработки.ЭлементыФормы.КоманднаяПанельШаблоныТелефонов.Доступность = ЕстьПравоИзменения;
	ФормаОбработки.ЭлементыФормы.ШаблоныТелефонов.Доступность = ЕстьПравоИзменения;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОЛУЧЕНИЯ ДАННЫХ И ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ФОРМЫ

Процедура ПолучитьОбщиеДанныеИЗаполнитьФорму(ФормаОбработки) Экспорт

	// получим значения констант 
	Если ЗначениеЗаполнено(ФормаОбработки.мСтрокаКонстант) Тогда
		
		НаборКонстант = Константы.СоздатьНабор(ФормаОбработки.мСтрокаКонстант);
		НаборКонстант.Прочитать();
		ЗаполнитьЗначенияСвойств(ФормаОбработки, НаборКонстант);
		
		// отдельно заполним Шаблоны телефонных номеров
		ФормаОбработки.ШаблоныТелефонов.Очистить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ПолучитьТаблицуШаблоновТелефонов(ФормаОбработки), ФормаОбработки.ШаблоныТелефонов);
		
	КонецЕсли;
	
	Если ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.СтраницаРаботаСЗадачами.Видимость Тогда
		
		//получим список задач
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВидыЗадачПользователей.Ссылка,
			|	ВидыЗадачПользователей.Использование,
			|	ПРЕДСТАВЛЕНИЕ(ВидыЗадачПользователей.Ссылка) КАК СсылкаПредставление
			|ИЗ
			|	Справочник.ВидыЗадачПользователей КАК ВидыЗадачПользователей
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВидыЗадачПользователей.Наименование";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ФормаОбработки.СписокВидовЗадач.Добавить(Выборка.Ссылка, Выборка.СсылкаПредставление, Выборка.Использование);	
		КонецЦикла;	
		
		НаборЗаписей = РегистрыСведений.РолиИИсполнители.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		ТаблицаРолиИИсполнители = НаборЗаписей.Выгрузить();
		
		// заполним массив мМассивПользователей - пользователи для которых производится настройка работы
		// с задачами, и соответствие пользователей и пользователей ИБ
		ТаблицаПользователейИБ = Новый ТаблицаЗначений;
		ТаблицаПользователейИБ.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150)));
		ТаблицаПользователейИБ.Колонки.Добавить("РольИсполнителя", Новый ОписаниеТипов("СправочникСсылка.РолиИсполнителей"));
		
		МассивПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
		
		Для Каждого ПользовательИБ Из МассивПользователейИБ Цикл
			
			Для Каждого ЭлементСоответствия Из ФормаОбработки.мСоответствиеРолей Цикл
				
				ДоступнаяРоль = ЭлементСоответствия.Ключ;
				МассивРольИсполнителя = ЭлементСоответствия.Значение;
				
				Если ПользовательИБ.Роли.Содержит(ДоступнаяРоль) Тогда
					Для Каждого ЭлементМассива Из МассивРольИсполнителя Цикл
						Строка = ТаблицаПользователейИБ.Добавить();
						Строка.Имя				= ПользовательИБ.Имя;
						Строка.РольИсполнителя	= ЭлементМассива;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаПользователейИБ", ТаблицаПользователейИБ);
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПользователиИБ.Имя КАК Имя,
			|	ПользователиИБ.РольИсполнителя
			|ПОМЕСТИТЬ ПользователиИБ
			|ИЗ
			|	&ТаблицаПользователейИБ КАК ПользователиИБ
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Имя
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Пользователи.Ссылка,
			|	Пользователи.Код КАК Код,
			|	ПользователиИБ.РольИсполнителя
			|ИЗ
			|	ПользователиИБ КАК ПользователиИБ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
			|		ПО ПользователиИБ.Имя = Пользователи.Код
			|
			|УПОРЯДОЧИТЬ ПО
			|	Код";
			
		Выборка = Запрос.Выполнить().Выбрать();
			
		Пока Выборка.СледующийПоЗначениюПоля("Код") Цикл
			
			// заполним соответствие пользователями, для которых доступна настройка задач
			МассивРолейИсполнителя = Новый Массив;
			Пока Выборка.Следующий() Цикл
				МассивРолейИсполнителя.Добавить(Выборка.РольИсполнителя);
			КонецЦикла;
			
			Если МассивРолейИсполнителя.Количество()>0 Тогда
				ФормаОбработки.мСоответствиеПользователейИРолей.Вставить(Выборка.Ссылка, МассивРолейИсполнителя);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьТЧРолиИИсполнители(ФормаОбработки);
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ 

Процедура ФормаОбработкиПередОткрытием(ФормаОбработки, Отказ) Экспорт

	Если НЕ ПравоДоступа("Администрирование", Метаданные) Тогда
		ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы.СтраницаРаботаСЗадачами.Видимость = Ложь
	КонецЕсли;
	
	Отказ = Истина;
	Для Каждого СтраницаФормы Из ФормаОбработки.ЭлементыФормы.ПанельНастроек.Страницы Цикл
		Если СтраницаФормы.Видимость Тогда
			// на форме есть видимые страницы, можно открывать форму
			Если Отказ Тогда
				// это первая из видимых страниц, сделаем ее текущей
				ФормаОбработки.ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = СтраницаФормы;
			КонецЕсли;
			Отказ = Ложь;
			
			МассивОбъектовМетаданных = ФормаОбработки.мСоответствиеОбъектыМетаданных[СтраницаФормы];
			Для Каждого ОбъектМетаданных Из МассивОбъектовМетаданных Цикл
				Если Найти(ОбъектМетаданных.ПолноеИмя(), "Константа") <> 0 Тогда
					ФормаОбработки.мСтрокаКонстант = ФормаОбработки.мСтрокаКонстант + ОбъектМетаданных.Имя + ",";
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
	
#КонецЕсли
          