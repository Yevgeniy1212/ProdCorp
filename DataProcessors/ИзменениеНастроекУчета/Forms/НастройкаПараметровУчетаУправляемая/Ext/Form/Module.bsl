
&НаКлиенте
Процедура НажатиеНаНавигационнуСсылкуОсновнойПанели(Элемент)
	Префикс = ?(Найти(Элемент.Имя,"Декорация")<>0,"Декорация","Надпись");
	ИмяСтраницы = Сред(Элемент.Имя,СтрДлина(Префикс)+1);
	Элементы.РазделыУчета.ТекущаяСтраница = Элементы.РазделыУчета.ПодчиненныеЭлементы[ИмяСтраницы];
	Подпункты = Неопределено;
	Для Каждого ПодчиненныйЭлемент Из Элементы.РазделыУчета.ТекущаяСтраница.ПодчиненныеЭлементы Цикл
		Если Найти(ПодчиненныйЭлемент.Имя,"ГруппаПодпункты")<>0 Тогда
			Подпункты = ПодчиненныйЭлемент;
		КонецЕсли;
	КонецЦикла;
	Если Подпункты<>Неопределено Тогда
		ПервыйРаздел = Сред(Подпункты.ПодчиненныеЭлементы[0].Имя,СтрДлина("Декорация")+1);
		Элементы["Страницы"+ИмяСтраницы].ТекущаяСтраница = Элементы["Страницы"+ИмяСтраницы].ПодчиненныеЭлементы[ПервыйРаздел];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НажатиеНаНавигационнуюСсылкуПодраздела(Элемент)
	Раздел = Сред(Элемент.Имя,СтрДлина("Декорация")+1);
	ИмяСтраницы = Элемент.Родитель.Родитель.Имя;
	Элементы["Страницы"+ИмяСтраницы].ТекущаяСтраница = Элементы["Страницы"+ИмяСтраницы].ПодчиненныеЭлементы[Раздел];
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Заполняет параметры учета
//
&НаСервере
Процедура ОпределелитьПараметрыУчета()

	БУ = ПланыСчетов.Типовой.Товары.ПолучитьОбъект();	
	НУ = ПланыСчетов.Налоговый.Товары.ПолучитьОбъект();	

	// Бухгалтерский учет
	ВестиПартионныйУчетБУ = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии, "ВидСубконто") = Неопределено, Ложь, Истина);
	ВестиСкладскойУчетБУ  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
	мВестиСкладскойУчетБУ = ВестиСкладскойУчетБУ;
	мВестиСкладскойУчетПервоначальное = ВестиСкладскойУчетБУ;
	
	Если ВестиСкладскойУчетБУ Тогда
		ВестиСуммовойУчетПоСкладамБУ = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто").Суммовой;
	Иначе
		ВестиСуммовойУчетПоСкладамБУ = Ложь;
	КонецЕсли;
	мВестиСуммовойУчетПоСкладамБУ = ВестиСуммовойУчетПоСкладамБУ;
	мВестиСуммовойУчетПоСкладамПервоначальное = ВестиСуммовойУчетПоСкладамБУ;
	
	// Налоговый учет
	ВестиСкладскойУчетНУ  = ?(НУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
	мВестиСкладскойУчетНУ = ВестиСкладскойУчетНУ;
	мВестиСкладскойУчетНУПервоначальное = ВестиСкладскойУчетНУ;
	
	Если ВестиСкладскойУчетНУ Тогда
		ВестиСуммовойУчетПоСкладамНУ = НУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто").Суммовой;
	Иначе
		ВестиСуммовойУчетПоСкладамНУ = Ложь;
	КонецЕсли;
	мВестиСуммовойУчетПоСкладамНУ = ВестиСуммовойУчетПоСкладамНУ;
	мВестиСуммовойУчетПоСкладамНУПервоначальное = ВестиСуммовойУчетПоСкладамНУ;
			
	БУ = ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков;
	ВестиРасчетыПоДокументам = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами, "ВидСубконто") = Неопределено, Ложь, Истина);
    мВестиРасчетыПоДокументамПервоначальное = ВестиРасчетыПоДокументам;

	// определим установлена ли аналитика "Подразделения" на сетах доходов/затрат
	БУ = ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_.ПолучитьОбъект();
	ВестиУчетПоПодразделениям = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения, "ВидСубконто") = Неопределено, Ложь, Истина);
	мВестиУчетПоПодразделениям = ВестиУчетПоПодразделениям;
	мВестиУчетПоПодразделениямПервоначальное = ВестиУчетПоПодразделениям;
	
	//структурные подразделения
	//проверяем есть или нет субконто на счетах учета налога, 
	//берем одни из счетов раздела 3100, кроме НДС, КПН и Акциза
    СчетаБУ = ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог;
	ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов = ?(СчетаБУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты, "ВидСубконто") = Неопределено, Ложь, Истина);
	мВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетовПервоначальное = ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов;
	// Авансы: счет 1430
	СчетаБУ = ПланыСчетов.Типовой.ПрочиеНалогиИДругиеОбязательныеПлатежиВБюджет;
	ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов = ?(СчетаБУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты, "ВидСубконто") = Неопределено, Ложь, Истина);
	мВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетовПервоначальное = ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов;
	
	
	СчетаНУ = ПланыСчетов.Налоговый.ИндивидуальныйПодоходныйНалог;
	ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов = ?(СчетаНУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты, "ВидСубконто") = Неопределено, Ложь, Истина);
	мВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетовПервоначальное = ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов; 
	// Авансы: счет 1430Н
	СчетаНУ = ПланыСчетов.Налоговый.НалоговыеАктивыПрочее;
	ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов = ?(СчетаНУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты, "ВидСубконто") = Неопределено, Ложь, Истина);
	мВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетовПервоначальное = ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов; 
	                                                                                                     	
	// определим установлена ли аналитика "Работники организации" на счетах зар.платы
	БУ = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда.ПолучитьОбъект(); // счет 3350
	ВестиУчетПоСотрудникам = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций, "ВидСубконто") = Неопределено, Ложь, Истина);
	мВестиУчетПоСотрудникам = ВестиУчетПоСотрудникам;
	мВестиУчетПоСотрудникамПервоначальное = ВестиУчетПоСотрудникам;
	
	// Установка флагов печати РНН и БИН
	ВыводитьРНН 	= НЕ ЗначениеЗаполнено(КонстантыНабор.ДатаПрекращенияВыводаРННВПервичныхДокументах);
	ВыводитьБИН_ИИН = ЗначениеЗаполнено(КонстантыНабор.ДатаНачалаВыводаБИН_ИИНВПервичныхДокументах);
	
	// Установка флагов аналитического учета ОС по Подразделениям и МОЛ
	ВестиУчетОСВРазрезеПодразделений 	= ЗначениеЗаполнено(КонстантыНабор.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений);
	ВестиУчетОСВРазрезеМОЛ 				= ЗначениеЗаполнено(КонстантыНабор.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ);
	
	мВестиУчетОСВРазрезеПодразделений   = ВестиУчетОСВРазрезеПодразделений;
	мВестиУчетОСВРазрезеМОЛ				= ВестиУчетОСВРазрезеМОЛ;
	
	мВестиУчетПоСтруктурнымПодразделениям = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
	
	мФормироватьЗадачиПоИсполнителямСогласования = Константы.усд_ФормироватьЗадачиПоИсполнителямСогласования.Получить();
	
	ВалютаПланированияЗакупок= ?(Константы.узп_ПланированиеЗакупокВВалютеРеглУчета.Получить(),1,0);
КонецПроцедуры // ОпределелитьПараметрыУчета()

// Процедура проверяет возможность редактирования валюты
// регламентированного учета
//
&НаСервере
Процедура ПроверкаДоступностиВалютыУчета();
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос();
	Запрос.Текст = ""; 
    ПервыйДокумент = Истина;

	Для Каждого Док из Метаданные.Документы Цикл

		Запрос.Текст = Запрос.Текст + 
		"ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ " + ?(ПервыйДокумент = Истина, "РАЗРЕШЕННЫЕ ","") +  "ПЕРВЫЕ 1
		|	Документ." + Док.Имя + ".Ссылка
		|
		|";
        ПервыйДокумент = Ложь;
	КонецЦикла;

	// Уберем первое "ОБЪЕДИНИТЬ ВСЕ"
	Запрос.Текст  = Сред(Запрос.Текст, СтрДлина("ОБЪЕДИНИТЬ ВСЕ") + 1);

	ЕстьДокументы = (Не Запрос.Выполнить().Пустой());

	Элементы.ВалютаРегламентированногоУчета.ТолькоПросмотр = ЕстьДокументы;

	Если ЕстьДокументы Тогда
		ТекстВажногоСообщения = "После ввода документов валюту регламентированного учета изменять нельзя.";

	Иначе
		ТекстВажногоСообщения = "Валюту регламентированного учета можно изменять пока не введены документы.";

	КонецЕсли;

КонецПроцедуры // ПроверкаДоступностиВалютыУчета()

// Управляет доступностью элементов формы
//
Процедура УстановитьДоступность()

	Элементы.ВестиСкладскойУчетБУ.Доступность 				= мПравоНаРедактированиеНастроекПараметровУчета;
	Элементы.ВестиРасчетыПоДокументам.Доступность 			= мПравоНаРедактированиеНастроекПараметровУчета;
	Элементы.ВестиУчетПоПодразделениям.Доступность 			= мПравоНаРедактированиеНастроекПараметровУчета;
	Элементы.ВестиУчетПоСотрудникам.Доступность    			= мПравоНаРедактированиеНастроекПараметровУчета;
	Элементы.ВестиУчетОСВРазрезеМОЛ.Доступность 	        = мПравоНаРедактированиеНастроекПараметровУчета;
	Элементы.ВестиУчетОСВРазрезеПодразделений.Доступность 	= мПравоНаРедактированиеНастроекПараметровУчета;
	Элементы.ВыводитьРНН.Доступность 						= мПравоНаРедактированиеНастроекПараметровУчета;
	Элементы.ВыводитьБИН_ИИН.Доступность 					= мПравоНаРедактированиеНастроекПараметровУчета;
	
	Элементы.ВестиСуммовойУчетПоСкладамБУ.Доступность = (ВестиСкладскойУчетБУ И мПравоНаРедактированиеНастроекПараметровУчета);	

	// установим доступность ЭУ на закладке шаблоны номеров, так как он системой не контролируются
	// а право запись константы ШаблоныНомеров есть не у всех
			

	Элементы.ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов.Доступность = Элементы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Доступность
																								  И КонстантыНабор.ПоддержкаРаботыСоСтруктурнымиПодразделениями И мПравоНаРедактированиеНастроекПараметровУчета;
	
	Элементы.ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов.Доступность 	= Элементы.ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов.Доступность;
	
	// вести авансовые платежит по НК можно только, если основные платежи ведутся по НК
	
	Элементы.ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов.Доступность = ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов И Элементы.ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов.Доступность;            	
	Элементы.ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов.Доступность = ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов И Элементы.ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов.Доступность;
	
//	Элементы.ПоддержкаРаботыСоСтруктурнымиПодразделениямиВЗарплате.Доступность 	= Элементы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Доступность
//																								  И КонстантыНабор.ПоддержкаРаботыСоСтруктурнымиПодразделениями И мПравоНаРедактированиеНастроекПараметровУчета;
	//доступность налоговых реквизитов	
	//Элементы.РамкаГруппыНалоговыйУчет.Доступность = ВестиСкладскойУчетБУ;
	//Элементы.ВестиСкладскойУчетНУ.Доступность     = (ВестиСкладскойУчетБУ И мПравоНаРедактированиеНастроекПараметровУчета);
	//Элементы.ВестиСуммовойУчетПоСкладамНУ.Доступность = ВестиСкладскойУчетНУ И ВестиСуммовойУчетПоСкладамБУ И мПравоНаРедактированиеНастроекПараметровУчета;
	
	Если Элементы.Найти("дог_УчитыватьСуммуНДСПриУчетеИсполненияТоварныхДоговоров")<>Неопределено Тогда
		Элементы.дог_УчитыватьСуммуНДСПриУчетеИсполненияТоварныхДоговоров.Доступность = КонстантыНабор.дог_УчитыватьИсполнениеТоварныхДоговоров;
	КонецЕсли;
	
	Элементы.ПомощникПереходаНаРегистрТоварыОрганизаций.Доступность = ЗначениеЗаполнено(КонстантыНабор.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ);
	
	Элементы.фин_НастройкиХраненияФактическихДанных.Видимость = КонстантыНабор.фин_РежимХраненияФактическихДанных = Перечисления.фин_РежимыХраненияФактическихДанных.НастраиваемыйРежим;
	
КонецПроцедуры // УстановитьВидимость()


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НажатиеНаНавигационнуСсылкуОсновнойПанели(Элементы.ДекорацияОбщее);
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Элементы.УчетПоСотрудникам.ТолькоПросмотр=Ложь;
	#Иначе
		Элементы.УчетПоСотрудникам.ТолькоПросмотр=Истина;
		куфиб_ОбщегоНазначения.СообщитьПользователю("В режиме тонкого клиента не все параметры доступны для изменения!");
	#КонецЕсли
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
  	СписокВыбораРазделителей.Добавить(" ",	"Пробел");
	СписокВыбораРазделителей.Добавить(". ",	"Точка");
	СписокВыбораРазделителей.Добавить(" - ","Тире");

	мПравоНаРедактированиеНастроекПараметровУчета = (РольДоступна("ПолныеПрава") Или РольДоступна("ГлавныйБухгалтер")); 
	
	ПроверкаДоступностиВалютыУчета();

	ОпределелитьПараметрыУчета();

	УстановитьДоступность();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаДополнительныхРазрезовБюджетирования.Измерение
		|ИЗ
		|	РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК НастройкаДополнительныхРазрезовБюджетирования";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() И КонстантыНабор.фин_ИспользоватьУниверсальнуюАналитику Тогда
		Элементы.фин_ИспользоватьУниверсальнуюАналитику.Доступность=Ложь;
	КонецЕсли;

	Если КонстантыНабор.фин_РазделительКодаСтатьиВОтчетах <>"" Тогда
		РезультатВыбора = СписокВыбораРазделителей.НайтиПоЗначению(КонстантыНабор.фин_РазделительКодаСтатьиВОтчетах);
		Если РезультатВыбора <>Неопределено Тогда
			мРазделительКодаСтатьиВОтчетах = РезультатВыбора.Представление;
		КонецЕсли;
	КонецЕсли;
	
	// инициализация
	
	// инициализация списка счетов, на которых можно устанавливать дополнительную аналитику "Работники организации"
	// счета кредиторской задолженности
	мСчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда); //3350
//	мСчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате); //3394
	мСчетаЗП.Добавить(ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию); //3211
	мСчетаЗП.Добавить(ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС); //3212
	мСчетаЗП.Добавить(ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС); //3213
	мСчетаЗП.Добавить(ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям); //3220
	мСчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам); //3430
	мСчетаЗП.Добавить(ПланыСчетов.Налоговый.КраткосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам); //3430Н
	//мСчетаЗП.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате); //4174
	мСчетаЗП.Добавить(ПланыСчетов.Типовой.ДолгосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам); //4230
	// счета дебиторской задолженности
	мСчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоВыплаченнойЗаработнойПлате); //1252
	//мСчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоПредоставленнымРаботникамЗаймам); //1253
	//мСчетаЗП.Добавить(ПланыСчетов.Типовой.ПрочаяКраткосрочнаяЗадолженностьРаботников); //1254
	//мСчетаЗП.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПоВыплаченнойЗаработнойПлате); //2152
	мСчетаЗП.Добавить(ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками); //3350Н (Н460)
	мСчетаЗП.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоСоциальномуСтрахованию); // 3211Н
	мСчетаЗП.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоВзносамОСМС); // 3212Н
	мСчетаЗП.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоОтчислениямОСМС); // 3213Н
	мСчетаЗП.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоПенсионнымОтчислениям);  // 3220Н

	Если Не Элементы.Найти("фин_ПериодичностьФормированияБюджетногоРегламента") = Неопределено Тогда
		ОписаниеТиповПериодичность = Новый ОписаниеТипов("ПеречислениеСсылка.фин_Периодичность");
		Элементы.фин_ПериодичностьФормированияБюджетногоРегламента.ОграничениеТипа = ОписаниеТиповПериодичность;
	КонецЕсли;
	
	Если Не Элементы.Найти("усд_ГрафикУчетаРаботПоСогласованию") = Неопределено Тогда
		ОписаниеТиповГрафик = Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботы");
		Элементы.усд_ГрафикУчетаРаботПоСогласованию.ОграничениеТипа = ОписаниеТиповГрафик;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзменениеНастройкиВеденияАналитическогоУчетаОС" Тогда
		ОбработатьОповещениеИзмененияНастройкиУчетаОС();
//		ЭтаФорма.Обновить();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОповещениеИзмененияНастройкиУчетаОС()
	КонстантыНабор.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ = Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ.Получить();
	КонстантыНабор.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений = Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений.Получить();
	   		
	ВестиУчетОСВРазрезеМОЛ = Не(КонстантыНабор.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ = Дата(1,1,1));
	ВестиУчетОСВРазрезеПодразделений = Не(КонстантыНабор.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений = Дата(1,1,1));
	
	мВестиУчетОСВРазрезеМОЛ = ВестиУчетОСВРазрезеМОЛ;
	мВестиУчетОСВРазрезеПодразделений = ВестиУчетОСВРазрезеПодразделений;
КонецПроцедуры

// Устанавливает субконто "Номенклатура" и "Контрагент" у указанного счета.
//
&НаСервере
Процедура ПрименитьПараметрыСубконто(ИмяСчета, ИмяПланаСчетов, ЕстьКоличество, Склады, Суммы, ОбработкаПодчиненных = Истина)

	ВидСубконто = "ВидыСубконтоТиповые";

	Если мПравоНаРедактированиеНастроекПараметровУчета Тогда
		Попытка

			Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
			Счета = Новый СписокЗначений();
			Счета.Добавить(Счет);

			Если ОбработкаПодчиненных Тогда

				ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
				Пока ВыборкаСчетов.Следующий() Цикл
					
					Счета.Добавить(ВыборкаСчетов.Ссылка);

				КонецЦикла;

			КонецЕсли;
					
			Для каждого Счет Из Счета Цикл

				Объект   = Счет.Значение.ПолучитьОбъект();
				КодСчета = Объект.Код;
				
				Сообщение = "";

				Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Склады, "ВидСубконто");

				Если Склады = Истина Тогда // Добавляем 

					Если Субконто = Неопределено Тогда

						НовыйВид = Объект.ВидыСубконто.Добавить();

						НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Склады;

						Если ЕстьКоличество Тогда
							НовыйВид.Количественный = Истина;
						КонецЕсли;
							
						Сообщение = Сообщение + " установлено субконто ""Склады"",";

					КонецЕсли;

				ИначеЕсли Склады = Ложь Тогда // Удаляем

					Если Субконто <> Неопределено Тогда
						Объект.ВидыСубконто.Удалить(Субконто);
						Сообщение = Сообщение + " удалено субконто ""Склады"",";
					КонецЕсли;
						
				КонецЕсли;

				Если Склады Тогда
						
					Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Склады, "ВидСубконто");
					Если Субконто.Суммовой <> Суммы Тогда
						Субконто.Суммовой = Суммы;
						Сообщение = Сообщение + " у субконто ""Склады"" изменен признак суммового учета,";
					КонецЕсли;
						
				КонецЕсли;

				Если Сообщение <> "" Тогда
					Сообщение = "План счетов """ + ИмяПланаСчетов + """, счет """ +Строка(Объект) + """:" +  Сообщение;
					
					Если Прав(Сообщение, 1) = "," Тогда
						Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
					КонецЕсли;

					куфиб_ОбщегоНазначения.СообщитьПользователю(Сообщение);
				КонецЕсли; 

				Объект.Записать();

			КонецЦикла;

		Исключение

			куфиб_ОбщегоНазначения.СообщитьПользователю("Счет """ + Строка(КодСчета) + """:");
			куфиб_ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());

		КонецПопытки;
		
	КонецЕсли;	

КонецПроцедуры // ПрименитьПараметрыСубконто()

// Устанавливает или удаляет субконто "Подразделения" у указанного счета.
//
&НаСервере
Процедура ПрименитьПараметрыСубконтоПодразделения(ИмяСчета, ИмяПланаСчетов, ВестиПоПодразделениям, ОбработкаПодчиненных = Истина, ТолькоОбороты = Истина)

	ВидСубконто = "ВидыСубконтоТиповые";
	
	Если мПравоНаРедактированиеНастроекПараметровУчета Тогда
		Попытка

			Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
			Счета = Новый СписокЗначений();
			Счета.Добавить(Счет);

			Если ОбработкаПодчиненных Тогда

				ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
				Пока ВыборкаСчетов.Следующий() Цикл
					
					Счета.Добавить(ВыборкаСчетов.Ссылка);

				КонецЦикла;

			КонецЕсли;
					
			Для Каждого Счет Из Счета Цикл

				Объект   = Счет.Значение.ПолучитьОбъект();
				КодСчета = Объект.Код;
				
				Сообщение = "";

				Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Подразделения, "ВидСубконто");

				Если ВестиПоПодразделениям = Истина Тогда // Добавляем 

					Если Субконто = Неопределено Тогда
	                    
						НовыйВид = Объект.ВидыСубконто.Добавить();

						НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Подразделения;

						НовыйВид.Количественный = Истина;
						НовыйВид.Суммовой = Истина;
						НовыйВид.Валютный = Истина;
						НовыйВид.ТолькоОбороты = ТолькоОбороты;
												
						Сообщение = Сообщение + " установлено субконто ""Подразделения"",";

					КонецЕсли;

				ИначеЕсли ВестиПоПодразделениям = Ложь Тогда // Удаляем

					Если Субконто <> Неопределено Тогда
						Объект.ВидыСубконто.Удалить(Субконто);
						Сообщение = Сообщение + " удалено субконто ""Подразделения"",";
					КонецЕсли;
						
				КонецЕсли;

				Если Сообщение <> "" Тогда
					Сообщение = "План счетов """ + ИмяПланаСчетов + """, счет """ +Строка(Объект) + """:" +  Сообщение;
					
					Если Прав(Сообщение, 1) = "," Тогда
						Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
					КонецЕсли;

					куфиб_ОбщегоНазначения.СообщитьПользователю(Сообщение);
				КонецЕсли; 

				Объект.Записать();

			КонецЦикла;

		Исключение

			куфиб_ОбщегоНазначения.СообщитьПользователю("Счет """ + Строка(КодСчета) + """:");
			куфиб_ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());

		КонецПопытки;
		
	КонецЕсли;	

КонецПроцедуры // ПрименитьПараметрыСубконтоПодразделения()

// Устанавливает или удаляет субконто "РаботникиОрганизации" у указанного счета.
//
&НаСервере
Процедура ПрименитьПараметрыСубконтоМОЛ(ИмяСчета, ИмяПланаСчетов, ВестиПоМОЛ, ОбработкаПодчиненных = Истина)

	ВидСубконто = "ВидыСубконтоТиповые";
	
	Если мПравоНаРедактированиеНастроекПараметровУчета Тогда
		Попытка

			Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
			Счета = Новый СписокЗначений();
			Счета.Добавить(Счет);

			Если ОбработкаПодчиненных Тогда

				ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
				Пока ВыборкаСчетов.Следующий() Цикл
					
					Счета.Добавить(ВыборкаСчетов.Ссылка);

				КонецЦикла;

			КонецЕсли;
					
			Для Каждого Счет Из Счета Цикл

				Объект   = Счет.Значение.ПолучитьОбъект();
				КодСчета = Объект.Код;
				
				Сообщение = "";

				Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].РаботникиОрганизаций, "ВидСубконто");

				Если ВестиПоМОЛ = Истина Тогда // Добавляем 

					Если Субконто = Неопределено Тогда
	                    
						НовыйВид = Объект.ВидыСубконто.Добавить();

						НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].РаботникиОрганизаций;

						НовыйВид.Количественный = Истина;
						НовыйВид.Суммовой = Истина;
						НовыйВид.Валютный = Истина;
						НовыйВид.ТолькоОбороты = Ложь;
												
						Сообщение = Сообщение + " установлено субконто ""Работники организации"",";

					КонецЕсли;

				ИначеЕсли ВестиПоМОЛ = Ложь Тогда // Удаляем

					Если Субконто <> Неопределено Тогда
						Объект.ВидыСубконто.Удалить(Субконто);
						Сообщение = Сообщение + " удалено субконто ""Работники организации"",";
					КонецЕсли;
						
				КонецЕсли;

				Если Сообщение <> "" Тогда
					Сообщение = "План счетов """ + ИмяПланаСчетов + """, счет """ +Строка(Объект) + """:" +  Сообщение;
					
					Если Прав(Сообщение, 1) = "," Тогда
						Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
					КонецЕсли;

					куфиб_ОбщегоНазначения.СообщитьПользователю(Сообщение);
				КонецЕсли; 

				Объект.Записать();

			КонецЦикла;

		Исключение

			куфиб_ОбщегоНазначения.СообщитьПользователю("Счет """ + Строка(КодСчета) + """:");
			куфиб_ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());

		КонецПопытки;
		
	КонецЕсли;	

КонецПроцедуры // ПрименитьПараметрыСубконтоПодразделения()

// Устанавливает или удаляет субконто "РаботникиОрганизации" у указанного счета.
//
&НаСервере
Процедура ПрименитьПараметрыСубконтоРаботникиОрганизации(СчетЗП, ИмяПланаСчетов, ВестиПоСотрудникам, ОбработкаПодчиненных = Истина)

	ВидСубконто = "ВидыСубконтоТиповые";
	
	Если мПравоНаРедактированиеНастроекПараметровУчета Тогда
		Попытка
			
			Объект   = СчетЗП.ПолучитьОбъект();
			КодСчета = Объект.Код;
				
			Сообщение = "";

			Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].РаботникиОрганизаций, "ВидСубконто");

			Если ВестиПоСотрудникам = Истина Тогда // Добавляем 

				Если Субконто = Неопределено Тогда
					
					НовыйВид = Объект.ВидыСубконто.Добавить();

					НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].РаботникиОрганизаций;

					Если ИмяПланаСчетов = "Типовой" Тогда						
						НовыйВид.Валютный = Истина;
					КонецЕсли;
					
					НовыйВид.Количественный = Истина;
					НовыйВид.Суммовой = Истина;
					
					// для счетов резерва устанавливаем "Только обороты"
					Если СчетЗП = ПланыСчетов.Типовой.КраткосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам //3430
						ИЛИ СчетЗП = ПланыСчетов.Налоговый.КраткосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам //3430Н
							ИЛИ СчетЗП = ПланыСчетов.Типовой.ДолгосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам Тогда //4230					 
						НовыйВид.ТолькоОбороты = Истина;
					Иначе
						НовыйВид.ТолькоОбороты = Ложь;
					КонецЕсли;
											
					Сообщение = " установлено субконто ""Работники организаций""";

				КонецЕсли;

			ИначеЕсли ВестиПоСотрудникам = Ложь Тогда // Удаляем

				Если Субконто <> Неопределено Тогда
					Объект.ВидыСубконто.Удалить(Субконто);
					Сообщение = " удалено субконто ""Работники организаций""";
				КонецЕсли;
					
			КонецЕсли;

			Если Сообщение <> "" Тогда
				Сообщение = "План счетов """ + ИмяПланаСчетов + """, счет """ +Строка(Объект) + """:" +  Сообщение;				
				куфиб_ОбщегоНазначения.СообщитьПользователю(Сообщение);
			КонецЕсли; 

			Объект.Записать();	

		Исключение

			куфиб_ОбщегоНазначения.СообщитьПользователю("Счет """ + Строка(КодСчета) + """:");
			куфиб_ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());

		КонецПопытки;
		
	КонецЕсли;	

КонецПроцедуры // ПрименитьПараметрыСубконтоРаботникиОрганизации()

// Устанавливает субокнто расчетные документы у указанного счета.
//
&НаСервере
Процедура ПрименитьПараметрыРасчетов(СчетВзаиморасчетов, ВестиРасчетыПоДокументам)

	Если мПравоНаРедактированиеНастроекПараметровУчета Тогда
		Попытка

			Счета = Новый СписокЗначений();
			Счета.Добавить(СчетВзаиморасчетов);
			

			Для каждого Счет Из Счета Цикл

				Объект   = Счет.Значение.ПолучитьОбъект();
				КодСчета = Объект.Код;

				Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами, "ВидСубконто");

				Если НЕ (Субконто = Неопределено) Тогда
					Если Субконто.Предопределенное Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				Если ВестиРасчетыПоДокументам = Истина Тогда // Добавляем 

					Если Субконто = Неопределено Тогда

						НовыйВид = Объект.ВидыСубконто.Добавить();

						НовыйВид.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРасчетовСКонтрагентами;
						НовыйВид.Суммовой    = Истина;

						Если Объект.Количественный Тогда
							НовыйВид.Количественный = Истина;
						КонецЕсли;

						Если Объект.Валютный Тогда
							НовыйВид.Валютный = Истина;
						КонецЕсли;

						Сообщение = "План счетов ""Типовой"", счет """ +Строка(Объект) + """ установлено субконто ""Расчетные документы""";
						
					КонецЕсли;

				ИначеЕсли ВестиРасчетыПоДокументам = Ложь Тогда // Удаляем

					Если Субконто = Неопределено Тогда // кто-то удалил вид субконто вручную!
						Возврат;
					КонецЕсли;

					Объект.ВидыСубконто.Удалить(Субконто);
					
					Сообщение = "План счетов ""Типовой"", счет """ +Строка(Объект) + """ удалено субконто ""Расчетные документы""";

				КонецЕсли;

				Если Прав(Сообщение, 1) = "," Тогда
					Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
				КонецЕсли;

				куфиб_ОбщегоНазначения.СообщитьПользователю(Сообщение);

				Объект.Записать();

			КонецЦикла;

		Исключение

			куфиб_ОбщегоНазначения.СообщитьПользователю("Счет """ + Строка(КодСчета) + """:");
			куфиб_ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());

		КонецПопытки;
		
	КонецЕсли;	

КонецПроцедуры

// Процедура выполняет установку видов субконто на счетах.
//
&НаСервере
Процедура ПрименитьПараметры() Экспорт

	НачатьТранзакцию();

	// аналит. учет ТМЗ
	Если (ВестиСкладскойУчетБУ <> мВестиСкладскойУчетПервоначальное) Или (ВестиСуммовойУчетПоСкладамБУ <> мВестиСуммовойУчетПоСкладамПервоначальное) Тогда
		Счета = Новый СписокЗначений();
		Счета.Добавить("ГотоваяПродукция");
		Счета.Добавить("СырьеИМатериалы");
		Счета.Добавить("Товары");
		Счета.Добавить("МонтажОборудования");
		Счета.Добавить("МатериалыПринятыеВПереработку");

		Для каждого Счет Из Счета Цикл
			ПрименитьПараметрыСубконто(Счет.Значение, "Типовой", Истина, ВестиСкладскойУчетБУ, ВестиСуммовойУчетПоСкладамБУ,Истина);
		КонецЦикла;
	КонецЕсли;	
		
	// аналит. учет ТМЗ (НУ)
	Если (ВестиСкладскойУчетНУ <> мВестиСкладскойУчетНУПервоначальное) Или (ВестиСуммовойУчетПоСкладамНУ <> мВестиСуммовойУчетПоСкладамНУПервоначальное) Тогда
		Счета = Новый СписокЗначений();
		Счета.Добавить("Товары");
		Счета.Добавить("ГотоваяПродукция");
		Счета.Добавить("СырьеИМатериалы");
		
		Для каждого Счет Из Счета Цикл
			ПрименитьПараметрыСубконто(Счет.Значение, "Налоговый", Истина, ВестиСкладскойУчетНУ, ВестиСуммовойУчетПоСкладамНУ,Истина);
		КонецЦикла;
	КонецЕсли;	
	
	// аналит. учет расчетов с контрагентами
	
	Если ВестиРасчетыПоДокументам <> мВестиРасчетыПоДокументамПервоначальное Тогда
		ТаблицаСчетов = УправлениеВзаиморасчетами.ПолучитьСписокСчетовВзаиморасчетов();
		
		Для каждого Строка Из ТаблицаСчетов Цикл
			ПрименитьПараметрыРасчетов(Строка.Ссылка, ВестиРасчетыПоДокументам);
		КонецЦикла;
    КонецЕсли;
		
	// аналит. учет доходов/затрат по подразделениям
	Если ВестиУчетПоПодразделениям <> мВестиУчетПоПодразделениямПервоначальное Тогда
		
		СчетаДоходов = Новый СписокЗначений;
		СчетаДоходов.Добавить("ДоходОтРеализацииПродукцииИОказанияУслуг_"); //6000
		СчетаДоходов.Добавить("ДоходыОтФинансирования"); //6100
		СчетаДоходов.Добавить("ПрочиеДоходы_"); //6200
		СчетаДоходов.Добавить("ДоходыСвязанныеСПрекращаемойДеятельностью_"); //6300
		СчетаДоходов.Добавить("ДоляПрибылиОрганизацийУчитываемыхПоМетодуДолевогоУчастия"); //6400

		СчетаЗатрат = Новый СписокЗначений;
		СчетаЗатрат.Добавить("СебестоимостьРеализованнойПродукцииИОказанныхУслуг_"); //7000
		СчетаЗатрат.Добавить("РасходыНаФинансирование"); //7300
		СчетаЗатрат.Добавить("ПрочиеРасходы_"); //7400
		СчетаЗатрат.Добавить("РасходыСвязанныеСПрекращаемойДеятельностью_"); //7500
		СчетаЗатрат.Добавить("ДоляВУбыткеОрганизацийУчитываемыхМетодомДолевогоУчастия"); //7600
		СчетаЗатрат.Добавить("РасходыПоКорпоративномуПодоходномуНалогу_"); //7700

		//установим субконто Подразделения для счетов доходов/затрат
		Для каждого Счет Из СчетаЗатрат Цикл
			ПрименитьПараметрыСубконтоПодразделения(Счет.Значение, "Типовой", ВестиУчетПоПодразделениям, Истина);
		КонецЦикла;
		
		Для каждого Счет Из СчетаДоходов Цикл
			ПрименитьПараметрыСубконтоПодразделения(Счет.Значение, "Типовой", ВестиУчетПоПодразделениям, Истина);
		КонецЦикла;
	КонецЕсли;	
	
	// Начисленные налоги в разрезе налоговых комитетов: БУ
	Если ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов <> мВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетовПервоначальное Тогда
		СчетаНалогов = Новый СписокЗначений;
		СчетаНалогов.Добавить(ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог); 	//3120
		СчетаНалогов.Добавить(ПланыСчетов.Типовой.СоциальныйНалог); 				//3150
		СчетаНалогов.Добавить(ПланыСчетов.Типовой.ЗемельныйНалог);  				//3160
		СчетаНалогов.Добавить(ПланыСчетов.Типовой.НалогНаТранспортныеСредства);  	//3170
		СчетаНалогов.Добавить(ПланыСчетов.Типовой.НалогНаИмущество); 				//3180
		СчетаНалогов.Добавить(ПланыСчетов.Типовой.ПрочиеНалоги); 					//3190
		Для Каждого Счет Из СчетаНалогов Цикл
			ПрименитьПараметрыКонтрагентыНалогов(Счет.Значение,ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов, "Бух"); 
		КонецЦикла;  		
	КонецЕсли;
	
	// Начисленные налоги в разрезе налоговых комитетов: НУ
	Если ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов <> мВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетовПервоначальное Тогда
		СчетаНалогов = Новый СписокЗначений;
		СчетаНалогов.Добавить(ПланыСчетов.Налоговый.ИндивидуальныйПодоходныйНалог); //3120Н
		СчетаНалогов.Добавить(ПланыСчетов.Налоговый.ПрочиеНалоги); 					//3190Н	
		Для Каждого Счет Из СчетаНалогов Цикл
			ПрименитьПараметрыКонтрагентыНалогов(Счет.Значение,ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов, "Нал"); 
		КонецЦикла;  		
	КонецЕсли;

	// Авансовые платежи  в разрезе налоговых комитетов: БУ
	Если ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов <> мВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетовПервоначальное Тогда
		СчетаАвансовНалогов = Новый СписокЗначений;
		СчетаАвансовНалогов.Добавить(ПланыСчетов.Типовой.ПрочиеНалогиИДругиеОбязательныеПлатежиВБюджет); // 1430
		Для Каждого Счет Из СчетаАвансовНалогов Цикл
			ПрименитьПараметрыКонтрагентыНалогов(Счет.Значение,ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов, "Бух"); 
		КонецЦикла;  		
	КонецЕсли;
	
	// Авансовые платежи  в разрезе налоговых комитетов: НУ
	Если ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов <> мВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетовПервоначальное Тогда
		СчетаАвансовНалогов = Новый СписокЗначений;
		СчетаАвансовНалогов.Добавить(ПланыСчетов.Налоговый.НалоговыеАктивыПрочее); // 1430Н		
		
		Для Каждого Счет Из СчетаАвансовНалогов Цикл
			ПрименитьПараметрыКонтрагентыНалогов(Счет.Значение,ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов, "Нал"); 
		КонецЦикла;  		
	КонецЕсли;
	 	
	
	// аналит. учет доходов/затрат по сотрудникам
	Если ВестиУчетПоСотрудникам <> мВестиУчетПоСотрудникамПервоначальное Тогда
		
		//установим субконто РаботникиОрганизации для счетов по зар.плате
		Для каждого Счет Из мСчетаЗП Цикл
			Если ТипЗнч(Счет.Значение) = Тип("ПланСчетовСсылка.Налоговый") Тогда
				ИмяПланаСчетов = "Налоговый";
			Иначе
				ИмяПланаСчетов = "Типовой";
			КонецЕсли;
			ПрименитьПараметрыСубконтоРаботникиОрганизации(Счет.Значение, ИмяПланаСчетов, ВестиУчетПоСотрудникам, Ложь);
		КонецЦикла;
		
		Если ВестиУчетПоСотрудникам = Истина Тогда
			Если мТаблицаДокументовСАналитикойПоСотрудникам <> Неопределено Тогда
				куфиб_ОбщегоНазначения.СообщитьПользователю("Перепроведение документов после установки субконто ""Работники организаций"":", СтатусСообщения.Важное);
				Для Каждого Док Из мТаблицаДокументовСАналитикойПоСотрудникам Цикл
					МетаданныеДокумента = Док.Ш_Ссылка.Метаданные();
					ВидДокумента = МетаданныеДокумента.Имя;		
					Если ВидДокумента = "ОперацияБух" Тогда
						ДокОперацияБух = Док.Ш_Ссылка;
						Попытка 
							#Если Клиент Тогда 
							Состояние("Проведение документа <" + ДокОперацияБух+">");
							#КонецЕсли 
							НаборЗаписейОперацииБух = РегистрыБухгалтерии.Типовой.СоздатьНаборЗаписей();
							НаборЗаписейОперацииБух.Отбор.Регистратор.Использование = Истина;
							НаборЗаписейОперацииБух.Отбор.Регистратор.ВидСравнения	 = ВидСравнения.Равно;
							НаборЗаписейОперацииБух.Отбор.Регистратор.Значение		 = ДокОперацияБух;
							НаборЗаписейОперацииБух.Прочитать();
							Для Каждого Запись Из НаборЗаписейОперацииБух Цикл
								Запись.Активность = Истина;
							КонецЦикла;
							Если НаборЗаписейОперацииБух.Модифицированность() Тогда
								НаборЗаписейОперацииБух.Записать(Истина);
								куфиб_ОбщегоНазначения.СообщитьПользователю("Проведен документ """ + ДокОперацияБух + """ по регистру бухгалтерии ""Типовой"", содержащий счета по заработной плате.", СтатусСообщения.Информация);
							КонецЕсли;        					 									 
							НаборЗаписейОперацииНал = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
							НаборЗаписейОперацииНал.Отбор.Регистратор.Использование = Истина;
							НаборЗаписейОперацииНал.Отбор.Регистратор.ВидСравнения	 = ВидСравнения.Равно;
							НаборЗаписейОперацииНал.Отбор.Регистратор.Значение		 = ДокОперацияБух;
							НаборЗаписейОперацииНал.Прочитать();
							Для Каждого Запись Из НаборЗаписейОперацииНал Цикл
								Запись.Активность = Истина;
							КонецЦикла;
							Если НаборЗаписейОперацииНал.Модифицированность() Тогда
								 НаборЗаписейОперацииНал.Записать(Истина);
								 куфиб_ОбщегоНазначения.СообщитьПользователю("Проведен документ """ + ДокОперацияБух + """ по регистру бухгалтерии ""Налоговый"", содержащий счета по заработной плате.", СтатусСообщения.Информация);
							КонецЕсли;
						Исключение
							куфиб_ОбщегоНазначения.СообщитьПользователю("Не удалось провести документ """ + ДокОперацияБух + """!", СтатусСообщения.Внимание);
							куфиб_ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
						КонецПопытки;
					Иначе
						ДокументОбъект = Док.Ш_Ссылка.ПолучитьОбъект();						
						Попытка
							#Если Клиент Тогда 
							Состояние("Проведение документа <" + ДокументОбъект.Ссылка+">");
							#КонецЕсли 
							ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
							куфиб_ОбщегоНазначения.СообщитьПользователю("Проведен документ """ + ДокументОбъект.Ссылка + """.", СтатусСообщения.Информация);
						Исключение
							куфиб_ОбщегоНазначения.СообщитьПользователю("Не удалось провести документ <"+ДокументОбъект.Ссылка+">!", СтатусСообщения.Внимание);
							куфиб_ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
						КонецПопытки;							
					 КонецЕсли;
				КонецЦикла;				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// аналит. учет ОС в разрезе подразделений
	Если ВестиУчетОСВРазрезеПодразделений <> мВестиУчетОСВРазрезеПодразделений Тогда
		Счета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаПоВА();
		
		Для каждого Счет Из Счета Цикл
			ПрименитьПараметрыСубконтоПодразделения(Счет.Значение, "Типовой", ВестиУчетОСВРазрезеПодразделений, Истина, Ложь);
		КонецЦикла;
		
	КонецЕсли;
	
	// аналит. учет ОС в разрезе МОЛ
	Если ВестиУчетОСВРазрезеМОЛ <> мВестиУчетОСВРазрезеМОЛ Тогда
		Счета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаПоВА();
		
		Для каждого Счет Из Счета Цикл
			ПрименитьПараметрыСубконтоМОЛ(Счет.Значение, "Типовой", ВестиУчетОСВРазрезеМОЛ, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	// сведения об адресации задач согласования
	Если мФормироватьЗадачиПоИсполнителямСогласования <> КонстантыНабор.усд_ФормироватьЗадачиПоИсполнителямСогласования И КонстантыНабор.усд_ФормироватьЗадачиПоИсполнителямСогласования Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПраваПодписиНаЭтапахМаршрутов.ВидДокументов,
			|	ПраваПодписиНаЭтапахМаршрутов.Маршрут,
			|	ПраваПодписиНаЭтапахМаршрутов.Пользователь,
			|	ПраваПодписиНаЭтапахМаршрутов.Этап
			|ИЗ
			|	РегистрСведений.усд_ПраваПодписиНаЭтапахМаршрутов КАК ПраваПодписиНаЭтапахМаршрутов";

		Изменившиеся = Запрос.Выполнить().Выгрузить();

		СтрокиФильтра = Изменившиеся.Скопировать();
		СтрокиФильтра.Свернуть("Маршрут,ВидДокументов,Этап");
		СтруктураОтбор = Новый Структура("Маршрут,ВидДокументов,Этап");
		СписокГрупп = Новый Массив;
		Выгрузка = Изменившиеся.Скопировать();
		Для Каждого СтрокаЗапись Из Выгрузка Цикл
			Если ЗначениеЗаполнено(СтрокаЗапись.Пользователь) И ТипЗнч(СтрокаЗапись.Пользователь)=Тип("СправочникСсылка.усд_ГруппыСогласованияДокументов") Тогда
				СписокГрупп.Добавить(СтрокаЗапись.Пользователь);
			КонецЕсли;
		КонецЦикла;
		Если СписокГрупп.Количество()>0 Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СоставГруппСогласованияДокументов.Пользователь,
				|	СоставГруппСогласованияДокументов.ГруппаСогласования
				|ИЗ
				|	РегистрСведений.усд_СоставГруппСогласованияДокументов КАК СоставГруппСогласованияДокументов
				|ГДЕ
				|	СоставГруппСогласованияДокументов.ГруппаСогласования В(&ГруппаСогласования)";

			Запрос.УстановитьПараметр("ГруппаСогласования", СписокГрупп);

			Результат = Запрос.Выполнить();

			СоставГрупп = Результат.Выгрузить();
		КонецЕсли;
		Для Каждого СтрокаФильтра Из СтрокиФильтра Цикл
			ЗаполнитьЗначенияСвойств(СтруктураОтбор,СтрокаФильтра);
			НаборЗаписей = РегистрыСведений.усд_АдресацияЗадачНаЭтапахМаршрутов.СоздатьНаборЗаписей();
			Для Каждого ЭлементОтбора Из СтруктураОтбор Цикл
				НаборЗаписей.Отбор[ЭлементОтбора.Ключ].Установить(ЭлементОтбора.Значение);
			КонецЦикла;
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			СтрокиКДобавлению = Выгрузка.НайтиСтроки(СтруктураОтбор);
			ДобавленныеПользователи = Новый Массив;
			Для Каждого СтрокаДобавить Из СтрокиКДобавлению Цикл
				Если Не ЗначениеЗаполнено(СтрокаДобавить.Пользователь) Тогда
					Продолжить;
				КонецЕсли;
				Если ТипЗнч(СтрокаДобавить.Пользователь)=Тип("СправочникСсылка.Пользователи") Тогда
					Если ДобавленныеПользователи.Найти(СтрокаДобавить.Пользователь)=Неопределено Тогда
						НоваяСтрока = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураОтбор);
						НоваяСтрока.Пользователь = СтрокаДобавить.Пользователь;
						ДобавленныеПользователи.Добавить(СтрокаДобавить.Пользователь);
					КонецЕсли;
				Иначе
					СтрокиСоставГруппы = СоставГрупп.НайтиСтроки(Новый Структура("ГруппаСогласования",СтрокаДобавить.Пользователь));
					Для Каждого СтрокаСоставаГруппы Из СтрокиСоставГруппы Цикл
						Если Не ЗначениеЗаполнено(СтрокаСоставаГруппы.Пользователь) Тогда
							Продолжить;
						КонецЕсли;
						Если ДобавленныеПользователи.Найти(СтрокаСоставаГруппы.Пользователь)=Неопределено Тогда
							НоваяСтрока = НаборЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураОтбор);
							НоваяСтрока.Пользователь = СтрокаСоставаГруппы.Пользователь;
							НоваяСтрока.ГруппаСогласования = СтрокаДобавить.Пользователь;
							ДобавленныеПользователи.Добавить(СтрокаСоставаГруппы.Пользователь);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Попытка
				НаборЗаписей.Записать();
			Исключение
				куфиб_ОбщегоНазначения.СообщитьПользователю("Не удалось обновить сведения об адресации задач по согласованию!",СтатусСообщения.Важное);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
		
	ЗафиксироватьТранзакцию();

КонецПроцедуры // ПрименитьПараметры()

&НаСервере
Процедура ПрименитьПараметрыКонтрагентыНалогов(СчетУплатыНалога, ВестиУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов, ВидУчета = "Бух")
	
	Если мПравоНаРедактированиеНастроекПараметровУчета Тогда
		// бухгалтерский план счето
		Попытка 			
			Сообщение = "";
			Объект   = СчетУплатыНалога.ПолучитьОбъект();
			КодСчета = Объект.Код;
			
			Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты, "ВидСубконто");
			
			Если ВестиУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов = Истина Тогда // Добавляем 
				
				Если Субконто = Неопределено Тогда
					
					НовыйВид = Объект.ВидыСубконто.Добавить();
					
					НовыйВид.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты;
					НовыйВид.Суммовой    = Истина;
					
					Сообщение = "План счетов "+?(ВидУчета = "Бух","""Типовой""","""Налоговый""") + ", счет """ + Строка(Объект) + """ установлено субконто ""Контрагенты""";
					
				КонецЕсли;
				
			ИначеЕсли ВестиУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов = Ложь Тогда // Удаляем
				
				Если Субконто = Неопределено Тогда 
					Возврат;
				КонецЕсли;
				
				Объект.ВидыСубконто.Удалить(Субконто);
				
				Сообщение = "План счетов "+?(ВидУчета = "Бух","""Типовой""","""Налоговый""") + ", счет """ +Строка(Объект) + """ удалено субконто ""Контрагенты""";
				
			КонецЕсли;
			
			Если Прав(Сообщение, 1) = "," Тогда
				Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
			КонецЕсли;
			
			Если Сообщение<>"" Тогда
				куфиб_ОбщегоНазначения.СообщитьПользователю(Сообщение);
			КонецЕсли;
			
			Объект.Записать();
			
		Исключение
			
			куфиб_ОбщегоНазначения.СообщитьПользователю("Счет """ + Строка(КодСчета) + """:");
			куфиб_ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЗначениеКонстантыПоддержкаСтруктурныхПодразделений = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();

	ПрименитьПараметры();
	
	ЗначениеКонстантыИспользоватьУправленческийУчет = Константы["ИспользоватьУправленческийУчет"].Получить();

	//Оповестить("ИзмененыНастройкиУправленческогоУчета");
	
//	ПараметрыСеанса.ПрефиксУзлаРаспределеннойИнформационнойБазы = КонстантыНабор.ПрефиксУзлаРаспределеннойИнформационнойБазы;
	
	Если Не ПустаяСтрока(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить()) Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ Первые 1 1
					   |	
					   |ИЗ
					   |	РегистрСведений.ПрефиксыИнформационныхБаз КАК ПрефиксыИнформационныхБаз
					   |ГДЕ
					   |	ПрефиксыИнформационныхБаз.Префикс = &Префикс";
					   
		Запрос.УстановитьПараметр("Префикс", КонстантыНабор.ПрефиксУзлаРаспределеннойИнформационнойБазы);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		НаборЗаписейРегистра = РегистрыСведений.ПрефиксыИнформационныхБаз.СоздатьНаборЗаписей();
		
		НаборЗаписейРегистра.Отбор.Префикс.Установить(КонстантыНабор.ПрефиксУзлаРаспределеннойИнформационнойБазы);
		
		СтрокаРегистра = НаборЗаписейРегистра.Добавить();
		
		СтрокаРегистра.Префикс = КонстантыНабор.ПрефиксУзлаРаспределеннойИнформационнойБазы;
			
		НаборЗаписейРегистра.Записать();
		
	КонецЕсли;
	
	#Если Клиент Тогда
		ОбщегоНазначения.ЗначениеСпискаПрефиксовУзлов(глСписокПрефиксовУзлов, Истина);
	#КонецЕсли
	
	// Обработка снятия с поддержки работы со структурным подразделениями
	Если мВестиУчетПоСтруктурнымПодразделениям <> КонстантыНабор.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ПараметрыСеанса.ИспользоватьОграничениеПоСтруктурныеПодразделения = КонстантыНабор.ПоддержкаРаботыСоСтруктурнымиПодразделениями;
		
		Если КонстантыНабор.ПоддержкаРаботыСоСтруктурнымиПодразделениями = Ложь Тогда
			НаборЗаписей = РегистрыСведений.НазначениеВидовОбъектовДоступа.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВидОбъектаДоступа.Установить(Перечисления.ВидыОбъектовДоступа.СтруктурныеПодразделения, Истина);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() <> 0 Тогда
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Настройка.Установить(ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеСтруктурноеПодразделениеОрганизации, Истина);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() <> 0 Тогда
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ОбновитьПовторноИспользуемыеЗначения();
	ПараметрыСеанса.ОбщиеЗначения=Новый ХранилищеЗначения(Новый Структура);
	ОпределелитьПараметрыУчета();
КонецПроцедуры

&НаКлиенте
Процедура ПоддержкаРаботыСоСтруктурнымиПодразделениямиПриИзменении(Элемент)
	
	Если Не КонстантыНабор.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов 	= Ложь;
		ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов 		= Ложь;
		
		ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов 	= Ложь;
		ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов 		= Ложь;
		
	КонецЕсли;	
	
	Если Не КонстантыНабор.ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		КонстантыНабор.общ_ПоддержкаРаботыСоСтруктурнымиПодразделениямиВЗарплате = Ложь;
	КонецЕсли;
	
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетовПриИзменении(Элемент)
	// устанавливаем аналогичное значение для остальных элементов.	
	ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов	= ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов;
	ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов 				= ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов;
	ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов 		= ВестиБухгалтерскийУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов;
	
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетовПриИзменении(Элемент)
	ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов = ВестиНалоговыйУчетРасчетовСБюджетомВРазрезеНалоговыхКомитетов;
	
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетовПриИзменении(Элемент)
	ВестиНалоговыйУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов = ВестиБухгалтерскийУчетАвансовыхРасчетовСБюджетомВРазрезеНалоговыхКомитетов;
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоПодразделениямПриИзменении(Элемент)
	ЕстьОборотыНаСчетахЗатрат = Ложь;
	ЕстьОборотыНаСчетахДоходов = Ложь;
	ПриИзмененииУчетаПоПодразделениямДоходовИРасходов(ЕстьОборотыНаСчетахЗатрат,ЕстьОборотыНаСчетахДоходов);
	Если мВестиУчетПоПодразделениям Тогда
		// если до этого субконто "Подразделения" было установлено, то можем без всяких проверок снять его, 
		// но должны предупредить пользователей, что последующая установка будет проблемной
		//
			Если ЕстьОборотыНаСчетахДоходов Или ЕстьОборотыНаСчетахЗатрат Тогда
				
				ТекстВопроса = "На счетах доходов и затрат будет снята аналитика ""Подразделения""!"
								+ Символы.ПС + "В данный момент на этих счетах имеются обороты." 
								+ Символы.ПС + "Вы хотите снять аналитику?";
								
				РежимВопроса = РежимДиалогаВопрос.ДаНет;				
				Ответ = Вопрос(ТекстВопроса, РежимВопроса,,КодВозвратаДиалога.Нет,);				
											
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					// если ответили НЕТ, то возвращаем прежнее значение
					ВестиУчетПоПодразделениям = мВестиУчетПоПодразделениям;	
				Иначе
					мВестиУчетПоПодразделениям = ВестиУчетПоПодразделениям;
				КонецЕсли;	
					
			КонецЕсли;					
		Иначе
		// если до этого не было установлено субконто "Подразделения", то если есть обороты на счетах доходов и затрат
		// запрещаем устанавливать аналитику
		//
			Если ЕстьОборотыНаСчетахДоходов И ЕстьОборотыНаСчетахЗатрат Тогда
				
				Предупреждение("В оборотах счетов доходов и затрат имеются движения.
								|Аналитика по подразделениям не может быть установлена!");
				ВестиУчетПоПодразделениям = мВестиУчетПоПодразделениям;
				
			ИначеЕсли ЕстьОборотыНаСчетахДоходов Тогда
				
				Предупреждение("В оборотах счетов доходов имеются движения.
								|Аналитика по подразделениям не может быть установлена!");
				ВестиУчетПоПодразделениям = мВестиУчетПоПодразделениям;	
				
			ИначеЕсли ЕстьОборотыНаСчетахЗатрат Тогда
				
				Предупреждение("В оборотах счетов затрат имеются движения.
								|Аналитика по подразделениям не может быть установлена!");
				ВестиУчетПоПодразделениям = мВестиУчетПоПодразделениям;	
			Иначе
				мВестиУчетПоПодразделениям = ВестиУчетПоПодразделениям;
			КонецЕсли;
		КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииУчетаПоПодразделениямДоходовИРасходов(ЕстьОборотыНаСчетахЗатрат,ЕстьОборотыНаСчетахДоходов)
	ЕстьОборотыНаСчетахЗатрат = Ложь;
	ЕстьОборотыНаСчетахДоходов = Ложь;
	
	// инициализация списка счетов доходов, на которых можно устанавливать дополнительную аналитику "Подразделения"	
	СчетаДоходов = Новый СписокЗначений;
	СчетаДоходов.Добавить(ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_); //6000
	СчетаДоходов.Добавить(ПланыСчетов.Типовой.ДоходыОтФинансирования); //6100
	СчетаДоходов.Добавить(ПланыСчетов.Типовой.ПрочиеДоходы_); //6200
	СчетаДоходов.Добавить(ПланыСчетов.Типовой.ДоходыСвязанныеСПрекращаемойДеятельностью_); //6300
	СчетаДоходов.Добавить(ПланыСчетов.Типовой.ДоляПрибылиОрганизацийУчитываемыхПоМетодуДолевогоУчастия); //6400

	// инициализация списка счетов затрат, на которых можно устанавливать дополнительную аналитику "Подразделения"	
	СчетаЗатрат = Новый СписокЗначений;
	СчетаЗатрат.Добавить(ПланыСчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг_); //7000
	СчетаЗатрат.Добавить(ПланыСчетов.Типовой.РасходыНаФинансирование); //7300
	СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ПрочиеРасходы_); //7400
	СчетаЗатрат.Добавить(ПланыСчетов.Типовой.РасходыСвязанныеСПрекращаемойДеятельностью_); //7500
	СчетаЗатрат.Добавить(ПланыСчетов.Типовой.ДоляВУбыткеОрганизацийУчитываемыхМетодомДолевогоУчастия); //7600
	СчетаЗатрат.Добавить(ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу_); //7700

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Типовой.СчетДт,
	               |	Типовой.СчетКт,
	               |	Типовой.Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой КАК Типовой
	               |ГДЕ               
	               |	(Типовой.СчетДт В ИЕРАРХИИ (&Счета)
	               |			ИЛИ Типовой.СчетКт В ИЕРАРХИИ (&Счета))
	               |	И Типовой.Активность = ИСТИНА";
	
	Если ВестиУчетПоПодразделениям <> мВестиУчетПоПодразделениям Тогда
		
		// необходимо проверить, есть ли обороты на счетах доходов
		//
		Запрос.УстановитьПараметр("Счета",СчетаДоходов);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЕстьОборотыНаСчетахДоходов = Истина;
		КонецЕсли;	
		
		// еще нужно проверить, есть ли обороты на счетах затрат
		Запрос.УстановитьПараметр("Счета",СчетаЗатрат);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЕстьОборотыНаСчетахЗатрат = Истина;
		КонецЕсли;
							
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетОСВРазрезеПодразделенийПриИзменении(Элемент)
			
	// очистка даты при изменении признака
	Если ВестиУчетОСВРазрезеПодразделений Тогда
		КонстантыНабор.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений = ОбщегоНазначения.ПолучитьРабочуюДату();
		
		ОткрытьФормуМодально("Обработка.ИзменениеНастроекУчета.Форма.ФормаИзмененияСоставаАналитикиНаСчетахУчетаОСУправляемая",Новый Структура("Дата",КонстантыНабор.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений));
		
	Иначе
		ТекстВопроса = "При снятии признака уже имеющаяся аналитика на счетах учета ОС будет потеряна. Вы хотите продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			КонстантыНабор.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений = Дата(1,1,1);
		Иначе
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	 
	// доступность связанных реквизитов
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетОСВРазрезеМОЛПриИзменении(Элемент)
	
	// очистка даты при изменении признака
	Если ВестиУчетОСВРазрезеМОЛ Тогда
		КонстантыНабор.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ = ОбщегоНазначения.ПолучитьРабочуюДату();
		
		ОткрытьФормуМодально("Обработка.ИзменениеНастроекУчета.Форма.ФормаИзмененияСоставаАналитикиНаСчетахУчетаОСУправляемая",Новый Структура("Дата,ВестиАналитическийУчетОС",КонстантыНабор.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ,1));
		
	Иначе
		КонстантыНабор.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ = Дата(1,1,1);
	КонецЕсли;	
	 
	// доступность связанных реквизитов
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоСотрудникамПриИзменении(Элемент)
	#Если ТолстыйКлиентОбычноеПриложение Тогда
	
		ЕстьОборотыНаСчетахЗП = Ложь;	
		
		// инициализация списка счетов, на которых можно устанавливать дополнительную аналитику "Работники организации"
		СчетаЗП = мСчетаЗП;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Счета",СчетаЗП);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Таблица.СчетДт,
		               |	Таблица.СчетКт,
		               |	Таблица.Сумма
		               |ИЗ
		               |	(ВЫБРАТЬ ПЕРВЫЕ 1
		               |		Типовой.СчетДт КАК СчетДт,
		               |		Типовой.СчетКт КАК СчетКт,
		               |		Типовой.Сумма КАК Сумма
		               |	ИЗ
		               |		РегистрБухгалтерии.Типовой КАК Типовой
		               |	ГДЕ
		               |		(Типовой.СчетДт В (&Счета)
		               |				ИЛИ Типовой.СчетКт В (&Счета))
		               |		И Типовой.Активность = ИСТИНА
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ ПЕРВЫЕ 1
		               |		Налоговый.СчетДт,
		               |		Налоговый.СчетКт,
		               |		Налоговый.Сумма
		               |	ИЗ
		               |		РегистрБухгалтерии.Налоговый КАК Налоговый
		               |	ГДЕ
		               |		(Налоговый.СчетДт В (&Счета)
		               |				ИЛИ Налоговый.СчетКт В (&Счета))
		               |		И Налоговый.Активность = ИСТИНА) КАК Таблица";
		
		Если ВестиУчетПоСотрудникам <> мВестиУчетПоСотрудникам Тогда
			
			// необходимо проверить, есть ли обороты на счетах зар.платы
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЕстьОборотыНаСчетахЗП = Истина;
			КонецЕсли;	
					
			Если мВестиУчетПоСотрудникам Тогда
				// если до этого субконто "Работники организации" было установлено, то можем без всяких проверок снять его, 
				// но должны предупредить пользователей, что последующая установка будет проблемной		
				Если ЕстьОборотыНаСчетахЗП Тогда
					
					ТекстВопроса = "На счетах зар.платы будет снята аналитика ""Работники организации""!"
									+ Символы.ПС + "В данный момент на этих счетах имеются обороты." 
									+ Символы.ПС + "Вы хотите снять аналитику?";
									
					РежимВопроса = РежимДиалогаВопрос.ДаНет;				
					Ответ = Вопрос(ТекстВопроса, РежимВопроса,,КодВозвратаДиалога.Нет,);				
												
					Если Ответ = КодВозвратаДиалога.Нет Тогда
						// если ответили НЕТ, то возвращаем прежнее значение
						ВестиУчетПоСотрудникам = мВестиУчетПоСотрудникам;	
					Иначе
						мВестиУчетПоСотрудникам = ВестиУчетПоСотрудникам;
					КонецЕсли;	
						
				КонецЕсли;					
			Иначе
				// если до этого не было установлено субконто "Работники организации", то если есть обороты на счетах зар.платы
				// необходимо отменить проведение документов по з/п, установить признак и перепровести документы
				Если ЕстьОборотыНаСчетахЗП Тогда
					
					ТекстВопроса = "На счетах зар.платы будет установлена аналитика ""Работники организации""!"
									+ Символы.ПС + "В данный момент на этих счетах имеются обороты." 
									+ Символы.ПС + "Для установки аналитики требуется снять с проведения документы, список которых будет выведен далее."
									+ Символы.ПС + "При записи значений настроек параметров учета документы будут перепроведены вновь."
									+ Символы.ПС
									+ Символы.ПС + "Вы хотите снять с проведения документы по зар.плате и установить аналитический учет по сотрудникам?";
									
					РежимВопроса = РежимДиалогаВопрос.ДаНет;				
					Ответ = Вопрос(ТекстВопроса, РежимВопроса,,КодВозвратаДиалога.Нет,);				
												
					Если Ответ = КодВозвратаДиалога.Нет Тогда
						// если ответили НЕТ, то возвращаем прежнее значение
						ВестиУчетПоСотрудникам = мВестиУчетПоСотрудникам;	
					Иначе
						
						Если НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("ГлавныйБухгалтер") Тогда
							куфиб_ОбщегоНазначения.СообщитьПользователю("Пользователь без установленной роли ""Полные права"" или ""Главный бухгалтер"" не может производить отмену проведения документов!");
							ВестиУчетПоСотрудникам = мВестиУчетПоСотрудникам;	
							Возврат;
						КонецЕсли;
						
						ЗапросПоРегистраторам = Новый Запрос;
						ЗапросПоРегистраторам.УстановитьПараметр("Счета",СчетаЗП);
						ЗапросПоРегистраторам.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
						                              |	Таблица.Ш_Ссылка
						                              |ИЗ
						                              |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
						                              |		Типовой.Регистратор КАК Ш_Ссылка
						                              |	ИЗ
						                              |		РегистрБухгалтерии.Типовой КАК Типовой
						                              |	ГДЕ
						                              |		(Типовой.СчетДт В (&Счета)
						                              |				ИЛИ Типовой.СчетКт В (&Счета))
						                              |		И Типовой.Активность = ИСТИНА
						                              |	
						                              |	ОБЪЕДИНИТЬ ВСЕ
						                              |	
						                              |	ВЫБРАТЬ РАЗЛИЧНЫЕ
						                              |		Налоговый.Регистратор
						                              |	ИЗ
						                              |		РегистрБухгалтерии.Налоговый КАК Налоговый
						                              |	ГДЕ
						                              |		(Налоговый.СчетДт В (&Счета)
						                              |				ИЛИ Налоговый.СчетКт В (&Счета))
						                              |		И Налоговый.Активность = ИСТИНА) КАК Таблица";
												  
						мТаблицаДокументовСАналитикойПоСотрудникамКопия = ЗапросПоРегистраторам.Выполнить().Выгрузить();
						
						мТаблицаДокументовСАналитикойПоСотрудникам.Очистить();
						Для Каждого СтрокаКопия Из мТаблицаДокументовСАналитикойПоСотрудникамКопия Цикл
							НС = мТаблицаДокументовСАналитикойПоСотрудникам.Добавить();
							ЗаполнитьЗначенияСвойств(НС,СтрокаКопия);
						КонецЦикла;
								            							
						// передадим данные для отбора
						
						ТаблицаОбъектов = Новый ТаблицаЗначений;
						ТаблицаОбъектов.Колонки.Добавить("ПредставлениеТаблицы");
						ТаблицаОбъектов.Колонки.Добавить("ИмяТаблицы");
						
						СписокДокументов = Новый СписокЗначений;
						СписокДокументовОперБух = Новый СписокЗначений;
						ТекущийВидДокумента = Неопределено;
						ВидДокумента = Неопределено;
						
						Для Каждого Док Из мТаблицаДокументовСАналитикойПоСотрудникам Цикл		
							МетаданныеДокумента = Док.Ш_Ссылка.Метаданные();
							ВидДокумента = МетаданныеДокумента.Имя;		
							Если ВидДокумента = "ОперацияБух" Тогда
								СписокДокументовОперБух.Добавить(Док.Ш_Ссылка);		
								Продолжить;
							КонецЕсли;		
							СписокДокументов.Добавить(Док.Ш_Ссылка);		
							Если ВидДокумента <> ТекущийВидДокумента Тогда
								НоваяСтрока = ТаблицаОбъектов.Добавить();
								НоваяСтрока.ПредставлениеТаблицы = МетаданныеДокумента.Синоним;
								НоваяСтрока.ИмяТаблицы = ВидДокумента;
								ТекущийВидДокумента = ВидДокумента;
							КонецЕсли;
						КонецЦикла;    
						ТаблицаОбъектов.Свернуть("ПредставлениеТаблицы, ИмяТаблицы");
						
						Если СписокДокументовОперБух.Количество() <> 0 Тогда
							// произведем отмену проведения документов "Операция бух"
							ТекстВопроса = "Произвести отмену проведения документов ""Операция (бухгалтерский и налоговый учет)""?";								
							РежимВопроса = РежимДиалогаВопрос.ДаНет;				
							Ответ = Вопрос(ТекстВопроса, РежимВопроса,,КодВозвратаДиалога.Да,);				
												
							Если Ответ = КодВозвратаДиалога.Да Тогда
								
								Для Каждого ЭлементСпискаОперацияБух Из СписокДокументовОперБух Цикл
									ДокОперацияБух = ЭлементСпискаОперацияБух.Значение;
									Попытка 
										 НаборЗаписейОперацииБух = РегистрыБухгалтерии.Типовой.СоздатьНаборЗаписей();
										 НаборЗаписейОперацииБух.Отбор.Регистратор.Использование = Истина;
										 НаборЗаписейОперацииБух.Отбор.Регистратор.ВидСравнения	 = ВидСравнения.Равно;
										 НаборЗаписейОперацииБух.Отбор.Регистратор.Значение		 = ДокОперацияБух;
										 НаборЗаписейОперацииБух.Прочитать();
										 Для Каждого Запись Из НаборЗаписейОперацииБух Цикл
											 Запись.Активность = Ложь;						 						 
										 КонецЦикла;
										 Если НаборЗаписейОперацииБух.Модифицированность() Тогда
											 НаборЗаписейОперацииБух.Записать(Истина);
											 куфиб_ОбщегоНазначения.СообщитьПользователю("Отменено проведение документа """ + ДокОперацияБух + """ по регистру бухгалтерии ""Типовой"", содержащих счета по заработной плате.", СтатусСообщения.Информация);
										 КонецЕсли;        					 									 
										 НаборЗаписейОперацииНал = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
										 НаборЗаписейОперацииНал.Отбор.Регистратор.Использование = Истина;
										 НаборЗаписейОперацииНал.Отбор.Регистратор.ВидСравнения	 = ВидСравнения.Равно;
										 НаборЗаписейОперацииНал.Отбор.Регистратор.Значение		 = ДокОперацияБух;
										 НаборЗаписейОперацииНал.Прочитать();
										 Для Каждого Запись Из НаборЗаписейОперацииНал Цикл
											 Запись.Активность = Ложь;						 						 
										 КонецЦикла;
										 Если НаборЗаписейОперацииНал.Модифицированность() Тогда
											 НаборЗаписейОперацииНал.Записать(Истина);
											 куфиб_ОбщегоНазначения.СообщитьПользователю("Отменено проведение документа """ + ДокОперацияБух + """ по регистру бухгалтерии ""Налоговый"", содержащих счета по заработной плате.", СтатусСообщения.Информация);
										 КонецЕсли;        					 									 
									Исключение
										 куфиб_ОбщегоНазначения.СообщитьПользователю("Не удалось отменить проведение документа """ + ДокОперацияБух + """!", СтатусСообщения.Внимание);
										 куфиб_ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
									КонецПопытки;
									
								КонецЦикла;
								      			
							КонецЕсли;
							
						КонецЕсли;
						
						Если СписокДокументов.Количество() <> 0 Тогда
							// произведем отмену проведения остальных документов по з/п
							ТекстВопроса = "Произвести отмену проведения остальных документов по заработной плате?";								
							РежимВопроса = РежимДиалогаВопрос.ДаНет;				
							Ответ = Вопрос(ТекстВопроса, РежимВопроса,,КодВозвратаДиалога.Да,);				
												
							Если Ответ = КодВозвратаДиалога.Да Тогда
								
								МассивТипов = Новый Массив;
								МассивТипов.Добавить(Тип("Булево"));
								МассивТипов.Добавить(Тип("Null"));
								ОписаниеТипаБулево = Новый ОписаниеТипов(МассивТипов);
			
								ФормаГрупповойОбработки = Обработки.ГрупповаяОбработкаСправочниковИДокументов.ПолучитьФорму();
								ФормаГрупповойОбработки.ТабличноеПолеВидыОбъектов = ТаблицаОбъектов;
								ФормаГрупповойОбработки.ОчищатьСообщения = Ложь;
								ФормаГрупповойОбработки.ТипОбъекта = 1;
								ФормаГрупповойОбработки.ИнициализацияЗапроса();	
								
								ОтборПоДокументам = ФормаГрупповойОбработки.ПостроительЗапроса.Отбор;	
								Если ОтборПоДокументам.Найти("Ш_Ссылка") = Неопределено Тогда
									НовыйОтбор = ОтборПоДокументам.Добавить("Ш_Ссылка");
								КонецЕсли;	
								НовыйОтбор.ВидСравнения = ВидСравнения.ВСписке;
								НовыйОтбор.Значение = СписокДокументов;
								НовыйОтбор.Использование = Истина;
								
								ФормаГрупповойОбработки.ВыполнитьОтбор();	
								
								Для Каждого Действие Из ФормаГрупповойОбработки.ЭлементыФормы.СписокДействий.СписокВыбора Цикл
									Если Действие.Представление = "Изменить: [Проведение документа]" Тогда
										ФормаГрупповойОбработки.СписокДействий = Действие.Значение;						
									КонецЕсли;
								КонецЦикла;
							                     
								ФормаГрупповойОбработки.ЭлементыФормы.ПолеВводаДействия.РежимВыбораИзСписка = Ложь;
								ФормаГрупповойОбработки.ЭлементыФормы.ПолеВводаДействия.КнопкаВыбора  = Истина;
								ФормаГрупповойОбработки.ЭлементыФормы.ПолеВводаДействия.КнопкаОчистки = Истина;
								ФормаГрупповойОбработки.ЭлементыФормы.ПолеВводаДействия.ОграничениеТипа = ОписаниеТипаБулево;
								
								ФормаГрупповойОбработки.ЭлементыФормы.ПолеВводаДействия.Значение = Ложь;
								ФормаГрупповойОбработки.ЭлементыФормы.ПолеВводаДействия.ВыбиратьТип = Истина;
								
								ФормаГрупповойОбработки.УстановитьВидимостьКолонок();
								Если НЕ ФормаГрупповойОбработки.Открыта() Тогда
									куфиб_ОбщегоНазначения.СообщитьПользователю("Для отмены проведения документов нажмите кнопку ""Выполнить"" и затем закройте форму.", СтатусСообщения.Информация);
									ФормаГрупповойОбработки.ОткрытьМодально();
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
										
						// проверим есть ли на данный момент обороты на счетах
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							ЕстьОборотыНаСчетахЗП = Истина;
						Иначе
							ЕстьОборотыНаСчетахЗП = Ложь;
						КонецЕсли;	
						Если ЕстьОборотыНаСчетахЗП Тогда
							Предупреждение("В оборотах счетов по зар.плате имеются движения.
										|Аналитика по сотрудникам не может быть установлена!");
							ВестиУчетПоСотрудникам = мВестиУчетПоСотрудникам;
						Иначе
							мВестиУчетПоСотрудникам = ВестиУчетПоСотрудникам;
						КонецЕсли;			
					
					КонецЕсли;
				Иначе
					мВестиУчетПоСотрудникам = ВестиУчетПоСотрудникам;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
	#КонецЕсли
КонецПроцедуры


&НаКлиенте
Процедура ВестиСкладскойУчетБУПриИзменении(Элемент)
	
	Если ВестиСкладскойУчетБУ <> мВестиСкладскойУчетБУ Тогда
		// необходимо проверить, а нет ли оборотов на счетах запасов
						
		Если ИмеютсяДвиженияПоЗапасам() Тогда
			Предупреждение("В оборотах счетов запасов имеются движения.
							|Аналитика по складам не может быть изменена!");
			ВестиСкладскойУчетБУ = мВестиСкладскойУчетБУ;
		Иначе
			ВестиСуммовойУчетПоСкладамБУ = ВестиСкладскойУчетБУ;
			мВестиСкладскойУчетБУ 		 = ВестиСкладскойУчетБУ;		
			
			// для НУ также как и в БУ
			ВестиСуммовойУчетПоСкладамНУ = ВестиСкладскойУчетБУ;
			ВестиСкладскойУчетНУ 		 = ВестиСкладскойУчетБУ;
			мВестиСкладскойУчетНУ 		 = ВестиСкладскойУчетБУ;	
		КонецЕсли;	
		
	КонецЕсли;

	УстановитьДоступность();
КонецПроцедуры

&НаСервере
Функция ИмеютсяДвиженияПоЗапасам()
	ЗапросКСчетамЗапасов = Новый Запрос;
	ЗапросКСчетамЗапасов.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Типовой.СчетДт,
	|	Типовой.СчетКт,
	|	Типовой.Сумма
	|ИЗ
	|	РегистрБухгалтерии.Типовой КАК Типовой
	|ГДЕ
	|	(Типовой.СчетДт В ИЕРАРХИИ (&Запасы)
	|			ИЛИ Типовой.СчетКт В ИЕРАРХИИ (&Запасы))
	|	И Типовой.Активность = ИСТИНА";
	
	ЗапросКСчетамЗапасов.УстановитьПараметр("Запасы",ПланыСчетов.Типовой.Запасы);
	Выборка = ЗапросКСчетамЗапасов.Выполнить().Выбрать();
	Возврат Выборка.Следующий();
КонецФункции

&НаКлиенте
Процедура ВестиСуммовойУчетПоСкладамБУПриИзменении(Элемент)
	
	Если ВестиСуммовойУчетПоСкладамБУ <> мВестиСуммовойУчетПоСкладамБУ Тогда
		// необходимо проверить, а нет ли оборотов на счетах запасов
		// если есть обороты и мы поменяем признак суммового учета, то может поменяться себестоимость товаров
		//
		Если ИмеютсяДвиженияПоЗапасам() Тогда
			Предупреждение("В оборотах счетов запасов имеются движения.
							|Признак суммового учета по складам не может быть изменен!");
			ВестиСуммовойУчетПоСкладамБУ = мВестиСуммовойУчетПоСкладамБУ;
		Иначе
			мВестиСуммовойУчетПоСкладамБУ = ВестиСуммовойУчетПоСкладамБУ;
			
			// для НУ также как и в БУ
			ВестиСуммовойУчетПоСкладамНУ  = ВестиСуммовойУчетПоСкладамБУ;
			мВестиСуммовойУчетПоСкладамНУ = ВестиСуммовойУчетПоСкладамБУ;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры


&НаКлиенте
Процедура ВестиСкладскойУчетНУПриИзменении(Элемент)
	
	Если ВестиСкладскойУчетНУ <> мВестиСкладскойУчетНУ Тогда
						
		Если ИмеютсяДвиженияПоЗапасамНУ() Тогда
			Предупреждение("В оборотах счетов запасов имеются движения.
							|Аналитика по складам не может быть изменена!");
			ВестиСкладскойУчетНУ = мВестиСкладскойУчетНУ;
		Иначе
			ВестиСуммовойУчетПоСкладамНУ = ВестиСкладскойУчетНУ;
			мВестиСкладскойУчетНУ = ВестиСкладскойУчетНУ;		
		КонецЕсли;	
		
	КонецЕсли;

	УстановитьДоступность();

КонецПроцедуры

&НаСервере
Функция ИмеютсяДвиженияПоЗапасамНУ()
	ЗапросКСчетамЗапасов = Новый Запрос;
	ЗапросКСчетамЗапасов.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Налоговый.СчетДт,
	|	Налоговый.СчетКт,
	|	Налоговый.Сумма
	|ИЗ
	|	РегистрБухгалтерии.Налоговый КАК Налоговый
	|ГДЕ
	|	(Налоговый.СчетДт В ИЕРАРХИИ (&Запасы)
	|			ИЛИ Налоговый.СчетКт В ИЕРАРХИИ (&Запасы))
	|	И Налоговый.Активность = ИСТИНА";
	
	ЗапросКСчетамЗапасов.УстановитьПараметр("Запасы",ПланыСчетов.Налоговый.ПрочиеАктивы_);
	Выборка = ЗапросКСчетамЗапасов.Выполнить().Выбрать();
	Возврат Выборка.Следующий();
КонецФункции


&НаКлиенте
Процедура ВестиСуммовойУчетПоСкладамНУПриИзменении(Элемент)
	
	Если ВестиСкладскойУчетНУ <> мВестиСкладскойУчетНУ Тогда
						
		Если ИмеютсяДвиженияПоЗапасамНУ() Тогда
			Предупреждение("В оборотах счетов запасов имеются движения.
							|Аналитика по складам не может быть изменена!");
			ВестиСкладскойУчетНУ = мВестиСкладскойУчетНУ;
		Иначе
			ВестиСуммовойУчетПоСкладамНУ = ВестиСкладскойУчетНУ;
			мВестиСкладскойУчетНУ = ВестиСкладскойУчетНУ;		
		КонецЕсли;	
		
	КонецЕсли;

	УстановитьДоступность();

КонецПроцедуры


&НаКлиенте
Процедура дог_УчитыватьИсполнениеТоварныхДоговоровПриИзменении(Элемент)
	Если НЕ КонстантыНабор.дог_УчитыватьИсполнениеТоварныхДоговоров Тогда
		КонстантыНабор.дог_УчитыватьСуммуНДСПриУчетеИсполненияТоварныхДоговоров = Ложь;
	КонецЕсли;
	УстановитьДоступность();
КонецПроцедуры


&НаКлиенте
Процедура ВалютаПланированияЗакупокПриИзменении(Элемент)
	КонстантыНабор.узп_ПланированиеЗакупокВВалютеРеглУчета = (ВалютаПланированияЗакупок=1);
КонецПроцедуры


&НаКлиенте
Процедура ВыводитьРННПриИзменении(Элемент)
	// очистка даты при изменении признака
	Если НЕ ВыводитьРНН Тогда
		КонстантыНабор.ДатаПрекращенияВыводаРННВПервичныхДокументах = ОбщегоНазначения.ПолучитьРабочуюДату();
	Иначе
		КонстантыНабор.ДатаПрекращенияВыводаРННВПервичныхДокументах = Дата(1,1,1);
	КонецЕсли;	
	// доступность связанных реквизитов
	УстановитьДоступность();
КонецПроцедуры


&НаКлиенте
Процедура ВыводитьБИН_ИИНПриИзменении(Элемент)
	// очистка даты при изменении признака
	Если ВыводитьБИН_ИИН Тогда
		КонстантыНабор.ДатаНачалаВыводаБИН_ИИНВПервичныхДокументах = ОбщегоНазначения.ПолучитьРабочуюДату();
	Иначе
		КонстантыНабор.ДатаНачалаВыводаБИН_ИИНВПервичныхДокументах = Дата(1,1,1);
	КонецЕсли;	
	// доступность связанных реквизитов
	УстановитьДоступность();
КонецПроцедуры


&НаКлиенте
Процедура фин_ОтложенныйРежимФормированияПроводокПоБюджетированиюПриИзменении(Элемент)
	Если КонстантыНабор.фин_ОтложенныйРежимФормированияПроводокПоБюджетированию = Ложь Тогда
		КонстантыНабор.фин_ИспользоватьОтложенныйРежимУчетаФактическихДанных = Истина;
	КонецЕсли;
	УстановитьДоступность();
КонецПроцедуры


&НаКлиенте
Процедура фин_ИспользоватьРасчетныеМоделиБюджетированияПриИзменении(Элемент)
	Если НЕ КонстантыНабор.фин_ИспользоватьРасчетныеМоделиБюджетирования Тогда
		КонстантыНабор.фин_ПоддержкаЦиклическихМоделей = Ложь;
		КонстантыНабор.фин_РасширенныйРежимФормированияПроводокПриРасчетеПоМоделям = Ложь;
	КонецЕсли;
	УстановитьДоступность();
КонецПроцедуры


&НаКлиенте
Процедура фин_ВестиУчетПоПлануСчетовБюджетированияПриИзменении(Элемент)
	Если НЕ КонстантыНабор.фин_ВестиУчетПоПлануСчетовБюджетирования Тогда
		КонстантыНабор.фин_РасширенныйРежимФормированияПроводокПриРасчетеПоМоделям = Ложь;
	КонецЕсли;
	УстановитьДоступность();
КонецПроцедуры


&НаКлиенте
Процедура фин_РазделительКодаСтатьиВОтчетахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокВыбораРазделителей;
КонецПроцедуры


&НаКлиенте
Процедура фин_РазделительКодаСтатьиВОтчетахОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	КонстантыНабор.фин_РазделительКодаСтатьиВОтчетах = ВыбранноеЗначение;
	мРазделительКодаСтатьиВОтчетах = СписокВыбораРазделителей.НайтиПоЗначению(ВыбранноеЗначение).Представление;
	Модифицированность = Истина;
КонецПроцедуры


&НаКлиенте
Процедура МаксимальныйРазмерФайлаПриИзменении(Элемент)
	КонстантыНабор.МаксимальныйРазмерФайла = МаксимальныйРазмерФайлаМб * 1024*1024;
	Модифицированность = Истина;
КонецПроцедуры


&НаКлиенте
Процедура МаксимальныйРазмерФайлаОчистка(Элемент, СтандартнаяОбработка)
	КонстантыНабор.МаксимальныйРазмерФайла = МаксимальныйРазмерФайлаМб * 1024*1024;
	Модифицированность = Истина;
КонецПроцедуры


&НаКлиенте
Процедура МаксимальныйРазмерФайлаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	КонстантыНабор.МаксимальныйРазмерФайла = МаксимальныйРазмерФайлаМб * 1024*1024;
	Модифицированность = Истина;
КонецПроцедуры


&НаКлиенте
Процедура ДекорацияТомаХраненияФайловНажатие(Элемент)
	Если НЕ КонстантыНабор.ХранитьФайлыВТомахНаДиске Тогда
		Предупреждение("Тома хранения файлов не используются!");
		Возврат;
	ИначеЕсли Модифицированность Тогда
		Предупреждение("Перед редактированием списка томов необходимо сохранить изменения в настройках!");
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.ТомаХраненияФайлов.ФормаСписка",,ЭтаФорма);
КонецПроцедуры


&НаКлиенте
Процедура ЗапрещатьЗагрузкуФайловПоРасширениюПриИзменении(Элемент)
	Если КонстантыНабор.ЗапрещатьЗагрузкуФайловПоРасширению И КонстантыНабор.СписокЗапрещенныхРасширений="" Тогда
		 КонстантыНабор.СписокЗапрещенныхРасширений = "COM EXE BAT CMD VBS VBE JS JSE WSF WSH SCR";
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура усд_УчетнаяЗаписьРассылкиЗадачСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаВыбора",,Элемент);
КонецПроцедуры


&НаКлиенте
Процедура Записатьчч(Команда)
	Записать();
КонецПроцедуры


&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Записать();
	Закрыть();
КонецПроцедуры


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глОбщиеЗначения = Новый Структура;
	глХранилищеЗначений = Новый Структура;
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура дог_РежимКонтроляСроковПоставокПоДоговорамНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Список = Новый СписокЗначений;
	Список.Добавить(ПредопределенноеЗначение("Перечисление.дог_РежимУчетаИсполненияСроковПоставкиПоДоговорам.ПриПроведенииПервичныхДокументов"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.дог_РежимУчетаИсполненияСроковПоставкиПоДоговорам.Регламентно"));
	ДанныеВыбора = Список;
КонецПроцедуры

&НаКлиенте
Процедура ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУПриИзменении(Элемент)
	Элементы.ПомощникПереходаНаРегистрТоварыОрганизаций.Доступность = ЗначениеЗаполнено(КонстантыНабор.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ);
КонецПроцедуры

&НаКлиенте
Процедура ПомощникПереходаНаРегистрТоварыОрганизаций(Команда)
	Если ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУНаСервере() <> КонстантыНабор.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Записать и продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		Оповещение = Новый ОписаниеОповещения("ОбработчикОповещенияПомощникПереходаНаРегистрТоварыОрганизаций",ЭтаФорма);
		ТекстВопроса = НСтр("ru = 'Для открытия Помощника необходимо записать значение даты перехода.'");
		ПоказатьВопрос(Оповещение,ТекстВопроса,Кнопки,,КодВозвратаДиалога.Да);
	Иначе
		ОткрытьПомощникПереходаНаРегистрТоварыОрганизаций();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияПомощникПереходаНаРегистрТоварыОрганизаций(Ответ,ДополнительныеПараметры) Экспорт
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если ДатаПереходаНаУчетПоТоварамОрганизацийЗаписать() Тогда
				ОткрытьПомощникПереходаНаРегистрТоварыОрганизаций();
			КонецЕсли;
		КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникПереходаНаРегистрТоварыОрганизаций()
	
	ПараметрыФормы = Новый Структура("ДатаНачала", КонстантыНабор.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ);
	ОткрытьФорму("Обработка.ИзменениеНастроекУчета.Форма.ПомощникПереходаНаРегистрТоварыОрганизаций", ПараметрыФормы);
	
КонецПроцедуры	
	
&НаСервере
Функция ДатаПереходаНаУчетПоТоварамОрганизацийЗаписать()
		
	НачатьТранзакцию();
	
	МенеджерЗаписи = Константы.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ.СоздатьМенеджерЗначения();	
	МенеджерЗаписи.Значение = КонстантыНабор.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ;
	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось изменить значение константы: '") + ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;

КонецФункции


&НаСервере
Функция ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУНаСервере()
	Возврат Константы.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ.Получить();
КонецФункции

&НаКлиенте
Процедура фин_НастройкиХраненияФактическихДанныхНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.фин_НастройкиХраненияФактическихДанных.ФормаСписка",,ЭтаФорма,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры

&НаКлиенте
Процедура фин_РежимХраненияФактическихДанныхПриИзменении(Элемент)
	УстановитьДоступность();
КонецПроцедуры


