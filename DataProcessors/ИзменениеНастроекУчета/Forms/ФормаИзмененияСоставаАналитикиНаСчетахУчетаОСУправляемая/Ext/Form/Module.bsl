
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	мПравоНаРедактированиеНастроекПараметровУчета = (РольДоступна("ПолныеПрава") Или РольДоступна("ГлавныйБухгалтер"));
	Если Параметры.Свойство("Дата") Тогда
		Дата = Параметры.Дата;
	КонецЕсли;
	Если Параметры.Свойство("ВестиАналитическийУчетОС") Тогда
		ВестиАналитическийУчетОС = Параметры.ВестиАналитическийУчетОС;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Оповестить("ИзменениеНастройкиВеденияАналитическогоУчетаОС");
КонецПроцедуры

&НаКлиенте
Процедура Установить(Команда)
		
	НастройкаИзменена = ИзменитьНастройку();
	Если Не НастройкаИзменена Тогда
		ЭтаФорма.Закрыть();
		Возврат;
	Иначе
		Оповестить("ИзменениеНастройкиВеденияАналитическогоУчетаОС");
	КонецЕсли;
	
	НастройкаСчетов();
	
	ЭтаФорма.Закрыть();
	
	ОткрытьФорму("Обработка.ИзменениеНастроекУчета.Форма.ФормаВводаДокументаПеремещенияУправляемая",Новый Структура("мДатаУстановкиАналитическогоУчета",Дата));
	
КонецПроцедуры

&НаСервере
Процедура НастройкаСчетов()
	Счета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаПоВА();
		
	// записать параметры
	Если ВестиАналитическийУчетОС = 0 Тогда
			
		Для каждого Счет Из Счета Цикл
			ПрименитьПараметрыСубконтоПодразделения(Счет.Значение, "Типовой", Истина, Истина, Ложь);
		КонецЦикла;

		Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений.Установить(Дата);
		
	ИначеЕсли ВестиАналитическийУчетОС = 1 Тогда
		
		Для каждого Счет Из Счета Цикл
			ПрименитьПараметрыСубконтоМОЛ(Счет.Значение, "Типовой", Истина, Истина);
		КонецЦикла;
		
		Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ.Установить(Дата);
	Иначе
		
		Для каждого Счет Из Счета Цикл
			ПрименитьПараметрыСубконтоПодразделения(Счет.Значение, "Типовой", Истина, Истина, Ложь);
		КонецЦикла;
		
		Для каждого Счет Из Счета Цикл
			ПрименитьПараметрыСубконтоМОЛ(Счет.Значение, "Типовой", Истина, Истина);
		КонецЦикла;
		
		Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений.Установить(Дата);
		Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ.Установить(Дата);
	КонецЕсли;	
КонецПроцедуры

// Устанавливает или удаляет субконто "Подразделения" у указанного счета.
//
&НаСервере
Процедура ПрименитьПараметрыСубконтоМОЛ(ИмяСчета, ИмяПланаСчетов, ВестиПоМОЛ, ОбработкаПодчиненных = Истина)

	ВидСубконто = "ВидыСубконтоТиповые";
	
	Если мПравоНаРедактированиеНастроекПараметровУчета Тогда
		Попытка

			Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
			Счета = Новый СписокЗначений();
			Счета.Добавить(Счет);

			Если ОбработкаПодчиненных Тогда

				ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
				Пока ВыборкаСчетов.Следующий() Цикл
					
					Счета.Добавить(ВыборкаСчетов.Ссылка);

				КонецЦикла;

			КонецЕсли;
					
			Для Каждого Счет Из Счета Цикл

				ОбъектСчет   = Счет.Значение.ПолучитьОбъект();
				КодСчета = ОбъектСчет.Код;
				
				Сообщение = "";

				Субконто = ОбъектСчет.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].РаботникиОрганизаций, "ВидСубконто");

				Если ВестиПоМОЛ = Истина Тогда // Добавляем 

					Если Субконто = Неопределено Тогда
	                    
						НовыйВид = ОбъектСчет.ВидыСубконто.Добавить();

						НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].РаботникиОрганизаций;

						НовыйВид.Количественный = Истина;
						НовыйВид.Суммовой = Истина;
						НовыйВид.Валютный = Истина;
						НовыйВид.ТолькоОбороты = Ложь;
												
						Сообщение = Сообщение + " установлено субконто ""Работники организации"",";

					КонецЕсли;

				ИначеЕсли ВестиПоМОЛ = Ложь Тогда // Удаляем

					Если Субконто <> Неопределено Тогда
						ОбъектСчет.ВидыСубконто.Удалить(Субконто);
						Сообщение = Сообщение + " удалено субконто ""Работники организации"",";
					КонецЕсли;
						
				КонецЕсли;

				Если Сообщение <> "" Тогда
					Сообщение = "План счетов """ + ИмяПланаСчетов + """, счет """ +Строка(ОбъектСчет) + """:" +  Сообщение;
					
					Если Прав(Сообщение, 1) = "," Тогда
						Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
					КонецЕсли;

					Сообщить(Сообщение);
				КонецЕсли; 

				ОбъектСчет.Записать();

			КонецЦикла;

		Исключение

			Сообщить("Счет """ + Строка(КодСчета) + """:");
			Сообщить(ОписаниеОшибки());

		КонецПопытки;
		
	КонецЕсли;	

КонецПроцедуры // ПрименитьПараметрыСубконтоПодразделения()

// Устанавливает или удаляет субконто "Подразделения" у указанного счета.
//
&НаСервере
Процедура ПрименитьПараметрыСубконтоПодразделения(ИмяСчета, ИмяПланаСчетов, ВестиПоПодразделениям, ОбработкаПодчиненных = Истина, ТолькоОбороты = Истина)

	ВидСубконто = "ВидыСубконтоТиповые";
	
	Если мПравоНаРедактированиеНастроекПараметровУчета Тогда
		Попытка

			Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
			Счета = Новый СписокЗначений();
			Счета.Добавить(Счет);

			Если ОбработкаПодчиненных Тогда

				ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
				Пока ВыборкаСчетов.Следующий() Цикл
					
					Счета.Добавить(ВыборкаСчетов.Ссылка);

				КонецЦикла;

			КонецЕсли;
					
			Для Каждого Счет Из Счета Цикл

				ОбъектСчет   = Счет.Значение.ПолучитьОбъект();
				КодСчета = ОбъектСчет.Код;
				
				Сообщение = "";

				Субконто = ОбъектСчет.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Подразделения, "ВидСубконто");

				Если ВестиПоПодразделениям = Истина Тогда // Добавляем 

					Если Субконто = Неопределено Тогда
	                    
						НовыйВид = ОбъектСчет.ВидыСубконто.Добавить();

						НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Подразделения;

						НовыйВид.Количественный = Истина;
						НовыйВид.Суммовой = Истина;
						НовыйВид.Валютный = Истина;
						НовыйВид.ТолькоОбороты = ТолькоОбороты;
												
						Сообщение = Сообщение + " установлено субконто ""Подразделения"",";

					КонецЕсли;

				ИначеЕсли ВестиПоПодразделениям = Ложь Тогда // Удаляем

					Если Субконто <> Неопределено Тогда
						ОбъектСчет.ВидыСубконто.Удалить(Субконто);
						Сообщение = Сообщение + " удалено субконто ""Подразделения"",";
					КонецЕсли;
						
				КонецЕсли;

				Если Сообщение <> "" Тогда
					Сообщение = "План счетов """ + ИмяПланаСчетов + """, счет """ +Строка(ОбъектСчет) + """:" +  Сообщение;
					
					Если Прав(Сообщение, 1) = "," Тогда
						Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
					КонецЕсли;

					Сообщить(Сообщение);
				КонецЕсли; 

				ОбъектСчет.Записать();

			КонецЦикла;

		Исключение

			Сообщить("Счет """ + Строка(КодСчета) + """:");
			Сообщить(ОписаниеОшибки());

		КонецПопытки;
		
	КонецЕсли;	

КонецПроцедуры // ПрименитьПараметрыСубконтоПодразделения()

&НаСервере
Функция ИзменитьНастройку()
	
	НачатьТранзакцию();
	МенеджерЗаписиДатаНачалаМОЛ = Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеМОЛ.СоздатьМенеджерЗначения();
	МенеджерЗаписиДатаНачалаПодразделения = Константы.ДатаНачалаВеденияВБУУчетаОСВРазрезеПодразделений.СоздатьМенеджерЗначения();
	
	// изменение значения константы
	Если ВестиАналитическийУчетОС = 0 Тогда
		
		МенеджерЗаписиДатаНачалаПодразделения.Значение = Дата;
		Попытка
			МенеджерЗаписиДатаНачалаПодразделения.Записать();
		Исключение
			куфиб_ОбщегоНазначения.СообщитьПользователю("Не удалось изменить значение константы ""Дата начала ведения учета ОС по подразделениям"": "+ОписаниеОшибки(),60);
			ОтменитьТранзакцию();
			Возврат ложь;
		КонецПопытки;
		
	ИначеЕсли ВестиАналитическийУчетОС = 1 Тогда
		
		МенеджерЗаписиДатаНачалаМОЛ.Значение = Дата;
		Попытка
			МенеджерЗаписиДатаНачалаМОЛ.Записать();
		Исключение
			куфиб_ОбщегоНазначения.СообщитьПользователю("Не удалось изменить значение константы ""Дата начала ведения учета ОС по МОЛ"": " + ОписаниеОшибки(),60);
			ОтменитьТранзакцию();
			Возврат ложь;
		КонецПопытки;
		
	ИначеЕсли ВестиАналитическийУчетОС = 2 Тогда
			МенеджерЗаписиДатаНачалаПодразделения.Значение = Дата;
			МенеджерЗаписиДатаНачалаМОЛ.Значение = Дата;
			
		Попытка
			МенеджерЗаписиДатаНачалаПодразделения.Записать();
			МенеджерЗаписиДатаНачалаМОЛ.Записать();
		Исключение
			куфиб_ОбщегоНазначения.СообщитьПользователю("Не удалось изменить значение констант ""Дата начала ведения учета ОС по подразделениям"", ""Дата начала ведения учета ОС по МОЛ"": "+ОписаниеОшибки(),60);
			ОтменитьТранзакцию();
			Возврат ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	Возврат Истина;
	
КонецФункции

