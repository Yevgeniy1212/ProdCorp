
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаНачала  = Параметры.ДатаНачала;	
	Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	
	СтруктурноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеСтруктурноеПодразделениеОрганизации");
	
	СтруктурноеПодразделениеОрганизация = ?(ЗначениеЗаполнено(СтруктурноеПодразделение), СтруктурноеПодразделение, Организация);
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
	
	Элементы.Организация.Видимость                         = НЕ ПоддержкаРаботыСоСтруктурнымиПодразделениями;
	Элементы.СтруктурноеПодразделениеОрганизация.Видимость = ПоддержкаРаботыСоСтруктурнымиПодразделениями;
	Элементы.ГруппаПредупреждениеВводОстатков.Видимость    = СуществуютДокументыВводаОстатков();	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента "СтруктурноеПодразделениеОрганизация"
//
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)	
	
	Если ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда
	#Если ТолстыйКлиентОбычноеПриложение Тогда			
		РаботаСДиалогами.ПриИзмененииЗначенияСтруктурногоПодразделения(глТекущийПользователь, Организация, СтруктурноеПодразделениеОрганизация);
	#КонецЕсли	
	КонецЕсли;
	ПриИзмененииЗначенияОрганизации();
	
КонецПроцедуры // СтруктурноеПодразделениеОрганизацияПриИзменении

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента "СтруктурноеПодразделениеОрганизация"
//
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда			
	РаботаСДиалогами.НачалоВыбораСтруктурногоПодразделения(ЭтаФорма, СтандартнаяОбработка, Организация, СтруктурноеПодразделение);	
	ПриИзмененииЗначенияОрганизации();
	#КонецЕсли
КонецПроцедуры // СтруктурноеПодразделениеОрганизацияНачалоВыбора

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	#Если ТолстыйКлиентОбычноеПриложение Тогда			
	
	НовыйСтруктурноеПодразделениеОрганизация = Неопределено;
	РаботаСДиалогами.АвтоПодборТекстаВПолеСтруктурногоПодразделения(Текст, Организация, НовыйСтруктурноеПодразделениеОрганизация, СтандартнаяОбработка);
	Если НовыйСтруктурноеПодразделениеОрганизация <> Неопределено Тогда
		СтруктурноеПодразделениеОрганизация = НовыйСтруктурноеПодразделениеОрганизация;
		РаботаСДиалогами.ПриИзмененииЗначенияСтруктурногоПодразделения(глТекущийПользователь, Организация, СтруктурноеПодразделениеОрганизация);
		ПриИзмененииЗначенияОрганизации();
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииЗначенияОрганизации();	
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСписокДокументов(Элемент)
	#Если ТолстыйКлиентОбычноеПриложение Тогда			
	Форма = Документы.ВводНачальныхОстатков.ПолучитьФорму("ФормаСписка");
	Форма.Отбор.ОтражатьПоСпециальнымРегистрам.Установить(Истина);
	Форма.Отбор.Проведен.Установить(Истина);
	РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.Запасы");
	Форма.Отбор.РазделУчета.Установить(РазделУчета);
	Форма.РазделУчета = РазделУчета;
	Если ЗначениеЗаполнено(Организация) Тогда
		Форма.Отбор.Организация.Установить(Организация);
		Форма.Организация = Организация;
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Форма.Отбор.СтруктурноеПодразделение.Установить(СтруктурноеПодразделение);
		КонецЕсли;
	КонецЕсли;
	Форма.Открыть();
	#КонецЕсли		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыВводаОстатков(Команда)
	
	Если СуществуютДокументыВводаОстатков(Истина) Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ТекстВопроса = НСтр("ru = 'В конфигурации уже существуют проведенные документы ""Ввод начальных остатков"" от %1,
		                           |выполнившие движения по начальному заполнению регистра накопления ""Товары организаций (БУ)"".
								   |
								   |Создать новые документы?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, НачалоДня(ДатаНачала)-1);
		Обработчик = Новый ОписаниеОповещения("СоздатьДокументыВводаОстатковЗавершение", ЭтаФорма, Неопределено);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки,, КодВозвратаДиалога.Отмена);
	Иначе
		ВвестиОстаткиНаСервере();
		Элементы.ГруппаПредупреждениеВводОстатков.Видимость = СуществуютДокументыВводаОстатков();	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКлючСвязи(Команда)

	ФормаЗапускаОбработчиков = ПолучитьФорму("Обработка.ОбновлениеИнформационнойБазы.Форма.ЗапускПакетаОбработокОбновленияКонфигурации");
	ФормаЗапускаОбработчиков.Открыть();
	
	// Установить строку заполнения ключа связи как текущую.
	ИскомаяСтрока = Неопределено;
	КоллекцияСтрокВерсий = ФормаЗапускаОбработчиков.СписокОбработок.Строки;
	Для Каждого СтрокаВерсии Из КоллекцияСтрокВерсий Цикл
		Если СтрокаВерсии.Представление = "Переход с 2.0.20.12/2.0.21.3" Тогда
			СтрокаВерсии.Пометка = Истина;
		Иначе
			СтрокаВерсии.Пометка = Ложь;
		КонецЕсли;
		КоллекцияСтрокОбработчиков = СтрокаВерсии.Строки;
		Для Каждого СтрокаОбработчика Из КоллекцияСтрокОбработчиков Цикл
			Если СтрокаОбработчика.Наименование = "ЗаполнениеРеквизитаКлючСвязи" Тогда
				СтрокаОбработчика.Пометка = Истина;
				ИскомаяСтрока = СтрокаОбработчика;
			Иначе
				СтрокаОбработчика.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ИскомаяСтрока <> Неопределено Тогда
		ФормаЗапускаОбработчиков.ЭлементыФормы.СписокОбработок.ТекущаяСтрока = ИскомаяСтрока;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ОбновлениеИнформационнойБазы.Форма.ЗаполнениеРеквизитаКлючСвязи",, ФормаЗапускаОбработчиков);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ВвестиОстаткиНаСервере()
	
	РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Запасы;
	
	ДатаВводаОстатков = НачалоДня(ДатаНачала) - 1;
	
		// Состав счетов должен соответсвовать счетам для раздела учета "Запасы" документа ВводНачальныхОстатков
		// см. макет СписокСчетовРазделовУчета в документе
	МассивСчетовБУ = Новый Массив;
	МассивСчетовБУ.Добавить(ПланыСчетов.Типовой.СырьеИМатериалы);                 // 1310
	МассивСчетовБУ.Добавить(ПланыСчетов.Типовой.ГотоваяПродукция);                // 1320
	МассивСчетовБУ.Добавить(ПланыСчетов.Типовой.Товары);                          // 1330
	МассивСчетовБУ.Добавить(ПланыСчетов.Типовой.МатериалыПереданныеВПереработку); // 1351
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата", ДатаВводаОстатков);
	ПараметрыЗаполнения.Вставить("ОтражатьПоСпециальнымРегистрам", Истина);
	ПараметрыЗаполнения.Вставить("ОтражатьВБухгалтерскомУчете", Ложь);
	ПараметрыЗаполнения.Вставить("УчитыватьКПН", Ложь);
	ПараметрыЗаполнения.Вставить("РазделУчета", РазделУчета);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТиповойОстатки.Организация КАК Организация,
	               |	ТиповойОстатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	               |	ВЫРАЗИТЬ(ТиповойОстатки.Субконто1 КАК Справочник.Номенклатура) КАК Номенклатура,
	               |	ЕСТЬNULL(ТиповойОстатки.КоличествоОстаток, 0) КАК Количество
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (&СписокСчетов), &ВидыСубконто, &УсловиеОрганизация) КАК ТиповойОстатки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТиповойОстатки.Субконто1
	               |ИТОГИ
	               |	СУММА(Количество)
	               |ПО
	               |	Организация,
	               |	СтруктурноеПодразделение";
	
	Запрос.УстановитьПараметр("СписокСчетов", МассивСчетовБУ);		   
	
	ГраницаКон = Новый Граница (ДатаВводаОстатков,ВидГраницы.Включая);
	Запрос.УстановитьПараметр("ДатаОстатков", ГраницаКон);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	УсловиеОрганизация = "";	
	Если ЗначениеЗаполнено(Организация) Тогда
		УсловиеОрганизация = "Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			УсловиеОрганизация = УсловиеОрганизация + " И СтруктурноеПодразделение = &СтруктурноеПодразделение";
			Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОрганизация", УсловиеОрганизация);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В бухгалтерском учете нет данных по остаткам ТМЗ для ввода начальных остатков.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");
	
	Пока ВыборкаОрганизация.Следующий() Цикл
			
		ВыборкаСтруктурноеПодразделение = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтруктурноеПодразделение");
		
		Пока ВыборкаСтруктурноеПодразделение.Следующий() Цикл
					
			ПараметрыЗаполнения.Вставить("Организация", ВыборкаСтруктурноеПодразделение.Организация);
			ПараметрыЗаполнения.Вставить("СтруктурноеПодразделение", ВыборкаСтруктурноеПодразделение.СтруктурноеПодразделение);
			
			ДокументОбъект = СоздатьДокументВводаОстатков(ПараметрыЗаполнения);
			
			ВыборкаНоменклатура = ВыборкаСтруктурноеПодразделение.Выбрать();
			ТоварыОрганизаций   = ДокументОбъект.ТоварыОрганизаций;
			
			Пока ВыборкаНоменклатура.Следующий() Цикл
						
				НоваяСтрока = ТоварыОрганизаций.Добавить();
				НоваяСтрока.Номенклатура = ВыборкаНоменклатура.Номенклатура;
				НоваяСтрока.Количество   = ВыборкаНоменклатура.Количество;
						
			КонецЦикла;
			
			Если ТоварыОрганизаций.Количество() <> 0 Тогда
				ЗаписатьДокумент(ДокументОбъект);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 %2: В бухгалтерском учете нет данных по остаткам ТМЗ для ввода начальных остатков.'"),
					ВыборкаСтруктурноеПодразделение.Организация, ВыборкаСтруктурноеПодразделение.СтруктурноеПодразделение);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
					
		КонецЦикла;
				
	КонецЦикла;	
		
КонецПроцедуры

&НаСервере
Функция СоздатьДокументВводаОстатков(ПараметрыЗаполнения)
	
	ДокументОбъект = Документы.ВводНачальныхОстатков.СоздатьДокумент();
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ПараметрыЗаполнения);
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Процедура ЗаписатьДокумент(ДокументОбъект, РежимЗаписи = "Проведение")

	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента[РежимЗаписи]);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Записан документ: %1'"), ДокументОбъект.Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'при записи документа %1  произошла ошибка: %2'"), ДокументОбъект.Ссылка, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЗначенияОрганизации()
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		СтруктурноеПодразделение = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
	Иначе
		СтруктурноеПодразделение = ?(ТипЗнч(СтруктурноеПодразделениеОрганизация) = Тип("СправочникСсылка.ПодразделенияОрганизаций"),
		                             СтруктурноеПодразделениеОрганизация, ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка"));	
	КонецЕсли;
	
	Элементы.ГруппаПредупреждениеВводОстатков.Видимость = СуществуютДокументыВводаОстатков();	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыВводаОстатковЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВвестиОстаткиНаСервере();
		Элементы.ГруппаПредупреждениеВводОстатков.Видимость = СуществуютДокументыВводаОстатков();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СуществуютДокументыВводаОстатков(ОтборПоДатеОстатков = Ложь)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	ВводНачальныхОстатков.Ссылка КАК Документ,
		|	ВводНачальныхОстатков.Организация,
		|	ВводНачальныхОстатков.СтруктурноеПодразделение
		|ИЗ
		|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизацийБУ.Обороты(&ДатаОстатков, &ДатаОстатков, Регистратор, &УсловиеОрганизация) КАК ТоварыОрганизацийОбороты
		|		ПО ВводНачальныхОстатков.Ссылка = ТоварыОрганизацийОбороты.Регистратор";
		
	УсловиеОрганизация = "";	
	Если ЗначениеЗаполнено(Организация) Тогда
		УсловиеОрганизация = "Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			УсловиеОрганизация = УсловиеОрганизация + " И СтруктурноеПодразделение = &СтруктурноеПодразделение";
			Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
		КонецЕсли;
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОрганизация", УсловиеОрганизация);
	
	Если ОтборПоДатеОстатков Тогда
		Запрос.УстановитьПараметр("ДатаОстатков", НачалоДня(ДатаНачала)-1);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаОстатков", "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаДокументы = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДокументы.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

