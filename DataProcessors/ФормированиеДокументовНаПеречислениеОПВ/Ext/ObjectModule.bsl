////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мОтображатьСтруктурныеПодразделения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Формирует запроса на перечисление ОПВ 
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапрос()             

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамПериодРегистрации",		   НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамОрганизация",			   Организация);
	Запрос.УстановитьПараметр("парамВидПлатежа",			   Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	Запрос.УстановитьПараметр("парамКонтрагент",			   Контрагент);
	Запрос.УстановитьПараметр("парамДата",					   КонецДня(ДатаФормирования));
	Запрос.УстановитьПараметр("парамСтруктурнаяЕдиница", 	   ?(ЗначениеЗаполнено(СтруктурноеПодразделение), СтруктурноеПодразделение, Организация));
	Запрос.УстановитьПараметр("парамСтруктурноеПодразделение", СтруктурноеПодразделение);
	
	// Получим неперечисленные суммы
	ТекстЗадолженностьВФонды = "
	|ВЫБРАТЬ
	|	&парамКонтрагент КАК Контрагент,
	|	Контрагенты.ОсновнойБанковскийСчет КАК СчетКонтрагента,
	|   ОПВРасчетыСФондами.ВзносОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами.Остатки(
	|			&парамДата,
	|			Организация = &парамОрганизация И СтруктурнаяЕдиница = &парамСтруктурнаяЕдиница
	|			И ВидПлатежа = &парамВидПлатежа
	|			И МесяцНалоговогоПериода МЕЖДУ НАЧАЛОПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)) КАК ОПВРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО Контрагенты.Ссылка = &парамКонтрагент
	|
	|ГДЕ
	|	ОПВРасчетыСФондами.ВзносОстаток > 0
	|";

	// Составим список документов на перечисление за выбранный месяц исчисления
	ТекстСписокДокументов = "
	|ВЫБРАТЬ
	|	ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка КАК СписочныйДокумент,
	|	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка КАК ПлатежныйДокумент,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка ЕСТЬ NULL
	|			ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.Контрагент
	|			ИНАЧЕ ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка.Контрагент
	|		КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка ЕСТЬ NULL
	|			ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.Контрагент.ОсновнойБанковскийСчет
	|			ИНАЧЕ ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка.СчетКонтрагента
	|		КОНЕЦ КАК СчетКонтрагента,
	|	СУММА(ОПВПеречислениеВФондыПенсионныеВзносы.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК ОПВПеречислениеВФондыПенсионныеВзносы
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
	|		ПО ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ = ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка
	|			И НЕ ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка.ПометкаУдаления
	|
	|ГДЕ
	|	ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.ПериодРегистрации = &парамПериодРегистрации И
	|	ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.Организация = &парамОрганизация И //ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.СтруктурноеПодразделение = &парамСтруктурноеПодразделение И
	|	НЕ ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка,
	|	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка ЕСТЬ NULL
	|			ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.Контрагент
	|			ИНАЧЕ ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка.Контрагент
	|		КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка ЕСТЬ NULL
	|			ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.Контрагент.ОсновнойБанковскийСчет
	|			ИНАЧЕ ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка.СчетКонтрагента
	|		КОНЕЦ
	|";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА (Данные.СписочныйДокумент.Ссылка ЕСТЬ NULL)
	|				ИЛИ (Данные.ПлатежныйДокумент.Ссылка ЕСТЬ NULL)
	|				ИЛИ (НЕ Данные.ПлатежныйДокумент.Проведен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отметка,
	|   Данные.Контрагент КАК Контрагент,
	|   Данные.СчетКонтрагента КАК СчетКонтрагента,
	|	Данные.СписочныйДокумент КАК СписочныйДокумент,
	|	Данные.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	Данные.Сумма КАК Сумма
	|ИЗ
	|   (ВЫБРАТЬ
	|		СписокДокументов.Контрагент КАК Контрагент,
	|		СписокДокументов.СчетКонтрагента КАК СчетКонтрагента,
	|		СписокДокументов.СписочныйДокумент КАК СписочныйДокумент,
	|		СписокДокументов.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|       СписокДокументов.Сумма КАК Сумма
	|	ИЗ
	|		(" + ТекстСписокДокументов + ") КАК СписокДокументов
	|	
	|   ОБЪЕДИНИТЬ ВСЕ
	|
	|   ВЫБРАТЬ
	|		ЗадолженностьВФонды.Контрагент,
	|		ЗадолженностьВФонды.СчетКонтрагента,
	|       null,
	|       null,
	|       ЗадолженностьВФонды.Сумма
	|   ИЗ
	|		(" + ТекстЗадолженностьВФонды + ") КАК ЗадолженностьВФонды
	|	) КАК Данные
	|
	|ГДЕ
	|	Данные.Сумма > 0";

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапрос()	

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ

// Процедура создает документы по пустым строкам табличной части
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
Процедура СоздатьДокументы() Экспорт

	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация);
	КоллекцияКолонокТЧНачисленияНевыходы = Неопределено;
	глТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
#Если Клиент Тогда
	КоличествоОтмеченных = 0;
	Для Каждого СтрокаТаблицы Из Перечисление Цикл
		Если СтрокаТаблицы.Отметка И
			 НЕ ЗначениеЗаполнено(СтрокаТаблицы.СписочныйДокумент) И 
			 НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПлатежныйДокумент) Тогда
			КоличествоОтмеченных = КоличествоОтмеченных + 1;
		КонецЕсли;		
	КонецЦикла;

	ФормаПрогрессора = ПолучитьОбщуюФорму("ФормаИндикатора");
	ФормаПрогрессора.СтрокаСостоянияПрогрессора = "Формируются списочные и платежные документы...";
	ФормаПрогрессора.МаксимальноеЗначение = КоличествоОтмеченных;
	ФормаПрогрессора.ЗначениеИндикатора = 0;
	ФормаПрогрессора.Открыть();
	Индекс = 0;	
#КонецЕсли
	

	Для Каждого СтрокаТаблицы Из Перечисление Цикл

		Если СтрокаТаблицы.Отметка Тогда
#Если Клиент Тогда
		    Индекс = Индекс + 1;
    		ФормаПрогрессора.ЗначениеИндикатора = индекс;
			ФормаПрогрессора.НадписьСостоянияПрогрессора = СтрокаТаблицы.Контрагент.Наименование + " (" + СтрокаТаблицы.СчетКонтрагента + ")";    		
#КонецЕсли			

			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СписочныйДокумент) Тогда
    			// Списочный документ
				СписочныйДокумент = Документы.ОПВПеречислениеВФонды.СоздатьДокумент();
				СписочныйДокумент.ВидОперации = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов;
				СписочныйДокумент.ПериодРегистрации = НачалоМесяца(ПериодРегистрации);
				СписочныйДокумент.Организация	= Организация;
				СписочныйДокумент.СтруктурноеПодразделение = СтруктурноеПодразделение;
				СписочныйДокумент.Ответственный	= глЗначениеПеременной("глТекущийПользователь");
				СписочныйДокумент.ВидПлатежа	= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
				СписочныйДокумент.Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
				СписочныйДокумент.УстановитьНовыйНомер();
				СписочныйДокумент.СпособРасчетаСуммКПеречислению = Перечисления.СпособыРасчетаСуммКПеречислениюОПВ.ПоОстаткамЗадолженностиНаКонецМесяца;
				СписочныйДокумент.Автозаполнение();
				
				СписочныйДокумент.Записать();

				СтрокаТаблицы.СписочныйДокумент	= СписочныйДокумент.Ссылка;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПлатежныйДокумент) Тогда
				// Платежный документ
				ПлатежныйДокумент = Документы.ПлатежноеПоручениеИсходящее.СоздатьДокумент();
				ПлатежныйДокумент.Оплачено = Истина;
				ПлатежныйДокумент.Организация = Организация;
				//ПлатежныйДокумент.СтруктурноеПодразделение = СтруктурноеПодразделение;
				ПлатежныйДокумент.СчетОрганизации = СчетОрганизации;
				ПлатежныйДокумент.Контрагент = СтрокаТаблицы.Контрагент;
				ПлатежныйДокумент.СчетКонтрагента = СтрокаТаблицы.СчетКонтрагента;
				ПлатежныйДокумент.ВидОперации = ВидОперации;
				ПлатежныйДокумент.Ответственный	= глЗначениеПеременной("глТекущийПользователь");
				ПлатежныйДокумент.ДатаВыписки = ОбщегоНазначения.ПолучитьРабочуюДату();
				ПлатежныйДокумент.Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
				ПлатежныйДокумент.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
				ПлатежныйДокумент.БанкПосредник = БанкПосредник;
				ПлатежныйДокумент.СчетБанкаПосредника = СчетБанкаПосредника;
				ПлатежныйДокумент.РННПлательщика = Организация.РНН;
				ПлатежныйДокумент.ТекстПлательщика = СчетОрганизации.ТекстКорреспондента;
				ПлатежныйДокумент.РННПолучателя = СтрокаТаблицы.Контрагент.РНН;
				ПлатежныйДокумент.ТекстПолучателя = СтрокаТаблицы.СчетКонтрагента.ТекстКорреспондента;
				
				СтрокаСписок  = ПлатежныйДокумент.ПеречислениеПенсионныхВзносов.Добавить();
				СтрокаСписок.Документ			 = СтрокаТаблицы.СписочныйДокумент;
				СтрокаСписок.СуммаКПеречислению  = СтрокаТаблицы.СписочныйДокумент.ПенсионныеВзносы.Итог("Сумма");
				ПлатежныйДокумент.СуммаДокумента = СтрокаСписок.СуммаКПеречислению;

				ПлатежныйДокумент.СформироватьНазначениеПлатежа();
				
				УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ПлатежныйДокумент, глТекущийПользователь, ВалютаРеглУчета, ПлатежныйДокумент.РасшифровкаПлатежа);
				ПлатежныйДокумент.ЗаполнитьСчетаУчетаРегл();
				
				ПлатежныйДокумент.Записать();
				
				СтрокаТаблицы.ПлатежныйДокумент	= ПлатежныйДокумент.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
#Если Клиент Тогда
	Если ФормаПрогрессора.Открыта() Тогда
		ФормаПрогрессора.Закрыть();
	КонецЕсли; 
#КонецЕсли	
	
КонецПроцедуры // СоздатьДокументы()


// Процедура проводит отмеченные документы
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
Процедура ПровестиДокументы() Экспорт

#Если Клиент Тогда
	КоличествоОтмеченных = 0;
	Для Каждого СтрокаТаблицы Из Перечисление Цикл
		Если СтрокаТаблицы.Отметка И ЗначениеЗаполнено(СтрокаТаблицы.ПлатежныйДокумент) Тогда
			КоличествоОтмеченных = КоличествоОтмеченных + 1;
		КонецЕсли;		
	КонецЦикла;

	ФормаПрогрессора = ПолучитьОбщуюФорму("ФормаИндикатора");
	ФормаПрогрессора.СтрокаСостоянияПрогрессора = "Проводятся документы...";
	ФормаПрогрессора.МаксимальноеЗначение = КоличествоОтмеченных;
	ФормаПрогрессора.ЗначениеИндикатора = 0;
	ФормаПрогрессора.Открыть();
	Индекс = 0;	
#КонецЕсли

	НомерТекущейСтроки = 0;
	Для Каждого СтрокаТаблицы Из Перечисление Цикл
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		
		Если СтрокаТаблицы.Отметка и ЗначениеЗаполнено(СтрокаТаблицы.ПлатежныйДокумент) Тогда

#Если Клиент Тогда
		    Индекс = Индекс + 1;
    		ФормаПрогрессора.ЗначениеИндикатора = индекс;
			ФормаПрогрессора.НадписьСостоянияПрогрессора = СтрокаТаблицы.Контрагент.Наименование + " (" + СтрокаТаблицы.СчетКонтрагента + ")";    		
#КонецЕсли			
		
			ПлатежныйДокумент = СтрокаТаблицы.ПлатежныйДокумент.ПолучитьОбъект();
			Если ПлатежныйДокумент.ПометкаУдаления Тогда
				ПлатежныйДокумент.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			Попытка
				ПлатежныйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Продолжить;
			КонецПопытки;
			СтрокаТаблицы.Отметка = Не СтрокаТаблицы.Отметка;
		КонецЕсли;
	КонецЦикла;

#Если Клиент Тогда
	Если ФормаПрогрессора.Открыта() Тогда
		ФормаПрогрессора.Закрыть();
	КонецЕсли; 
#КонецЕсли	

КонецПроцедуры // ПровестиДокументы()


// Заполняет т.ч. обработки документами
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Булево - Истина, если успешно выполнено заполнение, иначе Ложь
//
Функция Автозаполнение() Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо указать организацию!");
		Возврат Ложь;
	КонецЕсли;
	
	РезультатЗапроса = СформироватьЗапрос();

	Перечисление.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецФункции
 
#Если Клиент Тогда

// Печатает документы ППИ по отмеченным строкам
//
// Параметры
//  нет
//
Процедура ПечатьДокументов() Экспорт

    СписокНапечатанныхДокументов = Новый СписокЗначений;
	ТабДокументРеестры			 = Новый ТабличныйДокумент;
	ТабДокументППИ				 = Новый ТабличныйДокумент;
	КоличествоДокументов		 = 0;
	
	Для Каждого СтрокаТаблицы Из Перечисление Цикл
		
		Если СтрокаТаблицы.Отметка 
			 И ЗначениеЗаполнено(СтрокаТаблицы.ПлатежныйДокумент) 
			 И СписокНапечатанныхДокументов.НайтиПоЗначению(СтрокаТаблицы.ПлатежныйДокумент) = Неопределено Тогда
			
			КоличествоДокументов = КоличествоДокументов + 1;
			ПлатежныйДокумент 	 = СтрокаТаблицы.ПлатежныйДокумент.ПолучитьОбъект();
			
			ВремТабДокумент		 = ПлатежныйДокумент.ПечатьРеестра();
			ТабДокументРеестры.Вывести(ВремТабДокумент);
			
			// отчеркнем очередной документ
			ТабДокументРеестры.ВывестиГоризонтальныйРазделительСтраниц();
			
			ВремТабДокумент		 = ПлатежныйДокумент.ПечатьПлатежногоПоручения();
			ТабДокументППИ.Вывести(ВремТабДокумент);
			
			// отчеркнем очередной документ
			ТабДокументППИ.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Запомним, что такой документ уже напечатали (если встретиться еще)
			СписокНапечатанныхДокументов.Добавить(СтрокаТаблицы.ПлатежныйДокумент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоДокументов > 0 Тогда
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокументРеестры, , , "Реестры к платежным поручениям");
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокументППИ, , , "Платежные поручения");
	КонецЕсли;

КонецПроцедуры // ПечатьДокументов()

#КонецЕсли

мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
