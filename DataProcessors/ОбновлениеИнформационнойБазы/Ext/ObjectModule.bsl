#Если Клиент Тогда
	
	Перем мСчетаЗП;
	
	Перем мСчетаНеИспользоватьВПроводках;
	
	//////////////////////////////////////////////////////////////////////////////
	// ПЕРЕМЕННЫЕ МОДУЛЯ
	
	Перем ОрганизацияПервоначальногоЗаполнения;
	
	//////////////////////////////////////////////////////////////////////////////
	// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	
	// Функция для проверки возможности открытия форм - обработчиков обновления
	//
	Функция ПолучитьРазрешениеНаОткрытиеФормы() Экспорт
		
		Если РольДоступна("ПолныеПрава") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Предупреждение("Форму обработки может открывать только пользователь с ролью ""Полные права""");
		
		Возврат Ложь;
		
	КонецФункции // ПолучитьРазрешениеНаОткрытиеФормы()
	
	
	// Процедура выполняет обновление информационной базы до требуемой версии.
	// Предназначена для вызова при начале работы системы в случае, если значение
	// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
	//
	// Параметры:
	//  Нет.
	//
	Процедура ВыполнитьОбновление() Экспорт
		
		НеобходимоПроверятьОтключениеЗащитыОтОпасныхДействий = Ложь;
		
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ТекущаяВерсия = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения, ".");
		//смотрим, какая ситема используется 8.3 или 8.2
		Если Число(ТекущаяВерсия[0]) = 8 И ((Число(ТекущаяВерсия[1]) = 3 И ((Число(ТекущаяВерсия[2]) = 9 И Число(ТекущаяВерсия[3]) >= 2033) ИЛИ Число(ТекущаяВерсия[2]) > 9)) ИЛИ Число(ТекущаяВерсия[1]) > 3) Тогда //8.3
			НеобходимоПроверятьОтключениеЗащитыОтОпасныхДействий = Истина;
		КонецЕсли;  
		
		Если НеобходимоПроверятьОтключениеЗащитыОтОпасныхДействий И ПользователиИнформационнойБазы.ТекущийПользователь().ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях Тогда
			Форма = Обработки.общ_ПроверкаВерсийПлатформыИНастроек.ПолучитьФорму();
			Форма.ПоказыватьПредупреждениеОПерезапуске = Истина;
			Результат = Форма.ОткрытьМодально();
			ЗавершитьРаботуСистемы(Ложь);
			Возврат;
		КонецЕсли;
		
		
		// Проверка легальности получения обновления.
		Если НЕ ПроверитьЛегальностьПолученияОбновления(Константы.НомерВерсииКонфигурации.Получить()) Тогда
			Возврат;    
		КонецЕсли; 
		
		// Подготовка к выводу формы описания обновлений.
		
		ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь;
		
		ФормаОписаниеОбновлений    = ПолучитьФорму("ОписаниеОбновлений");
		МакетОписаниеОбновлений    = ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений);
		ДокументОписаниеОбновлений = ФормаОписаниеОбновлений.ЭлементыФормы.ДокументОписаниеОбновлений;
		ДокументОписаниеОбновлений.Очистить();
		
		// Обновление информационной базы.
		// Последовательно вызываются функции для обновления с соответствующей версии.
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		
		СохранитьПредыдущуюВерсиюИБ(ТекущаяВерсияИБ);
		
		//Вызов функций заполнения данных для пустой информационной базы
		Если ТекущаяВерсияИБ = "" Тогда
			
			Если РольДоступна("ПолныеПрава") Тогда
				ФормаСтартовогоПомощника = Обработки.СтартовыйПомощник.ПолучитьФорму("Форма");
				ФормаСтартовогоПомощника.ПервыйЗапуск = Истина;
				ФормаСтартовогоПомощника.СпособОтображенияОкна = ВариантСпособаОтображенияОкна.Максимизированное;
				ФормаСтартовогоПомощника.Открыть();
				Если ФормаСтартовогоПомощника.Открыта() Тогда
					ФормаСтартовогоПомощника.ЭлементыФормы.НадписьПервыйЗапуск.Видимость = Истина;
					ФормаСтартовогоПомощника.ЭлементыФормы.НадписьПервыйЗапуск.Значение = 
					"Обнаружен первый запуск информационной базы.
					|Выполняется начальное заполнение, это может занять 1-2 минуты.
					|Пожалуйста, подождите...";
					ФормаСтартовогоПомощника.ЭлементыФормы.НадписьВперед.Доступность = Ложь;
				КонецЕсли;
			Иначе
				Сообщить("Обнаружен первый запуск информационной базы. Выполняется начальное заполнение", СтатусСообщения.Информация);
			КонецЕсли;
			
			НачатьТранзакцию();
			
			ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			
			// Заполнение справочника "Регламентированные отчеты"
			Сообщить("Обновление регламентированных отчетов.");		
			ЗаполнитьСписокРегламентированныхОтчетов(Истина);
			
			
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(Метаданные.Версия); // после заполнения пустой ИБ установим последний номер версии
			
			ЗафиксироватьТранзакцию();
			
			Если Константы.НомерВерсииКонфигурации.Получить() = Метаданные.Версия Тогда
				Если ФормаСтартовогоПомощника.Открыта() Тогда
					ФормаСтартовогоПомощника.ЭлементыФормы.НадписьПервыйЗапуск.Значение = 
					"Начальное заполнение информационной базы выполнено успешно. 
					|Для продолжения работы нажмите кнопку ""Далее"".";
					ФормаСтартовогоПомощника.ЭлементыФормы.НадписьВперед.Доступность = Истина;
				Иначе
					Сообщить("Начальное заполнение информационной базы выполнено успешно.", СтатусСообщения.Информация);
					Если НЕ РольДоступна("ПолныеПрава") Тогда
						Сообщить("Недостаточно прав для запуска стартового помощника.", СтатусСообщения.Информация);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;    
			
			#Если Клиент Тогда
				Если ДокументОписаниеОбновлений.ВысотаТаблицы > 0 Тогда
					ФормаОписаниеОбновлений.Открыть();
				КонецЕсли;
			#КонецЕсли
			
			Возврат;
			
		КонецЕсли;
		
		Если НЕ общ_ЗащитаКлиентСервер.ВозможностьОбновления() Тогда
			ОписаниеОшибки = "Не удалось выполнить обновление до версии " + общ_ПроцедурыМеханизмаЗащиты.ВерсияМетаданных();// + ": подписка на платную поддержку неактивна.";
			Сообщить(ОписаниеОшибки, СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ = "2.7.1.78";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.6.13"
			ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.6.14"
			ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.1")И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			ЭтоНеПодчиненныйУзелРИБ = НЕ (ПланыОбмена.ГлавныйУзел() <> Неопределено);
			
			
			Если ЭтоНеПодчиненныйУзелРИБ Тогда
				Если Константы.фин_ВестиУчетОстаточныхФинансовыхПоказателей.Получить() = Истина Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	фин_ФинансовыеПоказатели.Ссылка
					|ИЗ
					|	Справочник.фин_ФинансовыеПоказатели КАК фин_ФинансовыеПоказатели
					|ГДЕ
					|	фин_ФинансовыеПоказатели.ВидПоказателя = &ВидПоказателя
					|	И НЕ фин_ФинансовыеПоказатели.ПометкаУдаления";
					
					Запрос.УстановитьПараметр("ВидПоказателя", Перечисления.фин_ВидыФинансовыхПоказателей.УдалитьОстаточный);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = НЕ РезультатЗапроса.Пустой();
					
				Иначе
					ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; // при необходимости устаналиваем данный параметр в Истина
				КонецЕсли;
			Иначе 
				ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			КонецЕсли;
			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_КалендарноеПланированиеБюджетногоПроцесса.ВидЗадачи
			|ИЗ
			|	РегистрСведений.фин_КалендарноеПланированиеБюджетногоПроцесса КАК фин_КалендарноеПланированиеБюджетногоПроцесса";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Константы.фин_ВестиКалендарноеПланированиеБюджетногоПроцесса.Установить(НЕ РезультатЗапроса.Пустой());
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				Сообщить("-----------------------");
				Сообщить("Обновление регистра сведений Календарное планирование бюджетного процесса");
				ОбновлениеРегистраКалендарноеПланированиеБюджетногоПроцесса();
				
				Сообщить("-----------------------");
				Сообщить("Заполнение регистра сведений Исполнители задач бюджетного процесса");
				ЗаполнениеРегистраИсполнителейЗадачБюджетирования();
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_КалендарноеПланированиеБюджетногоПроцесса.ВидЗадачи
			|ИЗ
			|	РегистрСведений.фин_КалендарноеПланированиеБюджетногоПроцесса КАК фин_КалендарноеПланированиеБюджетногоПроцесса
			|ГДЕ
			|	фин_КалендарноеПланированиеБюджетногоПроцесса.ЭтапБюджетногоПроцесса <> ЗНАЧЕНИЕ(Справочник.фин_ЭтапыБюджетногоПроцесса.ПустаяСсылка)";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Константы.фин_СтруктурироватьБюджетныйПроцессПоЭтапам.Установить(НЕ РезультатЗапроса.Пустой());
			
			// заполнение регистра сведений фин_ОтветственныеЛица
			
			Сообщить("-----------------------");
			Сообщить("Заполнение регистра сведений Ответственные лица (упр. учет)");
			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОтветственныеЛица.Период,
			|	ОтветственныеЛица.СтруктурнаяЕдиница,
			|	ОтветственныеЛица.ФизическоеЛицо
			|ИЗ
			|	РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица
			|ГДЕ
			|	ОтветственныеЛица.СтруктурнаяЕдиница ССЫЛКА Справочник.Подразделения";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			НаборЗаписей = РегистрыСведений.фин_ОтветственныеЛица.СоздатьНаборЗаписей();
			НаборЗаписей.Прочитать();
			КопияНабор = НаборЗаписей.Выгрузить();
			
			СтруктураПоиска = Новый Структура("Период,СтруктурнаяЕдиница,ФизическоеЛицо");
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска,ВыборкаДетальныеЗаписи);
				Если КопияНабор.НайтиСтроки(СтруктураПоиска).Количество()=0 Тогда
					НоваяЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись,ВыборкаДетальныеЗаписи);
				КонецЕсли;
			КонецЦикла;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить("Не удалось обновить данные регистра сведений Ответственные лица (упр. учет)");
			КонецПопытки;
			
			Константы.фин_РежимИнтеграцииСУчетнойСистемой.Установить(Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана);
			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_НастройкаЗависимостейМеждуФинансовымиПоказателями.Ссылка
			|ИЗ
			|	Документ.фин_НастройкаЗависимостейМеждуФинансовымиПоказателями КАК фин_НастройкаЗависимостейМеждуФинансовымиПоказателями
			|ГДЕ
			|	НЕ фин_НастройкаЗависимостейМеждуФинансовымиПоказателями.ПометкаУдаления";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Константы.фин_ИспользоватьЗависимостиФинансовыхПоказателей.Установить(НЕ РезультатЗапроса.Пустой());
			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_МоделиРаспределенияБюджетныхДанных.Ссылка
			|ИЗ
			|	Справочник.фин_МоделиРаспределенияБюджетныхДанных КАК фин_МоделиРаспределенияБюджетныхДанных
			|ГДЕ
			|	НЕ фин_МоделиРаспределенияБюджетныхДанных.ПометкаУдаления";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Константы.фин_ИспользоватьМоделиРаспределения.Установить(НЕ РезультатЗапроса.Пустой());
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_ПроизводственныеМодели.Ссылка
			|ИЗ
			|	Справочник.фин_ПроизводственныеМодели КАК фин_ПроизводственныеМодели
			|ГДЕ
			|	НЕ фин_ПроизводственныеМодели.ПометкаУдаления";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Константы.фин_ИспользоватьПроизводственныеМодели.Установить(НЕ РезультатЗапроса.Пустой());
			
			
			Сообщить("-----------------------");
			Сообщить("Обработка данных регистра сведений Сформированные бюджеты");
			
			ОбновитьРегистрСформированныеБюджеты();
			
			Сообщить("-----------------------");
			Сообщить("Обработка данных регистра накопления Мониторинг корректировок");
			
			ОбновитьРегистрКорректировок();
			
			
			Сообщить("-----------------------");
			Сообщить("Обработка данных регистра накопления Мониторинг причин непринятия строк бюджетов");
			
			ОбновитьРегистрОтклонений();
			
			Сообщить("-----------------------");
			Сообщить("Обработка справочника Бюджеты");
			
			ОбновитьБюджеты();
			
			Сообщить("-----------------------");
			Сообщить("Обработка справочника Сценарии планирования");
			
			ОбновитьСценарии();
			
			Сообщить("-----------------------");
			Сообщить("Обработка справочника Профили изменения планов по периодам");
			
			ОбновитьПрофили();
			
			Сообщить("-----------------------");
			Сообщить("Обработка справочника Настройки заполнения плана движения денежных средств");
			
			ОбновитьНастройкиОтборовВСправочникеНастройкиЗаполненияПланаДДС();
			
			Сообщить("-----------------------");
			Сообщить("Обработка документов Заказ поставщику");
			
			ОбработкаОбновленияПодразделенийВЗаказахПоставщикам();
			
			Сообщить("-----------------------");
			Сообщить("Обработка документов Заявка МТС");
			
			ОбработкаОбновленияОбъектыРемонтаВЗаявкахМТС();
			
			Сообщить("-----------------------");
			Сообщить("Обработка документов Регламент формирования бюджетов");
			
			ОбработкаРегламента();
			
			Сообщить("-----------------------");
			Сообщить("Обработка справочников Условия выполнения операций по документу, Условия выполнения операций по строкам документа");
			
			ОбработкаУсловийВыполненияОпераций();
			
			ОбработкаПредставленияУсловийВыполненияОпераций();
			
			Сообщить("-----------------------");
			Сообщить("Обработка справочника Источники данных для расчетов бюджетирования");
			
			ОбработкаИсточниковДанныхБюджетирования();
			ОбновитьПериодичностьВИсточникахДанных();
			
			Сообщить("-----------------------");
			Сообщить("Обработка документов Регистрация договоров");
			
			ОбработкаДокументовРегистрацииДоговора();
			
			Сообщить("-----------------------");
			Сообщить("Обработка справочника Графики оплаты по договорам");
			
			ОбработкаСправочникаГрафиков();
			
			ПериодичностьРегламента = Константы.фин_ПериодичностьФормированияБюджетногоРегламента.Получить();
			Если ЗначениеЗаполнено(ПериодичностьРегламента) Тогда
				ИмяЭлемента = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ПериодичностьРегламента);
				Константы.фин_ПериодичностьФормированияБюджетногоРегламента.Установить(Перечисления.фин_Периодичность[ИмяЭлемента]);
			Иначе
				Константы.фин_ПериодичностьФормированияБюджетногоРегламента.Установить(Перечисления.фин_Периодичность.ПустаяСсылка());
			КонецЕсли;
			
			
			#Если Клиент Тогда
				
				ВывестиОписаниеИзменений("271", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
				
			#КонецЕсли
			
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			Сообщить("-----------------------");
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ = "2.7.2.5";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.1"
			ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.2")И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			
			ЭтоНеПодчиненныйУзелРИБ = НЕ (ПланыОбмена.ГлавныйУзел() <> Неопределено);
			
			
			Если ЭтоНеПодчиненныйУзелРИБ Тогда 
				ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Истина; // при необходимости устаналиваем данный параметр в Истина
			Иначе 
				ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			КонецЕсли;
			
			
			
			#Если Клиент Тогда
				
				ВывестиОписаниеИзменений("272", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
				
			#КонецЕсли
			
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			Сообщить("-----------------------");
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				
			КонецЕсли;
			
		КонецЕсли;
		
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ = "2.7.3.4";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.2"
			ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.3") И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			
			#Если Клиент Тогда
				
				ВывестиОписаниеИзменений("273", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
				
			#КонецЕсли
			
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			Сообщить("-----------------------");
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ = "2.7.4.23";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.3"
			ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.4") И ТекущаяВерсияИБ <> НоваяВерсияИБ Тогда
			
			
			
			ЭтоНеПодчиненныйУзелРИБ = НЕ (ПланыОбмена.ГлавныйУзел() <> Неопределено);
			
			Если ЭтоНеПодчиненныйУзелРИБ Тогда
				ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Истина; // при необходимости устаналиваем данный параметр в Истина
			Иначе 
				ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление("2.7.4", ДополнительныеПараметры);
			
			
			#Если Клиент Тогда
				
				ВывестиОписаниеИзменений("274", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
				
			#КонецЕсли
			
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			Сообщить("-----------------------");
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		
		ПоследующиеВерсии = Новый Массив;
		ПоследующиеВерсии.Добавить("2.7.5.9");
		ПоследующиеВерсии.Добавить("2.7.5.10");
		
		НоваяВерсияИБ   = "2.7.5.8";	
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.4" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.5")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ И ПоследующиеВерсии.Найти(ТекущаяВерсияИБ)=Неопределено Тогда
			
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			ЭтоНеПодчиненныйУзелРИБ = НЕ (ПланыОбмена.ГлавныйУзел() <> Неопределено);
			
			
			Если ЭтоНеПодчиненныйУзелРИБ Тогда 
				ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; // при необходимости устаналиваем данный параметр в Истина
			Иначе 
				ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			КонецЕсли;
			
			Если ТекущаяВерсияИБ<>"2.7.5.4" И ТекущаяВерсияИБ<>"2.7.5.5" И ТекущаяВерсияИБ<>"2.7.5.6" И ТекущаяВерсияИБ<>"2.7.5.7" Тогда
				Если ТекущаяВерсияИБ<>"2.7.5.3" Тогда
					ДополнительныеПараметры = Новый Структура();
					ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
					ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
					общ_ЗащитаКлиентСервер.ВыполнитьОбновление("2.7.5", ДополнительныеПараметры);
				КонецЕсли;
				
				Сообщить("-----------------------");
				Сообщить("Обработка регистра сведений ""Расчет распределения косвенных расходов""");
				
				ОбработкаРегистраРасчетРаспределенияКосвенныхРасходов_КорректировкаИзмерений();
				
				Сообщить("Обработка регистра сведений ""Расчет распределения косвенных расходов"" завершена.");
				
				// перенос значений реквизита УсловияОплаты справочника ДоговорыКонтрагентов
				Сообщить("-----------------------");
				Сообщить("Обработка справочника ""Договоры контрагентов""");
				Запрос = Новый Запрос;
				Запрос.Текст =  "ВЫБРАТЬ
				|	ДоговорыКонтрагентов.Ссылка,
				|	ДоговорыКонтрагентов.Представление
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.УдалитьУсловияОплаты <> """"";
				
				Результат = Запрос.Выполнить().Выбрать();
				Пока Результат.Следующий() Цикл
					
					СпрОбъект = Результат.Ссылка.ПолучитьОбъект();
					СпрОбъект.УсловияОплаты = СпрОбъект.УдалитьУсловияОплаты;
					
					Попытка
						СпрОбъект.ОбменДанными.Загрузка = Истина;
						СпрОбъект.Записать();
					Исключение				
						Сообщить("    ошибка при записи элемента справочника: "  + Результат.Представление + ОписаниеОшибки(), СтатусСообщения.Важное);
					КонецПопытки;
					
				КонецЦикла;
				
				Сообщить("Обработка справочника ""Договоры контрагентов"" завершена.");
			КонецЕсли;
			
			
			Если ТекущаяВерсияИБ<>"2.7.5.6" И ТекущаяВерсияИБ<>"2.7.5.7" Тогда
				
				Сообщить("-----------------------");
				Сообщить("Обработка справочника ""Профили изменения планов по измерениям""");
				Запрос = Новый Запрос;
				Запрос.Текст =  "ВЫБРАТЬ
				|	фин_ПрофилиИзмененияПлановПоИзмерениям.Ссылка,
				|	фин_ПрофилиИзмененияПлановПоИзмерениям.Представление,
				|	фин_ПрофилиИзмененияПлановПоИзмерениям.ВидРаспределения
				|ИЗ
				|	Справочник.фин_ПрофилиИзмененияПлановПоИзмерениям КАК фин_ПрофилиИзмененияПлановПоИзмерениям
				|ГДЕ
				|	фин_ПрофилиИзмененияПлановПоИзмерениям.СпособУказанияБазы = ЗНАЧЕНИЕ(Перечисление.фин_СпособыУказанияБазы.ПустаяСсылка)";
				
				Результат = Запрос.Выполнить().Выбрать();
				Пока Результат.Следующий() Цикл
					
					СпрОбъект = Результат.Ссылка.ПолучитьОбъект();
					СпрОбъект.СпособУказанияБазы = ?(Результат.ВидРаспределения=Перечисления.фин_ВидыРаспределенийПоИзмерениямБюджетирования.ПоПоказателюИсточника,Перечисления.фин_СпособыУказанияБазы.Доля,Перечисления.фин_СпособыУказанияБазы.Процент);
					
					Попытка
						СпрОбъект.ОбменДанными.Загрузка = Истина;
						СпрОбъект.Записать();
					Исключение				
						Сообщить("    ошибка при записи элемента справочника: "  + Результат.Представление + ОписаниеОшибки(), СтатусСообщения.Важное);
					КонецПопытки;
					
				КонецЦикла;
				
				Сообщить("Обработка справочника ""Профили изменения планов по измерениям"" завершена.");
			КонецЕсли;
			
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("275", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли; 
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		ПоследующиеВерсии = Новый Массив;
		ПоследующиеВерсии.Добавить("2.7.5.10");
		ПоследующиеВерсии.Добавить("2.7.5.11");
		
		НоваяВерсияИБ   = "2.7.5.9";	
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.4" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.5")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ И ПоследующиеВерсии.Найти(ТекущаяВерсияИБ)=Неопределено  Тогда
			
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			ЭтоНеПодчиненныйУзелРИБ = НЕ (ПланыОбмена.ГлавныйУзел() <> Неопределено);
			
			
			Если ЭтоНеПодчиненныйУзелРИБ Тогда 
				ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; // при необходимости устаналиваем данный параметр в Истина
			Иначе 
				ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			КонецЕсли;
			
			
			// Установка вычетов по доходам
			Сообщить("-----------------------");
			Сообщить("Обновление сведений о вычетах по частично облагаемым доходам");
			
			НаборЗаписей = РегистрыСведений.ВычетыПоДоходам.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Период.Установить(Дата("20170101"), Истина);
			
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20170101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 24459, 0);
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20170101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 8*24459);
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20170101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 0.5*24459, 0);
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить("При записи данных регистра сведений ""Вычеты по доходам"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("2759", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли; 
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		ПоследующиеВерсии = Новый Массив;
		ПоследующиеВерсии.Добавить("2.7.5.11");
		
		НоваяВерсияИБ   = "2.7.5.10";	
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.4" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.5")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ И ПоследующиеВерсии.Найти(ТекущаяВерсияИБ)=Неопределено  Тогда
			
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			ЭтоНеПодчиненныйУзелРИБ = НЕ (ПланыОбмена.ГлавныйУзел() <> Неопределено);
			
			Сообщить("-----------------------");
			Сообщить("Обновление прав пользователей");
			
			Для Каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
				ДобавлятьРоль = Ложь;
				Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.ТолькоПросмотр) ИЛИ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ТолькоПросмотрЗарплата) Тогда
					ДобавлятьРоль = Истина;
					Прервать;
				КонецЕсли;					
				Если ДобавлятьРоль Тогда
					ПользовательИБ.Роли.Добавить(Метаданные.Роли.ТолькоПросмотрБазовыеФункции);
					Попытка
						ПользовательИБ.Записать();
					Исключение
						СообщитьПользователю("Не удалось обновить роли пользователя "+ПользовательИБ.Имя);
					КонецПопытки;
				КонецЕсли;
				ДобавлятьРольБухгалтер = Ложь;
				Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.БухгалтерСДоступомКДаннымПоЗаработнойПлате) Тогда
					ДобавлятьРольБухгалтер = Истина;
					Прервать;
				КонецЕсли;					
				Если ДобавлятьРольБухгалтер Тогда
					ПользовательИБ.Роли.Добавить(Метаданные.Роли.Бухгалтер);
					Попытка
						ПользовательИБ.Записать();
					Исключение
						СообщитьПользователю("Не удалось обновить роли пользователя "+ПользовательИБ.Имя);
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			Если НеобходимоПроверятьОтключениеЗащитыОтОпасныхДействий Тогда
				Сообщить("-----------------------");
				Сообщить("Отключение у пользователей настройки ""Защита от опасных действий""");
				
				Для Каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
					Если ПользовательИБ<>ПользователиИнформационнойБазы.ТекущийПользователь() И ПользовательИБ.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях Тогда
						Попытка
							ПользовательИБ.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях=Ложь;
							Попытка
								ПользовательИБ.Записать();
							Исключение
								СообщитьПользователю("Не удалось обновить параметры пользователя "+ПользовательИБ.Имя);
							КонецПопытки;
						Исключение
							СообщитьПользователю("Не удалось обновить параметры пользователя "+ПользовательИБ.Имя);
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27510", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли; 
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.5.11";	
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.4" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.5")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			ЭтоНеПодчиненныйУзелРИБ = НЕ (ПланыОбмена.ГлавныйУзел() <> Неопределено);
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27510", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли; 
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.6.4";	
		Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.5" 
			ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.6"
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0) Тогда
			
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			ЭтоНеПодчиненныйУзелРИБ = НЕ (ПланыОбмена.ГлавныйУзел() <> Неопределено);
			//////////////////////////////////////////////////////////////////
			// НАЧАЛО ЗУП 2.0.16
			
			//--------------------------------------------------------------------------------
			// Обработка данных для механизма исчисления и учета o	ООСМС и ВОСМС 
			//--------------------------------------------------------------------------------
			
			//Сообщить("-----------------------");
			//Сообщить("Заполнение новых реквизитов справочника ""Налоги, сборы и отчисления"".");
			
			//СправочникОбъект = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.ПолучитьОбъект();
			//СправочникОбъект.КодБК 							= "";
			//СправочникОбъект.КодНазначенияПлатежа 			= "122";
			//СправочникОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС;
			//СправочникОбъект.НазначениеПлатежа 				= "Взносы на обязательное социальное медицинское страхование ";
			//СправочникОбъект.Записать();
			//
			//СправочникОбъект = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.ПолучитьОбъект();
			//СправочникОбъект.КодБК 							= "";
			//СправочникОбъект.КодНазначенияПлатежа 			= "121";
			//СправочникОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС;
			//СправочникОбъект.НазначениеПлатежа 				= "Отчисления на обязательное социальное медицинское страхование ";
			//СправочникОбъект.Записать();
			
			Если ЭтоНеПодчиненныйУзелРИБ Тогда
				//--------------------------------------------------------------------------------
				// Обработка данных для механизма исчисления и учета o	ООСМС и ВОСМС 
				//--------------------------------------------------------------------------------
				
				Сообщить("-----------------------");
				Сообщить("Заполнение регистра сведений ""Учет налогообложения по видам доходов"".");
				
				ДоходыОтНалоговогоАгента = Справочники.ВидыДоходов.ДоходыОтНалоговогоАгента.ПолучитьОбъект();
				ДоходыОтНалоговогоАгента.Описание = "Доходы от налогового агента";
				ДоходыОтНалоговогоАгента.Записать();
				
				// Регистр сведений "Учет налогообложения по видавм доходов"
				НаборЗаписей = РегистрыСведений.УчетНалогообложенияПоВидамДоходов.СоздатьНаборЗаписей();
				НаборЗаписей.Прочитать();
				
				ПроцедурыОбновленияИнформационнойБазы.ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "19000101", ДоходыОтНалоговогоАгента.Ссылка, Истина);
				ПроцедурыОбновленияИнформационнойБазы.ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "20170701", ПредопределенноеЗначение("Справочник.ВидыДоходов.ДоходыОтРаботодателя"), Истина, Истина, Истина, Истина, Истина,Истина);
				ПроцедурыОбновленияИнформационнойБазы.ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "20170701", ДоходыОтНалоговогоАгента.Ссылка, Истина,,,,,,Истина);
				ПроцедурыОбновленияИнформационнойБазы.ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "20190101", ПредопределенноеЗначение("Справочник.ВидыДоходов.ДоходыОтРаботодателя"), Истина, Истина, Истина, Истина, Истина,Истина,Истина);
				
				Попытка
					НаборЗаписей.ОбменДанными.Загрузка = Истина;
					НаборЗаписей.Записать();
				Исключение
					Сообщить("При записи данных регистра сведений ""Учет налогообложения по видам доходов"" произошли ошибки: " + Символы.ПС + 
					ОписаниеОшибки());
				КонецПопытки;
				
				//--------------------------------------------------------------------------------
				// Заполнение ставок ИПН для ООСМС и ВОСМС 
				//--------------------------------------------------------------------------------
				
				Сообщить("-----------------------");
				Сообщить("Заполнение сведений о ставках ИПН по видам доходов"); 
				
				НаборЗаписейСведенияОСтавкахИПН = РегистрыСведений.СведенияОСтавкахИПН.СоздатьНаборЗаписей();
				НаборЗаписейСведенияОСтавкахИПН.Прочитать();
				ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
				ВидыДоходов = Справочники.ВидыДоходов;
				ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейСведенияОСтавкахИПН, '20090101', ПустаяОрганизация, ВидыДоходов.ДоходыОтНалоговогоАгента, 		  10, 15);
				ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейСведенияОСтавкахИПН, '20110101', ПустаяОрганизация, ВидыДоходов.ДоходыОтНалоговогоАгента, 		  10, 20);
				
				Попытка
					НаборЗаписейСведенияОСтавкахИПН.ОбменДанными.Загрузка = Истина;
					НаборЗаписейСведенияОСтавкахИПН.Записать();
				Исключение
					Сообщить("При записи данных регистра сведений ""Сведения о ставках ИПН"" произошли ошибки: " + Символы.ПС + 
					ОписаниеОшибки());
				КонецПопытки;
				
				
				// Заполнение рекизитов "Облагается ООСМС", "Облагается ВОСМС" в ПВР
				
				Сообщить("-----------------------");
				Сообщить("Заполнение новых реквизитов планов видов расчета.");
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ОсновныеНачисленияОрганизаций.Ссылка,
				|	ОсновныеНачисленияОрганизаций.ВидДохода,
				|	ОсновныеНачисленияОрганизаций.СпособРасчета
				|ИЗ
				|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
				|ГДЕ
				|	(ОсновныеНачисленияОрганизаций.ОблагаетсяВОСМС = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)
				|			ИЛИ ОсновныеНачисленияОрганизаций.ОблагаетсяВОСМС = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка))
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ДополнительныеНачисленияОрганизаций.Ссылка,
				|	ДополнительныеНачисленияОрганизаций.ВидДохода,
				|	ДополнительныеНачисленияОрганизаций.СпособРасчета
				|ИЗ
				|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
				|ГДЕ
				|	(ДополнительныеНачисленияОрганизаций.ОблагаетсяООСМС = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)
				|			ИЛИ ДополнительныеНачисленияОрганизаций.ОблагаетсяВОСМС = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка))";
				
				Выборка = Запрос.Выполнить().Выбрать();
				НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
				ОблагаетсяЦеликом	= Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом;
				Пока Выборка.Следующий() Цикл
					ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
					Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой Тогда
						
						ВидРасчетаОбъект.ОблагаетсяВОСМС = ОблагаетсяЦеликом;			
						ВидРасчетаОбъект.ОблагаетсяООСМС = НеОблагаетсяЦеликом;
						ВидРасчетаОбъект.ВидДохода = Справочники.ВидыДоходов.ДоходыОтНалоговогоАгента;
						
					ИначеЕсли Выборка.ВидДохода = Справочники.ВидыДоходов.ДоходыОтРаботодателя
						И Выборка.Ссылка = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие Тогда 
						
						ВидРасчетаОбъект.ОблагаетсяВОСМС = НеОблагаетсяЦеликом;			
						ВидРасчетаОбъект.ОблагаетсяООСМС = НеОблагаетсяЦеликом;
						
					ИначеЕсли Выборка.ВидДохода = Справочники.ВидыДоходов.ДоходыОтРаботодателя
						И НЕ (Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма
						ИЛИ Выборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСуммаДляПочасовогоОтклонения) Тогда
						
						ВидРасчетаОбъект.ОблагаетсяВОСМС = ОблагаетсяЦеликом;			
						ВидРасчетаОбъект.ОблагаетсяООСМС = ОблагаетсяЦеликом;
					Иначе
						ВидРасчетаОбъект.ОблагаетсяВОСМС = НеОблагаетсяЦеликом;			
						ВидРасчетаОбъект.ОблагаетсяООСМС = НеОблагаетсяЦеликом;
					КонецЕсли; 
					
					Попытка
						ВидРасчетаОбъект.Записать();
					Исключение
						Сообщить("При записи вида расчета """ + ВидРасчетаОбъект.Наименование + """ произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
					КонецПопытки;
					
				КонецЦикла;
				
				
				// Установим ставки ОСМС
				Сообщить("-----------------------");
				Сообщить("Установка ставок ОСМС.");
				
				//ОСМС с 2017 года
				// ДоходыОтРаботодателя
				НаборЗаписей = РегистрыСведений.СведенияОСтавкахОСМС.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ВидДохода.Установить(Справочники.ВидыДоходов.ДоходыОтРаботодателя, Истина);
				НаборЗаписей.Прочитать();
				ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
				
				Если НаборЗаписей.Количество() = 0 Тогда
					
					ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20170701', Справочники.ВидыДоходов.ДоходыОтРаботодателя,     0, 1);
					ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20180101', Справочники.ВидыДоходов.ДоходыОтРаботодателя,     0, 1.5);
					ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20190101', Справочники.ВидыДоходов.ДоходыОтРаботодателя,     1, 1.5);
					ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20200101', Справочники.ВидыДоходов.ДоходыОтРаботодателя,     2, 2);
					ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20220101', Справочники.ВидыДоходов.ДоходыОтРаботодателя,     2, 3);
					Попытка
						НаборЗаписей.Записать();
					Исключение
						Сообщить("При записи данных регистра сведений ""Сведения о ставках ОСМС"" произошли ошибки: " + Символы.ПС + ОписаниеОшибки());
					КонецПопытки;
					
				КонецЕсли;
				
				НаборЗаписей.Отбор.ВидДохода.Установить(Справочники.ВидыДоходов.ДоходыОтНалоговогоАгента, Истина);
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() = 0 Тогда
					
					// ДоходыОтНалоговогоАгента
					ПроцедурыОбновленияИнформационнойБазы.ДобавитьСведенияОСтавкахОСМС(НаборЗаписей, '20170701', Справочники.ВидыДоходов.ДоходыОтНалоговогоАгента, 5, 0);
					
					Попытка
						НаборЗаписей.Записать();
					Исключение
						Сообщить("При записи данных регистра сведений ""Сведения о ставках ОСМС"" произошли ошибки: " + Символы.ПС + ОписаниеОшибки());
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;
			
			//Заполнение видом операции ПеречислениеОбязательныхСоциальныхОтчислений для документов СОПеречислениеВФонды
			
			Сообщить("-----------------------");
			Сообщить("Заполнение видов операций ведомостей на перечисление и возврат социального страхования.");
			
			// СО перечисление в фонды
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СОПеречислениеВФонды.Ссылка,
			|	СОПеречислениеВФонды.Представление
			|ИЗ
			|	Документ.СОПеречислениеВФонды КАК СОПеречислениеВФонды
			|ГДЕ
			|	СОПеречислениеВФонды.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПустаяСсылка)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			ОперацияПеречислениеСО = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений;
			
			Пока Выборка.Следующий() Цикл
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.ВидОперации = ОперацияПеречислениеСО;
				Попытка
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					Сообщить("При записи документа """ + Выборка.Представление + """ произошли ошибки: " + Символы.ПС + ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;
			
			// СО возврат взносов
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СОВозвратОтчислений.Ссылка,
			|	СОВозвратОтчислений.Представление
			|ИЗ
			|	Документ.СОВозвратОтчислений КАК СОВозвратОтчислений
			|ГДЕ
			|	СОВозвратОтчислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОВозвратОтчислений.ПустаяСсылка)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			ОперацияВозвратСО = Перечисления.ВидыОперацийСОВозвратОтчислений.ВозвратОбязательныхСоциальныхОтчислений;
			
			Пока Выборка.Следующий() Цикл
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.ВидОперации = ОперацияВозвратСО;
				Попытка
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					Сообщить("При записи документа """ + Выборка.Представление + """ произошли ошибки: " + Символы.ПС + ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;
			
			Если ЭтоНеПодчиненныйУзелРИБ Тогда
				
				// Установим размер коэффициента ставки рефенансирования для расчета пени ОСМС
				Сообщить("-----------------------");
				Сообщить("Установка размера коэффициента ставки рефинансирования для ОСМС.");
				
				НаборЗаписей = РегистрыСведений.КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.СоздатьНаборЗаписей();
				
				НаборЗаписей.Отбор.Организация.Использование	= Истина;
				НаборЗаписей.Отбор.Организация.ВидСравнения	 	= ВидСравнения.Равно;
				НаборЗаписей.Отбор.Организация.Значение	 		= Справочники.Организации.ПустаяСсылка();
				
				НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
				НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
				НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
				
				Движение 				= НаборЗаписей.Добавить();
				// Свойства
				Движение.Период 		= '20170701'; // 01.07.2017 Закон "Об обязательном медицинском страховании в РК"
				// Измерения
				Движение.Организация	= Справочники.Организации.ПустаяСсылка();
				Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
				// Ресурсы
				Движение.Коэффициент	= 2.5;
				Попытка
					НаборЗаписей.Записать();
				Исключение
					Сообщить("При записи данных регистра сведений ""Коэффициенты ставки рефинансирования НБ для расчета пени"" произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
				КонецПопытки;
				
				НаборЗаписей = РегистрыСведений.КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.СоздатьНаборЗаписей();
				
				НаборЗаписей.Отбор.Организация.Использование	= Истина;
				НаборЗаписей.Отбор.Организация.ВидСравнения	 	= ВидСравнения.Равно;
				НаборЗаписей.Отбор.Организация.Значение	 		= Справочники.Организации.ПустаяСсылка();
				
				НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
				НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
				НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
				
				Движение 				= НаборЗаписей.Добавить();
				// Свойства
				Движение.Период 		= '20170701'; // 01.07.2017 Закон "Об обязательном медицинском страховании в РК"
				// Измерения
				Движение.Организация	= Справочники.Организации.ПустаяСсылка();
				Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
				// Ресурсы
				Движение.Коэффициент	= 2.5;
				Попытка
					НаборЗаписей.Записать();
				Исключение
					Сообщить("При записи данных регистра сведений ""Коэффициенты ставки рефинансирования НБ для расчета пени"" произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
				КонецПопытки;
				
				// Установка значений ставки рефенансирования
				
				// с 1 апреля 2017 ставка рефинансирования НБ = 11%, с 6 июня - 10,5%
				Сообщить("-----------------------");
				Сообщить("Установка значений ставки рефинансирования НацБанка Казахстана: с 1 апреля 2017 - 11%, с 6 июня 2017 - 10,5%");
				
				НаборЗаписей = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
				
				ТЗНабор = НаборЗаписей.ВыгрузитьКолонки();
				
				НоваяСтрока = ТЗНабор.Добавить();
				НоваяСтрока.Период = '2017-04-01';
				НоваяСтрока.Размер = 11;
				
				НоваяСтрока = ТЗНабор.Добавить();
				НоваяСтрока.Период = '2017-06-06';
				НоваяСтрока.Размер = 10.5;
				
				Для Каждого СтрокаТЗ Из ТЗНабор Цикл
					
					НаборЗаписей.Очистить();
					НаборЗаписей.Отбор.Период.Установить(СтрокаТЗ.Период);
					
					ЗаписьНабора = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьНабора, СтрокаТЗ);
					ЗаписьНабора.Активность = Истина;
					
					Попытка
						НаборЗаписей.Записать();
					Исключение
						Сообщить("При установке ставки на дату " +СтрокаТЗ.Период+ " произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
					КонецПопытки;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Удаление отчета РегламентированныйОтчетФорма210	
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	РегламентированныеОтчеты.Ссылка,
			|	РегламентированныеОтчеты.ИсточникОтчета
			|ИЗ
			|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
			|ГДЕ
			|	РегламентированныеОтчеты.ИсточникОтчета В(&СписокИсточниковОтчета)";
			
			СписокИсточников =  Новый СписокЗначений;
			СписокИсточников.Добавить("РегламентированныйОтчет210Форма");
			
			Запрос.УстановитьПараметр("СписокИсточниковОтчета", СписокИсточников);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			МассивСсылок = Новый Массив(1);
			
			Пока Выборка.Следующий() Цикл
				
				МассивСсылок[0] = Выборка.Ссылка;
				ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
				Если ТаблицаСсылок.Количество() = 0 Тогда
					ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
					Попытка					
						ОтчетОбъект.Удалить();
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
				Иначе
					Сообщить("Регламентированный отчет " +  Выборка.Ссылка.Код + " " + """" + Выборка.Ссылка.Наименование + """" + " - не может быть удален, т.к. имеются ссылки в информационной базе" );
				КонецЕсли;	
				
			КонецЦикла;
			
			// Обновление справочника "Регламентированные отчеты"
			ПроцедурыОбновленияИнформационнойБазы.ОбновитьРегламентированныеОтчеты();
			
			// Переименовываем ссылку удаленного отчета "210" 
			// в документах "Регламентированный отчет" на вновь добавленные,
			// используемые до 2017 года.
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	РегламентированныйОтчет.Ссылка,
			|	РегламентированныйОтчет.ИсточникОтчета
			|ИЗ
			|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
			|ГДЕ
			|	РегламентированныйОтчет.ИсточникОтчета В(&СписокИсточниковОтчета)";
			
			СписокИсточников =  Новый СписокЗначений;
			СписокИсточников.Добавить("РегламентированныйОтчет210Форма");
			
			Запрос.УстановитьПараметр("СписокИсточниковОтчета", СписокИсточников);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Источник = Выборка.ИсточникОтчета;
				ОтчетОбъект.ИсточникОтчета = Источник + "До2017";
				Попытка
					ОтчетОбъект.ОбменДанными.Загрузка = Истина;
					ОтчетОбъект.Записать();
				Исключение				
					Сообщить(" При записи документа ""Регламентированный отчет"" """ + Выборка.Ссылка.Номер + """" + Выборка.Ссылка.НаименованиеОтчета + """" + " произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
				КонецПопытки;
				
			КонецЦикла;
			
			Если ЭтоНеПодчиненныйУзелРИБ Тогда
				Сообщить("-----------------------");
				Сообщить("Установка сроков пречисления взносов и отчислений ОСМС.");
				
				НаборЗаписей = РегистрыСведений.СрокиПеречисленияНалоговСборовОтчислений.СоздатьНаборЗаписей();
				
				НаборЗаписей.Отбор.Организация.Использование	= Истина;
				НаборЗаписей.Отбор.Организация.ВидСравнения	 	= ВидСравнения.Равно;
				НаборЗаписей.Отбор.Организация.Значение	 		= Справочники.Организации.ПустаяСсылка();
				
				НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
				НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
				НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
				
				ДлинаСуток = 86400;
				ТекМесяц = '20170701';	
				ДатаОкончания = НачалоМесяца(КонецГода(ОбщегоНазначения.ПолучитьРабочуюДату()));
				
				Пока ТекМесяц <= ДатаОкончания Цикл
					
					// до 25 числа месяца, следующего за месяцем исчисления
					Движение = НаборЗаписей.Добавить();
					// Измерения
					Движение.Месяц 			= ТекМесяц;
					Движение.Организация 	= Справочники.Организации.ПустаяСсылка();
					Движение.ВидНалога	 	= Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
					// Ресурсы
					Движение.ПорядокОпределенияСрокаПеречисления	= Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода;
					Движение.СрокПеречисления						= ДобавитьМесяц(ТекМесяц, 1) + (25-1) * ДлинаСуток;
					//Иначе - до июля 2017 ВОСМС вообще не исчислялись
					
					ТекМесяц = ДобавитьМесяц(ТекМесяц, 1);
				КонецЦикла;
				
				Попытка
					НаборЗаписей.Записать();
				Исключение				
					Сообщить("При записи данных регистра сведений ""Сроки перечисления налогов, взносов и отчислений"" произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
				КонецПопытки;
				
				НаборЗаписей = РегистрыСведений.СрокиПеречисленияНалоговСборовОтчислений.СоздатьНаборЗаписей();
				
				НаборЗаписей.Отбор.Организация.Использование	= Истина;
				НаборЗаписей.Отбор.Организация.ВидСравнения	 	= ВидСравнения.Равно;
				НаборЗаписей.Отбор.Организация.Значение	 		= Справочники.Организации.ПустаяСсылка();
				
				НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
				НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
				НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
				
				ДлинаСуток = 86400;
				ТекМесяц = '20170701';	
				ДатаОкончания = НачалоМесяца(КонецГода(ОбщегоНазначения.ПолучитьРабочуюДату()));
				
				Пока ТекМесяц <= ДатаОкончания Цикл
					
					// до 25 числа месяца, следующего за месяцем исчисления
					Движение = НаборЗаписей.Добавить();
					// Измерения
					Движение.Месяц 			= ТекМесяц;
					Движение.Организация 	= Справочники.Организации.ПустаяСсылка();
					Движение.ВидНалога	 	= Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
					// Ресурсы
					Движение.ПорядокОпределенияСрокаПеречисления	= Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода;
					Движение.СрокПеречисления						= ДобавитьМесяц(ТекМесяц, 1) + (25-1) * ДлинаСуток;
					//Иначе - до июля 2017 ООСМС вообще не исчислялись
					
					ТекМесяц = ДобавитьМесяц(ТекМесяц, 1);
				КонецЦикла;
				
				Попытка
					НаборЗаписей.Записать();
				Исключение				
					Сообщить("При записи данных регистра сведений ""Сроки перечисления налогов, взносов и отчислений"" произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
				КонецПопытки;
				
				ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РасчетныеЛисткиОрганизаций",        "РасчетныеЛисткиОрганизаций");
				ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("СтруктураЗадолженностиОрганизацийПоВОСМС",    "СтруктураЗадолженностиОрганизацийПоВОСМС");
				ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("СтруктураЗадолженностиОрганизацийПоООСМС",    "СтруктураЗадолженностиОрганизацийПоООСМС");
				
				Сообщить("-----------------------");
				Сообщить("Перенумерация элементов справочника ""Статьи затрат"""); 
				ПроцедурыОбновленияИнформационнойБазы.УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("СтатьиЗатрат");
				
				Сообщить("-----------------------");
				Сообщить("Перенумерация элементов справочника ""Налоги, сборы и отчисления"""); 
				ПроцедурыОбновленияИнформационнойБазы.УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("НалогиСборыОтчисления");
			КонецЕсли;
			// КОНЕЦ 2.0.16
			//////////////////////////////////////////////////////////////////
			
			
			Если ЭтоНеПодчиненныйУзелРИБ Тогда
				Сообщить("-----------------------");		
				Сообщить("Установка счета НУ для счета ""(3212) Обязательства по взносам ОСМС"" и ""(3213) Обязательства по отчисления ОСМС"" плана счетов ""Типовой"".");
				
				Попытка
					ОбязательстваПоВзносамОСМС = ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС.ПолучитьОбъект();
					ОбязательстваПоВзносамОСМС.СчетНУ = ПланыСчетов.Налоговый.ОбязательстваПоВзносамОСМС;
					ОбязательстваПоВзносамОСМС.Записать();
					
					ОбязательстваПоОтчислениямОСМС = ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС.ПолучитьОбъект();
					ОбязательстваПоОтчислениямОСМС.СчетНУ = ПланыСчетов.Налоговый.ОбязательстваПоОтчислениямОСМС;
					ОбязательстваПоОтчислениямОСМС.Записать();
				Исключение
					Сообщить("При записи счета ""Обязательства по пенсионным отчислениям"" плана счетов ""Типовой"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
				КонецПопытки;
				
				// определим установлена ли аналитика "Работники организации" на счетах зар.платы
				БУ = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда.ПолучитьОбъект(); // счет 3350
				ВестиУчетПоСотрудникам = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций, "ВидСубконто") = Неопределено, Ложь, Истина);
				
				Если ВестиУчетПоСотрудникам Тогда 
					
					ИмяПланаСчетов 				 = "Типовой";
					НеобходимоУстановитьСубконто = Истина;
					
					СчетБУ = ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС; 
					НеобходимоУстановитьСубконто = ?(СчетБУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций, "ВидСубконто") = Неопределено, Истина, Ложь);
					
					Если НеобходимоУстановитьСубконто Тогда 
						ПрименитьПараметрыСубконтоРаботникиОрганизации(СчетБУ, ИмяПланаСчетов, ВестиУчетПоСотрудникам, Ложь);
					КонецЕсли;
					
					СчетБУ = ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС; 
					НеобходимоУстановитьСубконто = ?(СчетБУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций, "ВидСубконто") = Неопределено, Истина, Ложь);
					
					Если НеобходимоУстановитьСубконто Тогда 
						ПрименитьПараметрыСубконтоРаботникиОрганизации(СчетБУ, ИмяПланаСчетов, ВестиУчетПоСотрудникам, Ложь);
					КонецЕсли;
					
					ИмяПланаСчетов 				 = "Налоговый";
					НеобходимоУстановитьСубконто = Истина;
					
					СчетНУ = ПланыСчетов.Налоговый.ОбязательстваПоВзносамОСМС; 
					НеобходимоУстановитьСубконто = ?(СчетНУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций, "ВидСубконто") = Неопределено, Истина, Ложь);
					
					Если НеобходимоУстановитьСубконто Тогда 
						ПрименитьПараметрыСубконтоРаботникиОрганизации(СчетНУ, ИмяПланаСчетов, ВестиУчетПоСотрудникам, Ложь);
					КонецЕсли;
					
					СчетНУ = ПланыСчетов.Налоговый.ОбязательстваПоОтчислениямОСМС; 
					НеобходимоУстановитьСубконто = ?(СчетНУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций, "ВидСубконто") = Неопределено, Истина, Ложь);
					
					Если НеобходимоУстановитьСубконто Тогда 
						ПрименитьПараметрыСубконтоРаботникиОрганизации(СчетНУ, ИмяПланаСчетов, ВестиУчетПоСотрудникам, Ложь);
					КонецЕсли;
					
				КонецЕсли;
				
				Сообщить("-----------------------");
				Сообщить("Установка запрета использования счета 3210.");
				
				СчетГруппа = ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию_.ПолучитьОбъект();
				СчетГруппа.ЗапретитьИспользоватьВПроводках = Истина;
				
				Попытка
					СчетГруппа.Записать();
				Исключение
					Сообщить("Операция не выполнена, произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
					ТекстСообщения = НСтр("ru='Операция не выполнена'");
				КонецПопытки;
				
				СчетГруппа = ПланыСчетов.Налоговый.ОбязательстваПоСоциальномуСтрахованию_.ПолучитьОбъект();
				СчетГруппа.ЗапретитьИспользоватьВПроводках = Истина;
				
				Попытка
					СчетГруппа.Записать();
				Исключение
					Сообщить("Операция не выполнена, произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
				КонецПопытки;
				
				Сообщить("-----------------------");
				Сообщить("Заполнение новых реквизитов справочника ""Налоги, сборы и отчисления"".");
				
				СправочникОбъект = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.ПолучитьОбъект();
				СправочникОбъект.КодБК 								= "";
				СправочникОбъект.КодНазначенияПлатежа				= "122";
				СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ	= ПланыСчетов.Типовой.ОбязательстваПоВзносамОСМС;
				СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ 	= ПланыСчетов.Налоговый.ОбязательстваПоВзносамОСМС;
				СправочникОбъект.НазначениеПлатежа 					= "Взносы на обязательное социальное медицинское страхование за ";
				СправочникОбъект.Записать();
				
				СправочникОбъект = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.ПолучитьОбъект();
				СправочникОбъект.КодБК 								= "";
				СправочникОбъект.КодНазначенияПлатежа 				= "121";
				СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ 	= ПланыСчетов.Типовой.ОбязательстваПоОтчислениямОСМС;
				СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ 	= ПланыСчетов.Налоговый.ОбязательстваПоОтчислениямОСМС;
				СправочникОбъект.НазначениеПлатежа 					= "Отчисления на обязательное социальное медицинское страхование за ";
				СправочникОбъект.Записать();
			КонецЕсли;
			
			Сообщить("-----------------------");
			Сообщить("Заполнение новых реквизитов справочника ""Корреспонденции счетов"".");
			
			Макет = Справочники.КорреспонденцииСчетов.ПолучитьМакет("Макет");
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	КорреспонденцииСчетов.Код
			|ИЗ
			|	Справочник.КорреспонденцииСчетов КАК КорреспонденцииСчетов";
			ВсеКорреспонденции = Запрос.Выполнить().Выгрузить();
			
			НомерСтроки=1;
			
			Пока Истина Цикл
				
				Номер = Макет.область(НомерСтроки,1).Текст;
				Если НЕ ЗначениеЗаполнено(Номер) Тогда
					//Т.е. если прочли весь макет
					Прервать;
				КонецЕсли;
				
				НайденСуществующий = ВсеКорреспонденции.Найти(формат(Число(Номер),"ЧЦ=9; ЧВН=; ЧГ="));
				Если Не ЗначениеЗаполнено(НайденСуществующий) Тогда
					НовыйСпр = Справочники.КорреспонденцииСчетов.СоздатьЭлемент();
					НовыйСпр.СчетДт 			  = ПланыСчетов.Типовой.НайтиПоКоду(Макет.область(НомерСтроки,3).Текст);
					НовыйСпр.СчетКт 			  = ПланыСчетов.Типовой.НайтиПоКоду(Макет.область(НомерСтроки,4).Текст);
					НовыйСпр.Содержание 		  = Макет.область(НомерСтроки,2).Текст;
					НовыйСпр.ТипДокумента 		  = Макет.область(НомерСтроки,5).Текст;
					НовыйСпр.ВидОперацииДокумента = Макет.область(НомерСтроки,6).Текст;
					НовыйСпр.ЗакладкаДокумента 	  = Макет.область(НомерСтроки,7).Текст;
					НовыйСпр.Меню 				  = Макет.область(НомерСтроки,8).Текст;
					НовыйСпр.Код 				  = формат(Число(Номер),"ЧЦ=9; ЧВН=; ЧГ=");
					НовыйСпр.Записать();
				Иначе
					СуществующийЭлемент = Справочники.КорреспонденцииСчетов.НайтиПоКоду(НайденСуществующий.Код);
					Если ЗначениеЗаполнено(СуществующийЭлемент)
						И (СуществующийЭлемент.Содержание <> Макет.область(НомерСтроки,2).Текст
						ИЛИ СуществующийЭлемент.СчетДт <> ПланыСчетов.Типовой.НайтиПоКоду(Макет.область(НомерСтроки,3).Текст) 
						ИЛИ СуществующийЭлемент.СчетКт <> ПланыСчетов.Типовой.НайтиПоКоду(Макет.область(НомерСтроки,4).Текст) 
						ИЛИ СуществующийЭлемент.ТипДокумента <> Макет.область(НомерСтроки,5).Текст 
						ИЛИ СуществующийЭлемент.ВидОперацииДокумента <> Макет.область(НомерСтроки,6).Текст
						ИЛИ СуществующийЭлемент.ЗакладкаДокумента <> Макет.область(НомерСтроки,7).Текст) Тогда
						Попытка
							СуществующийОбъект = СуществующийЭлемент.ПолучитьОбъект();
							СуществующийОбъект.Содержание = Макет.область(НомерСтроки,2).Текст;
							СуществующийОбъект.СчетДт = ПланыСчетов.Типовой.НайтиПоКоду(Макет.область(НомерСтроки,3).Текст);
							СуществующийОбъект.СчетКт = ПланыСчетов.Типовой.НайтиПоКоду(Макет.область(НомерСтроки,4).Текст);
							СуществующийОбъект.ТипДокумента = Макет.область(НомерСтроки,5).Текст;
							СуществующийОбъект.ВидОперацииДокумента = Макет.область(НомерСтроки,6).Текст;
							СуществующийОбъект.ЗакладкаДокумента = Макет.область(НомерСтроки,7).Текст;
							СуществующийОбъект.Записать();
						Исключение
							Сообщить("Не удалось обновить ""Справочник ""Корреспонденции счетов"""". Возникли ошибки:" + Символы.ПС + ОписаниеОшибки());
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				НомерСтроки = НомерСтроки+1;
				
			КонецЦикла;
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("2764", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли; 
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.6.5";	
		Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.5" 
			ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.6"
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0) Тогда
			
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			ЭтоНеПодчиненныйУзелРИБ = НЕ (ПланыОбмена.ГлавныйУзел() <> Неопределено);
			
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = НЕ ЭтоНеПодчиненныйУзелРИБ;
			//////////////////////////////////////////////////////////////////
			// НАЧАЛО ЗУП 2.0.16
			
			Сообщить("-----------------------");
			Сообщить("Перенумерация элементов справочника ""Виды доходов"""); 
			ПроцедурыОбновленияИнформационнойБазы.УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("ВидыДоходов");
			
			// Замена обработки МТ-102 на встроенную
			
			ОбработкаФормированияSWIFTФайла = Справочники.ВнешниеОбработки.ОбработкаФормированияSWIFTФайла.ПолучитьОбъект();
			ОбработкаФормированияSWIFTФайла.ВнешнийОбъектИспользовать = Ложь;
			Попытка
				ОбработкаФормированияSWIFTФайла.ОбменДанными.Загрузка = Истина;
				ОбработкаФормированияSWIFTФайла.Записать();
			Исключение
				Сообщить("При записи объекта ""Обработка формирования SWIFT файла"" справочника ""Внешние обработки"" произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
			
			
			// КОНЕЦ 2.0.16
			//////////////////////////////////////////////////////////////////
			
			
			ЭтоНеПодчиненныйУзелРИБ = НЕ (ПланыОбмена.ГлавныйУзел() <> Неопределено);
			
			////////////////////////////////////////////////////////////////////////////////
			// Начало
			
			// Замена обработки МТ-102 на встроенную
			
			Если ЭтоНеПодчиненныйУзелРИБ Тогда
				ОбработкаФормированияSWIFTФайла = Справочники.ВнешниеОбработки.ОбработкаФормированияSWIFTФайла.ПолучитьОбъект();
				ОбработкаФормированияSWIFTФайла.ВнешнийОбъектИспользовать = Ложь;
				Попытка
					ОбработкаФормированияSWIFTФайла.ОбменДанными.Загрузка = Истина;
					ОбработкаФормированияSWIFTФайла.Записать();
				Исключение
					Сообщить("При записи объекта ""Обработка формирования SWIFT файла"" справочника ""Внешние обработки"" произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("2765", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли; 
		
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.6.6";	
		Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.5" 
			ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.6"
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0) Тогда
			
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("2766", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли; 
		
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.6.7";	
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.5" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.6")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("2767", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли; 
		
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.7.2";	
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.6" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.7")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			
			ЭтоНеПодчиненныйУзелРИБ = НЕ (ПланыОбмена.ГлавныйУзел() <> Неопределено);
			
			////////////////////////////////////////////////////////////////////////////////
			// Начало
			
			Если ЭтоНеПодчиненныйУзелРИБ Тогда
				
			КонецЕсли;
			
			Сообщить("""Обработка ""Обмен электронными счетами-фактурами"""" справочника ""Внешние обработки""");
			
			ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную();
			
			Сообщить("Обработка справочника ""Внешние обработки"" завершена.");
			Сообщить("-----------------------");
			
			//Обновление регистра сведений "Товары с пониженной ставкой пошлины (Перечень изъятий)"		
			Сообщить("-----------------------");
			Сообщить("Обновление регистра сведений ""Товары с пониженной ставкой пошлины (Перечень изъятий)""");
			ОбновитьРегистрТоварыСПониженнойСтавкойПошлин();		
			Сообщить("-----------------------");
			
			
			//Обновление реквизитов справочника НомераГТД
			Сообщить("-----------------------");
			Сообщить("Обновление справочника ""Источники происхождения""");
			ЗаполнитьПризнакПроисхождения();
			ЗаполнитьНомерСтрокиГТД();
			Сообщить("-----------------------");
			
			// с 22 августа 2017 ставка рефинансирования НБ = 10.25%
			Сообщить("-----------------------");
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 22 августа 2017 - 10.25%");
			
			НаборЗаписей = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
			
			ДатаСведений = '2017-08-22';
			НаборЗаписей.Отбор.Период.Установить(ДатаСведений);
			
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.Период = ДатаСведений;
			ЗаписьНабора.Размер = 10.25;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить("   при записи произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
			//Обновление регистра сведений "Параметры методов ИС ЭСФ"		
			Сообщить("-----------------------");
			Сообщить("Обновление регистра сведений """"Параметры методов ИС ЭСФ""""");
			ЭСФСервер.ЗаполнитьДатыНачалаСинхронизации();
			Сообщить("-----------------------");
			
			
			ЭСФСервер.ОбновитьВерсиюИСЭСФ();
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Истина; 
			
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("277", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли; 
		
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.8.11";	
		Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.7" 
			ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.8"
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0) Тогда
			
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; // Истина; 
			
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("278", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли; 
		
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.8.12";	
		Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.7" 
			ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.8"
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0) Тогда
			
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			Сообщить("""Обработка ""Обмен электронными счетами-фактурами"""" справочника ""Внешние обработки""");
			
			ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную();
			
			Сообщить("Обработка справочника ""Внешние обработки"" завершена.");
			
			// Обновление справочника "Регламентированные отчеты"
			ОбновитьРегламентированныеОтчеты();
			
			
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; // Истина; 
			
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27812", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли; 
		
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.8.14";	
		Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.7" 
			ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.8"
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0) Тогда
			
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			
			
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; // Истина; 
			
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27814", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли; 
		
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.8.15";	
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.7" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.8")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			
			// Обновление справочника "Регламентированные отчеты"
			ОбновитьРегламентированныеОтчеты();
			
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; // Истина; 
			
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27815", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли; 
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.9.2";	
		Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.8" 
			ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.9"
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0) Тогда
			
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; // Истина; 
			
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("279", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли; 
		
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.9.3";	
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.8" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.9")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; // Истина; 
			
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("2793", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли; 
		
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.10.1";	
		Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.9" 
			ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.10"
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0) Тогда
			
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; // Истина; 
			
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("2710", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли; 
		
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.10.2";	
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.9" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.10")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; // Истина; 
			
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27102", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли; 
		
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.11.2";	
		Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.10" 
			ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.11"
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0) Тогда
			
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; // Истина; 
			
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("2711", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли; 
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.11.3";	
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.10" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.11")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
	
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("2711", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецЕсли; 
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.12.2";
		
		Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.11" 
			ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.12"
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0) Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("2712", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
					// Если удалось зафиксировать транзакцию, то
					// сообщение об успешном обновлении информационной базы.
					Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				КонецЕсли;	

		КонецЕсли;

		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.12.3";
		
		Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.11" 
			ИЛИ (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.12"
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0) Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27123", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
					// Если удалось зафиксировать транзакцию, то
					// сообщение об успешном обновлении информационной базы.
					Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				КонецЕсли;	

		КонецЕсли;

		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.12.4";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.11" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.12")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27124", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
					// Если удалось зафиксировать транзакцию, то
					// сообщение об успешном обновлении информационной базы.
					Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				КонецЕсли;	

		КонецЕсли;

		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.13.1";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.12" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.13")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсияИБ, ТекущаяВерсияИБ) > 0 Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27131", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
					// Если удалось зафиксировать транзакцию, то
					// сообщение об успешном обновлении информационной базы.
					Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				КонецЕсли;	

		КонецЕсли;

		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.13.2";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.12" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.13")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
			// Обновление справочника "Регламентированные отчеты"
			ОбновитьРегламентированныеОтчеты();
			
			Сообщить("""Обработка ""Обмен электронными счетами-фактурами"""" справочника ""Внешние обработки""");
			
			ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную();
			
			Сообщить("Обработка справочника ""Внешние обработки"" завершена.");
			Сообщить("-----------------------");
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27132", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
					// Если удалось зафиксировать транзакцию, то
					// сообщение об успешном обновлении информационной базы.
					Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				КонецЕсли;	

		КонецЕсли;

		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.14.1";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.13" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.14")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
			// Обновление справочника "Регламентированные отчеты"
			ОбновитьРегламентированныеОтчеты();
			
			Сообщить("""Обработка ""Обмен электронными счетами-фактурами"""" справочника ""Внешние обработки""");
			
			ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную();
			
			Сообщить("Обработка справочника ""Внешние обработки"" завершена.");
			Сообщить("-----------------------");
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27141", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
					// Если удалось зафиксировать транзакцию, то
					// сообщение об успешном обновлении информационной базы.
					Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				КонецЕсли;	

		КонецЕсли;


		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.15.2";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.14" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.15")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27151", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
					// Если удалось зафиксировать транзакцию, то
					// сообщение об успешном обновлении информационной базы.
					Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				КонецЕсли;	

		КонецЕсли;


		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.16.2";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.15" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.16")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("2716", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
					// Если удалось зафиксировать транзакцию, то
					// сообщение об успешном обновлении информационной базы.
					Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				КонецЕсли;	

		КонецЕсли;


		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.16.3";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.15" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.16")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27163", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
					// Если удалось зафиксировать транзакцию, то
					// сообщение об успешном обновлении информационной базы.
					Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				КонецЕсли;	

		КонецЕсли;


		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.17.2";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.16" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.17")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("2717", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
					// Если удалось зафиксировать транзакцию, то
					// сообщение об успешном обновлении информационной базы.
					Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				КонецЕсли;	

		КонецЕсли;

		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.17.4";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.16" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.17")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			// Обновление справочника "Регламентированные отчеты"
			ОбновитьРегламентированныеОтчеты();
			
			Сообщить("Обработка справочника ""Внешние Обработки"".");
			
			ОбработкаВыгрузкиВXMLЗаявленияОВвозеТоваров = Справочники.ВнешниеОбработки.ОбработкаВыгрузкиВXMLЗаявленияОВвозеТоваров.ПолучитьОбъект();
			ОбработкаВыгрузкиВXMLЗаявленияОВвозеТоваров.ВнешнийОбъектИспользовать = Ложь;
			Попытка
				ОбработкаВыгрузкиВXMLЗаявленияОВвозеТоваров.ОбменДанными.Загрузка = Истина;
				ОбработкаВыгрузкиВXMLЗаявленияОВвозеТоваров.Записать();
			Исключение
				Сообщить(" при записи элемента справочника Внешние обработки произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
			ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную();
			
			Сообщить("Обработка справочника ""Внешние обработки"" завершена.");
			Сообщить("-----------------------");
	        Сообщить("-----------------------");
	        
	        Сообщить("Обработка предопределенных элементов справочника ""Сохраненные настройки""");

	   		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РегистрНалоговогоУчетаПоИПНиСН",	 "РегистрНалоговогоУчетаПоИПНиСН");

	        Сообщить("-----------------------");
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27173", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
					// Если удалось зафиксировать транзакцию, то
					// сообщение об успешном обновлении информационной базы.
					Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				КонецЕсли;	

		КонецЕсли;

		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.17.5";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.16" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.17")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27175", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
					// Если удалось зафиксировать транзакцию, то
					// сообщение об успешном обновлении информационной базы.
					Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				КонецЕсли;	

		КонецЕсли;

		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.18.1";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.17" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.18")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
				
			// с 25 января 2022 ставка рефинансирования НБ = 10.25%
			Сообщить("-----------------------");
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 25 января 2022 - 10.25%");
			
			НаборЗаписей = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
			
			ДатаСведений = '2022-01-25';
			НаборЗаписей.Отбор.Период.Установить(ДатаСведений);
			
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.Период = ДатаСведений;
			ЗаписьНабора.Размер = 10.25;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить("   при записи произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
		
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("2718", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
					// Если удалось зафиксировать транзакцию, то
					// сообщение об успешном обновлении информационной базы.
					Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				КонецЕсли;	

		КонецЕсли;


		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.18.3";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.17" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.18")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27183", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;	

		КонецЕсли;


		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.18.4";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.17" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.18")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
		
		// Обновление справочника "Регламентированные отчеты"
		ПроцедурыОбновленияИнформационнойБазы.ОбновитьРегламентированныеОтчеты();
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20211025', Истина);
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20211026', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20211026';
	 	СтрокаНабора.Размер = 9.75;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// с 25 января 2022 ставка рефинансирования НБ = 10.25%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 25 января 2022 - 10.25%");
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20220125', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20220125';
	 	СтрокаНабора.Размер = 10.25;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// с 24 февраля 2022 ставка рефинансирования НБ = 13.5%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 24 февраля 2022 - 13.5%");
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20220224', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20220224';
	 	СтрокаНабора.Размер = 13.5;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		// с 26 апреля 2022 ставка рефинансирования НБ = 14%
		Сообщить("-----------------------");
		Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 26 апреля 2022 - 14%");
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
	 	СтавкаНБ.Отбор.Период.Установить('20220426', Истина);
	 	СтрокаНабора = СтавкаНБ.Добавить();
	 	СтрокаНабора.Период = '20220426';
	 	СтрокаНабора.Размер = 14;
		Попытка
			СтавкаНБ.ОбменДанными.Загрузка = Истина;
		 	СтавкаНБ.Записать();
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
		Исключение
			Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		////////////////////////////////////////////////////////////////////////////////
		// Установка новых значений ставок и регламентированных расчетных показателей с апреля 2022 год
		Сообщить("-----------------------");
		Сообщить("Установка новых значений регламентированных расчетных показателей с апреля 2022 год");
		Сообщить("-----------------------");
				
		НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить('20220401', Истина);		
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20220401"), 60000, 3063, 882*3063, 882*3063, 60000, 3063, 3180);	
		Попытка
			НаборЗаписей.Записать();
			Сообщить("Установка новых значений регламентированных расчетных показателей с апреля 2022 год завершена.");
		Исключение
			Сообщить("При записи в регистр сведений ""Регламентированные расчетные показатели"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27184", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;	

		КонецЕсли;

		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.18.5";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.17" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.18")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
		
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27185", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
					// Если удалось зафиксировать транзакцию, то
					// сообщение об успешном обновлении информационной базы.
					Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				КонецЕсли;	

		КонецЕсли;

		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.18.6";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.17" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.18")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			
			// Обновление справочника "Регламентированные отчеты"
			ПроцедурыОбновленияИнформационнойБазы.ОбновитьРегламентированныеОтчеты();
			
			// с 26 июля 2022 ставка рефинансирования НБ = 14%
			Сообщить("-----------------------");
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 26 июля 2022 - 14,5%");
			
			СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
			СтавкаНБ.Отбор.Период.Установить('20220726', Истина);
			СтрокаНабора = СтавкаНБ.Добавить();
			СтрокаНабора.Период = '20220726';
			СтрокаНабора.Размер = 14.5;
			Попытка
				СтавкаНБ.ОбменДанными.Загрузка = Истина;
				СтавкаНБ.Записать();
				Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
			Исключение
				Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
			// с 27 октября 2022 ставка рефинансирования НБ = 16%
			Сообщить("-----------------------");
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 27 октября 2022 - 16%");
			
			СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
			СтавкаНБ.Отбор.Период.Установить('20221027', Истина);
			СтрокаНабора = СтавкаНБ.Добавить();
			СтрокаНабора.Период = '20221027';
			СтрокаНабора.Размер = 16;
			Попытка
				СтавкаНБ.ОбменДанными.Загрузка = Истина;
				СтавкаНБ.Записать();
				Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
			Исключение
				Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27186", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
					// Если удалось зафиксировать транзакцию, то
					// сообщение об успешном обновлении информационной базы.
					Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				КонецЕсли;	

		КонецЕсли;

		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.18.7";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.17" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.18")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
					
			// Обновление справочника "Регламентированные отчеты"
			ПроцедурыОбновленияИнформационнойБазы.ОбновитьРегламентированныеОтчеты();
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27187", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
					// Если удалось зафиксировать транзакцию, то
					// сообщение об успешном обновлении информационной базы.
					Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				КонецЕсли;	

		КонецЕсли;
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ = "2.7.18.8";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.17" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.18")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			// Удаление отчетов РегламентированныйОтчетСправкаОСуммахДоходаИОсуществленныхПенсионныхВзносов и РегламентированныйОтчетСправкаСМестаРаботыПередНаступлениемСоциальногоРиска	
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	РегламентированныеОтчеты.Ссылка,
			|	РегламентированныеОтчеты.ИсточникОтчета
			|ИЗ
			|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
			|ГДЕ
			|	РегламентированныеОтчеты.ИсточникОтчета В (&СписокИсточниковОтчета)";
			
			СписокИсточников =  Новый СписокЗначений;
			СписокИсточников.Добавить("РегламентированныйОтчетСправкаОСуммахДоходаИОсуществленныхПенсионныхВзносов");
			СписокИсточников.Добавить("РегламентированныйОтчетСправкаСМестаРаботыПередНаступлениемСоциальногоРиска");
			
			Запрос.УстановитьПараметр("СписокИсточниковОтчета", СписокИсточников);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			МассивСсылок = Новый Массив(1);
			
			Пока Выборка.Следующий() Цикл
				
				МассивСсылок[0] = Выборка.Ссылка;
				ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
				Если ТаблицаСсылок.Количество() = 0 Тогда
					ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
					Попытка					
						ОтчетОбъект.Удалить();
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
				Иначе
					Сообщить("Регламентированный отчет " +  Выборка.Ссылка.Код + " " + """" + Выборка.Ссылка.Наименование + """" + " - не может быть удален, т.к. имеются ссылки в информационной базе" );
				КонецЕсли;	
				
			КонецЦикла;
			
			// Обновление справочника "Регламентированные отчеты"
			ПроцедурыОбновленияИнформационнойБазы.ОбновитьРегламентированныеОтчеты();
			
			// с 6 дкабря 2022 ставка рефинансирования НБ = 16,75%
			Сообщить("-----------------------");
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 6 декабря 2022 - 16.75%");
			
			СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
			СтавкаНБ.Отбор.Период.Установить('20221206', Истина);
			СтрокаНабора = СтавкаНБ.Добавить();
			СтрокаНабора.Период = '20221206';
			СтрокаНабора.Размер = 16.75;
			Попытка
				СтавкаНБ.ОбменДанными.Загрузка = Истина;
				СтавкаНБ.Записать();
				Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
			Исключение
				Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
			Сообщить("-----------------------");
			Сообщить("Установка размеров регламентированных показателей с 1 января 2023 г.");
			
			ДатаСведений = '2023-01-01';
			
			НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(ДатаСведений, Истина);
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, ДатаСведений, 70000, 3450, 882*3450, 882*3450, 70000, 3450, 3450);
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить("При записи в регистр сведений ""Регламентированные расчетные показатели"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
			//Перенос дня отдыха с субботы 1 июля 2023 года на пятницу 7 июля 2023 года.		
			НаборЗаписей = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Год.Установить(Год("20230101"));
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				
				Сообщить("-----------------------");
				Сообщить("Корректировка регламентированного производственного календаря: перенос субботы 1 июля 2023 года на пятницу 7 июля 2023 года");      
				
				ЗаписьПроизводственногоКалендаря = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.СоздатьМенеджерЗаписи();
				
				// Установим 1 июля рабочим
				ЗаписьПроизводственногоКалендаря.ДатаКалендаря = Дата("20230701");
				ЗаписьПроизводственногоКалендаря.Год 		   = 2023;
				ЗаписьПроизводственногоКалендаря.Прочитать();
				
				Если ЗаписьПроизводственногоКалендаря.Выбран() 
					И ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота Тогда
					ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
					ЗаписьПроизводственногоКалендаря.Пятидневка		= 1;
					ЗаписьПроизводственногоКалендаря.Записать(Истина);
				КонецЕсли;
				
				// Установим 7 июля субботой
				ЗаписьПроизводственногоКалендаря.ДатаКалендаря = Дата("20230707");
				ЗаписьПроизводственногоКалендаря.Год 		   = 2023;
				ЗаписьПроизводственногоКалендаря.Прочитать();
				
				Если ЗаписьПроизводственногоКалендаря.Выбран() 
					И ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда
					ЗаписьПроизводственногоКалендаря.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота;
					ЗаписьПроизводственногоКалендаря.Пятидневка		= 1;
					ЗаписьПроизводственногоКалендаря.Записать(Истина);
				КонецЕсли;
				
				Сообщить("Корректировка регламентированного производственного календаря выполнена успешно.");
				
			КонецЕсли;
			
			Сообщить("-----------------------");
			Сообщить("Заполнение сведений о ставках ИПН по видам доходов"); 
			
			НаборЗаписейСведенияОСтавкахИПН = РегистрыСведений.СведенияОСтавкахИПН.СоздатьНаборЗаписей();
			НаборЗаписейСведенияОСтавкахИПН.Прочитать();
			ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
			ВидыДоходов = Справочники.ВидыДоходов;
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейСведенияОСтавкахИПН, '20230101', ПустаяОрганизация, ВидыДоходов.Дивиденды, 		  10, 15);
			
			Попытка
				НаборЗаписейСведенияОСтавкахИПН.ОбменДанными.Загрузка = Истина;
				НаборЗаписейСведенияОСтавкахИПН.Записать();
			Исключение
				Сообщить("При записи данных регистра сведений ""Сведения о ставках ИПН"" произошли ошибки: " + Символы.ПС + 
				ОписаниеОшибки());
			КонецПопытки;
			
			// Установка вычетов по доходам
			Сообщить("-----------------------");
			Сообщить("Обновление сведений о вычетах по частично облагаемым доходам");
			
			НаборЗаписей = РегистрыСведений.ВычетыПоДоходам.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Период.Установить(Дата("20230101"), Истина);
			
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20230101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 12*3450, 0);
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20230101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 94*3450);
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20230101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 6*3450, 0);
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20230101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341Погребение, 0, 94*3450);
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20230101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341РождениеРебенка, 0, 94*3450);
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20230101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст341Дивиденды, 0, 30000*3450);
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить("При записи в регистр сведений ""Вычеты к доходам"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
			// Заполнение ПВР с видом дохода "Дивиденды"
			
			Сообщить("-----------------------");
			Сообщить("Заполнение плана видов расчета ""Дополнительные начисления организаций"" с видом дохода ""Дивиденды"".");
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДополнительныеНачисленияОрганизаций.Ссылка,
			|	ДополнительныеНачисленияОрганизаций.ВидДохода,
			|	ДополнительныеНачисленияОрганизаций.СпособРасчета
			|ИЗ
			|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
			|ГДЕ
			|	ДополнительныеНачисленияОрганизаций.ВидДохода = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.Дивиденды)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
			ОблагаетсяЦеликом	= Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом;
			Пока Выборка.Следующий() Цикл
				ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
				ВидРасчетаОбъект.ОблагаетсяИПН = Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст341Дивиденды;	
				
				Попытка
					ВидРасчетаОбъект.Записать();
				Исключение
					Сообщить("При записи вида расчета """ + ВидРасчетаОбъект.Наименование + """ произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
				КонецПопытки;
				
			КонецЦикла;
			
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				
				ВывестиОписаниеИзменений("27188", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
				
			#КонецЕсли
			
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ = "2.7.18.9";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.17" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.18")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27189", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
					// Если удалось зафиксировать транзакцию, то
					// сообщение об успешном обновлении информационной базы.
					Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				КонецЕсли;	

		КонецЕсли;
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ = "2.7.18.10";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.17" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.18")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("271810", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
					// Если удалось зафиксировать транзакцию, то
					// сообщение об успешном обновлении информационной базы.
					Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				КонецЕсли;	

		КонецЕсли;
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ = "2.7.18.11";
		
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.17" 
			ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.18")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
				"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("271811", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
					// Если удалось зафиксировать транзакцию, то
					// сообщение об успешном обновлении информационной базы.
					Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				КонецЕсли;	

		КонецЕсли;
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.19.1";
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.18" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.19")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			// Обновление справочника "Регламентированные отчеты"
			ПроцедурыОбновленияИнформационнойБазы.ОбновитьРегламентированныеОтчеты();
			
			Сообщить("Обработка справочника ""Внешние Обработки"".");
			
			ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную();
			
			Сообщить("Обработка справочника ""Внешние обработки"" завершена.");
			
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27191", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;	
			
		КонецЕсли;		
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.20.1";
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.19" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.20")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			// с 28 августа 2023 ставка рефинансирования НБ = 16.5%
			Сообщить("-----------------------");
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 28 августа 2023 - 16,5%");
			
			СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
			СтавкаНБ.Отбор.Период.Установить('20230828', Истина);
			СтрокаНабора = СтавкаНБ.Добавить();
			СтрокаНабора.Период = '20230828';
			СтрокаНабора.Размер = 16.5;
			Попытка
				СтавкаНБ.ОбменДанными.Загрузка = Истина;
				СтавкаНБ.Записать();
				Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
			Исключение
				Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
			// с 9 октября 2023 ставка рефинансирования НБ = 16%
			Сообщить("-----------------------");
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 9 октября 2023 - 16%");
			
			СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
			СтавкаНБ.Отбор.Период.Установить('20231009', Истина);
			СтрокаНабора = СтавкаНБ.Добавить();
			СтрокаНабора.Период = '20231009';
			СтрокаНабора.Размер = 16;
			Попытка
				СтавкаНБ.ОбменДанными.Загрузка = Истина;
				СтавкаНБ.Записать();
				Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
			Исключение
				Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
			// с 27 ноября 2023 ставка рефинансирования НБ = 15,75%
			Сообщить("-----------------------");
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 27 ноября 2023 - 15,75%");
			
			СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
			СтавкаНБ.Отбор.Период.Установить('20231127', Истина);
			СтрокаНабора = СтавкаНБ.Добавить();
			СтрокаНабора.Период = '20231127';
			СтрокаНабора.Размер = 15.75;
			Попытка
				СтавкаНБ.ОбменДанными.Загрузка = Истина;
				СтавкаНБ.Записать();
				Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
			Исключение
				Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
			// с 22 января 2024 ставка рефинансирования НБ = 15,25%
			Сообщить("-----------------------");
			Сообщить("Установка ставки рефинансирования НацБанка Казахстана с 22 января 2024 - 15,25%");
			
			СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
			СтавкаНБ.Отбор.Период.Установить('20240122', Истина);
			СтрокаНабора = СтавкаНБ.Добавить();
			СтрокаНабора.Период = '20240122';
			СтрокаНабора.Размер = 15.25;
			Попытка
				СтавкаНБ.ОбменДанными.Загрузка = Истина;
				СтавкаНБ.Записать();
				Сообщить("Установка ставки рефинансирования НацБанка Казахстана завершена.");
			Исключение
				Сообщить("  при записи в регистр сведений ""Ставка рефинансирования НБ"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
			Сообщить("-----------------------");
			Сообщить("Установка размеров регламентированных показателей с 1 января 2024 г.");
			
			ДатаСведений = '2024-01-01';
			
			НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(ДатаСведений, Истина);
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, ДатаСведений, 85000, 3692, 882*3692, 882*3692, 85000, 3692, 3692);
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить("При записи в регистр сведений ""Регламентированные расчетные показатели"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
			// Установка вычетов по доходам
			Сообщить("-----------------------");
			Сообщить("Обновление сведений о вычетах по частично облагаемым доходам");
			
			НаборЗаписей = РегистрыСведений.ВычетыПоДоходам.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Период.Установить(Дата("20240101"), Истина);
			
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20240101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст144, 12*3692, 0);
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20240101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп15Ст144, 0, 94*3692);
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20240101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп9Ст156, 6*3692, 0);
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20240101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341Погребение, 0, 94*3692);
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20240101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп18Ст341РождениеРебенка, 0, 94*3692);
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьВычетКДодохам(НаборЗаписей, Дата("20240101"), Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЧастичноПп8Ст341Дивиденды, 0, 30000*3692);
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить("При записи в регистр сведений ""Вычеты к доходам"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
			//--------------------------------------------------------------------------------
			// Обработка данных для механизма исчисления и учета ОПВР
			//--------------------------------------------------------------------------------
			
			// Заполним предопределенное значение ОПВР
			СправочникОбъект = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя.ПолучитьОбъект();
			СправочникОбъект.КодБК 							= "";
			СправочникОбъект.КодНазначенияПлатежа 			= "089";
			СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям;
			СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = ПланыСчетов.Налоговый.ОбязательстваПоПенсионнымОтчислениям;
			СправочникОбъект.НазначениеПлатежа 				= "Обязательные пенсионные взносы работодателя за ";
			СправочникОбъект.Записать();
			
			// Установим ставку ОПВР – 1.5%
			Сообщить("-----------------------");
			Сообщить("Установка ставки ОПВР для всех видов дохода с 1 января 2024 года - 1.5%.");
			
			ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
			
			НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВидНалога.Установить(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя, Истина);
			НаборЗаписей.Отбор.Налогоплательщик.Установить(ПустаяОрганизация, Истина);
			НаборЗаписей.Отбор.Период.Установить('20240101', Истина);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				
				ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20240101', ПустаяОрганизация, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя, 1.5);
				Попытка
					НаборЗаписей.ОбменДанными.Загрузка = Истина;
					НаборЗаписей.Записать();
				Исключение
					Сообщить("При записи данных регистра сведений ""Сведения о ставках налогов, сборов, отчслений"" произошли ошибки: " + Символы.ПС + ОписаниеОшибки());
				КонецПопытки;
				
			КонецЕсли;
			
			// Установим размер коэффициента ставки рефенансирования для расчета пени ОПВР
			Сообщить("-----------------------");
			Сообщить("Установка размера коэффициента ставки рефинансирования для ОПВР.");
			
			НаборЗаписей = РегистрыСведений.КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Организация.Использование	= Истина;
			НаборЗаписей.Отбор.Организация.ВидСравнения	 	= ВидСравнения.Равно;
			НаборЗаписей.Отбор.Организация.Значение	 		= Справочники.Организации.ПустаяСсылка();
			
			НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
			НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
			НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;
			
			Движение 				= НаборЗаписей.Добавить();
			// Свойства
			Движение.Период 		= '20240101'; // 01.01.2024
			// Измерения
			Движение.Организация	= Справочники.Организации.ПустаяСсылка();
			Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносыРаботодателя;
			// Ресурсы
			Движение.Коэффициент	= 1.25;
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Сообщить("При записи данных регистра сведений ""Коэффициенты ставки рефинансирования НБ для расчета пени"" произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
			
			НаборЗаписей = РегистрыСведений.УчетНалогообложенияПоВидамДоходов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Дата("20240101"));
			
			ПроцедурыОбновленияИнформационнойБазы.ДобавитьУчетНалогообложенияВидовДоходов(НаборЗаписей, "20240101", ПредопределенноеЗначение("Справочник.ВидыДоходов.ДоходыОтРаботодателя"), Истина, Истина, Истина, Истина, Истина, Истина, Истина, Истина);
			
			Попытка
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
			Исключение
				Сообщить("При записи данных регистра сведений ""Учет налогообложения по видам доходов"" произошли ошибки: " + Символы.ПС + 
				ОписаниеОшибки());
			КонецПопытки;
			
			// Заполнение рекизита "Облагается ОПВР" в ПВР
			
			Сообщить("-----------------------");
			Сообщить("Заполнение новых реквизитов планов видов расчета.");
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОсновныеНачисленияОрганизаций.Ссылка,
			|	ОсновныеНачисленияОрганизаций.ВидДохода
			|ИЗ
			|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
			|ГДЕ
			|	ОсновныеНачисленияОрганизаций.ОблагаетсяОПВР = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДополнительныеНачисленияОрганизаций.Ссылка,
			|	ДополнительныеНачисленияОрганизаций.ВидДохода
			|ИЗ
			|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
			|ГДЕ
			|	ДополнительныеНачисленияОрганизаций.ОблагаетсяОПВР = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ПустаяСсылка)
			|";
			
			Выборка = Запрос.Выполнить().Выбрать();
			ОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом;
			НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
			Пока Выборка.Следующий() Цикл
				ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ВидРасчетаОбъект.ОбменДанными.Загрузка = Истина;
				Если Выборка.ВидДохода = Справочники.ВидыДоходов.ДоходыОтРаботодателя Тогда
					ВидРасчетаОбъект.ОблагаетсяОПВР = ОблагаетсяЦеликом;
				Иначе
					ВидРасчетаОбъект.ОблагаетсяОПВР = НеОблагаетсяЦеликом;
				КонецЕсли;
				Попытка
					ВидРасчетаОбъект.Записать();
				Исключение
					Сообщить("При записи вида расчета """ + ВидРасчетаОбъект.Наименование + """ произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
				КонецПопытки;
				
			КонецЦикла;
			
			Сообщить("-----------------------");
			Сообщить("Перенумерация элементов справочника ""Статьи затрат"""); 
			ПроцедурыОбновленияИнформационнойБазы.УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("СтатьиЗатрат");
			
			Сообщить("-----------------------");
			Сообщить("Перенумерация элементов справочника ""Налоги, сборы и отчисления"""); 
			ПроцедурыОбновленияИнформационнойБазы.УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("НалогиСборыОтчисления");
			
			Сообщить("-----------------------");
			
			Сообщить("Обработка предопределенных элементов справочника ""Сохраненные настройки""");
			
			ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("СтруктураЗадолженностиОрганизацийПоОПВР", "СтруктураЗадолженностиОрганизацийПоОПВР");
			ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РегистрНалоговогоУчетаПоИПНиСН",			 "РегистрНалоговогоУчетаПоИПНиСН");
			ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента("РасчетныеЛисткиОрганизаций",				 "РасчетныеЛисткиОрганизаций");
			
			Сообщить("-----------------------");
			
			//--------------------------------------------------------------------------------
			// Конец обработки данных для механизма исчисления и учета ОПВР
			//--------------------------------------------------------------------------------

			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
				"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27201", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
				
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
					// Если удалось зафиксировать транзакцию, то
					// сообщение об успешном обновлении информационной базы.
					Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;	

		КонецЕсли;		
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.20.2";
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.19" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.20")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27202", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;	
			
		КонецЕсли;		
		
		ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		НоваяВерсияИБ   = "2.7.20.3";
		Если (ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.19" ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.7.20")
			И ТекущаяВерсияИБ <> НоваяВерсияИБ  Тогда
			
			СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТекущаяВерсияИБ", ТекущаяВерсияИБ);
			ДополнительныеПараметры.Вставить("НоваяВерсияИБ", НоваяВерсияИБ);
			общ_ЗащитаКлиентСервер.ВыполнитьОбновление(НоваяВерсияИБ, ДополнительныеПараметры);
			
			// Окончание
			////////////////////////////////////////////////////////////////////////////////
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь; 
			
			////////////////////////////////////////////////////////////////////////////////
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ);
			
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
			"Выполнено " + СтрСообщения);
			
			#Если Клиент Тогда			
				ВывестиОписаниеИзменений("27203", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			#КонецЕсли
			
			Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то
				// сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			КонецЕсли;	
			
		КонецЕсли;		
		
		Если НЕ ПустаяСтрока(Метаданные.Версия) и  Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия Тогда
			Константы.НомерВерсииКонфигурации.Установить(Метаданные.Версия);
		КонецЕсли;	
		#Если Клиент Тогда
			Если ДокументОписаниеОбновлений.ВысотаТаблицы > 0 Тогда
				ФормаОписаниеОбновлений.Открыть();
			КонецЕсли;
			
			Если ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации Тогда
				
				ТекстВопроса = "При обновлении версии конфигурации " + 
				"для обеспечения корректной работы системы необходимо выполнение ряда дополнительных действий. " + 
				"Автоматический последовательный запуск этих действий может быть осуществлен при помощи обработки ""Запуск пакета обработок обновления конфигурации"". " +
				"Перед запуском этой обработки рекомендуется ознакомиться с описанием во встроенной справке обработки." +
				"
				|
				|Выполнение действий в пакетном режиме может занять продолжительное время, поэтому предоставляется возможность выполнить дополнительные действия позже: 
				| 1) Вызов обработки ""Запуск пакета обработок обновления конфигурации"" производится из формы обработки "+
				"""Обновление информационной базы"" (меню ""Справка - Дополнения к описанию""), по нажатию кнопки командной панели.
				| 2) Интерактивный запуск каждой отдельной процедуры. Ссылки на эти процедуры находятся в окне описания обновлений (меню ""Справка - Дополнения к описанию""). " +
				"
				|
				|Открыть обработку   ""Запуск пакета обработок обновления конфигурации""  сейчас?";	
				
				Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
					Форма = ПолучитьФорму("ЗапускПакетаОбработокОбновленияКонфигурации");
					Форма.ОткрытьМодально();
				КонецЕсли; 		
			КонецЕсли;
			
			ВерсияБиблиотекЗащиты = куфиб_ЗащитаПроцедурыУправленческогоУчета.ВерсияБиблиотекЗащиты();
			Если куфиб_ОбщегоНазначения.ВерсияБиблиотекЗащиты()<>куфиб_ЗащитаПроцедурыУправленческогоУчета.ВерсияБиблиотекЗащиты() Тогда
				Предупреждение("Версия библиотек защиты ("+ВерсияБиблиотекЗащиты+") не соответствует версии, 
				|требуемой для работы приложения ("+куфиб_ОбщегоНазначения.ВерсияБиблиотекЗащиты()+")! 
				|Необходимо обновить библиотеки защиты, следуя рекомендациям из описания полученного обновления.
				|Обновление библиотек защиты при запущенных сеансах подключения к информационной базе
				|может привести к использованию библиотек защиты, имевшихся на момент запуска первого из сеансов,
				|поэтому рекомендуется обновлять бибилотеки защиты без активынх сеансов подключения.",120);
			КонецЕсли;
		#КонецЕсли
	
КонецПроцедуры // ВыполнитьОбновление()


	#Область ПроцедурыПереходаНаРедакцию_2_7
	
	
	Процедура ОбновлениеРегистраКалендарноеПланированиеБюджетногоПроцесса() Экспорт
		НаборЗаписейАдресация = РегистрыСведений.фин_КалендарноеПланированиеБюджетногоПроцесса.СоздатьНаборЗаписей();
		НаборЗаписейАдресация.Прочитать();
		
		Для Каждого СтрокаНабора Из НаборЗаписейАдресация Цикл
			Если СтрокаНабора.ВидЗадачи = Перечисления.фин_ВидыЗадачПоБюджетам.ФормированиеБюджета И СтрокаНабора.УдалитьВидОперации = Перечисления.фин_ВидыОперацийБюджет.Заявка Тогда
				СтрокаНабора.ВидЗадачи = Перечисления.фин_ВидыЗадачПоБюджетам.ПодачаЗаявок;
				СтрокаНабора.УдалитьВидОперации = Перечисления.фин_ВидыОперацийБюджет.ПустаяСсылка();
			ИначеЕсли СтрокаНабора.ВидЗадачи = Перечисления.фин_ВидыЗадачПоБюджетам.СогласованиеБюджета И СтрокаНабора.УдалитьВидОперации = Перечисления.фин_ВидыОперацийБюджет.Заявка Тогда
				СтрокаНабора.ВидЗадачи = Перечисления.фин_ВидыЗадачПоБюджетам.СогласованиеЗаявок;
				СтрокаНабора.УдалитьВидОперации = Перечисления.фин_ВидыОперацийБюджет.ПустаяСсылка();
			Иначе
				СтрокаНабора.УдалитьВидОперации = Перечисления.фин_ВидыОперацийБюджет.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		Попытка
			НаборЗаписейАдресация.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось обновить данные регистра сведений Календарное планирование бюджетного процесса'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Сообщить(ТекстСообщения);
		КонецПопытки;
		
	КонецПроцедуры
	
	Процедура ЗаполнениеРегистраИсполнителейЗадачБюджетирования() Экспорт
		НаборЗаписейАдресация = РегистрыСведений.Удалитьфин_АдресацияЗадачБюджетногоПроцесса.СоздатьНаборЗаписей();
		НаборЗаписейАдресация.Прочитать();
		
		НаборЗаписейИсполнители = РегистрыСведений.фин_ИсполнителиЗадачБюджетногоПроцесса.СоздатьНаборЗаписей();
		НаборЗаписейИсполнители.Отбор.Регламент.Установить(Документы.фин_БюджетныйРегламент.ПустаяСсылка());
		
		Для Каждого СтрокаНабора Из НаборЗаписейАдресация Цикл
			НоваяЗапись = НаборЗаписейИсполнители.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись,СтрокаНабора);
			НоваяЗапись.Исполнитель = СтрокаНабора.Пользователь;
			Если СтрокаНабора.ВидЗадачи = Перечисления.фин_ВидыЗадачПоБюджетам.ФормированиеБюджета И СтрокаНабора.УдалитьВидОперации = Перечисления.фин_ВидыОперацийБюджет.Заявка Тогда
				НоваяЗапись.ВидЗадачи = Перечисления.фин_ВидыЗадачПоБюджетам.ПодачаЗаявок;
			ИначеЕсли СтрокаНабора.ВидЗадачи = Перечисления.фин_ВидыЗадачПоБюджетам.СогласованиеБюджета И СтрокаНабора.УдалитьВидОперации = Перечисления.фин_ВидыОперацийБюджет.Заявка Тогда
				НоваяЗапись.ВидЗадачи = Перечисления.фин_ВидыЗадачПоБюджетам.СогласованиеЗаявок;
			КонецЕсли;
		КонецЦикла;
		Попытка
			НаборЗаписейИсполнители.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось обновить данные регистра сведений Исполнители задач бюджетного процесса'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Сообщить(ТекстСообщения);
		КонецПопытки;
		
	КонецПроцедуры
	
	Процедура ОбновитьБюджеты() Экспорт 
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	фин_Бюджеты.Ссылка
		|ИЗ
		|	Справочник.фин_Бюджеты КАК фин_Бюджеты
		|ГДЕ
		|	фин_Бюджеты.УчетПоКоличеству
		|	И фин_Бюджеты.ТочностьКоличественныхПоказателей = 0
		|	И НЕ фин_Бюджеты.ПометкаУдаления";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОбъектСправочник = Выборка.Ссылка.ПолучитьОбъект();
			
			ОбъектСправочник.ТочностьКоличественныхПоказателей = 5;
			
			Попытка
				ОбъектСправочник.Записать();		
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось обновить данные структуры бюджета '")+Строка(Выборка.Ссылка);
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	фин_Бюджеты.Ссылка,
		|	фин_Бюджеты.ПозицияКлассификатора
		|ИЗ
		|	Справочник.фин_Бюджеты КАК фин_Бюджеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_СтатьиБюджета КАК фин_СтатьиБюджета
		|		ПО фин_Бюджеты.Ссылка = фин_СтатьиБюджета.Владелец
		|			И (фин_СтатьиБюджета.ПозицияКлассификатора <> ЗНАЧЕНИЕ(Перечисление.фин_КлассификаторстатейБюджетов.ПустаяСсылка))
		|ГДЕ
		|	фин_Бюджеты.ПозицияКлассификатора <> ЗНАЧЕНИЕ(Перечисление.фин_КлассификаторБюджетов.ПустаяСсылка)
		|	И фин_СтатьиБюджета.Ссылка ЕСТЬ NULL ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОбъектСправочник = Выборка.Ссылка.ПолучитьОбъект();
			
			Если Выборка.ПозицияКлассификатора = Перечисления.фин_КлассификаторБюджетов.БюджетДвиженияДенежныхСредств Тогда
				ОбъектСправочник.ДоступноФормированиеНаОснованииПлановДвиженияДенежныхСредств = Истина;
			ИначеЕсли Выборка.ПозицияКлассификатора = Перечисления.фин_КлассификаторБюджетов.БюджетЗакупок Тогда
				ОбъектСправочник.ДоступноФормированиеНаОснованииПлановЗакупок = Истина;
			КонецЕсли;
			ОбъектСправочник.ПозицияКлассификатора = Перечисления.фин_КлассификаторБюджетов.ПустаяСсылка();
			
			Попытка
				ОбъектСправочник.Записать();		
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось обновить данные структуры бюджета '")+Строка(Выборка.Ссылка);
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура ОбновитьСценарии() Экспорт
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СценарииПланирования.Ссылка,
		|	СценарииПланирования.Периодичность,
		|	СценарииПланирования.ПродолжительностьЦикла
		|ИЗ
		|	Справочник.СценарииПланирования КАК СценарииПланирования
		|ГДЕ
		|	(НЕ СценарииПланирования.Периодичность ССЫЛКА Перечисление.фин_Периодичность
		|			ИЛИ СценарииПланирования.ПродолжительностьЦикла ССЫЛКА Перечисление.Периодичность)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОбъектСправочник = Выборка.Ссылка.ПолучитьОбъект();
			Если ЗначениеЗаполнено(Выборка.Периодичность) Тогда
				ИмяЭлемента = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Выборка.Периодичность);
				ОбъектСправочник.Периодичность = Перечисления.фин_Периодичность[ИмяЭлемента];
			Иначе
				ОбъектСправочник.Периодичность = Перечисления.фин_Периодичность.ПустаяСсылка();
			КонецЕсли;
			
			Если ТипЗнч(Выборка.ПродолжительностьЦикла)=Тип("ПеречислениеСсылка.Периодичность") Тогда
				Если ЗначениеЗаполнено(Выборка.ПродолжительностьЦикла) Тогда
					ИмяЭлемента = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Выборка.ПродолжительностьЦикла);
					ОбъектСправочник.ПродолжительностьЦикла = Перечисления.фин_Периодичность[ИмяЭлемента];
				Иначе
					ОбъектСправочник.ПродолжительностьЦикла = Перечисления.фин_Периодичность.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			
			
			Попытка
				ОбъектСправочник.Записать();		
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось обновить данные сценария'")+Строка(Выборка.Ссылка);
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла
		
	КонецПроцедуры
	
	Процедура ОбновитьПрофили() Экспорт
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	фин_ПрофилиИзмененияПлановПоПериодам.Ссылка,
		|	фин_ПрофилиИзмененияПлановПоПериодам.ПериодСмещения,
		|	фин_ПрофилиИзмененияПлановПоПериодам.ПериодЦикла
		|ИЗ
		|	Справочник.фин_ПрофилиИзмененияПлановПоПериодам КАК фин_ПрофилиИзмененияПлановПоПериодам
		|ГДЕ
		|	(фин_ПрофилиИзмененияПлановПоПериодам.ПериодЦикла ССЫЛКА Перечисление.Периодичность
		|			ИЛИ фин_ПрофилиИзмененияПлановПоПериодам.ПериодСмещения ССЫЛКА Перечисление.Периодичность)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОбъектСправочник = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ТипЗнч(Выборка.ПериодСмещения)=Тип("ПеречислениеСсылка.Периодичность") Тогда
				Если ЗначениеЗаполнено(Выборка.ПериодСмещения) Тогда
					ИмяЭлемента = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Выборка.ПериодСмещения);
					ОбъектСправочник.ПериодСмещения = Перечисления.фин_Периодичность[ИмяЭлемента];
				Иначе
					ОбъектСправочник.ПериодСмещения = Перечисления.фин_Периодичность.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(Выборка.ПериодЦикла)=Тип("ПеречислениеСсылка.Периодичность") Тогда
				Если ЗначениеЗаполнено(Выборка.ПериодЦикла) Тогда
					ИмяЭлемента = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Выборка.ПериодЦикла);
					ОбъектСправочник.ПериодЦикла = Перечисления.фин_Периодичность[ИмяЭлемента];
				Иначе
					ОбъектСправочник.ПериодЦикла = Перечисления.фин_Периодичность.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			
			
			Попытка
				ОбъектСправочник.Записать();		
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось обновить данные профиля'")+Строка(Выборка.Ссылка);
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла
		
	КонецПроцедуры
	
	// Заменяет существующие строки отборов, сформированные построителем отчета, на строки, полученные с использованием СКД.
	// Справочник ден_НастройкиЗаполненияПланаДвиженияДенежныхСредств
	//
	Процедура ОбновитьНастройкиОтборовВСправочникеНастройкиЗаполненияПланаДДС() Экспорт
		
		НастройкаКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
		
		СоответствияВидовСравнений = СоответствиеВидаСравненияВидамСравненияКомпоновкиДанных();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиЗаполненияОбъединяемыеДанные.Ссылка
		|ИЗ
		|	Справочник.ден_НастройкиЗаполненияПланаДвиженияДенежныхСредств.ОбъединяемыеДанные КАК НастройкиЗаполненияОбъединяемыеДанные";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОбъектНастройкаЗаполненияПланаДДС = Выборка.Ссылка.ПолучитьОбъект();
			
			Для каждого ТекДанные Из ОбъектНастройкаЗаполненияПланаДДС.ОбъединяемыеДанные Цикл
				
				НастройкиОтбораСтрокой = ТекДанные.НастройкиОтбора;
				Если Не ЗначениеЗаполнено(НастройкиОтбораСтрокой) Тогда
					Продолжить;				
				КонецЕсли;	
				
				НастройкаКомпоновкиДанных.Отбор.Элементы.Очистить();				
				НоваяНастройкаОтбора = НастройкаКомпоновкиДанных.Отбор;
				
				ИмяРегистра = "";
				Если ТекДанные.ИсточникДанныхРасчета = ПредопределенноеЗначение("Перечисление.ден_ИсточникиДанныхРасчетаПланаДвиженияДенежныхСредств.ПлановыеДвиженияДенежныхСредств") Тогда
					ИмяРегистра = "ден_ПланыДвиженияДенежныхСредств";
				ИначеЕсли  ТекДанные.ИсточникДанныхРасчета = ПредопределенноеЗначение("Перечисление.ден_ИсточникиДанныхРасчетаПланаДвиженияДенежныхСредств.ФактическиеДвиженияДенежныхСредств") Тогда
					ИмяРегистра = "ден_ДвиженияДенежныхСредств";
				ИначеЕсли  ТекДанные.ИсточникДанныхРасчета = ПредопределенноеЗначение("Перечисление.ден_ИсточникиДанныхРасчетаПланаДвиженияДенежныхСредств.ДокументыПланированияРасходовПоступлений") Тогда
					ИмяРегистра = ?(ТекДанные.ПриходРасход = ПредопределенноеЗначение("Перечисление.ден_ВидыДвиженийПриходРасход.Расход"),"ден_ЗаявкиНаРасходованиеСредств","ден_ПланируемыеПоступленияДенежныхСредств");
				Иначе
					Продолжить;;
				КонецЕсли;
				
				ТекущаяНастройкаОтбора = ЗначениеИзСтрокиВнутр(НастройкиОтбораСтрокой);
				
				Если ТипЗнч(ТекущаяНастройкаОтбора) <> Тип("НастройкиПостроителяОтчета") Тогда
					Продолжить;				
				КонецЕсли;
				
				ТекстЗапроса = "ВЫБРАТЬ * ИЗ РегистрНакопления." + ИмяРегистра + ".Обороты(,,Период,) КАК " + ИмяРегистра;
				Построитель = Новый ПостроительОтчета(ТекстЗапроса);
				Построитель.ЗаполнитьНастройки();
				Построитель.УстановитьНастройки(ТекущаяНастройкаОтбора, Истина, Ложь, Ложь, Ложь, Ложь);
				
				Для Каждого ТекущийЭлементОтбора Из Построитель.Отбор Цикл
					Если ТекущийЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
						// значение "с"
						ЭлементОтбора = НоваяНастройкаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ТекущийЭлементОтбора.ПутьКДанным); 
						ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
						ЭлементОтбора.ПравоеЗначение 	= ТекущийЭлементОтбора.ЗначениеС;
						ЭлементОтбора.Использование 	= Истина;
						// значение "по"
						ЭлементОтбора = НоваяНастройкаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ТекущийЭлементОтбора.ПутьКДанным); 
						ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
						ЭлементОтбора.ПравоеЗначение 	= ТекущийЭлементОтбора.ЗначениеПо;
						ЭлементОтбора.Использование 	= Истина;
					ИначеЕсли ТекущийЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
						// значение "с"
						ЭлементОтбора = НоваяНастройкаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ТекущийЭлементОтбора.ПутьКДанным); 
						ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
						ЭлементОтбора.ПравоеЗначение 	= ТекущийЭлементОтбора.ЗначениеС;
						ЭлементОтбора.Использование 	= Истина;
						// значение "по"
						ЭлементОтбора = НоваяНастройкаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ТекущийЭлементОтбора.ПутьКДанным); 
						ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Меньше;
						ЭлементОтбора.ПравоеЗначение 	= ТекущийЭлементОтбора.ЗначениеПо;
						ЭлементОтбора.Использование 	= Истина;
					ИначеЕсли ТекущийЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
						// значение "с"
						ЭлементОтбора = НоваяНастройкаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ТекущийЭлементОтбора.ПутьКДанным); 
						ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Больше;
						ЭлементОтбора.ПравоеЗначение 	= ТекущийЭлементОтбора.ЗначениеС;
						ЭлементОтбора.Использование 	= Истина;
						// значение "по"
						ЭлементОтбора = НоваяНастройкаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ТекущийЭлементОтбора.ПутьКДанным); 
						ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
						ЭлементОтбора.ПравоеЗначение 	= ТекущийЭлементОтбора.ЗначениеПо;
						ЭлементОтбора.Использование 	= Истина;
					ИначеЕсли ТекущийЭлементОтбора.ВидСравнения = ВидСравнения.Интервал Тогда
						// значение "с"
						ЭлементОтбора = НоваяНастройкаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ТекущийЭлементОтбора.ПутьКДанным); 
						ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Больше;
						ЭлементОтбора.ПравоеЗначение 	= ТекущийЭлементОтбора.ЗначениеС;
						ЭлементОтбора.Использование 	= Истина;
						// значение "по"
						ЭлементОтбора = НоваяНастройкаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ТекущийЭлементОтбора.ПутьКДанным); 
						ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Меньше;
						ЭлементОтбора.ПравоеЗначение 	= ТекущийЭлементОтбора.ЗначениеПо;
						ЭлементОтбора.Использование 	= Истина;
					Иначе
						ЭлементОтбора = НоваяНастройкаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ТекущийЭлементОтбора.ПутьКДанным); 
						ЭлементОтбора.ВидСравнения 		= СоответствияВидовСравнений.Получить(ТекущийЭлементОтбора.ВидСравнения);
						ЭлементОтбора.ПравоеЗначение 	= ТекущийЭлементОтбора.Значение;
						ЭлементОтбора.Использование 	= Истина;
					КонецЕсли;
				КонецЦикла;
				ТекДанные.НастройкиОтбора = ЗначениеВСтрокуВнутр(НоваяНастройкаОтбора);
			КонецЦикла; 
			
			Попытка
				ОбъектНастройкаЗаполненияПланаДДС.Записать();		
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось обновить настройку заполнения плана движения денежных средств'");
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла
		
	КонецПроцедуры
	
	Функция СоответствиеВидаСравненияВидамСравненияКомпоновкиДанных()
		
		СоответствиеВидамСравненияКомпоновкиДанных = Новый Соответствие;	
		
		СоответствиеВидамСравненияКомпоновкиДанных.Вставить(ВидСравнения.Больше, 				ВидСравненияКомпоновкиДанных.Больше);
		СоответствиеВидамСравненияКомпоновкиДанных.Вставить(ВидСравнения.БольшеИлиРавно, 		ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		СоответствиеВидамСравненияКомпоновкиДанных.Вставить(ВидСравнения.ВИерархии, 			ВидСравненияКомпоновкиДанных.ВИерархии);
		СоответствиеВидамСравненияКомпоновкиДанных.Вставить(ВидСравнения.ВСписке, 				ВидСравненияКомпоновкиДанных.ВСписке);
		СоответствиеВидамСравненияКомпоновкиДанных.Вставить(ВидСравнения.ВСпискеПоИерархии, 	ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
		СоответствиеВидамСравненияКомпоновкиДанных.Вставить(ВидСравнения.Меньше, 				ВидСравненияКомпоновкиДанных.Меньше);
		СоответствиеВидамСравненияКомпоновкиДанных.Вставить(ВидСравнения.МеньшеИлиРавно, 		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		СоответствиеВидамСравненияКомпоновкиДанных.Вставить(ВидСравнения.НеВИерархии, 			ВидСравненияКомпоновкиДанных.НеВИерархии);
		СоответствиеВидамСравненияКомпоновкиДанных.Вставить(ВидСравнения.НеВСписке, 			ВидСравненияКомпоновкиДанных.НеВСписке);
		СоответствиеВидамСравненияКомпоновкиДанных.Вставить(ВидСравнения.НеВСпискеПоИерархии, 	ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);
		СоответствиеВидамСравненияКомпоновкиДанных.Вставить(ВидСравнения.НеРавно, 				ВидСравненияКомпоновкиДанных.НеРавно);
		СоответствиеВидамСравненияКомпоновкиДанных.Вставить(ВидСравнения.НеСодержит, 			ВидСравненияКомпоновкиДанных.НеСодержит);
		СоответствиеВидамСравненияКомпоновкиДанных.Вставить(ВидСравнения.Равно, 				ВидСравненияКомпоновкиДанных.Равно);
		СоответствиеВидамСравненияКомпоновкиДанных.Вставить(ВидСравнения.Содержит, 				ВидСравненияКомпоновкиДанных.Содержит);
		
		Возврат СоответствиеВидамСравненияКомпоновкиДанных;	
		
	КонецФункции
	
	Процедура ОбработкаОбновленияПодразделенийВЗаказахПоставщикам() Экспорт 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	узп_ЗаказПоставщику.Ссылка
		|ИЗ
		|	Документ.узп_ЗаказПоставщику КАК узп_ЗаказПоставщику
		|ГДЕ
		|	узп_ЗаказПоставщику.ОбластьПланирования = ЗНАЧЕНИЕ(Перечисление.узп_ОбластиПланированияЗакупок.ПустаяСсылка)";
		Результат = Запрос.Выполнить();
		Выборка= Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Ссылка = Выборка.Ссылка;
			ТекущийОбъект = Ссылка.ПолучитьОбъект();
			ТекущийОбъект.ОбластьПланирования = Перечисления.узп_ОбластиПланированияЗакупок.ПоОрганизации;
			Попытка
				ТекущийОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось записать документ: '") + Ссылка;
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура ОбновитьРегистрСформированныеБюджеты() Экспорт 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	фин_СформированныеБюджеты.Регистратор,
		|	фин_СформированныеБюджеты.Регистратор.ЗадаватьКурсыВалютВДокументе КАК ЗадаватьКурсыВалютВДокументе,
		|	фин_СформированныеБюджеты.Регистратор.УровеньДетализацииБюджета КАК УровеньДетализацииБюджета,
		|	фин_СформированныеБюджеты.Регистратор.ЕдинаяВалюта КАК ЕдинаяВалюта,
		|	фин_СформированныеБюджеты.Регистратор.ВалютаДокумента КАК ВалютаДокумента
		|ИЗ
		|	РегистрСведений.фин_СформированныеБюджеты КАК фин_СформированныеБюджеты
		|ГДЕ
		|	фин_СформированныеБюджеты.ВалютаДокумента = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)";
		Результат = Запрос.Выполнить();
		Выборка= Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.фин_СформированныеБюджеты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			Для Каждого СтрокаТЧ Из НаборЗаписей Цикл
				СтрокаТЧ.ЗадаватьКурсыВалютВДокументе 	= Выборка.ЗадаватьКурсыВалютВДокументе;
				СтрокаТЧ.УровеньДетализацииБюджета 		= Выборка.УровеньДетализацииБюджета;
				СтрокаТЧ.ЕдинаяВалюта 					= Выборка.ЕдинаяВалюта;
				СтрокаТЧ.ВалютаДокумента 				= Выборка.ВалютаДокумента;
			КонецЦикла;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ВнешняяОбработка",Истина);
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось обновить движения документа: '") + Выборка.Регистратор;
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура ОбновитьРегистрКорректировок() Экспорт 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	фин_МониторингКорректировокОбороты.Регистратор
		|ИЗ
		|	РегистрНакопления.фин_МониторингКорректировок.Обороты(, , Регистратор, ) КАК фин_МониторингКорректировокОбороты
		|ГДЕ
		|	фин_МониторингКорректировокОбороты.ДокументПланирования = ЗНАЧЕНИЕ(Документ.фин_Бюджет.ПустаяСсылка)
		|	И фин_МониторингКорректировокОбороты.Регистратор ССЫЛКА Документ.фин_Бюджет";
		Результат = Запрос.Выполнить();
		Выборка= Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыНакопления.фин_МониторингКорректировок.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			Для Каждого СтрокаТЧ Из НаборЗаписей Цикл
				СтрокаТЧ.ДокументПланирования = Выборка.Регистратор;
			КонецЦикла;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ВнешняяОбработка",Истина);
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось обновить движения документа: '") + Выборка.Регистратор;
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура ОбновитьРегистрОтклонений() Экспорт 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	фин_МониторингНепринятияСтрокБюджетов.Регистратор
		|ИЗ
		|	РегистрНакопления.фин_МониторингНепринятияСтрокБюджетов.Обороты(, , Регистратор, ) КАК фин_МониторингНепринятияСтрокБюджетов
		|ГДЕ
		|	фин_МониторингНепринятияСтрокБюджетов.ДокументПланирования = ЗНАЧЕНИЕ(Документ.фин_Бюджет.ПустаяСсылка)
		|	И фин_МониторингНепринятияСтрокБюджетов.Регистратор ССЫЛКА Документ.фин_Бюджет";
		Результат = Запрос.Выполнить();
		Выборка= Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыНакопления.фин_МониторингНепринятияСтрокБюджетов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			Для Каждого СтрокаТЧ Из НаборЗаписей Цикл
				СтрокаТЧ.ДокументПланирования = Выборка.Регистратор;
			КонецЦикла;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ВнешняяОбработка",Истина);
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось обновить движения документа: '") + Выборка.Регистратор;
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура ОбработкаОбновленияОбъектыРемонтаВЗаявкахМТС() Экспорт 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	узп_ЗаявкаМТС.Ссылка,
		|	узп_ЗаявкаМТС.ОбъектРемонта
		|ИЗ
		|	Документ.узп_ЗаявкаМТС КАК узп_ЗаявкаМТС
		|ГДЕ
		|	узп_ЗаявкаМТС.Проведен = ИСТИНА
		|	И НЕ узп_ЗаявкаМТС.ОбъектРемонта = &ОбъектРемонта";
		Запрос.УстановитьПараметр("ОбъектРемонта",Справочники.ОсновныеСредства.ПустаяСсылка());
		Результат = Запрос.Выполнить();
		Выборка= Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Ссылка = Выборка.Ссылка;
			ТекущийОбъект = Ссылка.ПолучитьОбъект();
			Для Каждого СтрокаТЧ Из ТекущийОбъект.Товары Цикл
				СтрокаТЧ.ОбъектРемонта = Выборка.ОбъектРемонта;
			КонецЦикла;
			Для Каждого СтрокаТЧ Из ТекущийОбъект.Услуги Цикл
				СтрокаТЧ.ОбъектРемонта = Выборка.ОбъектРемонта;
			КонецЦикла;
			Попытка
				ТекущийОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось записать документ: '") + Ссылка;
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
			НаборЗаписей = РегистрыНакопления.узп_ЗаявкиМТС.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
			НаборЗаписей.Прочитать();
			Для Каждого СтрокаТЧ Из НаборЗаписей Цикл
				СтрокаТЧ.ОбъектРемонта = Выборка.ОбъектРемонта;
			КонецЦикла;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ВнешняяОбработка",Истина);
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось обновить движения документа: '") + Ссылка;
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
			
			
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура ОбработкаДокументовРегистрацииДоговора() Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	дог_РегистрацияДоговоров.Ссылка,
		|	дог_РегистрацияДоговоров.Проведен,
		|	дог_РегистрацияДоговоров.ПериодичностьОплаты,
		|	дог_РегистрацияДоговоров.ПериодичностьСмещения
		|ИЗ
		|	Документ.дог_РегистрацияДоговоров КАК дог_РегистрацияДоговоров
		|ГДЕ
		|	НЕ дог_РегистрацияДоговоров.ПометкаУдаления
		|	И НЕ(дог_РегистрацияДоговоров.ПериодичностьОплаты ССЫЛКА Перечисление.фин_Периодичность
		|				И дог_РегистрацияДоговоров.ПериодичностьСмещения ССЫЛКА Перечисление.фин_Периодичность)";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПериодичностьОплаты) Тогда
				ИмяЭлемента = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВыборкаДетальныеЗаписи.ПериодичностьОплаты);
				ДокументОбъект.ПериодичностьОплаты = Перечисления.фин_Периодичность[ИмяЭлемента];
			Иначе
				ДокументОбъект.ПериодичностьОплаты = Перечисления.фин_Периодичность.ПустаяСсылка();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПериодичностьСмещения) Тогда
				ИмяЭлемента = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВыборкаДетальныеЗаписи.ПериодичностьСмещения);
				ДокументОбъект.ПериодичностьСмещения = Перечисления.фин_Периодичность[ИмяЭлемента];
			Иначе
				ДокументОбъект.ПериодичностьСмещения = Перечисления.фин_Периодичность.ПустаяСсылка();
			КонецЕсли;
			Попытка
				ДокументОбъект.ДополнительныеСвойства.Вставить("ВнешняяОбработка");
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось обновить данные документа: '") + ВыборкаДетальныеЗаписи.Ссылка;
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
			
			
			Если НЕ ВыборкаДетальныеЗаписи.Проведен Тогда
				Продолжить;
			КонецЕсли;
			НаборЗаписей = РегистрыСведений.дог_ДоговорыИДополнительныеСоглашения.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Если ЗначениеЗаполнено(Запись.ПериодичностьОплаты) Тогда
					ИмяЭлемента = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Запись.ПериодичностьОплаты);
					Запись.ПериодичностьОплаты = Перечисления.фин_Периодичность[ИмяЭлемента];
				Иначе
					Запись.ПериодичностьОплаты = Перечисления.фин_Периодичность.ПустаяСсылка();
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Запись.ПериодичностьСмещения) Тогда
					ИмяЭлемента = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Запись.ПериодичностьСмещения);
					Запись.ПериодичностьСмещения = Перечисления.фин_Периодичность[ИмяЭлемента];
				Иначе
					Запись.ПериодичностьСмещения = Перечисления.фин_Периодичность.ПустаяСсылка();
				КонецЕсли;
			КонецЦикла;
			
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось обновить движения документа по регистру Договоры и дополнительные соглашения. Документ: '")+ ВыборкаДетальныеЗаписи.Ссылка;
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура ОбработкаСправочникаГрафиков() Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГрафикПлатежей.Ссылка
		|ИЗ
		|	Справочник.дог_ГрафикиОплатыПоДоговорам.ГрафикПлатежей КАК ГрафикПлатежей
		|ГДЕ
		|	НЕ ГрафикПлатежей.Ссылка.ПометкаУдаления
		|	И НЕ ГрафикПлатежей.Периодичность ССЫЛКА Перечисление.фин_Периодичность";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СправочникОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			
			Для Каждого Запись Из СправочникОбъект.ГрафикПлатежей Цикл
				Если ЗначениеЗаполнено(Запись.Периодичность) Тогда
					ИмяЭлемента = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Запись.Периодичность);
					Запись.Периодичность = Перечисления.фин_Периодичность[ИмяЭлемента];
				Иначе
					Запись.Периодичность = Перечисления.фин_Периодичность.ПустаяСсылка();
				КонецЕсли;
				
			КонецЦикла;
			
			
			Попытка
				СправочникОбъект.Записать();
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось обновить данные справочника: '") + ВыборкаДетальныеЗаписи.Ссылка;
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура ОбработкаРегламента() Экспорт
		
		ВыборкаДетальныеЗаписи = Документы.фин_БюджетныйРегламент.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если НЕ ВыборкаДетальныеЗаписи.Проведен Тогда
				Продолжить;
			КонецЕсли;
			НаборЗаписей = РегистрыСведений.фин_ПрименяемыеРегламентыФормированияБюджетов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НЗ = НаборЗаписей.Добавить();
			НЗ.Период = ВыборкаДетальныеЗаписи.Дата;
			НЗ.Регламент = ВыборкаДетальныеЗаписи.Ссылка;
			НЗ.РасширенныйРежим = ВыборкаДетальныеЗаписи.РасширенныйРежим;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось обновить движения документа по регистру Применяемые регламенты формирования бюджетов. Документ: '") + ВыборкаДетальныеЗаписи.Ссылка;
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
			НаборЗаписей = РегистрыСведений.фин_РегламентФормированияБюджетов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Ссылка);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.Регламент = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось обновить движения документа по регистру Регламент формирования бюджетов. Документ: '") + ВыборкаДетальныеЗаписи.Ссылка;
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура ОбработкаПредставленияУсловийВыполненияОпераций() Экспорт 
		
		ВыборкаДетальныеЗаписи = Справочники.усд_УсловияВыполненияОперацийПоДокументам.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.ЭтоГруппа ИЛИ ВыборкаДетальныеЗаписи.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			ТекущийОбъект = ВыборкаДетальныеЗаписи.ПолучитьОбъект();
			ЕстьИзменения = Ложь;
			Для Каждого СтрокаТЧ Из ТекущийОбъект.СоставныеЧастиУсловия Цикл
				Если СтрокаТЧ.ОписаниеУсловия = "" Тогда
					СтрокаТЧ.ОписаниеУсловия = Справочники.усд_УсловияВыполненияОперацийПоДокументам.ПолучитьОписаниеУсловия(СтрокаТЧ);
					ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЦикла;
			Попытка
				Если ЕстьИзменения Тогда
					ТекущийОбъект.Записать();
				КонецЕсли;
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось записать элемент справочника: '") + ВыборкаДетальныеЗаписи.Ссылка;
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
		
		ВыборкаДетальныеЗаписи = Справочники.усд_УсловияВыполненияОперацийПоСтрокамДокумента.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.ЭтоГруппа ИЛИ ВыборкаДетальныеЗаписи.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			ТекущийОбъект = ВыборкаДетальныеЗаписи.ПолучитьОбъект();
			ЕстьИзменения = Ложь;
			Для Каждого СтрокаТЧ Из ТекущийОбъект.СоставныеЧастиУсловия Цикл
				Если СтрокаТЧ.ОписаниеУсловия = "" Тогда
					СтрокаТЧ.ОписаниеУсловия = Справочники.усд_УсловияВыполненияОперацийПоСтрокамДокумента.ПолучитьОписаниеУсловия(СтрокаТЧ);
					ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЦикла;
			Попытка
				Если ЕстьИзменения Тогда
					ТекущийОбъект.Записать();
				КонецЕсли;
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось записать элемент справочника: '") + ВыборкаДетальныеЗаписи.Ссылка;
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура ОбработкаУсловийВыполненияОпераций() Экспорт 
		
		ВидыСравнения = Новый Массив;
		ВидыСравнения.Добавить(Перечисления.усд_ВидыСравненияДляУсловий.ВСписке);
		ВидыСравнения.Добавить(Перечисления.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии);
		ВидыСравнения.Добавить(Перечисления.усд_ВидыСравненияДляУсловий.НеВСписке);
		ВидыСравнения.Добавить(Перечисления.усд_ВидыСравненияДляУсловий.НеВСпискеПоИерархии);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставныеЧастиУсловия.Ссылка
		|ИЗ
		|	Справочник.усд_УсловияВыполненияОперацийПоСтрокамДокумента.СоставныеЧастиУсловия КАК СоставныеЧастиУсловия
		|ГДЕ
		|	СоставныеЧастиУсловия.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И (СоставныеЧастиУсловия.РежимСравнения = &РежимСравнения
		|			ИЛИ (СоставныеЧастиУсловия.ВидСравнения В (&ВидСравнения)
		|				И СоставныеЧастиУсловия.ПредопределенныйСписок = &ПустойПредопределенныйСписок))";
		
		Запрос.УстановитьПараметр("ВидСравнения", 					ВидыСравнения);
		Запрос.УстановитьПараметр("ПустойПредопределенныйСписок", 	Справочники.фин_СпискиДанных.ПустаяСсылка());
		Запрос.УстановитьПараметр("РежимСравнения", 				Перечисления.усд_РежимыСравненияДляУсловий.СравнениеСПолемРегистраСведений);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекущийОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ЕстьИзменения = Ложь;
			Для Каждого СтрокаТЧ Из ТекущийОбъект.СоставныеЧастиУсловия Цикл
				Если СтрокаТЧ.РежимСравнения = Перечисления.усд_РежимыСравненияДляУсловий.СравнениеСПолемРегистраСведений И СтрокаТЧ.СтрокаПараметрыСоединенияСИсточником="" Тогда
					СтрокаТЧ.СтрокаПараметрыСоединенияСИсточником = ЗначениеВСтрокуВнутр(СтрокаТЧ.УдалитьПараметрыСоединенияСИсточником.Получить());
					ЕстьИзменения = Истина;
				ИначеЕсли ВидыСравнения.Найти(СтрокаТЧ.ВидСравнения)<>Неопределено И (НЕ ЗначениеЗаполнено(СтрокаТЧ.ПредопределенныйСписок)) И СтрокаТЧ.СтрокаСписокСравнения="" Тогда
					СтрокаТЧ.СтрокаСписокСравнения = ЗначениеВСтрокуВнутр(СтрокаТЧ.УдалитьСписокСравнения.Получить());
					ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЦикла;
			Попытка
				Если ЕстьИзменения Тогда
					ТекущийОбъект.Записать();
				КонецЕсли;
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось записать элемент справочника: '") + ВыборкаДетальныеЗаписи.Ссылка;
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура ОбработкаИсточниковДанныхБюджетирования() Экспорт 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ИсточникиДанныхДляРасчетовБюджетирования.Ссылка,
		|	фин_ИсточникиДанныхДляРасчетовБюджетирования.ИмяРегистра
		|ИЗ
		|	Справочник.фин_ИсточникиДанныхДляРасчетовБюджетирования КАК фин_ИсточникиДанныхДляРасчетовБюджетирования
		|ГДЕ
		|	НЕ фин_ИсточникиДанныхДляРасчетовБюджетирования.ПометкаУдаления
		|	И НЕ фин_ИсточникиДанныхДляРасчетовБюджетирования.ПроизвольныйЗапрос";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.ИмяРегистра = "" Тогда
				Продолжить;
			КонецЕсли;
			ТекущийОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ПостроительОтчета = Новый ПостроительОтчета;
			Попытка
				Справочники.фин_ИсточникиДанныхДляРасчетовБюджетирования.ЗаполнитьНастройкиПоИсточнику(ТекущийОбъект,,,ПостроительОтчета,Истина);
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось обновить элемент справочника: '") + ВыборкаДетальныеЗаписи.Ссылка;
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
			Попытка
				ТекущийОбъект.Записать();
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось записать элемент справочника: '") + ВыборкаДетальныеЗаписи.Ссылка;
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура ОбновитьПериодичностьВИсточникахДанных() Экспорт
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДатыОтбораДанныхИсточника.Ссылка
		|ИЗ
		|	Справочник.фин_ИсточникиДанныхДляРасчетовБюджетирования.ДатыОтбораДанныхИсточника КАК ДатыОтбораДанныхИсточника
		|ГДЕ
		|	ДатыОтбораДанныхИсточника.ПериодСмещения ССЫЛКА Перечисление.Периодичность";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОбъектСправочник = Выборка.Ссылка.ПолучитьОбъект();
			
			Для Каждого СтрокаТЧ Из ОбъектСправочник.ДатыОтбораДанныхИсточника Цикл
				Если ТипЗнч(СтрокаТЧ.ПериодСмещения)=Тип("ПеречислениеСсылка.Периодичность") Тогда
					Если ЗначениеЗаполнено(СтрокаТЧ.ПериодСмещения) Тогда
						ИмяЭлемента = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаТЧ.ПериодСмещения);
						СтрокаТЧ.ПериодСмещения = Перечисления.фин_Периодичность[ИмяЭлемента];
					Иначе
						СтрокаТЧ.ПериодСмещения = Перечисления.фин_Периодичность.ПустаяСсылка();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			
			Попытка
				ОбъектСправочник.Записать();		
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось обновить источник данных расчетов бюджетирования'")+Строка(Выборка.Ссылка);
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла
		
	КонецПроцедуры
	
	
	#КонецОбласти
	
	// Возвращает номер версии ИБ, с которой выполнялось обновление на текущую версию ИБ.
	// У пользователя должно быть право "Администрирование данных".
	//
	// Возвращаемое значение:
	//  Строка, Неопределено - Номер предыдущей версии ИБ.
	//
	Функция ПолучитьПредыдущуюВерсиюИБ() Экспорт
		
		ПредыдущаяВерсияИБ = Неопределено;
		
		Попытка
			ПредыдущаяВерсияИБ = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НомерПредыдущейВерсииИБ", "", Неопределено);
		Исключение
			ЗаписьЖурналаРегистрации(
			"ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Ошибка, , ,
			"При получении предыдущего номера версии ИБ возникла ошибка: " + ИнформацияОбОшибке()); 		
		КонецПопытки;
		
		Возврат ПредыдущаяВерсияИБ;
		
	КонецФункции
	
	// Сохраняет номер версии ИБ, с которой выполнялось обновление на текущую версию ИБ.
	//
	// Параметры:
	//  ТекущаяВерсияИБ - Строка - Версия, которая была до начала обновления.
	//
	Процедура СохранитьПредыдущуюВерсиюИБ(Знач ВерсияИБ)
		
		Попытка
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НомерПредыдущейВерсииИБ", "", ВерсияИБ,
			"Номер версии ИБ, с которой выполнялось обновление на текущую версию ИБ.");
		Исключение 
			ЗаписьЖурналаРегистрации(
			"ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Ошибка, , ,
			"При сохранении предыдущего номера версии ИБ возникла ошибка: " + ИнформацияОбОшибке()); 
		КонецПопытки;
		
	КонецПроцедуры
	
	
	Функция ЗаписатьДокументБезПроведения(ОбъектДокумент) Экспорт
		
		ОбъектДокумент.ОбменДанными.Загрузка = Истина;
		ОбъектДокумент.Записать(РежимЗаписиДокумента.Запись);
		
	КонецФункции
	
	
	Функция ПровестиДокумент(ОбъектДокумент) Экспорт
		
		ОбъектДокумент.ДополнительныеСвойства.Вставить("ВыполненаПроверкаЗаполнения", Истина);
		ОбъектДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
	КонецФункции
	
	
	Функция ТекстОшибкиПриЗаписиДокумента(Знач СсылкаДокумент, Знач ОписаниеОшибки) Экспорт
		
		ТекстОшибки = НСтр(
		"ru = 'Не удалось записать документ ""%1"" по причине:
		|%2'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СсылкаДокумент, ОписаниеОшибки);
		
		Возврат ТекстОшибки;
		
	КонецФункции
	
	Функция ТекстОшибкиРучнаяКорректировкаДокумента(Знач СсылкаДокумент) Экспорт
		
		ТекстОшибки = НСтр(
		"ru = 'Не удалось провести документ ""%1"", так как его движения скорректированы вручную.
		|Пожалуйста, самостоятельно обновите движения данного документа.'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СсылкаДокумент);
		
		Возврат ТекстОшибки;
		
	КонецФункции
	
	
	Процедура ДобавитьСведенияОКоэффициентеСтавкиРефинансированияНБДляРасчетаПени(Период, Организация, ВидНалога, Коэффициент) Экспорт
		
		НаборЗаписей = РегистрыСведений.КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.ВидНалога.Установить(ВидНалога, Истина);
		НаборЗаписей.Отбор.Организация.Установить(Организация, Истина);
		НаборЗаписей.Отбор.Период.Установить(Период, Истина);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			Движение     = НаборЗаписей.Добавить();
			// Свойства
			Движение.Период   = Период;
			// Измерения
			Движение.Организация = Организация;
			Движение.ВидНалога  = ВидНалога;
			// Ресурсы
			Движение.Коэффициент = Коэффициент;
			Попытка
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
			Исключение
				Сообщить("При записи данных регистра сведений ""Коэффициенты ставки рефинансирования НБ для расчета пени"" произошли ошибки:" + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// ОБНОВЛЕНИЕ СЧЕТОВ ФАКТУР ПРИ ПОЯВЛЕНИИ ЭСФ
	
	// Заполняет реквизиты ВидСчетаФактуры, ДатаСовершенияОборотаПоРеализации, СпособВыставления или СпособПолучения.
	//
	// Параметры:
	//  Объект - ДокументОбъект.СчетФактураВыданный - Заполняемый счет-фактура.
	//  ДатаДокументаОснования - Дата - Используется для заполнения ДатаСовершенияОборотаПоРеализации.
	//
	Процедура ЗаполнитьРеквизитыСчетаФактуры(Объект, Знач ДатаДокументаОснования) Экспорт
		
		// Заполнить реквизит СпособВыставления или СпособПолучения.
		ИмяРеквизита = ?(ТипЗнч(Объект) = Тип("ДокументОбъект.СчетФактураВыданный"), "СпособВыставления", "СпособПолучения");
		Если НЕ ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
			Объект[ИмяРеквизита] = Перечисления.СпособыОбменаДокументами.Бумажно;
		КонецЕсли;
		
		// Заполнить реквизит ВидСчетаФактуры.
		Если НЕ ЗначениеЗаполнено(Объект.ВидСчетаФактуры) Тогда
			Если Объект.УдалитьДополнительная Тогда
				Объект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный;
			Иначе
				Объект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Обычный;
			КонецЕсли;
		КонецЕсли;
		
		// Заполнить реквизит ДатаСовершенияОборотаПоРеализации.
		Если НЕ ЗначениеЗаполнено(Объект.ДатаСовершенияОборотаПоРеализации) Тогда
			Если ЗначениеЗаполнено(ДатаДокументаОснования) Тогда
				Объект.ДатаСовершенияОборотаПоРеализации = ДатаДокументаОснования;
			Иначе
				Объект.ДатаСовершенияОборотаПоРеализации = Объект.Дата;
			КонецЕсли;
		КонецЕсли;	
		
	КонецПроцедуры
	
	
	Функция РазличияДвиженийСчетаФактурыВыданногоДопустимы(Знач КоллекцияСтарыхДвижений, Знач КоллекцияНовыхДвижений) Экспорт
		
		РазличияДопустимы = Ложь;
		
		Если КоллекцияСтарыхДвижений.Количество() = КоллекцияНовыхДвижений.Количество() Тогда
			
			РазличияДопустимы = Истина;
			
			// Перебрать все строки движений.
			Для Индекс = 0 По КоллекцияСтарыхДвижений.Количество() - 1 Цикл
				
				СтароеДвижение = КоллекцияСтарыхДвижений[Индекс];
				НовоеДвижение = КоллекцияНовыхДвижений[Индекс];
				
				// Проверить совпадение данных, учитывая непроверяемые данные.
				Для Каждого Колонка Из КоллекцияСтарыхДвижений.Колонки Цикл
					
					Если Колонка.Имя = "Период" 
						ИЛИ Колонка.Имя = "СчетФактура" 
						ИЛИ Колонка.Имя = "ОборотПоРеализацииРегл" 
						ИЛИ Колонка.Имя = "ОборотПоРеализацииВВалютеДоговора" Тогда	
						
						// ОборотПоРеализацииРегл и ОборотПоРеализацииВВалютеДоговора проверяются ниже.
						// Период не проверяется, т.к. в регламентированной отчетности ничего не изменится.
						// СчетФактура не проверяется, т.к. он мог измениться с пустого на заполненный.
						
						Продолжить;
						
					КонецЕсли;	
					
					Если СтароеДвижение[Колонка.Имя] = НовоеДвижение[Колонка.Имя] Тогда
						// Значения в колонках совпадают.
						РазличияДопустимы = Истина;
					Иначе
						// Значения в колонках различаются.
						РазличияДопустимы = Ложь;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ РазличияДопустимы Тогда
					Прервать;
				КонецЕсли;
				
				// Проверить ОборотПоРеализацииРегл и ОборотПоРеализацииВВалютеДоговора.
				Если СтароеДвижение.ОборотПоРеализацииВВалютеДоговора = НовоеДвижение.ОборотПоРеализацииВВалютеДоговора
					И СтароеДвижение.ОборотПоРеализацииРегл = НовоеДвижение.ОборотПоРеализацииРегл Тогда
					
					// Данная ситуация будет при повторном запуске обработки обновления.
					РазличияДопустимы = Истина;
					
				ИначеЕсли СтароеДвижение.ОборотПоРеализацииВВалютеДоговора = 0 
					И СтароеДвижение.ОборотПоРеализацииРегл = НовоеДвижение.ОборотПоРеализацииРегл Тогда
					
					// Данная ситуация будет при обновлении с 2.0.16, т.к. в 2.0.16 не было ресурса ОборотПоРеализацииВВалютеДоговора.
					// Старый оборот по реализации в валюте регл. учета совпадает с новым, поэтому ситуация корректна.
					РазличияДопустимы = Истина;
					
				ИначеЕсли СтароеДвижение.ОборотПоРеализацииВВалютеДоговора = НовоеДвижение.ОборотПоРеализацииРегл Тогда
					
					// Данная ситуация будет при обновлении с тестовых версий 2.0.17 и 3.0.1.
					РазличияДопустимы = Истина;	
					
				Иначе
					
					// Во всех остальных ситуациях считается, что различия не допустимы.
					РазличияДопустимы = Ложь;	
					
				КонецЕсли;
				
				Если НЕ РазличияДопустимы Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			РазличияДопустимы = Ложь;
			
		КонецЕсли;
		
		Возврат РазличияДопустимы;
		
	КонецФункции
	
	Процедура ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную() Экспорт 
		
		Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
			Возврат;
		КонецЕсли;
		
		Попытка 
			
			ОбъектОбменЭСФ = Справочники.ВнешниеОбработки.ОбработкаОбменЭСФ.ПолучитьОбъект();
			
			ОбъектОбменЭСФ.ВнешнийОбъектИспользовать = 0;
			ОбъектОбменЭСФ.ОбменДанными.Загрузка     = Истина;
			ОбъектОбменЭСФ.Записать();
			
		Исключение
			
			ТекстСообщения = НСтр(
			"ru = 'Не удалось обновить элемент ""Обработка ""Обмен электронными счетами-фактурами"""" справочника ""Дополнительные отчеты и обработки"",
			|так как при обновлении произошла ошибка:
			|%1'");
			
			Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Комментарий);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось обновить ""Обработка ""Обмен электронными счетами-фактурами"""".'"), 
			УровеньЖурналаРегистрации.Ошибка, , Справочники.ВнешниеОбработки.ОбработкаОбменЭСФ, Комментарий);
			
			Сообщить(Комментарий);
			
		КонецПопытки; 
		
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	
	// Показывает сообщение и создает запись в журнале регистрации.
	//
	// Параметры:
	//  Текст - Строка - Текст сообщения.
	//  Ссылка - ЛюбаяСсылка - Ссылка на объект с которым будет связано сообщение.
	//  ПоказатьСообщение - Булево - Если Истина, то будет показано сообщение.
	//  ЗаписатьЖурналРегистрации - Булево - Если Истина, то будет создана запись журнала регистрации.
	//  ИмяСобытияЖурналаРегистрации - Строка - Имя события, которое будет в журнале регистрации.
	//   Параметр должен быть обязательно указан, если ЗаписатьЖурналРегистрации = Истина.
	//  УровеньСобытияЖурналаРегистрации - УровеньЖурналаРегистрации - Уровень события журнала регистрации.
	//   По умолчанию уровень: Предупреждение.
	//
	Процедура СообщитьПользователю(
		Текст, 
		Ссылка = Неопределено, 
		ПоказатьСообщение = Истина, 
		ЗаписатьЖурналРегистрации = Истина, 
		ИмяСобытияЖурналаРегистрации = "",
		УровеньСобытияЖурналаРегистрации = Неопределено) Экспорт
		
		УровеньСобытия = ?(УровеньСобытияЖурналаРегистрации = Неопределено, УровеньЖурналаРегистрации.Предупреждение, УровеньСобытияЖурналаРегистрации);
		
		Если ПоказатьСообщение Тогда
			
			Если УровеньСобытия = УровеньЖурналаРегистрации.Ошибка Тогда
				Статус = СтатусСообщения.ОченьВажное;
			ИначеЕсли УровеньСобытия = УровеньЖурналаРегистрации.Предупреждение Тогда
				Статус = СтатусСообщения.Внимание;
			Иначе
				Статус = СтатусСообщения.Информация;
			КонецЕсли;
			
			Сообщить(Текст, Статус);
			
		КонецЕсли;
		
		Если ЗаписатьЖурналРегистрации Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации, УровеньСобытия, , Ссылка, Текст);	
		КонецЕсли;
		
	КонецПроцедуры
	
	
	Процедура ОбработкаРегистраРасчетРаспределенияКосвенныхРасходов_КорректировкаИзмерений()
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасчетРаспределенияКосвенныхРасходов.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.РасчетРаспределенияКосвенныхРасходов КАК РасчетРаспределенияКосвенныхРасходов
		|ГДЕ
		|	(РасчетРаспределенияКосвенныхРасходов.УдалитьСтатьяЗатратРаспределения <> &ПустаяСтатьяЗатрат
		|			ИЛИ РасчетРаспределенияКосвенныхРасходов.УдалитьСтруктурноеПодразделениеРаспределения <> &ПустоеСтруктурноеПодразделение
		|			ИЛИ РасчетРаспределенияКосвенныхРасходов.УдалитьРасчетБазы)";
		
		Запрос.УстановитьПараметр("ПустаяСтатьяЗатрат", Справочники.СтатьиЗатрат.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустоеСтруктурноеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
		
		ВыборкаЗаписей = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.РасчетРаспределенияКосвенныхРасходов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаЗаписей.Регистратор);
			НаборЗаписей.Прочитать();
			
			Для каждого Запись Из НаборЗаписей Цикл
				Запись.РасчетБазы                            = Запись.УдалитьРасчетБазы;
				Запись.СтатьяЗатратРаспределения             = Запись.УдалитьСтатьяЗатратРаспределения;
				Запись.СтруктурноеПодразделениеРаспределения = Запись.УдалитьСтруктурноеПодразделениеРаспределения;
			КонецЦикла;
			
			Попытка
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
				НаборЗаписей.Очистить();
			Исключение
				Сообщить("при записи набора записей регистра сведений ""Расчет распределения косвенных расходов"" произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	
	Процедура ЗаполнитьОборотПоРеализацииСчетаФактуры(ОбъектСчетФактура) Экспорт
		
		МассивИменТабличныхЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товары,Услуги,ОС,НМА", ",");
		
		Для Каждого ИмяТабличнойЧасти Из МассивИменТабличныхЧастей Цикл				
			Для Каждого СтрокаТабличнойЧасти Из ОбъектСчетФактура[ИмяТабличнойЧасти] Цикл						
				УчетНДСиАкциза.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, ОбъектСчетФактура);			
			КонецЦикла;	
		КонецЦикла;
		
	КонецПроцедуры
	
	Функция ДвиженияДокументаСчетФактураВыданный(Ссылка) Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияСчетовФактурВыданных.Период,
		|	СведенияСчетовФактурВыданных.Регистратор,
		|	СведенияСчетовФактурВыданных.НомерСтроки КАК НомерСтроки,
		|	СведенияСчетовФактурВыданных.Активность,
		|	СведенияСчетовФактурВыданных.Налогоплательщик,
		|	СведенияСчетовФактурВыданных.Организация,
		|	СведенияСчетовФактурВыданных.СтруктурнаяЕдиница,
		|	СведенияСчетовФактурВыданных.СтавкаНДС,
		|	СведенияСчетовФактурВыданных.Контрагент,
		|	СведенияСчетовФактурВыданных.ТМЗ,
		|	СведенияСчетовФактурВыданных.Покупатель,
		|	СведенияСчетовФактурВыданных.СтавкаАкциза,
		|	СведенияСчетовФактурВыданных.СчетФактура,
		|	СведенияСчетовФактурВыданных.СуммаВВалютеДоговора,
		|	СведенияСчетовФактурВыданных.СуммаНДСВВалютеДоговора,
		|	СведенияСчетовФактурВыданных.СуммаАкцизаВВалютеДоговора,
		|	СведенияСчетовФактурВыданных.СуммаРегл,
		|	СведенияСчетовФактурВыданных.СуммаНДСРегл,
		|	СведенияСчетовФактурВыданных.ОборотПоРеализацииРегл,
		|	СведенияСчетовФактурВыданных.СуммаАкцизаРегл,
		|	СведенияСчетовФактурВыданных.ОборотПоРеализацииВВалютеДоговора,
		|	СведенияСчетовФактурВыданных.СтранаНазначения,
		|	СведенияСчетовФактурВыданных.УчастникСовместнойДеятельности
		|ИЗ
		|	РегистрНакопления.СведенияСчетовФактурВыданных КАК СведенияСчетовФактурВыданных
		|ГДЕ
		|	СведенияСчетовФактурВыданных.Регистратор = &Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Запрос.УстановитьПараметр("Регистратор", Ссылка);	
		ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
		
		Возврат ТаблицаЗначений;
		
	КонецФункции
	
	
	Процедура ЗаполнитьПраваДоступаКРабочемуСтолу(РольДляОбработки = Неопределено)  Экспорт
		НаборЗаписей = РегистрыСведений.общ_НастройкиДоступаКРабочемуСтолу.СоздатьНаборЗаписей();
		Если РольДляОбработки<>Неопределено Тогда
			РольПользователя = Перечисления.НаборПравПользователей[РольДляОбработки];
			НаборЗаписей.Отбор.ПраваДоступа.Установить(РольПользователя);
		КонецЕсли;
		МакетПрава = Обработки.ПанельФункций.ПолучитьМакет("ДоступностьСтраницПоРолям");
		СоответствиеРазделовИСтрокМакета = Новый Соответствие;
		Для Инд = 2 По МакетПрава.ВысотаТаблицы Цикл
			ОбластьМакета = МакетПрава.Область("R"+Строка(Инд)+"C1").Текст;
			Если ОбластьМакета<>"" И ЗначениеЗаполнено(ОбластьМакета) Тогда
				Попытка
					Раздел = Справочники.общ_РазделыРабочегоСтола[ОбластьМакета];
					СоответствиеРазделовИСтрокМакета.Вставить(Инд,Раздел);
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		Для Инд = 2 По МакетПрава.ШиринаТаблицы Цикл
			ОбластьРоль = МакетПрава.Область("R1C"+Строка(Инд)).Текст;
			Если РольДляОбработки<>Неопределено И РольДляОбработки <> ОбластьРоль Тогда
				Продолжить;
			КонецЕсли;
			Если ОбластьРоль<>"" И ЗначениеЗаполнено(ОбластьРоль) Тогда
				Если Метаданные.Перечисления.НаборПравПользователей.ЗначенияПеречисления.Найти(ОбластьРоль)=Неопределено Тогда
					Продолжить;
				КонецЕсли;
				РольПользователя = Перечисления.НаборПравПользователей[ОбластьРоль];
			Иначе
				Продолжить;
			КонецЕсли;
			Для ИндексРаздел = 2 По МакетПрава.ВысотаТаблицы Цикл
				ОбластьПраво = МакетПрава.Область("R"+Строка(ИндексРаздел)+"C"+Строка(Инд)).Текст;
				Если ОбластьПраво="+" Тогда
					НЗ = НаборЗаписей.Добавить();
					НЗ.Раздел = СоответствиеРазделовИСтрокМакета.Получить(ИндексРаздел);
					НЗ.ПраваДоступа = РольПользователя;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось обновить права доступа к рабочему столу: "+ОписаниеОшибки());
		КонецПопытки;
	КонецПроцедуры
	
	Функция ПолучитьСписокРазрезовБюджета(Бюджет)
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФинансовыеПоказатели.Ссылка КАК Показатель
		|ПОМЕСТИТЬ ВТ_Показатели
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели КАК ФинансовыеПоказатели
		|		ПО СтатьиБюджета.ФинансовыйПоказатель = ФинансовыеПоказатели.Ссылка
		|ГДЕ
		|	СтатьиБюджета.Владелец = &Владелец
		|	И НЕ СтатьиБюджета.ЭтоГруппа
		|	И НЕ СтатьиБюджета.ПометкаУдаления
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатьиОборотовРазрезы.Измерение,
		|	СтатьиОборотовРазрезы.Разрез
		|ПОМЕСТИТЬ ВТ_Разрезы
		|ИЗ
		|	Справочник.фин_СтатьиБюджета КАК СтатьиБюджета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ФинансовыеПоказатели.РазрезыУчета КАК СтатьиОборотовРазрезы
		|		ПО СтатьиБюджета.ФинансовыйПоказатель = СтатьиОборотовРазрезы.Ссылка
		|ГДЕ
		|	СтатьиБюджета.Владелец = &Владелец
		|	И НЕ СтатьиБюджета.ЭтоГруппа
		|	И НЕ СтатьиБюджета.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.УправленческоеПодразделение),
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.фин_ВидыСубконтоБюджетирования.ЦФО)
		|ИЗ
		|	РегистрНакопления.фин_ОборотыБюджетов.Обороты КАК Обороты
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Показатели
		|		ПО Обороты.ФинансовыйПоказатель = ВТ_Показатели.Показатель
		|ГДЕ Обороты.УправленческоеПодразделение <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	ЗНАЧЕНИЕ(Перечисление.фин_ФактическиеПоказателиБюджетирования.Проект),
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.фин_ВидыСубконтоБюджетирования.Проекты)
		|ИЗ
		|	РегистрНакопления.фин_ОборотыБюджетов.Обороты КАК Обороты
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Показатели
		|		ПО Обороты.ФинансовыйПоказатель = ВТ_Показатели.Показатель
		|ГДЕ Обороты.Проект <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазрезыУчета.Измерение,
		|	РазрезыУчета.Разрез,
		|	РазрезыУчета.Разрез.ПредставлениеДополнительногоРеквизита КАК Представление,
		|	ЕСТЬNULL(ПорядокРазрезов.НомерСтроки, 1000) КАК Порядок
		|ИЗ
		|	ВТ_Разрезы КАК РазрезыУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.фин_Бюджеты.РазрезыУчета КАК ПорядокРазрезов
		|		ПО РазрезыУчета.Измерение = ПорядокРазрезов.Измерение
		|			И (ПорядокРазрезов.Ссылка = &Владелец)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Запрос.УстановитьПараметр("Владелец", Бюджет);
		СписокРазрезов = Новый СписокЗначений;
		СписокРазрезов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Измерение"));
		Возврат СписокРазрезов;
	КонецФункции
	
	// Проверить легальность получения обновления.
	//
	// Параметры
	//  ТекущаяВерсияИБ  - Строка - номер версии ИБ.
	//
	// Возвращаемое значение:
	//   Булево   - Истина, если проверка завершилась успешно.
	//
	Функция ПроверитьЛегальностьПолученияОбновления(Знач ТекущаяВерсияИБ)
		
		Если ТекущаяВерсияИБ <> Метаданные.Версия И ТекущаяВерсияИБ <> "" Тогда
			Форма = Обработки.общ_ЛегальностьПолученияОбновлений.ПолучитьФорму();
			Форма.ПоказыватьПредупреждениеОПерезапуске = Истина;
			Результат = Форма.ОткрытьМодально();
			Если Результат <> Истина Тогда
				ЗавершитьРаботуСистемы(Ложь);
				Возврат Ложь;
			КонецЕсли; 
		КонецЕсли;
		Возврат Истина;
		
	КонецФункции 
	
	Функция НовоеИмя(ГруппаОбъектов,ТекстОбъект,СтруктураРезультатов)
		МассивПрефиксов = Новый Массив;
		МассивПрефиксов.Добавить("фин_");
		МассивПрефиксов.Добавить("усд_");
		МассивПрефиксов.Добавить("узп_");
		МассивПрефиксов.Добавить("ден_");
		МассивПрефиксов.Добавить("дог_");
		МассивПрефиксов.Добавить("общ_");
		ГруппаМетаданных = СтруктураРезультатов[ГруппаОбъектов];
		Для Каждого Префикс Из МассивПрефиксов Цикл
			Если Метаданные[ГруппаМетаданных].Найти(Префикс+ТекстОбъект)<>Неопределено Тогда
				Возврат Префикс+ТекстОбъект;
			КонецЕсли;
		КонецЦикла;
		Возврат ТекстОбъект;
	КонецФункции
	
	Функция ПроверкаСуществования(ГруппаОбъектов,ТекстОбъект,ПозицияТочки,МассивСлужебныхИСтандартныхПолей,СтруктураРезультатов)
		Если ТекстОбъект="" ИЛИ МассивСлужебныхИСтандартныхПолей.Найти(ТекстОбъект)<>Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		ГруппаМетаданных = СтруктураРезультатов[ГруппаОбъектов];
		Если Метаданные[ГруппаМетаданных].Найти(ТекстОбъект)=Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	КонецФункции
	
	Функция ПолучитьПредшествующийТекст(ТекстСтроки,ПозицияТочки,Спецсимволы)
		НоваяСтрока = "";
		Для Инд = 1 По (ПозицияТочки-1) Цикл
			Символ = Сред(ТекстСтроки,ПозицияТочки-Инд,1);
			Если Спецсимволы.Найти(Символ)= Неопределено Тогда
				НоваяСтрока = Символ+НоваяСтрока;
			Иначе
				Возврат НоваяСтрока;
			КонецЕсли;
		КонецЦикла;
		Возврат НоваяСтрока;
	КонецФункции
	
	Функция ПолучитьСледующийТекст(ТекстСтроки,ПозицияТочки,Спецсимволы)
		НоваяСтрока = "";
		Для Инд = ПозицияТочки+1 По СтрДлина(ТекстСтроки) Цикл
			Символ = Сред(ТекстСтроки,Инд,1);
			Если Спецсимволы.Найти(Символ)= Неопределено Тогда
				НоваяСтрока = НоваяСтрока+Символ;
			Иначе
				Возврат НоваяСтрока;
			КонецЕсли;
		КонецЦикла;
		Возврат НоваяСтрока;
	КонецФункции
	
	Функция ПолучитьНедопустимыеСимволы(БезЧисловых=Ложь)
		МассивНедопустимыхСимволов = Новый Массив;
		МассивНедопустимыхСимволов.Добавить("»");
		МассивНедопустимыхСимволов.Добавить("«");
		МассивНедопустимыхСимволов.Добавить("-");
		МассивНедопустимыхСимволов.Добавить("/");
		МассивНедопустимыхСимволов.Добавить("*");
		МассивНедопустимыхСимволов.Добавить("+");
		МассивНедопустимыхСимволов.Добавить(",");
		МассивНедопустимыхСимволов.Добавить(".");
		МассивНедопустимыхСимволов.Добавить("?");
		МассивНедопустимыхСимволов.Добавить("(");
		МассивНедопустимыхСимволов.Добавить(")");
		МассивНедопустимыхСимволов.Добавить("=");
		МассивНедопустимыхСимволов.Добавить("/");
		МассивНедопустимыхСимволов.Добавить("\");
		МассивНедопустимыхСимволов.Добавить("|");
		МассивНедопустимыхСимволов.Добавить("");
		МассивНедопустимыхСимволов.Добавить("""");
		МассивНедопустимыхСимволов.Добавить("'");
		МассивНедопустимыхСимволов.Добавить("!");
		МассивНедопустимыхСимволов.Добавить("#");
		МассивНедопустимыхСимволов.Добавить(",");
		МассивНедопустимыхСимволов.Добавить("%");
		МассивНедопустимыхСимволов.Добавить("$");
		МассивНедопустимыхСимволов.Добавить("^");
		МассивНедопустимыхСимволов.Добавить("&");
		МассивНедопустимыхСимволов.Добавить(";");
		МассивНедопустимыхСимволов.Добавить(":");
		МассивНедопустимыхСимволов.Добавить("[");
		МассивНедопустимыхСимволов.Добавить("]");
		МассивНедопустимыхСимволов.Добавить("{");
		МассивНедопустимыхСимволов.Добавить("}");
		МассивНедопустимыхСимволов.Добавить("`");
		МассивНедопустимыхСимволов.Добавить("~");
		МассивНедопустимыхСимволов.Добавить("<");
		МассивНедопустимыхСимволов.Добавить(">");
		МассивНедопустимыхСимволов.Добавить(Символы.ПС);
		МассивНедопустимыхСимволов.Добавить(Символы.ВТаб);
		МассивНедопустимыхСимволов.Добавить(Символы.Таб);
		Если НЕ БезЧисловых Тогда
			МассивНедопустимыхСимволов.Добавить("0");
			МассивНедопустимыхСимволов.Добавить("1");
			МассивНедопустимыхСимволов.Добавить("2");
			МассивНедопустимыхСимволов.Добавить("3");
			МассивНедопустимыхСимволов.Добавить("4");
			МассивНедопустимыхСимволов.Добавить("5");
			МассивНедопустимыхСимволов.Добавить("6");
			МассивНедопустимыхСимволов.Добавить("7");
			МассивНедопустимыхСимволов.Добавить("8");
			МассивНедопустимыхСимволов.Добавить("9");
		КонецЕсли;
		МассивНедопустимыхСимволов.Добавить(" ");
		Возврат МассивНедопустимыхСимволов;
	КонецФункции
	
	
	//Процедура выводит окно содержащие сообщение о 
	//	необходимости перезаполнения графиков работы
	Процедура СообщитьоГрафикахРаботы()
		
		ГрафикиРаботы = Новый Массив;
		
		//Надём все графики работы с видом "пятидневка" и "шестидневка"
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ГрафикиРаботы.Ссылка,
		|	ГрафикиРаботы.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ГрафикиРаботы КАК ГрафикиРаботы
		|ГДЕ
		|	ГрафикиРаботы.ВидГрафика В(&ГрафикиРаботы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		
		ГрафикиРаботы.Добавить(Перечисления.ВидыРабочихГрафиков.Пятидневка);
		ГрафикиРаботы.Добавить(Перечисления.ВидыРабочихГрафиков.Шестидневка);
		
		Запрос.УстановитьПараметр("ГрафикиРаботы", ГрафикиРаботы);
		
		Результат = Запрос.Выполнить();
		
		//Если нашлись нужные графики работы тогда
		Если Не Результат.Пустой() Тогда 
			
			Выборка = Результат.Выбрать();
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
			ОбработкаКомментариев.УдалитьСообщения();
			
			//Выведем сообщение
			РаботаССообщениями.КомментарийРасчета("После внесения изменений в регламентированный производственный календарь
			|необходимо перезаполнить графики работы:",,,, Перечисления.ВидыСообщений.Раздел, , -100000000);
			
			Счетчик = 1;
			
			Пока Выборка.Следующий() Цикл 
				//Выведем для удобства пользователя ссылки на все найдённые графики работы
				РаботаССообщениями.КомментарийРасчета(Строка(Счетчик) + ". ",, Выборка.Наименование, Выборка.Ссылка, Перечисления.ВидыСообщений.Информация, ,); // -100000000 - чтобы было самое первое сообщение
				Счетчик = Счетчик + 1;			
			КонецЦикла;
			
			//Выведем окно с предупреждением
			ОбработкаКомментариев.ПоказатьСообщения();
			
		КонецЕсли;
		
	КонецПроцедуры //СообщитьоГрафикахРаботы()
	
	Функция ПолучитьГруппуОСПлановая()
		ИмяГруппы = "Перенесенные из основных средств в регистрации договоров";
		Найдено = Справочники.фин_ПлановаяНоменклатура.НайтиПоНаименованию(ИмяГруппы);
		Если ЗначениеЗаполнено(Найдено) Тогда
			Возврат Найдено;
		КонецЕсли;
		НоваяГруппа = Справочники.фин_ПлановаяНоменклатура.СоздатьГруппу();
		НоваяГруппа.Наименование = ИмяГруппы;
		НоваяГруппа.УстановитьНовыйКод();
		НоваяГруппа.Записать();
		Возврат НоваяГруппа.Ссылка;
	КонецФункции
	
	// Процедура присвоения идентификатора
	//
	Процедура ПрисвоитьИдентификатор(Идентификатор) Экспорт
		Цифра = Число(Идентификатор);
		Цифра = Цифра + 1;
		Идентификатор = Строка(Цифра);
	КонецПроцедуры //ПрисвоитьИдентификатор
	
	// Функция получает макет описания обновлений и заполняет его параметры расшифровок.
	//
	// Параметры:
	//  ФормаОписаниеОбновлений - форма обработки "ОписаниеОбновлений", 
	//                            назначается владельцем открываемых из нее форм.
	//
	// Возвращаемое значение:
	//  ТабличныйДокумент - макет "ОписаниеОбновлений" с заполненными параметрами расшифровок.
	//
	Функция ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений) Экспорт
		
		МакетОписаниеОбновлений = ПолучитьМакет("ОписаниеОбновлений");
		Параметры               = МакетОписаниеОбновлений.Параметры;
		
		// Заполнение параметров расшифровок макета описания обновлений,
		
		//Параметры.ФормаПодбораВалют         = Справочники.Валюты.ПолучитьФорму("ФормаПодбораИзКлассификатора");
		//Параметры.ФормаСпискаВалют          = Справочники.Валюты.ПолучитьФормуСписка();
		//Параметры.ФормаПодбораЕдиниц        = Справочники.КлассификаторЕдиницИзмерения.ПолучитьФорму("ФормаПодбораИзКлассификатора");
		//Параметры.ФормаСпискаЕдиниц         = Справочники.КлассификаторЕдиницИзмерения.ПолучитьФормуСписка();
		//Параметры.ФормаПодбораОКСМ          = Справочники.КлассификаторСтранМира.ПолучитьФорму("ФормаПодбораИзКлассификатора");
		//Параметры.ФормаСпискаОКСМ           = Справочники.КлассификаторСтранМира.ПолучитьФормуСписка();
		//Параметры.ФормаПодбораДокументовУдостоверяющихЛичность = Справочники.ДокументыУдостоверяющиеЛичность.ПолучитьФорму("ФормаПодбораИзКлассификатора");
		//Параметры.ФормаСпискаДокументовУдостоверяющихЛичность  = Справочники.ДокументыУдостоверяющиеЛичность.ПолучитьФормуСписка();
		//
		//Параметры.ФормаСпискаКонтрагентов   = Справочники.Контрагенты.ПолучитьФормуСписка();
		//Параметры.ФормаСпискаНоменклатуры   = Справочники.Номенклатура.ПолучитьФормуСписка();
		//Параметры.ФормаСпискаТиповЦенНоменклатуры = Справочники.ТипыЦенНоменклатуры.ПолучитьФормуСписка();
		//
		//Параметры.ФормаСпискаУчетнаяПолитикаБухгалтерскийУчет = РегистрыСведений.УчетнаяПолитикаБухгалтерскийУчет.ПолучитьФормуСписка();
		//Параметры.ФормаСпискаУчетнаяПолитикаНалоговыйУчет 	  = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.ПолучитьФормуСписка(); 	
		//
		//Организации = Справочники.Организации.Выбрать();
		//Организация = Неопределено;
		//
		//Если Организации.Следующий() Тогда
		//	Организация = Организации.ПолучитьОбъект();
		//КонецЕсли;
		//
		//Если Организация = Неопределено Тогда
		//	Параметры.ФормаНовойОрганизации = "ФормаНовойОрганизации";
		//Иначе
		//	Параметры.ФормаНовойОрганизации = Организация.ПолучитьФорму();
		//КонецЕсли;
		//
		//Параметры.ФормаСпискаОрганизаций    = Справочники.Организации.ПолучитьФормуСписка();
		//Параметры.ФормаСпискаСкладов        = Справочники.Склады.ПолучитьФормуСписка();
		//
		//Параметры.ФормаСпискаПользователей  = Справочники.Пользователи.ПолучитьФормуСписка();
		//Параметры.ФормаПользователя         = глТекущийПользователь;
		
		Возврат МакетОписаниеОбновлений;
		
	КонецФункции
	
	// Процедура выводит описания изменений в указанном релизе
	//
	// Параметры
	//  НомерРелиза  – Строка - номер релиза, для которого выводится описание
	//
	Процедура ВывестиОписаниеИзменений(НомерРелиза, ДокументОписаниеОбновлений, МакетОписаниеОбновлений)
		
		ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Шапка" + НомерРелиза));
		ДокументОписаниеОбновлений.НачатьГруппуСтрок("Версия" + НомерРелиза);
		ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Версия" + НомерРелиза));
		ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
		ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
		
	КонецПроцедуры // ВывестиОписаниеИзменений()
	
	// Функция создает элемент справочника Валюты, если такого нет.
	//
	// Параметры:
	//  Код -                     - значение соответствующего реквизита справочника,
	//  Наименование              - значение соответствующего реквизита справочника,
	//  НаименованиеПолное        - значение соответствующего реквизита справочника,
	//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
	//
	// Возвращаемое значение:
	//  Ссылка на добавленный или существующий элемент.
	//
	Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском) Экспорт
		
		Ссылка = Справочники.Валюты.НайтиПоКоду(Код);
		
		Если Ссылка.Пустая() Тогда
			
			СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();
			
			СправочникОбъект.Код                       = Код;
			СправочникОбъект.БуквенныйКод              = Наименование;
			СправочникОбъект.Наименование              = Наименование;
			СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
			СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;
			
			ЗаписатьСправочникОбъект(СправочникОбъект);
			
			Ссылка = СправочникОбъект.Ссылка;
			
			// установим курс и кратность = 1 на 1 января 1980
			ОбщегоНазначения.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);
			
		КонецЕсли;
		
		Возврат Ссылка;
		
	КонецФункции // НайтиСоздатьВалюту()
	
	// Функция создает элемент справочника КлассификаторЕдиницИзмерения, если такого нет.
	//
	// Параметры:
	//  Код -                     - значение соответствующего реквизита справочника,
	//  Наименование              - значение соответствующего реквизита справочника,
	//  НаименованиеПолное        - значение соответствующего реквизита справочника.
	//
	// Возвращаемое значение:
	//  Ссылка на добавленный или существующий элемент.
	//
	Функция НайтиСоздатьЕдиницу(Код, Наименование, НаименованиеПолное) Экспорт
		
		Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Код);
		
		Если Ссылка.Пустая() Тогда
			СправочникОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
			
			СправочникОбъект.Код                       = Код;
			СправочникОбъект.Наименование              = Наименование;
			СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
			
			ЗаписатьСправочникОбъект(СправочникОбъект);
			
			Ссылка = СправочникОбъект.Ссылка;
		КонецЕсли;
		
		Возврат Ссылка;
		
	КонецФункции
	
	// Процедура устанавливает указанное значение указанной константы и выводит сообщение.
	// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
	//
	// Параметры:
	//  ИмяКонстанты      - имя константы, которую требуется установить.
	//  ЗначениеКонстанты - значение константы.
	//
	Процедура УстановитьКонстанту(ИмяКонстанты, ЗначениеКонстанты) Экспорт
		
		Если Константы[ИмяКонстанты].Получить() = ЗначениеКонстанты Тогда
			Возврат;
		КонецЕсли;
		
		Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);
		
		СтрСообщения = "Константе """ + Метаданные.Константы[ИмяКонстанты].Синоним + """ " +
		"назначено значение """ + ЗначениеКонстанты + """";
		
		Сообщить(СтрСообщения, СтатусСообщения.Обычное);
		
	КонецПроцедуры
	
	// Процедура записывает переданный справочник объект и выводит сообщение.
	// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
	//
	// Параметры:
	//  СправочникОбъект - объект, который требуется записать.
	//
	Процедура ЗаписатьСправочникОбъект(СправочникОбъект, Сообщать = Ложь) Экспорт
		
		Если НЕ СправочникОбъект.Модифицированность() Тогда
			Возврат;
		КонецЕсли;
		
		Если СправочникОбъект.ЭтоНовый () Тогда
			СтрСообщения1 = "Создан";
		Иначе
			СтрСообщения1 = "Обработан";
		КонецЕсли;
		
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения2 = "а группа";
		Иначе
			СтрСообщения2 = " элемент";
		КонецЕсли;
		
		СтрСообщения2 = СтрСообщения2 + " справочника """ + СправочникОбъект.Метаданные().Синоним + """: ";
		СтрСообщения3 = "наименование """ + СправочникОбъект.Наименование + """";
		
		Попытка
			СправочникОбъект.Записать();
			Если Сообщать = Истина Тогда
				Сообщить(СтрСообщения1 + СтрСообщения2 + "код """ + СправочникОбъект.ПолныйКод() + """, " + СтрСообщения3, СтатусСообщения.Обычное);
			КонецЕсли; 
			
		Исключение
			Сообщить("Не записан"  + СтрСообщения2 + СтрСообщения3 +
			Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
	КонецПроцедуры
	
	// Процедура заполняет по умолчанию необходимые данные
	// для отправки сообщений в службу технической поддержки.
	//
	Процедура ЗаполнитьПараметрыКонстантыОбращенияВОтделТехническойПоддержки()
		
		Перем СтруктураЗначения;
		
		Если ТипЗнч(Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить()) <> Тип("Структура") Тогда
			
			ОбщегоНазначения.ЗаполнитьСтруктуруДанныхНастройкиОбращенияВОтделТехподдержкиПоУмолчанию(СтруктураЗначения);
			
			СтрокаПараметровОтправки = СтруктураЗначения.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела");
			
			Если СтрокаПараметровОтправки <> Неопределено Тогда
				
				СтрокаПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1] = "hotline@1c.kz";
				
				Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Установить(Новый ХранилищеЗначения(СтруктураЗначения, Новый СжатиеДанных));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	// Установка границы запрета изменения данных
	//
	Процедура УстановитьДатуЗапретаРедактирования(ОбщаяДатаЗапрета)
		
		Набор = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
		НоваяЗапись = Набор.Добавить();
		НоваяЗапись.Активность = Истина;
		НоваяЗапись.ГраницаЗапретаИзменений = ОбщаяДатаЗапрета;
		Набор.Записать();
		
	КонецПроцедуры
	

// Процедура создает ставки НДС
//
Процедура НайтиСоздатьСтавкуНДС(Наименование,Ставка,ДляОсвобожденногоОборота = Ложь,МестоРеализацииНеРК = Ложь)
	
	Ссылка = Справочники.СтавкиНДС.НайтиПоНаименованию(Наименование,Истина);
	
	Если Ссылка.Пустая() ТОгда
		СправочникОбъект = Справочники.СтавкиНДС.СоздатьЭлемент();
		СправочникОбъект.Наименование = Наименование;
		СправочникОбъект.Ставка = Ставка;
		СправочникОбъект.ДляОсвобожденногоОборота = ДляОсвобожденногоОборота;
		СправочникОбъект.МестоРеализацииНеРК      = МестоРеализацииНеРК;
		ЗаписатьСправочникОбъект(СправочникОбъект);
	КонецЕсли;
	
КонецПроцедуры
	
	// Функция создает элементы справочника
	// "Группы налогового учета ФА"
	Функция НайтиСоздатьГуппуФАНУ(Наименование, Код, ВидУчетаВГруппеФА)
		
		Ссылка = Справочники.ГруппыНалоговогоУчетаФА.НайтиПоКоду(Код,Истина);
		
		Если Ссылка.Пустая() Тогда
			СправочникОбъект = Справочники.ГруппыНалоговогоУчетаФА.СоздатьЭлемент();
			СправочникОбъект.Код = Код;
			СправочникОбъект.Наименование = Наименование;
			СправочникОбъект.ВидУчетаВГруппеФА = ВидУчетаВГруппеФА;		
			ЗаписатьСправочникОбъект(СправочникОбъект);
			Ссылка = СправочникОбъект.Ссылка;
		КонецЕсли;
		
		Возврат Ссылка;
	КонецФункции
	
	// Процедура устанавливает значения "по умолчанию" для текущего пользователя
	//
	Процедура УстановитьЗначенияПоУмолчаниюДляТекущегоПользователя(ВалютаРегламентированногоУчета, ЕдиницаПоУмолчанию, Касса, Организация, Подразделение, ВидРеализации, ВидПоступления, Склад, ТипЦены, ВидОперацииОблагаемойАкцизом)
		
		Набор = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
		Набор.Отбор.Пользователь.Использование = Истина;
		Набор.Отбор.Пользователь.Значение      = глТекущийПользователь;
		
		//ОтражатьДокументыВНалоговомУчете
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОтражатьДокументыВНалоговомУчете;
		Запись.Значение     = Истина;
		
		//ОсновнаяВалютаВзаиморасчетов
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяВалютаВзаиморасчетов;
		Запись.Значение     = ВалютаРегламентированногоУчета;
		
		//ОсновнаяЕдиницаПоКлассификатору
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяЕдиницаПоКлассификатору;
		Запись.Значение     = ЕдиницаПоУмолчанию;
		
		//ОсновнаяОрганизация
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация;
		Запись.Значение     = Организация.Ссылка;
		
		//ОсновнаяСтавкаНДС
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяСтавкаНДС;
		Запись.Значение     = Справочники.СтавкиНДС.НайтиПоНаименованию("12%").Ссылка;
		
		//ОсновноеПодразделениеОрганизации
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделениеОрганизации;
		Запись.Значение     = Подразделение.Ссылка;
		
		//ОсновнойВидОборота
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойВидОборота;
		Запись.Значение     = Перечисления.ВидыОборотовПоРеализации.Облагаемый;
		
		//ОсновнойВидОперацииРеализации
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойВидОперацииРеализации;
		Запись.Значение     = ВидРеализации.Ссылка;
		
		//ОсновнойВидПоступления
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойВидПоступления;
		Запись.Значение     = ВидПоступления.Ссылка;
		
		//ОсновнойВидПоступленияИмпорт
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойВидПоступленияИмпорт;
		Запись.Значение     = ВидПоступления.Ссылка;
		
		//ОсновнойВидОперацииОблагаемойАкцизом
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойВидОперацииОблагаемойАкцизом;
		Запись.Значение     = ВидОперацииОблагаемойАкцизом.Ссылка;
		
		
		//ОсновнойОтветственный
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойОтветственный;
		Запись.Значение     = глТекущийПользователь.Ссылка;
		
		
		//ОсновнойСклад
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойСклад;
		Запись.Значение     = Склад.Ссылка;
		
		//ОсновнойТипЦенПродажи
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойТипЦенПродажи;
		Запись.Значение     = ТипЦены.Ссылка;
		
		//КонтрольКорреспонденцииСчетов
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.КонтрольКорреспонденцииСчетов;
		Запись.Значение     = Истина;
		
		//ПечатьДокументовБезПредварительногоПросмотра
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ПечатьДокументовБезПредварительногоПросмотра;
		Запись.Значение     = Ложь;
		
		//ПоказыватьВДокументахСчетаУчета
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ПоказыватьВДокументахСчетаУчета;
		Запись.Значение     = Истина;
		
		//УчетПоВсемОрганизациям
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.УчетПоВсемОрганизациям;
		Запись.Значение     = Истина;
		
		//ЗапрашиватьПодтверждениеПриЗакрытии
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ЗапрашиватьПодтверждениеПриЗакрытии;
		Запись.Значение     = Истина;
		
		//ЗапрашиватьВидОперацииПриВводеНового
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ЗапрашиватьВидОперацииПриВводеНового;
		Запись.Значение     = Истина;
		
		//ПоказыватьБыстроеОсвоениеПриНачалеРаботыСистемы
		Запись = Набор.Добавить();
		Запись.Пользователь = глТекущийПользователь;
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ПоказыватьБыстроеОсвоениеПриНачалеРаботыСистемы;
		Запись.Значение     = Истина;                                                      	
		
		//ПечатьСуммыПрописьюВДокументах
		Запись = Набор.Добавить();
		Запись.Пользователь = глЗначениеПеременной("глТекущийПользователь");
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ПечатьСуммыПрописьюВДокументах;
		Запись.Значение     = Ложь;
		
		//ПроверкаРассчитанныхИтоговРегистраБухгалтерии
		Запись = Набор.Добавить();
		Запись.Пользователь = глЗначениеПеременной("глТекущийПользователь");
		Запись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ПроверкаРассчитанныхИтоговРегистраБухгалтерии;
		Запись.Значение     = Истина;
		
		Набор.Записать();
		
	КонецПроцедуры // УстановитьЗначенияПоУмолчаниюДляТекущегоПользователя()
	
	// Заполняет регистры учетной политики для переданной организации значениями по умолчанию
	//
	Процедура ЗаполнитьРегистрыУчетнойПолитикиПоУмолчанию(Организация)
		
		//Заполняем сведения по УчетнаяПолитикаБухгалтерскийУчет Организации 
		НаборЗаписей = РегистрыСведений.УчетнаяПолитикаБухгалтерскийУчет.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Значение		 = Организация;
		НаборЗаписей.Отбор.Организация.Использование = Истина;
		НаборЗаписей.Записать();
		
		Запись = НаборЗаписей.Добавить();
		Запись.Период = '19800101'; 
		Запись.Организация =  Организация;
		Запись.СпособРасчетаСебестоимостиПроизводства 		= Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям;
		Запись.УчетВременныхРазницПоНалогуНаПрибыль   		= Истина;
		Запись.ВедениеУчетаВременныхРазницБалансовымМетодом = Истина;
		
		НаборЗаписей.Записать();
		
		//Заполняем сведения по УчетнаяПолитикаНалоговыйУчет Организации 
		НаборЗаписей = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Значение		 = Организация;
		НаборЗаписей.Отбор.Организация.Использование = Истина;
		НаборЗаписей.Записать();
		
		Запись = НаборЗаписей.Добавить();
		Запись.Период = '19800101'; 
		Запись.Организация =  Организация;
		Запись.НДСНалоговыйПериод 	   = Перечисления.Периодичность.Квартал;
		Запись.НДСМетодОтнесенияВЗачет = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный;
		Запись.ОрганизацияЯвляетсяПлательщикомКПН = Истина;
		Запись.ОрганизацияЯвляетсяПлательщикомНДС = Истина;
		Запись.УпрощенныйУчетИПНиОПВ   		 = Ложь;
		Запись.ОтражениеПоПериодуРегистрации = Истина;
		Запись.ЗасчитыватьВВыплаченныеДоходыУдержанияПоИЛ = Истина;
		Запись.ОрганизацияЯвляетсяПлательщикомСН = Истина;
		Запись.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога = Истина;
		Запись.ПорядокСписанияЗадолженностиПоЗарплате = Перечисления.ПорядокСписанияЗадолженностиПоЗарплате.ПоСпособуЗаполненияДокумента;
		
		НаборЗаписей.Записать();
		
		#Если Не Сервер Тогда
			// занесем в глУчетнаяПолитикаПоПерсоналуОрганизации
			ПолныеПрава.ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации();
		#КонецЕсли
		
	КонецПроцедуры // ЗаполнитьРегистрыУчетнойПолитикиПоУмолчанию
	
	// Функция выполняет начальное заполнение информационной базы.
	//
	// Параметры:
	//  ДокументОписаниеОбновлений - табличный документ, в который выводится описание обновлений.
	//  МакетОписаниеОбновлений    - макет "ОписаниеОбновлений" с заполненными параметрами.
	//
	// Возвращаемое значение:
	//  Функция возвращает номер первой коммерческой версии конфигурации.
	//
	Функция ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт
		
		ВыполнятьНеобязательноеЗаполнение = Ложь;
		
		Константы.фин_РежимХраненияФактическихДанных.Установить(Перечисления.фин_РежимыХраненияФактическихДанных.ВРегистреФактическиеОборотыБюджетов);
		Константы.фин_РежимИнтеграцииСУчетнойСистемой.Установить(Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана);
		Константы.фин_ПериодичностьФормированияБюджетногоРегламента.Установить(Перечисления.фин_Периодичность.Квартал);
		Константы.фин_РазделительКодаСтатьиВОтчетах.Установить(".");
		Константы.фин_РазрешитьФормированиеБюджетовВнеПорядкаРегламента.Установить(Истина);
		
		Константы.фин_ИспользоватьРеквизитПлановаяЕдиницаИзмеренияПриПланировании.Установить(Истина);
		Константы.фин_ИспользуютсяСвойстваИКатегории.Установить(Истина);
		
		ЗаполнитьПустуюИБ_БК(ДокументОписаниеОбновлений, МакетОписаниеОбновлений, ВыполнятьНеобязательноеЗаполнение);
		ЗаполнитьПустуюИБ_ЗУПК(ДокументОписаниеОбновлений, МакетОписаниеОбновлений, ВыполнятьНеобязательноеЗаполнение);
		// Заполним регистр общ_НастройкиДоступаКРабочемуСтолу
		Сообщить("-----------------------");
		Сообщить("Заполнение настроек прав доступа к разделам рабочего стола");
		
		ЗаполнитьПраваДоступаКРабочемуСтолу();
		
	КонецФункции // ЗаполнитьПустуюИБ()
	
	// Заполнение реквизитов справочника "Виды контактной информации"
	//
	Процедура ЗаполнитьСправочникВидыКонтактнойИнформации()
		
		Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
			Возврат;
		КонецЕсли;
		
		// Физ.лица
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
		ОбъектВидКонтактнойИнформации.Записать();
		
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
		ОбъектВидКонтактнойИнформации.Записать();
		
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
		ОбъектВидКонтактнойИнформации.Записать();
		
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
		ОбъектВидКонтактнойИнформации.Записать();
		
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
		ОбъектВидКонтактнойИнформации.Записать();
		
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
		ОбъектВидКонтактнойИнформации.Записать();
		
		// Контрагенты
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
		ОбъектВидКонтактнойИнформации.Записать();
		
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
		ОбъектВидКонтактнойИнформации.Записать();
		
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
		ОбъектВидКонтактнойИнформации.Записать();
		
		// Организации
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
		ОбъектВидКонтактнойИнформации.Записать();
		
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
		ОбъектВидКонтактнойИнформации.Записать();
		
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
		ОбъектВидКонтактнойИнформации.Записать();
		
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
		ОбъектВидКонтактнойИнформации.Записать();
		
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
		ОбъектВидКонтактнойИнформации.Записать();
		
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
		ОбъектВидКонтактнойИнформации.Записать();
		
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
		ОбъектВидКонтактнойИнформации.Записать();
		
		СписокПредопределенныхЭлементов = Новый СписокЗначений;
		СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
		СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации);
		СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый);
		СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред);
		СписокПредопределенныхЭлементов.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный);
		УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов);
		
		// Пользователи
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи;
		ОбъектВидКонтактнойИнформации.Записать();
		
		//Контактные лица.
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ИнформАдресКонтактногоЛица.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица;
		ОбъектВидКонтактнойИнформации.Записать();
		
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица;
		ОбъектВидКонтактнойИнформации.Записать();
		
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонМобильный.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица;
		ОбъектВидКонтактнойИнформации.Записать();
		
		// Кандидаты
		ОбъектВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.КонтактныйТелефонКандидата.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
		ОбъектВидКонтактнойИнформации.Записать();
		
	КонецПроцедуры // ЗаполнитьСправочникВидыКонтактнойИнформации()
	
	// Процедура заполняет константу шаблонов телефонов.
	// 
	Процедура ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию()
		
		ТаблицаСоответствий = Новый Соответствие;
		ТаблицаСоответствий.Вставить(7,"999-99-99");
		ТаблицаСоответствий.Вставить(6,"99-99-99");
		ТаблицаСоответствий.Вставить(5,"9-99-99");
		ТаблицаСоответствий.Вставить(4,"99-99");
		
		ХранилищеШаблоновТелефонов = Новый ХранилищеЗначения(ТаблицаСоответствий);
		
		Константы.ШаблоныТелефонныхНомеров.Установить(ХранилищеШаблоновТелефонов);
		
	КонецПроцедуры // ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию()
	
	// Процедура изменяет ставшие неуникальными коды предопределенных элементов
	//
	Процедура УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов)
		
		МассивЭлементов = Новый Массив;
		
		Пока СписокПредопределенныхЭлементов.Количество()>0 Цикл
			
			МассивЭлементов.Очистить();
			КолвоЭлементовВСписке = СписокПредопределенныхЭлементов.Количество();
			ТекушийТипЗначения = ТипЗнч(СписокПредопределенныхЭлементов [КолвоЭлементовВСписке-1].Значение);
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТекушийТипЗначения);
			ЕСли МетаданныеТипа.ДлинаКода = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Для ОбратныйИндекс = 1 По КолвоЭлементовВСписке Цикл
				ЭлементСписка = СписокПредопределенныхЭлементов [КолвоЭлементовВСписке - ОбратныйИндекс];
				
				Если ТипЗнч(ЭлементСписка.Значение) = ТекушийТипЗначения Тогда
					МассивЭлементов.Добавить(ЭлементСписка.Значение);
					СписокПредопределенныхЭлементов.Удалить(ЭлементСписка);
				КонецЕсли;			
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Предопределенные.Ссылка
			|ИЗ
			|	" + МетаданныеТипа.ПолноеИмя() + " КАК Предопределенные
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + МетаданныеТипа.ПолноеИмя() + " КАК Пользовательские
			|		ПО Предопределенные.Код = Пользовательские.Код
			|
			|ГДЕ
			|	Предопределенные.Ссылка В(&СписокЭлементов)
			|    И Пользовательские.Ссылка НЕ В(&СписокЭлементов)";
			
			Запрос.УстановитьПараметр("СписокЭлементов", МассивЭлементов);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				Объект.УстановитьНовыйКод();
				Объект.Записать();
			КонецЦикла;	
			
		КонецЦикла;
		
	КонецПроцедуры
	
	// Процедура изменяет ставшие неуникальными коды непредопределенных элементов
	//
	Процедура УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника(ИмяСправочника) Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Пользовательские.Ссылка,
		|	Представление(Пользовательские.Ссылка) КАК ПредставлениеЭлемента
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК Предопределенные
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Пользовательские
		|		ПО Предопределенные.Код = Пользовательские.Код
		|
		|ГДЕ
		|	Предопределенные.Предопределенный И
		|   Не Пользовательские.Предопределенный";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.УстановитьНовыйКод();
			Попытка
				Объект.Записать();
			Исключение
				Сообщить(" при записи элемента справочника "+ ИмяСправочника+": " + СокрЛП(Выборка.ПредставлениеЭлемента) + " произошла ошибка:" + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЦикла;	 
		
	КонецПроцедуры
	
	// Процедура изменяет ставшие неуникальными коды непредопределенных элементов
	//
	Процедура УстановитьНовыеКодыНеПредопределеннымЭлементамПланаВидовХарактеристик(ИмяПланаВидовХарактеристик)
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Пользовательские.Ссылка,
		|	Представление(Пользовательские.Ссылка) КАК ПредставлениеЭлемента
		|ИЗ
		|	ПланВидовХарактеристик." + ИмяПланаВидовХарактеристик + " КАК Предопределенные
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик." + ИмяПланаВидовХарактеристик + " КАК Пользовательские
		|		ПО Предопределенные.Код = Пользовательские.Код
		|
		|ГДЕ
		|	Предопределенные.Предопределенный И
		|   Не Пользовательские.Предопределенный";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.УстановитьНовыйКод();
			Попытка
				Объект.Записать();
			Исключение
				Сообщить(" при записи элемента плана видов характеристик "+ ИмяПланаВидовХарактеристик+": " + СокрЛП(Выборка.ПредставлениеЭлемента) + " произошла ошибка:" + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
			Объект.Записать();
		КонецЦикла;	 
		
	КонецПроцедуры
	
	//Заполнеяет рекввизит "ВидРегламентнойОперациий" у регистров бухгалтерии
	//
	Процедура ЗаполнитьВидыОперацийРегламентныхОпераций()   Экспорт
		Сообщить("-----------------------");
		Сообщить("Заполнение реквизита ""Вид регламентной операции"" у записей регистров бухгалтерии ""Типовой"" и ""Налоговый"","
		+ Символы.ПС + "которые соответствуют регламентным операциям закрытия месяца");
		
		МассивСодержаний = Новый Массив;
		//1. Амотризация ОС (бу)
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.АмортизацияОСБУ, "Типовой", "Начислена амортизация"   , "ОС");
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.АмортизацияОСБУ, "Налоговый", "Начислена амортизация" , "ОС");
		//2. Амотризация НМА (бу)
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.АмортизацияНМАБУ, "Типовой", "Начислена амортизация"  , "НА");
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.АмортизацияНМАБУ, "Налоговый", "Начислена амортизация", "НА");
		//3. СписаниеРезерваПоПереоценкеОС(БУ)
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.СписаниеРезерваПоПереоценкеОСБУ, "Типовой", "Списание резерва переоценки стоимости ОС"  , "ОС");
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.СписаниеРезерваПоПереоценкеОСБУ, "Налоговый", "Списание резерва переоценки стоимости ОС"  , "ОС");
		//4.Переоценка валюты
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредствБУ, "Типовой", "Переоценка валюты");
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредствБУ, "Налоговый", "Переоценка валюты");
		//5.Списание РБП (БУ)
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.СписаниеРБПБУ, "Типовой", "РБП");
		МассивСодержаний.Очистить();
		МассивСодержаний.Добавить("РБП");	
		МассивСодержаний.Добавить("Временная разница по РБП");	
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.СписаниеРБПБУ, "Налоговый", МассивСодержаний);
		//ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.СписаниеРБПБУ, "Налоговый", "Временная разница по РБП");
		//6. РасчетСтоимостиПродукции(БУ)
		МассивСодержаний.Очистить();
		МассивСодержаний.Добавить("Списание ОПР на непроизводственные счета, Распределение ОПР");
		МассивСодержаний.Добавить("Корректировка выпуска продукции (услуг)");
		МассивСодержаний.Добавить("Корректировка стоимости списания");
		МассивСодержаний.Добавить("Корректировка стоимости перемещения");
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ, "Типовой", МассивСодержаний);
		//7. Перенос НЗП
		МассивСодержаний.Очистить();
		МассивСодержаний.Добавить("Отнесение затрат на счета НЗП");
		МассивСодержаний.Добавить("Возврат НЗП на счета затрат");	
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.ПереносНЗПБУ, "Типовой", МассивСодержаний, "ПР");
		//8. РасчетВычетовПоРасходамНаРемонт
		МассивСодержаний.Очистить();
		МассивСодержаний.Добавить("Затраты сверхнорм отнесены на увеличение стоимости(НУ)");
		МассивСодержаний.Добавить("ВР по затратам на ремонт, отнесенных на увеличение стоимости ФА(НУ)");	
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоРасходамНаРемонт, "Налоговый", МассивСодержаний);
		//9. ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.ВключениеВСтоимостныйБалансАктивовУчитываемыхОтдельно, "Налоговый", "Активы, учитываемые отдельно, включены в стоимостный баланс групп (НУ)");
		//10.РасчетВычетовПоПреференциям 
		МассивСодержаний.Очистить();
		МассивСодержаний.Добавить("Отнесение на вычеты стоимости объекта преференций(НУ) до ввода в эксплуатацию");
		МассивСодержаний.Добавить("Отнесение на вычеты стоимости объекта преференций(НУ)");	
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.РасчетВычетовПоПреференциям, "Налоговый", МассивСодержаний);
		//11.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА 
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.РасчетДоходаОтПревышенияСтоимостиВыбывшихФА, "Налоговый", "Признан доход от превышения доходов выбывших ФА над стоимостным балансом группы/подгруппы");
		//12.СписаниеСтоимостногоБалансаГруппыМенееМинимума 
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.СписаниеСтоимостногоБалансаГруппыМенееМинимума, "Налоговый", "Стоимость группы менее минимума отнесена на вычеты");
		//13.СписаниеПриВыбытииВсехФАГруппы 
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.СписаниеПриВыбытииВсехФАГруппы, "Налоговый", "Стоимость группы, все активы которой выбыли, отнесена на вычеты");
		//14.АмортизацияФАНУ 
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.АмортизацияФАНУ, "Налоговый", "Начислена амортизация (НУ)");
		//15.Расчет временных разниц
		МассивСодержаний.Очистить();
		МассивСодержаний.Добавить("Признан отложенный налоговый актив за период");
		МассивСодержаний.Добавить("Признано отложенное налоговое обязательство за период");	
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.РасчетВременныхРазниц, "Типовой", МассивСодержаний, "ФР");
		//16.Расчет налога на прибыль
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль, "Типовой", "Начислен налог на прибыль за период", "ФР");
		//17. Расчет НДС к зачету
		МассивСодержаний.Очистить();
		МассивСодержаний.Добавить("Отнесение на затраты суммы НДС, не разрешенного к зачету");
		МассивСодержаний.Добавить("Зачет по НДС");	
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету, "Типовой", МассивСодержаний);
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету, "Налоговый", "Отнесение на затраты суммы НДС, не разрешенного к зачету");
		//18.Закрытие подотчетных сумм
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.ЗакрытиеПодотчетныхСуммБУ, "Типовой", "Закрытие подотчетных сумм", "БУ");
		//19.ЗачетАвансовыхПлатежейПоНалогамИСборам
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.ЗачетАвансовыхПлатежейПоНалогамИСборамБУ, "Типовой", "Зачет авансовых платежей по налогам и сборам", "БУ");
		//20.РасчетИтоговогоДоходаУбыткаБУ
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.РасчетИтоговогоДоходаУбыткаБУ, "Типовой", "Расчет итогового дохода/убытка", "ФР");
		//21.РеформацияБалансаБУ
		ЗаполнитьВидРегламентнойОперации(Перечисления.ВидыРегламентныхОпераций.РеформацияБалансаБУ, "Типовой", "Реформация баланса", "БУ");
		
		Сообщить("Заполнение реквизита ""Вид регламентной операции"" у записей регистров бухгалтерии ""Типовой"" и ""Налоговый"","
		+ Символы.ПС + "которые соответствуют регламентным операциям закрытия месяца, завершено");
	КонецПроцедуры
	
	//Заполняет реквизит "ВидрегламентнойОперации" для записей регситров БУ, по заданным условиям
	//
	Процедура ЗаполнитьВидРегламентнойОперации(ВидРегламентнойОперации,ИмяРегистра = "Типовой",Содержание = "", НомерЖурнала="") 
		ЕстьСодержание = ЗначениеЗаполнено(Содержание);
		ЕстьНомерЖурнала = ЗначениеЗаполнено(НомерЖурнала);
		ТекстОтбора = "";
		Запрос = Новый Запрос;
		Если ЕстьСодержание Тогда
			Если ТипЗнч(Содержание) = Тип("Массив") Тогда
				ТекстОтбора = " И ("; 
				Индекс = 0;
				Для Каждого Элемент Из Содержание Цикл
					Если Не Индекс = 0 Тогда
						ТекстОтбора = ТекстОтбора + " ИЛИ ";
					КонецЕсли;
					ТекстОтбора = ТекстОтбора + "                    
					|	Типовой.Содержание ПОДОБНО &Содержание" + Индекс;
					
					Запрос.УстановитьПараметр("Содержание" + Индекс, Элемент);
					Индекс = Индекс + 1;
				КонецЦикла;
				ТекстОтбора = ТекстОтбора +  ") "; 
			Иначе
				
				ТекстОтбора = " И                   
				|	Типовой.Содержание ПОДОБНО &Содержание";
				
				Запрос.УстановитьПараметр("Содержание", Содержание);	
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьНомерЖурнала Тогда
			ТекстОтбора = ТекстОтбора + "  И Типовой.НомерЖурнала = &НомерЖурнала" ;		
			Запрос.УстановитьПараметр("НомерЖурнала", НомерЖурнала);		
		КонецЕсли;
		
		
		
		Запрос.Текст =   "ВЫБРАТЬ
		|	Типовой.Регистратор,
		|	ПРЕДСТАВЛЕНИЕ(Типовой.Регистратор) КАК ПредставлениеДок,
		|	Типовой.НомерСтроки
		|ИЗ
		|	РегистрБухгалтерии." + ИмяРегистра + " КАК Типовой
		|ГДЕ
		|	Типовой.ВидРегламентнойОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПустаяСсылка) "  + 
		ТекстОтбора ;
		
		Выборка = Запрос.Выполнить().Выбрать();
		ЕстьДанные = Выборка.Следующий();
		
		ПроводкиБУ = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
		
		Пока ЕстьДанные Цикл
			Состояние(Выборка.ПредставлениеДок + "Вид регламентной операции:" + ВидРегламентнойОперации); 			
			ТекущийРегистратор 							= Выборка.Регистратор;
			ПроводкиБУ.Отбор.Регистратор.Использование 	= Истина;
			ПроводкиБУ.Отбор.Регистратор.Значение 		= ТекущийРегистратор;
			ПроводкиБУ.Прочитать();
			Состояние(ТекущийРегистратор);
			
			Пока ЕстьДанные
				И Выборка.Регистратор = ТекущийРегистратор Цикл
				
				Если Выборка.НомерСтроки <= ПроводкиБУ.Количество() Тогда
					Проводка = ПроводкиБУ[Выборка.НомерСтроки - 1];
					
					Проводка.ВидРегламентнойОперации = ВидРегламентнойОперации;					
					
				КонецЕсли;
				
				ЕстьДанные = Выборка.Следующий();
				
			КонецЦикла;
			
			Если ПроводкиБУ.Модифицированность() Тогда
				Попытка
					ПроводкиБУ.Записать();
					ПроводкиБУ.Очистить();
				Исключение
					Сообщить(" при записи проводок " + ТекущийРегистратор + " произошла ошибка:" + ОписаниеОшибки(), СтатусСообщения.Важное);
				КонецПопытки;
			КонецЕсли;   	
			
		КонецЦикла;                
		
	КонецПроцедуры
	
	Процедура ОбработкаРегистраКорректировкиНДСКвозмещению_ВозвратТоваров()
		
		СтруктураТаблицы = Новый ТаблицаЗначений;
		
		СтруктураТаблицы.Колонки.Добавить("Номенклатура");
		СтруктураТаблицы.Колонки.Добавить("Сумма");
		СтруктураТаблицы.Колонки.Добавить("СтавкаНДС");
		СтруктураТаблицы.Колонки.Добавить("НДС");
		СтруктураТаблицы.Колонки.Добавить("НДСВидОборота");
		СтруктураТаблицы.Колонки.Добавить("НДСВидПоступления");
		СтруктураТаблицы.Колонки.Добавить("Количество");
		СтруктураТаблицы.Колонки.Добавить("Коэффициент");
		СтруктураТаблицы.Колонки.Добавить("Услуга");
		СтруктураТаблицы.Колонки.Добавить("СчетУчетаБУ");
		СтруктураТаблицы.Колонки.Добавить("СчетУчетаНУ");
		СтруктураТаблицы.Колонки.Добавить("СчетУчетаНДС");	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВозвратТоваровПоставщикуТовары.Ссылка КАК Ссылка,
		|	""Товары"" КАК ИмяТабличнойЧасти,
		|	ВозвратТоваровПоставщикуТовары.Номенклатура,
		|	ВозвратТоваровПоставщикуТовары.Сумма,
		|	ВозвратТоваровПоставщикуТовары.СтавкаНДС,
		|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК НДС,
		|	ВозвратТоваровПоставщикуТовары.НДСВидОборота,
		|	ВозвратТоваровПоставщикуТовары.НДСВидПоступления,
		|	ВозвратТоваровПоставщикуТовары.Количество,
		|	ВозвратТоваровПоставщикуТовары.Коэффициент,
		|	ВозвратТоваровПоставщикуТовары.Номенклатура.Услуга КАК Услуга,
		|	ВозвратТоваровПоставщикуТовары.СчетУчетаБУ,
		|	ВозвратТоваровПоставщикуТовары.СчетУчетаНУ,
		|	ВозвратТоваровПоставщикуТовары.СчетУчетаНДС
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
		|ГДЕ
		|	ВозвратТоваровПоставщикуТовары.Ссылка.УчитыватьНДС
		|	И ВозвратТоваровПоставщикуТовары.Ссылка.Проведен
		|	И НЕ ВозвратТоваровПоставщикуТовары.Ссылка.РучнаяКорректировка	              	               
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВозвратТоваровПоставщикуУслуги.Ссылка,
		|	""Услуги"",
		|	ВозвратТоваровПоставщикуУслуги.Номенклатура,
		|	ВозвратТоваровПоставщикуУслуги.Сумма,
		|	ВозвратТоваровПоставщикуУслуги.СтавкаНДС,
		|	ВозвратТоваровПоставщикуУслуги.СуммаНДС,
		|	ВозвратТоваровПоставщикуУслуги.НДСВидОборота,
		|	ВозвратТоваровПоставщикуУслуги.НДСВидПоступления,
		|	ВозвратТоваровПоставщикуУслуги.Количество,
		|	1,
		|	ВозвратТоваровПоставщикуУслуги.Номенклатура.Услуга,
		|	NULL,
		|	NULL,
		|	ВозвратТоваровПоставщикуУслуги.СчетУчетаНДС
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Услуги КАК ВозвратТоваровПоставщикуУслуги
		|ГДЕ
		|	ВозвратТоваровПоставщикуУслуги.Ссылка.УчитыватьНДС
		|	И ВозвратТоваровПоставщикуУслуги.Ссылка.Проведен
		|	И НЕ ВозвратТоваровПоставщикуУслуги.Ссылка.РучнаяКорректировка	              	               
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВозвратТоваровПоставщикуОС.Ссылка,
		|	""ОС"",
		|	ВозвратТоваровПоставщикуОС.ОсновноеСредство,
		|	ВозвратТоваровПоставщикуОС.Сумма,
		|	ВозвратТоваровПоставщикуОС.СтавкаНДС,
		|	ВозвратТоваровПоставщикуОС.СуммаНДС,
		|	ВозвратТоваровПоставщикуОС.НДСВидОборота,
		|	ВозвратТоваровПоставщикуОС.НДСВидПоступления,
		|	1,
		|	1,
		|	ЛОЖЬ,
		|	ВозвратТоваровПоставщикуОС.СчетУчетаБУ,
		|	ВозвратТоваровПоставщикуОС.СчетУчетаНУ,
		|	ВозвратТоваровПоставщикуОС.СчетУчетаНДС
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.ОС КАК ВозвратТоваровПоставщикуОС
		|ГДЕ
		|	ВозвратТоваровПоставщикуОС.Ссылка.УчитыватьНДС
		|	И ВозвратТоваровПоставщикуОС.Ссылка.Проведен
		|	И НЕ ВозвратТоваровПоставщикуОС.Ссылка.РучнаяКорректировка	              	               
		|ИТОГИ ПО
		|	Ссылка,
		|	ИмяТабличнойЧасти";
		
		Результат  = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
		
		ВыборкаСсылка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСсылка.Следующий() Цикл
			Ссылка = ВыборкаСсылка.Ссылка;
			Сообщить("Обработка документа " + Ссылка);
			
			СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Ссылка);
			
			ВыборкаТЧ = ВыборкаСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока  ВыборкаТЧ.Следующий() Цикл
				ИмяТЧ = ВыборкаТЧ.ИмяТабличнойЧасти;		
				ДвиженияНДС  = РегистрыНакопления.КорректировкаНДСКВозмещению.СоздатьНаборЗаписей();
				ДвиженияНДС.Отбор.Регистратор.Установить(Ссылка);
				
				ТаблицаДокумента = СтруктураТаблицы.СкопироватьКолонки();
				ВыборкаДетали = ВыборкаТЧ.Выбрать();
				Пока ВыборкаДетали.Следующий() Цикл
					НоваяСтрока = ТаблицаДокумента.Добавить();
					Для Каждого Колонка ИЗ СтруктураТаблицы.Колонки Цикл
						ИмяКолонки  = Колонка.Имя;
						НоваяСтрока[ИмяКолонки] = ВыборкаДетали[ИмяКолонки];
					КонецЦикла;			
				КонецЦикла;
				Если ИмяТЧ = "Товары" Тогда
					УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаДокумента, СтруктураШапкиДокумента, СтруктураШапкиДокумента.СуммаВключаетНДС);
				Иначе	
					УправлениеВзаиморасчетами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаДокумента, 	СтруктураШапкиДокумента,	СтруктураШапкиДокумента.НДСВключенВСтоимость,	мВалютаРегламентированногоУчета);
				КонецЕсли;	
				
				Если Не ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
					Возврат;
				КонецЕсли;
				
				Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
					Возврат;
				КонецЕсли;
				
				// Работа со структурными подразделениями
				Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
					ПлательщикНДС 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
					СтруктураШапкиДокумента.Организация,
					глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
					Перечисления.РазделыНалоговогоУчета.НДС);
				Иначе
					ПлательщикНДС 	= СтруктураШапкиДокумента.Организация;															
				КонецЕсли;																
				
				СтруктураШапкиДокумента.Вставить("ПлательщикНДС", ПлательщикНДС);
				Отказ = Ложь;
				УчетНДСИАкциза.СформироватьДвиженияПоРегиструКорректировкиНДСКВозмещению(СтруктураШапкиДокумента, ТаблицаДокумента, ИмяТЧ, Новый Структура("КорректировкаНДСКВозмещению",ДвиженияНДС), Отказ);
				Если НЕ Отказ Тогда
					ДвиженияНДС.Записать();
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла; 
	КонецПроцедуры
	
	Процедура ОбработкаРегистраКорректировкиНДСКвозмещению_СписаниеТоваров()
		// В списании товаров НДС был рассчитан от себестоимости при проведении
		// для распределения по ставкам НДС и заполнения ресурса УплаченныйНДС
		// используем существующий набор записей
		// В качестве веса для распределения между ставками НДС будет выступать произведение Количества и Ставки НДС в пределах одной номенклатуры
		СтруктураТаблицы = Новый ТаблицаЗначений;
		
		СтруктураТаблицы.Колонки.Добавить("Номенклатура");
		СтруктураТаблицы.Колонки.Добавить("Сумма");
		СтруктураТаблицы.Колонки.Добавить("СтавкаНДС");
		СтруктураТаблицы.Колонки.Добавить("НДС");
		СтруктураТаблицы.Колонки.Добавить("НДСВидОборота");
		СтруктураТаблицы.Колонки.Добавить("НДСВидПоступления");
		СтруктураТаблицы.Колонки.Добавить("Количество");
		СтруктураТаблицы.Колонки.Добавить("Коэффициент");
		СтруктураТаблицы.Колонки.Добавить("Услуга");
		СтруктураТаблицы.Колонки.Добавить("СчетУчетаБУ");
		СтруктураТаблицы.Колонки.Добавить("СчетУчетаНУ");
		СтруктураТаблицы.Колонки.Добавить("СчетУчетаНДС");
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ДаныеДокумента.Ссылка КАК Ссылка,
		|	ДаныеДокумента.Номенклатура КАК Номенклатура,
		|	ДаныеДокумента.НДСВидОборота КАК НДСВидОборота,
		|	ДаныеДокумента.НДСВидПоступления КАК НДСВидПоступления,
		|	ДаныеДокумента.СтавкаНДС,
		|	ДаныеДокумента.Количество КАК Количество,
		|	ДаныеДокумента.Вес КАК Вес,
		|	ЕстьNull(ДанныеРегистра.УплаченныйНДСОборот,0) КАК УплаченныйНДСОборот,
		|	ЕстьNull(ДанныеРегистра.СуммаКорректировкиОборотаОборот,0) КАК СуммаКорректировкиОборотаОборот,
		|	ЕстьNull(ДанныеРегистра.СуммаНДСОборот,0) КАК СуммаНДСОборот
		|ИЗ
		|	(ВЫБРАТЬ
		|		СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
		|		СписаниеТоваровТовары.НДСВидОборота КАК НДСВидОборота,
		|		СписаниеТоваровТовары.НДСВидПоступления КАК НДСВидПоступления,
		|		СписаниеТоваровТовары.СтавкаНДС КАК СтавкаНДС,
		|		СУММА(СписаниеТоваровТовары.Количество) КАК Количество,
		|		СУММА(СписаниеТоваровТовары.СтавкаНДС.Ставка * СписаниеТоваровТовары.Количество) КАК Вес,
		|		СписаниеТоваровТовары.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
		|	ГДЕ
		|		СписаниеТоваровТовары.Ссылка.КорректироватьНДС
		|		И СписаниеТоваровТовары.Ссылка.УчитыватьНДС
		|		И СписаниеТоваровТовары.Ссылка.Проведен
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СписаниеТоваровТовары.Номенклатура,
		|		СписаниеТоваровТовары.НДСВидОборота,
		|		СписаниеТоваровТовары.НДСВидПоступления,
		|		СписаниеТоваровТовары.СтавкаНДС,
		|		СписаниеТоваровТовары.Ссылка) КАК ДаныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КорректировкаНДСКВозмещениюОбороты.ВидОперацииКорректировки КАК НДСВидПоступления,
		|			КорректировкаНДСКВозмещениюОбороты.ВидОборота КАК НДСВидОборота,
		|			КорректировкаНДСКВозмещениюОбороты.ТМЗ КАК Номенклатура,
		|			СУММА(КорректировкаНДСКВозмещениюОбороты.УплаченныйНДСОборот) КАК УплаченныйНДСОборот,
		|			СУММА(КорректировкаНДСКВозмещениюОбороты.СуммаКорректировкиОборотаОборот) КАК СуммаКорректировкиОборотаОборот,
		|			СУММА(КорректировкаНДСКВозмещениюОбороты.СуммаНДСОборот) КАК СуммаНДСОборот,
		|			КорректировкаНДСКВозмещениюОбороты.Регистратор КАК Ссылка
		|		ИЗ
		|			РегистрНакопления.КорректировкаНДСКВозмещению.Обороты(, , Регистратор, ) КАК КорректировкаНДСКВозмещениюОбороты
		|		ГДЕ
		|			КорректировкаНДСКВозмещениюОбороты.Регистратор ССЫЛКА Документ.СписаниеТоваров
		|		
		|		СГРУППИРОВАТЬ ПО
		|			КорректировкаНДСКВозмещениюОбороты.ВидОперацииКорректировки,
		|			КорректировкаНДСКВозмещениюОбороты.ВидОборота,
		|			КорректировкаНДСКВозмещениюОбороты.ТМЗ,
		|			КорректировкаНДСКВозмещениюОбороты.Регистратор) КАК ДанныеРегистра
		|		ПО ДаныеДокумента.Номенклатура = ДанныеРегистра.Номенклатура
		|			И ДаныеДокумента.НДСВидОборота = ДанныеРегистра.НДСВидОборота
		|			И ДаныеДокумента.НДСВидПоступления = ДанныеРегистра.НДСВидПоступления
		|			И ДаныеДокумента.Ссылка = ДанныеРегистра.Ссылка
		|ИТОГИ
		|	СУММА(Количество),
		|	СУММА(Вес),
		|	МАКСИМУМ(УплаченныйНДСОборот),
		|	МАКСИМУМ(СуммаКорректировкиОборотаОборот),
		|	МАКСИМУМ(СуммаНДСОборот)
		|ПО
		|	Ссылка,
		|	Номенклатура,
		|	НДСВидОборота,
		|	НДСВидПоступления"); 
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;	
		КонецЕсли;	
		
		мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		мПоддержкаРаботыСоСтруктурнымиПодразделениями = Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить();
		
		ВыборкаСсылка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСсылка.Следующий() Цикл
			Ссылка = ВыборкаСсылка.Ссылка;
			Сообщить("Обработка документа " + Ссылка);
			
			СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Ссылка);
			Если Не ПроцедурыБухгалтерскогоУчета.ПроводитьДокументПоРазделуУчета(СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.НДС, СтруктураШапкиДокумента.Дата) Тогда
				Возврат;
			КонецЕсли;
			
			Если не СтруктураШапкиДокумента.УчитыватьНДС Тогда
				Возврат;
			КонецЕсли;
			
			// Работа со структурными подразделениями
			Если мПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
				ПлательщикНДС 	= ПроцедурыНалоговогоУчета.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(СтруктураШапкиДокумента.Организация,
				СтруктураШапкиДокумента.Организация,
				глЗначениеПеременной("глИсчислениеНалоговСтруктурныхЕдиниц"),
				Перечисления.РазделыНалоговогоУчета.НДС);
			Иначе
				ПлательщикНДС 	= СтруктураШапкиДокумента.Организация;															
			КонецЕсли;																
			
			СтруктураШапкиДокумента.Вставить("ПлательщикНДС", ПлательщикНДС);
			
			
			ДвиженияНДС  = РегистрыНакопления.КорректировкаНДСКВозмещению.СоздатьНаборЗаписей();
			ДвиженияНДС.Отбор.Регистратор.Установить(Ссылка);
			
			СтрокаДвижения = Неопределено;
			ВыборкаНоменклатура = ВыборкаСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаНоменклатура.Следующий() Цикл
				ВыборкаНДСВидОборота = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаНДСВидОборота.Следующий() Цикл
					ВыборкаНДСВидПоступления = ВыборкаНДСВидОборота.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаНДСВидПоступления.Следующий() Цикл
						
						ОбщаяСуммаКорректировкиОборотаОборот = ВыборкаНДСВидПоступления.СуммаКорректировкиОборотаОборот;
						ОбщаяСуммаНДСОборот	 				 = ВыборкаНДСВидПоступления.СуммаНДСОборот;
						
						ОбщийВес 							 = ВыборкаНДСВидПоступления.Вес;
						Если ОбщийВес = 0 Тогда
							Продолжить;
						КонецЕсли;	
						
						РаспределеноСуммаУплаченныйНДС 			 	= 0;
						РаспределеноСуммаКорректировкиОборотаОборот = 0;
						РаспределеноСуммаНДСОборот	 				= 0;
						
						ВыборкаДетали = ВыборкаНДСВидПоступления.Выбрать();
						Пока ВыборкаДетали.Следующий() Цикл
							Коэффициент = ВыборкаДетали.Вес/ОбщийВес;						
							СуммаКорректировкиОборотаОборот 	= Окр(ВыборкаНДСВидПоступления.СуммаКорректировкиОборотаОборот * Коэффициент,2);
							СуммаНДСОборот	 				 	= Окр(ВыборкаНДСВидПоступления.СуммаНДСОборот * Коэффициент,2);
							// Так как ресурс еще не заполнен
							СуммаУплаченныйНДС 			 		= СуммаНДСОборот;
							
							СтрокаДвижения							= ДвиженияНДС.Добавить();		     		
							СтрокаДвижения.Активность				= Истина;
							СтрокаДвижения.Период					= СтруктураШапкиДокумента.Дата;
							СтрокаДвижения.Налогоплательщик			= СтруктураШапкиДокумента.ПлательщикНДС;
							СтрокаДвижения.Организация				= СтруктураШапкиДокумента.Организация;		
							СтрокаДвижения.СтруктурнаяЕдиница   	= СтруктураШапкиДокумента.Организация;		
							
							СтрокаДвижения.ВидОперацииКорректировки	= ВыборкаДетали.НДСВидПоступления;
							СтрокаДвижения.ВидНалогаНДС				= Перечисления.ВидыНДС.НДС;		
							СтрокаДвижения.ВидОборота				= ВыборкаДетали.НДСВидОборота;							
							СтрокаДвижения.ТМЗ						= ВыборкаДетали.Номенклатура;										
							СтрокаДвижения.СтавкаНДС				= ВыборкаДетали.СтавкаНДС;					
							
							
							СтрокаДвижения.УплаченныйНДС 			 = СуммаУплаченныйНДС;	
							СтрокаДвижения.СуммаКорректировкиОборота = СуммаКорректировкиОборотаОборот;
							СтрокаДвижения.СуммаНДС 				 = СуммаНДСОборот;
							
							РаспределеноСуммаУплаченныйНДС 			 	= РаспределеноСуммаУплаченныйНДС + СуммаУплаченныйНДС;
							РаспределеноСуммаКорректировкиОборотаОборот = РаспределеноСуммаКорректировкиОборотаОборот + СуммаКорректировкиОборотаОборот;
							РаспределеноСуммаНДСОборот	 				= РаспределеноСуммаНДСОборот + СуммаНДСОборот;					
						КонецЦикла;				
						СтрокаДвижения.СуммаНДС 				 = СтрокаДвижения.СуммаНДС + (ОбщаяСуммаНДСОборот - РаспределеноСуммаНДСОборот);
						// Так как ресурс еще не заполнен
						СтрокаДвижения.УплаченныйНДС 			 = СтрокаДвижения.СуммаНДС;	
						СтрокаДвижения.СуммаКорректировкиОборота = СтрокаДвижения.СуммаКорректировкиОборота + (ОбщаяСуммаКорректировкиОборотаОборот - РаспределеноСуммаКорректировкиОборотаОборот);
						
						
					КонецЦикла;	
				КонецЦикла;	
				
			КонецЦикла;	
			ДвиженияНДС.Записать();
		КонецЦикла;
		
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА РЕКВИЗИТОВ НАЛОГОВОГО УЧЕТА
	
	Процедура ПерепровестиУстановкуСоответствийБУНУ()
		Сообщить("-----------------------");
		Сообщить("Перепроведение документов ""Установка соответствия счетов БУ и НУ""");
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	УстановкаСоответствияСчетовБУиНУ.Ссылка,
		|	УстановкаСоответствияСчетовБУиНУ.Представление как ПредставлениеДокумента
		|ИЗ
		|	Документ.УстановкаСоответствияСчетовБУиНУ КАК УстановкаСоответствияСчетовБУиНУ
		|ГДЕ
		|	УстановкаСоответствияСчетовБУиНУ.Проведен = ИСТИНА");
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Попытка
				Состояние("Проведение документа <" + Выборка.ПредставлениеДокумента+">");
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить("Не удалось провести документ <"+Выборка.ПредставлениеДокумента+">!", СтатусСообщения.Внимание);
				Сообщить(ОписаниеОшибки());
			КонецПопытки	
		КонецЦикла;	
		Состояние("");
	КонецПроцедуры
	
	// Процедура формирует корреспонденции в налоговом учете
	// по отражению постоянных разниц для документов,
	// в которых не установлен признак отражения в НУ.
	// Процедура необходима для предприятий, которые являются плательщиками КПН, но  не ведут учет временных разниц
	//
	Процедура СформироватьКорреспонденцииПоОтражениюПостоянныхРазницВНУДляДокумента(ДокументОбъект, СтруктураШапкиДокумента, ВыдаватьСообщения) экспорт
		Если Не СтруктураШапкиДокумента.ОрганизацияПлательщикНалогаНаПрибыль тогда
			Возврат;
		КонецЕсли;	
		
		Если СтруктураШапкиДокумента.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль Тогда
			Возврат;
		КонецЕсли;	
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			Возврат;
		КонецЕсли;	
		ВидУчетаНУ  = Справочники.ВидыУчетаНУ.НеОтражаетсяВНУ;	
		
		ПроводкиНУ = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
		ПроводкиНУ.Отбор.Регистратор.Значение  = ДокументОбъект.Ссылка;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ДТ.НомерСтроки,
		|	ДТ.СчетДт,
		|	ДТ.СубконтоДт1,
		|	ДТ.СубконтоДт2,
		|	ДТ.СубконтоДт3,
		|	ДТ.СчетКт,
		|	ДТ.СубконтоКт1,
		|	ДТ.СубконтоКт2,
		|	ДТ.СубконтоКт3,
		|	ДТ.Сумма,
		|	ДТ.Содержание,
		|	ДТ.Приоритет,
		|	ДТ.СчетНУ КАК СчетДтНУ,
		|	ДТ.НомерСтроки КАК НомерСтроки1,
		|	Кт.СчетНУ КАК СчетКтНУ,
		|	ДТ.СубконтоНУ1 КАК СубконтоДтНУ1,
		|	ДТ.СубконтоНУ2 КАК СубконтоДтНУ2,
		|	ДТ.СубконтоНУ3 КАК СубконтоДтНУ3,
		|	Кт.СубконтоНУ1 КАК СубконтоКтНУ1,
		|	Кт.СубконтоНУ2 КАК СубконтоКтНУ2,
		|	Кт.СубконтоНУ3 КАК СубконтоКтНУ3,
		|	ДТ.Организация,
		|	ДТ.НомерЖурнала,
		|	ДТ.Период
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДвиженияДт.СчетДт КАК СчетДт,
		|		ДвиженияДт.СубконтоДт1 КАК СубконтоДт1,
		|		ДвиженияДт.СубконтоДт2 КАК СубконтоДт2,
		|		ДвиженияДт.СубконтоДт3 КАК СубконтоДт3,
		|		ДвиженияДт.СчетКт КАК СчетКт,
		|		ДвиженияДт.СубконтоКт1 КАК СубконтоКт1,
		|		ДвиженияДт.СубконтоКт2 КАК СубконтоКт2,
		|		ДвиженияДт.СубконтоКт3 КАК СубконтоКт3,
		|		ДвиженияДт.Сумма КАК Сумма,
		|		ДвиженияДт.Содержание КАК Содержание,
		|		ДвиженияДт.Приоритет КАК Приоритет,
		|		ДанныеНУДт.СчетНУ КАК СчетНУ,
		|		ДвиженияДт.НомерСтроки КАК НомерСтроки,
		|		ДанныеНУДт.СубконтоНУ1 КАК СубконтоНУ1,
		|		ДанныеНУДт.СубконтоНУ2 КАК СубконтоНУ2,
		|		ДанныеНУДт.СубконтоНУ3 КАК СубконтоНУ3,
		|		ДвиженияДт.Организация КАК Организация,
		|		ДвиженияДт.НомерЖурнала КАК НомерЖурнала,
		|		ДвиженияДт.Период КАК Период
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ТиповойДвиженияССубконто.СчетДт КАК СчетДт,
		|			ТиповойДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
		|			ТиповойДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
		|			ТиповойДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
		|			ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
		|			ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
		|			ТиповойДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
		|			ТиповойДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
		|			ТиповойДвиженияССубконто.Сумма КАК Сумма,
		|			ТиповойДвиженияССубконто.Содержание КАК Содержание,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетКт
		|							И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт1
		|								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт2
		|								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт3)
		|							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоДт1
		|							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = ТиповойДвиженияССубконто.СубконтоДт2
		|							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = ТиповойДвиженияССубконто.СубконтоДт3
		|						ТОГДА 10
		|					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетКт
		|							И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт1
		|								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт2
		|								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт3)
		|							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоДт1
		|							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = ТиповойДвиженияССубконто.СубконтоДт2
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО)
		|						ТОГДА 5
		|					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетКт
		|							И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт1
		|								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт2
		|								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт3)
		|							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоДт1
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО)
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО)
		|						ТОГДА 4
		|					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетКт
		|							И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт1
		|								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт2
		|								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт3)
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО)
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО)
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО)
		|						ТОГДА 3
		|					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетКт
		|							И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = НЕОПРЕДЕЛЕНО)
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО)
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО)
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО)
		|						ТОГДА 2
		|					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = &ПустойСчетНУ
		|							И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = НЕОПРЕДЕЛЕНО)
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО)
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО)
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО)
		|						ТОГДА 1
		|				КОНЕЦ) КАК Приоритет,
		|			ТиповойДвиженияССубконто.НомерСтроки КАК НомерСтроки,
		|			ТиповойДвиженияССубконто.Организация КАК Организация,
		|			ТиповойДвиженияССубконто.НомерЖурнала КАК НомерЖурнала,
		|			ТиповойДвиженияССубконто.Период КАК Период
		|		ИЗ
		|			РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &Ссылка) КАК ТиповойДвиженияССубконто
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(&Дата, ) КАК СоответствиеСчетовБУиНУСрезПоследних
		|				ПО ТиповойДвиженияССубконто.СчетДт = СоответствиеСчетовБУиНУСрезПоследних.СчетБУ
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТиповойДвиженияССубконто.СубконтоДт2,
		|			ТиповойДвиженияССубконто.СчетДт,
		|			ТиповойДвиженияССубконто.СубконтоКт3,
		|			ТиповойДвиженияССубконто.СубконтоДт3,
		|			ТиповойДвиженияССубконто.СубконтоДт1,
		|			ТиповойДвиженияССубконто.СубконтоКт2,
		|			ТиповойДвиженияССубконто.СчетКт,
		|			ТиповойДвиженияССубконто.СубконтоКт1,
		|			ТиповойДвиженияССубконто.Содержание,
		|			ТиповойДвиженияССубконто.Сумма,
		|			ТиповойДвиженияССубконто.НомерСтроки,
		|			ТиповойДвиженияССубконто.НомерЖурнала,
		|			ТиповойДвиженияССубконто.Период,
		|			ТиповойДвиженияССубконто.Организация) КАК ДвиженияДт
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ТиповойДвиженияССубконто.СчетДт КАК СчетДт,
		|				ТиповойДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
		|				ТиповойДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
		|				ТиповойДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
		|				ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
		|				ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
		|				ТиповойДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
		|				ТиповойДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
		|				ТиповойДвиженияССубконто.Сумма КАК Сумма,
		|				ТиповойДвиженияССубконто.Содержание КАК Содержание,
		|				ВЫБОР
		|					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетКт
		|							И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт1
		|								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт2
		|								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт3)
		|							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоДт1
		|							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = ТиповойДвиженияССубконто.СубконтоДт2
		|							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = ТиповойДвиженияССубконто.СубконтоДт3
		|						ТОГДА 10
		|					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетКт
		|							И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт1
		|								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт2
		|								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт3)
		|							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоДт1
		|							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = ТиповойДвиженияССубконто.СубконтоДт2
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО)
		|						ТОГДА 5
		|					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетКт
		|							И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт1
		|								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт2
		|								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт3)
		|							И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоДт1
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО)
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО)
		|						ТОГДА 4
		|					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетКт
		|							И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт1
		|								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт2
		|								ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоКт3)
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО)
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО)
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО)
		|						ТОГДА 3
		|					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетКт
		|							И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = НЕОПРЕДЕЛЕНО)
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО)
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО)
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО)
		|						ТОГДА 2
		|					КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = &ПустойСчетНУ
		|							И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = НЕОПРЕДЕЛЕНО)
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО)
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО)
		|							И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО)
		|						ТОГДА 1
		|				КОНЕЦ КАК Приоритет,
		|				СоответствиеСчетовБУиНУСрезПоследних.СчетНУ КАК СчетНУ,
		|				СоответствиеСчетовБУиНУСрезПоследних.СубконтоНУ1 КАК СубконтоНУ1,
		|				СоответствиеСчетовБУиНУСрезПоследних.СубконтоНУ2 КАК СубконтоНУ2,
		|				СоответствиеСчетовБУиНУСрезПоследних.СубконтоНУ3 КАК СубконтоНУ3,
		|				ТиповойДвиженияССубконто.НомерСтроки КАК НомерСтроки
		|			ИЗ
		|				РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &Ссылка) КАК ТиповойДвиженияССубконто
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(&Дата, ) КАК СоответствиеСчетовБУиНУСрезПоследних
		|					ПО ТиповойДвиженияССубконто.СчетДт = СоответствиеСчетовБУиНУСрезПоследних.СчетБУ
		|			ГДЕ
		|				СоответствиеСчетовБУиНУСрезПоследних.Учитывается = ИСТИНА) КАК ДанныеНУДт
		|			ПО ДвиженияДт.НомерСтроки = ДанныеНУДт.НомерСтроки
		|				И ДвиженияДт.Приоритет = ДанныеНУДт.Приоритет) КАК ДТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДвиженияКт.СчетДт КАК СчетДт,
		|			ДвиженияКт.СубконтоДт1 КАК СубконтоДт1,
		|			ДвиженияКт.СубконтоДт2 КАК СубконтоДт2,
		|			ДвиженияКт.СубконтоДт3 КАК СубконтоДт3,
		|			ДвиженияКт.СчетКт КАК СчетКт,
		|			ДвиженияКт.СубконтоКт1 КАК СубконтоКт1,
		|			ДвиженияКт.СубконтоКт2 КАК СубконтоКт2,
		|			ДвиженияКт.СубконтоКт3 КАК СубконтоКт3,
		|			ДвиженияКт.Сумма КАК Сумма,
		|			ДвиженияКт.Содержание КАК Содержание,
		|			ДвиженияКт.Приоритет КАК Приоритет,
		|			ДанныеНУКт.СчетНУ КАК СчетНУ,
		|			ДвиженияКт.НомерСтроки КАК НомерСтроки,
		|			ДанныеНУКт.СубконтоНУ2 КАК СубконтоНУ2,
		|			ДанныеНУКт.СубконтоНУ1 КАК СубконтоНУ1,
		|			ДанныеНУКт.СубконтоНУ3 КАК СубконтоНУ3
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ТиповойДвиженияССубконто.СчетДт КАК СчетДт,
		|				ТиповойДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
		|				ТиповойДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
		|				ТиповойДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
		|				ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
		|				ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
		|				ТиповойДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
		|				ТиповойДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
		|				ТиповойДвиженияССубконто.Сумма КАК Сумма,
		|				ТиповойДвиженияССубконто.Содержание КАК Содержание,
		|				МАКСИМУМ(ВЫБОР
		|						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетДт
		|								И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт1
		|									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт2
		|									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт3)
		|								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоКт1
		|								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = ТиповойДвиженияССубконто.СубконтоКт2
		|								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = ТиповойДвиженияССубконто.СубконтоКт3
		|							ТОГДА 10
		|						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетДт
		|								И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт1
		|									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт2
		|									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт3)
		|								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоКт1
		|								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = ТиповойДвиженияССубконто.СубконтоКт2
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО)
		|							ТОГДА 5
		|						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетДт
		|								И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт1
		|									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт2
		|									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт3)
		|								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоКт1
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО)
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО)
		|							ТОГДА 4
		|						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетДт
		|								И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт1
		|									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт2
		|									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт3)
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО)
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО)
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО)
		|							ТОГДА 3
		|						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетДт
		|								И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = НЕОПРЕДЕЛЕНО)
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО)
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО)
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО)
		|							ТОГДА 2
		|						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = &ПустойСчетНУ
		|								И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = НЕОПРЕДЕЛЕНО)
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО)
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО)
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО)
		|							ТОГДА 1
		|					КОНЕЦ) КАК Приоритет,
		|				ТиповойДвиженияССубконто.НомерСтроки КАК НомерСтроки,
		|				ТиповойДвиженияССубконто.Организация КАК Организация,
		|				ТиповойДвиженияССубконто.НомерЖурнала КАК НомерЖурнала,
		|				ТиповойДвиженияССубконто.Период КАК Период
		|			ИЗ
		|				РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &Ссылка) КАК ТиповойДвиженияССубконто
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(&Дата, ) КАК СоответствиеСчетовБУиНУСрезПоследних
		|					ПО ТиповойДвиженияССубконто.СчетКт = СоответствиеСчетовБУиНУСрезПоследних.СчетБУ
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ТиповойДвиженияССубконто.СубконтоДт2,
		|				ТиповойДвиженияССубконто.СчетДт,
		|				ТиповойДвиженияССубконто.СубконтоКт3,
		|				ТиповойДвиженияССубконто.СубконтоДт3,
		|				ТиповойДвиженияССубконто.СубконтоДт1,
		|				ТиповойДвиженияССубконто.СубконтоКт2,
		|				ТиповойДвиженияССубконто.СчетКт,
		|				ТиповойДвиженияССубконто.СубконтоКт1,
		|				ТиповойДвиженияССубконто.Содержание,
		|				ТиповойДвиженияССубконто.Сумма,
		|				ТиповойДвиженияССубконто.НомерСтроки,
		|				ТиповойДвиженияССубконто.Организация,
		|				ТиповойДвиженияССубконто.НомерЖурнала,
		|				ТиповойДвиженияССубконто.Период) КАК ДвиженияКт
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ТиповойДвиженияССубконто.СчетДт КАК СчетДт,
		|					ТиповойДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
		|					ТиповойДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
		|					ТиповойДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
		|					ТиповойДвиженияССубконто.СчетКт КАК СчетКт,
		|					ТиповойДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
		|					ТиповойДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
		|					ТиповойДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
		|					ТиповойДвиженияССубконто.Сумма КАК Сумма,
		|					ТиповойДвиженияССубконто.Содержание КАК Содержание,
		|					ВЫБОР
		|						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетДт
		|								И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт1
		|									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт2
		|									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт3)
		|								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоКт1
		|								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = ТиповойДвиженияССубконто.СубконтоКт2
		|								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = ТиповойДвиженияССубконто.СубконтоКт3
		|							ТОГДА 10
		|						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетДт
		|								И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт1
		|									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт2
		|									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт3)
		|								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоКт1
		|								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = ТиповойДвиженияССубконто.СубконтоКт2
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО)
		|							ТОГДА 5
		|						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетДт
		|								И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт1
		|									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт2
		|									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт3)
		|								И СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = ТиповойДвиженияССубконто.СубконтоКт1
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО)
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО)
		|							ТОГДА 4
		|						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетДт
		|								И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт1
		|									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт2
		|									ИЛИ СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = ТиповойДвиженияССубконто.СубконтоДт3)
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО)
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО)
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО)
		|							ТОГДА 3
		|						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = ТиповойДвиженияССубконто.СчетДт
		|								И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = НЕОПРЕДЕЛЕНО)
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО)
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО)
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО)
		|							ТОГДА 2
		|						КОГДА СоответствиеСчетовБУиНУСрезПоследних.СчетКоррБУ = &ПустойСчетНУ
		|								И (СоответствиеСчетовБУиНУСрезПоследних.ВидЗатратНУ = НЕОПРЕДЕЛЕНО)
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ1 = НЕОПРЕДЕЛЕНО)
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ2 = НЕОПРЕДЕЛЕНО)
		|								И (СоответствиеСчетовБУиНУСрезПоследних.СубконтоБУ3 = НЕОПРЕДЕЛЕНО)
		|							ТОГДА 1
		|					КОНЕЦ КАК Приоритет,
		|					СоответствиеСчетовБУиНУСрезПоследних.СчетНУ КАК СчетНУ,
		|					СоответствиеСчетовБУиНУСрезПоследних.СубконтоНУ1 КАК СубконтоНУ1,
		|					СоответствиеСчетовБУиНУСрезПоследних.СубконтоНУ2 КАК СубконтоНУ2,
		|					СоответствиеСчетовБУиНУСрезПоследних.СубконтоНУ3 КАК СубконтоНУ3,
		|					ТиповойДвиженияССубконто.НомерСтроки КАК НомерСтроки
		|				ИЗ
		|					РегистрБухгалтерии.Типовой.ДвиженияССубконто(, , Регистратор = &Ссылка) КАК ТиповойДвиженияССубконто
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(&Дата, ) КАК СоответствиеСчетовБУиНУСрезПоследних
		|						ПО ТиповойДвиженияССубконто.СчетКт = СоответствиеСчетовБУиНУСрезПоследних.СчетБУ
		|				ГДЕ
		|					СоответствиеСчетовБУиНУСрезПоследних.Учитывается = ИСТИНА) КАК ДанныеНУКт
		|				ПО ДвиженияКт.НомерСтроки = ДанныеНУКт.НомерСтроки
		|					И ДвиженияКт.Приоритет = ДанныеНУКт.Приоритет) КАК Кт
		|		ПО ДТ.НомерСтроки = Кт.НомерСтроки");
		Запрос.УстановитьПараметр("Дата", СтруктураШапкиДокумента.Дата);
		Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
		Запрос.УстановитьПараметр("ПустойСчетНУ", ПланыСчетов.Типовой.ПустаяСсылка());	
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// Сформируем проводки НУ
			СчетДтНУ = Выборка.СчетДтНУ; //СтруктураДтНУ.СчетНУ;
			СчетКтНУ = Выборка.СчетКтНУ; //СтруктураКтНУ.СчетНУ;    
			
			ПустойСчетДт = НЕ ЗначениеЗаполнено(СчетДтНУ);
			ПустойСчетКт = НЕ ЗначениеЗаполнено(СчетКтНУ);
			// Если нет аналогов в НУ для обоих счетов БУ - проводки не формируем
			Если ПустойСчетДт И ПустойСчетКт Тогда
				Если ВыдаватьСообщения Тогда
					Если ПустойСчетДт тогда
						Сообщить("Не установлено соответствие счета налогового учета для счета " + Выборка.СчетДт);				
					КонецЕсли;	
					Если ПустойСчетКт тогда
						Сообщить("Не установлено соответствие счета налогового учета для счета " + Выборка.СчетКт);
					КонецЕсли;
					Сообщить("Корреспонденции в НУ для проводки бухгалтерского учета № " + СокрЛП(Выборка.НомерСтроки) + " не сформирована!", СтатусСообщения.Важное);			
				КонецЕсли;	
				
				Возврат; // оба счета в НУ не транслируются
			КонецЕсли;
			
			// Формируем корреспонденцию в налоговом учете
			ПроводкаНУ = ПроводкиНУ.Добавить();
			ПроводкаНУ.Период 		= Выборка.Период;
			ПроводкаНУ.Организация 	= Выборка.Организация;
			Если НЕ ПустойСчетДт Тогда		
				ПроводкаНУ.СчетДт 		= СчетДтНУ;
				ПроводкаНУ.ВидУчетаДТ 	= ВидУчетаНУ;
				// попытаемся проставить субконто по данным БУ
				Для Счетчик = 1 по Выборка.СчетДт.ВидыСубконто.Количество() Цикл
					ВидСубконтоДТ 	= Выборка.СчетДт.ВидыСубконто[Счетчик - 1].ВидСубконто;								
					СубконтоБУ 		= Выборка["СубконтоДт" + Счетчик];
					Для СчетчикНУ = 1 по СчетДТНУ.ВидыСубконто.Количество() Цикл
						ВидСубконтоДтНУ = СчетДтНУ.ВидыСубконто[СчетчикНУ - 1].ВидСубконто;				
						Если  ВидСубконтоДтНУ.ТипЗначения.СодержитТип(ТИпЗнч(СубконтоБУ)) Тогда
							ПроводкаНУ.СубконтоДт[ВидСубконтоДтНУ] = СубконтоБУ;
						КонецЕсли;	
					КонецЦикла;				
					
				КонецЦикла;             			
			КонецЕсли;                          	
			Если НЕ ПустойСчетКт Тогда
				ПроводкаНУ.СчетКт       = СчетКтНУ;
				ПроводкаНУ.ВидУчетаКт 	= ВидУчетаНУ;
				Для Счетчик = 1 по Выборка.СчетКт.ВидыСубконто.Количество() Цикл
					ВидСубконтоКт 	= Выборка.СчетКт.ВидыСубконто[Счетчик - 1].ВидСубконто;
					СубконтоБУ 		= Выборка["СубконтоКт" + Счетчик];
					Для СчетчикНУ = 1 по СчетКТНУ.ВидыСубконто.Количество() Цикл
						ВидСубконтоКтНУ = СчетКтНУ.ВидыСубконто[СчетчикНУ - 1].ВидСубконто;				
						Если  ВидСубконтоКтНУ.ТипЗначения.СодержитТип(ТИпЗнч(СубконтоБУ)) Тогда
							ПроводкаНУ.СубконтоКт[ВидСубконтоКтНУ] = СубконтоБУ;
						КонецЕсли;	
					КонецЦикла;								
				КонецЦикла;             			
			КонецЕсли;
			// если при трансляции были заданы конкретные значения НУ, то их приоритет выше
			// устанавливаем значения субконто, полученные при трансляции.
			Для Счетчик = 1 по 3 Цикл
				СубконтоДт = Выборка["СубконтоДтНУ" + Счетчик];
				СубконтоКт = Выборка["СубконтоКтНУ" + Счетчик];
				Если ЗначениеЗаполнено(СубконтоДт) ТОгда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, Счетчик, СубконтоДт);			
				КонецЕсли;	
				Если ЗначениеЗаполнено(СубконтоКт) Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, Счетчик, СубконтоКт);			
				КонецЕсли;			
			КонецЦикла;			
			
			ПроводкаНУ.НомерЖурнала = Выборка.НомерЖурнала;
			ПроводкаНУ.Сумма        = Выборка.Сумма;
			ПроводкаНУ.Содержание   = Выборка.Содержание;			
		КонецЦикла;		
		ПроводкиНУ.Записать();
		
		
	КонецПроцедуры
	
	Процедура СформироватьКорреспонденцииПоОтражениюПостоянныхРазницВНУ()
		Сообщить("-----------------------");
		Сообщить("Формирование корреспонденций по отражению постоянных разниц в налоговом учете в первичных документах");
		
		СтруктураВидовОбрабатываемыхДокументов = Новый Структура("АвансовыйОтчет,АктОбОказанииПроизводственныхУслуг,ВводНачальныхОстатковОС,"+
		"ВозвратТоваровОтПокупателя,ВозвратТоваровПоставщику,ГТДИмпорт,КорректировкаДолга,"+
		"МодернизацияОС,ОприходованиеТоваров,ПередачаНМА,ПередачаОС,ПереоценкаВнеоборотныхАктивов,"+
		"ПлатежноеПоручениеВходящее,ПлатежноеПоручениеИсходящее,ПлатежныйОрдерПоступлениеДенежныхСредств,"+
		"ПлатежныйОрдерСписаниеДенежныхСредств,ПоступлениеДопРасходов,ПоступлениеИзПереработки,"+
		"ПоступлениеНМА,ПоступлениеТоваровУслуг,ПринятиеКУчетуОС,ПриходныйКассовыйОрдер,РасходныйКассовыйОрдер,"+
		"РасчетНалоговПриПоступленииАктивовУслуг,РеализацияТоваровУслуг,РеализацияУслугПоПереработке,СписаниеНМА,"+
		"СписаниеОС,СписаниеТоваров,ТребованиеНакладная");
		
		ТекстЗапросаПоДокументам = "";
		Для Каждого ТекущийВидДокумента из СтруктураВидовОбрабатываемыхДокументов Цикл
			ВидДокумента = ТекущийВидДокумента.Ключ;
			Если не ТекстЗапросаПоДокументам = "" Тогда
				ТекстЗапросаПоДокументам = ТекстЗапросаПоДокументам + "
				|ОБЪЕДИНИТЬ ВСЕ 
				|";
			КонецЕсли;	
			
			ТекстЗапросаПоДокументам = ТекстЗапросаПоДокументам + "
			|ВЫБРАТЬ 
			|"+ВидДокумента+".Ссылка как Ссылка,
			|"+ВидДокумента+".Представление,
			|"+ВидДокумента+".Дата,
			|"+ВидДокумента+".Организация,
			|"+ВидДокумента+".ОтражатьВНалоговомУчете
			|		ИЗ
			|			Документ."+ВидДокумента+" КАК "+ВидДокумента+"
			|ГДЕ "+ВидДокумента+".Проведен = Истина ";		
		КонецЦикла;	
		
		Запрос = Новый Запрос();	
		Запрос.Текст =			
		"ВЫБРАТЬ
		|	ЕСТЬNULL(УчетнаяПолитикаБухгалтерскийУчет.УчетВременныхРазницПоНалогуНаПрибыль, ЛОЖЬ) КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомКПН, ЛОЖЬ) КАК ОрганизацияПлательщикНалогаНаПрибыль,
		|	ВыборкаДокументов.Представление КАК ПредставлениеДокумента,
		|	ВыборкаДокументов.Ссылка КАК ДокументСсылка,
		|	ВыборкаДокументов.Дата КАК Дата,
		|	УчетнаяПолитикаБухгалтерскийУчет.УчетВременныхРазницПоНалогуНаПрибыль,
		|	УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомКПН,
		|	ВыборкаДокументов.ОтражатьВНалоговомУчете
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(УчетнаяПолитикаБухгалтерскийУчетСрезПоследних.Период) КАК ПериодБУ,
		|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчетСрезПоследних.Период) КАК ПериодНУ,
		|		ВыборкаДокументов.Ссылка КАК Ссылка,
		|		ВыборкаДокументов.Представление КАК Представление,
		|		ВыборкаДокументов.Организация КАК Организация,
		|		ВыборкаДокументов.Дата КАК Дата,
		|		ВыборкаДокументов.ОтражатьВНалоговомУчете КАК ОтражатьВНалоговомУчете
		|	ИЗ  (" + ТекстЗапросаПоДокументам + ") как ВыборкаДокументов
		|		
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаБухгалтерскийУчет КАК УчетнаяПолитикаБухгалтерскийУчетСрезПоследних
		|			ПО ВыборкаДокументов.Организация = УчетнаяПолитикаБухгалтерскийУчетСрезПоследних.Организация
		|				И ВыборкаДокументов.Дата >= УчетнаяПолитикаБухгалтерскийУчетСрезПоследних.Период
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
		|			ПО ВыборкаДокументов.Организация = УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация
		|				И ВыборкаДокументов.Дата >= УчетнаяПолитикаНалоговыйУчетСрезПоследних.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВыборкаДокументов.Ссылка,
		|		ВыборкаДокументов.Дата,
		|		ВыборкаДокументов.Представление,
		|		ВыборкаДокументов.Организация,
		|		ВыборкаДокументов.ОтражатьВНалоговомУчете) КАК ВыборкаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаБухгалтерскийУчет КАК УчетнаяПолитикаБухгалтерскийУчет
		|		ПО ВыборкаДокументов.ПериодБУ = УчетнаяПолитикаБухгалтерскийУчет.Период
		|			И ВыборкаДокументов.Организация = УчетнаяПолитикаБухгалтерскийУчет.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО ВыборкаДокументов.ПериодНУ = УчетнаяПолитикаНалоговыйУчет.Период
		|			И ВыборкаДокументов.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
		|ГДЕ
		|	УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомКПН
		|			И НЕ ВыборкаДокументов.ОтражатьВНалоговомУчете
		|			И НЕ УчетнаяПолитикаБухгалтерскийУчет.УчетВременныхРазницПоНалогуНаПрибыль
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВыборкаДокументов.Дата";
		
		Выборка = Запрос.Выполнить().Выбрать();                 	
		Ном = 0;
		КоличествоВЗапросе = Выборка.Количество();
		Пока Выборка.Следующий() Цикл					
			Ном = Ном + 1;
			Состояние(СокрЛП(Ном) + " из " +СокрЛП(КоличествоВЗапросе)+": Запись корреспонденций НУ <" + Выборка.ПредставлениеДокумента + ">");
			
			// Обновление информации в документе 
			ДокументОбъект = Выборка.ДокументСсылка.ПолучитьОбъект();				
			СтруктураШапкиДокумента = Новый Структура("Дата, Ссылка, ОрганизацияПлательщикНалогаНаПрибыль,"
			"ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, ОтражатьВНалоговомУчете", 
			Выборка.Дата, Выборка.ДокументСсылка, Выборка.ОрганизацияПлательщикНалогаНаПрибыль,
			Выборка.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль, Выборка.ОтражатьВНалоговомУчете);
			СформироватьКорреспонденцииПоОтражениюПостоянныхРазницВНУДляДокумента(ДокументОбъект, СтруктураШапкиДокумента, Ложь);										 		
		КонецЦикла;
		Состояние("");
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА РЕКВИЗИТОВ НАЛОГОВОГО УЧЕТА
	
	// Процедура производить заполнение Справочника Группы Налогового учета и 
	// регистра Сведения о группах НУ
	Процедура ЗаполнитьСведенияОГруппахФАНУ()	
		#Если Клиент Тогда	
			Состояние("Заполнение сведений о группах налогового учета фиксированных активов");
		#КонецЕсли
		// Заполнение справочника ГруппыФАНУ
		// I группа
		ГруппаФА = НайтиСоздатьГуппуФАНУ("Здания, сооружения (за исключением нефтянных, газовых скважин и передаточных устройств)",
		"I", Перечисления.ВидыНалоговогоУчетаВГруппахФА.ПоОбъектам);
		СоздатьЗаписьСведенийОГруппахФАНУ(ГруппаФА, 15, 10, 10);
		
		// II группа
		ГруппаФА = НайтиСоздатьГуппуФАНУ("Машины и оборудование, за исключением машин и оборудования нефтегазодобычи",
		"II", Перечисления.ВидыНалоговогоУчетаВГруппахФА.ПоГруппе);
		СоздатьЗаписьСведенийОГруппахФАНУ(ГруппаФА, 25, 25, 25);
		
		// III группа
		ГруппаФА = НайтиСоздатьГуппуФАНУ("Компьютеры, программное обеспечение и оборудование для обработки информации",
		"III", Перечисления.ВидыНалоговогоУчетаВГруппахФА.ПоГруппе);
		СоздатьЗаписьСведенийОГруппахФАНУ(ГруппаФА, 15, 40, 40);
		
		// IV группа
		ГруппаФА = НайтиСоздатьГуппуФАНУ("Фиксированные активы, не включенные в другие группы",
		"IV", Перечисления.ВидыНалоговогоУчетаВГруппахФА.ПоГруппе);
		СоздатьЗаписьСведенийОГруппахФАНУ(ГруппаФА, 15, 15, 15);
		
	КонецПроцедуры
	
	// Процедура Создает запись в регистре сведений 
	// "Сведения о группах ФА"
	Процедура СоздатьЗаписьСведенийОГруппахФАНУ(ГруппаФА, ВычетНаРемонт, ПредельнаяНормаАмортизации, ПрименяемаяНормаАмортизации)
		
		НаборЗаписей = РегистрыСведений.СведенияОГруппахФиксированныхАктивов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Использование = Истина;
		НаборЗаписей.Отбор.Период.ВидСравнения 	= ВидСравнения.Равно;		
		НаборЗаписей.Отбор.Период.Значение	 	= '20060101';		
		
		НаборЗаписей.Отбор.ГруппаФА.Использование = Истина;
		НаборЗаписей.Отбор.ГруппаФА.ВидСравнения 	= ВидСравнения.Равно;		
		НаборЗаписей.Отбор.ГруппаФА.Значение	 	= ГруппаФА;		
		
		Запись = НаборЗаписей.Добавить();
		Запись.Период = '20060101';
		Запись.ГруппаФА = ГруппаФА;
		Запись.ВычетНаРемонт = ВычетНаРемонт;
		Запись.ПредельнаяНормаАмортизации = ПредельнаяНормаАмортизации;
		Запись.ПрименяемаяНормаАмортизации = ПрименяемаяНормаАмортизации;
		НаборЗаписей.Записать();                                         		
		
	КонецПроцедуры
	
	// Функция формирует структуру метаданных
	// для обработки в процедуре УстановитьАналитикуСчетаРемонтаНУ
	Функция СформироватьСтруктуруДанныхШапки()
		Структура = Новый структура;
		Макет 	= ПолучитьМакет("Данные");	
		Область = Макет.Области["РеквизитыНУ_ВШапке"];
		ПредДокумент = Неопределено;
		
		Для Ном = Область.Верх По Область.Низ Цикл
			Документ = СокрЛП(Макет.Область(Ном, 1).Текст);
			РеквизитСубконто = СокрЛП(Макет.Область(Ном, 2).Текст);
			ИмяСубконто		 = Лев(РеквизитСубконто,СтрДлина(РеквизитСубконто)-1);
			РеквизитСчета = СокрЛП(Макет.Область(Ном, 3).Текст);
			
			Если НЕ Структура.Свойство(Документ) Тогда
				Структура.Вставить(Документ, Новый Структура());			
			КонецЕсли;	
			Если НЕ Структура[Документ].Свойство(РеквизитСчета) Тогда
				Структура[Документ].Вставить(РеквизитСчета, Новый Структура("ИмяРеквизитаСубконто", ИмяСубконто));			
			КонецЕсли;	
			Если НЕ Структура[Документ][РеквизитСчета].Свойство(РеквизитСубконто)Тогда
				Структура[Документ][РеквизитСчета].Вставить(РеквизитСубконто);			
			КонецЕсли;			
		КонецЦикла;  	
		
		Возврат Структура;
	КонецФункции	
	
	// Функция формирует структуру метаданных
	// для обработки в процедуре УстановитьАналитикуСчетаРемонтаНУ
	Функция СформироватьСтруктуруДанныхТЧ()
		Структура = Новый структура;
		Макет 	= ПолучитьМакет("Данные");	
		Область = Макет.Области["РеквизитыВНУ_ТабЧасти"];
		
		Для Ном = Область.Верх По Область.Низ Цикл
			Документ = СокрЛП(Макет.Область(Ном, 1).Текст);
			ТабличнаяЧасть = СокрЛП(Макет.Область(Ном, 2).Текст);
			РеквизитСубконто = СокрЛП(Макет.Область(Ном, 3).Текст);
			РеквизитСчета = СокрЛП(Макет.Область(Ном, 4).Текст);
			ИмяСубконто		 = Лев(РеквизитСубконто,СтрДлина(РеквизитСубконто)-1);
			
			Если НЕ Структура.Свойство(Документ) Тогда
				Структура.Вставить(Документ, Новый Структура());			
			КонецЕсли;	
			Если НЕ Структура[Документ].Свойство(ТабличнаяЧасть) Тогда
				Структура[Документ].Вставить(ТабличнаяЧасть, Новый Структура())			
			КонецЕсли;	
			Если НЕ Структура[Документ][ТабличнаяЧасть].Свойство(РеквизитСчета) Тогда
				Структура[Документ][ТабличнаяЧасть].Вставить(РеквизитСчета, Новый Структура("ИмяРеквизитаСубконто", ИмяСубконто))			
			КонецЕсли;	
			Если НЕ Структура[Документ][ТабличнаяЧасть][РеквизитСчета].Свойство(РеквизитСубконто)Тогда
				Структура[Документ][ТабличнаяЧасть][РеквизитСчета].Вставить(РеквизитСубконто);			
			КонецЕсли;			
		КонецЦикла;  	
		
		Возврат Структура;
	КонецФункции	
	
	Процедура УстановитьАналитикуВидаРемонтаВПроводках()
		Сообщить("-----------------------");
		Сообщить("Установка аналитики налогового учета по видам ремонта в корреспонденциях документов");
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	НалоговыйОбороты.Регистратор КАК Регистратор,
		|	НалоговыйОбороты.НомерСтроки
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Обороты(, , Запись, Счет В ИЕРАРХИИ (&СчетРемонта), , , , ) КАК НалоговыйОбороты
		|ИТОГИ ПО
		|	Регистратор");
		СчетРемонта = ПланыСчетов.Налоговый.РасходыНаРемонтВА;	
		Запрос.УстановитьПараметр("СчетРемонта", СчетРемонта);
		
		НаборЗаписей = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.Регистратор.Значение  = Выборка.Регистратор;
			НаборЗаписей.Прочитать();
			ВыборкаДетали = Выборка.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				СтрокаЗаписи = НаборЗаписей[ВыборкаДетали.НомерСтроки-1];
				Если СтрокаЗаписи.СчетДт = СчетРемонта Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаЗаписи.СчетДт,СтрокаЗаписи.СубконтоДт,"ВидыРемонтаВА",      Перечисления.ВидыРемонтаВА.Капитальный);
					
				КонецЕсли;	
				Если СтрокаЗаписи.СчетКт = СчетРемонта Тогда
					ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(СтрокаЗаписи.СчетКт,СтрокаЗаписи.СубконтоКт,"ВидыРемонтаВА",      Перечисления.ВидыРемонтаВА.Капитальный);
				КонецЕсли;	
			КонецЦикла;	
			НаборЗаписей.Записать();		
		КонецЦикла;	
	КонецПроцедуры
	
	// Функция Устанавливает значение по умолчанию "Капитальный ремонт"
	// во всех документах, в которых встречается счет н860
	// в связи с добавлением аналитики на счете в релизе 1.0.5.1
	Процедура УстановитьАналитикуСчетаРемонтаНУ()
		Сообщить("-----------------------");
		Сообщить("Установка аналитики налогового учета по видам ремонта в документах");
		
		СтруктураШапки 	= СформироватьСтруктуруДанныхШапки();
		СтруктураТЧ 	=  СформироватьСтруктуруДанныхТЧ();
		СчетРемонта 	= ПланыСчетов.Налоговый.РасходыНаРемонтВА;
		МассивСсылок 	= Новый Массив;
		МассивСсылок.Добавить(СчетРемонта);
		ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
		Для Каждого Стр из ТаблицаСсылок Цикл
			СсылкаНАОбъект = Стр[1];
			Модифицирован = Ложь;
			ИмяОбъекта = СсылкаНаОбъект.метаданные().Имя;
			Если СтруктураШапки.Свойство(ИмяОбъекта) Тогда
				// Объект есть в "группе риска" и она в шапке объекта
				Для Каждого РеквизитСчета из СтруктураШапки[ИмяОбъекта] Цикл
					Если СсылкаНАОбъект[РеквизитСчета.Ключ] = СчетРемонта Тогда
						Объект = СсылкаНАОбъект.ПолучитьОбъект();
						ИмяРеквизитаСубконто = РеквизитСчета.Значение["ИмяРеквизитаСубконто"];
						// проверим и установим аналитику. Новая аналитика - последняя для счета
						ПроцедурыБухгалтерскогоУчета.НазначитьТипДляГруппыНумерованнойАналитикиСчета(Объект, Объект[РеквизитСчета.Ключ], ИмяРеквизитаСубконто,	    РеквизитСчета.Значение.Количество()-1);
						Объект[ИмяРеквизитаСубконто + Строка(РеквизитСчета.Значение.Количество() -1)] = Перечисления.ВидыРемонтаВА.Капитальный;					 
						Модифицирован = Истина;					 
					КонецЕсли;	 
				КонецЦикла; 
				Если Модифицирован Тогда
					Сообщить("Записан документ " + СокрЛП(СсылкаНАОбъект));
					Объект.Записать();
				КонецЕсли;	 
			КонецЕсли; 
			Модифицирован = Ложь;
			// Объект есть в "группе риска" и она в табличной части объекта 
			Если СтруктураТч.Свойство(ИмяОбъекта) Тогда
				// Объект есть в "группе риска" и она в шапке объекта
				Объект = СсылкаНАОбъект.ПолучитьОбъект();
				Для Каждого РеквизитТч из СтруктураТч[ИмяОбъекта] Цикл
					// Цикл по страм табличной части
					Для Каждого СтрокаТЧ из Объект[РеквизитТч.Ключ] Цикл						
						Для Каждого РеквизитСчета из РеквизитТч.Значение Цикл
							Если СтрокаТЧ[РеквизитСчета.Ключ] = СчетРемонта Тогда												                                                                    								
								
								ИмяРеквизитаСубконто = РеквизитСчета.Значение["ИмяРеквизитаСубконто"];
								// проверим и установим аналитику. Новая аналитика - последняя для счета
								ПроцедурыБухгалтерскогоУчета.НазначитьТипДляГруппыНумерованнойАналитикиСчета(СтрокаТЧ, СтрокаТЧ[РеквизитСчета.Ключ], ИмяРеквизитаСубконто,	    РеквизитСчета.Значение.Количество()-1);
								СтрокаТЧ[ИмяРеквизитаСубконто + Строка(РеквизитСчета.Значение.Количество() -1)] = Перечисления.ВидыРемонтаВА.Капитальный;					 
								Модифицирован = Истина;					 
							КонецЕсли;	 
						КонецЦикла; 
					КонецЦикла; 			
				КонецЦикла; 			
				Если Модифицирован Тогда
					Сообщить("Записан документ " + СокрЛп(СсылкаНАОбъект));
					Объект.Записать();
				КонецЕсли;	 
			КонецЕсли;   		 
		КонецЦикла;		 	
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// БУХГАЛТЕРСКИЙ УЧЕТ
	
	// Заполняет регистр сведений СоответствиеСчетовБУиНУ 
	//
	Процедура ЗаполнитьСоответствиеСчетовБУиНУ(ТекущаяДата)
		ДокументУстановкаСоответствияСчетовБУиНУ = Документы.УстановкаСоответствияСчетовБУиНУ.СоздатьДокумент();
		ДокументУстановкаСоответствияСчетовБУиНУ.Дата = ТекущаяДата;
		ДокументУстановкаСоответствияСчетовБУиНУ.Организация = ОрганизацияПервоначальногоЗаполнения;
		ДокументУстановкаСоответствияСчетовБУиНУ.УстановитьНовыйНомер();
		ДокументУстановкаСоответствияСчетовБУиНУ.ЗаполнитьСоответствиеСчетовБУиНУпоУмолчанию();
		Попытка
			ДокументУстановкаСоответствияСчетовБУиНУ.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Возврат;
		КонецПопытки;
		Попытка
			ДокументУстановкаСоответствияСчетовБУиНУ.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
	КонецПроцедуры // ЗаполнитьСоответствиеСчетовБУиНУ()
	
	// Начальное заполнение справочника "КлассификаторСтранМира".
	//
	Процедура НачальноеЗаполнениеСправочникаКлассификаторСтранМира()
		
		Казахстан = Справочники.КлассификаторСтранМира.Казахстан;
		
		// Заполнение полного наименования предопределенного элемента.
		КазахстанОбъект                    = Казахстан.ПолучитьОбъект();
		КазахстанОбъект.Наименование	   = "КАЗАХСТАН";
		КазахстанОбъект.НаименованиеПолное = "Республика Казахстан";
		КазахстанОбъект.КодАльфа2		   = "KZ";
		КазахстанОбъект.КодАльфа3		   = "KAZ";
		КазахстанОбъект.Записать();
		
	КонецПроцедуры // НачальноеЗаполнениеСправочникаКлассификаторСтранМира()
	
	// Устанавливает флаг "Запретить использовать в проводках"
	//
	Процедура УставновитьПараметрыСчетовБУиНУ()
		
		НачатьТранзакцию();
		
		Состояние("Установка запрета использования в проводках групп счетов плана счетов...");
		
		ВыборкаСчетов = ПланыСчетов.Типовой.ВыбратьИерархически();
		Пока ВыборкаСчетов.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСчетов.Ссылка.Родитель) Тогда			
				Продолжить;
			КонецЕсли;
			
			Объект = ВыборкаСчетов.Ссылка.Родитель.ПолучитьОбъект();
			Если Объект.ЗапретитьИспользоватьВПроводках Тогда
				Продолжить;
			КонецЕсли;
			
			Объект.ЗапретитьИспользоватьВПроводках = Истина;
			Объект.Записать();
			
		КонецЦикла;
		
		ВыборкаСчетов = ПланыСчетов.Налоговый.ВыбратьИерархически();
		Пока ВыборкаСчетов.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСчетов.Ссылка.Родитель) Тогда
				Продолжить;
			КонецЕсли;
			
			Объект = ВыборкаСчетов.Ссылка.Родитель.ПолучитьОбъект();
			Если Объект.ЗапретитьИспользоватьВПроводках Тогда
				Продолжить;
			КонецЕсли;
			
			Объект.ЗапретитьИспользоватьВПроводках = Истина;
			Объект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	КонецПроцедуры
	
	// Заполняет регистры сведения бухгалтерии связанных со счетами учета
	//
	Процедура ЗаполнитьРегистрыСчетовУчета()
		
		НачатьТранзакцию();
		
		Состояние("Выполняется начальное заполнение регистра сведений ""Счета учета расчетов с контрагентами""...");
		
		Набор  = РегистрыСведений.СчетаУчетаРасчетовСКонтрагентами.СоздатьНаборЗаписей();
		//Запись с пустым измерением ВидРасчетовПоДоговору  - подставляется пока не выбран договор.
		Запись = Набор.Добавить();
		Запись.Организация                         = Справочники.Организации.ПустаяСсылка();
		Запись.Контрагент                          = Справочники.Контрагенты.ПустаяСсылка();
		Запись.Договор                             = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Запись.ВидРасчетовПоДоговору               = Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка();
		Запись.СчетУчетаРасчетовСПоставщиком       = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам;
		Запись.СчетУчетаАвансовВыданных            = ПланыСчетов.Типовой.КраткосрочныеАвансыВыданные;
		Запись.СчетУчетаРасчетовСПокупателем       = ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков;
		Запись.СчетУчетаАвансовПолученных          = ПланыСчетов.Типовой.КраткосрочныеАвансыПолученные;
		//Запись.СчетУчетаРасчетовСПоставщикомПоВозвратам = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамТМЗПоставщикам;
		//Запись.СчетРасчетовСПокупателемПоВозвратам = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамРеализованныхГотовойПродукцииТоваровРаботУслуг;
		//Запись с измерением ВидРасчетовПоДоговору  - РасчетыВВалютеРегламентированногоУчета.
		Запись = Набор.Добавить();
		Запись.Организация                         = Справочники.Организации.ПустаяСсылка();
		Запись.Контрагент                          = Справочники.Контрагенты.ПустаяСсылка();
		Запись.Договор                             = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Запись.ВидРасчетовПоДоговору               = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;
		Запись.СчетУчетаРасчетовСПоставщиком       = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам;
		Запись.СчетУчетаАвансовВыданных            = ПланыСчетов.Типовой.КраткосрочныеАвансыВыданные;
		Запись.СчетУчетаРасчетовСПокупателем       = ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков;
		Запись.СчетУчетаАвансовПолученных          = ПланыСчетов.Типовой.КраткосрочныеАвансыПолученные;
		//Запись.СчетУчетаРасчетовСПоставщикомПоВозвратам = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамТМЗПоставщикам;
		//Запись.СчетРасчетовСПокупателемПоВозвратам = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамРеализованныхГотовойПродукцииТоваровРаботУслуг;
		//Запись с измерением ВидРасчетовПоДоговору  - РасчетыВИностраннойВалюте.
		Запись = Набор.Добавить();
		Запись.Организация                         = Справочники.Организации.ПустаяСсылка();
		Запись.Контрагент                          = Справочники.Контрагенты.ПустаяСсылка();
		Запись.Договор                             = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Запись.ВидРасчетовПоДоговору               = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
		Запись.СчетУчетаРасчетовСПоставщиком       = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам;
		Запись.СчетУчетаАвансовВыданных            = ПланыСчетов.Типовой.КраткосрочныеАвансыВыданные;
		Запись.СчетУчетаРасчетовСПокупателем       = ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков;
		Запись.СчетУчетаАвансовПолученных          = ПланыСчетов.Типовой.КраткосрочныеАвансыПолученные;
		//Запись.СчетУчетаРасчетовСПоставщикомПоВозвратам = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамТМЗПоставщикам;
		//Запись.СчетРасчетовСПокупателемПоВозвратам = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоВозвратамРеализованныхГотовойПродукцииТоваровРаботУслуг;
		
		
		Набор.Записать();
		
		ЗафиксироватьТранзакцию();
		
	КонецПроцедуры //ЗаполнитьРегистрыСчетовУчета()
	
	// Формирует группы элементов справочника "Номенклатура"
	// и соответствующие записи регистра "Счета учета номенклатуры".
	//
	Процедура ЗаполнитьСправочникНоменклатура()
		
		НачатьТранзакцию();
		
		Состояние("Выполняется начальное заполнение справочника ""Номенклатура"" и регистра сведений ""Счета учета номенклатуры""...");
		
		Элемент = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Основная номенклатурная группа", Истина);
		
		Если Элемент = Справочники.НоменклатурныеГруппы.ПустаяСсылка() Тогда
			
			Элемент = Справочники.НоменклатурныеГруппы.СоздатьЭлемент();
			Элемент.Наименование = "Основная номенклатурная группа";
			Элемент.Записать();
			
		КонецЕсли;
		
		Набор  = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьНаборЗаписей();
		Запись = Набор.Добавить();
		
		Запись.Организация  = Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		
		Запись.СчетУчетаБУ                          = ПланыСчетов.Типовой.Товары;
		//Запись.СчетУчетаЗабалансовый                = ПланыСчетов.Типовой.МатериалыПринятыеВПереработку;
		//Запись.СчетУчетаПередачиБУ                  = ПланыСчетов.Типовой.МатериалыПереданныеВПереработку;
		//Запись.СчетУчетаПередачиЗабалансовый        = ПланыСчетов.Типовой.МатериалыПринятыеВПереработкуВПроизводстве;
		//Запись.СчетУчетаНДСПоПриобретению           = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		Запись.СчетУчетаНДСПоРеализации             = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;
		Запись.СчетДоходовОтРеализацииБУ            = ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг;
		Запись.СчетДоходовПриВозвратеБУ             = ПланыСчетов.Типовой.ВозвратПроданнойПродукции;
		Запись.СчетСебестоимостиПриРеализацииБУ     = ПланыСчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг;
		
		// счета налогового учета
		Запись.СчетУчетаНУ							= ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетУчетаБУ), , , ТекущаяДата());	
		Запись.СчетУчетаПередачиНУ					= ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетУчетаПередачиБУ), , , ТекущаяДата());	
		Запись.СчетДоходовОтРеализацииНУ			= ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетДоходовОтРеализацииБУ), , , ТекущаяДата());	
		Запись.СчетДоходовПриВозвратеНУ             = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетДоходовПриВозвратеБУ), , , ТекущаяДата());	
		Запись.СчетСебестоимостиПриРеализацииНУ		= ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетСебестоимостиПриРеализацииБУ), , , ТекущаяДата());	
		
		//счета для учета передачи структурным подразделениям
		Запись.СчетПоложительныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ = ПланыСчетов.Типовой.ПрочиеДоходы;
		Запись.СчетОтрицательныхОтклоненийПриПередачеСтруктурнымПодразделениямБУ = ПланыСчетов.Типовой.ПрочиеРасходы;
		
		
		Запись = Набор.Добавить();
		// Группа "Товары"
		Группа = Справочники.Номенклатура.НайтиПоНаименованию("Товары");
		Если Группа = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Группа = Справочники.Номенклатура.СоздатьГруппу();
			Группа.Наименование = "Товары";
			Группа.Записать();
		КонецЕсли;
		
		Запись.Организация  = Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура = Группа.Ссылка;
		
		Запись.СчетУчетаБУ                          = ПланыСчетов.Типовой.Товары;	
		//Запись.СчетУчетаЗабалансовый                = ПланыСчетов.Типовой.МатериалыПринятыеВПереработку;
		//Запись.СчетУчетаПередачиБУ                  = ПланыСчетов.Типовой.МатериалыПереданныеВПереработку;
		//Запись.СчетУчетаПередачиЗабалансовый        = ПланыСчетов.Типовой.МатериалыПринятыеВПереработкуВПроизводстве;
		//Запись.СчетУчетаНДСПоПриобретению           = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		Запись.СчетУчетаНДСПоРеализации             = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;	
		Запись.СчетДоходовОтРеализацииБУ            = ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг;
		Запись.СчетДоходовПриВозвратеБУ             = ПланыСчетов.Типовой.ВозвратПроданнойПродукции;
		Запись.СчетСебестоимостиПриРеализацииБУ     = ПланыСчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг;
		
		// счета налогового учета
		Запись.СчетУчетаНУ							= ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетУчетаБУ), , , ТекущаяДата());	
		Запись.СчетУчетаПередачиНУ					= ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетУчетаПередачиБУ), , , ТекущаяДата());	
		Запись.СчетДоходовОтРеализацииНУ			= ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетДоходовОтРеализацииБУ), , , ТекущаяДата());	
		Запись.СчетДоходовПриВозвратеНУ             = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетДоходовПриВозвратеБУ), , , ТекущаяДата());	
		Запись.СчетСебестоимостиПриРеализацииНУ		= ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетСебестоимостиПриРеализацииБУ), , , ТекущаяДата());	
		
		Запись = Набор.Добавить();
		// Группа "Материалы"
		Группа = Справочники.Номенклатура.НайтиПоНаименованию("Материалы");
		Если Группа = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Группа = Справочники.Номенклатура.СоздатьГруппу();
			Группа.Наименование = "Материалы";
			Группа.Записать();
		КонецЕсли;
		
		Запись.Организация  = Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура = Группа.Ссылка;
		
		Запись.СчетУчетаБУ                          = ПланыСчетов.Типовой.СырьеИМатериалы;
		//Запись.СчетУчетаЗабалансовый                = ПланыСчетов.Типовой.МатериалыПринятыеВПереработку;
		//Запись.СчетУчетаПередачиБУ                  = ПланыСчетов.Типовой.МатериалыПереданныеВПереработку;
		//Запись.СчетУчетаПередачиЗабалансовый        = ПланыСчетов.Типовой.МатериалыПринятыеВПереработкуВПроизводстве;
		//Запись.СчетУчетаНДСПоПриобретению           = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		Запись.СчетУчетаНДСПоРеализации             = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;	
		Запись.СчетДоходовОтРеализацииБУ            = ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг;
		Запись.СчетДоходовПриВозвратеБУ             = ПланыСчетов.Типовой.ВозвратПроданнойПродукции;
		Запись.СчетСебестоимостиПриРеализацииБУ     = ПланыСчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг;
		
		// счета налогового учета
		Запись.СчетУчетаНУ							= ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетУчетаБУ), , , ТекущаяДата());	
		Запись.СчетУчетаПередачиНУ					= ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетУчетаПередачиБУ), , , ТекущаяДата());	
		Запись.СчетДоходовОтРеализацииНУ			= ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетДоходовОтРеализацииБУ), , , ТекущаяДата());	
		Запись.СчетДоходовПриВозвратеНУ             = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетДоходовПриВозвратеБУ), , , ТекущаяДата());	
		Запись.СчетСебестоимостиПриРеализацииНУ		= ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетСебестоимостиПриРеализацииБУ), , , ТекущаяДата());	
		
		Запись = Набор.Добавить();
		// Группа "Продукция"
		Группа = Справочники.Номенклатура.НайтиПоНаименованию("Готовая продукция");
		Если Группа = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Группа = Справочники.Номенклатура.СоздатьГруппу();
			Группа.Наименование = "Готовая продукция";
			Группа.Записать();
		КонецЕсли;
		
		Запись.Организация  = Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура = Группа.Ссылка;
		
		Запись.СчетУчетаБУ                          = ПланыСчетов.Типовой.ГотоваяПродукция;
		//Запись.СчетУчетаЗабалансовый                = ПланыСчетов.Типовой.МатериалыПринятыеВПереработку;
		//Запись.СчетУчетаПередачиБУ                  = ПланыСчетов.Типовой.МатериалыПереданныеВПереработку;
		//Запись.СчетУчетаПередачиЗабалансовый        = ПланыСчетов.Типовой.МатериалыПринятыеВПереработкуВПроизводстве;
		//Запись.СчетУчетаНДСПоПриобретению           = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		Запись.СчетУчетаНДСПоРеализации             = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;	
		Запись.СчетДоходовОтРеализацииБУ            = ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг;
		Запись.СчетДоходовПриВозвратеБУ             = ПланыСчетов.Типовой.ВозвратПроданнойПродукции;
		Запись.СчетСебестоимостиПриРеализацииБУ     = ПланыСчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг;
		
		// счета налогового учета
		Запись.СчетУчетаНУ							= ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетУчетаБУ), , , ТекущаяДата());	
		Запись.СчетУчетаПередачиНУ					= ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетУчетаПередачиБУ), , , ТекущаяДата());	
		Запись.СчетДоходовОтРеализацииНУ			= ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетДоходовОтРеализацииБУ), , , ТекущаяДата());	
		Запись.СчетДоходовПриВозвратеНУ             = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетДоходовПриВозвратеБУ), , , ТекущаяДата());	
		Запись.СчетСебестоимостиПриРеализацииНУ		= ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетСебестоимостиПриРеализацииБУ), , , ТекущаяДата());	
		
		Запись = Набор.Добавить();
		// Группа "Услуги"
		Группа = Справочники.Номенклатура.НайтиПоНаименованию("Услуги");
		Если Группа = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Группа = Справочники.Номенклатура.СоздатьГруппу();
			Группа.Наименование = "Услуги";
			Группа.Записать();
		КонецЕсли;
		
		Запись.Организация  = Справочники.Организации.ПустаяСсылка();
		Запись.Номенклатура = Группа.Ссылка;
		
		//Запись.СчетУчетаНДСПоПриобретению           = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению;
		Запись.СчетУчетаНДСПоРеализации             = ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость;	
		Запись.СчетДоходовОтРеализацииБУ            = ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг;
		Запись.СчетДоходовПриВозвратеБУ             = ПланыСчетов.Типовой.ВозвратПроданнойПродукции;
		
		// счета налогового учета
		Запись.СчетУчетаНУ							= ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетУчетаБУ), , , ТекущаяДата());	
		Запись.СчетУчетаПередачиНУ					= ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетУчетаПередачиБУ), , , ТекущаяДата());	
		Запись.СчетДоходовОтРеализацииНУ			= ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетДоходовОтРеализацииБУ), , , ТекущаяДата());	
		Запись.СчетДоходовПриВозвратеНУ             = ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетДоходовПриВозвратеБУ), , , ТекущаяДата());	
		Запись.СчетСебестоимостиПриРеализацииНУ		= ПроцедурыБухгалтерскогоУчета.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Запись.СчетСебестоимостиПриРеализацииБУ), , , ТекущаяДата());	
		
		
		Набор.Записать();
		
		ЗафиксироватьТранзакцию();
		
	КонецПроцедуры
	
	// устаноавливает реквизит "Тип" для пердопределенных элементов
	// справочника "ВидыНоменклатуры"
	Процедура ЗаполнитьСправочникВидыНоменклатуры()
		Сообщить("-----------------------");
		Сообщить("Обработка справочника ""Виды номенклатуры""");	
		
		ВидНоменклатуры = Справочники.ВидыНоменклатуры.ГотоваяПродукция.ПолучитьОбъект();
		ВидНоменклатуры.ГруппаТМЗ   = Перечисления.ГруппыТМЗ.ГотоваяПродукция;	
		ВидНоменклатуры.Записать();	
		
		ВидНоменклатуры = Справочники.ВидыНоменклатуры.Прочее.ПолучитьОбъект();
		ВидНоменклатуры.ГруппаТМЗ   = Перечисления.ГруппыТМЗ.Прочее;	
		ВидНоменклатуры.Записать();	
		
		ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПрочиеТовары.ПолучитьОбъект();
		ВидНоменклатуры.ГруппаТМЗ   = Перечисления.ГруппыТМЗ.ПрочиеТовары;	
		ВидНоменклатуры.Записать();	
		
		ВидНоменклатуры = Справочники.ВидыНоменклатуры.СырьеИМатериалы.ПолучитьОбъект();
		ВидНоменклатуры.ГруппаТМЗ   = Перечисления.ГруппыТМЗ.СырьеИМатериалы;	
		ВидНоменклатуры.Записать();	
		
		ВидНоменклатуры = Справочники.ВидыНоменклатуры.ТоварыПриобретенные.ПолучитьОбъект();
		ВидНоменклатуры.ГруппаТМЗ   = Перечисления.ГруппыТМЗ.ТоварыПриобретенные;	
		ВидНоменклатуры.Записать();	
		
		ВидНоменклатуры = Справочники.ВидыНоменклатуры.Топливо.ПолучитьОбъект();
		ВидНоменклатуры.ГруппаТМЗ   = Перечисления.ГруппыТМЗ.Топливо;	
		ВидНоменклатуры.Записать();	
		
	КонецПроцедуры	
	
	// Заполняет реквизит "ВидНоменклатуры" элементов справочника "Номенклатура"
	// исходя из записей регистра "Счета учета номенклатуры".
	//
	Процедура УстановитьВидНоменклатурыСправочника()  
		Сообщить("-----------------------");
		Сообщить("Обработка справочника ""Номенклатура""");	
		
		Если ОсновнаяОрганизация = Неопределено Тогда
			ОсновнаяОрганизация  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация");
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	Номенклатура.Наименование
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа = Ложь");
		Выборка  = Запрос.Выполнить().Выбрать();
		КоличествоВВыборке = Выборка.Количество();
		НомерВВыборке = 0;
		НачатьТранзакцию();
		Пока Выборка.Следующий() Цикл
			НомерВВыборке = НомерВВыборке + 1;
			# Если Клиент ТОгда         			
				Состояние(СокрЛП(НомерВВыборке) + " из " + СокрЛП(КоличествоВВыборке) + " : " + Выборка.Наименование);
			# КонецЕсли
			
			СчетУчета     = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаНоменклатуры(ОсновнаяОрганизация, Выборка.Ссылка).СчетУчетаБУ;
			ВидНоменклатуры = Справочники.ВидыНоменклатуры.Прочее;
			Если Не СчетУчета.Пустая() Тогда
				Если СчетУчета = ПланыСчетов.Типовой.Товары или СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Типовой.Товары) Тогда
					ВидНоменклатуры = Справочники.ВидыНоменклатуры.ТоварыПриобретенные
				КонецЕсли;			
				Если СчетУчета = ПланыСчетов.Типовой.СырьеИМатериалы или СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Типовой.СырьеИМатериалы) Тогда
					ВидНоменклатуры = Справочники.ВидыНоменклатуры.СырьеИМатериалы;
				КонецЕсли;	
				Если СчетУчета = ПланыСчетов.Типовой.ГотоваяПродукция или СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Типовой.ГотоваяПродукция) Тогда
					ВидНоменклатуры = Справочники.ВидыНоменклатуры.ГотоваяПродукция;
				КонецЕсли;	
			КонецЕсли;
			ТМЗОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ТМЗОбъект.ВидНоменклатуры = ВидНоменклатуры;
			Попытка
				ТМЗОбъект.Записать();		
			Исключение
				Сообщить("Не удалось записать элемент справочника ""Номенклатура""" + ОписаниеОшибки());
			КонецПопытки;                                                                             	
		КонецЦикла;	
		ЗафиксироватьТранзакцию();	
	КонецПроцедуры
	
	// Процедура заполняет значения договоров взаиморасчетов в табличной части разделов
	// по значениям реквизитов шапки в релизе 1.0.8
	Процедура УстановитьДоговорыВзаиморасчетовВГТД()
		Сообщить("-----------------------");
		Сообщить("Обработка документов ""ГТД импорт""");	
		
		Запрос = новый Запрос("ВЫБРАТЬ
		|	ГТДИмпорт.Ссылка,
		|	ГТДИмпорт.ДоговорКонтрагентаРеглУдалить как ДоговорРегл,
		|	ГТДИмпорт.ДоговорКонтрагентаУдалить как ДоговорВалютный,
		|	ГТДИмпорт.ДоговорКонтрагентаУдалить.ВалютаВзаиморасчетов как ВалютаВзаиморасчетов
		|ИЗ
		|	Документ.ГТДИмпорт КАК ГТДИмпорт
		|ГДЕ НЕ (ГТДИмпорт.ДоговорКонтрагентаРеглУдалить = &ПустойДоговор и ГТДИмпорт.ДоговорКонтрагентаУдалить = &ПустойДоговор)");
		
		Запрос.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());					  
		
		ВыборкаДокументов = Запрос.Выполнить().Выбрать();
		Счетчик = 0;
		Пока ВыборкаДокументов.Следующий() Цикл
			Счетчик = Счетчик + 1;
			
			ДоговорРегл 	= ВыборкаДокументов.ДоговорРегл;
			ДоговорВалютный = ?(НЕ ЗначениеЗаполнено(ВыборкаДокументов.ДоговорВалютный), ДоговорРегл,ВыборкаДокументов.ДоговорВалютный);
			
			ДокументГТДОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			
			// Валюта взаиморасчетов
			ДокументГТДОбъект.ВалютаВзаиморасчетов = ВыборкаДокументов.ВалютаВзаиморасчетов;
			Для Каждого Раздел из ДокументГТДОбъект.Разделы Цикл
				// ПОШЛИНА
				Если Раздел.ПошлинаВВалютеУдалить Тогда
					Раздел.ДоговорВзаиморасчетовПошлина = ДоговорВалютный;
				Иначе
					Раздел.ДоговорВзаиморасчетовПошлина = ДоговорРегл;			
				КонецЕсли;	
				// НДС
				Если Раздел.НДСВВалютеУдалить Тогда
					Раздел.ДоговорВзаиморасчетовНДС = ДоговорВалютный;
				Иначе
					Раздел.ДоговорВзаиморасчетовНДС = ДоговорРегл;			
				КонецЕсли;	
				// Таможенный сбор
				Раздел.ДоговорВзаиморасчетовСбор 	= ДоговорРегл;			
				Раздел.ДоговорВзаиморасчетовСборВал	= ДоговорВалютный;			
			КонецЦикла;	 // по разделам ГТД
			
			ДокументГТДОбъект.Записать();		
			#Если Клиент Тогда
				Состояние("Обработка документов ГТД импорт:" + СокрЛП(Счетчик) + " из " + СокрЛП( ВыборкаДокументов.Количество()));
			#КонецЕсли
		КонецЦикла; // По документам ГТД			
		#Если Клиент Тогда
			Состояние("");
		#КонецЕсли		
		
	КонецПроцедуры // УстановитьДоговорыВзаиморасчетовВГТД
	
	////////////////////////////////////////////////////////////////////////////////
	// НАЛОГОВЫЙ УЧЕТ
	
	// Заполняет доп. реквизиты справочника НалогиСборыОтчисления и регистр
	// сведений СведенияОСтавкахНалоговСборовОтчислений
	//
	Процедура ЗаполнитьНалогиСборыОтчисления()
		
		Типовой   = ПланыСчетов.Типовой;
		Налоговый = ПланыСчетов.Налоговый;
		
		
		// установка счета учета для предопределенных элементов справочника
		СправочникОбъект = Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог.ПолучитьОбъект();
		СправочникОбъект.КодБК 							  = "101201";
		СправочникОбъект.КодНазначенияПлатежа 			  = "911";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.ИндивидуальныйПодоходныйНалог;
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ИндивидуальныйПодоходныйНалог;
		СправочникОбъект.НазначениеПлатежа 				  = "Индивидуальный подоходный налог за ";
		СправочникОбъект.Записать();
		
		СправочникОбъект = Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалогИностранныеГраждане.ПолучитьОбъект();
		СправочникОбъект.КодБК 							  = "101204";
		СправочникОбъект.КодНазначенияПлатежа 			  = "911";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.ИндивидуальныйПодоходныйНалог;
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ИндивидуальныйПодоходныйНалог;
		СправочникОбъект.НазначениеПлатежа 				  = "Индивидуальный подоходный налог за иностранных граждан за ";
		СправочникОбъект.Записать();
		
		СправочникОбъект = Справочники.НалогиСборыОтчисления.СоциальныйНалог.ПолучитьОбъект();
		СправочникОбъект.КодБК 							  = "103101";
		СправочникОбъект.КодНазначенияПлатежа 			  = "911";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.СоциальныйНалог;
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ПрочиеНалоги;
		СправочникОбъект.НазначениеПлатежа 				  = "Социальный налог за ";
		СправочникОбъект.Записать();
		
		СправочникОбъект = Справочники.НалогиСборыОтчисления.СоциальныйНалогИностранныеСпециалисты.ПолучитьОбъект();
		СправочникОбъект.КодБК 							  = "103101";
		СправочникОбъект.КодНазначенияПлатежа 			  = "911";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.СоциальныйНалог;
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ПрочиеНалоги;
		СправочникОбъект.НазначениеПлатежа 				  = "Социальный налог за ";
		СправочникОбъект.Записать();
		
		СправочникОбъект = Справочники.НалогиСборыОтчисления.СоциальныйНалогИнвалиды.ПолучитьОбъект();
		СправочникОбъект.КодБК 							  = "103101";
		СправочникОбъект.КодНазначенияПлатежа 			  = "911";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.СоциальныйНалог;
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ПрочиеНалоги;
		СправочникОбъект.НазначениеПлатежа 				  = "Социальный налог за ";
		СправочникОбъект.Записать();
		
		СправочникОбъект = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы.ПолучитьОбъект();
		СправочникОбъект.КодБК 							  = "";
		СправочникОбъект.КодНазначенияПлатежа 			  = "010";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.ОбязательстваПоПенсионнымОтчислениям;
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ОбязательстваПоПенсионнымОтчислениям;
		СправочникОбъект.НазначениеПлатежа 				  = "Обязательные пенсионные взносы за ";
		СправочникОбъект.Записать();
		
		СправочникОбъект = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы.ПолучитьОбъект();
		СправочникОбъект.КодБК 							  = "";
		СправочникОбъект.КодНазначенияПлатежа 			  = "015";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.ОбязательстваПоПенсионнымОтчислениям;
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ОбязательстваПоПенсионнымОтчислениям;
		СправочникОбъект.НазначениеПлатежа 				  = "Обязательные профессиональные пенсионные взносы за ";
		СправочникОбъект.Записать();
		
		СправочникОбъект = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.ПолучитьОбъект();
		СправочникОбъект.КодБК 								= "";
		СправочникОбъект.КодНазначенияПлатежа				= "122";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ	= Типовой.ОбязательстваПоВзносамОСМС;
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ 	= Налоговый.ОбязательстваПоВзносамОСМС;
		СправочникОбъект.НазначениеПлатежа 					= "Взносы на обязательное социальное медицинское страхование за ";
		СправочникОбъект.Записать();
		
		СправочникОбъект = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.ПолучитьОбъект();
		СправочникОбъект.КодБК 								= "";
		СправочникОбъект.КодНазначенияПлатежа 				= "121";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ 	= Типовой.ОбязательстваПоОтчислениямОСМС;
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ 	= Налоговый.ОбязательстваПоОтчислениямОСМС;
		СправочникОбъект.НазначениеПлатежа 					= "Отчисления на обязательное социальное медицинское страхование за ";
		СправочникОбъект.Записать();
		
		СправочникОбъект = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления.ПолучитьОбъект();
		СправочникОбъект.КодБК 							  = "";
		СправочникОбъект.КодНазначенияПлатежа 			  = "012";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.ОбязательстваПоСоциальномуСтрахованию;
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ОбязательстваПоСоциальномуСтрахованию;
		СправочникОбъект.НазначениеПлатежа 				  = "Обязательные социальные отчисления за ";
		СправочникОбъект.Записать();
		
		СправочникОбъект = Справочники.НалогиСборыОтчисления.НалогНаПрибыль.ПолучитьОбъект();
		СправочникОбъект.КодБК 							  = "101101";
		СправочникОбъект.КодНазначенияПлатежа 			  = "911";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.КорпоративныйПодоходныйНалогПодлежащийУплате;
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.КорпоративныйПодоходныйНалог;
		СправочникОбъект.НазначениеПлатежа 				  = "Корпоративный подоходный налог подлежащий уплате за ";
		СправочникОбъект.Записать();
		
		СправочникОбъект = Справочники.НалогиСборыОтчисления.НалогНаИмущество.ПолучитьОбъект();
		СправочникОбъект.КодБК 							  = "104101";
		СправочникОбъект.КодНазначенияПлатежа 			  = "911";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.НалогНаИмущество;
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ПрочиеНалоги;
		СправочникОбъект.НазначениеПлатежа 				  = "Налог на имущество подлежащий уплате за ";
		СправочникОбъект.Записать();
		
		СправочникОбъект = Справочники.НалогиСборыОтчисления.НалогНаТранспорт.ПолучитьОбъект();
		СправочникОбъект.КодБК 							  = "104401";
		СправочникОбъект.КодНазначенияПлатежа 			  = "911";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.НалогНаТранспортныеСредства;
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.ПрочиеНалоги;
		СправочникОбъект.НазначениеПлатежа 				  = "Налог на транспорт подлежащий уплате за ";
		СправочникОбъект.Записать();
		
		СправочникОбъект = Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьИмпортРФ.ПолучитьОбъект();
		СправочникОбъект.КодБК 							  = "105109";
		СправочникОбъект.КодНазначенияПлатежа 			  = "911";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.НалогНаДобавленнуюСтоимость;
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.НалогНаДобавленнуюСтоимость;
		СправочникОбъект.НазначениеПлатежа 				  = "НДС на товары таможенного союза, ввозимые с территории РФ, подлежащий уплате за ";
		СправочникОбъект.Записать();
		
		СправочникОбъект = Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьИмпортРБ.ПолучитьОбъект();
		СправочникОбъект.КодБК 							  = "105110";
		СправочникОбъект.КодНазначенияПлатежа 			  = "911";
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомБУ = Типовой.НалогНаДобавленнуюСтоимость;
		СправочникОбъект.СчетУчетаРасчетовСКонтрагентомНУ = Налоговый.НалогНаДобавленнуюСтоимость;
		СправочникОбъект.НазначениеПлатежа 				  = "НДС на товары таможенного союза, ввозимые с территории РБ, подлежащий уплате за ";
		СправочникОбъект.Записать();
		
		// ставки 
		НаборЗаписей = РегистрыСведений.СведенияОСтавкахНалоговСборовОтчислений.СоздатьНаборЗаписей();
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		
		// КПН
		ВидКПН = Справочники.НалогиСборыОтчисления.НалогНаПрибыль;
		ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20060101', ПустаяОрганизация, ВидКПН, 30);
		
		// Налог на имущество	
		ВидИмущественногоНалога = Справочники.НалогиСборыОтчисления.НалогНаИмущество;
		ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20060101', ПустаяОрганизация, ВидИмущественногоНалога, 1);
		ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20090101', ПустаяОрганизация, ВидИмущественногоНалога, 1.5);
		
		// ОПВ
		ВидОПВ = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
		ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '19980101', ПустаяОрганизация, ВидОПВ, 10);
		
		// ОППВ
		ВидОППВ = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;
		ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20140101', ПустаяОрганизация, ВидОППВ, 5);
		
		
		// СО
		ВидСО = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;
		ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20050101', ПустаяОрганизация, ВидСО, 1.5);
		ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20060101', ПустаяОрганизация, ВидСО, 2);
		ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20070101', ПустаяОрганизация, ВидСО, 3);
		ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20090101', ПустаяОрганизация, ВидСО, 4);
		ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20100101', ПустаяОрганизация, ВидСО, 5);
		ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20180101', ПустаяОрганизация, ВидСО, 3.5);
		
		// СН с 2009 года
		ВидСН = Справочники.НалогиСборыОтчисления.СоциальныйНалог;
		ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20090101', ПустаяОрганизация, ВидСН, 11);
		ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, '20180101', ПустаяОрганизация, ВидСН, 9.5);
		
		НаборЗаписей.Записать();
		
		// ИПН с 2009 года
		НаборЗаписейИПН = РегистрыСведений.СведенияОСтавкахИПН.СоздатьНаборЗаписей();
		ВидыДоходов = Справочники.ВидыДоходов;
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20090101', ПустаяОрганизация, ВидыДоходов.ДоходыОтРаботодателя, 10, 15);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20110101', ПустаяОрганизация, ВидыДоходов.ДоходыОтРаботодателя, 10, 20);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20120101', ПустаяОрганизация, ВидыДоходов.ДоходыОтРаботодателя, 10, 10);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20090101', ПустаяОрганизация, ВидыДоходов.Дивиденды, 			5, 	15);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20090101', ПустаяОрганизация, ВидыДоходов.Выигрыши, 			10, 15);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20110101', ПустаяОрганизация, ВидыДоходов.Выигрыши, 			10, 20);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20090101', ПустаяОрганизация, ВидыДоходов.Вознаграждения, 		10, 15);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20090101', ПустаяОрганизация, ВидыДоходов.ПрочиеДоходы, 		10, 15);
		ПроцедурыОбновленияИнформационнойБазы.ДобавитьЗначенияСтавокИПН(НаборЗаписейИПН, '20110101', ПустаяОрганизация, ВидыДоходов.ПрочиеДоходы, 		10, 20);
		
		НаборЗаписейИПН.Записать();
		
	КонецПроцедуры // ЗаполнитьНалогиСборыОтчисления
	
	// Добавляет в регистр СведенияОСтавкахНалоговВзносовОтчислений новую строку
	//
	Процедура ДобавитьЗначенияСтавокНалоговВзносовОтчислений(НаборЗаписей, 
		Период, 
		Налогоплательщик,
		Вид,
		Ставка)
		НоваяЗапись = НаборЗаписей.Добавить();
		// Свойства
		НоваяЗапись.Период 				= Период;
		// Измерения
		НоваяЗапись.Налогоплательщик 	= Налогоплательщик;
		НоваяЗапись.ВидНалога			= Вид;
		// Ресурсы
		НоваяЗапись.Ставка				= Ставка;
		
	КонецПроцедуры // ДобавитьЗначенияСтавокНалоговВзносовОтчислений
	
	
	
	// Процедура заполняет регистр сведений КоэффициентыСтавкиРефинансированияНБДляРасчетаПени
	// данными для расчета пени
	//
	Процедура ЗаполнитьКоэффициентыСтавкиРефинансированияНБДляРасчетаПени()
		
		НаборЗаписей = РегистрыСведений.КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Организация.Использование	= Истина;
		НаборЗаписей.Отбор.Организация.ВидСравнения	 	= ВидСравнения.Равно;
		НаборЗаписей.Отбор.Организация.Значение	 		= Справочники.Организации.ПустаяСсылка();
		
		// ОПВ
		НаборЗаписей.Отбор.ВидНалога.Использование = Истина;
		НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
		НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
		
		Движение 				= НаборЗаписей.Добавить();
		// Свойства
		Движение.Период 		= '19990315'; // Постановление Правительства РК от 15.03.1999 № 245
		// Измерения
		Движение.Организация	= Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
		// Ресурсы
		Движение.Коэффициент	= 1.5;
		
		Движение 				= НаборЗаписей.Добавить();
		// Свойства
		Движение.Период 		= '20050706'; // первое официальное опубликование Постановления Правительства РК от 30.06.2005 № 659
		// Измерения
		Движение.Организация	= Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
		// Ресурсы
		Движение.Коэффициент	= 2.5;
		
		Движение 				= НаборЗаписей.Добавить();
		// Свойства
		Движение.Период 		= '20180101'; // 01.01.2018
		// Измерения
		Движение.Организация	= Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
		// Ресурсы
		Движение.Коэффициент	= 1.25;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
		// СО
		НаборЗаписей.Отбор.ВидНалога.Использование = Истина;
		НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
		НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;
		
		Движение 				= НаборЗаписей.Добавить();
		// Свойства
		Движение.Период 		= '20050101'; // 01.01.2005 Закон РК об обяз социальном страховании
		// Измерения
		Движение.Организация	= Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;
		// Ресурсы
		Движение.Коэффициент	= 2.5;
		
		Движение 				= НаборЗаписей.Добавить();
		// Свойства
		Движение.Период 		= '20180101'; // 01.01.2018
		// Измерения
		Движение.Организация	= Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;
		// Ресурсы
		Движение.Коэффициент	= 1.25;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
		// ОППВ
		НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
		НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
		НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;
		
		Движение 				= НаборЗаписей.Добавить();
		// Свойства
		Движение.Период 		= '20140101'; // 01.01.2014 Закон "О пенсионном обеспечении в РК"
		// Измерения
		Движение.Организация	= Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;
		// Ресурсы
		Движение.Коэффициент	= 2.5;
		
		Движение 				= НаборЗаписей.Добавить();
		// Свойства
		Движение.Период 		= '20180101'; // 01.01.2018 
		// Измерения
		Движение.Организация	= Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;
		// Ресурсы
		Движение.Коэффициент	= 1.25;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
		// ВОСМС
		НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
		НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
		НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
		
		Движение 				= НаборЗаписей.Добавить();
		// Свойства
		Движение.Период 		= '20170701'; //  01.07.2017 Закон "Об обязательном медицинском страховании в РК"
		// Измерения
		Движение.Организация	= Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
		// Ресурсы
		Движение.Коэффициент	= 2.5;
		
		Движение 				= НаборЗаписей.Добавить();
		// Свойства
		Движение.Период 		= '20180101'; //  01.01.2018 
		// Измерения
		Движение.Организация	= Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
		// Ресурсы
		Движение.Коэффициент	= 1.25;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
		// ООСМС
		НаборЗаписей.Отбор.ВидНалога.Использование 	 = Истина;
		НаборЗаписей.Отбор.ВидНалога.ВидСравнения	 = ВидСравнения.Равно;
		НаборЗаписей.Отбор.ВидНалога.Значение	 	 = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
		
		Движение 				= НаборЗаписей.Добавить();
		// Свойства
		Движение.Период 		= '20170701'; //  01.07.2017 Закон "Об обязательном медицинском страховании в РК"
		// Измерения
		Движение.Организация	= Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
		// Ресурсы
		Движение.Коэффициент	= 2.5;
		
		Движение 				= НаборЗаписей.Добавить();
		// Свойства
		Движение.Период 		= '20180101'; //  01.01.2018
		// Измерения
		Движение.Организация	= Справочники.Организации.ПустаяСсылка();
		Движение.ВидНалога		= Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
		// Ресурсы
		Движение.Коэффициент	= 1.25;
		
		НаборЗаписей.Записать();
		
	КонецПроцедуры // ЗаполнитьКоэффициентыСтавкиРефинансированияНБДляРасчетаПени
	
	// Процедура заполняет регистр сведений СрокиПеречисленияНалоговСборовОтчислений
	// данными для расчета пени
	//
	Процедура ЗаполнитьСрокиПеречисленияНалоговСборовОтчислений()
		
		НаборЗаписей = РегистрыСведений.СрокиПеречисленияНалоговСборовОтчислений.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Организация.Использование	= Истина;
		НаборЗаписей.Отбор.Организация.ВидСравнения	 	= ВидСравнения.Равно;
		НаборЗаписей.Отбор.Организация.Значение	 		= Справочники.Организации.ПустаяСсылка();
		
		ДлинаСуток = 86400;
		ТекМесяц = '20030701';	
		ДатаОкончания = НачалоМесяца(КонецГода(ОбщегоНазначения.ПолучитьРабочуюДату()));
		
		Пока ТекМесяц <= ДатаОкончания Цикл
			
			// ОПВ
			Если ТекМесяц < '20050701' Тогда // до первого официального опубликования Постановления Правительства РК от 30.06.2005 № 659
				// до 5 числа месяца, следующего за месяцем выплаты доходов
				Движение = НаборЗаписей.Добавить();
				// Измерения
				Движение.Месяц 			= ТекМесяц;
				Движение.Организация 	= Справочники.Организации.ПустаяСсылка();
				Движение.ВидНалога	 	= Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
				// Ресурсы
				Движение.ПорядокОпределенияСрокаПеречисления	= Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуВыплатыДоходов;
				Движение.СрокПеречисления						= ДобавитьМесяц(ТекМесяц, 1) + (5-1) * ДлинаСуток;
			ИначеЕсли ТекМесяц < '20070701' Тогда // до изменения сроков постановлением от 20.07.2007
				// до 15 числа месяца, следующего за месяцем выплаты доходов
				Движение = НаборЗаписей.Добавить();
				// Измерения
				Движение.Месяц 			= ТекМесяц;
				Движение.Организация 	= Справочники.Организации.ПустаяСсылка();
				Движение.ВидНалога	 	= Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
				// Ресурсы
				Движение.ПорядокОпределенияСрокаПеречисления	= Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуВыплатыДоходов;
				Движение.СрокПеречисления						= ДобавитьМесяц(ТекМесяц, 1) + (15-1) * ДлинаСуток;
			Иначе // с июля 2007 года - до 20 числа месяца, следующего за месяцем выплаты доходов
				Движение = НаборЗаписей.Добавить();
				// Измерения
				Движение.Месяц 			= ТекМесяц;
				Движение.Организация 	= Справочники.Организации.ПустаяСсылка();
				Движение.ВидНалога	 	= Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы;
				// Ресурсы
				Движение.ПорядокОпределенияСрокаПеречисления	= Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуВыплатыДоходов;
				Движение.СрокПеречисления						= ДобавитьМесяц(ТекМесяц, 1) + (20-1) * ДлинаСуток;
			КонецЕсли;
			
			Если ТекМесяц >= '20050101' Тогда
				// до 15 числа месяца, следующего за месяцем исчисления
				Движение = НаборЗаписей.Добавить();
				// Измерения
				Движение.Месяц 			= ТекМесяц;
				Движение.Организация 	= Справочники.Организации.ПустаяСсылка();
				Движение.ВидНалога	 	= Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления;
				// Ресурсы
				Движение.ПорядокОпределенияСрокаПеречисления	= Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода;
				Движение.СрокПеречисления						= ДобавитьМесяц(ТекМесяц, 1) + (15-1) * ДлинаСуток;
				//Иначе - до января 2005 СО вообще не исчислялись
			КонецЕсли;		
			
			Если ТекМесяц >= '20140101' Тогда
				// до 25 числа месяца, следующего за месяцем исчисления
				Движение = НаборЗаписей.Добавить();
				// Измерения
				Движение.Месяц 			= ТекМесяц;
				Движение.Организация 	= Справочники.Организации.ПустаяСсылка();
				Движение.ВидНалога	 	= Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы;
				// Ресурсы
				Движение.ПорядокОпределенияСрокаПеречисления	= Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода;
				Движение.СрокПеречисления						= ДобавитьМесяц(ТекМесяц, 1) + (25-1) * ДлинаСуток;
				//Иначе - до января 2014 ОППВ вообще не исчислялись
			КонецЕсли;
			
			Если ТекМесяц >= '20170701' Тогда
				// до 25 числа месяца, следующего за месяцем исчисления
				Движение = НаборЗаписей.Добавить();
				// Измерения
				Движение.Месяц 			= ТекМесяц;
				Движение.Организация 	= Справочники.Организации.ПустаяСсылка();
				Движение.ВидНалога	 	= Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование;
				// Ресурсы
				Движение.ПорядокОпределенияСрокаПеречисления	= Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода;
				Движение.СрокПеречисления						= ДобавитьМесяц(ТекМесяц, 1) + (25-1) * ДлинаСуток;
				//Иначе - до июля 2017 ВОСМС вообще не исчислялись
				
				// до 25 числа месяца, следующего за месяцем исчисления
				Движение = НаборЗаписей.Добавить();
				// Измерения
				Движение.Месяц 			= ТекМесяц;
				Движение.Организация 	= Справочники.Организации.ПустаяСсылка();
				Движение.ВидНалога	 	= Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование;
				// Ресурсы
				Движение.ПорядокОпределенияСрокаПеречисления	= Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода;
				Движение.СрокПеречисления						= ДобавитьМесяц(ТекМесяц, 1) + (25-1) * ДлинаСуток;
				//Иначе - до июля 2017 ООСМС вообще не исчислялись
			КонецЕсли;
			
			ТекМесяц = ДобавитьМесяц(ТекМесяц, 1);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецПроцедуры // ЗаполнитьСрокиПеречисленияНалоговСборовОтчислений
	
	// Процедура устанавливает признак снятия с налогового учета
	// выбывших объектов.
	// Прописывает в регистрах сведений информацию о прекращении начисления
	// имущественного, транспортного и земельного налогов.
	
	Процедура УстановитьПризнакСнятияСУчетаОбъектовОбложенияПриВыбытии()
		ТекстСпискаДокументов = "ВЫБРАТЬ
		|	СписаниеОСОС.Ссылка КАК Ссылка,
		|	СписаниеОСОС.Ссылка.Организация КАК Организация,
		|	СписаниеОСОС.Ссылка.Дата КАК Дата,
		|	СписаниеОСОС.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	Документ.СписаниеОС.ОС КАК СписаниеОСОС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СписаниеНМА.Ссылка,
		|	СписаниеНМА.Организация,
		|	СписаниеНМА.Дата,
		|	СписаниеНМА.НематериальныйАктив
		|ИЗ
		|	Документ.СписаниеНМА КАК СписаниеНМА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПередачаНМА.Ссылка,
		|	ПередачаНМА.Организация,
		|	ПередачаНМА.Дата,
		|	ПередачаНМА.НематериальныйАктив
		|ИЗ
		|	Документ.ПередачаНМА КАК ПередачаНМА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПередачаОС.Ссылка,
		|	ПередачаОС.Ссылка.Организация,
		|	ПередачаОС.Ссылка.Дата,
		|	ПередачаОС.ОсновноеСредство
		|ИЗ
		|	Документ.ПередачаОС.ОС КАК ПередачаОС";
		Текст = "ВЫБРАТЬ
		|	ОбъектыИмущественногоНАлога.Ссылка КАК Ссылка,
		|	ОбъектыИмущественногоНАлога.Дата,
		|	ОбъектыИмущественногоНАлога.Организация,
		|	ОбъектыИмущественногоНАлога.ОсновноеСредство,
		|	ОбъектыИмущественногоНАлога.ОбъектИмущественногоНалога,
		|	ОбъектыЗемельногоНалога.ОбъектЗемельногоНалога,
		|	ОбъектыТранспортногоНалога.ОбъектТранспортногоНалога
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаЗаписейОбъектовИмущественногоНалога.Ссылка КАК Ссылка,
		|		ТаблицаЗаписейОбъектовИмущественногоНалога.Дата КАК Дата,
		|		ТаблицаЗаписейОбъектовИмущественногоНалога.Организация КАК Организация,
		|		ТаблицаЗаписейОбъектовИмущественногоНалога.ОсновноеСредство КАК ОсновноеСредство,
		|		ЕСТЬNULL(ОбъектыИмущественногоНалога.НачислятьНалог, ЛОЖЬ) КАК ОбъектИмущественногоНалога
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ТаблицаЗаписей.Ссылка КАК Ссылка,
		|			ТаблицаЗаписей.Организация КАК Организация,
		|			ТаблицаЗаписей.Дата КАК Дата,
		|			ТаблицаЗаписей.ОсновноеСредство КАК ОсновноеСредство,
		|			МАКСИМУМ(ТаблицаЗаписей.Период) КАК Период
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ДокументыВыбытия.Ссылка КАК Ссылка,
		|				ДокументыВыбытия.Организация КАК Организация,
		|				ДокументыВыбытия.Дата КАК Дата,
		|				ДокументыВыбытия.ОсновноеСредство КАК ОсновноеСредство,
		|				ОбъектыИмущественногоНалога.Период КАК Период
		|			ИЗ
		|				(" + ТекстСпискаДокументов + ") КАК ДокументыВыбытия
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыИмущественногоНалога КАК ОбъектыИмущественногоНалога
		|					ПО ДокументыВыбытия.ОсновноеСредство = ОбъектыИмущественногоНалога.ОбъектНалогообложения
		|						И ДокументыВыбытия.Организация = ОбъектыИмущественногоНалога.Организация
		|						И ДокументыВыбытия.Дата >= ОбъектыИмущественногоНалога.Период) КАК ТаблицаЗаписей
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТаблицаЗаписей.Ссылка,
		|			ТаблицаЗаписей.Дата,
		|			ТаблицаЗаписей.Организация,
		|			ТаблицаЗаписей.ОсновноеСредство) КАК ТаблицаЗаписейОбъектовИмущественногоНалога
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыИмущественногоНалога КАК ОбъектыИмущественногоНалога
		|			ПО ТаблицаЗаписейОбъектовИмущественногоНалога.ОсновноеСредство = ОбъектыИмущественногоНалога.ОбъектНалогообложения
		|				И ТаблицаЗаписейОбъектовИмущественногоНалога.Организация = ОбъектыИмущественногоНалога.Организация
		|				И ТаблицаЗаписейОбъектовИмущественногоНалога.Период = ОбъектыИмущественногоНалога.Период) КАК ОбъектыИмущественногоНАлога
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТаблицаЗаписейОбъектовИмущественногоНалога.Ссылка КАК Ссылка,
		|			ТаблицаЗаписейОбъектовИмущественногоНалога.Дата КАК Дата,
		|			ТаблицаЗаписейОбъектовИмущественногоНалога.ОсновноеСредство КАК ОсновноеСредство,
		|			ЕСТЬNULL(ОбъектыТранспортногоНалога.НачислятьНалог, ЛОЖЬ) КАК ОбъектТранспортногоНалога
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ТаблицаЗаписей.Ссылка КАК Ссылка,
		|				ТаблицаЗаписей.Организация КАК Организация,
		|				ТаблицаЗаписей.Дата КАК Дата,
		|				ТаблицаЗаписей.ОсновноеСредство КАК ОсновноеСредство,
		|				МАКСИМУМ(ТаблицаЗаписей.Период) КАК Период
		|			ИЗ
		|				(ВЫБРАТЬ
		|					ДокументыВыбытия.Ссылка КАК Ссылка,
		|					ДокументыВыбытия.Организация КАК Организация,
		|					ДокументыВыбытия.Дата КАК Дата,
		|					ДокументыВыбытия.ОсновноеСредство КАК ОсновноеСредство,
		|					ОбъектыТранспортногоНалога.Период КАК Период
		|				ИЗ			 
		|				(" + ТекстСпискаДокументов + ") КАК ДокументыВыбытия
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортногоНалога КАК ОбъектыТранспортногоНалога
		|						ПО ДокументыВыбытия.ОсновноеСредство = ОбъектыТранспортногоНалога.ОбъектНалогообложения
		|							И ДокументыВыбытия.Организация = ОбъектыТранспортногоНалога.Организация
		|							И ДокументыВыбытия.Дата >= ОбъектыТранспортногоНалога.Период) КАК ТаблицаЗаписей
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ТаблицаЗаписей.Ссылка,
		|				ТаблицаЗаписей.Дата,
		|				ТаблицаЗаписей.Организация,
		|				ТаблицаЗаписей.ОсновноеСредство) КАК ТаблицаЗаписейОбъектовИмущественногоНалога
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортногоНалога КАК ОбъектыТранспортногоНалога
		|				ПО ТаблицаЗаписейОбъектовИмущественногоНалога.ОсновноеСредство = ОбъектыТранспортногоНалога.ОбъектНалогообложения
		|					И ТаблицаЗаписейОбъектовИмущественногоНалога.Организация = ОбъектыТранспортногоНалога.Организация
		|					И ТаблицаЗаписейОбъектовИмущественногоНалога.Период = ОбъектыТранспортногоНалога.Период) КАК ОбъектыТранспортногоНалога
		|		ПО ОбъектыИмущественногоНАлога.Ссылка = ОбъектыТранспортногоНалога.Ссылка
		|			И ОбъектыИмущественногоНАлога.Дата = ОбъектыТранспортногоНалога.Дата
		|			И ОбъектыИмущественногоНАлога.ОсновноеСредство = ОбъектыТранспортногоНалога.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТаблицаЗаписейОбъектовИмущественногоНалога.Ссылка КАК Ссылка,
		|			ТаблицаЗаписейОбъектовИмущественногоНалога.Дата КАК Дата,
		|			ТаблицаЗаписейОбъектовИмущественногоНалога.ОсновноеСредство КАК ОсновноеСредство,
		|			ЕСТЬNULL(ОбъектыЗемельногоНалога.НачислятьНалог, ЛОЖЬ) КАК ОбъектЗемельногоНалога
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ТаблицаЗаписей.Ссылка КАК Ссылка,
		|				ТаблицаЗаписей.Организация КАК Организация,
		|				ТаблицаЗаписей.Дата КАК Дата,
		|				ТаблицаЗаписей.ОсновноеСредство КАК ОсновноеСредство,
		|				МАКСИМУМ(ТаблицаЗаписей.Период) КАК Период
		|			ИЗ
		|				(ВЫБРАТЬ
		|					ДокументыВыбытия.Ссылка КАК Ссылка,
		|					ДокументыВыбытия.Организация КАК Организация,
		|					ДокументыВыбытия.Дата КАК Дата,
		|					ДокументыВыбытия.ОсновноеСредство КАК ОсновноеСредство,
		|					ОбъектыЗемельногоНалога.Период КАК Период
		|				ИЗ
		|				(" + ТекстСпискаДокументов + ") КАК ДокументыВыбытия
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыЗемельногоНалога КАК ОбъектыЗемельногоНалога
		|						ПО ДокументыВыбытия.ОсновноеСредство = ОбъектыЗемельногоНалога.ОбъектНалогообложения
		|							И ДокументыВыбытия.Организация = ОбъектыЗемельногоНалога.Организация
		|							И ДокументыВыбытия.Дата >= ОбъектыЗемельногоНалога.Период) КАК ТаблицаЗаписей
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ТаблицаЗаписей.Ссылка,
		|				ТаблицаЗаписей.Дата,
		|				ТаблицаЗаписей.Организация,
		|				ТаблицаЗаписей.ОсновноеСредство) КАК ТаблицаЗаписейОбъектовИмущественногоНалога
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыЗемельногоНалога КАК ОбъектыЗемельногоНалога
		|				ПО ТаблицаЗаписейОбъектовИмущественногоНалога.ОсновноеСредство = ОбъектыЗемельногоНалога.ОбъектНалогообложения
		|					И ТаблицаЗаписейОбъектовИмущественногоНалога.Организация = ОбъектыЗемельногоНалога.Организация
		|					И ТаблицаЗаписейОбъектовИмущественногоНалога.Период = ОбъектыЗемельногоНалога.Период) КАК ОбъектыЗемельногоНалога
		|		ПО ОбъектыИмущественногоНАлога.Ссылка = ОбъектыЗемельногоНалога.Ссылка
		|			И ОбъектыИмущественногоНАлога.Дата = ОбъектыЗемельногоНалога.Дата
		|			И ОбъектыИмущественногоНАлога.ОсновноеСредство = ОбъектыЗемельногоНалога.ОсновноеСредство
		|ИТОГИ ПО
		|	Ссылка";
		Запрос = Новый Запрос;
		Запрос.Текст = Текст;
		Результат = Запрос.Выполнить();
		Счетчик = 0;
		Если не Результат.Пустой() Тогда
			Счетчик = Счетчик + 1;
			ВыборкаДокументов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДокументов.Следующий() Цикл
				Ссылка = ВыборкаДокументов.Ссылка;
				ДокументОбъект = Ссылка.ПолучитьОбъект();
				// установка признака снятия с учета
				ВидДокумента = ДокументОбъект.Метаданные().Имя;
				Если ВидДокумента = "СписаниеОС" ТОгда
					Для каждого Строка из ДокументОбъект.ОС Цикл
						Строка.СнятьСУчетаПоНалогам = Истина;
					КонецЦикла;			  
				КонецЕсли; 
				Если ВидДокумента = "СписаниеНМА" ТОгда
					ДокументОбъект.СнятьСУчетаПоНалогам = Истина;			 
				КонецЕсли; 		 
				// Движения по регистрам Объекты имущественного/земельного/транспортного налогов
				Если  Ссылка.Проведен Тогда
					ВыборкаСтрок = ВыборкаДокументов.Выбрать();		
					Пока ВыборкаСтрок.Следующий() Цикл
						// объекты имущественного налога
						Если ВыборкаСтрок.ОбъектИмущественногоНалога Тогда
							Движение = ДокументОбъект.Движения.ОбъектыИмущественногоНалога.Добавить();
							Движение.Организация	 		= ВыборкаСтрок.Организация;
							Движение.ОбъектНалогообложения = ВыборкаСтрок.ОсновноеСредство;
							Движение.Период 				= ВыборкаСтрок.Дата;
							Движение.НачислятьНалог 		= Ложь;				
						КонецЕсли;	
						
						// объекты земельного налога
						Если ВыборкаСтрок.ОбъектЗемельногоНалога Тогда
							Движение 						= ДокументОбъект.Движения.ОбъектыЗемельногоНалога.Добавить();
							Движение.Организация 			= ВыборкаСтрок.Организация;
							Движение.ОбъектНалогообложения = ВыборкаСтрок.ОсновноеСредство;
							Движение.Период 				= ВыборкаСтрок.Дата;
							Движение.НачислятьНалог 		= Ложь;				
						КонецЕсли;	
						
						// объекты транпортного налога
						Если ВыборкаСтрок.ОбъектТранспортногоНалога Тогда
							Движение 						= ДокументОбъект.Движения.ОбъектыТранспортногоНалога.Добавить();
							Движение.Организация 			= ВыборкаСтрок.Организация;
							Движение.ОбъектНалогообложения = ВыборкаСтрок.ОсновноеСредство;
							Движение.Период 				= ВыборкаСтрок.Дата;
							Движение.НачислятьНалог 		= Ложь;				
						КонецЕсли;	
					КонецЦикла;				  
				КонецЕсли;
				ДокументОбъект.Записать();		
				#Если Клиент Тогда
					Состояние("Обработка документов выбытия ОС и НМА:" + СокрЛП(Счетчик) + " из " + СокрЛП( ВыборкаДокументов.Количество()));
				#КонецЕсли
			КонецЦикла;   
			#Если Клиент Тогда
				Состояние("");
			#КонецЕсли
		КонецЕсли;	
	КонецПроцедуры
	
	// Формирует текст запроса по движениям регистров подсистемы НДС
	// для обработки новых измерений и реквизитов, свзанных с учетом по структурным подразделениям
	// в 1.5.1
	//
	Функция СформироватьТекстЗапросаПоДвижениямРегистровПодсистемыНДС()
		СписокРегистровПодсистемы = Новый Структура("НДС, НДСКВозмещению, КорректировкаНДС, КорректировкаНДСКВозмещению, НДСВзаиморасчетыСБюджетом, НДСЗаНерезидента, НДССИзмененнымСрокомУплаты");	
		ТекстВложенногоЗапроса = "";
		Для каждого ВидРегистра из СписокРегистровПодсистемы Цикл
			
			Если НЕ ТекстВложенногоЗапроса = "" Тогда	
				ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + "
				| ОБЪЕДИНИТЬ ВСЕ ";
			КонецЕсли;
			ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + "
			|ВЫБРАТЬ
			|	Движения.Регистратор как Регистратор,
			|	Представление(Движения.Регистратор) как ПредставлениеРегистратора,
			| """ + ВидРегистра.Ключ + """ как ИмяРегистра
			|ИЗ
			|	РегистрНакопления." + ВидРегистра.Ключ + " КАК Движения"
		КонецЦикла;	
		// группировка и упорядочивание				  
		ТекстЗапроса = "
		|ВЫБРАТЬ 
		|	Движения.Регистратор,
		|	Движения.ПредставлениеРегистратора,
		|	Движения.ИмяРегистра
		|ИЗ
		|	(" + ТекстВложенногоЗапроса + ") как Движения
		|УПОРЯДОЧИТЬ ПО 
		|	Движения.Регистратор
		|ИТОГИ ПО 
		| 	ИмяРегистра	";
		
		Возврат ТекстЗапроса
	КонецФункции // СформироватьТекстЗапросаПоДвижениямРегистровПодсистемыНДС()
	
	// Выполняет начальное заполнение справочника "ОснованияУвольнения"
	// данными по умолчанию
	Процедура ЗаполнитьОснованияУвольнения()
		
		ОснованияУвольнения = Справочники.ОснованияУвольненияИзОрганизации;
		ЭлементСпр = ОснованияУвольнения.НайтиПоКоду("000000001");
		Если ЭлементСпр.Пустая() Тогда
			ЭлементСпр = ОснованияУвольнения.СоздатьЭлемент();
			ЭлементСпр.Код = "000000001";
			ЭлементСпр.Наименование = "п. 1) ст. 51 Трудового Кодекса РК Расторжение трудового договора по соглашению сторон.";
			ЭлементСпр.ПричинаУвольненияИзОрганизации = Перечисления.ПричиныУвольненияИзОрганизации.ПоСобственномуЖеланию;
			ЭлементСпр.Записать();
		КонецЕсли;
		ЭлементСпр = ОснованияУвольнения.НайтиПоКоду("000000002");
		Если ЭлементСпр.Пустая() Тогда
			ЭлементСпр = ОснованияУвольнения.СоздатьЭлемент();
			ЭлементСпр.Код = "000000002";
			ЭлементСпр.Наименование = "п. 2) ст. 51 Трудового Кодекса РК Истечение срока трудового договора.";
			ЭлементСпр.ПричинаУвольненияИзОрганизации = Перечисления.ПричиныУвольненияИзОрганизации.ПоСобственномуЖеланию;
			ЭлементСпр.Записать();
		КонецЕсли;
		ЭлементСпр = ОснованияУвольнения.НайтиПоКоду("000000023");
		Если ЭлементСпр.Пустая() Тогда
			ЭлементСпр = ОснованияУвольнения.СоздатьЭлемент();
			ЭлементСпр.Код = "000000023";
			ЭлементСпр.Наименование = "п. 1 ст. 57 Трудового Кодекса РК По инициативе работника";
			ЭлементСпр.ПричинаУвольненияИзОрганизации = Перечисления.ПричиныУвольненияИзОрганизации.ПоСобственномуЖеланию;
			ЭлементСпр.Записать();
		КонецЕсли;
		
	КонецПроцедуры
	
	
	// Выполняет заполнение регистра сведений "СтавкаРефинансированияНБ"
	//
	Процедура ЗаполнитьСведенияОСтавкеРефинансированияНБ() 
		
		СтавкаНБ = РегистрыСведений.СтавкаРефинансированияНБ.СоздатьНаборЗаписей();
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20030707';
		СтрокаНабора.Размер = 7;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20050201';
		СтрокаНабора.Размер = 7.5;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20050711';
		СтрокаНабора.Размер = 8;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20060401';
		СтрокаНабора.Размер = 8.5;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20060701';
		СтрокаНабора.Размер = 9;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20071201';
		СтрокаНабора.Размер = 11;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20080701';
		СтрокаНабора.Размер = 10.5;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20090101';
		СтрокаНабора.Размер = 10;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20090205';
		СтрокаНабора.Размер = 9.5;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20090512';
		СтрокаНабора.Размер = 9;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20090610';
		СтрокаНабора.Размер = 8.5;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20090710';
		СтрокаНабора.Размер = 8;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20090810';
		СтрокаНабора.Размер = 7.5;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20090904';
		СтрокаНабора.Размер = 7;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20110309';
		СтрокаНабора.Размер = 7.5;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20120214';
		СтрокаНабора.Размер = 7;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20120402';
		СтрокаНабора.Размер = 6.5;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20120604';
		СтрокаНабора.Размер = 6;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20120806';
		СтрокаНабора.Размер = 5.5;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20170401';
		СтрокаНабора.Размер = 11;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20170606';
		СтрокаНабора.Размер = 10.5;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20170822';
		СтрокаНабора.Размер = 10.25;
		
		СтрокаНабора = СтавкаНБ.Добавить();
		СтрокаНабора.Период = '20180116';
		СтрокаНабора.Размер = 9.75;
		
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20180306';
 	СтрокаНабора.Размер = 9.5;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20180417';
 	СтрокаНабора.Размер = 9.25;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20180605';
 	СтрокаНабора.Размер = 9;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20181016';
 	СтрокаНабора.Размер = 9.25;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20190416';
 	СтрокаНабора.Размер = 9;
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20190910';
 	СтрокаНабора.Размер = 9.25;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20200310';
 	СтрокаНабора.Размер = 12;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20200406';
 	СтрокаНабора.Размер = 9.5;  
	
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20200721';
 	СтрокаНабора.Размер = 9;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20210727';
 	СтрокаНабора.Размер = 9.25;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20210914';
 	СтрокаНабора.Размер = 9.5;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20211026';
 	СтрокаНабора.Размер = 9.75;  
	
	СтрокаНабора = СтавкаНБ.Добавить();
 	СтрокаНабора.Период = '20220125';
 	СтрокаНабора.Размер = 10.25;  
	
	
		СтавкаНБ.Записать();
		
	КонецПроцедуры
	
	// Выполняет заполнение регистра сведений "РегламентированныеРасчетныеПоказатели"
	//
	Процедура ЗаполнитьСведенияОРегламентированныхРасчетныхПоказателях() 
		
		НаборЗаписей = РегистрыСведений.РегламентированныеРасчетныеПоказатели.СоздатьНаборЗаписей();
		
		// До 2007 года у инвалидов 3-ей группы необлагаемый ИПН доход составлял 240 МРП, 
		// после 2007 года - 27 МЗП.
		// Для инвалидов I или II группы - до 2005 года 480 МРП, с 2005 по 2008 - без ограничения,
		// с 2009 года - 45 МЗП
		// Для инвалидов I, II, III группы установлен единый предел с 2010 года - 75 МЗП
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20020101"), 4181, 823, 823*480, 823*240);
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20030101"), 5000, 872, 872*480, 872*240);
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20040101"), 6600, 919, 919*480, 919*240);
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20050101"), 7000, 971, 999999999999.99, 971*240);
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20050701"), 9200, 971, 999999999999.99, 971*240);
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20060101"), 9200, 1030, 999999999999.99, 1030*240);
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20070101"), 9752, 1092, 999999999999.99, 9752*27);
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20080101"), 10515, 1168, 999999999999.99, 10515*27);
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20080701"), 12025, 1168, 999999999999.99, 12025*27);
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20090101"), 13470, 1273, 45*13470, 27*13470);
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20090701"), 13717, 1296, 45*13717, 27*13717);
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20090801"), 13717, 1296, 45*13470, 27*13470, 13470, 1273);	
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20100101"), 14952, 1413, 55*14952, 55*14952, 14952, 1413);
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20110101"), 15999, 1512, 55*15999, 55*15999, 15999, 1512);	
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20120101"), 17439, 1618, 55*17439, 55*17439, 17439, 1618);	
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20130101"), 18660, 1731, 55*18660, 55*18660, 18660, 1731);	
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20140101"), 19966, 1852, 55*19966, 55*19966, 19966, 1852);	
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20150101"), 21364, 1982, 55*21364, 55*21364, 21364, 1982);	
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20160101"), 22859, 2121, 55*22859, 55*22859, 22859, 2121);
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20170101"), 24459, 2269, 75*24459, 75*24459, 24459, 2269);
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20180101"), 28284, 2405, 75*28284, 75*28284, 28284, 2405);
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20190101"), 42500, 2525, 882*2525, 882*2525, 42500, 2525);
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20200101"), 42500, 2651, 882*2651, 882*2651, 42500, 2651);
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20200401"), 42500, 2778, 882*2651, 882*2651, 42500, 2778);
		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20210101"), 42500, 2917, 882*2917, 882*2917, 42500, 2917);
  		ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, Дата("20220101"), 60000, 3063, 882*3063, 882*3063, 60000, 3063);
		
		НаборЗаписей.Записать();
		
	КонецПроцедуры
	
	// Добавляет запись в набор записей регистра "РегламентированныеРасчетныеПоказатели"
	//
	Процедура ДобавитьЗначенияРасчетныхПоказателей(НаборЗаписей, ДатаСведений, РазмерМЗП, РазмерМРП, 
		РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы = 0,
		РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы = 0, 
		РазмерМЗПДляЦелейНалогообложения = 0, 
		РазмерМРПДляЦелейНалогообложения = 0) Экспорт
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Период    = ДатаСведений;
		НоваяЗапись.РазмерМЗП = РазмерМЗП;
		НоваяЗапись.РазмерМРП = РазмерМРП;
		НоваяЗапись.РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы = РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы;
		НоваяЗапись.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы   = РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы;
		НоваяЗапись.РазмерМЗПДляЦелейНалогообложения = ?(РазмерМЗПДляЦелейНалогообложения = 0, РазмерМЗП, РазмерМЗПДляЦелейНалогообложения);
		НоваяЗапись.РазмерМРПДляЦелейНалогообложения = ?(РазмерМРПДляЦелейНалогообложения = 0, РазмерМРП, РазмерМРПДляЦелейНалогообложения);
		
	КонецПроцедуры
	
	// Добавляет запись в набор записей регистра "СведенияОСтавкахИПНиСН" 
	//
	Процедура ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, ВидСтавокИПНиСН, НомерСтрокиСтавок, СуммаДоходаС, СуммаДоходаПо, 
		Ставка = 0)
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Период			  = Период;
		НоваяЗапись.ВидСтавокИПНиСН   = ВидСтавокИПНиСН;
		НоваяЗапись.НомерСтрокиСтавок = НомерСтрокиСтавок;
		НоваяЗапись.СуммаДоходаС      = СуммаДоходаС;
		НоваяЗапись.СуммаДоходаПо     = СуммаДоходаПо;
		НоваяЗапись.Ставка 		   	  = Ставка;
		
	КонецПроцедуры
	
	// Выполняет заполнение регистра сведений "СведенияОСтавкахИПНиСН" на 2006 год
	//
	Процедура ЗаполнитьСведенияОСтавкахИПНиСН2006() 
		
		// ----------------------------------------------------------------------------
		// 2006 год
		
		НаборЗаписей = РегистрыСведений.СведенияОСтавкахИПНиСН.СоздатьНаборЗаписей();
		НаборЗаписей.ЗаписьИзФормыНабораЗаписей = Истина;
		НаборЗаписей.Отбор.ВидСтавокИПНиСН.Использование = Истина;
		НаборЗаписей.Отбор.Период.Использование = Истина;
		
		Период = Дата(2006, 1, 1);
		НаборЗаписей.Отбор.Период.Значение = Период;
		
		// ИПН
		НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН;
		
		// до 185400
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 1, 
		0,	185400, 5);
		
		// до 494400
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 2, 
		185400, 494400,  8);
		
		// до 2472000
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 3, 
		494400, 2472000,  13);
		
		// до 7416000
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 4, 
		2472000, 7416000,  15);
		
		// свыше 6991200
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 5, 
		7416000, 9999999999,  20);
		
		НаборЗаписей.Записать();
		
		// СН за работников
		НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК;
		НаборЗаписей.Очистить();
		
		// до 185400
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 1, 
		0,	185400, 20);
		
		// до 494400
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 2, 
		185400, 494400,  15);
		
		// до 2472000
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 3, 
		494400, 2472000,  12);
		
		// до 7416000
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 4, 
		2472000, 7416000,  9);
		
		// свыше 6991200
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 5, 
		7416000, 9999999999,  7);
		
		НаборЗаписей.Записать();
		
		// СН за иностранных специалистов
		НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов;
		НаборЗаписей.Очистить();
		
		// до 494400
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 1, 
		0, 494400,  11);
		
		// до 2330400
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 2, 
		494400, 2472000,  9);
		
		// до 6991200
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 3, 
		2472000, 7416000,  7);
		
		// свыше 6991200
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 4, 
		7416000, 9999999999,  5);
		
		НаборЗаписей.Записать();
		
	КонецПроцедуры 
	
	// Выполняет заполнение регистра сведений "СведенияОСтавкахИПНиСН" на 2007 год
	//
	Процедура ЗаполнитьСведенияОСтавкахИПНиСН2007() 
		
		// ----------------------------------------------------------------------------
		// 2007 год
		
		НаборЗаписей = РегистрыСведений.СведенияОСтавкахИПНиСН.СоздатьНаборЗаписей();
		НаборЗаписей.ЗаписьИзФормыНабораЗаписей = Истина;
		НаборЗаписей.Отбор.ВидСтавокИПНиСН.Использование = Истина;
		НаборЗаписей.Отбор.Период.Использование = Истина;
		
		Период = Дата(2007, 1, 1);
		НаборЗаписей.Отбор.Период.Значение = Период;
		
		// ИПН
		НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН;
		
		// 10% все
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 1, 
		0,	9999999999, 10);
		
		НаборЗаписей.Записать();
		
		// СН за работников
		НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК;
		НаборЗаписей.Очистить();
		
		// до 196560
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 1, 
		0,	196560, 20);
		
		// до 524160
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 2, 
		196560, 524160,  15);
		
		// до 2620800
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 3, 
		524160, 2620800,  12);
		
		// до 7862400
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 4, 
		2620800, 7862400,  9);
		
		// свыше 7862400
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 5, 
		7862400, 9999999999,  7);
		
		НаборЗаписей.Записать();
		
		// СН за иностранных специалистов
		НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов;
		НаборЗаписей.Очистить();
		
		// до 524160
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 1, 
		0, 524160,  11);
		
		// до 2620800
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 2, 
		524160, 2620800,  9);
		
		// до 7862400
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 3, 
		2620800, 7862400,  7);
		
		// свыше 7862400
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 4, 
		7862400, 9999999999,  5);
		
		НаборЗаписей.Записать();														
		
	КонецПроцедуры 
	
	// Выполняет заполнение регистра сведений "СведенияОСтавкахИПНиСН" на 2008 год
	//
	Процедура ЗаполнитьСведенияОСтавкахИПНиСН2008() 
		
		// ----------------------------------------------------------------------------
		// 2008 год
		
		НаборЗаписей = РегистрыСведений.СведенияОСтавкахИПНиСН.СоздатьНаборЗаписей();
		НаборЗаписей.ЗаписьИзФормыНабораЗаписей = Истина;
		НаборЗаписей.Отбор.ВидСтавокИПНиСН.Использование = Истина;
		НаборЗаписей.Отбор.Период.Использование = Истина;
		
		Период = Дата(2008, 1, 1);
		НаборЗаписей.Отбор.Период.Значение = Период;
		
		// ИПН - 10% не менялся с 2007
		
		
		// СН за работников и иностранных специалистов с 2008 года одинаковая шкала
		НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК;
		НаборЗаписей.Очистить();
		
		// до 210240
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 1, 
		0,	210240, 13);
		
		// до 560640
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 2, 
		210240, 560640,  11);
		
		// до 2803200
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 3, 
		560640, 2803200,  9);
		
		// до 8409600
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 4, 
		2803200, 8409600,  7);
		
		// свыше 8409600
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 5, 
		8409600, 9999999999,  5);
		
		НаборЗаписей.Записать();
		
		// СН за иностранных специалистов
		НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов;
		НаборЗаписей.Очистить();
		
		// до 210240
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 1, 
		0,	210240, 13);
		
		// до 560640
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 2, 
		210240, 560640,  11);
		
		// до 2803200
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 3, 
		560640, 2803200,  9);
		
		// до 8409600
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 4, 
		2803200, 8409600,  7);
		
		// свыше 8409600
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 5, 
		8409600, 9999999999,  5);
		
		НаборЗаписей.Записать();														
		
	КонецПроцедуры 
	

	// Заполнение реквизитов у предопределенного элемента ОтражениеНачисленийПоУмолчанию \
	//
	Процедура ЗаполнениеОтраженияНачисленийПоУмолчанию()
		
		ПланСчетов = ПланыСчетов.Типовой;
		СпособУчетПоУмолчанию = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию.ПолучитьОбъект();
		СпособУчетПоУмолчанию.СчетДт = ПланСчетов.АдминистративныеРасходы;
		СпособУчетПоУмолчанию.СубконтоДт1 = Справочники.СтатьиЗатрат.ПустаяСсылка();
		СпособУчетПоУмолчанию.СубконтоДт2 = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		СпособУчетПоУмолчанию.СчетКт = ПланСчетов.КраткосрочнаяЗадолженностьПоОплатеТруда;
		СпособУчетПоУмолчанию.СубконтоКт1 = Справочники.ФизическиеЛица.ПустаяСсылка();
		СпособУчетПоУмолчанию.СчетДтНУ = ПланыСчетов.Налоговый.ОбщиеИАдминистративныеРасходы;
		СпособУчетПоУмолчанию.СубконтоДтНУ1 = Справочники.СтатьиЗатрат.ПустаяСсылка();
		СпособУчетПоУмолчанию.СчетКтНУ = ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками;
		СпособУчетПоУмолчанию.СубконтоКтНУ1 = Справочники.ФизическиеЛица.ПустаяСсылка();
		СпособУчетПоУмолчанию.Записать();
		
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// ПРОИЗВОДСТВО
	
	// Заполняет регистр СоответствиеСчетовПроизводстваСчетамНезавершенногоПроизводства
	// 
	Процедура ЗаполнитьСоответствиеСчетовПроизводстваСчетамНезавершенногоПроизводства()
		
		Типовой 	 = ПланыСчетов.Типовой;
		Налоговый 	 = ПланыСчетов.Налоговый;
		НаборЗаписей = РегистрыСведений.СоответствиеСчетовПроизводстваСчетамНезавершенногоПроизводства.СоздатьНаборЗаписей();
		
		// 8011 - 1341 ОсновноеПроизводство
		НоваяЗапись 				= НаборЗаписей.Добавить();
		НоваяЗапись.СчетЗатратБУ 	= Типовой.ОсновноеПроизводство;
		//НоваяЗапись.СчетНЗПБУ		= Типовой.НезавершенноеПроизводство_ОсновноеПроизводство;
		
		НоваяЗапись.СчетЗатратНУ 	= Налоговый.ОсновноеПроизводство;
		НоваяЗапись.СчетНЗПНУ 	    = Налоговый.НезавершенноеПроизводство_ОсновноеПроизводство;
		
		// 8020 - 1342 Полуфабрикаты собственного производства
		НоваяЗапись	            	= НаборЗаписей.Добавить();
		НоваяЗапись.СчетЗатратБУ	= Типовой.ПолуфабрикатыСобственногоПроизводства;
		//НоваяЗапись.СчетНЗПБУ		= Типовой.НезавершенноеПроизводство_ПолуфабрикатыСобственногоПроизводства;
		
		НоваяЗапись.СчетЗатратНУ 	= Налоговый.ПолуфабрикатыСобственногоПроизводства;
		НоваяЗапись.СчетНЗПНУ 	    = Налоговый.НезавершенноеПроизводство_ПолуфабрикатыСобственногоПроизводства;
		
		// 8030- 1343 Вспомогательные производства
		НоваяЗапись					= НаборЗаписей.Добавить();
		НоваяЗапись.СчетЗатратБУ	= Типовой.ВспомогательныеПроизводства;
		//НоваяЗапись.СчетНЗПБУ		= Типовой.НезавершенноеПроизводство_ВспомогательныеПроизводства;
		
		НоваяЗапись.СчетЗатратНУ 	= Налоговый.ВспомогательныеПроизводства;
		НоваяЗапись.СчетНЗПНУ 	    = Налоговый.НезавершенноеПроизводство_ВспомогательныеПроизводства;
		
		НаборЗаписей.Записать();
		
	КонецПроцедуры // ЗаполнитьСоответствиеСчетовПроизводстваСчетамНезавершенногоПроизводства
	
	////////////////////////////////////////////////////////////////////////////////
	// РЕГЛАМЕНТИРОВАННАЯ ОТЧЕТНОСТЬ
	
	// Выполняет все регламентные операции для регламентированных отчетов
	// при каждом обновлении ИБ
	Процедура ОбновитьРегламентированныеОтчеты(СписокИсключений = Неопределено) Экспорт
		
		Сообщить("-----------------------");
		Сообщить("Обновление регламентированных отчетов.");		
		ЗаполнитьСписокРегламентированныхОтчетов(Ложь, СписокИсключений);
		Сообщить("-----------------------");
		
		// перенумерация элементов справочника РегламентированныеОтчеты
		Сообщить("-----------------------");
		Сообщить("Перенумерация элементов справочника ""Регламентированные отчеты""");
		ПеренумероватьСписокРегламентированныхОтчетов();
		Сообщить("-----------------------");
		
		// замена внешних регламентированных отчетов на внутренние
		Сообщить("-----------------------");
		Сообщить("Замена внешних отчетов на внутренние в справочнике ""Регламентированные отчеты""");
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	РегламентированныеОтчеты.Ссылка КАК Ссылка,
		|	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета,
		|	РегламентированныеОтчеты.Наименование КАК Наименование
		|ИЗ
		|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		|ГДЕ
		|	РегламентированныеОтчеты.ВнешнийОтчетИспользовать = &ПризнакИспользованияВнешнегоОтчета");
		Если ЗначениеЗаполнено(СписокИсключений) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	 И НЕ РегламентированныеОтчеты.ИсточникОтчета в (&СписокИсключений)";
			
			Запрос.УстановитьПараметр("СписокИсключений", СписокИсключений);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ПризнакИспользованияВнешнегоОтчета", Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Метаданные.Отчеты.Найти(Выборка.ИсточникОтчета) <> Неопределено Тогда
				Попытка
					ОбъектРеглОтчет = Выборка.Ссылка.ПолучитьОбъект();
					ОбъектРеглОтчет.ВнешнийОтчетИспользовать = Ложь;
					ОбъектРеглОтчет.Записать();
				Исключение
					Сообщить("  при записи отчета " + Выборка.Наименование + " произошла ошибка: " + ОписаниеОшибки(),  СтатусСообщения.Важное);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		Сообщить("-----------------------");
		
	КонецПроцедуры
	
	// Выполняет первоначальное заполнение справочника РегламентированныеОтчеты
	// списком регламентированных отчетов. 
	//  Процедура должна вызываться при первоначальном заполнении пустой 
	// информационной базы. Предполагается, что перед запуском процедуры справочник
	// РегламентированныеОтчеты - пустой.
	//
	Процедура ЗаполнитьСписокРегламентированныхОтчетов(ПервоеЗаполнение = Истина, СписокИсключений = Неопределено)
		
		Перем ДеревоОтчетов;
		Перем ОбработкаОбновлениеОтчетов;
		
		// Заполнением списка отчетов выполняется путем вызова экспортных процедур
		// основной формы обработки ОбновлениеРегламентированнойОтчетности.
		ОбработкаОбновлениеОтчетов = Обработки.ОбновлениеРегламентированнойОтчетности.Создать().ПолучитьФорму("ОсновнаяФорма");
		
		// Получаем список регламентированных отчетов в виде дерева.
		ДеревоОтчетов = ОбработкаОбновлениеОтчетов.ПолучитьСписокОтчетов();
		
		Если ДеревоОтчетов.Строки.Количество() = 0 Тогда
			// нет обновлений
			Возврат;
		КонецЕсли;
		
		// Заполняем списко отчетов.
		ОбработкаОбновлениеОтчетов.ЗаполнитьСписокОтчетов(ДеревоОтчетов, ПервоеЗаполнение, СписокИсключений);
		
	КонецПроцедуры // ЗаполнитьСписокРегламентированныхОтчетов()
	
	// Перенумеровывает элементы справочника РегламентированныеОтчеты
	//
	Процедура ПеренумероватьСписокРегламентированныхОтчетов()
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РегламентированныеОтчеты.Ссылка,
		|	РегламентированныеОтчеты.Родитель,
		|	РегламентированныеОтчеты.Код,
		|	РегламентированныеОтчеты.ЭтоГруппа КАК ЭтоГруппа,
		|	РегламентированныеОтчеты.Наименование КАК Наименование
		|ИЗ
		|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоГруппа ИЕРАРХИЯ,
		|	Наименование";
		
		Выборка = Запрос.Выполнить().Выбрать();
		ТекКодГруппы = 0;
		ТекКод = 1;
		ТекущаяГруппа = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.ЭтоГруппа = Истина ИЛИ Выборка.Родитель.Ссылка = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
				Попытка
					Объект = Выборка.Ссылка.ПолучитьОбъект();
					Объект.Код = Формат(ТекКодГруппы, "ЧЦ=3; ЧВН=; ЧГ=") + "000";
					Объект.ГенерироватьНовыйКод();
					Объект.Записать();  			
					ТекКодГруппы = ТекКодГруппы + 1;
				Исключение
					Сообщить(" ошибка при перенумерации " + Выборка.Ссылка + ": " + ОписаниеОшибки());
				КонецПопытки;
			Иначе
				Если ТекущаяГруппа <> Выборка.Родитель.Ссылка Тогда
					ТекКод = 1;
				КонецЕсли;
				Попытка
					Объект = Выборка.Ссылка.ПолучитьОбъект();
					Объект.Код = Формат(ТекКод, "ЧЦ=6; ЧВН=; ЧГ=");
					Объект.ГенерироватьНовыйКод();
					Объект.Записать();			
					ТекКод = ТекКод + 1;
				Исключение
					Сообщить(" ошибка при перенумерации " + Выборка.Ссылка + ": " + ОписаниеОшибки());
				КонецПопытки;
				ТекущаяГруппа = Выборка.Родитель.Ссылка;
			КонецЕсли;		
		КонецЦикла;
		
	КонецПроцедуры
	
	// Процедура выполняет реструктуризацию сохраненных данных формы 307.00
	// в связи с измнением структуры фората сохряняемых данных в релизе 1.0.5.2
	Процедура ОбработкаСохраненныхДанныхФорма307()
		
		СписокОтчетов  = Новый СписокЗначений; 
		СписокОтчетов.Добавить(Метаданные.Отчеты.РегламентированныйОтчет307Форма.Имя);  
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РеглОтчет.Ссылка,
		|	РеглОтчет.ИсточникОтчета,
		|	РеглОтчет.ДанныеОтчета,
		|	РеглОтчет.ВыбраннаяФорма
		|ИЗ
		|	Документ.РегламентированныйОтчет КАК РеглОтчет
		|ГДЕ
		|	РеглОтчет.ИсточникОтчета В(&СписокОтчетов)";
		
		Запрос.УстановитьПараметр("СписокОтчетов", СписокОтчетов);
		Выборка = Запрос.Выполнить().Выбрать();
		НаименованиеОтчета = "";
		
		Пока Выборка.Следующий() Цикл
			
			Попытка			
				ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();			
				ДанныеОтчета = ДокОбъект.ДанныеОтчета.Получить(); 
				
				//Модифицируем данные для доп формы, в случае если она сохранена в старом формате
				Если Не ДанныеОтчета.Свойство("ДанныеДопФормыФорма307_01") Тогда
					
					ТекФорма = ДокОбъект.ВыбраннаяФорма;
					Макет    = Отчеты["РегламентированныйОтчет307Форма"].ПолучитьМакет("Макет" + ТекФорма); 
					
					Если ДанныеОтчета.Свойство("ДанныеДопФормы") Тогда
						
						МногострочныеДанные = Неопределено;
						ДанныеОтчета.Свойство("ДанныеДопФормы",МногострочныеДанные);
						Если МногострочныеДанные <> Неопределено Тогда
							// данные каждой из страниц формы
							Для Каждого СтарыйЭлемент Из МногострочныеДанные Цикл
								СтараяТаблицаЗначений = СтарыйЭлемент.Значение;
								// переименовываем колонки
								Для Каждого Строка Из СтараяТаблицаЗначений.Колонки Цикл
									Строка.Имя = СтрЗаменить(Строка.Имя,"Ф307","Ф307_01");
									Строка.Имя = СтрЗаменить(Строка.Имя,"C_1","C1");
									Строка.Имя = СтрЗаменить(Строка.Имя,"C_2","C2");							 
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
						// удаляем старую структуру
						Если ДанныеОтчета.Свойство("ДанныеДопФормы") Тогда
							ДанныеОтчета.Удалить("ДанныеДопФормы");
						КонецЕсли;
						// вставляем новую структуру данных
						ДанныеОтчета.Вставить("ДанныеДопФормыФорма307_01",МногострочныеДанные);
						
						//Модифицируем таблицу расшифровки
						ТаблицаРас = Неопределено;
						ДанныеОтчета.Свойство("ТаблицаРасшифровки",ТаблицаРас);
						Если ТаблицаРас <> Неопределено Тогда
							// переименовываем колонки таблицы расшифровки
							Для Каждого ТекСтрока Из ТаблицаРас Цикл
								ТекСтрока.ИмяЯчейки = СтрЗаменить(ТекСтрока.ИмяЯчейки,"Ф307","Ф307_01");
								ТекСтрока.ИмяЯчейки = СтрЗаменить(ТекСтрока.ИмяЯчейки,"C_1","C1");
								ТекСтрока.ИмяЯчейки = СтрЗаменить(ТекСтрока.ИмяЯчейки,"C_2","C2");
							КонецЦикла;                            
						КонецЕсли;
						
						//Удаляем старую таблицу расшифровки
						Если ДанныеОтчета.Свойство("ТаблицаРасшифровки") Тогда
							ДанныеОтчета.Удалить("ТаблицаРасшифровки");
						КонецЕсли;
						// Вставляем новую таблицу расшифровки
						ДанныеОтчета.Вставить("ТаблицаРасшифровкиФорма307_01",ТаблицаРас);
						
						ХранилищеДанных = Новый ХранилищеЗначения(ДанныеОтчета);
						ДокОбъект.ДанныеОтчета = ХранилищеДанных;
					КонецЕсли;				
				КонецЕсли;	  			
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				
			КонецПопытки;
			
		КонецЦикла;	
		
	КонецПроцедуры	
	
	////////////////////////////////////////////////////////////////////////////////
	// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	
	Процедура ДобавитьЗаписьВРегистрОтветственныеЛицаОрганизации(ОтветственноеЛицо, Уполномоченный)
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОтветственноеЛицо", ОтветственноеЛицо);
		Запрос.Текст = "ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Период,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(, ОтветственноеЛицо = &ОтветственноеЛицо) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
		
		СписокЛицВыборка = Запрос.Выполнить().Выбрать();
		
		Если СписокЛицВыборка.Количество() >0 Тогда
			НаборЗаписей = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОтветственноеЛицо.Использование = Истина;
			НаборЗаписей.Отбор.ОтветственноеЛицо.Значение		 = Уполномоченный;
			НаборЗаписей.Отбор.ОтветственноеЛицо.ВидСравнения   = ВидСравнения.Равно;
			
			Пока СписокЛицВыборка.Следующий() Цикл
				НоваяЗапись = НаборЗаписей.Добавить();	
				НоваяЗапись.ОтветственноеЛицо  =Уполномоченный;
				НоваяЗапись.Период   			= СписокЛицВыборка.Период;
				НоваяЗапись.СтруктурнаяЕдиница = СписокЛицВыборка.СтруктурнаяЕдиница;
				НоваяЗапись.ФизическоеЛицо     = СписокЛицВыборка.ФизическоеЛицо;
				НоваяЗапись.Должность          = СписокЛицВыборка.Должность;
			КонецЦикла;
			
			НаборЗаписей.Записать();
			
		КонецЕсли; 		
		
	КонецПроцедуры
	
	// Определяет первый возможный к использованию счет.
	// Если передается счет-группа (ЗапретитьИспользоватьВПроводках = Истина)
	// тогда будет выбран первый счет из это группы, если он тоже группа, то 
	// происходит выборка первого счета из полученной группы и т.д. ...
	//
	Функция ПервыйВозможныйКИспользованиюСчет(ПроверяемыйСчет)
		
		Если Не ПроверяемыйСчет.ЗапретитьИспользоватьВПроводках Тогда
			
			Возврат ПроверяемыйСчет;
			
		Иначе
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Типовой.Ссылка
			|ИЗ
			|	ПланСчетов.Типовой КАК Типовой
			|ГДЕ
			|	Типовой.Родитель = &Родитель
			|
			|УПОРЯДОЧИТЬ ПО
			|	Типовой.Порядок");
			
			Запрос.УстановитьПараметр("Родитель", ПроверяемыйСчет);
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				
				Возврат ПланыСчетов.Типовой.ПустаяСсылка();
				
			Иначе
				
				ВыборкаРезультатов = РезультатЗапроса.Выбрать();
				ВыборкаРезультатов.Следующий();
				
				Возврат ПервыйВозможныйКИспользованиюСчет(ВыборкаРезультатов.Ссылка);
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецФункции
	
	// В справочнике Валюты заполняет реквизит "БуквенныйКод" для существующих элементов
	// по классификатору валют.
	//                                                                                    
	Процедура ЗаполнитьБуквенныйКодВалюты()
		
		// выберем все валюты, у которых не заполнен БуквенныйКод
		Запрос = Новый Запрос;
		Запрос.Текст =  "
		|ВЫБРАТЬ
		|	Валюты.Ссылка,
		|	Валюты.Код,
		|	Валюты.Наименование
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|ГДЕ
		|	Валюты.БуквенныйКод = """"
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// считаем классификатор валют в таблицу значений
		ТЗВалюты = Новый ТаблицаЗначений;
		ТЗВалюты.Колонки.Добавить("Код");
		ТЗВалюты.Колонки.Добавить("БуквенныйКод");
		
		Макет = Справочники.Валюты.ПолучитьМакет("КлассификаторВалют");
		
		НомерСтроки = 4;
		Пока ЗначениеЗаполнено(Макет.Область(НомерСтроки, 2).ПараметрРасшифровки) Цикл
			
			НоваяСтрока 					= ТЗВалюты.Добавить();
			НоваяСтрока.Код 				= СокрЛП(Макет.Область(НомерСтроки, 2).Текст);
			НоваяСтрока.БуквенныйКод		= СокрЛП(Макет.Область(НомерСтроки, 3).Текст);
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		Сообщить("---------------------");
		Сообщить("Обновление справочника ""Валюты"".");
		Сообщить("---------------------");
		
		ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
		Пока Выборка.Следующий() Цикл
			
			НайденныйБуквенныйКод = "";
			
			// если ничего руками не правили, то наименование и должно содержать необходимый буквенный код
			СтрокаТЗ = ТЗВалюты.Найти(СокрЛП(Выборка.Наименование), "БуквенныйКод");
			Если СтрокаТЗ <> Неопределено Тогда
				НайденныйБуквенныйКод = СтрокаТЗ.БуквенныйКод;
			ИначеЕсли Выборка.Ссылка = ВалютаРеглУчета Тогда
				// в казахстанской бухгалтерии валюта регл. учета - тенге
				НайденныйБуквенныйКод = "KZT";
			Иначе
				// если руками не правили, то код - цифровой код валюты
				СтрокаТЗ = ТЗВалюты.Найти(СокрЛП(Выборка.Код), "Код");
				Если СтрокаТЗ <> Неопределено Тогда
					НайденныйБуквенныйКод = СтрокаТЗ.БуквенныйКод;
				КонецЕсли;
			КонецЕсли;
			
			Если НайденныйБуквенныйКод <> "" Тогда
				Попытка
					ВалютаОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ВалютаОбъект.БуквенныйКод = НайденныйБуквенныйКод;
					ВалютаОбъект.Записать();
				Исключение
					Сообщить("  для валюты """ + Выборка.Наименование + """ не удалось установить соответствующий буквенный код - необходимо заполнить его в справочнике ""Валюты""!", СтатусСообщения.Важное);
				КонецПопытки;
			Иначе
				Сообщить("  для валюты """ + Выборка.Наименование + """ не был найден соответствующий буквенный код - необходимо заполнить его в справочнике ""Валюты""!", СтатусСообщения.Важное);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры // ЗаполнитьБуквенныйКодВалюты()
	
	// Выполняет проверку соответствия свойства объекта заменяемой ссылке.
	// Если свойство объекта совпадает с заменяемой ссылкой, то выполняется
	// замена на новую ссылку
	//
	Процедура ЗаменаСсылкиНаОбъект(Объект, ИмяСвойства, ТипСсылки, ЗаменяемаяСсылка, НоваяСсылка, ОбъектИзменен)
		
		Если ТипЗнч(Объект[ИмяСвойства]) = ТипСсылки Тогда
			Если Объект[ИмяСвойства] = ЗаменяемаяСсылка Тогда
				Объект[ИмяСвойства] = НоваяСсылка;
				ОбъектИзменен = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры // ЗаменаСсылкиНаОбъект()
	
	// Выполняет проверку соответствия свойства объекта заменяемой ссылке.
	// Если свойство объекта совпадает с заменяемой ссылкой, то выполняется
	// замена на новую ссылку
	//
	Процедура ЗаменаСсылкиНаСубконто(Субконто, ТипСсылки, ЗаменяемаяСсылка, НоваяСсылка, ОбъектИзменен)
		
		ОсмотрелиВсеЗначения = Ложь;
		
		Пока Не ОсмотрелиВсеЗначения Цикл
			Для каждого КлючЗначение из Субконто Цикл
				
				Если ТипЗнч(КлючЗначение.Значение) = ТипСсылки Тогда
					Если КлючЗначение.Значение = ЗаменяемаяСсылка Тогда
						Субконто.Вставить(КлючЗначение.Ключ, НоваяСсылка);
						ОбъектИзменен = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				Если ТипЗнч(КлючЗначение.Ключ) = ТипСсылки Тогда
					Если КлючЗначение.Ключ = ЗаменяемаяСсылка Тогда
						Субконто.Вставить(НоваяСсылка, КлючЗначение.Значение);
						Субконто.Удалить(КлючЗначение.Ключ);
						ОбъектИзменен = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			ОсмотрелиВсеЗначения = Истина;
		КонецЦикла;
		
	КонецПроцедуры // ЗаменаСсылкиНаОбъект()
	
	// Выполняет поиск ссылок на каждый объект из переданного спсика исходных объектов.
	// Все найденные ссылки заменяются ссылкой на новый объект, соответствующий исходному.
	//
	// Поиск и замена ссылок производится по коллекциям метаданных:
	// - Реквизиты;
	// - Табличные части;
	// - Измерения;
	// - Ресурсы;
	// - Родители;
	// - Владельца.
	//
	Процедура ЗаменаСсылокНаОбъекты(СписокИсходныхОбъектов, СписокНовыхОбъектов)
		
		Состояние("Выполняется поиск и замена ссылок на модифицированные счета бухгалтерского учета...");
		
		Если СписокИсходныхОбъектов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		НаборыЗаписей = Новый Структура;
		
		МассивИсходныхОбъектов = СписокИсходныхОбъектов.ВыгрузитьЗначения();
		Ссылки = НайтиПоСсылкам(МассивИсходныхОбъектов);
		
		Для каждого Ссылка из Ссылки Цикл
			
			// Получение ссылки на новый объект
			ТипСсылки = ТипЗнч(Ссылка.Ссылка);
			ИсходныйОбъект = СписокИсходныхОбъектов.НайтиПоЗначению(Ссылка.Ссылка);
			ИндексОбъектаВСписке = СписокИсходныхОбъектов.Индекс(ИсходныйОбъект);
			НоваяСсылка = СписокНовыхОбъектов[ИндексОбъектаВСписке].Значение;
			
			// Получение имени коллекции объектов метаданных
			ПолноеИмяОбъектаМД = Ссылка.Метаданные.ПолноеИмя();
			ПозицияТочки = Найти(ПолноеИмяОбъектаМД, ".");
			ИмяКоллекцииОбъектовМД = Лев(ПолноеИмяОбъектаМД, ПозицияТочки - 1);
			
			// Обработка констант
			Если ИмяКоллекцииОбъектовМД = "Константа" Тогда
				Попытка
					Константы[Ссылка.Метаданные.Имя].Установить(НоваяСсылка);
					Состояние("Обработан объект <" + Ссылка.Данные + ">");
					
				Исключение
					Сообщить(
					"Объект не обработан автоматически: " + ИмяКоллекцииОбъектовМД + " <" + Ссылка.Метаданные.Синоним + "> <" + Ссылка.Данные + ">.
					|	Необходимо вручную заменить значение на " + НоваяСсылка, СтатусСообщения.ОченьВажное);
				КонецПопытки;
				
				Продолжить;
			КонецЕсли;
			
			// Обработка последовательностей
			Если ИмяКоллекцииОбъектовМД = "Последовательность" Тогда
				Продолжить;
			КонецЕсли;
			
			// Обработка независимых регистров сведений
			Если ИмяКоллекцииОбъектовМД = "РегистрСведений" Тогда
				Объект = РегистрыСведений[Ссылка.Метаданные.Имя].СоздатьМенеджерЗаписи();
				ОбъектИзменен = Ложь;
				
				Измерения = Ссылка.Метаданные["Измерения"];
				Для каждого Измерение из Измерения Цикл
					Объект[Измерение.Имя] = Ссылка.Данные[Измерение.Имя];
				КонецЦикла;
				
				Объект.Период = Ссылка.Данные.Период;
				Объект.Прочитать();
				
				Если Объект.Выбран() Тогда
					Измерения = Ссылка.Метаданные["Измерения"];
					Для каждого Измерение из Измерения Цикл
						ЗаменаСсылкиНаОбъект(Объект, Измерение.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен);
					КонецЦикла;
					
					Реквизиты = Ссылка.Метаданные["Реквизиты"];
					Для каждого Реквизит из Реквизиты Цикл
						ЗаменаСсылкиНаОбъект(Объект, Реквизит.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен);
					КонецЦикла;
					
					Ресурсы = Ссылка.Метаданные["Ресурсы"];
					Для каждого Ресурс из Ресурсы Цикл
						ЗаменаСсылкиНаОбъект(Объект, Ресурс.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен);
					КонецЦикла;
					
					Попытка
						Объект.ОбменДанными.Загрузка = Истина;
						Объект.Записать();
						Состояние("Обработан объект <" + Ссылка.Данные + ">");
						
					Исключение
						Сообщить(
						"Объект не обработан автоматически: " + ИмяКоллекцииОбъектовМД + " <" + Ссылка.Метаданные.Синоним + "> <" + Ссылка.Данные + ">. 
						|	Необходимо вручную заменить значение " + Ссылка.Ссылка + " на " + НоваяСсылка, СтатусСообщения.ОченьВажное);
					КонецПопытки;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			// Обработка всех прочих объектов, не являющихся константами и независимыми регистрами сведений
			Объект = Ссылка.Данные.ПолучитьОбъект();
			ОбъектИзменен = Ложь;
			
			// Обработка реквизитов
			Реквизиты = Ссылка.Метаданные["Реквизиты"];
			Для каждого Реквизит из Реквизиты Цикл
				ЗаменаСсылкиНаОбъект(Объект, Реквизит.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен);
			КонецЦикла;
			
			// Обработка табличных частей
			ТабличныеЧасти = Ссылка.Метаданные["ТабличныеЧасти"];
			Для каждого ТабличнаяЧасть из ТабличныеЧасти Цикл
				Реквизиты = ТабличнаяЧасть["Реквизиты"];
				ТЧ = Объект[ТабличнаяЧасть.Имя];
				Для каждого СтрокаТЧ из ТЧ Цикл
					Для каждого Реквизит из Реквизиты Цикл
						ЗаменаСсылкиНаОбъект(СтрокаТЧ, Реквизит.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
			// Обработка движений документов
			Если ИмяКоллекцииОбъектовМД = "Документ" Тогда
				Для Каждого Регистр из Ссылка.Метаданные.Движения Цикл
					// Получение имени коллекции объектов метаданных
					ПолноеИмяРегистра = Регистр.ПолноеИмя();
					ПозицияТочки = Найти(ПолноеИмяРегистра, ".");
					ИмяКоллекцииРегистров = Лев(ПолноеИмяРегистра, ПозицияТочки - 1);
					
					Если ИмяКоллекцииРегистров = "РегистрНакопления" Тогда
						Менеджер = РегистрыНакопления[Регистр.Имя];
						
					ИначеЕсли ИмяКоллекцииРегистров = "РегистрСведений" Тогда
						Менеджер = РегистрыСведений[Регистр.Имя];
						
					ИначеЕсли ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
						Менеджер = РегистрыБухгалтерии[Регистр.Имя];
						
					Иначе
						Продолжить;
					КонецЕсли;
					
					НаборЗаписей = Неопределено;
					Если Не НаборыЗаписей.Свойство(ИмяКоллекцииРегистров+Регистр.Имя, НаборЗаписей) Тогда
						НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
						
					Иначе
						НаборЗаписей.Очистить();
					КонецЕсли;
					
					НаборЗаписей.Отбор.Регистратор.Установить(Ссылка.Данные);
					НаборЗаписей.Прочитать();
					
					НаборЗаписейИзменен = Ложь;
					
					Для каждого Запись из НаборЗаписей Цикл
						Измерения = Регистр["Измерения"];
						Для каждого Измерение из Измерения Цикл
							Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
								Балансовый = Измерение.Балансовый;
								
							Иначе
								Балансовый = Истина;
							КонецЕсли;
							
							Если Балансовый Тогда
								ЗаменаСсылкиНаОбъект(Запись, Измерение.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
								
							Иначе
								ЗаменаСсылкиНаОбъект(Запись, Измерение.Имя+"Дт", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
								ЗаменаСсылкиНаОбъект(Запись, Измерение.Имя+"Кт", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
							КонецЕсли;
						КонецЦикла;
						
						Реквизиты = Регистр["Реквизиты"];
						Для каждого Реквизит из Реквизиты Цикл
							ЗаменаСсылкиНаОбъект(Запись, Реквизит.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
						КонецЦикла;
						
						Ресурсы = Регистр["Ресурсы"];
						Для каждого Ресурс из Ресурсы Цикл
							Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
								Балансовый = Ресурс.Балансовый;
								
							Иначе
								Балансовый = Истина;
							КонецЕсли;
							
							Если Балансовый Тогда
								ЗаменаСсылкиНаОбъект(Запись, Ресурс.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
								
							Иначе
								ЗаменаСсылкиНаОбъект(Запись, Ресурс.Имя+"Дт", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
								ЗаменаСсылкиНаОбъект(Запись, Ресурс.Имя+"Кт", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
							КонецЕсли;
						КонецЦикла;
						
						Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
							Если Регистр.Корреспонденция Тогда
								
								ЗаменаСсылкиНаОбъект(Запись, "СчетДт", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
								ЗаменаСсылкиНаОбъект(Запись, "СчетКт", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
								ЗаменаСсылкиНаСубконто(Запись.СубконтоДт, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
								ЗаменаСсылкиНаСубконто(Запись.СубконтоКт, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
								
							Иначе
								ЗаменаСсылкиНаОбъект(Запись, "Счет", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
								ЗаменаСсылкиНаСубконто(Запись.Субконто, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если НаборЗаписейИзменен Тогда
						НаборЗаписей.ОбменДанными.Загрузка = Истина;
						НаборЗаписей.Записать();
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			
			// Владельцы
			Если ИмяКоллекцииОбъектовМД = "Справочник" Тогда
				ЗаменаСсылкиНаОбъект(Объект, "Владелец", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен);
			КонецЕсли;
			
			// Родители
			Если (ИмяКоллекцииОбъектовМД = "Справочник") или
				(ИмяКоллекцииОбъектовМД = "ПланВидовХарактеристик") или
				(ИмяКоллекцииОбъектовМД = "ПланСчетов") Тогда
				
				ЗаменаСсылкиНаОбъект(Объект, "Родитель", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен); 
			КонецЕсли;
			
			Если ОбъектИзменен Тогда
				Попытка
					Объект.ОбменДанными.Загрузка = Истина;
					Объект.Записать();
					Состояние("Обработан объект <" + Ссылка.Данные + ">");
					
				Исключение
					Сообщить(
					"Объект не обработан автоматически: " + ИмяКоллекцииОбъектовМД + " <" + Ссылка.Метаданные.Синоним + "> <" + Ссылка.Данные + ">. 
					|	Необходимо вручную заменить значение " + Ссылка.Ссылка + " на " + НоваяСсылка, СтатусСообщения.ОченьВажное);
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		Состояние("");
		
	КонецПроцедуры // ЗаменаСсылокНаОбъект()
	
	
	// Замена ссылок на неиспользующиеся счета при обновлении ПС на 2008-ой год
	//
	Процедура ЗаменаСсылокНаНеиспользующиесяСчетаПС2008()
		
		СписокЗаменяемыхОбъектов = Новый СписокЗначений;
		СписокНовыхОбъектов = Новый СписокЗначений;
		
		СписокЗаменяемыхОбъектов.Добавить(ПланыСчетов.Типовой.УдалитьДенежныеСредстваВКассеВВалюте);
		СписокНовыхОбъектов.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваВКассе);
		
		СписокЗаменяемыхОбъектов.Добавить(ПланыСчетов.Типовой.УдалитьДенежныеСредстваНаТекущихБанковскихСчетахВВалюте);
		СписокНовыхОбъектов.Добавить(ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах);
		
		
		ЗаменаСсылокНаОбъекты(СписокЗаменяемыхОбъектов, СписокНовыхОбъектов);
		
	КонецПроцедуры // ЗаменаСсылокНаНеиспользующиесяСчета()
	
	///////////////////////////////////////////////////////////////////////
	// ПРОЦЕДУРЫ ОБНОВЛЕНИЯ НА ВЕРСИЮ 1.5.5
	
	
	//Процедура заполнения справочника "ВидыПервичныхДокументов"
	//
	Процедура ЗаполнениеСправочникаВидыПервичныхДокументовНачальнымиДанными()
		
		Сообщить("-----------------------");
		Сообщить("Заполнение справочника ""Виды первичных документов""");
		Сообщить("-----------------------");
		
		НовыйЭлемент = Справочники.ВидыПервичныхДокументов.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Расходная накладная";
		НовыйЭлемент.Записать();
		
		НовыйЭлемент = Справочники.ВидыПервичныхДокументов.СоздатьЭлемент();
		НовыйЭлемент.Наименование = "Товарный чек";
		НовыйЭлемент.Записать();
		
	КонецПроцедуры
	
	// Заполнение реквизитов справочника "Корреспонденции счетов"
	// в версии 1.5.13
	Процедура ЗаполнитьСправочникКорреспонденций() Экспорт
		
		#Если Клиент Тогда
			Состояние("Выполняется заполнение справочника корреспонденций счетов");
		#КонецЕсли
		
		Макет = Справочники.КорреспонденцииСчетов.ПолучитьМакет("Макет");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КорреспонденцииСчетов.Код
		|ИЗ
		|	Справочник.КорреспонденцииСчетов КАК КорреспонденцииСчетов";
		ВсеКорреспонденции = Запрос.Выполнить().Выгрузить();
		
		НомерСтроки=1;
		Пока Истина Цикл
			
			Номер = Макет.область(НомерСтроки,1).Текст;
			Если НЕ ЗначениеЗаполнено(Номер) Тогда
				//Т.е. если прочли весь макет
				Прервать;
			КонецЕсли;
			
			НайденСуществующий = ВсеКорреспонденции.Найти(формат(Число(Номер),"ЧЦ=9; ЧВН=; ЧГ="));
			Если Не ЗначениеЗаполнено(НайденСуществующий) Тогда
				НовыйСпр = Справочники.КорреспонденцииСчетов.СоздатьЭлемент();
				НовыйСпр.СчетДт = ПланыСчетов.Типовой.НайтиПоКоду(Макет.область(НомерСтроки,3).Текст);
				НовыйСпр.СчетКт = ПланыСчетов.Типовой.НайтиПоКоду(Макет.область(НомерСтроки,4).Текст);
				НовыйСпр.Содержание 			= Макет.область(НомерСтроки,2).Текст;
				НовыйСпр.ТипДокумента 			= Макет.область(НомерСтроки,5).Текст;
				НовыйСпр.ВидОперацииДокумента 	= Макет.область(НомерСтроки,6).Текст;
				НовыйСпр.ЗакладкаДокумента 		= Макет.область(НомерСтроки,7).Текст;
				НовыйСпр.Меню 					= Макет.область(НомерСтроки,8).Текст;
				НовыйСпр.Код 					= формат(Число(Номер),"ЧЦ=9; ЧВН=; ЧГ=");
				НовыйСпр.Записать();
			КонецЕсли;
			НомерСтроки = НомерСтроки+1;
			
		КонецЦикла;
		
		#Если Клиент Тогда
			Состояние("Заполнение справочника корреспонденций счетов выполнено");
		#КонецЕсли
		
	КонецПроцедуры
	
	// Выполняет заполнение регистра сведений "СведенияОСтавкахИПНиСН"
	//
	Процедура ЗаполнитьСведенияОСтавкахИПНиСН() 
		
		// ----------------------------------------------------------------------------
		// 2005 год
		
		НаборЗаписей = РегистрыСведений.СведенияОСтавкахИПНиСН.СоздатьНаборЗаписей();
		НаборЗаписей.ЗаписьИзФормыНабораЗаписей = Истина;
		НаборЗаписей.Отбор.ВидСтавокИПНиСН.Использование = Истина;
		НаборЗаписей.Отбор.Период.Использование = Истина;
		
		Период = Дата(2005, 1, 1);
		НаборЗаписей.Отбор.Период.Значение = Период;
		
		// ИПН
		НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН;
		
		// до 174780
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 1, 
		0,	174780, 5);
		
		// до 466080
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 2, 
		174780, 466080,  8);
		
		// до 2330400
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 3, 
		466080, 2330400,  13);
		
		// до 6991200
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 4, 
		2330400, 6991200,  15);
		
		// свыше 6991200
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН, 5, 
		6991200, 9999999999,  20);
		
		НаборЗаписей.Записать();
		
		// СН за работников
		НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК;
		НаборЗаписей.Очистить();
		
		// до 174780
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 1, 
		0,	174780, 20);
		
		// до 466080
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 2, 
		174780, 466080,  15);
		
		// до 2330400
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 3, 
		466080, 2330400,  12);
		
		// до 6991200
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 4, 
		2330400, 6991200,  9);
		
		// свыше 6991200
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК, 5, 
		6991200, 9999999999,  7);
		
		НаборЗаписей.Записать();
		
		// СН за иностранных специалистов
		НаборЗаписей.Отбор.ВидСтавокИПНиСН.Значение = Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов;
		НаборЗаписей.Очистить();
		
		// до 466080
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 1, 
		0, 466080,  11);
		
		// до 2330400
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 2, 
		466080, 2330400,  9);
		
		// до 6991200
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 3, 
		2330400, 6991200,  7);
		
		// свыше 6991200
		ДобавитьЗначенияСтавокИПНиСН(НаборЗаписей, Период, Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов, 4, 
		6991200, 9999999999,  5);
		
		НаборЗаписей.Записать();
		
		
		// 2006 год
		ЗаполнитьСведенияОСтавкахИПНиСН2006();
		
		// 2007 год
		ЗаполнитьСведенияОСтавкахИПНиСН2007();
		
		// 2008 год
		ЗаполнитьСведенияОСтавкахИПНиСН2008();
		
	КонецПроцедуры
	
	
	// Функция создает элемент план видов харакетристик, если такого нет.
	//
	// Параметры:
	//  Код -                     - значение соответствующего реквизита
	//  Наименование              - значение соответствующего реквизита
	//  ТипЗначения		          - значение соответствующего реквизита
	//
	// Возвращаемое значение:
	//  Ссылка на добавленный или существующий элемент.
	//
	Функция НайтиСоздатьПВХ(Код, Наименование, ТипЗначения) Экспорт
		
		Ссылка = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду(Код);
		
		Если Ссылка.Пустая() Тогда
			ПВХ = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
			Ссылка = ПВХ.Ссылка;
		Иначе 
			ПВХ = Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		ПВХ.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица;
		ПВХ.Наименование = Наименование;
		ПВХ.Код = Код;
		ПВХ.ТипЗначения = ТипЗначения;
		ПВХ.Записать();
		
		Возврат Ссылка;
		
	КонецФункции // НайтиСоздатьПВХ()
	
	// Функция выполняет начальное заполнение информационной базы.
	//
	// Параметры:
	//  ДокументОписаниеОбновлений - табличный документ, в который выводится описание обновлений.
	//  МакетОписаниеОбновлений    - макет "ОписаниеОбновлений" с заполненными параметрами.
	//
	// Возвращаемое значение:
	//  Функция возвращает номер первой коммерческой версии конфигурации.
	//
	Функция ЗаполнитьПустуюИБ_БК(ДокументОписаниеОбновлений, МакетОписаниеОбновлений, ВыполнятьНеобязательноеЗаполнение)
		
		// Обязательное начальное заполнение информационной базы.
		
		// Заполнение справочника "Валюты"
		ВалютаРегламентированногоУчета = НайтиСоздатьВалюту("398", "KZT", "Казахстанский тенге", "тенге, тенге, тенге, м, тиын, тиын, тиын, м, 2");
		ВалютаУправленческогоУчета     = НайтиСоздатьВалюту("840", "USD", "Доллар США",       "доллар, доллара, долларов, м, цент, цента, центов, м, 2");
		ВалютаМеждународногоУчета      = НайтиСоздатьВалюту("978", "EUR", "Евро"      ,       "евро, евро, евро, м, цент, цента, центов, м, 2");
		
		// Заполнение справочника "Организации"
		Организация = Справочники.Организации.НайтиПоНаименованию("Укажите наименование Вашей организации");
		Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
			Организация = Справочники.Организации.СоздатьЭлемент();
			Организация.Наименование		= "Укажите наименование Вашей организации";
			Организация.Записать();
		КонецЕсли;
		ОрганизацияПервоначальногоЗаполнения = Организация.Ссылка;
		
		// Заполнение сведений бухгалтерского и налогового учета.
		ЗаполнитьРегистрыСчетовУчета();
		УставновитьПараметрыСчетовБУиНУ();
		
		// Граница запрета изменения данных
		УстановитьДатуЗапретаРедактирования('19800101');
		
		// Заполнение данных для механизма контактной информации
		ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию();
		ЗаполнитьСправочникВидыКонтактнойИнформации();
		
		// Залполним данные для отправки почтовых сообщений в службу технической поддержки
		ЗаполнитьПараметрыКонстантыОбращенияВОтделТехническойПоддержки();
		
		// Заполнение справочника НалогиСборыОтчисления и регистра ставок
		ЗаполнитьНалогиСборыОтчисления();
		ЗаполнитьКоэффициентыСтавкиРефинансированияНБДляРасчетаПени();
		ЗаполнитьСрокиПеречисленияНалоговСборовОтчислений();
		
		// Обязательное начальное заполнение информационной базы для торгового учета.
		
		УстановитьКонстанту("ВалютаРегламентированногоУчета",     ВалютаРегламентированногоУчета);
		УстановитьКонстанту("ВалютаУправленческогоУчета", 		  ВалютаУправленческогоУчета);
		УстановитьКонстанту("ИспользованиеВстроенногоПочтовогоКлиента", Истина);
		
		//заполним признак "Учет ВР" в плане счетов "Налоговый" по умолчанию для
		//счетов, в которых автоматизирована "замкнутая" схема
		ЗаполнитьПризнакУчетВРВПланеСчетовНалоговый();
		
		//Заполним реквизит "Счет НУ"  плана счетов "Типовой" соответсвием из макета 
		//документа "Установка соответсвия счетов БУ и НУ"
		ЗаполнитьСоответствиеСчетовБУиНУпоУмолчанию();
		
		// Производственный учет
		ЗаполнитьСоответствиеСчетовПроизводстваСчетамНезавершенногоПроизводства();
		
		//Заполняем сведения по УчетнаяПолитикаБухгалтерскийУчет Организации 
		//Заполняем сведения по УчетнаяПолитикаНалоговыйУчет Организации 
		ЗаполнитьРегистрыУчетнойПолитикиПоУмолчанию(Организация.Ссылка);	
		
		УстановитьНовыеКодыНеПредопределеннымЭлементамСправочника("ДвиженияДенежныхСредств");	
		
		// Не обязательное заполнение ИБ
		ТекстВопроса = "Произвести первоначальное заполнение информационной базы?";
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ЗаполнитьСоответствиеСчетовБУиНУ('19800101');		
			
			// Заполнение справочника "Кассы"
			Касса = Справочники.Кассы.НайтиПоНаименованию("Основная касса");
			Если Касса = Справочники.Кассы.ПустаяСсылка() Тогда
				Касса = Справочники.Кассы.СоздатьЭлемент();
				Касса.Владелец 				= Организация.Ссылка;
				Касса.Наименование          = "Основная касса";
				Касса.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета;
				Касса.Записать();
			КонецЕсли;
			
			// Заполнение справочника "ПодразделенияОрганизаций"
			Подразделение = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Основное подразделение");
			Если Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка() Тогда
				Подразделение               = Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();
				Подразделение.Владелец      = Организация.Ссылка;
				Подразделение.Наименование  = "Основное подразделение";
				Подразделение.Записать();
			КонецЕсли;
			
			// Заполнение реквизитов справочника "ВидыРеализации"
			ВидРеализации = Справочники.ВидыРеализации.ВозвратТМЗ.ПолучитьОбъект();
			ВидРеализации.ПолноеНаименование   = ВидРеализации.Наименование;
			ВидРеализации.ПризнакКорректировки = Истина;
			ВидРеализации.Записать();
			
			ВидРеализации = Справочники.ВидыРеализации.РеализацияТМЗ.ПолучитьОбъект();
			ВидРеализации.ПолноеНаименование   = ВидРеализации.Наименование;
			ВидРеализации.ПризнакКорректировки = Ложь;
			ВидРеализации.Записать();
			
			// Заполнение реквизитов справочника "ВидыПоступления"
			ВидПоступления = Справочники.ВидыПоступления.ВозвратТМЗ.ПолучитьОбъект();
			ВидПоступления.ПолноеНаименование   = ВидРеализации.Наименование;
			ВидПоступления.ПризнакКорректировки = Истина;
			ВидПоступления.Записать();
			
			ВидПоступления = Справочники.ВидыПоступления.ПриобретениеТМЗ.ПолучитьОбъект();
			ВидПоступления.ПолноеНаименование   = ВидРеализации.Наименование;
			ВидПоступления.ПризнакКорректировки = Ложь;
			ВидПоступления.Записать();
			
			// Заполнение справочника "Склады"
			Склад = Справочники.Склады.НайтиПоНаименованию("Основной склад");
			Если Склад = Справочники.Склады.ПустаяСсылка() Тогда
				Склад = Справочники.Склады.СоздатьЭлемент();
				Склад.Наименование  = "Основной склад";
				Склад.Комментарий   = "Основной склад организации";
				Склад.Записать();
			КонецЕсли;
			
			// Заполнение реквизитов справочника "СтатьиЗатрат"
			СтатьяЗатрат = Справочники.СтатьиЗатрат.КурсовыеРазницы.ПолучитьОбъект();
			СтатьяЗатрат.КатегорияЗатрат   			= 	Перечисления.КатегорииЗатрат.ПрочиеРасходы;
			СтатьяЗатрат.ПринятиеКНалоговомуУчету	=	Истина;
			СтатьяЗатрат.ВидРасходовНУ				=	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
			СтатьяЗатрат.Записать();
			
			СтатьяЗатрат = Справочники.СтатьиЗатрат.НДСНеПринятыйКЗачету.ПолучитьОбъект();
			СтатьяЗатрат.КатегорияЗатрат   			= Перечисления.КатегорииЗатрат.ПрочиеРасходы;
			СтатьяЗатрат.ПринятиеКНалоговомуУчету	=	Истина;
			СтатьяЗатрат.ВидРасходовНУ				=	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
			СтатьяЗатрат.Записать();
			
			СтатьяЗатрат = Справочники.СтатьиЗатрат.ПеняПоОПВ.ПолучитьОбъект();
			СтатьяЗатрат.КатегорияЗатрат   			= Перечисления.КатегорииЗатрат.ПрочиеРасходы;
			СтатьяЗатрат.ПринятиеКНалоговомуУчету	=	Истина;
			СтатьяЗатрат.ВидРасходовНУ				=	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
			СтатьяЗатрат.Записать();
			
			СтатьяЗатрат = Справочники.СтатьиЗатрат.ПеняПоСО.ПолучитьОбъект();
			СтатьяЗатрат.КатегорияЗатрат   			= Перечисления.КатегорииЗатрат.ПрочиеРасходы;
			СтатьяЗатрат.ПринятиеКНалоговомуУчету	=	Истина;
			СтатьяЗатрат.ВидРасходовНУ				=	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
			СтатьяЗатрат.Записать();
			
			СтатьяЗатрат = Справочники.СтатьиЗатрат.ПеняПоОППВ.ПолучитьОбъект();
			СтатьяЗатрат.КатегорияЗатрат   			= Перечисления.КатегорииЗатрат.ПрочиеРасходы;
			СтатьяЗатрат.ПринятиеКНалоговомуУчету	=	Истина;
			СтатьяЗатрат.ВидРасходовНУ				=	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
			СтатьяЗатрат.Записать();
			
			СтатьяЗатрат = Справочники.СтатьиЗатрат.РасходыПриОбменеВалюты.ПолучитьОбъект();
			СтатьяЗатрат.КатегорияЗатрат   			= Перечисления.КатегорииЗатрат.ПрочиеРасходы;
			СтатьяЗатрат.ПринятиеКНалоговомуУчету	=	Истина;
			СтатьяЗатрат.ВидРасходовНУ				=	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
			СтатьяЗатрат.Записать();
			
			СтатьяЗатрат = Справочники.СтатьиЗатрат.СоциальныеОтчисления.ПолучитьОбъект();
			СтатьяЗатрат.КатегорияЗатрат   = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
			СтатьяЗатрат.ПринятиеКНалоговомуУчету	=	Истина;
			СтатьяЗатрат.ВидРасходовНУ				=	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
			СтатьяЗатрат.Записать();
			
			СтатьяЗатрат = Справочники.СтатьиЗатрат.ОбязательныеПрофессиональныеПенсионныеВзносы.ПолучитьОбъект();
			СтатьяЗатрат.КатегорияЗатрат   			= Перечисления.КатегорииЗатрат.ПрочиеРасходы;
			СтатьяЗатрат.ПринятиеКНалоговомуУчету	=	Истина;
			СтатьяЗатрат.ВидРасходовНУ				=	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
			СтатьяЗатрат.Записать();
			
			СтатьяЗатрат = Справочники.СтатьиЗатрат.СоциальныйНалог.ПолучитьОбъект();
			СтатьяЗатрат.КатегорияЗатрат   = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
			СтатьяЗатрат.ПринятиеКНалоговомуУчету	=	Истина;
			СтатьяЗатрат.ВидРасходовНУ				=	Справочники.ВидыРасходовНУ.НалогиВГосБюджет;
			СтатьяЗатрат.Записать();
			
			СтатьяЗатрат = Справочники.СтатьиЗатрат.АмортизацияФА.ПолучитьОбъект();
			СтатьяЗатрат.ПринятиеКНалоговомуУчету = Истина;
			СтатьяЗатрат.КатегорияЗатрат = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
			СтатьяЗатрат.ВидРасходовНУ	 = Справочники.ВидыРасходовНУ.Амортизация; 
			СтатьяЗатрат.Записать();
			
			СтатьяЗатрат = Справочники.СтатьиЗатрат.СписаниеПриВыбытииВсехФАГруппы.ПолучитьОбъект();
			СтатьяЗатрат.ПринятиеКНалоговомуУчету = Истина;
			СтатьяЗатрат.КатегорияЗатрат = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
			СтатьяЗатрат.ВидРасходовНУ	 = Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет; 
			СтатьяЗатрат.Записать();
			
			СтатьяЗатрат = Справочники.СтатьиЗатрат.СписаниеСтоимостногоБалансаГруппыМенееМинимума.ПолучитьОбъект();
			СтатьяЗатрат.ПринятиеКНалоговомуУчету = Истина;
			СтатьяЗатрат.КатегорияЗатрат = Перечисления.КатегорииЗатрат.ПрочиеРасходы;
			СтатьяЗатрат.ВидРасходовНУ	 = Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет; 
			СтатьяЗатрат.Записать();
			
			СтатьяЗатрат = Справочники.СтатьиЗатрат.РасходыПоПереоценкеВнеоборотныхАктивов.ПолучитьОбъект();
			СтатьяЗатрат.ПринятиеКНалоговомуУчету = Ложь;
			СтатьяЗатрат.КатегорияЗатрат = Перечисления.КатегорииЗатрат.ПрочиеРасходы;		
			СтатьяЗатрат.Записать();
			
			СтатьяЗатрат = Справочники.СтатьиЗатрат.РасходыПоНалогуНаПрибыль.ПолучитьОбъект();
			СтатьяЗатрат.ПринятиеКНалоговомуУчету = Ложь;
			СтатьяЗатрат.КатегорияЗатрат = Перечисления.КатегорииЗатрат.ПрочиеРасходы;		
			СтатьяЗатрат.Записать();
			
			СтатьяЗатрат = Справочники.СтатьиЗатрат.УсловныеРасходыПоНалогуНаПрибыль.ПолучитьОбъект();
			СтатьяЗатрат.ПринятиеКНалоговомуУчету = Ложь;
			СтатьяЗатрат.КатегорияЗатрат = Перечисления.КатегорииЗатрат.ПрочиеРасходы;		
			СтатьяЗатрат.Записать();
			
			СтатьяЗатрат = Справочники.СтатьиЗатрат.СписаниеСтоимостиОбъектаПреференций.ПолучитьОбъект();
			СтатьяЗатрат.КатегорияЗатрат   			= 	Перечисления.КатегорииЗатрат.ПрочиеРасходы;
			СтатьяЗатрат.ПринятиеКНалоговомуУчету	=	Истина;
			СтатьяЗатрат.ВидРасходовНУ				=	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
			СтатьяЗатрат.Записать();
			
			СтатьяЗатрат = Справочники.СтатьиЗатрат.УменьшениеВычетаПоПР.ПолучитьОбъект();
			СтатьяЗатрат.КатегорияЗатрат   			= 	Перечисления.КатегорииЗатрат.ПрочиеРасходы;
			СтатьяЗатрат.ПринятиеКНалоговомуУчету	=	Истина;
			СтатьяЗатрат.ВидРасходовНУ				=	Справочники.ВидыРасходовНУ.ПрочиеРасходыНаВычет;
			СтатьяЗатрат.Записать();
			
			// Заполнение справочника "ТипыЦенНоменклатуры"
			// Приходная
			ТипЦены = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию("Приходная");
			Если ТипЦены = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка() Тогда
				ТипЦены = Справочники.ТипыЦенНоменклатуры.СоздатьЭлемент();
				ТипЦены.Наименование          = "Приходная";
				ТипЦены.ВалютаЦены            = ВалютаРегламентированногоУчета;
				ТипЦены.ЦенаВключаетНДС       = Истина;
				ТипЦены.ПорядокОкругления     = Перечисления.ПорядкиОкругления.Окр0_01;
				ТипЦены.ОкруглятьВБольшуюСторону = Истина;
				ТипЦены.Комментарий = "Приходная цена";
				ТипЦены.Записать();
			КонецЕсли;
			// Оптовая
			ТипЦены = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию("Оптовая");
			Если ТипЦены = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка() Тогда
				ТипЦены = Справочники.ТипыЦенНоменклатуры.СоздатьЭлемент();
				ТипЦены.Наименование          = "Оптовая";
				ТипЦены.ВалютаЦены            = ВалютаРегламентированногоУчета;
				ТипЦены.ЦенаВключаетНДС       = Истина;
				ТипЦены.ПорядокОкругления     = Перечисления.ПорядкиОкругления.Окр1;
				ТипЦены.ОкруглятьВБольшуюСторону = Истина;
				ТипЦены.Комментарий = "Оптовая цена";
				ТипЦены.Записать();
			КонецЕсли;
			// Розничная
			ТипЦены = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию("Розничная");
			Если ТипЦены = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка() Тогда
				ТипЦены = Справочники.ТипыЦенНоменклатуры.СоздатьЭлемент();
				ТипЦены.Наименование          = "Розничная";
				ТипЦены.ВалютаЦены            = ВалютаРегламентированногоУчета;
				ТипЦены.ЦенаВключаетНДС       = Истина;
				ТипЦены.ПорядокОкругления     = Перечисления.ПорядкиОкругления.Окр1;
				ТипЦены.ОкруглятьВБольшуюСторону = Истина;
				ТипЦены.Комментарий = "Розничная цена";
				ТипЦены.Записать();
			КонецЕсли;
			
			// Заполнение справочника "СтавкиНДС"
			НайтиСоздатьСтавкуНДС("12%", 12);
			НайтиСоздатьСтавкуНДС("0%" , 0);
			НайтиСоздатьСтавкуНДС("без НДС", 0, Истина, Ложь);
			НайтиСоздатьСтавкуНДС("без НДС - не РК", 0, Ложь, Истина);
			
			// Заполнение справочника "КлассификаторЕдиницИзмерения"
			ЕдиницаИзмеренияВеса = НайтиСоздатьЕдиницу("166", "кг", "Килограмм");
			ЕдиницаПоУмолчанию   = НайтиСоздатьЕдиницу("796", "шт", "Штука");
			
			ЭСФСерверПереопределяемый.ЗаполнитьКодыЭСФЕдиницИзмерения();
			
			// Вид операции облагаемой акцизом по умолчанию
			ВидОперацииОблагаемойАкцизом = Справочники.ВидыОперацийОблагаемыхАкцизом.Реализация;
			
			//------
			// пропишем эти значения по умолчанию текущему пользователю
			УстановитьЗначенияПоУмолчаниюДляТекущегоПользователя(ВалютаРегламентированногоУчета, ЕдиницаПоУмолчанию, Касса, Организация, Подразделение, ВидРеализации, ВидПоступления, Склад, ТипЦены, ВидОперацииОблагаемойАкцизом);
			ЗаполнитьСправочникНоменклатура();
			
		КонецЕсли;
		
		// Установим тип материала в справочнике ВидыНоменклатуры
		ВидНоменклатуры 	= Справочники.ВидыНоменклатуры.ГотоваяПродукция.ПолучитьОбъект();
		ВидНоменклатуры.ГруппаТМЗ = Перечисления.ГруппыТМЗ.ГотоваяПродукция;	
		ВидНоменклатуры.Записать();
		
		ВидНоменклатуры 	= Справочники.ВидыНоменклатуры.Прочее.ПолучитьОбъект();
		ВидНоменклатуры.ГруппаТМЗ = Перечисления.ГруппыТМЗ.Прочее;	
		ВидНоменклатуры.Записать();
		
		ВидНоменклатуры 	= Справочники.ВидыНоменклатуры.ПрочиеТовары.ПолучитьОбъект();
		ВидНоменклатуры.ГруппаТМЗ = Перечисления.ГруппыТМЗ.ПрочиеТовары;	
		ВидНоменклатуры.Записать();
		
		ВидНоменклатуры 	= Справочники.ВидыНоменклатуры.СырьеИМатериалы.ПолучитьОбъект();
		ВидНоменклатуры.ГруппаТМЗ = Перечисления.ГруппыТМЗ.СырьеИМатериалы;	
		ВидНоменклатуры.Записать();
		
		ВидНоменклатуры 	= Справочники.ВидыНоменклатуры.ТоварыПриобретенные.ПолучитьОбъект();
		ВидНоменклатуры.ГруппаТМЗ = Перечисления.ГруппыТМЗ.ТоварыПриобретенные;	
		ВидНоменклатуры.Записать();
		
		ВидНоменклатуры 	= Справочники.ВидыНоменклатуры.Топливо.ПолучитьОбъект();
		ВидНоменклатуры.ГруппаТМЗ = Перечисления.ГруппыТМЗ.Топливо;	
		ВидНоменклатуры.Записать();
		
		// Заполнение справочника "Классификатор стран мира"
		НачальноеЗаполнениеСправочникаКлассификаторСтранМира();
		
		ЗаполнениеОтраженияНачисленийПоУмолчанию();	
		
		// Заполнение справочника Корреспонденций
		ЗаполнитьСправочникКорреспонденций();		
		
		// Заполнение групп налогового учета
		ЗаполнитьСведенияОГруппахФАНУ();
		
		// Заполнение данных о способах отражения курсовой разницы
		Набор = РегистрыСведений.СпособыОтраженияКурсовойРазницы.СоздатьНаборЗаписей();		
		Набор.Отбор.Организация.Значение      = Справочники.Организации.ПустаяСсылка();
		Набор.Отбор.Организация.Использование = Истина;
		Набор.Отбор.Счет.Значение      = ПланыСчетов.Типовой.ПустаяСсылка();
		Набор.Отбор.Счет.Использование = Истина;
		
		Запись = Набор.Добавить();
		Запись.СчетДоходовБУ  		= ПланыСчетов.Типовой.ДоходыОтКурсовойРазницы;
		Запись.СубконтоДоходовБУ1 	= Справочники.Доходы.КурсовыеРазницы;
		Запись.СчетДоходовНУ  		= ПланыСчетов.Налоговый.ДоходОтКурсовойРазницы;
		Запись.СубконтоДоходовНУ1 	= Справочники.Доходы.КурсовыеРазницы;
		
		Запись.СчетРасходовБУ 		= ПланыСчетов.Типовой.РасходыПоКурсовойРазнице;
		Запись.СубконтоРасходовБУ1	= Справочники.СтатьиЗатрат.КурсовыеРазницы;
		Запись.СчетРасходовНУ 		= ПланыСчетов.НАлоговый.РасходыПоКурсовойРазнице;
		Запись.СубконтоРасходовНУ1	= Справочники.СтатьиЗатрат.КурсовыеРазницы;
		Набор.Записать();
		
		ЗаполнениеСправочникаВидыПервичныхДокументовНачальнымиДанными();
		// Заполнение реквизитов предопределенных элементов в справочнике СтраныУчастникиТС
		СтранаТС = Справочники.СтраныУчастникиТаможенногоСоюза.Россия.ПолучитьОбъект();
		СтранаТС.ВидНДСПриИмпорте  = Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьИмпортРФ;
		СтранаТС.Записать();
		
		СтранаТС = Справочники.СтраныУчастникиТаможенногоСоюза.Беларусь.ПолучитьОбъект();
		СтранаТС.ВидНДСПриИмпорте  = Справочники.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьИмпортРБ;
		СтранаТС.Записать();	
		
		ОбработкаВыгрузкиВXMLЗаявленияОВвозеТоваров = Справочники.ВнешниеОбработки.ОбработкаВыгрузкиВXMLЗаявленияОВвозеТоваров.ПолучитьОбъект();
		ОбработкаВыгрузкиВXMLЗаявленияОВвозеТоваров.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
		ОбработкаВыгрузкиВXMLЗаявленияОВвозеТоваров.ВнешнийОбъектИспользовать = Ложь;
		Попытка
			ОбработкаВыгрузкиВXMLЗаявленияОВвозеТоваров.ОбменДанными.Загрузка = Истина;
			ОбработкаВыгрузкиВXMLЗаявленияОВвозеТоваров.Записать();
		Исключение
			Сообщить(" при записи элемента справочника Внешние обработки произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		ОбработкаФормированияSWIFTФайла = Справочники.ВнешниеОбработки.ОбработкаФормированияSWIFTФайла.ПолучитьОбъект();
		ОбработкаФормированияSWIFTФайла.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
		ОбработкаФормированияSWIFTФайла.ВнешнийОбъектИспользовать = Ложь;
		Попытка
			ОбработкаФормированияSWIFTФайла.ОбменДанными.Загрузка = Истина;
			ОбработкаФормированияSWIFTФайла.Записать();
		Исключение
			Сообщить(" при записи элемента справочника Внешние обработки произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		ОбработкаОбменЭСФ = Справочники.ВнешниеОбработки.ОбработкаОбменЭСФ.ПолучитьОбъект();
		ОбработкаОбменЭСФ.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
		ОбработкаОбменЭСФ.ВнешнийОбъектИспользовать = Ложь;
		Попытка
			ОбработкаОбменЭСФ.ОбменДанными.Загрузка = Истина;
			ОбработкаОбменЭСФ.Записать();
		Исключение
			Сообщить(" при записи элемента справочника Внешние обработки произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		
		ОбработкаПомощникПерехода = Справочники.ВнешниеОбработки.ОбработкаПомощникПереходаНаВедениеУчетаВРБалансовымМетодом.ПолучитьОбъект();
		ОбработкаПомощникПерехода.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
		ОбработкаПомощникПерехода.ВнешнийОбъектИспользовать = Ложь;
		Попытка
			ОбработкаПомощникПерехода.ОбменДанными.Загрузка = Истина;
			ОбработкаПомощникПерехода.Записать();
		Исключение
			Сообщить(" при записи элемента справочника Внешние обработки произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		ВестиУчетПоСотрудникам = Истина;
		
		Для каждого Счет Из мСчетаЗП Цикл
			Если ТипЗнч(Счет.Значение) = Тип("ПланСчетовСсылка.Налоговый") Тогда
				ИмяПланаСчетов = "Налоговый";
			Иначе
				ИмяПланаСчетов = "Типовой";
			КонецЕсли;
			ПрименитьПараметрыСубконтоРаботникиОрганизации(Счет.Значение, ИмяПланаСчетов, ВестиУчетПоСотрудникам, Ложь);
		КонецЦикла;
		
		// Установка признака запрета использования в проводках для удаляемых счетов
		Для Каждого СчетУдалить Из мСчетаНеИспользоватьВПроводках Цикл			
			СчетОбъект = СчетУдалить.Значение.ПолучитьОбъект();
			СчетОбъект.ЗапретитьИспользоватьВПроводках = Истина;
			СчетОбъект.Записать();
		КонецЦикла;
		
		
		ОбработкаКлиентБанк = Справочники.ВнешниеОбработки.ОбработкаКлиентБанк.ПолучитьОбъект();
		ОбработкаКлиентБанк.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
		ОбработкаКлиентБанк.ВнешнийОбъектИспользовать = Ложь;
		Попытка
			ОбработкаКлиентБанк.ОбменДанными.Загрузка = Истина;
			ОбработкаКлиентБанк.Записать();
		Исключение
			Сообщить(" при записи элемента справочника Внешние обработки произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		
		Сообщить("-----------------------");		                                  		
		Сообщить("Установка константы ""Дата прекращения вывода РНН в первичных документах"".");
		
		Константы.ДатаПрекращенияВыводаРННВПервичныхДокументах.Установить("20130101");
		
		Сообщить("Установка константы ""Дата прекращения вывода РНН в первичных документах"" выполнена успешно.");
		Сообщить("-----------------------");		                                  		
		
		
		Попытка
			Константы.МестоВыполненияКриптографическихОпераций.Установить(Перечисления.МестаВыполненияКриптографическихОпераций.НаСервере);
			Сообщить("Установка настройки ""Метод выполнения криптографических операций"".");
		Исключение
			Сообщить("Установка настройки ""Метод выполнения криптографических операций"" не выполнена.", СтатусСообщения.Внимание);
		КонецПопытки;
		
		ЭСФСервер.СохранитьПараметрыПодключенияКСерверуИСЭСФ(ЭСФСервер.ПустыеПараметрыПодключенияКСерверуИСЭСФ());
		
		
		
	КонецФункции // ЗаполнитьПустуюИБ_БК()
	
	
	// Функция выполняет обновление информационной базы с версии на версию.
	//
	// Параметры:
	//  ДокументОписаниеОбновлений - табличный документ, в который выводится описание обновлений.
	//  МакетОписаниеОбновлений    - макет "ОписаниеОбновлений" с заполненными параметрами.
	//
	// Возвращаемое значение:
	//  Функция возвращает тот номер версии, до которого выполнила обновление.
	//
	Процедура ЗаполнитьПустуюИБ_ЗУПК(ДокументОписаниеОбновлений = "", МакетОписаниеОбновлений = "", ВыполнятьНеобязательноеЗаполнение)
		
		ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений);	
		
	КонецПроцедуры // ЗаполнитьПустуюИБ_ЗУПК()
	
	
	Процедура СообщитьОСостоянииОбновления(Подсистема, Действие, Комментарий="", Уровень=0) Экспорт
		
		СтрокаТабуляций = "";
		Для ш = 1 По Уровень Цикл
			СтрокаТабуляций = СтрокаТабуляций + Символы.Таб;
		КонецЦикла;
		
		Сообщить(СтрокаТабуляций + Подсистема + ": " + Действие + ?(Комментарий = "","","(" + Комментарий + ")"),СтатусСообщения.Информация);
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ."+Подсистема, УровеньЖурналаРегистрации.Информация, , ,
		Действие + ?(Комментарий = "","","(" + Комментарий + ")"));
		
	КонецПроцедуры	
	
	///////////////////////////////////////////////////////////////////////
	// ПРОЦЕДУРЫ ОБНОВЛЕНИЯ НА ВЕРСИЮ 2.0.25  БК
	
	Процедура ЗаполнитьПризнакПроисхождения()
		
		//Заполненный код ТНВЭД 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НомераГТД.Ссылка,
		|	НомераГТД.СпособПроисхожденияТовара,
		|	НомераГТД.КодТНВЭД,
		|	НомераГТД.СтранаПроисхожденияТовара
		|ИЗ
		|	Справочник.НомераГТД КАК НомераГТД
		|ГДЕ
		|	НомераГТД.ПометкаУдаления = ЛОЖЬ
		|	И НомераГТД.ПризнакПроисхождения = """"
		|	И ВЫБОР
		|			КОГДА НомераГТД.СпособПроисхожденияТовара = ЗНАЧЕНИЕ(Перечисление.СпособыПроисхожденияТоваров.ПустаяСсылка)
		|					ИЛИ НомераГТД.СпособПроисхожденияТовара = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыПроисхожденияТоваров.СТ1)
		|				ТОГДА НомераГТД.КодТНВЭД <> """"
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
			
				ОбъектДляОбработки = Выборка.Ссылка.ПолучитьОбъект();
				Если ОбъектДляОбработки = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ПереченьИзъятий = ПолучитьПереченьИзъятий();
				
				ОбъектДляОбработки.ПризнакПроисхождения = ПолучитьПризнакПроисхождения(Выборка.СпособПроисхожденияТовара,
				Выборка.СтранаПроисхожденияТовара, ПереченьИзъятий.Найти(Выборка.КодТНВЭД) <> Неопределено);
				
				Если ОбъектДляОбработки.ПризнакПроисхождения = "" Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ОбъектДляОбработки.Записать();
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось обработать %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(), Выборка.Ссылка, ТекстСообщения);
				Сообщить(ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла;
		
		//Код ТНВЭД не заполнен остаток по регистру ТоварыОрганизацииБУ есть
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НомераГТД.Ссылка
		|ПОМЕСТИТЬ ВТ_Источники
		|ИЗ
		|	Справочник.НомераГТД КАК НомераГТД
		|ГДЕ
		|	НомераГТД.ПометкаУдаления = ЛОЖЬ
		|	И НомераГТД.ПризнакПроисхождения = """"
		|	И НомераГТД.КодТНВЭД = """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТоварыОрганизацийБУОстатки.Товар КАК Товар,
		|	ТоварыОрганизацийБУОстатки.НомерГТД
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизацийБУ.Остатки(
		|			&Дата,
		|			НомерГТД В
		|				(ВЫБРАТЬ
		|					Т.Ссылка
		|				ИЗ
		|					ВТ_Источники КАК Т)) КАК ТоварыОрганизацийБУОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.НомерГТД КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ТоварыСПониженнойСтавкойПошлин.Товар ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВПеречне,
		|	ВТ_Товары.НомерГТД.СтранаПроисхожденияТовара КАК СтранаПроисхожденияТовара,
		|	ВТ_Товары.НомерГТД.СпособПроисхожденияТовара КАК СпособПроисхожденияТовара
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыСПониженнойСтавкойПошлин КАК ТоварыСПониженнойСтавкойПошлин
		|		ПО ВТ_Товары.Товар = ТоварыСПониженнойСтавкойПошлин.Товар";
		
		Запрос.УстановитьПараметр("Дата", ТекущаяДата());
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				ОбъектДляОбработки = Выборка.Ссылка.ПолучитьОбъект();
				Если ОбъектДляОбработки = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ОбъектДляОбработки.ПризнакПроисхождения = ПолучитьПризнакПроисхождения(Выборка.СпособПроисхожденияТовара,
				Выборка.СтранаПроисхожденияТовара,Выборка.ВПеречне);
				
				Если ОбъектДляОбработки.ПризнакПроисхождения = "" Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ОбъектДляОбработки.Записать();
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось обработать %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(), Выборка.Ссылка, ТекстСообщения);
				
				Сообщить(ТекстСообщения);
				
			КонецПопытки;
			
		КонецЦикла;
		
		//Код ТНВЭД не заполнен остатков по регистру ТоварыОрганизацииБУ нет
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НомераГТД.Ссылка
		|ИЗ
		|	Справочник.НомераГТД КАК НомераГТД
		|ГДЕ
		|	НомераГТД.ПометкаУдаления = ЛОЖЬ
		|	И НомераГТД.ПризнакПроисхождения = """"";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				ОбъектДляОбработки = Выборка.Ссылка.ПолучитьОбъект();
				Если ОбъектДляОбработки = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ОбъектДляОбработки.ПризнакПроисхождения = "5";
				
				Если ОбъектДляОбработки.ПризнакПроисхождения = "" Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				ОбъектДляОбработки.Записать();
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось обработать %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(), Выборка.Ссылка, ТекстСообщения);
				
				Сообщить(ТекстСообщения);
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура ЗаполнитьНомерСтрокиГТД()
		
		ДатаПерехода = Константы.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ.Получить();
		Если ДатаПерехода <> Дата(1,1,1) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Ссылка КАК Ссылка,
			|	Товары.НомерГТД КАК НомерГТД
			|ПОМЕСТИТЬ ВТ_Товары
			|ИЗ
			|	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Товары КАК Товары
			|	
			|ГДЕ
			|	Товары.НомерГТД.НомерСтрокиГТД = """"
			|		И Товары.Ссылка.Дата >= &ДатаНачала
			|;
			|
			|//////////////////////////////////////////////////////////////////////////////// 1
			|ВЫБРАТЬ
			|	Товары.Ссылка КАК Ссылка,
			|	Товары.НомерГТД КАК НомерГТД
			|ПОМЕСТИТЬ ВТ_ОдинаковыеИсточники
			|ИЗ
			|	ВТ_Товары КАК Товары
			|
			|СГРУППИРОВАТЬ ПО
			|	Товары.Ссылка,
			|	Товары.НомерГТД
			|
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(Товары.НомерСтроки) > 1
			|;
			|
			|//////////////////////////////////////////////////////////////////////////////// 2
			|ВЫБРАТЬ
			|	Товары.Ссылка,
			|	Товары.НомерСтроки,
			|	Товары.НомерГТД
			|ИЗ
			|	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка.Дата >= &ДатаНачала
			|	И Товары.НомерГТД.НомерСтрокиГТД = """"
			|	И НЕ (Товары.Ссылка, Товары.НомерГТД) В
			|				(ВЫБРАТЬ
			|					Т.Ссылка,
			|					Т.НомерГТД
			|				ИЗ
			|					ВТ_ОдинаковыеИсточники КАК Т)
			|		
			|;
			|
			|//////////////////////////////////////////////////////////////////////////////// 3
			|ВЫБРАТЬ
			|	Товары.Ссылка КАК Ссылка,
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.НомерГТД КАК НомерГТД
			|ИЗ
			|	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка.Дата >= &ДатаНачала
			|	И Товары.НомерГТД.НомерСтрокиГТД = """"
			|	И (Товары.Ссылка, Товары.НомерГТД) В
			|			(ВЫБРАТЬ
			|				Т.Ссылка,
			|				Т.НомерГТД
			|			ИЗ
			|				ВТ_ОдинаковыеИсточники КАК Т)
			|ИТОГИ
			|	КОЛИЧЕСТВО(НомерСтроки)
			|ПО
			|	Ссылка,
			|	НомерГТД
			|;
			|
			|//////////////////////////////////////////////////////////////////////////////// 4
			|ВЫБРАТЬ
			|	Товары.Ссылка,
			|	Товары.НомерСтроки,
			|	Товары.НомерГТД,
			|	Товары.НомерГТД.НомерСтрокиГТД КАК НомерСтрокиГТД
			|ИЗ
			|	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка.Дата >= &ДатаНачала
			|	И Товары.НомерГТД.НомерСтрокиГТД <> """"";
			
			Запрос.УстановитьПараметр("ДатаНачала", ДатаПерехода);
			МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
			
			ВыборкаДляОбработки = МассивРезультатовЗапроса[2].Выбрать();
			ВыборкаПустыеПоДокументам = МассивРезультатовЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ВыборкаЗаполненные = МассивРезультатовЗапроса[4].Выбрать();
			
			Пока ВыборкаДляОбработки.Следующий() Цикл
				
				НачатьТранзакцию();
				
				Попытка
					
					ОбъектДляОбработки = ВыборкаДляОбработки.НомерГТД.ПолучитьОбъект();
					Если ОбъектДляОбработки = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
					
					ОбъектДляОбработки.НомерСтрокиГТД = Строка(ВыборкаДляОбработки.НомерСтроки);
					
					Если ОбъектДляОбработки.ПризнакПроисхождения = "" Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
					
					ОбъектДляОбработки.Записать();
					
					ЗафиксироватьТранзакцию();
					
				Исключение
					
					ОтменитьТранзакцию();
					ТекстСообщения = НСтр("ru = 'Не удалось обработать %Ссылка% по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаДляОбработки.НомерГТД);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Предупреждение,
					ВыборкаДляОбработки.НомерГТД.Метаданные(), ВыборкаДляОбработки.НомерГТД, ТекстСообщения);
					
					Сообщить(ТекстСообщения);
					
				КонецПопытки;
				
			КонецЦикла;
			
			Пока ВыборкаПустыеПоДокументам.Следующий() Цикл
				
				ВыборкаПустыеПоИсточникам = ВыборкаПустыеПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПустыеПоИсточникам.Следующий() Цикл
					ВыборкаПустые = ВыборкаПустыеПоИсточникам.Выбрать();
					НомераСтрок = "";
					Пока ВыборкаПустые.Следующий() Цикл
						НомераСтрок = НомераСтрок + + Строка(ВыборкаПустые.НомерСтроки)+ ",";
					КонецЦикла;
					Если НомераСтрок <> "" Тогда
						НомераСтрок = Лев(НомераСтрок,СтрДлина(НомераСтрок) - 1);
						ТекстСообщения = НСтр("ru = 'Не удалось обработать номер строки источника ""%НомерГТД%"" по причине: 
						|	источник присутствует в нескольких строках: ""%НомераСтрок%"" документа ""%Документ%""'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерГТД%", ВыборкаПустыеПоИсточникам.НомерГТД);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ВыборкаПустыеПоДокументам.Ссылка);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомераСтрок%", НомераСтрок);
						
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,
						ВыборкаПустыеПоИсточникам.НомерГТД.Метаданные(), ВыборкаПустыеПоИсточникам.НомерГТД, ТекстСообщения);
						
						Сообщить(ТекстСообщения);
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
			Пока ВыборкаЗаполненные.Следующий() Цикл
				
				Если ВыборкаЗаполненные.НомерСтроки <> Число(ВыборкаЗаполненные.НомерСтрокиГТД) Тогда
					ТекстСообщения = "Номер строки ""%НомерСтрокиГТД%"" источника ""%НомерГТД%"" не соответствует строке ""%НомерСтроки%"" заявления ""%Документ%";
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерГТД%", ВыборкаЗаполненные.НомерГТД);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтрокиГТД%", ВыборкаЗаполненные.НомерСтрокиГТД);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", ВыборкаЗаполненные.НомерСтроки);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ВыборкаЗаполненные.Ссылка);
					
					ЗаписьЖурналаРегистрации("Обновление информационной базы", УровеньЖурналаРегистрации.Ошибка,
					ВыборкаЗаполненные.НомерГТД.Метаданные(), ВыборкаЗаполненные.НомерГТД, ТекстСообщения);
					
					Сообщить(ТекстСообщения);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		
	КонецПроцедуры
	
	
	Процедура ОбновитьРегистрТоварыСПониженнойСтавкойПошлин()
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ТоварыСПониженнойСтавкойПошлин.Товар
		|ИЗ
		|	РегистрСведений.ТоварыСПониженнойСтавкойПошлин КАК ТоварыСПониженнойСтавкойПошлин
		|ГДЕ
		|	ТоварыСПониженнойСтавкойПошлин.Период = &ПустаяДата";
		
		Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		НаборЗаписей = РегистрыСведений.ТоварыСПониженнойСтавкойПошлин.СоздатьНаборЗаписей();
		
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей.Отбор.Товар.Установить(Выборка.Товар);
			НаборЗаписей.Прочитать();  
			
			Если НаборЗаписей.Выбран() Тогда
				НачатьТранзакцию();
				
				Попытка
					
					Для каждого Запись Из НаборЗаписей Цикл
						Запись.Товар             = Выборка.Товар;
						Запись.ВходитВПеречень   = Истина;
						Запись.Период            = '19000101';
					КонецЦикла;
					
					НаборЗаписей.ОбменДанными.Загрузка = Истина;
					НаборЗаписей.Записать();
					ЗафиксироватьТранзакцию();
				Исключение
					ТекстСообщения = НСтр("ru = 'Не удалось обработать запись регистра Товары с пониженной ставкой пошлин (Перечень изъятий) %Ссылка% по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Товар);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,
					Метаданные.РегистрыСведений.ТоварыСПониженнойСтавкойПошлин, Выборка.Товар, ТекстСообщения);
					ОтменитьТранзакцию();
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры
	
	Функция ПолучитьПереченьИзъятий()
		
		ПереченьМакет = РегистрыСведений.ТоварыСПониженнойСтавкойПошлин.ПолучитьМакетПереченьИзъятий();
		МассивИзъятий = Новый Массив;
		Если ПереченьМакет <> Неопределено Тогда
			МассивИзъятий = ОбщегоНазначения.ЗначениеИзСтрокиXML(ПереченьМакет.ПолучитьТекст()).ВыгрузитьКолонку("КодТНВЭД");
		КонецЕсли;
		
		Возврат МассивИзъятий;
		
	КонецФункции
	
	Функция ПолучитьПризнакПроисхождения(СпособПроисхожденияТовара,СтранаПроисхожденияТовара,ВПеречне)
		
		Если Не ЗначениеЗаполнено(СпособПроисхожденияТовара) Тогда
			
			Если Не ЗначениеЗаполнено(СтранаПроисхожденияТовара) Тогда
				Возврат "5";
			ИначеЕсли СтранаПроисхожденияТовара = Справочники.КлассификаторСтранМира.Казахстан
				И  ВПеречне Тогда
				Возврат "3";
			ИначеЕсли СтранаПроисхожденияТовара = Справочники.КлассификаторСтранМира.Казахстан
				И НЕ  ВПеречне  Тогда
				Возврат "4";
			ИначеЕсли СтранаПроисхожденияТовара <> Справочники.КлассификаторСтранМира.Казахстан
				И  ВПеречне  Тогда
				Возврат "1";
			ИначеЕсли СтранаПроисхожденияТовара <> Справочники.КлассификаторСтранМира.Казахстан
				И  НЕ ВПеречне Тогда
				Возврат "2";
			КонецЕсли;
			
		ИначеЕсли СпособПроисхожденияТовара = Перечисления.СпособыПроисхожденияТоваров.СТ1 Тогда
			
			Если ВПеречне Тогда
				Возврат "3";
			Иначе
				Возврат "4";
			КонецЕсли;
			
		ИначеЕсли СпособПроисхожденияТовара = Перечисления.СпособыПроисхожденияТоваров.ЕТТЕАЭС
			ИЛИ СпособПроисхожденияТовара = Перечисления.СпособыПроисхожденияТоваров.ВТО
			ИЛИ СпособПроисхожденияТовара = Перечисления.СпособыПроисхожденияТоваров.ТС Тогда
			Возврат "1";
		КонецЕсли;
		
		Возврат "";
		
	КонецФункции
	
#КонецЕсли


// Заполняет реквизит "СчетНУ" в плане счетов Типовой из макета соответствия  документа "Установка
//
Процедура ЗаполнитьСоответствиеСчетовБУиНУпоУмолчанию() Экспорт
	
	Макет = Документы.УстановкаСоответствияСчетовБУиНУ.ПолучитьМакет("СоответствияСчетовБУиНУ");
	
	Для Индекс = 2 По Макет.ВысотаТаблицы Цикл
		
		ИмяСчетаБУ     = Макет.Область(Индекс, 1, Индекс, 1).Текст;
		КодСчетаБУ     = Макет.Область(Индекс, 2, Индекс, 2).Текст;
		ИмяСчетаНУ     = Макет.Область(Индекс, 3, Индекс, 3).Текст;
		КодСчетаНУ     = Макет.Область(Индекс, 4, Индекс, 4).Текст;
		
		Если КодСчетаБУ = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СчетБУ = ПланыСчетов.Типовой.НайтиПоКоду(КодСчетаБУ);
		Если СчетБУ = Неопределено Тогда
			Продолжить; // Нет счета с таким именем			
		КонецЕсли;
		Если КодСчетаНУ = "" Тогда
			Продолжить;
		КонецЕсли;	
		
		СчетНУ = ПланыСчетов.Налоговый.НайтиПоКоду(КодСчетаНУ);
		Если СчетНУ = Неопределено Тогда
			Продолжить; // Нет счета с таким именем
			Сообщить("Не счета НУ" + КодСчетаНУ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СчетБУ) Или НЕ ЗначениеЗаполнено(СчетНУ) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектСчетБУ = СчетБУ.ПолучитьОбъект();
		ОбъектСчетБУ.СчетНУ = СчетНУ;
		
		Попытка
			ОбъектСчетБУ.Записать();
		Исключение
			Сообщить("Произошла ошибка при записи счета: " + КодСчетаБУ + ОписаниеОШибки());
		КонецПопытки;	        			
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСоответствиеСчетовБУиНУпоУмолчанию()

Процедура ЗаполнитьСчетаНУИАналитикуВПервичныхДокументах()
	//Заполним счета налогового учета в документах, в которых были заполнена данные по БУ, теперь будут двжиения еще и по НУ
	//в случае,  если будет включен признак "Ведение учета балансовым методом". Для того, чтобы пользователь смог безболезненно перепроводить
	//существующие документы
	//		1.	Акт об оказании производственных услуг 
	//			a.	Заполнение счета затрат НУ
	//		2.	Возврат товаров поставщику
	//			a.	Заполнить Счет отнесения себестоимости по НУ и аналитику
	//		3.	Поступление из переработки
	//			a.	Заполнение счета НУ табличной части «Продукция» и «Возвращенные материалы».		
	//	
	
	Сообщить("-----------------------");
	Сообщить("Заполнение новых реквизитов налогового учета (счета налогового учета и аналитика) в первичных документах: " + Символы.ПС
	+ "     - Акт об оказании производственных услуг" + Символы.ПС
	+ "     - Возврат товаров поставщику" + Символы.ПС
	+ "     - Поступление из переработки" );
	
	СтруктураВидовОбрабатываемыхДокументов = Новый Структура("АктОбОказанииПроизводственныхУслуг,ВозвратТоваровПоставщику,ПоступлениеИзПереработки");
	
	ТекстЗапросаПоДокументам = "";
	Для Каждого ТекущийВидДокумента из СтруктураВидовОбрабатываемыхДокументов Цикл
		ВидДокумента = ТекущийВидДокумента.Ключ;
		Если не ТекстЗапросаПоДокументам = "" Тогда
			ТекстЗапросаПоДокументам = ТекстЗапросаПоДокументам + "
			|ОБЪЕДИНИТЬ ВСЕ 
			|";
		КонецЕсли;	
		
		ТекстЗапросаПоДокументам = ТекстЗапросаПоДокументам + "
		|ВЫБРАТЬ 
		|"+ВидДокумента+".Ссылка как Ссылка,
		|"+ВидДокумента+".Представление,
		|"+ВидДокумента+".Дата,
		|"+ВидДокумента+".Организация,
		|"+ВидДокумента+".УдалитьОтражатьВНалоговомУчете
		|		ИЗ
		|Документ."+ВидДокумента+" КАК "+ВидДокумента + "
		|ГДЕ "+ВидДокумента + ".ПометкаУдаления = Ложь";	
	КонецЦикла;	
	
	Запрос = Новый Запрос();	
	Запрос.Текст =			
	"ВЫБРАТЬ
	|	ЕСТЬNULL(УчетнаяПолитикаБухгалтерскийУчет.УчетВременныхРазницПоНалогуНаПрибыль, ЛОЖЬ) КАК ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль,
	|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомКПН, ЛОЖЬ) КАК ОрганизацияПлательщикНалогаНаПрибыль,
	|	ВыборкаДокументов.Представление КАК ПредставлениеДокумента,
	|	ВыборкаДокументов.Ссылка КАК ДокументСсылка,
	|	ВыборкаДокументов.Дата КАК Дата,
	|	ВыборкаДокументов.ОтражатьВНалоговомУчете КАК ОтражатьВНалоговомУчете,
	|	УчетнаяПолитикаБухгалтерскийУчет.УчетВременныхРазницПоНалогуНаПрибыль,
	|	УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомКПН
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(УчетнаяПолитикаБухгалтерскийУчетСрезПоследних.Период) КАК ПериодБУ,
	|		МАКСИМУМ(УчетнаяПолитикаНалоговыйУчетСрезПоследних.Период) КАК ПериодНУ,
	|		ВыборкаДокументов.Ссылка КАК Ссылка,
	|		ВыборкаДокументов.Представление КАК Представление,
	|		ВыборкаДокументов.Организация КАК Организация,
	|		ВыборкаДокументов.Дата КАК Дата,
	|		ВыборкаДокументов.УдалитьОтражатьВНалоговомУчете КАК ОтражатьВНалоговомУчете
	|	ИЗ  (" + ТекстЗапросаПоДокументам + ") как ВыборкаДокументов
	|		
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаБухгалтерскийУчет КАК УчетнаяПолитикаБухгалтерскийУчетСрезПоследних
	|			ПО ВыборкаДокументов.Организация = УчетнаяПолитикаБухгалтерскийУчетСрезПоследних.Организация
	|				И ВыборкаДокументов.Дата >= УчетнаяПолитикаБухгалтерскийУчетСрезПоследних.Период
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
	|			ПО ВыборкаДокументов.Организация = УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация
	|				И ВыборкаДокументов.Дата >= УчетнаяПолитикаНалоговыйУчетСрезПоследних.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВыборкаДокументов.Ссылка,
	|		ВыборкаДокументов.Дата,
	|		ВыборкаДокументов.Представление,
	|		ВыборкаДокументов.Организация,
	|		ВыборкаДокументов.УдалитьОтражатьВНалоговомУчете) КАК ВыборкаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаБухгалтерскийУчет КАК УчетнаяПолитикаБухгалтерскийУчет
	|		ПО ВыборкаДокументов.ПериодБУ = УчетнаяПолитикаБухгалтерскийУчет.Период
	|			И ВыборкаДокументов.Организация = УчетнаяПолитикаБухгалтерскийУчет.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	|		ПО ВыборкаДокументов.ПериодНУ = УчетнаяПолитикаНалоговыйУчет.Период
	|			И ВыборкаДокументов.Организация = УчетнаяПолитикаНалоговыйУчет.Организация
	|ГДЕ
	|	УчетнаяПолитикаНалоговыйУчет.ОрганизацияЯвляетсяПлательщикомКПН
	|			И (ВыборкаДокументов.ОтражатьВНалоговомУчете
	|				ИЛИ УчетнаяПолитикаБухгалтерскийУчет.УчетВременныхРазницПоНалогуНаПрибыль)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыборкаДокументов.Дата"; 	
	
	Выборка = Запрос.Выполнить().Выбрать();                 	
	Ном = 0;
	КоличествоВЗапросе = Выборка.Количество();
	Пока Выборка.Следующий() Цикл					
		Ном = Ном + 1;
		#Если Клиент Тогда
			Состояние("Обрабатывается документ " + СокрЛП(Ном) + " из " +СокрЛП(КоличествоВЗапросе)+": <" + Выборка.ПредставлениеДокумента + ">");
		#КонецЕсли
		ДокументОбъект = Выборка.ДокументСсылка.ПолучитьОбъект();				
		
		Если ТипЗнч(Выборка.ДокументСсылка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") И  Не ЗначениеЗаполнено(Выборка.ДокументСсылка.СчетЗатратНУ) Тогда
			УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(ДокументОбъект, "СчетЗатратБУ", "СчетЗатратНУ", Выборка.Дата);
		ИначеЕсли ТипЗнч(Выборка.ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") И  Не ЗначениеЗаполнено(Выборка.ДокументСсылка.СчетОтнесенияСебестоимостиНУ)Тогда
			УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(ДокументОбъект, "СчетОтнесенияСебестоимостиБУ", "СчетОтнесенияСебестоимостиНУ", Выборка.Дата);
			Для Ном = 1 По 3 Цикл
				ПроцедурыБухгалтерскогоУчета.ЗаменитьСубконтоНУВСтроке(ДокументОбъект, ДокументОбъект.СчетОтнесенияСебестоимостиБУ, ДокументОбъект.СчетОтнесенияСебестоимостиНУ, Ном, ДокументОбъект["СубконтоОтнесенияСебестоимостиБУ"+Ном], "СубконтоОтнесенияСебестоимостиНУ");	
			КонецЦикла;
		ИначеЕсли ТипЗнч(Выборка.ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеИзПереработки") Тогда
			//заполним для табличной части "Продукция"
			Для Каждого СтрокаПродукция Из ДокументОбъект.Продукция Цикл
				Если ЗначениеЗаполнено(СтрокаПродукция.СчетНУ) Тогда
					Продолжить;
				КонецЕсли;
				УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаПродукция, "СчетБУ", "СчетНУ", Выборка.Дата);				
			КонецЦикла;
			
			//заполним для табличной части "Возвращенные материалы"
			Для Каждого СтрокаМатериал Из ДокументОбъект.ВозвращенныеМатериалы Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаМатериал.СчетУчетаНУ) Тогда
					УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаМатериал, "СчетУчетаБУ", "СчетУчетаНУ", Выборка.Дата);				
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаМатериал.СчетПередачиНУ) Тогда
					УправлениеПроизводством.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаМатериал, "СчетПередачиБУ", "СчетПередачиНУ", Выборка.Дата);				
				КонецЕсли;			
			КонецЦикла;   			
		КонецЕсли; 		
		Если  ДокументОбъект.Модифицированность() Тогда
			Попытка
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ДокументОбъект.Записать();
			Исключение
				Сообщить("Не удалось записать документ <"+Выборка.ПредставлениеДокумента+">!", СтатусСообщения.Внимание);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;  	
	
	
КонецПроцедуры

//Процедура заполняет признак "Учет временных разниц" в плане счетов "Налоговый"
//для счетов, по которым в конфигурации реализован механизм учета ВР
//
Процедура ЗаполнитьПризнакУчетВРВПланеСчетовНалоговый()
	
	МассивСчетовИсключения = Новый Массив;
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ДенежныеСредства);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.КорпоративныйПодоходныйНалогАвансы);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.НалогНаДобавленнуюСтоимостьКВозмещению);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.КредитыИЗаймыПолученные);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.КредитыИЗаймыВыданные);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.КорпоративныйПодоходныйНалог);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ИндивидуальныйПодоходныйНалог);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.НалогНаДобавленнуюСтоимость);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоВзносамОСМС);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоОтчислениямОСМС);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоСоциальномуСтрахованию);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоПенсионнымОтчислениям);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ПрочиеВзаиморасчеты);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ЗадолженностьПодотчетныхЛиц);
	МассивСчетовИсключения.Добавить(ПланыСчетов.Налоговый.ЗадолженностьПоИсполнительнымЛистам);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	Налоговый.Ссылка КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(Налоговый.Ссылка) КАК СчетПредставление
	|ИЗ
	|	ПланСчетов.Налоговый КАК Налоговый
	|ГДЕ
	|	НЕ Налоговый.Ссылка В ИЕРАРХИИ(&МассивСчетов)
	|	И (НЕ Налоговый.ВестиУчетВременныхРазниц)
	|	И (НЕ Налоговый.ЗапретитьИспользоватьВПроводках)" ;
	
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетовИсключения);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектСчет = Выборка.Счет.ПолучитьОбъект();
		ОбъектСчет.ВестиУчетВременныхРазниц = Истина;
		Попытка
			ОбъектСчет.Записать();
		Исключение
			Сообщить("   при записи счета: "  + Выборка.СчетПредставление + " произошла ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;	    
	КонецЦикла; 
	
КонецПроцедуры


// ПРОЦЕДУРЫ ОБНОВЛЕНИЯ НА РЕДАКЦИЮ 2.0

// Устанавливает или удаляет субконто "РаботникиОрганизации" у указанного счета.
//
Процедура ПрименитьПараметрыСубконтоРаботникиОрганизации(СчетЗП, ИмяПланаСчетов, ВестиПоСотрудникам, ОбработкаПодчиненных = Истина)
	
	ВидСубконто = "ВидыСубконтоТиповые";
	
	Попытка
		
		Объект   = СчетЗП.ПолучитьОбъект();
		КодСчета = Объект.Код;
		
		Сообщение = "";
		
		Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].РаботникиОрганизаций, "ВидСубконто");
		
		Если ВестиПоСотрудникам = Истина Тогда // Добавляем 
			
			Если Субконто = Неопределено Тогда
				
				НовыйВид = Объект.ВидыСубконто.Добавить();
				
				НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].РаботникиОрганизаций;
				
				Если ИмяПланаСчетов = "Типовой" Тогда						
					НовыйВид.Валютный = Истина;
				КонецЕсли;
				
				НовыйВид.Количественный = Истина;
				НовыйВид.Суммовой = Истина;
				
				// для счетов резерва устанавливаем "Только обороты"
				Если СчетЗП = ПланыСчетов.Типовой.КраткосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам //3430
					ИЛИ СчетЗП = ПланыСчетов.Налоговый.КраткосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам //3430Н
					ИЛИ СчетЗП = ПланыСчетов.Типовой.ДолгосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам Тогда //4230					 
					НовыйВид.ТолькоОбороты = Истина;
				Иначе
					НовыйВид.ТолькоОбороты = Ложь;
				КонецЕсли;
				
				Сообщение = " установлено субконто ""Работники организаций""";
				
			КонецЕсли;
			
		ИначеЕсли ВестиПоСотрудникам = Ложь Тогда // Удаляем
			
			Если Субконто <> Неопределено Тогда
				Объект.ВидыСубконто.Удалить(Субконто);
				Сообщение = " удалено субконто ""Работники организаций""";
			КонецЕсли;
			
		КонецЕсли;
		
		Если Сообщение <> "" Тогда
			Сообщение = "План счетов """ + ИмяПланаСчетов + """, счет """ +Строка(Объект) + """:" +  Сообщение;				
			Сообщить(Сообщение);
		КонецЕсли; 
		
		Объект.Записать();	
		
	Исключение
		
		Сообщить("Счет """ + Строка(КодСчета) + """:");
		Сообщить(ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры // ПрименитьПараметрыСубконтоРаботникиОрганизации()



// инициализация списка счетов, на которых можно устанавливать дополнительную аналитику "Работники организации"
мСчетаЗП = Новый СписокЗначений;
// счета кредиторской задолженности
мСчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда); //3350
//мСчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате); //3394
мСчетаЗП.Добавить(ПланыСчетов.Типовой.ОбязательстваПоСоциальномуСтрахованию); //3210
мСчетаЗП.Добавить(ПланыСчетов.Типовой.ОбязательстваПоПенсионнымОтчислениям); //3220
мСчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам); //3430
мСчетаЗП.Добавить(ПланыСчетов.Налоговый.КраткосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам); //3430Н
//мСчетаЗП.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате); //4174
мСчетаЗП.Добавить(ПланыСчетов.Типовой.ДолгосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам); //4230
// счета дебиторской задолженности
мСчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоВыплаченнойЗаработнойПлате); //1252
//мСчетаЗП.Добавить(ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоПредоставленнымРаботникамЗаймам); //1253
//мСчетаЗП.Добавить(ПланыСчетов.Типовой.ПрочаяКраткосрочнаяЗадолженностьРаботников); //1254
//мСчетаЗП.Добавить(ПланыСчетов.Типовой.ДолгосрочнаяЗадолженностьПоВыплаченнойЗаработнойПлате); //2152
мСчетаЗП.Добавить(ПланыСчетов.Налоговый.ВзаиморасчетыСРаботниками); //3350Н (Н460)
мСчетаЗП.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоСоциальномуСтрахованию); // 3210Н
мСчетаЗП.Добавить(ПланыСчетов.Налоговый.ОбязательстваПоПенсионнымОтчислениям);  // 3220Н

// инициализация списка неиспользуемых счетов, для которых следует устанавливать признак "ЗапретитьИспользоватьВПроводках"
мСчетаНеИспользоватьВПроводках = Новый СписокЗначений;
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьДенежныеСредстваВКассеВВалюте); //Я102
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьДенежныеСредстваНаТекущихБанковскихСчетахВВалюте); //Я105
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьКраткосрочнаяДебиторскаяЗадолженностьРаботников); //Я250
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьКраткосрочнаяЗадолженностьПоВыплаченнойЗаработнойПлате); //Я252
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьКраткосрочнаяЗадолженностьПоПредоставленнымРаботникамЗаймам); //Я253
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьПрочаяКраткосрочнаяЗадолженностьРаботников); //Я254
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьДолгосрочнаяДебиторскаяЗадолженностьРаботников); //Я150
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьДолгосрочнаяЗадолженностьПоВыплаченнойЗаработнойПлате); //Я152
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьДолгосрочнаяЗадолженностьПоПредоставленнымРаботникамЗаймам); //Я153
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьПрочаяДолгосрочнаяЗадолженностьРаботников); //Я154
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьАмортизацияИОбесценениеИнвестиционнойНедвижимости); //Я232
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьАмортизацияИОбесценениеОсновныхСредств); //Я242
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьАмортизацияИОбесценениеПрочихНематериальныхАктивов); //Я274
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьОбязательстваПоСоциальномуСтрахованию); //Я321
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьОбязательстваПоПенсионнымОтчислениям); //Я322
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьКраткосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам); //Я343
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьКраткосрочнаяЗадолженностьПоОплатеТруда); //Я350
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьКраткосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате); //Я394
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьДолгосрочнаяЗадолженностьПоДепонированнойЗаработнойПлате); //Я417
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьДолгосрочныеОценочныеОбязательстваПоВознаграждениямРаботникам); //Я423
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьРезервНаПереоценку); //Я542
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьКорректировкаПрибылиУбыткаВРезультатеИзмененияУчетнойПолитики); //Я552
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьАмортизацияИОбесценениеРазведочныхИОценочныхАктивов); //Я262
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Типовой.УдалитьСчетаПроизводственногоУчета); //Я800

//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Налоговый.УдалитьНезавершенноеПроизводство); //ЯН213
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Налоговый.УдалитьВзаиморасчетыСРаботниками); //ЯН460
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Налоговый.УдалитьВознаграждениеПоКредитамИЗаймамПолученным); //ЯН430
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Налоговый.УдалитьСомнительныеОбязательства); //ЯН440
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Налоговый.УдалитьСомнительныеТребования); //ЯН450
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Налоговый.УдалитьПрочийКапитал); //ЯН530
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Налоговый.УдалитьДоходОтПереоценкиАктивов); //ЯН740
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Налоговый.УдалитьПроизводственныеРасходы); //ЯН840
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Налоговый.УдалитьПолуфабрикатыСобственногоПроизводства_); //ЯН920
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Налоговый.УдалитьВспомогательныеПроизводства_); //ЯН930
//мСчетаНеИспользоватьВПроводках.Добавить(ПланыСчетов.Налоговый.УдалитьНакладныеРасходы_); //ЯН940

