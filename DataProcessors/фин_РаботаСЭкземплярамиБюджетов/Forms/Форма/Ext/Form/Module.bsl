
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЕдинаяВалюта = Истина;
	ВалютаДокумента = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета");
	БюджетированиеПоОрганизациям = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям");
	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.Список);
 	фин_БюджетированиеОбщегоНазначения.НастроитьОформлениеТабличногоПоля(Элементы.ОбъектДокументыКОбработке);
 	//Объект.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекущаяДата(),Объект.Сценарий);
	УстановитьТекстПериода();
	ОпределитьРегламент();
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстПериода()
	Если Объект.ПериодПланирования = '00010101' Тогда
		НадписьПериодПланирования = "<не задан>";
	Иначе
		фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.УстановитьГоризонтПланированияИПредставлениеБюджетногоПериода(НадписьПериодПланирования,,Объект.ПериодПланирования,Объект.Сценарий);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОпределитьРегламент()
	Регламент = ?(ЗначениеЗаполнено(Объект.Сценарий),фин_ОбщегоНазначенияВызовСервераПовтИсп.БюджетныйРегламентПериода(Объект.ПериодПланирования),фин_ОбщегоНазначенияВызовСервераПовтИсп.БюджетныйРегламентПериода(ТекущаяДата()));
	ЗаполнитьДеревоОтбора();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОтбора()
	
	Дерево = ДанныеФормыВЗначение(ДеревоОтбора,Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_Бюджеты.Ссылка КАК Бюджет,
		|	ВЫБОР
		|		КОГДА фин_РегламентФормированияБюджетов.Регламент ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВРегламенте,
		|	ЕСТЬNULL(фин_РегламентФормированияБюджетов.Ранг, 1000) КАК Порядок
		|ПОМЕСТИТЬ ВТ_БюджетыПромежуточная
		|ИЗ
		|	Справочник.фин_Бюджеты КАК фин_Бюджеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_РегламентФормированияБюджетов КАК фин_РегламентФормированияБюджетов
		|		ПО фин_Бюджеты.Ссылка = фин_РегламентФормированияБюджетов.Бюджет
		|			И (фин_РегламентФормированияБюджетов.Регламент = &Регламент)
		|ГДЕ ВЫБОР КОГДА &Бюджет = ЗНАЧЕНИЕ(Справочник.фин_Бюджеты.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ фин_Бюджеты.Ссылка=&Бюджет КОНЕЦ
		|;
		|ВЫБРАТЬ
		|	фин_Бюджеты.Бюджет КАК Бюджет,
		|	МАКСИМУМ(фин_Бюджеты.ВРегламенте) КАК ВРегламенте,
		|	МИНИМУМ(фин_Бюджеты.Порядок) КАК Порядок,
		|	фин_Бюджеты.Бюджет.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВТ_Бюджеты
		|ИЗ
		|	ВТ_БюджетыПромежуточная КАК фин_Бюджеты
		|СГРУППИРОВАТЬ ПО
		|фин_Бюджеты.Бюджет
		| ;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_Бюджеты.Бюджет КАК Бюджет,
		|	ВТ_Бюджеты.ВРегламенте КАК ВРегламенте,
		|	ВТ_Бюджеты.Порядок КАК Порядок,
		|	фин_Бюджет.Сценарий КАК Сценарий,
		|	фин_Бюджет.ПериодПланирования КАК ПериодПланирования,
		|	фин_Бюджет.ВидОперации КАК ВидОперации,
		|	ВЫБОР
		|		КОГДА фин_Бюджет.Ссылка ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Количество,
		|	ВТ_Бюджеты.Наименование КАК Наименование
		|ИЗ
		|	ВТ_Бюджеты КАК ВТ_Бюджеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.фин_Бюджет КАК фин_Бюджет
		|		ПО ВТ_Бюджеты.Бюджет = фин_Бюджет.ФормируемыйБюджет
		|			И (фин_Бюджет.ПометкаУдаления = ЛОЖЬ)
		|			И ВЫБОР КОГДА &Сценарий = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ фин_Бюджет.Сценарий=&Сценарий И ВЫБОР КОГДА &ПериодПланирования = ДАТАВРЕМЯ(1,1,1,0,0,0) ТОГДА ИСТИНА ИНАЧЕ фин_Бюджет.ПериодПланирования=&ПериодПланирования  КОНЕЦ КОНЕЦ
		|			И ВЫБОР КОГДА &Бюджет = ЗНАЧЕНИЕ(Справочник.фин_Бюджеты.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ фин_Бюджет.ФормируемыйБюджет=&Бюджет КОНЕЦ
		|			И ВЫБОР КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.фин_ВидыОперацийБюджет.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ фин_Бюджет.ВидОперации=&ВидОперации КОНЕЦ
		|			И ВЫБОР КОГДА &Состояние = ЗНАЧЕНИЕ(Перечисление."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СостоянияОбъектов.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ фин_Бюджет.Состояние=&Состояние КОНЕЦ
		|			И ВЫБОР КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ фин_Бюджет.Организация=&Организация КОНЕЦ
		|			И ВЫБОР КОГДА &Проект = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов()+".ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ фин_Бюджет.Проект=&Проект КОНЕЦ
		|			И ВЫБОР КОГДА &УправленческоеПодразделение = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()+".ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ фин_Бюджет.УправленческоеПодразделение=&УправленческоеПодразделение КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		//|	ВРегламенте,
		|	Порядок,
		|	Наименование
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	ВРегламенте,
		|	Бюджет,
		|	Сценарий,
		|	ПериодПланирования,
		|	ВидОперации";
	
	Запрос.УстановитьПараметр("Регламент", 		Регламент);
	Запрос.УстановитьПараметр("Сценарий", 		Объект.Сценарий);
	Запрос.УстановитьПараметр("ПериодПланирования",	Объект.ПериодПланирования);
	Запрос.УстановитьПараметр("Бюджет", 		Объект.Бюджет);
	Запрос.УстановитьПараметр("ВидОперации", 	Объект.ВидОперации);
	Запрос.УстановитьПараметр("Состояние", 		Объект.Состояние);
	Запрос.УстановитьПараметр("Организация", 	Объект.Организация);
	Запрос.УстановитьПараметр("Проект", 		Объект.Проект);
	Запрос.УстановитьПараметр("УправленческоеПодразделение", 		Объект.УправленческоеПодразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВРегламенте = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтрокаВсеБюджеты = Дерево.Строки.Добавить();
	СтрокаВсеБюджеты.Представление 	= "<все бюджеты>";
	СтрокаВсеБюджеты.Количество 	= 0;
	
	ОграничитьСписок = Ложь;
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ИспользоватьОграниченияПоБюджетам") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	общ_ОбъектыДоступаПоПрофилям.ОбъектДоступа
				|ИЗ
				|	РегистрСведений.общ_СоставПрофилейДоступа КАК общ_СоставПрофилейДоступа
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.общ_ОбъектыДоступаПоПрофилям КАК общ_ОбъектыДоступаПоПрофилям
				|		ПО общ_СоставПрофилейДоступа.Профиль = общ_ОбъектыДоступаПоПрофилям.Профиль
				|			И (общ_ОбъектыДоступаПоПрофилям.ОбъектДоступа ССЫЛКА Справочник.фин_Бюджеты)
				|ГДЕ
				|	общ_СоставПрофилейДоступа.Пользователь = &Пользователь
				|	И НЕ общ_СоставПрофилейДоступа.Профиль.ПометкаУдаления
				|	И общ_СоставПрофилейДоступа.Профиль.ВидПрофиляДоступа = &ВидПрофиляДоступа
				|	И общ_СоставПрофилейДоступа.Профиль.ВариантОграничения В(&ВариантОграничения)";
			ВариантОграничения = Новый СписокЗначений;
			ВариантОграничения.Добавить(Перечисления.фин_ВариантыОграниченияДоступаКДаннымБюджетов.ПоВидамБюджетов);
			ВариантОграничения.Добавить(Перечисления.фин_ВариантыОграниченияДоступаКДаннымБюджетов.ПоВидамБюджетовИПоПодразделениям);
			Запрос.УстановитьПараметр("ВариантОграничения", ВариантОграничения);
			Запрос.УстановитьПараметр("ВидПрофиляДоступа", Перечисления.общ_ВидыПрофилейДоступа.Бюджеты);
			Запрос.УстановитьПараметр("Пользователь", фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ТекущийПользователь"));

			Результат = Запрос.Выполнить();
		    ОграничитьСписок = НЕ РезультатЗапроса.Пустой();
			СписокДоступных = Результат.Выгрузить().ВыгрузитьКолонку("ОбъектДоступа");
	КонецЕсли;
	
	Пока ВыборкаВРегламенте.Следующий() Цикл
		// Вставить обработку выборки ВыборкаВРегламенте
		СтрокаВсеБюджеты.Количество = СтрокаВсеБюджеты.Количество + ВыборкаВРегламенте.Количество;
		Если ВыборкаВРегламенте.ВРегламенте = Истина Тогда
			БазаДляДобавления = Дерево;
		Иначе
			СтрокаВнеРегламента = Дерево.Строки.Добавить();
			СтрокаВнеРегламента.Представление = "<не включенные в регламент>";
			СтрокаВнеРегламента.Количество = ВыборкаВРегламенте.Количество;
			БазаДляДобавления = СтрокаВнеРегламента;
		КонецЕсли;
	
		ВыборкаБюджет = ВыборкаВРегламенте.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаБюджет.Следующий() Цикл
			Если ОграничитьСписок И СписокДоступных.Найти(ВыборкаБюджет.Бюджет)=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			// Вставить обработку выборки ВыборкаБюджет
			СтрокаБюджет = БазаДляДобавления.Строки.Добавить();
			СтрокаБюджет.Представление 	= ВыборкаБюджет.Бюджет;
			СтрокаБюджет.Бюджет 		= ВыборкаБюджет.Бюджет;
			СтрокаБюджет.Количество 	= ВыборкаБюджет.Количество;
			
			Если ВыборкаБюджет.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ВыборкаСценарий = ВыборкаБюджет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
			Пока ВыборкаСценарий.Следующий() Цикл
				// Вставить обработку выборки ВыборкаСценарий
				СтрокаСценарий = СтрокаБюджет.Строки.Добавить();
				СтрокаСценарий.Представление 	= ВыборкаСценарий.Сценарий;
				СтрокаСценарий.Бюджет 			= ВыборкаБюджет.Бюджет;
				СтрокаСценарий.Сценарий 		= ВыборкаСценарий.Сценарий;
				СтрокаСценарий.Количество 		= ВыборкаСценарий.Количество;
	
	
				ВыборкаПериодПланирования = ВыборкаСценарий.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
				Пока ВыборкаПериодПланирования.Следующий() Цикл
					// Вставить обработку выборки ВыборкаПериодПланирования
					СтрокаПериодПланирования = СтрокаСценарий.Строки.Добавить();
					СтрокаПериодПланирования.Представление 	= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПредставлениеИнтервалаСтрокой(ВыборкаПериодПланирования.ПериодПланирования,ВыборкаСценарий.Сценарий);
					СтрокаПериодПланирования.Бюджет 		= ВыборкаБюджет.Бюджет;
					СтрокаПериодПланирования.Сценарий 		= ВыборкаСценарий.Сценарий;
					СтрокаПериодПланирования.ПериодПланирования = ВыборкаПериодПланирования.ПериодПланирования;
					СтрокаПериодПланирования.Количество 	= ВыборкаПериодПланирования.Количество;
	
	
					ВыборкаВидОперации = ВыборкаПериодПланирования.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
					Пока ВыборкаВидОперации.Следующий() Цикл
						// Вставить обработку выборки ВыборкаВидОперации
						// Вставить обработку выборки ВыборкаПериодПланирования
						СтрокаВидОперации = СтрокаПериодПланирования.Строки.Добавить();
						СтрокаВидОперации.Представление 	= ВыборкаВидОперации.ВидОперации;
						СтрокаВидОперации.Бюджет 		= ВыборкаБюджет.Бюджет;
						СтрокаВидОперации.Сценарий 		= ВыборкаСценарий.Сценарий;
						СтрокаВидОперации.ПериодПланирования = ВыборкаПериодПланирования.ПериодПланирования;
						СтрокаВидОперации.ВидОперации 	= ВыборкаВидОперации.ВидОперации;
						СтрокаВидОперации.Количество 	= ВыборкаВидОперации.Количество;
	//
	//
	//					ВыборкаДетальныеЗаписи = ВыборкаВидОперации.Выбрать();
	//
	//					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//						// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//					КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(Дерево,ДеревоОтбора);
	УстановитьОтборДокументов();
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	СценарийПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СценарийПриИзмененииНаСервере()
	Если Объект.ПериодПланирования<>'00010101' Тогда
	  	Объект.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекущаяДата(),Объект.Сценарий);
		ОпределитьРегламент();
	Иначе
		УстановитьОтборДокументов();
	КонецЕсли;
	УстановитьТекстПериода();
КонецПроцедуры

&НаКлиенте
Процедура БюджетПриИзменении(Элемент)
	БюджетПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура БюджетПриИзмененииНаСервере()
	ЗаполнитьДеревоОтбора();
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	ВидОперацииПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	ЗаполнитьДеревоОтбора();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСостояниеПриИзменении(Элемент)
	ОбъектСостояниеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбъектСостояниеПриИзмененииНаСервере()
	ЗаполнитьДеревоОтбора();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	ЗаполнитьДеревоОтбора();
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	ПроектПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроектПриИзмененииНаСервере()
	ЗаполнитьДеревоОтбора();
КонецПроцедуры

&НаКлиенте
Процедура УправленческоеПодразделениеПриИзменении(Элемент)
	УправленческоеПодразделениеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура УправленческоеПодразделениеПриИзмененииНаСервере()
	ЗаполнитьДеревоОтбора();
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере()
  	Объект.ПериодПланирования = '00010101';
	ОпределитьРегламент();
	УстановитьТекстПериода();
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	ОчиститьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтбораПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ДеревоОтбора.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		УстановитьОтборДокументов(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДокументов(ИдентификаторСтроки = Неопределено)
	Если ИдентификаторСтроки<>Неопределено Тогда
		СтрокаДерева = ДеревоОтбора.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли;
	БюджетОтбора 		= ?(ЗначениеЗаполнено(Объект.Бюджет),Объект.Бюджет,?(ИдентификаторСтроки<>Неопределено,СтрокаДерева["Бюджет"],Справочники.фин_Бюджеты.ПустаяСсылка()));
	СценарийОтбора 		= ?(ЗначениеЗаполнено(Объект.Сценарий),Объект.Сценарий,?(ИдентификаторСтроки<>Неопределено,СтрокаДерева["Сценарий"],фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий()));
	ВидОперацииОтбора 	= ?(ЗначениеЗаполнено(Объект.ВидОперации),Объект.ВидОперации,?(ИдентификаторСтроки<>Неопределено,СтрокаДерева["ВидОперации"],Перечисления.фин_ВидыОперацийБюджет.ПустаяСсылка()));
	ПериодОтбора 		= ?(ЗначениеЗаполнено(Объект.ПериодПланирования),Объект.ПериодПланирования,?(ИдентификаторСтроки<>Неопределено,СтрокаДерева["ПериодПланирования"],'00010101'));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, "ФормируемыйБюджет", БюджетОтбора, , , ЗначениеЗаполнено(БюджетОтбора));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, "Сценарий", СценарийОтбора, , , ЗначениеЗаполнено(СценарийОтбора));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, "ВидОперации", ВидОперацииОтбора, , , ЗначениеЗаполнено(ВидОперацииОтбора));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, "ПериодПланирования", ПериодОтбора, , , ЗначениеЗаполнено(ПериодОтбора));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, "Состояние", Объект.Состояние, , , ЗначениеЗаполнено(Объект.Состояние));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, "Организация", Объект.Организация, , , ЗначениеЗаполнено(Объект.Организация));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, "Проект", Объект.Проект, , , ЗначениеЗаполнено(Объект.Проект));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, "УправленческоеПодразделение", Объект.УправленческоеПодразделение, , , ЗначениеЗаполнено(Объект.УправленческоеПодразделение));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписок(Команда)
	Объект.ДокументыКОбработке.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ПринятьВыделенныеКОбработке(Команда)
	Объект.ДокументыКОбработке.Очистить();
	ДобавитьВыделенные();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыделенныеКОбработке(Команда)
	ДобавитьВыделенные();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыделенные()
	Для Каждого Выбрано Из Элементы.Список.ВыделенныеСтроки Цикл
		Если Объект.ДокументыКОбработке.НайтиСтроки(Новый Структура("Документ",Выбрано)).Количество()>0 Тогда
			Продолжить;
		КонецЕсли;
		Документ = Выбрано;
		НС = Объект.ДокументыКОбработке.Добавить();
		НС.Пометка= Истина;
		НС.Документ = Документ;
		НС.Дата = ДатаДокумента(Выбрано);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатаДокумента(Документ)
	Возврат Документ.Дата;	
КонецФункции

&НаКлиенте
Процедура ПринятьВсеКОбработке(Команда)
	Объект.ДокументыКОбработке.Очистить();
	ТекущиеДанные = Элементы.ДеревоОтбора.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		 ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	 Иначе
		 ИдентификаторСтроки = Неопределено;
	КонецЕсли;
	ДобавитьВсе(ИдентификаторСтроки);
КонецПроцедуры

&НаСервере
Процедура ДобавитьВсе(ИдентификаторСтроки)
	Если ИдентификаторСтроки<>Неопределено Тогда
		СтрокаДерева = ДеревоОтбора.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли;
	БюджетОтбора 		= ?(ЗначениеЗаполнено(Объект.Бюджет),Объект.Бюджет,?(ИдентификаторСтроки<>Неопределено,СтрокаДерева["Бюджет"],Справочники.фин_Бюджеты.ПустаяСсылка()));
	СценарийОтбора 		= ?(ЗначениеЗаполнено(Объект.Сценарий),Объект.Сценарий,?(ИдентификаторСтроки<>Неопределено,СтрокаДерева["Сценарий"],фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий()));
	ВидОперацииОтбора 	= ?(ЗначениеЗаполнено(Объект.ВидОперации),Объект.ВидОперации,?(ИдентификаторСтроки<>Неопределено,СтрокаДерева["ВидОперации"],Перечисления.фин_ВидыОперацийБюджет.ПустаяСсылка()));
	ПериодОтбора 		= ?(ЗначениеЗаполнено(Объект.ПериодПланирования),Объект.ПериодПланирования,?(ИдентификаторСтроки<>Неопределено,СтрокаДерева["ПериодПланирования"],'00010101'));
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_Бюджет.Ссылка КАК Документ,
		|	ИСТИНА КАК Пометка,
		|	фин_Бюджет.Дата
		|ИЗ
		|	Документ.фин_Бюджет КАК фин_Бюджет
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &Сценарий = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ фин_Бюджет.Сценарий = &Сценарий
		|					И ВЫБОР
		|						КОГДА &ПериодПланирования = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ фин_Бюджет.ПериодПланирования = &ПериодПланирования
		|					КОНЕЦ
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Бюджет = ЗНАЧЕНИЕ(Справочник.фин_Бюджеты.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ фин_Бюджет.ФормируемыйБюджет = &Бюджет
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.фин_ВидыОперацийБюджет.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ фин_Бюджет.ВидОперации = &ВидОперации
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Состояние = ЗНАЧЕНИЕ(Перечисление."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СостоянияОбъектов.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ фин_Бюджет.Состояние = &Состояние
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ фин_Бюджет.Организация = &Организация
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Проект = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПроектов()+".ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ фин_Бюджет.Проект = &Проект
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &УправленческоеПодразделение = ЗНАЧЕНИЕ(Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмяСправочникаПодразделений()+".ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ фин_Бюджет.УправленческоеПодразделение = &УправленческоеПодразделение
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Сценарий", 		СценарийОтбора);
	Запрос.УстановитьПараметр("ПериодПланирования",	ПериодОтбора);
	Запрос.УстановитьПараметр("Бюджет", 		БюджетОтбора);
	Запрос.УстановитьПараметр("ВидОперации", 	ВидОперацииОтбора);
	Запрос.УстановитьПараметр("Состояние", 		Объект.Состояние);
	Запрос.УстановитьПараметр("Организация", 	Объект.Организация);
	Запрос.УстановитьПараметр("Проект", 		Объект.Проект);
	Запрос.УстановитьПараметр("УправленческоеПодразделение", 		Объект.УправленческоеПодразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка= РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Объект.ДокументыКОбработке.НайтиСтроки(Новый Структура("Документ",Выборка.Документ)).Количество()>0 Тогда
			Продолжить;
		КонецЕсли;
		НС = Объект.ДокументыКОбработке.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Выборка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВсеКОбработке(Команда)
	ТекущиеДанные = Элементы.ДеревоОтбора.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		 ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	 Иначе
		 ИдентификаторСтроки = Неопределено;
	КонецЕсли;
	ДобавитьВсе(ИдентификаторСтроки);
КонецПроцедуры

&НаКлиенте
Процедура Перерассчитать(Команда)
	Состояние("Выполняется перерасчет");
	ПерерассчитатьНаСервере();
	Состояние("Перерасчет завершен");
КонецПроцедуры

&НаСервере
Процедура ПерерассчитатьНаСервере()
	СтрокиКОбработке = Объект.ДокументыКОбработке.Выгрузить(Новый Структура("Пометка",Истина));
	СтрокиКОбработке.Сортировать("Дата");
//	Инд = 1;
	Для Каждого СтрокаКОбработке Из СтрокиКОбработке Цикл
		Если СтрокаКОбработке.Документ.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		//Состояние("Выполняется перерасчет",100 * Инд/СтрокиКОбработке.Количество());
		ДокументОбъект = СтрокаКОбработке.Документ.ПолучитьОбъект();
		Попытка
			Документы.фин_Бюджет.РассчитатьБюджет(ДокументОбъект);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При перерасчете документа "+СтрокаКОбработке.Документ+"
			|	произошла ошибка: "+ОписаниеОшибки());
			//Инд = Инд + 1;
			Продолжить;
		КонецПопытки;
		Попытка
			ДокументОбъект.Записать(?(ДокументОбъект.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При записи/проведении документа "+СтрокаКОбработке.Документ+"
			|	произошла ошибка: "+ОписаниеОшибки());
		КонецПопытки;
		//Инд = Инд + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	Состояние("Выполняется проведение");
	ПровестиНаСервере();
	Состояние("Проведение завершено");
КонецПроцедуры

&НаСервере
Процедура ПровестиНаСервере()
	СтрокиКОбработке = Объект.ДокументыКОбработке.Выгрузить(Новый Структура("Пометка",Истина));
	СтрокиКОбработке.Сортировать("Дата");
//	Инд = 1;
	Для Каждого СтрокаКОбработке Из СтрокиКОбработке Цикл
		Если СтрокаКОбработке.Документ.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		//Состояние("Выполняется перерасчет",100 * Инд/СтрокиКОбработке.Количество());
		ДокументОбъект = СтрокаКОбработке.Документ.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При проведении документа "+СтрокаКОбработке.Документ+"
			|	произошла ошибка: "+ОписаниеОшибки());
		КонецПопытки;
		//Инд = Инд + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПроведения(Команда)
	Состояние("Выполняется отмена проведения");
	ОтменаПроведенияНаСервере();
	Состояние("Отмена проведения завершена");
КонецПроцедуры

&НаСервере
Процедура ОтменаПроведенияНаСервере()
	СтрокиКОбработке = Объект.ДокументыКОбработке.Выгрузить(Новый Структура("Пометка",Истина));
	СтрокиКОбработке.Сортировать("Дата УБЫВ");
//	Инд = 1;
	Для Каждого СтрокаКОбработке Из СтрокиКОбработке Цикл
		Если СтрокаКОбработке.Документ.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		//Состояние("Выполняется перерасчет",100 * Инд/СтрокиКОбработке.Количество());
		ДокументОбъект = СтрокаКОбработке.Документ.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При отмене проведения документа "+СтрокаКОбработке.Документ+"
			|	произошла ошибка: "+ОписаниеОшибки());
		КонецПопытки;
		//Инд = Инд + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПометкаНаУдаление(Команда)
	Состояние("Выполняется установка/снятие пометки на удаление");
	ПометкаНаУдалениеНаСервере();
	Состояние("Установка/снятие пометки на удаление завершены");
КонецПроцедуры

&НаСервере
Процедура ПометкаНаУдалениеНаСервере()
	СтрокиКОбработке = Объект.ДокументыКОбработке.Выгрузить(Новый Структура("Пометка",Истина));
	СтрокиКОбработке.Сортировать("Дата УБЫВ");
//	Инд = 1;
	Для Каждого СтрокаКОбработке Из СтрокиКОбработке Цикл
		//Состояние("Выполняется перерасчет",100 * Инд/СтрокиКОбработке.Количество());
		ДокументОбъект = СтрокаКОбработке.Документ.ПолучитьОбъект();
		Попытка
			ДокументОбъект.УстановитьПометкуУдаления(НЕ ДокументОбъект.ПометкаУдаления);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При изменении пометки на удаление документа "+СтрокаКОбработке.Документ+"
			|	произошла ошибка: "+ОписаниеОшибки());
		КонецПопытки;
		//Инд = Инд + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДанныеАльтернативногоСценария(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораСценария",ЭтотОбъект);
	ОткрытьФорму("Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.ФормаВыбора", , , УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСценария(Сценарий, ДополнительныеПараметры) Экспорт
	Если Сценарий=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Сценарий=Объект.Сценарий Тогда
		ПоказатьПредупреждение(,"Результирующий сценарий не может совпадать с исходным!");
		Возврат;
	КонецЕсли;
	//Вставить содержимое обработчика.
	Состояние("Выполняется расчет данных альтернативного сценария");
	РезультатВыполнения = СформироватьДанныеАльтернативногоСценарияНаСервере(Сценарий);
	Если РезультатВыполнения.Количество()>0 Тогда
		ОткрытьФорму("Документ.фин_Бюджет.ФормаСписка",Новый Структура("Отбор",Новый Структура("Ссылка",РезультатВыполнения)),ЭтотОбъект,Новый УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
	Иначе
		ПоказатьПредупреждение(,"Отсутствуют сформированные документы");
	КонецЕсли;
	Состояние("Расчет данных альтернативного сценария завершен");
КонецПроцедуры

&НаСервере
Функция СформироватьДанныеАльтернативногоСценарияНаСервере(Сценарий)
	СписокДокументов = Новый СписокЗначений;
	СтрокиКОбработке = Объект.ДокументыКОбработке.Выгрузить(Новый Структура("Пометка",Истина));
	СтрокиКОбработке.Сортировать("Дата");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ПравилаСценарногоПланированияБюджетов.Бюджет
		|ИЗ
		|	РегистрСведений.фин_ПравилаСценарногоПланированияБюджетов КАК фин_ПравилаСценарногоПланированияБюджетов
		|ГДЕ
		|	фин_ПравилаСценарногоПланированияБюджетов.ФормируемыйСценарий = &ФормируемыйСценарий
		|	И фин_ПравилаСценарногоПланированияБюджетов.ФормироватьАвтоматически";
	
	Запрос.УстановитьПараметр("ФормируемыйСценарий", Сценарий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаБюджетов = РезультатЗапроса.Выгрузить();
//	Инд = 1;
	Для Каждого СтрокаКОбработке Из СтрокиКОбработке Цикл
		СценарийИсходный = СтрокаКОбработке.Документ.Сценарий;
		Если СценарийИсходный = Сценарий Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаКОбработке.Документ.ВидОперации=Перечисления.фин_ВидыОперацийБюджет.Корректировка
			ИЛИ СтрокаКОбработке.Документ.ВидОперации=Перечисления.фин_ВидыОперацийБюджет.ПереоценкаКурсов Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаКОбработке.Документ.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		Если ТаблицаБюджетов.НайтиСтроки(Новый Структура("Бюджет",СтрокаКОбработке.Документ.ФормируемыйБюджет)).Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		НовыйДокумент = Документы.фин_Бюджет.СоздатьДокумент();
		Попытка
			Документы.фин_Бюджет.ЗаполнитьПоОснованию(НовыйДокумент,Новый Структура("РасчетСценария,Сценарий,Бюджет",Истина,Сценарий,СтрокаКОбработке.Документ));
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При заполнении нового документа на основании "+СтрокаКОбработке.Документ+"
			|	произошла ошибка: "+ОписаниеОшибки());
		КонецПопытки;
		фин_ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(НовыйДокумент,фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"));
		НовыйДокумент.УстановитьНовыйНомер();
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			СписокДокументов.Добавить(НовыйДокумент.Ссылка);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При записи нового документа на основании "+СтрокаКОбработке.Документ+"
			|	произошла ошибка: "+ОписаниеОшибки());
		КонецПопытки;
		//Инд = Инд + 1;
	КонецЦикла;
	Возврат СписокДокументов;
КонецФункции

&НаКлиенте
Процедура СформироватьДокументыПоПравиламСценарногоПланирования(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
		ПоказатьПредупреждение(,"Не выбран сценарий формирования данных!");	
		Возврат;
	КонецЕсли;
	Если БюджетированиеПоОрганизациям И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(,"Не выбрана организация формирования данных!");	
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ПериодПланирования) Тогда
		ПоказатьПредупреждение(,"Не выбран бюджетный период формирования данных!");	
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Состояние) Тогда
		ПоказатьПредупреждение(,"Необходимо отключить отбор по состоянию документов!");	
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		ПоказатьПредупреждение(,"Необходимо отключить отбор по виду операции документов!");	
		Возврат;
	КонецЕсли;
	СформироватьДокументыПоПравиламСценарногоПланированияНаСервере();
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументыПоПравиламСценарногоПланированияНаСервере()
	Сценарий = Объект.Сценарий;
	СтрокиКОбработке = Объект.ДокументыКОбработке.Выгрузить(Новый Структура("Пометка",Истина));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ПравилаСценарногоПланированияБюджетов.Бюджет
		|ИЗ
		|	РегистрСведений.фин_ПравилаСценарногоПланированияБюджетов КАК фин_ПравилаСценарногоПланированияБюджетов
		|ГДЕ
		|	фин_ПравилаСценарногоПланированияБюджетов.ФормируемыйСценарий = &ФормируемыйСценарий
		|	И фин_ПравилаСценарногоПланированияБюджетов.ФормироватьАвтоматически";
	
	Запрос.УстановитьПараметр("ФормируемыйСценарий", Сценарий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаБюджетов = РезультатЗапроса.Выгрузить();
	
	Для Каждого СтрокаБюджетов Из ТаблицаБюджетов Цикл
		НовыйДокумент = Документы.фин_Бюджет.СоздатьДокумент();
		СтруктураОснование = Новый Структура("ВалютаДокумента,ЕдинаяВалюта,Организация,ПериодПланирования,Проект,Сценарий,УправленческоеПодразделение,УровеньДетализацииБюджета,ФормируемыйБюджет,Бюджет,ЗадаватьКурсыВалютВДокументе",ВалютаДокумента,ЕдинаяВалюта,Объект.Организация,Объект.ПериодПланирования,?(ЗначениеЗаполнено(Объект.УправленческоеПодразделение),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустоеЗначениеРазреза("Проект"),Объект.Проект),Сценарий,Объект.УправленческоеПодразделение,?(ЗначениеЗаполнено(Объект.УправленческоеПодразделение),Перечисления.фин_УровниДетализацииБюджета.БюджетПодразделения,?(ЗначениеЗаполнено(Объект.Проект),Перечисления.фин_УровниДетализацииБюджета.БюджетПроекта,Перечисления.фин_УровниДетализацииБюджета.ПустаяСсылка())),СтрокаБюджетов.Бюджет,Неопределено,Ложь);
		Попытка
			Документы.фин_Бюджет.ЗаполнитьПоОснованию(НовыйДокумент,Новый Структура("РасчетСценария,Сценарий,Бюджет",Истина,Сценарий,СтруктураОснование));
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При расчете бюджета "+СтрокаБюджетов.Бюджет+"
			|	произошла ошибка: "+ОписаниеОшибки());
		КонецПопытки;
		фин_ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(НовыйДокумент,фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"));
		НовыйДокумент.УстановитьНовыйНомер();
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При записи бюджета "+СтрокаБюджетов.Бюджет+"
			|	произошла ошибка: "+ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	ЗаполнитьДеревоОтбора();
	Элементы.Список.Обновить();
КонецПроцедуры


&НаКлиенте
Процедура НадписьПериодПланированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораПериодаПланирования",ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.фин_ВыборБюджетногоПериода",Новый Структура("Бюджет,НачалоПериодаПланирования,Периодичность,РазрешитьПроизвольныйПериод",Объект.Бюджет,Объект.ПериодПланирования,Объект.Сценарий,Ложь),ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПериодаПланирования(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		Объект.ПериодПланирования = РезультатВыбора.НачалоПериода;
		УстановитьТекстПериода();
		ОпределитьРегламент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ЗаполнитьДеревоОтбора();
КонецПроцедуры
