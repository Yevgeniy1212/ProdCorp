Процедура ПрочитатьСодержимоеТабличногоДокумента(Объект,ТабличныйДокумент) Экспорт
	Если Объект.ФайловаяИБ Тогда
		ИмяФайла = Объект.ПутьКФайлу;
	Иначе
		МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Объект.ПутьКФайлу,"\");
		ПоследнееЗначение = МассивСтрок[МассивСтрок.Количество()-1];
		ИмяФайла = КаталогВременныхФайлов()+ПоследнееЗначение;
		ПолучитьИзВременногоХранилища(Объект.АдресФайлаНаСервере).Записать(ИмяФайла);
	КонецЕсли;
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Прочитать(ИмяФайла,СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Если НЕ Объект.ФайловаяИБ Тогда
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
КонецПроцедуры

Процедура ПодготовитьДанныеТабличногоДокумента(Объект,ТабличныйДокумент) Экспорт
	ТабличныйДокумент.Очистить();
	 ТабличныйДокумент.Область().ЦветРамки=WebЦвета.НейтральноЗеленый;
	Настройка = Объект.НастройкаОбмена;
	Попытка
		ТаблицаДанных = ПолучитьИзВременногоХранилища(Объект.АдресДанных);
	исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные не определены");
	КонецПопытки;
	Если Настройка.СтрокаЗаголовкаФормы<>0 Тогда
		ОбластьЗаголовок = ТабличныйДокумент.Область("R"+Формат(Настройка.СтрокаЗаголовкаФормы,"ЧГ=")+"C1:R"+Формат(Настройка.СтрокаЗаголовкаФормы,"ЧГ=")+"C5");
		ОбластьЗаголовок.Объединить();
		ОбластьЗаголовок.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ОбластьЗаголовок.Текст = Объект.ЗаголовокФайла;
		ОбластьЗаголовок.Шрифт = Новый Шрифт(,,12,Истина);
		//ОбластьЗаголовок = ТабличныйДокумент.Область("R"+Формат(Настройка.СтрокаЗаголовкаФормы,"ЧГ="));
		//ОбластьЗаголовок.Объединить();
		//ОбластьЗаголовок.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	КонецЕсли;
	ВыводимыеРазрезы = Настройка.ТрансляцияРазрезов.Выгрузить(Новый Структура("Использовать",Истина));
	ВыводимыеРазрезы.Сортировать("Колонка");
	ВыводимыеРазрезы.Колонки.Добавить("ИмяРазреза");
	ВыводимыеРазрезы.Колонки.Добавить("УникальноеИмяРазреза");
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	Если Настройка.ИмеетсяРазрезВКолонке Тогда
		ПоказателиВКолонках = Настройка.ПоказателиВКолонках.Выгрузить();
		ИмяКолонки 						= фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Настройка.Колонка);
		КопияТаблицы 					= ТаблицаДанных.Скопировать(,ИмяКолонки);
		КопияТаблицы.Свернуть(ИмяКолонки);
		КопияТаблицы.Сортировать(ИмяКолонки);
		КопияТаблицы.Колонки[ИмяКолонки].Имя = "Значение";
		КоличествоКолонокРазреза 		= КопияТаблицы.Количество();
		КоличествоПовторяемыхКолонок 	= ПоказателиВКолонках.Количество();
	КонецЕсли;
	Если Настройка.СтрокаШапкиТаблицы<>0 Тогда
		Для Каждого Разрез Из ВыводимыеРазрезы Цикл
			ОбластьЗаголовок = ТабличныйДокумент.Область("R"+Формат(Настройка.СтрокаШапкиТаблицы,"ЧГ=")+"C"+Формат(Разрез.Колонка,"ЧГ="));
			ОбластьЗаголовок.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ОбластьЗаголовок.Текст = Разрез.Заголовок;
			ОбластьЗаголовок.Шрифт = Новый Шрифт(,,10,Истина);
			Если Настройка.РисоватьСеткуТаблицы Тогда
				ОбластьЗаголовок.Обвести(Линия,Линия,Линия,Линия);
			КонецЕсли;
			ОбластьЗаголовок.ЦветФона = WebЦвета.НейтральноЗеленый;
		КонецЦикла;
		Если Настройка.ИмеетсяРазрезВКолонке Тогда
			ТекущаяКолонка = Настройка.НачальнаяКолонка;
			Для Итерация = 1 По КоличествоКолонокРазреза Цикл
				Для Каждого Разрез Из ПоказателиВКолонках Цикл
					ОбластьЗаголовок = ТабличныйДокумент.Область("R"+Формат(Настройка.СтрокаШапкиТаблицы,"ЧГ=")+"C"+Формат(ТекущаяКолонка,"ЧГ="));
					ОбластьЗаголовок.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ОбластьЗаголовок.Текст = Разрез.Заголовок;
					ОбластьЗаголовок.Шрифт = Новый Шрифт(,,10,Истина);
					Если Настройка.РисоватьСеткуТаблицы Тогда
						ОбластьЗаголовок.Обвести(Линия,Линия,Линия,Линия);
					КонецЕсли;
					ОбластьЗаголовок.ЦветФона = WebЦвета.НейтральноЗеленый;
					ТекущаяКолонка = ТекущаяКолонка + 1;
				КонецЦикла;
			КонецЦикла;
			МинимальнаяКолонка = ВыводимыеРазрезы[0].Колонка;
			ОбластьЗаголовок = ТабличныйДокумент.Область("R"+Формат(Настройка.Ряд,"ЧГ=")+"C"+МинимальнаяКолонка+":R"+Формат(Настройка.Ряд,"ЧГ=")+"C"+Формат(Настройка.НачальнаяКолонка-1,"ЧГ="));
			ОбластьЗаголовок.Объединить();
			ОбластьЗаголовок.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ОбластьЗаголовок.Текст = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПредставлениеРазреза(Настройка.Колонка);
			ОбластьЗаголовок.Шрифт = Новый Шрифт(,,10,Истина);
			ОбластьЗаголовок.ЦветФона = WebЦвета.НейтральноЗеленый;
		КонецЕсли;
	КонецЕсли;
	СоответствиеДанныхКолонкам = Новый ТаблицаЗначений;
	СоответствиеДанныхКолонкам.Колонки.Добавить("Значение");
	СоответствиеДанныхКолонкам.Колонки.Добавить("Колонка");
	Если Настройка.ИмеетсяРазрезВКолонке Тогда
		ТекущаяКолонка = Настройка.НачальнаяКолонка;
		Для Итерация = 1 По КоличествоКолонокРазреза Цикл
			ОбластьЗаголовок 		= ТабличныйДокумент.Область("R"+Формат(Настройка.Ряд,"ЧГ=")+"C"+Формат(ТекущаяКолонка,"ЧГ=")+?(КоличествоПовторяемыхКолонок>1,":R"+Формат(Настройка.Ряд,"ЧГ=")+"C"+Формат(ТекущаяКолонка+КоличествоПовторяемыхКолонок-1,"ЧГ="),""));
			ОбластьЗаголовок.Объединить();
			ОбластьЗаголовок.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			Если ТипЗнч(КопияТаблицы[Итерация-1].Значение)=Тип("Дата") Тогда
				ОбластьЗаголовок.СодержитЗначение = Истина;
				ОбластьЗаголовок.ТипЗначения = Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
				ОбластьЗаголовок.Значение 	= КопияТаблицы[Итерация-1].Значение;
			Иначе
				ОбластьЗаголовок.Текст 	= КопияТаблицы[Итерация-1].Значение;
			КонецЕсли;
			НоваяСтрока 			= СоответствиеДанныхКолонкам.Добавить();
			НоваяСтрока.Значение 	= КопияТаблицы[Итерация-1].Значение;
			НоваяСтрока.Колонка 	= ТекущаяКолонка;
			//СоответствиеДанныхКолонкам.Вставить(КопияТаблицы[Итерация-1].Значение,ТекущаяКолонка);
			ОбластьЗаголовок.Шрифт 	= Новый Шрифт(,,10,Истина);
			Если Настройка.РисоватьСеткуТаблицы Тогда
				ОбластьЗаголовок.Обвести(Линия,Линия,Линия,Линия);
			КонецЕсли;
			ОбластьЗаголовок.ЦветФона = WebЦвета.НейтральноЗеленый;
			Для Каждого СтрокаРазрез Из ПоказателиВКолонках Цикл
				Если СтрокаРазрез.ШиринаПоУмолчанию<>0 Тогда
					Для Инд = 1 По КоличествоКолонокРазреза Цикл
						ТабличныйДокумент.Область("C"+Строка(ТекущаяКолонка+СтрокаРазрез.НомерСтроки-1)).ШиринаКолонки = СтрокаРазрез.ШиринаПоУмолчанию;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			ТекущаяКолонка = ТекущаяКолонка + КоличествоПовторяемыхКолонок;
		КонецЦикла;
	КонецЕсли;
	Измерения = ВыводимыеРазрезы.СкопироватьКолонки();
	Ресурсы = ВыводимыеРазрезы.СкопироватьКолонки();
	СтрокаРесурсов = "";
	Для Каждого СтрокаРазрез Из ВыводимыеРазрезы Цикл
		СтрокаРазрез.ИмяРазреза = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаРазрез.Разрез);
		СтрокаРазрез.УникальноеИмяРазреза = СтрокаРазрез.ИмяРазреза + ?(ВыводимыеРазрезы.НайтиСтроки(Новый Структура("Разрез",СтрокаРазрез.Разрез)).Количество()>1,"_"+СтрокаРазрез.НомерСтроки,"");
		Если СтрокаРазрез.ШиринаПоУмолчанию<>0 Тогда
			ТабличныйДокумент.Область("C"+СтрокаРазрез.Колонка).ШиринаКолонки = СтрокаРазрез.ШиринаПоУмолчанию;
		КонецЕсли;
		Если ТипЗнч(СтрокаРазрез.Разрез)=Тип("ПеречислениеСсылка.фин_РесурсыДанныхБюджетирования") Тогда
			Если НЕ Настройка.ИмеетсяРазрезВКолонке Тогда
				НС = Ресурсы.Добавить();
				ЗаполнитьЗначенияСвойств(НС,СтрокаРазрез);
				СтрокаРесурсов = СтрокаРесурсов + ?(СтрокаРесурсов="","",",")+ фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаРазрез.Разрез);
			КонецЕсли;
		Иначе
			НС = Измерения.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаРазрез);
		КонецЕсли;
	КонецЦикла;
	Если Настройка.ИмеетсяРазрезВКолонке Тогда
		Для Каждого СтрокаРазрез Из ПоказателиВКолонках Цикл
			Если ТипЗнч(СтрокаРазрез.Разрез)=Тип("ПеречислениеСсылка.фин_РесурсыДанныхБюджетирования") Тогда
				СтрокаРесурсов = СтрокаРесурсов + ?(СтрокаРесурсов="","",",")+ фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаРазрез.Разрез);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТекущаяСтрокаДанных = Настройка.НачальнаяСтрока;
	СтруктураПоиска = Новый Структура;
	СтруктураПредставлений = Новый Структура;
	ОбработатьУровеньАналитики(1,Измерения,Ресурсы,СоответствиеДанныхКолонкам,СтруктураПоиска,СтруктураПредставлений,ТаблицаДанных,ТабличныйДокумент,ТекущаяСтрокаДанных,СтрокаРесурсов,Настройка,ПоказателиВКолонках,Линия,Настройка.РисоватьСеткуТаблицы);
КонецПроцедуры

Процедура ОбработатьУровеньАналитики(Знач НомерРазреза,Измерения,Ресурсы,СоответствиеДанныхКолонкам,СтруктураПоиска,СтруктураПредставлений,ТаблицаДанных,ТабличныйДокумент,ТекущаяСтрокаДанных,СтрокаРесурсов,Настройка,ПоказателиВКолонках,Линия,РисоватьСеткуТаблицы)
	Разрез 				= Измерения[НомерРазреза-1];
	ИмяКолонки 			= Разрез.ИмяРазреза;//фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Разрез.Разрез);
	ТаблицаДанныхУровня = ТаблицаДанных.Скопировать(?(ЗначениеЗаполнено(СтруктураПоиска),СтруктураПоиска,Неопределено));
	ВсеЗначенияУровня	= ТаблицаДанныхУровня.Скопировать(,ИмяКолонки+?(СтрокаРесурсов="","",","+СтрокаРесурсов));
	ВсеЗначенияУровня.Свернуть(ИмяКолонки,СтрокаРесурсов);
	ВсеЗначенияУровня.Колонки[ИмяКолонки].Имя = "Значение";
	ВсеЗначенияУровня.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка"));
	ВсеЗначенияУровня.Колонки.Добавить("Код",Новый ОписаниеТипов("Строка"));
	Для Каждого СтрокаЗначений Из ВсеЗначенияУровня Цикл
		Если ЗначениеЗаполнено(СтрокаЗначений.Значение) И ТипЗнч(СтрокаЗначений.Значение)<>Тип("Дата") И Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(СтрокаЗначений.Значение))=Ложь Тогда
			СтрокаЗначений.Наименование	= СтрокаЗначений.Значение.Наименование;
			СтрокаЗначений.Код 			= ?(ТипЗнч(СтрокаЗначений.Значение)=Тип("СправочникСсылка.фин_СтатьиБюджета"),СтрокаЗначений.Значение.КодСтрокиБюджета,СтрокаЗначений.Значение.Код);
		КонецЕсли;
	КонецЦикла;
	КолонкаСортировки = ?(ИмяКолонки="ПериодПланирования" ИЛИ НЕ ЗначениеЗаполнено(Разрез.Данные),"Значение",?(Разрез.Данные=Перечисления.фин_ВариантыСинхронизацииСправочников.ПоКоду,"Код","Наименование"));
	ВсеЗначенияУровня.Сортировать(КолонкаСортировки);
	ТипДата = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
	Для Каждого СтрокаЗначений Из ВсеЗначенияУровня Цикл
		 СтруктураПоиска.Вставить(ИмяКолонки,СтрокаЗначений.Значение);
		// СтруктураПредставлений.Вставить(ИмяКолонки,?(ТипЗнч(СтрокаЗначений[КолонкаСортировки])=Тип("Дата"),Формат(СтрокаЗначений[КолонкаСортировки],"ДФ=dd.MM.yyyy"),СтрокаЗначений[КолонкаСортировки]));
		 СтруктураПредставлений.Вставить(Разрез.УникальноеИмяРазреза,СтрокаЗначений[КолонкаСортировки]);
		 Если Разрез.Итоги ИЛИ Разрез.ТолькоВИтогах Тогда
			ОбластьДокумента = ТабличныйДокумент.Область("R"+Формат(ТекущаяСтрокаДанных,"ЧГ=")+"C"+Разрез.Колонка);
			//ОбластьДокумента.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			Если ТипЗнч(СтрокаЗначений[КолонкаСортировки])=Тип("Дата") Тогда
				ОбластьДокумента.СодержитЗначение = Истина;
				ОбластьДокумента.ТипЗначения = Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
				ОбластьДокумента.Значение = СтрокаЗначений[КолонкаСортировки];
			Иначе
				ОбластьДокумента.Текст = СтрокаЗначений[КолонкаСортировки];
			КонецЕсли;
			ТабличныйДокумент.НачатьГруппуСтрок(ОбластьДокумента.Текст);
			Если РисоватьСеткуТаблицы Тогда
				ОбластьДокумента.Обвести(?(НомерРазреза=1,Линия,Неопределено),Линия,,Линия);
				Для Каждого Измерение Из Измерения Цикл
					Если НЕ Измерение=Разрез Тогда
						ОбластьДокумента = ТабличныйДокумент.Область("R"+Формат(ТекущаяСтрокаДанных,"ЧГ=")+"C"+Измерение.Колонка);
						Если РисоватьСеткуТаблицы Тогда
							ОбластьДокумента.Обвести(?(Измерения.Индекс(Измерение)=0,Линия,Неопределено),Линия,?(Измерения.Индекс(Измерение)=Измерения.Количество()-1,Линия,Неопределено),Линия);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		 	ВывестиРесурсы(ТекущаяСтрокаДанных,СтрокаЗначений,Ресурсы,СтруктураПоиска,ТаблицаДанныхУровня,ТабличныйДокумент,Настройка,СоответствиеДанныхКолонкам,СтрокаРесурсов,ПоказателиВКолонках,Линия,РисоватьСеткуТаблицы);
			ТекущаяСтрокаДанных = ТекущаяСтрокаДанных + 1;
		ИначеЕсли НомерРазреза = Измерения.Количество() Тогда
			Для Каждого Измерение Из Измерения Цикл
				Если НЕ Измерение.ТолькоВИтогах Тогда
					ОбластьДокумента = ТабличныйДокумент.Область("R"+Формат(ТекущаяСтрокаДанных,"ЧГ=")+"C"+Измерение.Колонка);
					ОбластьДокумента.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
					ЗначениеЗаполнения = СтруктураПредставлений[Измерение.УникальноеИмяРазреза];
					Если ТипЗнч(ЗначениеЗаполнения)=Тип("Дата") Тогда
						ОбластьДокумента.СодержитЗначение = Истина;
						ОбластьДокумента.ТипЗначения = Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
						ОбластьДокумента.Значение = ЗначениеЗаполнения;
					Иначе
						ОбластьДокумента.Текст = ЗначениеЗаполнения;
					КонецЕсли;
					Если РисоватьСеткуТаблицы Тогда
						ОбластьДокумента.Обвести(Линия,Линия,Линия,Линия);
					КонецЕсли;
				Иначе
					ОбластьДокумента = ТабличныйДокумент.Область("R"+Формат(ТекущаяСтрокаДанных,"ЧГ=")+"C"+Измерение.Колонка);
					Если РисоватьСеткуТаблицы Тогда
						ОбластьДокумента.Обвести(?(Измерения.Индекс(Измерение)=0,Линия,Неопределено),Линия,?(Измерения.Индекс(Измерение)=Измерения.Количество()-1,Линия,Неопределено),Линия);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		 	ВывестиРесурсы(ТекущаяСтрокаДанных,СтрокаЗначений,Ресурсы,СтруктураПоиска,ТаблицаДанныхУровня,ТабличныйДокумент,Настройка,СоответствиеДанныхКолонкам,СтрокаРесурсов,ПоказателиВКолонках,Линия,РисоватьСеткуТаблицы);
			ТекущаяСтрокаДанных = ТекущаяСтрокаДанных + 1;
		 КонецЕсли;
		 Если НомерРазреза<>Измерения.Количество() Тогда
			ОбработатьУровеньАналитики(НомерРазреза+1,Измерения,Ресурсы,СоответствиеДанныхКолонкам,СтруктураПоиска,СтруктураПредставлений,ТаблицаДанных,ТабличныйДокумент,ТекущаяСтрокаДанных,СтрокаРесурсов,Настройка,ПоказателиВКолонках,Линия,РисоватьСеткуТаблицы);
		 КонецЕсли;
		 Если Разрез.Итоги ИЛИ Разрез.ТолькоВИтогах Тогда
			 ТабличныйДокумент.ЗакончитьГруппуСтрок();
		 КонецЕсли;
	КонецЦикла;
	СтруктураПоиска.Удалить(ИмяКолонки);
	СтруктураПредставлений.Удалить(ИмяКолонки);
КонецПроцедуры

Процедура ВывестиРесурсы(ТекущаяСтрокаДанных,СтрокаЗначений,Ресурсы,СтруктураПоиска,ТаблицаДанныхУровня,ТабличныйДокумент,Настройка,СоответствиеДанныхКолонкам,СтрокаРесурсов,ПоказателиВКолонках,Линия,РисоватьСеткуТаблицы)
	Если Настройка.ИмеетсяРазрезВКолонке Тогда
		Для Каждого ЭлементКолонок Из СоответствиеДанныхКолонкам Цикл
			ТаблицаЗаменыРесурсов = ПоказателиВКолонках.Скопировать();
			ТаблицаЗаменыРесурсов.Колонки.Добавить("Колонка");
			СтартоваяКолонка = ЭлементКолонок.Колонка;
			Для Каждого СтрокаТаблицы Из ТаблицаЗаменыРесурсов Цикл
				СтрокаТаблицы.Колонка = СтартоваяКолонка;
				СтартоваяКолонка = СтартоваяКолонка + 1;
			КонецЦикла;
			мТаблицаДанных = ТаблицаДанныхУровня.Скопировать(СтруктураПоиска);
			мТаблицаДанных = мТаблицаДанных.Скопировать(Новый Структура(фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Настройка.Колонка),ЭлементКолонок.Значение));
			мТаблицаДанных.Свернуть(,СтрокаРесурсов);
			Если мТаблицаДанных.Количество()=0 Тогда
				мТаблицаДанных.Добавить();
			КонецЕсли;
			ВывестиЭлементРесурсов(ТекущаяСтрокаДанных,мТаблицаДанных[0],ТаблицаЗаменыРесурсов,ТабличныйДокумент,Линия,РисоватьСеткуТаблицы);
		КонецЦикла;
	Иначе
		ВывестиЭлементРесурсов(ТекущаяСтрокаДанных,СтрокаЗначений,Ресурсы,ТабличныйДокумент,Линия,РисоватьСеткуТаблицы);
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиЭлементРесурсов(ТекущаяСтрокаДанных,СтрокаЗначений,Ресурсы,ТабличныйДокумент,Линия,РисоватьСеткуТаблицы)
		Количество 		= 0;
		СуммаУпр 		= 0;
		ВалютнаяСумма 	= 0;
		Для Каждого Ресурс Из Ресурсы Цикл
			Если Ресурс.Разрез = Перечисления.фин_РесурсыДанныхБюджетирования.ЦенаУпр ИЛИ Ресурс.Разрез = Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяЦена Тогда
				Продолжить;
			КонецЕсли;
			ОбластьДокумента = ТабличныйДокумент.Область("R"+Формат(ТекущаяСтрокаДанных,"ЧГ=")+"C"+Ресурс.Колонка);
			ОбластьДокумента.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			Значение = СтрокаЗначений[фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Ресурс.Разрез)];
			ОбластьДокумента.СодержитЗначение = Истина;
			ОбластьДокумента.ТипЗначения = Новый ОписаниеТипов("Число");
			ОбластьДокумента.Значение = Значение;
			Если РисоватьСеткуТаблицы Тогда
				ОбластьДокумента.Обвести(Линия,Линия,Линия,Линия);
			КонецЕсли;
			Если Ресурс.Разрез = Перечисления.фин_РесурсыДанныхБюджетирования.Количество Тогда
				Количество = Значение;
			ИначеЕсли Ресурс.Разрез = Перечисления.фин_РесурсыДанныхБюджетирования.СуммаУпр Тогда
				СуммаУпр = Значение;
			ИначеЕсли Ресурс.Разрез = Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяСумма Тогда
				ВалютнаяСумма = Значение;
			КонецЕсли;
		КонецЦикла;
		Для Каждого Ресурс Из Ресурсы Цикл
			Если НЕ (Ресурс.Разрез = Перечисления.фин_РесурсыДанныхБюджетирования.ЦенаУпр ИЛИ Ресурс.Разрез = Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяЦена) Тогда
				Продолжить;
			КонецЕсли;
			ОбластьДокумента = ТабличныйДокумент.Область("R"+Формат(ТекущаяСтрокаДанных,"ЧГ=")+"C"+Ресурс.Колонка);
			ОбластьДокумента.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			Значение = 0;
			Если Ресурс.Разрез = Перечисления.фин_РесурсыДанныхБюджетирования.ЦенаУпр Тогда
				Значение = ?(Количество=0,0,Окр(СуммаУпр/Количество,2));
			ИначеЕсли Ресурс.Разрез = Перечисления.фин_РесурсыДанныхБюджетирования.ВалютнаяЦена Тогда
				Значение = ?(Количество=0,0,Окр(ВалютнаяСумма/Количество,2));
			КонецЕсли;
			ОбластьДокумента.СодержитЗначение = Истина;
			ОбластьДокумента.ТипЗначения = Новый ОписаниеТипов("Число");
			ОбластьДокумента.Значение = Значение;
			Если РисоватьСеткуТаблицы Тогда
				ОбластьДокумента.Обвести(Линия,Линия,Линия,Линия);
			КонецЕсли;
		КонецЦикла;
КонецПроцедуры

Функция ПолучитьТаблицуДанных(Объект,ТабличныйДокумент) Экспорт
	Настройка = Объект.НастройкаОбмена;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Каждого Реквизит Из Метаданные.Документы.фин_Бюджет.ТабличныеЧасти.ОборотыПоСтатьям.Реквизиты Цикл
		ТаблицаЗначений.Колонки.Добавить(Реквизит.Имя,Реквизит.Тип);
	КонецЦикла;
	ТаблицаЗначений.Колонки.Цена.Имя 	= "ВалютнаяЦена";
	ТаблицаЗначений.Колонки.Сумма.Имя 	= "ВалютнаяСумма";
	ТаблицаЗначений.Колонки.Добавить("СуммаУпр",Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("ЦенаУпр",Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.ВалютаОперации.Имя 	= "Валюта";
	
	СоответствиеДанныхКолонкам = Новый ТаблицаЗначений;
	СоответствиеДанныхКолонкам.Колонки.Добавить("Значение");
	СоответствиеДанныхКолонкам.Колонки.Добавить("Колонка");

	ВыводимыеРазрезы = Настройка.ТрансляцияРазрезов.Выгрузить(Новый Структура("Использовать",Истина));
	ВыводимыеРазрезы.Сортировать("Колонка");
	ВыводимыеРазрезы.Колонки.Добавить("ИмяРазреза");
	ВыводимыеРазрезы.Колонки.Добавить("УникальноеИмяРазреза");
	Если Настройка.ИмеетсяРазрезВКолонке Тогда
		ПоказателиВКолонках 			= Настройка.ПоказателиВКолонках.Выгрузить();
		ПоказателиВКолонках.Колонки.Добавить("ИмяРазреза");
		ИмяКолонки 						= фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Настройка.Колонка);
		КоличествоПовторяемыхКолонок 	= ПоказателиВКолонках.Количество();
		ТекущаяКолонка = Настройка.НачальнаяКолонка;
		Пока ТекущаяКолонка<=ТабличныйДокумент.ШиринаТаблицы Цикл
			ОбластьЗаголовок 		= ТабличныйДокумент.Область("R"+Формат(Настройка.Ряд,"ЧГ=")+"C"+Формат(ТекущаяКолонка,"ЧГ=")+?(КоличествоПовторяемыхКолонок>1,":R"+Формат(Настройка.Ряд,"ЧГ=")+"C"+Формат(ТекущаяКолонка+КоличествоПовторяемыхКолонок-1,"ЧГ="),""));
			Если ОбластьЗаголовок.СодержитЗначение  Тогда
				Значение = ОбластьЗаголовок.Значение;
			Иначе
				Значение = ЗначениеРазреза(ОбластьЗаголовок.Текст,Настройка.Колонка,Настройка.Данные,Объект.Бюджет);
			КонецЕсли;
			НоваяСтрока 			= СоответствиеДанныхКолонкам.Добавить();
			НоваяСтрока.Значение 	= Значение;
			НоваяСтрока.Колонка 	= ТекущаяКолонка;
			ТекущаяКолонка = ТекущаяКолонка + КоличествоПовторяемыхКолонок;
		КонецЦикла;
		КоличествоКолонокРазреза 		= СоответствиеДанныхКолонкам.Количество();
	КонецЕсли;
	Измерения = ВыводимыеРазрезы.СкопироватьКолонки();
	Ресурсы = ВыводимыеРазрезы.СкопироватьКолонки();
	СтрокаРесурсов = "";
	Для Каждого СтрокаРазрез Из ВыводимыеРазрезы Цикл
		СтрокаРазрез.ИмяРазреза = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаРазрез.Разрез);
		СтрокаРазрез.УникальноеИмяРазреза = СтрокаРазрез.ИмяРазреза + ?(ВыводимыеРазрезы.НайтиСтроки(Новый Структура("Разрез",СтрокаРазрез.Разрез)).Количество()>1,"_"+СтрокаРазрез.НомерСтроки,"");
		Если ТипЗнч(СтрокаРазрез.Разрез)=Тип("ПеречислениеСсылка.фин_РесурсыДанныхБюджетирования") Тогда
			Если НЕ Настройка.ИмеетсяРазрезВКолонке Тогда
				НС = Ресурсы.Добавить();
				ЗаполнитьЗначенияСвойств(НС,СтрокаРазрез);
				СтрокаРесурсов = СтрокаРесурсов + ?(СтрокаРесурсов="","",",")+ фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаРазрез.Разрез);
			КонецЕсли;
		Иначе
			НС = Измерения.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаРазрез);
		КонецЕсли;
	КонецЦикла;
	Если Настройка.ИмеетсяРазрезВКолонке Тогда
		Для Каждого СтрокаРазрез Из ПоказателиВКолонках Цикл
			СтрокаРазрез.ИмяРазреза = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаРазрез.Разрез);
			Если ТипЗнч(СтрокаРазрез.Разрез)=Тип("ПеречислениеСсылка.фин_РесурсыДанныхБюджетирования") Тогда
				СтрокаРесурсов = СтрокаРесурсов + ?(СтрокаРесурсов="","",",")+ СтрокаРазрез.ИмяРазреза;
			КонецЕсли;
		КонецЦикла;
		ИмяВР = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(Настройка.Колонка);
	КонецЕсли;
	ТекущаяСтрокаДанных = Настройка.НачальнаяСтрока;
	СтруктураПоиска = Новый Структура;
	СтруктураСтроки = Новый Структура;
	СтруктураПредставлений = Новый Структура;
	Для Ряд = Настройка.НачальнаяСтрока По ТабличныйДокумент.ВысотаТаблицы Цикл
		СчитыватьРесурсы = Истина;
		Для Каждого Измерение Из Измерения Цикл
			ОбластьЗаголовок 		= ТабличныйДокумент.Область("R"+Формат(Ряд,"ЧГ=")+"C"+Формат(Измерение.Колонка,"ЧГ="));
			Если ОбластьЗаголовок.СодержитЗначение  Тогда
				Значение = ОбластьЗаголовок.Значение;
			Иначе
				Значение = ЗначениеРазреза(ОбластьЗаголовок.Текст,Измерение.Разрез,Измерение.Данные,Объект.Бюджет);
			КонецЕсли;
			СтруктураСтроки.Вставить(Измерение.ИмяРазреза,?(ОбластьЗаголовок.СодержитЗначение,ОбластьЗаголовок.Значение,ОбластьЗаголовок.Текст));
			Если Измерение.ТолькоВИтогах И ЗначениеЗаполнено(?(ОбластьЗаголовок.СодержитЗначение,ОбластьЗаголовок.Значение,ОбластьЗаголовок.Текст)) Тогда
				СчитыватьРесурсы = Ложь;
				Если Измерения.Индекс(Измерение)=0 Тогда
					СтруктураПоиска = Новый Структура;
				КонецЕсли;
				СтруктураПоиска.Вставить(Измерение.ИмяРазреза,Значение);
			ИначеЕсли ЗначениеЗаполнено(?(ОбластьЗаголовок.СодержитЗначение,ОбластьЗаголовок.Значение,ОбластьЗаголовок.Текст)) Тогда
				СтруктураПоиска.Вставить(Измерение.ИмяРазреза,Значение);
			ИначеЕсли Измерение.ТолькоВИтогах = Ложь И Измерение.Обязательный Тогда
				СчитыватьРесурсы = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если СчитыватьРесурсы Тогда
			Заполнено = Ложь;
			Для Каждого Измерение Из Измерения Цикл
				Если Не Измерение.Итоги И ЗначениеЗаполнено(СтруктураСтроки[Измерение.ИмяРазреза]) Тогда
					Заполнено = Истина;
				КонецЕсли;
			КонецЦикла;
			Если НЕ Заполнено Тогда
				СчитыватьРесурсы = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если СчитыватьРесурсы Тогда
			Если Настройка.ИмеетсяРазрезВКолонке Тогда
				Для Каждого СтрокаВР Из СоответствиеДанныхКолонкам Цикл
					СтруктураПоиска.Вставить(ИмяВР,СтрокаВР.Значение);
					РесурсыКолонок = ПоказателиВКолонках.Скопировать();
					РесурсыКолонок.Колонки.Добавить("Колонка");
					Для Каждого РесурсКолонок Из РесурсыКолонок Цикл
						РесурсКолонок.Колонка = СтрокаВР.Колонка + РесурсКолонок.НомерСтроки - 1;
					КонецЦикла;
					СчитатьРесурсы(ТаблицаЗначений,СтруктураПоиска,РесурсыКолонок,Ряд,ТабличныйДокумент,Объект.Бюджет);
				КонецЦикла;
			Иначе
				СчитатьРесурсы(ТаблицаЗначений,СтруктураПоиска,Ресурсы,Ряд,ТабличныйДокумент,Объект.Бюджет);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
КонецФункции

Процедура СчитатьРесурсы(ТаблицаЗначений,СтруктураПоиска,Ресурсы,Ряд,ТабличныйДокумент,Бюджет)
	НоваяСтрока = ТаблицаЗначений.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоиска);
	Для Каждого Измерение Из Ресурсы Цикл
		ОбластьЗаголовок 		= ТабличныйДокумент.Область("R"+Формат(Ряд,"ЧГ=")+"C"+Формат(Измерение.Колонка,"ЧГ="));
		Если ОбластьЗаголовок.СодержитЗначение  Тогда
			Значение = ОбластьЗаголовок.Значение;
		Иначе
			Значение = ЗначениеРазреза(ОбластьЗаголовок.Текст,Измерение.Разрез,Измерение.Данные,Бюджет);
		КонецЕсли;
		НоваяСтрока[Измерение.ИмяРазреза] = Значение;
	КонецЦикла;
КонецПроцедуры

Функция ЗначениеРазреза(Текст,Разрез,СпособПоиска=Неопределено,Бюджет=Неопределено)
	Если Разрез = Перечисления.фин_ФактическиеПоказателиБюджетирования.ПериодПланирования Тогда
		МассивСимволов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст,".");
		День = 1;
		Месяц = 1;
		Год = 1;
		Если МассивСимволов.Количество()=0 Тогда
			Возврат '00010101';	
		ИначеЕсли МассивСимволов.Количество()=1 Тогда
			Попытка
				Год = Число(МассивСимволов[0]);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось привести строку """+Текст+""" к дате!");
				Возврат '00010101';	
			КонецПопытки;
		ИначеЕсли МассивСимволов.Количество()=2 Тогда
			Попытка
				Месяц = Число(МассивСимволов[0]);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось привести строку """+Текст+""" к дате!");
				Возврат '00010101';	
			КонецПопытки;
			Попытка
				Год = Число(МассивСимволов[1]);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось привести строку """+Текст+""" к дате!");
				Возврат '00010101';	
			КонецПопытки;
		Иначе
			Попытка
				День = Число(МассивСимволов[0]);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось привести строку """+Текст+""" к дате!");
				Возврат '00010101';	
			КонецПопытки;
			Попытка
				Месяц = Число(МассивСимволов[1]);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось привести строку """+Текст+""" к дате!");
				Возврат '00010101';	
			КонецПопытки;
			Попытка
				Год = Число(МассивСимволов[2]);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось привести строку """+Текст+""" к дате!");
				Возврат '00010101';	
			КонецПопытки;
		КонецЕсли;
		Попытка
			Результат = Дата(Год,Месяц,День);
			Возврат Результат;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось привести строку """+Текст+""" к дате!");
			Возврат '00010101';	
		КонецПопытки;             		
	ИначеЕсли ТипЗнч(Разрез)=Тип("ПеречислениеСсылка.фин_РесурсыДанныхБюджетирования") Тогда
		Попытка
			Результат = Вычислить(СтрЗаменить(СтрЗаменить(Текст,",",".")," ",""));
			Возврат Результат;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось привести строку """+Текст+""" к числу! Разрез: "+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПредставлениеРазреза(Разрез));
			Возврат '00010101';	
		КонецПопытки;
	ИначеЕсли ЗначениеЗаполнено(СпособПоиска) Тогда
		ТипРазреза = фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипЗначенияГруппировки(Разрез);
		Если ТипРазреза<>Неопределено Тогда
			Для Каждого Тип Из ТипРазреза.Типы() Цикл
				ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
				Если ОбъектМетаданных<>Неопределено Тогда
					ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
					Если СпособПоиска = Перечисления.фин_ВариантыСинхронизацииСправочников.ПоНаименованию Тогда
						Если Разрез = Перечисления.фин_ДополнительныеРазрезыОтчетов.СтатьяБюджета Тогда
							Значение = Справочники.фин_СтатьиБюджета.НайтиПоНаименованию(Текст,Истина,,Бюджет);
						Иначе
							Если Найти(ПолноеИмя,"Справочник.") <> 0 Тогда 
								Значение = Справочники[ОбъектМетаданных.Имя].НайтиПоНаименованию(Текст,Истина);
							ИначеЕсли Найти(ПолноеИмя,"ПланВидовРасчета.") <> 0 Тогда 
								Значение = ПланыВидовРасчета[ОбъектМетаданных.Имя].НайтиПоНаименованию(Текст,Истина);
							ИначеЕсли Найти(ПолноеИмя,"ПланВидовХарактеристик.") <> 0 Тогда 
								Значение = ПланыВидовХарактеристик[ОбъектМетаданных.Имя].НайтиПоНаименованию(Текст,Истина);
							ИначеЕсли Найти(ПолноеИмя,"ПланСчетов.") <> 0 Тогда 
								Значение = ПланыСчетов[ОбъектМетаданных.Имя].НайтиПоНаименованию(Текст,Истина);
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли СпособПоиска = Перечисления.фин_ВариантыСинхронизацииСправочников.ПоКоду Тогда
						Если Разрез = Перечисления.фин_ДополнительныеРазрезыОтчетов.СтатьяБюджета Тогда
							Значение = Справочники.фин_СтатьиБюджета.НайтиПоКоду(Текст,Истина,,Бюджет);
						Иначе
							Если Найти(ПолноеИмя,"Справочник.") <> 0 Тогда 
								Значение = Справочники[ОбъектМетаданных.Имя].НайтиПоКоду(Текст,Истина);
							ИначеЕсли Найти(ПолноеИмя,"ПланВидовРасчета.") <> 0 Тогда 
								Значение = ПланыВидовРасчета[ОбъектМетаданных.Имя].НайтиПоКоду(Текст,Истина);
							ИначеЕсли Найти(ПолноеИмя,"ПланВидовХарактеристик.") <> 0 Тогда 
								Значение = ПланыВидовХарактеристик[ОбъектМетаданных.Имя].НайтиПоКоду(Текст,Истина);
							ИначеЕсли Найти(ПолноеИмя,"ПланСчетов.") <> 0 Тогда 
								Значение = ПланыСчетов[ОбъектМетаданных.Имя].НайтиПоКоду(Текст,Истина);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(Значение) Тогда
						Возврат Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Возврат ТипРазреза.ПривестиЗначение(Неопределено);
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции