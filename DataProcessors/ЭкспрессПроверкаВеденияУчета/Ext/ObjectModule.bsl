# Если Клиент Тогда
Перем НП Экспорт;                  // Настройка периода

// Цвета, используемые в печатной форме отчета
Перем ЦветФонаОшибок;
Перем ЦветФонаБезОшибок;
Перем ЦветФонаКолОшибок;
Перем ЦветТекстаОшибок;
Перем ЦветТекстаКолОшибок;

# КонецЕсли

Перем ВысотаОбластей Экспорт;      // Структура. Ключ - имя области, значение - высота области
Перем КонецДатыКон;                // Конец дня
Перем ОбщаяСтруктураФорматаПолей;  // Для автоформатирования областей детального отчета
Перем ОбщаяСтруктураЗаголовков;    // Для автоформатирования областей детального отчета
Перем ОбщаяСтруктураШириныКолонок; // Для автоформатирования областей детального отчета
Перем ОбщаяСтруктураРасшифровки;   // Для расшифровки детального отчета

Перем мОтображатьСтруктурныеПодразделения Экспорт;

//-КУФИБ - начало
Перем ТаблицаДоступностиПроверок;
//-КУФИБ - конец

///////////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и функции

Функция ПолучитьНомерЧислом(НомерСтрокой)

	ЧисловаяЧастьНомера = "";
	ДлинаСтроки = СтрДлина(НомерСтрокой);
	Для Счетчик = 0 По ДлинаСтроки - 1 Цикл
		НомерСимвола = ДлинаСтроки - Счетчик;
		ТекСимвол = Сред(НомерСтрокой, НомерСимвола, 1);
		ЭтоЧисло = Найти("0123456789", ТекСимвол) > 0;
		Если ЭтоЧисло Тогда
			ЧисловаяЧастьНомера = ТекСимвол + ЧисловаяЧастьНомера;
		ИначеЕсли НЕ ПустаяСтрока(ЧисловаяЧастьНомера) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НомерЧислом = Число("0"+ЧисловаяЧастьНомера);
	Возврат НомерЧислом;

КонецФункции 

// Функция проверяет заполненность реквизитов
// и возвращает Ложь
Функция ПроверитьЗаполнениеРеквизитов(ИмяЭлементаФормыСОшибкой = "") Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		#Если Клиент Тогда
		Предупреждение("Необходимо выбрать организацию для проверки!");
		#КонецЕсли
		ИмяЭлементаФормыСОшибкой = "Организация";
		Возврат Ложь;
	КонецЕсли;

	Если ДатаНач = '00010101' Тогда
		#Если Клиент Тогда
		Предупреждение("Необходимо выбрать дату начала периода проверки!");
		#КонецЕсли
		ИмяЭлементаФормыСОшибкой = "ДатаНач";
		Возврат Ложь;
	КонецЕсли;
	
	Если ДатаКон = '00010101' Тогда
		#Если Клиент Тогда
		Предупреждение("Необходимо выбрать дату окончания периода проверки!");
		#КонецЕсли
		ИмяЭлементаФормыСОшибкой = "ДатаКон";
		Возврат Ложь;
	ИначеЕсли ДатаКон < ДатаНач Тогда
		#Если Клиент Тогда
		Предупреждение("Необходимо выбрать дату окончания периода проверки
		|более позднюю, чем дата начала!");
		#КонецЕсли
		ИмяЭлементаФормыСОшибкой = "ДатаКон";
		Возврат Ложь;
	КонецЕсли;
	
	НетВыбранныхПроверок = ДеревоПроверок.Строки.Найти(1, "Включить", Истина) = Неопределено;
	Если НетВыбранныхПроверок Тогда
		#Если Клиент Тогда
		Предупреждение("Необходимо выбрать хотя бы одну проверку!");
		#КонецЕсли
		ИмяЭлементаФормыСОшибкой = "ДеревоПроверок";
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьЗаполнениеРеквизитов()

Процедура ПроверитьПравилоНаличиеУчПНалУчет(СтрокаПравила)
	Перем Отказ;
	
	УчетнаяПолитикаНалУчет = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДатаНач, Отказ, Организация, "Нал");
	ИсходящиеДанные.Вставить("УчетнаяПолитикаНалУчет", УчетнаяПолитикаНалУчет);
	НетУчетнойПолитики = УчетнаяПолитикаНалУчет.Количество() = 0;
	
	СтрокаПравила.ОбнаруженыОшибки  = НетУчетнойПолитики;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
КонецПроцедуры

// Зарплата

Процедура ПроверитьПравилоЗаполненностьРегКалендаря(СтрокаПравила)
	
	КалендарьЗаполнен = ПроцедурыУправленияПерсоналом.РегламентированныйКалендарьЗаполнен(НачалоМесяца(ДатаНач), КонецМесяца(ДатаКон), Ложь);
	
	ИсходящиеДанные.Вставить("ЗаполненностьРегКалендаря", КалендарьЗаполнен);
		
	СтрокаПравила.ОбнаруженыОшибки  = НЕ КалендарьЗаполнен;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
КонецПроцедуры

// - ЗУП - начало

////////////////////////////////////////////////////////////////////////////////
// СПРАВОЧНАЯ ИНФОРМАЦИЯ

Процедура ПроверитьПравилоЗаполненностьГрафиковРаботы(СтрокаПравила)
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ТаблицаПериодов.Колонки.Добавить("Месяц", Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыДаты));
	Месяц = НачалоМесяца(ДатаНач);
	Пока Месяц <= НачалоМесяца(ДатаКон) Цикл 
		НоваяСтрока = ТаблицаПериодов.Добавить();
		НоваяСтрока.Месяц = Месяц;
		Месяц = ДобавитьМесяц(Месяц, 1);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("парамДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("ТаблицаПериодов", ТаблицаПериодов);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПериодов.Месяц КАК МесяцПроверки
		|ПОМЕСТИТЬ ВТ_ТаблицаПериодов
		|ИЗ
		|	&ТаблицаПериодов КАК ТаблицаПериодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикиРаботы.Ссылка КАК ГрафикРаботы,
		|	ТаблицаПериодов.МесяцПроверки КАК МесяцПроверки
		|ИЗ
		|	Справочник.ГрафикиРаботы КАК ГрафикиРаботы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаПериодов КАК ТаблицаПериодов
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботы.Ссылка)
		|			И (ГрафикиРаботыПоВидамВремени.Месяц = ТаблицаПериодов.МесяцПроверки)
		|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
		|
		|СГРУППИРОВАТЬ ПО
		|	ГрафикиРаботы.Ссылка,
		|	ТаблицаПериодов.МесяцПроверки
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0)) = 0 И
		|	СУММА(ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0)) = 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГрафикРаботы,
		|	ТаблицаПериодов.МесяцПроверки";
	
	Результат = Запрос.Выполнить();	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ЗаполненностьГрафиковРаботыРезультатЗапроса", Результат);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ГрафикРаботы", "График работы");
		СтруктураЗаголовков.Вставить("МесяцПроверки", "Период");
		ИсходящиеДанные.Вставить("ЗаполненностьГрафиковРаботыСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("ГрафикРаботы" , 40);
		СтруктураШириныКолонок.Вставить("МесяцПроверки", 20);
		ИсходящиеДанные.Вставить("ЗаполненностьГрафиковРаботыСтруктураШириныКолонок", СтруктураШириныКолонок);
		
		СтруктураФорматаПолей = Новый Структура;			
		СтруктураФорматаПолей.Вставить("МесяцПроверки", "ДФ='ММММ гггг'");
		ИсходящиеДанные.Вставить("ЗаполненностьГрафиковРаботыСтруктураФорматаПолей", СтруктураФорматаПолей);

		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ГрафикРаботы", "ГрафикРаботы");
		ИсходящиеДанные.Вставить("ЗаполненностьГрафиковРаботыСтруктураРасшифровки", СтруктураРасшифровки);

	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПравилоЗаполненностьРегламентированныхПоказателей(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамПроверяемыйПериод", НачалоГода(ДатаНач));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегламентированныеРасчетныеПоказатели.РазмерМЗП,
		|	РегламентированныеРасчетныеПоказатели.РазмерМРП
		|ИЗ
		|	РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(, Период = &парамПроверяемыйПериод) КАК РегламентированныеРасчетныеПоказатели
		|";
		
	Результат = Запрос.Выполнить();	
	СтрокаПравила.ОбнаруженыОшибки  = Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
КонецПроцедуры	

Процедура ПроверитьПравилоКорректностьЗаполненияДанныхФизЛиц(СтрокаПравила)
	
	
	
	

КонецПроцедуры

Процедура ПроверитьПравилоПрименениеВычетовПоОсновномуМестуРаботы(СтрокаПравила)
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ТаблицаПериодов.Колонки.Добавить("Месяц", Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыДаты));
	Месяц = НачалоМесяца(ДатаНач);
	Пока Месяц <= НачалоМесяца(ДатаКон) Цикл 
		НоваяСтрока = ТаблицаПериодов.Добавить();
		НоваяСтрока.Месяц = Месяц;
		Месяц = ДобавитьМесяц(Месяц, 1);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ТаблицаПериодов", ТаблицаПериодов);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПериодов.Месяц КАК МесяцПроверки
		|ПОМЕСТИТЬ ВТ_ТаблицаПериодов
		|ИЗ
		|	&ТаблицаПериодов КАК ТаблицаПериодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПериодыРаботников.МесяцПроверки,
		|	ПериодыРаботников.Сотрудник.Физлицо КАК Физлицо,
		|	РаботникиОрганизаций.Организация,
		|	РаботникиОрганизаций.ОбособленноеПодразделение
		|ПОМЕСТИТЬ ВТ_ПериодыРаботников
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаботникиОрганизаций.Организация КАК Организация,
		|		РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|		ТаблицаПериодов.МесяцПроверки КАК МесяцПроверки,
		|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК ПериодРаботника
		|	ИЗ
		|		ВТ_ТаблицаПериодов КАК ТаблицаПериодов
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|			ПО ТаблицаПериодов.МесяцПроверки >= РаботникиОрганизаций.Период
		|	ГДЕ
		|		РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
		|		И РаботникиОрганизаций.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|		И РаботникиОрганизаций.ОбособленноеПодразделение = &Организация
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаПериодов.МесяцПроверки,
		|		РаботникиОрганизаций.Организация,
		|		РаботникиОрганизаций.Сотрудник) КАК ПериодыРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО ПериодыРаботников.Организация = РаботникиОрганизаций.Организация
		|			И ПериодыРаботников.Сотрудник = РаботникиОрганизаций.Сотрудник
		|			И ПериодыРаботников.ПериодРаботника = РаботникиОрганизаций.Период
		|ГДЕ
		|	РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды_ИПНПрименениеВычетов.МесяцПроверки,
		|	Периоды_ИПНПрименениеВычетов.Физлицо,
		|	ИПНПрименениеВычетов.Налогоплательщик
		|ПОМЕСТИТЬ ВТ_ИПНПрименениеВычетов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаПериодов.МесяцПроверки КАК МесяцПроверки,
		|		ИПНПрименениеВычетов.Физлицо КАК Физлицо,
		|		МАКСИМУМ(ИПНПрименениеВычетов.Период) КАК Период
		|	ИЗ
		|		ВТ_ТаблицаПериодов КАК ТаблицаПериодов
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПрименениеВычетов КАК ИПНПрименениеВычетов
		|			ПО ТаблицаПериодов.МесяцПроверки >= ИПНПрименениеВычетов.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаПериодов.МесяцПроверки,
		|		ИПНПрименениеВычетов.Физлицо) КАК Периоды_ИПНПрименениеВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПрименениеВычетов КАК ИПНПрименениеВычетов
		|		ПО Периоды_ИПНПрименениеВычетов.Период = ИПНПрименениеВычетов.Период
		|			И Периоды_ИПНПрименениеВычетов.Физлицо = ИПНПрименениеВычетов.Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пероды_ИПННалоговыеВычетыФизлиц.МесяцПроверки,
		|	Пероды_ИПННалоговыеВычетыФизлиц.Физлицо,
		|	ИПННалоговыеВычетыФизлиц.ПредоставлятьЛичныйВычет
		|ПОМЕСТИТЬ ВТ_ИПННалоговыеВычетыФизлиц
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаПериодов.МесяцПроверки КАК МесяцПроверки,
		|		МАКСИМУМ(ИПННалоговыеВычетыФизлиц.Период) КАК Период,
		|		ИПННалоговыеВычетыФизлиц.Физлицо КАК Физлицо
		|	ИЗ
		|		ВТ_ТаблицаПериодов КАК ТаблицаПериодов
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПННалоговыеВычетыФизлиц КАК ИПННалоговыеВычетыФизлиц
		|			ПО ТаблицаПериодов.МесяцПроверки >= ИПННалоговыеВычетыФизлиц.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаПериодов.МесяцПроверки,
		|		ИПННалоговыеВычетыФизлиц.Физлицо) КАК Пероды_ИПННалоговыеВычетыФизлиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПННалоговыеВычетыФизлиц КАК ИПННалоговыеВычетыФизлиц
		|		ПО Пероды_ИПННалоговыеВычетыФизлиц.Период = ИПННалоговыеВычетыФизлиц.Период
		|			И Пероды_ИПННалоговыеВычетыФизлиц.Физлицо = ИПННалоговыеВычетыФизлиц.Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизаций.МесяцПроверки КАК МесяцПроверки,
		|	РаботникиОрганизаций.Физлицо КАК Физлицо,
		|	ЕСТЬNULL(ИПННалоговыеВычетыФизлиц.ПредоставлятьЛичныйВычет, ЛОЖЬ) КАК ПредоставлениеВычета,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ИПНПрименениеВычетов.Налогоплательщик, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЕСТЬNULL(ИсчислениеНалоговСтруктурныхЕдиниц.Налогоплательщик, &Организация)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СоответствиеНалогоплательщика
		|ИЗ
		|	ВТ_ПериодыРаботников КАК РаботникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсчислениеНалоговСтруктурныхЕдиниц КАК ИсчислениеНалоговСтруктурныхЕдиниц
		|		ПО РаботникиОрганизаций.ОбособленноеПодразделение = ИсчислениеНалоговСтруктурныхЕдиниц.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИПНПрименениеВычетов КАК ИПНПрименениеВычетов
		|		ПО РаботникиОрганизаций.Физлицо = ИПНПрименениеВычетов.Физлицо
		|			И РаботникиОрганизаций.МесяцПроверки = ИПНПрименениеВычетов.МесяцПроверки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИПННалоговыеВычетыФизлиц КАК ИПННалоговыеВычетыФизлиц
		|		ПО РаботникиОрганизаций.Физлицо = ИПННалоговыеВычетыФизлиц.Физлицо
		|			И РаботникиОрганизаций.МесяцПроверки = ИПННалоговыеВычетыФизлиц.МесяцПроверки
		|ГДЕ
		|	РаботникиОрганизаций.ОбособленноеПодразделение = &Организация
		|	И (НЕ ЕСТЬNULL(ИПННалоговыеВычетыФизлиц.ПредоставлятьЛичныйВычет, ЛОЖЬ)
		|			ИЛИ НЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(ИПНПрименениеВычетов.Налогоплательщик, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЕСТЬNULL(ИсчислениеНалоговСтруктурныхЕдиниц.Налогоплательщик, &Организация)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	МесяцПроверки,
		|	РаботникиОрганизаций.Физлицо.Наименование";
	
	
	Результат = Запрос.Выполнить();	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;

	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ПрименениеВычетовПоОсновномуМестуРаботыРезультатЗапроса", Результат);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("МесяцПроверки", "Месяц налогового периода");
		СтруктураЗаголовков.Вставить("Физлицо", "Сотрудник");
		СтруктураЗаголовков.Вставить("ПредоставлениеВычета", "Предоставление вычета назначено");
		СтруктураЗаголовков.Вставить("СоответствиеНалогоплательщика", "Налогоплательщик соответствует месту работы");
		ИсходящиеДанные.Вставить("ПрименениеВычетовПоОсновномуМестуРаботыСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("МесяцПроверки" , 20);
		СтруктураШириныКолонок.Вставить("Физлицо" , 40);
		СтруктураШириныКолонок.Вставить("ПредоставлениеВычета", 20);
		СтруктураШириныКолонок.Вставить("СоответствиеНалогоплательщика", 20);
		ИсходящиеДанные.Вставить("ПрименениеВычетовПоОсновномуМестуРаботыСтруктураШириныКолонок", СтруктураШириныКолонок);
		
		СтруктураФорматаПолей = Новый Структура;			
		СтруктураФорматаПолей.Вставить("МесяцПроверки", "ДФ='ММММ гггг'");
		ИсходящиеДанные.Вставить("ПрименениеВычетовПоОсновномуМестуРаботыСтруктураФорматаПолей", СтруктураФорматаПолей);

		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Физлицо", "Физлицо");
		ИсходящиеДанные.Вставить("ПрименениеВычетовПоОсновномуМестуРаботыСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// УЧЕТ ЗАРАБОТНОЙ ПЛАТЫ

Процедура ПроверитьПравилоРасчетНалогов(СтрокаПравила)
	
	// проверим есть ли данные для проверки
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ИПНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|	ИПНСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|ГДЕ
		|	ИПНСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|	И ИПНСведенияОДоходах.Организация = &Организация
		|	И ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОПВСведенияОДоходах.ФизЛицо,
		|	ОПВСведенияОДоходах.ПериодРегистрации
		|ИЗ
		|	РегистрНакопления.ОПВСведенияОДоходах КАК ОПВСведенияОДоходах
		|ГДЕ
		|	ОПВСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|	И ОПВСведенияОДоходах.Организация = &Организация
		|	И ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СОСведенияОДоходах.ФизЛицо,
		|	СОСведенияОДоходах.ПериодРегистрации
		|ИЗ
		|	РегистрНакопления.СОСведенияОДоходах КАК СОСведенияОДоходах
		|ГДЕ
		|	СОСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|	И СОСведенияОДоходах.Организация = &Организация
		|	И СОСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СНСведенияОДоходах.ФизЛицо,
		|	СНСведенияОДоходах.ПериодРегистрации
		|ИЗ
		|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
		|ГДЕ
		|	СНСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|	И СНСведенияОДоходах.Организация = &Организация
		|	И СНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОППВСведенияОДоходах.ФизЛицо,
		|	ОППВСведенияОДоходах.ПериодРегистрации
		|ИЗ
		|	РегистрНакопления.ОППВСведенияОДоходах КАК ОППВСведенияОДоходах
		|ГДЕ
		|	ОППВСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|	И ОППВСведенияОДоходах.Организация = &Организация
		|	И ОППВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		//++ЗУП
		|ВЫБРАТЬ
		|	ОПВРСведенияОДоходах.ФизЛицо,
		|	ОПВРСведенияОДоходах.ПериодРегистрации
		|ИЗ
		|	РегистрНакопления.ОПВРСведенияОДоходах КАК ОПВРСведенияОДоходах
		|ГДЕ
		|	ОПВРСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|	И ОПВРСведенияОДоходах.Организация = &Организация
		|	И ОПВРСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|
		//--ЗУП
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВОСМССведенияОДоходах.ФизЛицо,
		|	ВОСМССведенияОДоходах.ПериодРегистрации
		|ИЗ
		|	РегистрНакопления.ВОСМССведенияОДоходах КАК ВОСМССведенияОДоходах
		|ГДЕ
		|	ВОСМССведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|	И ВОСМССведенияОДоходах.Организация = &Организация
		|	И ВОСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ООСМССведенияОДоходах.ФизЛицо,
		|	ООСМССведенияОДоходах.ПериодРегистрации
		|ИЗ
		|	РегистрНакопления.ООСМССведенияОДоходах КАК ООСМССведенияОДоходах
		|ГДЕ
		|	ООСМССведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|	И ООСМССведенияОДоходах.Организация = &Организация
		|	И ООСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)";
				   
	Запрос.УстановитьПараметр("ДатаНач",			 ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",			 КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", 		 Организация);
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();	
	
	Если Результат.Пустой() Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = "Данных для проверки не обнаружено.";
		Возврат;
	КонецЕсли;	
			
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИПНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|	ИПНСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации
		|ПОМЕСТИТЬ ВТИПНСведенияОДоходах
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|ГДЕ
		|	ИПНСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|	И ИПНСведенияОДоходах.Организация = &Организация
		|	И ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.ФизЛицо,
		|	ИПНСведенияОДоходах.ПериодРегистрации
		|
		|ИМЕЮЩИЕ
		|	СУММА(ИПНСведенияОДоходах.СуммаДохода - ИПНСведенияОДоходах.СуммаВычета) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИПНРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
		|	ИПНРасчетыСБюджетом.Период КАК Период
		|ПОМЕСТИТЬ ВТИПНРасчетыСБюджетом
		|ИЗ
		|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
		|ГДЕ
		|	ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ИПНРасчетыСБюджетом.Организация = &Организация
		|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИПНСведенияОДоходахОбороты.ФизЛицо,
		|	ИПНСведенияОДоходахОбороты.ПериодРегистрации
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(, , Месяц, Организация = &Организация) КАК ИПНСведенияОДоходахОбороты
		|ГДЕ
		|	(ИПНСведенияОДоходахОбороты.ПримененныйВычетОборот <> 0
		|			ИЛИ ИПНСведенияОДоходахОбороты.ПримененнаяЛьготаОборот <> 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо,
		|	СведенияОбИсчисленииВычетовИПНОбороты.ПериодРегистрации
		|ИЗ
		|	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(, , Месяц, Организация = &Организация) КАК СведенияОбИсчисленииВычетовИПНОбороты
		|ГДЕ
		|	СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИПНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|	ИПНСведенияОДоходах.ПериодРегистрации,
		|	""ИПН"" КАК ВидНалога
		|ПОМЕСТИТЬ ВТ_НеИсчисленныйИПН
		|ИЗ
		|	ВТИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
		|		ПО ИПНСведенияОДоходах.ФизЛицо = ИПНРасчетыСБюджетом.ФизЛицо
		|			И (НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ))
		|ГДЕ
		|	ИПНРасчетыСБюджетом.Период ЕСТЬ NULL ";	
							
	Запрос.Выполнить();						
	НеИсчисленныйИПНТекст = 
		"ВЫБРАТЬ
		|	ТаблицаИПН.ФизЛицо,
		|	ТаблицаИПН.ПериодРегистрации,
		|	ТаблицаИПН.ВидНалога
		|ИЗ
		|	ВТ_НеИсчисленныйИПН КАК ТаблицаИПН";
			
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИтоговаяТаблица.ФизЛицо,
		|	ИтоговаяТаблица.ПериодРегистрации,
		|	ИтоговаяТаблица.ВидНалога
		|ПОМЕСТИТЬ ВТ_НеИсчисленныйОПВ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаСоСрезами.ФизЛицо КАК ФизЛицо,
		|		ТаблицаСоСрезами.ПериодРегистрации КАК ПериодРегистрации,
		|		ТаблицаСоСрезами.ВидНалога КАК ВидНалога,
		|		ГражданствоФизЛиц.НеИмеетПравоНаПенсию КАК НеИмеетПравоНаПенсию,
		|		СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер КАК Пенсионер,
		|		СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности КАК ОтношениеКИнвалидности,
		|		СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности КАК ГруппаИнвалидности,
		|		СведенияОбИнвалидностиФизлиц.СрокДействияСправки КАК СрокДействияСправки
		|	ИЗ
		|		(ВЫБРАТЬ
		|			НеИсчисленныйОПВ.ФизЛицо КАК ФизЛицо,
		|			НеИсчисленныйОПВ.ПериодРегистрации КАК ПериодРегистрации,
		|			НеИсчисленныйОПВ.ВидНалога КАК ВидНалога,
		|			МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСрезаГражданствоФизЛиц,
		|			МАКСИМУМ(СведенияОПенсионномОбеспеченииФизЛиц.Период) КАК ПериодСрезаСведенияОПенсОбесп,
		|			МАКСИМУМ(СведенияОбИнвалидностиФизлиц.Период) КАК ПериодСрезаСведенияОбИнвалидности
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ОПВСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|				ОПВСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации,
		|				""ОПВ"" КАК ВидНалога
		|			ИЗ
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ОПВСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|					ОПВСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации
		|				ИЗ
		|					РегистрНакопления.ОПВСведенияОДоходах КАК ОПВСведенияОДоходах
		|				ГДЕ
		|					ОПВСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|					И ОПВСведенияОДоходах.Организация = &Организация
		|					И ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ОПВСведенияОДоходах.ФизЛицо,
		|					ОПВСведенияОДоходах.ПериодРегистрации
		|				
		|				ИМЕЮЩИЕ
		|					СУММА(ОПВСведенияОДоходах.СуммаДохода - ОПВСведенияОДоходах.СуммаВычета) > 0) КАК ОПВСведенияОДоходах
		|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
		|						ОПВРасчетыСФондами.Период КАК Период
		|					ИЗ
		|						РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
		|					ГДЕ
		|						ОПВРасчетыСФондами.Организация = &Организация
		|						И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	    |						И ОПВРасчетыСФондами.ВидПлатежа В(&ВидыПлатежей)
		|						И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)) КАК ОПВРасчетыСФондами
		|					ПО ОПВСведенияОДоходах.ФизЛицо = ОПВРасчетыСФондами.ФизЛицо
		|						И (НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.Период, МЕСЯЦ))
		|			ГДЕ
		|				ОПВРасчетыСФондами.Период ЕСТЬ NULL ) КАК НеИсчисленныйОПВ
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
        |				ПО (ВЫБОР
        |						КОГДА НеИсчисленныйОПВ.ФизЛицо ССЫЛКА Справочник.Контрагенты
        |							ТОГДА НеИсчисленныйОПВ.ФизЛицо.ФизЛицо
        |						ИНАЧЕ НеИсчисленныйОПВ.ФизЛицо
        |					КОНЕЦ = ГражданствоФизЛиц.ФизЛицо)
        |					И (ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйОПВ.ПериодРегистрации, МЕСЯЦ))
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
   		|				ПО (ВЫБОР
	    |						КОГДА НеИсчисленныйОПВ.ФизЛицо ССЫЛКА Справочник.Контрагенты
	    |							ТОГДА НеИсчисленныйОПВ.ФизЛицо.ФизЛицо
	    |						ИНАЧЕ НеИсчисленныйОПВ.ФизЛицо
	    |					КОНЕЦ = СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо)
	    |					И (СведенияОПенсионномОбеспеченииФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйОПВ.ПериодРегистрации, МЕСЯЦ))
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
        |				ПО (ВЫБОР
	    |						КОГДА НеИсчисленныйОПВ.ФизЛицо ССЫЛКА Справочник.Контрагенты
	    |							ТОГДА НеИсчисленныйОПВ.ФизЛицо.ФизЛицо
	    |						ИНАЧЕ НеИсчисленныйОПВ.ФизЛицо
	    |					КОНЕЦ = СведенияОбИнвалидностиФизлиц.Физлицо)
		|					И (СведенияОбИнвалидностиФизлиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйОПВ.ПериодРегистрации, МЕСЯЦ))
		|		
		|		СГРУППИРОВАТЬ ПО
		|			НеИсчисленныйОПВ.ФизЛицо,
		|			НеИсчисленныйОПВ.ПериодРегистрации,
		|			НеИсчисленныйОПВ.ВидНалога) КАК ТаблицаСоСрезами
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		|			ПО ТаблицаСоСрезами.ПериодСрезаГражданствоФизЛиц = ГражданствоФизЛиц.Период
        |				И (ВЫБОР
        |						КОГДА ТаблицаСоСрезами.ФизЛицо ССЫЛКА Справочник.Контрагенты
        |							ТОГДА ТаблицаСоСрезами.ФизЛицо.ФизЛицо
        |						ИНАЧЕ ТаблицаСоСрезами.ФизЛицо
        |					КОНЕЦ = ГражданствоФизЛиц.ФизЛицо)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
		|			ПО ТаблицаСоСрезами.ПериодСрезаСведенияОПенсОбесп = СведенияОПенсионномОбеспеченииФизЛиц.Период
        |				И (ВЫБОР
        |					КОГДА ТаблицаСоСрезами.ФизЛицо ССЫЛКА Справочник.Контрагенты
        |						ТОГДА ТаблицаСоСрезами.ФизЛицо.ФизЛицо
        |					ИНАЧЕ ТаблицаСоСрезами.ФизЛицо
        |				КОНЕЦ = СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
		|			ПО (ВЫБОР
        |					КОГДА ТаблицаСоСрезами.ФизЛицо ССЫЛКА Справочник.Контрагенты
        |						ТОГДА ТаблицаСоСрезами.ФизЛицо.ФизЛицо
        |					ИНАЧЕ ТаблицаСоСрезами.ФизЛицо
        |				КОНЕЦ = СведенияОбИнвалидностиФизлиц.Физлицо)
		|				И ТаблицаСоСрезами.ПериодСрезаСведенияОбИнвалидности = СведенияОбИнвалидностиФизлиц.Период) КАК ИтоговаяТаблица
		|ГДЕ
		|	(НЕ ИтоговаяТаблица.НеИмеетПравоНаПенсию
		|			ИЛИ ИтоговаяТаблица.НеИмеетПравоНаПенсию ЕСТЬ NULL )
		|	И (НЕ ИтоговаяТаблица.Пенсионер
		|			ИЛИ ИтоговаяТаблица.Пенсионер ЕСТЬ NULL )
		|	И (НЕ(ИтоговаяТаблица.ОтношениеКИнвалидности = &парамИнвалид
		|					И ИтоговаяТаблица.ГруппаИнвалидности В (&парамСписокГруппИнвалидности)
		|					И ИтоговаяТаблица.СрокДействияСправки = &парамПустаяДата)
		|			ИЛИ ИтоговаяТаблица.ОтношениеКИнвалидности ЕСТЬ NULL )";	
							
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("парамИнвалид", Перечисления.ОтношениеКИнвалидности.Инвалид);
	СписокГруппИнвалидности = Новый СписокЗначений;
	ВидыПлатежей = Новый СписокЗначений;
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогАкт);
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогСам);
	Запрос.УстановитьПараметр("ВидыПлатежей", ВидыПлатежей);
	СписокГруппИнвалидности.Добавить("I");
	СписокГруппИнвалидности.Добавить("II");
    Запрос.УстановитьПараметр("парамСписокГруппИнвалидности",  СписокГруппИнвалидности);
	Запрос.УстановитьПараметр("парамПустаяДата", '00010101');
	Запрос.Выполнить();
	НеИсчисленныйОПВТекст = 
		"ВЫБРАТЬ
		|	ТаблицаОПВ.ФизЛицо,
		|	ТаблицаОПВ.ПериодРегистрации,
		|	ТаблицаОПВ.ВидНалога
		|ИЗ
		|	ВТ_НеИсчисленныйОПВ КАК ТаблицаОПВ";
	
	мОрганизацияЯвляетсяПлательщикомСН = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаСоциальногоНалога(Организация, ДатаКон);
	Если мОрганизацияЯвляетсяПлательщикомСН Тогда
		
		// тоже самое как для ИПН, только регистр то оборотный...
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СНСведенияОДоходах.ФизЛицо,
			|	СНСведенияОДоходах.ПериодРегистрации,
			|	""СН"" КАК ВидНалога
			|ПОМЕСТИТЬ ВТ_НеИсчисленныйСН
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		СНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
			|		СНСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации
			|	ИЗ
			|		РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
			|	ГДЕ
			|		СНСведенияОДоходах.Организация = &Организация
			|		И СНСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
			|		И СНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
			|	
			|	СГРУППИРОВАТЬ ПО
			|		СНСведенияОДоходах.ФизЛицо,
			|		СНСведенияОДоходах.ПериодРегистрации
			|	
			|	ИМЕЮЩИЕ
			|		СУММА(СНСведенияОДоходах.СуммаДохода - СНСведенияОДоходах.СуммаВычета) > 0) КАК СНСведенияОДоходах
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|			СНИсчисленный.ФизЛицо КАК ФизЛицо,
			|			СНИсчисленный.Период КАК Период
			|		ИЗ
			|			РегистрНакопления.СНИсчисленный КАК СНИсчисленный
			|		ГДЕ
			|			СНИсчисленный.Организация = &Организация) КАК СНИсчисленный
			|		ПО СНСведенияОДоходах.ФизЛицо = СНИсчисленный.ФизЛицо
			|			И (НАЧАЛОПЕРИОДА(СНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СНИсчисленный.Период, МЕСЯЦ))
			|ГДЕ
			|	СНИсчисленный.Период ЕСТЬ NULL ";	
							   
		Запрос.Выполнить();					   
		НеИсчисленныйСНТекст = 
			"ВЫБРАТЬ
			|	ТаблицаСН.ФизЛицо,
			|	ТаблицаСН.ПериодРегистрации,
			|	ТаблицаСН.ВидНалога
			|ИЗ
			|	ВТ_НеИсчисленныйСН КАК ТаблицаСН";
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИтоговаяТаблица.ФизЛицо,
		|	ИтоговаяТаблица.ПериодРегистрации,
		|	ИтоговаяТаблица.ВидНалога
		|ПОМЕСТИТЬ ВТ_НеИсчисленныйСО
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаСоСрезами.ФизЛицо КАК ФизЛицо,
		|		ТаблицаСоСрезами.ПериодРегистрации КАК ПериодРегистрации,
		|		ТаблицаСоСрезами.ВидНалога КАК ВидНалога,
		|		ГражданствоФизЛиц.НеПодлежитСоциальномуСтрахованию КАК НеПодлежитСоциальномуСтрахованию,
		|		СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер КАК Пенсионер
		|	ИЗ
		|		(ВЫБРАТЬ
		|			НеИсчисленныйСО.ФизЛицо КАК ФизЛицо,
		|			НеИсчисленныйСО.ПериодРегистрации КАК ПериодРегистрации,
		|			НеИсчисленныйСО.ВидНалога КАК ВидНалога,
		|			МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСрезаГражданствоФизЛиц,
		|			МАКСИМУМ(СведенияОПенсионномОбеспеченииФизЛиц.Период) КАК ПериодСрезаСведенияОПенсОбесп
		|		ИЗ
		|			(ВЫБРАТЬ
		|				СОСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|				СОСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации,
		|				""СО"" КАК ВидНалога
		|			ИЗ
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					СОСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|					СОСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации
		|				ИЗ
		|					РегистрНакопления.СОСведенияОДоходах КАК СОСведенияОДоходах
		|				ГДЕ
		|					СОСведенияОДоходах.Организация = &Организация
		|					И СОСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|					И СОСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				
		|				СГРУППИРОВАТЬ ПО
		|					СОСведенияОДоходах.ФизЛицо,
		|					СОСведенияОДоходах.ПериодРегистрации
		|				
		|				ИМЕЮЩИЕ
		|					СУММА(СОСведенияОДоходах.СуммаДохода - СОСведенияОДоходах.СуммаВычета) > 0) КАК СОСведенияОДоходах
		|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						СОРасчетыСФондами.ФизЛицо КАК ФизЛицо,
		|						СОРасчетыСФондами.Период КАК Период
		|					ИЗ
		|						РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
		|					ГДЕ
		|						СОРасчетыСФондами.Организация = &Организация
		|						И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)) КАК СОРасчетыСФондами
		|					ПО СОСведенияОДоходах.ФизЛицо = СОРасчетыСФондами.ФизЛицо
		|						И (НАЧАЛОПЕРИОДА(СОСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ))
		|			ГДЕ
		|				СОРасчетыСФондами.Период ЕСТЬ NULL ) КАК НеИсчисленныйСО
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		|				ПО (ГражданствоФизЛиц.ФизЛицо = НеИсчисленныйСО.ФизЛицо)
		|					И (ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйСО.ПериодРегистрации, МЕСЯЦ))
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
		|				ПО (СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо = НеИсчисленныйСО.ФизЛицо)
		|					И (СведенияОПенсионномОбеспеченииФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйСО.ПериодРегистрации, МЕСЯЦ))
		|		
		|		СГРУППИРОВАТЬ ПО
		|			НеИсчисленныйСО.ФизЛицо,
		|			НеИсчисленныйСО.ПериодРегистрации,
		|			НеИсчисленныйСО.ВидНалога) КАК ТаблицаСоСрезами
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		|			ПО ТаблицаСоСрезами.ПериодСрезаГражданствоФизЛиц = ГражданствоФизЛиц.Период
		|				И ТаблицаСоСрезами.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
		|			ПО ТаблицаСоСрезами.ПериодСрезаСведенияОПенсОбесп = СведенияОПенсионномОбеспеченииФизЛиц.Период
		|				И ТаблицаСоСрезами.ФизЛицо = СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо) КАК ИтоговаяТаблица
		|ГДЕ
		|	(НЕ ИтоговаяТаблица.НеПодлежитСоциальномуСтрахованию
		|			ИЛИ ИтоговаяТаблица.НеПодлежитСоциальномуСтрахованию ЕСТЬ NULL )
		|	И (НЕ ИтоговаяТаблица.Пенсионер
		|			ИЛИ ИтоговаяТаблица.Пенсионер ЕСТЬ NULL )";
	
	Запрос.Выполнить();					   
	НеИсчисленныйСОТекст = 
		"ВЫБРАТЬ
		|	ТаблицаСО.ФизЛицо,
		|	ТаблицаСО.ПериодРегистрации,
		|	ТаблицаСО.ВидНалога
		|ИЗ
		|	ВТ_НеИсчисленныйСО КАК ТаблицаСО";
	
							   
	мОрганизацияЯвляетсяВкладчикомОППВ = ПроцедурыНалоговогоУчета.ПолучитьПризнакВкладчикаПрофПенсионныхВзносов(Организация, ДатаКон);
	Если мОрганизацияЯвляетсяВкладчикомОППВ Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИтоговаяТаблица.ФизЛицо,
			|	ИтоговаяТаблица.ПериодРегистрации,
			|	ИтоговаяТаблица.ВидНалога
			|ПОМЕСТИТЬ ВТ_НеИсчисленныйОППВ
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТаблицаСоСрезами.ФизЛицо КАК ФизЛицо,
			|		ТаблицаСоСрезами.ПериодРегистрации КАК ПериодРегистрации,
			|		ТаблицаСоСрезами.ВидНалога КАК ВидНалога,
			|		ГражданствоФизЛиц.НеИмеетПравоНаПенсию КАК НеИмеетПравоНаПенсию,
			|		СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер КАК Пенсионер
			|	ИЗ
			|		(ВЫБРАТЬ
			|			НеИсчисленныйОППВ.ФизЛицо КАК ФизЛицо,
			|			НеИсчисленныйОППВ.ПериодРегистрации КАК ПериодРегистрации,
			|			НеИсчисленныйОППВ.ВидНалога КАК ВидНалога,
			|			МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСрезаГражданствоФизЛиц,
			|			МАКСИМУМ(СведенияОПенсионномОбеспеченииФизЛиц.Период) КАК ПериодСрезаСведенияОПенсОбесп
			|		ИЗ
			|			(ВЫБРАТЬ
			|				ОППВСведенияОДоходах.ФизЛицо КАК ФизЛицо,
			|				ОППВСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации,
			|				""ОППВ"" КАК ВидНалога
			|			ИЗ
			|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					ОППВСведенияОДоходах.ФизЛицо КАК ФизЛицо,
			|					ОППВСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации
			|				ИЗ
			|					РегистрНакопления.ОППВСведенияОДоходах КАК ОППВСведенияОДоходах
			|				ГДЕ
			|					ОППВСведенияОДоходах.Организация = &Организация
			|					И ОППВСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
			|					И ОППВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
			|				
			|				СГРУППИРОВАТЬ ПО
			|					ОППВСведенияОДоходах.ФизЛицо,
			|					ОППВСведенияОДоходах.ПериодРегистрации
			|				
			|				ИМЕЮЩИЕ
			|					СУММА(ОППВСведенияОДоходах.СуммаДохода - ОППВСведенияОДоходах.СуммаВычета) > 0) КАК ОППВСведенияОДоходах
			|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						ОППВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
			|						ОППВРасчетыСФондами.Период КАК Период
			|					ИЗ
			|						РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
			|					ГДЕ
			|						ОППВРасчетыСФондами.Организация = &Организация
			|						И ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|						И ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)) КАК ОППВРасчетыСФондами
			|					ПО ОППВСведенияОДоходах.ФизЛицо = ОППВРасчетыСФондами.ФизЛицо
			|						И (НАЧАЛОПЕРИОДА(ОППВСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.Период, МЕСЯЦ))
			|			ГДЕ
			|				ОППВРасчетыСФондами.Период ЕСТЬ NULL ) КАК НеИсчисленныйОППВ
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
			|				ПО (ГражданствоФизЛиц.ФизЛицо = НеИсчисленныйОППВ.ФизЛицо)
			|					И (ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйОППВ.ПериодРегистрации, МЕСЯЦ))
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
			|				ПО (СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо = НеИсчисленныйОППВ.ФизЛицо)
			|					И (СведенияОПенсионномОбеспеченииФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйОППВ.ПериодРегистрации, МЕСЯЦ))
			|		
			|		СГРУППИРОВАТЬ ПО
			|			НеИсчисленныйОППВ.ФизЛицо,
			|			НеИсчисленныйОППВ.ПериодРегистрации,
			|			НеИсчисленныйОППВ.ВидНалога) КАК ТаблицаСоСрезами
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
			|			ПО ТаблицаСоСрезами.ПериодСрезаГражданствоФизЛиц = ГражданствоФизЛиц.Период
			|				И ТаблицаСоСрезами.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
			|			ПО ТаблицаСоСрезами.ПериодСрезаСведенияОПенсОбесп = СведенияОПенсионномОбеспеченииФизЛиц.Период
			|				И ТаблицаСоСрезами.ФизЛицо = СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо) КАК ИтоговаяТаблица
			|ГДЕ
			|	(НЕ ИтоговаяТаблица.НеИмеетПравоНаПенсию
			|			ИЛИ ИтоговаяТаблица.НеИмеетПравоНаПенсию ЕСТЬ NULL )
			|	И (НЕ ИтоговаяТаблица.Пенсионер
			|			ИЛИ ИтоговаяТаблица.Пенсионер ЕСТЬ NULL )";
	
	Запрос.Выполнить();					   
	НеИсчисленныйОППВТекст = 
		"ВЫБРАТЬ
		|	ТаблицаОППВ.ФизЛицо,
		|	ТаблицаОППВ.ПериодРегистрации,
		|	ТаблицаОППВ.ВидНалога
		|ИЗ
		|	ВТ_НеИсчисленныйОППВ КАК ТаблицаОППВ";
	
	КонецЕсли;
	
	//++ЗУП
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИтоговаяТаблица.ФизЛицо,
			|	ИтоговаяТаблица.ПериодРегистрации,
			|	ИтоговаяТаблица.ВидНалога
			|ПОМЕСТИТЬ ВТ_НеИсчисленныйОПВР
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТаблицаСоСрезами.ФизЛицо КАК ФизЛицо,
			|		ТаблицаСоСрезами.ПериодРегистрации КАК ПериодРегистрации,
			|		ТаблицаСоСрезами.ВидНалога КАК ВидНалога,
			|		ГражданствоФизЛиц.НеИмеетПравоНаПенсию КАК НеИмеетПравоНаПенсию,
			|		ФизическиеЛица.ДатаРождения КАК ДатаРождения,
			|		СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер КАК Пенсионер
			|	ИЗ
			|		(ВЫБРАТЬ
			|			НеИсчисленныйОПВР.ФизЛицо КАК ФизЛицо,
			|			НеИсчисленныйОПВР.ПериодРегистрации КАК ПериодРегистрации,
			|			НеИсчисленныйОПВР.ВидНалога КАК ВидНалога,
			|			МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСрезаГражданствоФизЛиц,
			|			МАКСИМУМ(СведенияОПенсионномОбеспеченииФизЛиц.Период) КАК ПериодСрезаСведенияОПенсОбесп
			|		ИЗ
			|			(ВЫБРАТЬ
			|				ОПВРСведенияОДоходах.ФизЛицо КАК ФизЛицо,
			|				ОПВРСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации,
			|				""ОПВР"" КАК ВидНалога
			|			ИЗ
			|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					ОПВРСведенияОДоходах.ФизЛицо КАК ФизЛицо,
			|					ОПВРСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации
			|				ИЗ
			|					РегистрНакопления.ОПВРСведенияОДоходах КАК ОПВРСведенияОДоходах
			|				ГДЕ
			|					ОПВРСведенияОДоходах.Организация = &Организация
			|					И ОПВРСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
			|					И ОПВРСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
			|				
			|				СГРУППИРОВАТЬ ПО
			|					ОПВРСведенияОДоходах.ФизЛицо,
			|					ОПВРСведенияОДоходах.ПериодРегистрации
			|				
			|				ИМЕЮЩИЕ
			|					СУММА(ОПВРСведенияОДоходах.СуммаДохода - ОПВРСведенияОДоходах.СуммаВычета) > 0) КАК ОПВРСведенияОДоходах
			|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						ОПВРРасчетыСФондами.ФизЛицо КАК ФизЛицо,
			|						ОПВРРасчетыСФондами.Период КАК Период
			|					ИЗ
			|						РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
			|					ГДЕ
			|						ОПВРРасчетыСФондами.Организация = &Организация
			|						И ОПВРРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|						И ОПВРРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)) КАК ОПВРРасчетыСФондами
			|					ПО ОПВРСведенияОДоходах.ФизЛицо = ОПВРРасчетыСФондами.ФизЛицо
			|						И (НАЧАЛОПЕРИОДА(ОПВРСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.Период, МЕСЯЦ))
			|			ГДЕ
			|				ОПВРРасчетыСФондами.Период ЕСТЬ NULL ) КАК НеИсчисленныйОПВР
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
			|				ПО (ГражданствоФизЛиц.ФизЛицо = НеИсчисленныйОПВР.ФизЛицо)
			|					И (ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйОПВР.ПериодРегистрации, МЕСЯЦ))
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
			|				ПО (СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо = НеИсчисленныйОПВР.ФизЛицо)
			|					И (СведенияОПенсионномОбеспеченииФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйОПВР.ПериодРегистрации, МЕСЯЦ))
			|		
			|		СГРУППИРОВАТЬ ПО
			|			НеИсчисленныйОПВР.ФизЛицо,
			|			НеИсчисленныйОПВР.ПериодРегистрации,
			|			НеИсчисленныйОПВР.ВидНалога) КАК ТаблицаСоСрезами
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
			|			ПО ТаблицаСоСрезами.ПериодСрезаГражданствоФизЛиц = ГражданствоФизЛиц.Период
			|				И ТаблицаСоСрезами.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
			|			ПО ТаблицаСоСрезами.ФизЛицо = ФизическиеЛица.Ссылка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
			|			ПО ТаблицаСоСрезами.ПериодСрезаСведенияОПенсОбесп = СведенияОПенсионномОбеспеченииФизЛиц.Период
			|				И ТаблицаСоСрезами.ФизЛицо = СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо) КАК ИтоговаяТаблица
			|ГДЕ
			|	(НЕ ИтоговаяТаблица.НеИмеетПравоНаПенсию
			|			ИЛИ ИтоговаяТаблица.НеИмеетПравоНаПенсию ЕСТЬ NULL )
			|	И ИтоговаяТаблица.ДатаРождения >= ДАТАВРЕМЯ(1975,1,1)
			|	И (НЕ ИтоговаяТаблица.Пенсионер
			|			ИЛИ ИтоговаяТаблица.Пенсионер ЕСТЬ NULL )";
	
	Запрос.Выполнить();
	НеИсчисленныйОПВРТекст = 
		"ВЫБРАТЬ
		|	ТаблицаОПВР.ФизЛицо,
		|	ТаблицаОПВР.ПериодРегистрации,
		|	ТаблицаОПВР.ВидНалога
		|ИЗ
		|	ВТ_НеИсчисленныйОПВР КАК ТаблицаОПВР";
	//--ЗУП
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИтоговаяТаблица.ФизЛицо,
		|	ИтоговаяТаблица.ПериодРегистрации,
		|	ИтоговаяТаблица.ВидНалога
		|ПОМЕСТИТЬ ВТ_НеИсчисленныйООСМС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаСоСрезами.ФизЛицо КАК ФизЛицо,
		|		ТаблицаСоСрезами.ПериодРегистрации КАК ПериодРегистрации,
		|		ТаблицаСоСрезами.ВидНалога КАК ВидНалога,
		|		ГражданствоФизЛиц.НеПодлежитСоциальномуМедицинскомуСтрахованию КАК НеПодлежитСоциальномуМедицинскомуСтрахованию,
		|		СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер КАК Пенсионер,
		|		СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности КАК ОтношениеКИнвалидности,
		|		СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности КАК ГруппаИнвалидности,
		|		СведенияОбИнвалидностиФизлиц.СрокДействияСправки КАК СрокДействияСправки,
		|		СведенияОФизлицахУчастникахВОВ.Статус КАК УчастникВОВ
		|	ИЗ
		|		(ВЫБРАТЬ
		|			НеИсчисленныйООСМС.ФизЛицо КАК ФизЛицо,
		|			НеИсчисленныйООСМС.ПериодРегистрации КАК ПериодРегистрации,
		|			НеИсчисленныйООСМС.ВидНалога КАК ВидНалога,
		|			МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСрезаГражданствоФизЛиц,
		|			МАКСИМУМ(СведенияОПенсионномОбеспеченииФизЛиц.Период) КАК ПериодСрезаСведенияОПенсОбесп,
		|			МАКСИМУМ(СведенияОбИнвалидностиФизлиц.Период) КАК ПериодСрезаСведенияОбИнвалидности,
		|			МАКСИМУМ(СведенияОФизлицахУчастникахВОВ.Период) КАК ПериодСрезаСведенияОФизлицахУчастникахВОВ
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ООСМССведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|				ООСМССведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации,
		|				""ООСМС"" КАК ВидНалога
		|			ИЗ
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ООСМССведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|					ООСМССведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации
		|				ИЗ
		|					РегистрНакопления.ООСМССведенияОДоходах КАК ООСМССведенияОДоходах
		|				ГДЕ
		|					ООСМССведенияОДоходах.Организация = &Организация
		|					И ООСМССведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|					И ООСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ООСМССведенияОДоходах.ФизЛицо,
		|					ООСМССведенияОДоходах.ПериодРегистрации
		|				
		|				ИМЕЮЩИЕ
		|					СУММА(ООСМССведенияОДоходах.СуммаДохода - ООСМССведенияОДоходах.СуммаВычета) > 0) КАК ООСМССведенияОДоходах
		|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ООСМСРасчетыСФондами.ФизЛицо КАК ФизЛицо,
		|						ООСМСРасчетыСФондами.Период КАК Период
		|					ИЗ
		|						РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
		|					ГДЕ
		|						ООСМСРасчетыСФондами.Организация = &Организация
		|						И ООСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						И ООСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)) КАК ООСМСРасчетыСФондами
		|					ПО ООСМССведенияОДоходах.ФизЛицо = ООСМСРасчетыСФондами.ФизЛицо
		|						И (НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.Период, МЕСЯЦ))
		|			ГДЕ
		|				ООСМСРасчетыСФондами.Период ЕСТЬ NULL ) КАК НеИсчисленныйООСМС
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		|				ПО (ГражданствоФизЛиц.ФизЛицо = НеИсчисленныйООСМС.ФизЛицо)
		|					И (ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйООСМС.ПериодРегистрации, МЕСЯЦ))
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
		|				ПО (СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо = НеИсчисленныйООСМС.ФизЛицо)
		|					И (СведенияОПенсионномОбеспеченииФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйООСМС.ПериодРегистрации, МЕСЯЦ))
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
		|				ПО (СведенияОбИнвалидностиФизлиц.Физлицо = НеИсчисленныйООСМС.ФизЛицо)
		|					И (СведенияОбИнвалидностиФизлиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйООСМС.ПериодРегистрации, МЕСЯЦ))
		|					И (СведенияОбИнвалидностиФизлиц.СрокДействияСправки = ДАТАВРЕМЯ(1, 1, 1)
		|					ИЛИ КОНЕЦПЕРИОДА(НеИсчисленныйООСМС.ПериодРегистрации, МЕСЯЦ) <= КОНЕЦПЕРИОДА(СведенияОбИнвалидностиФизлиц.СрокДействияСправки, ДЕНЬ))
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК СведенияОФизлицахУчастникахВОВ
		|				ПО (СведенияОФизлицахУчастникахВОВ.Физлицо = НеИсчисленныйООСМС.ФизЛицо)
		|					И (СведенияОФизлицахУчастникахВОВ.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйООСМС.ПериодРегистрации, МЕСЯЦ))
		|		
		|		СГРУППИРОВАТЬ ПО
		|			НеИсчисленныйООСМС.ФизЛицо,
		|			НеИсчисленныйООСМС.ПериодРегистрации,
		|			НеИсчисленныйООСМС.ВидНалога) КАК ТаблицаСоСрезами
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		|			ПО ТаблицаСоСрезами.ПериодСрезаГражданствоФизЛиц = ГражданствоФизЛиц.Период
		|				И ТаблицаСоСрезами.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
		|			ПО ТаблицаСоСрезами.ПериодСрезаСведенияОПенсОбесп = СведенияОПенсионномОбеспеченииФизЛиц.Период
		|				И ТаблицаСоСрезами.ФизЛицо = СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
		|			ПО ТаблицаСоСрезами.ФизЛицо = СведенияОбИнвалидностиФизлиц.Физлицо
		|				И ТаблицаСоСрезами.ПериодСрезаСведенияОбИнвалидности = СведенияОбИнвалидностиФизлиц.Период
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК СведенияОФизлицахУчастникахВОВ
		|			ПО ТаблицаСоСрезами.ФизЛицо = СведенияОФизлицахУчастникахВОВ.Физлицо
		|				И ТаблицаСоСрезами.ПериодСрезаСведенияОФизлицахУчастникахВОВ = СведенияОФизлицахУчастникахВОВ.Период) КАК ИтоговаяТаблица
		|ГДЕ
		|	(НЕ ИтоговаяТаблица.НеПодлежитСоциальномуМедицинскомуСтрахованию
		|			ИЛИ ИтоговаяТаблица.НеПодлежитСоциальномуМедицинскомуСтрахованию ЕСТЬ NULL )
		|	И (НЕ ИтоговаяТаблица.Пенсионер
		|			ИЛИ ИтоговаяТаблица.Пенсионер ЕСТЬ NULL )
		|	И (НЕ(ИтоговаяТаблица.ОтношениеКИнвалидности = &парамИнвалид)
		|			ИЛИ ИтоговаяТаблица.ОтношениеКИнвалидности ЕСТЬ NULL )
		|	И (НЕ(ИтоговаяТаблица.УчастникВОВ = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.УчастникВОВ)
		|					ИЛИ ИтоговаяТаблица.УчастникВОВ = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ИнвалидВОВ))
		|			ИЛИ ИтоговаяТаблица.УчастникВОВ ЕСТЬ NULL )";
	
	Запрос.Выполнить();	
	
	НеИсчисленныйООСМСТекст = 
		"ВЫБРАТЬ
		|	ТаблицаООСМС.ФизЛицо,
		|	ТаблицаООСМС.ПериодРегистрации,
		|	ТаблицаООСМС.ВидНалога
		|ИЗ
		|	ВТ_НеИсчисленныйООСМС КАК ТаблицаООСМС";
		
		
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИтоговаяТаблица.ФизЛицо,
		|	ИтоговаяТаблица.ПериодРегистрации,
		|	ИтоговаяТаблица.ВидНалога
		|ПОМЕСТИТЬ ВТ_НеИсчисленныйВОСМС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаСоСрезами.ФизЛицо КАК ФизЛицо,
		|		ТаблицаСоСрезами.ПериодРегистрации КАК ПериодРегистрации,
		|		ТаблицаСоСрезами.ВидНалога КАК ВидНалога,
		|		ГражданствоФизЛиц.НеПодлежитСоциальномуМедицинскомуСтрахованию КАК НеПодлежитСоциальномуМедицинскомуСтрахованию,
		|		СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер КАК Пенсионер,
		|		СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности КАК ОтношениеКИнвалидности,
		|		СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности КАК ГруппаИнвалидности,
		|		СведенияОбИнвалидностиФизлиц.СрокДействияСправки КАК СрокДействияСправки,
		|		СведенияОФизлицахУчастникахВОВ.Статус КАК УчастникВОВ
		|	ИЗ
		|		(ВЫБРАТЬ
		|			НеИсчисленныйВОСМС.ФизЛицо КАК ФизЛицо,
		|			НеИсчисленныйВОСМС.ПериодРегистрации КАК ПериодРегистрации,
		|			НеИсчисленныйВОСМС.ВидНалога КАК ВидНалога,
		|			МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСрезаГражданствоФизЛиц,
		|			МАКСИМУМ(СведенияОПенсионномОбеспеченииФизЛиц.Период) КАК ПериодСрезаСведенияОПенсОбесп,
		|			МАКСИМУМ(СведенияОбИнвалидностиФизлиц.Период) КАК ПериодСрезаСведенияОбИнвалидности,
		|			МАКСИМУМ(СведенияОФизлицахУчастникахВОВ.Период) КАК ПериодСрезаСведенияОФизлицахУчастникахВОВ
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ВОСМССведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|				ВОСМССведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации,
		|				""ВОСМС"" КАК ВидНалога
		|			ИЗ
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ВОСМССведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|					ВОСМССведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации
		|				ИЗ
		|					РегистрНакопления.ВОСМССведенияОДоходах КАК ВОСМССведенияОДоходах
		|				ГДЕ
		|					ВОСМССведенияОДоходах.Организация = &Организация
		|					И ВОСМССведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|					И ВОСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ВОСМССведенияОДоходах.ФизЛицо,
		|					ВОСМССведенияОДоходах.ПериодРегистрации
		|				
		|				ИМЕЮЩИЕ
		|					СУММА(ВОСМССведенияОДоходах.СуммаДохода - ВОСМССведенияОДоходах.СуммаВычета) > 0) КАК ВОСМССведенияОДоходах
		|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ВОСМСРасчетыСФондами.ФизЛицо КАК ФизЛицо,
		|						ВОСМСРасчетыСФондами.Период КАК Период
		|					ИЗ
		|						РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
		|					ГДЕ
		|						ВОСМСРасчетыСФондами.Организация = &Организация
		|						И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)) КАК ВОСМСРасчетыСФондами
		|					ПО ВОСМССведенияОДоходах.ФизЛицо = ВОСМСРасчетыСФондами.ФизЛицо
		|						И (НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.Период, МЕСЯЦ))
		|			ГДЕ
		|				ВОСМСРасчетыСФондами.Период ЕСТЬ NULL ) КАК НеИсчисленныйВОСМС
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		|				ПО (ГражданствоФизЛиц.ФизЛицо = НеИсчисленныйВОСМС.ФизЛицо)
		|					И (ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйВОСМС.ПериодРегистрации, МЕСЯЦ))
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
		|				ПО (СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо = НеИсчисленныйВОСМС.ФизЛицо)
		|					И (СведенияОПенсионномОбеспеченииФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйВОСМС.ПериодРегистрации, МЕСЯЦ))
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
		|				ПО (СведенияОбИнвалидностиФизлиц.Физлицо = НеИсчисленныйВОСМС.ФизЛицо)
		|					И (СведенияОбИнвалидностиФизлиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйВОСМС.ПериодРегистрации, МЕСЯЦ))
		|					И (СведенияОбИнвалидностиФизлиц.СрокДействияСправки = ДАТАВРЕМЯ(1, 1, 1)
		|					ИЛИ КОНЕЦПЕРИОДА(НеИсчисленныйВОСМС.ПериодРегистрации, МЕСЯЦ) <= КОНЕЦПЕРИОДА(СведенияОбИнвалидностиФизлиц.СрокДействияСправки, ДЕНЬ))
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК СведенияОФизлицахУчастникахВОВ
		|				ПО (СведенияОФизлицахУчастникахВОВ.Физлицо = НеИсчисленныйВОСМС.ФизЛицо)
		|					И (СведенияОФизлицахУчастникахВОВ.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйВОСМС.ПериодРегистрации, МЕСЯЦ))
		|		
		|		СГРУППИРОВАТЬ ПО
		|			НеИсчисленныйВОСМС.ФизЛицо,
		|			НеИсчисленныйВОСМС.ПериодРегистрации,
		|			НеИсчисленныйВОСМС.ВидНалога) КАК ТаблицаСоСрезами
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		|			ПО ТаблицаСоСрезами.ПериодСрезаГражданствоФизЛиц = ГражданствоФизЛиц.Период
		|				И ТаблицаСоСрезами.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
		|			ПО ТаблицаСоСрезами.ПериодСрезаСведенияОПенсОбесп = СведенияОПенсионномОбеспеченииФизЛиц.Период
		|				И ТаблицаСоСрезами.ФизЛицо = СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
		|			ПО ТаблицаСоСрезами.ФизЛицо = СведенияОбИнвалидностиФизлиц.Физлицо
		|				И ТаблицаСоСрезами.ПериодСрезаСведенияОбИнвалидности = СведенияОбИнвалидностиФизлиц.Период
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК СведенияОФизлицахУчастникахВОВ
		|			ПО ТаблицаСоСрезами.ФизЛицо = СведенияОФизлицахУчастникахВОВ.Физлицо
		|				И ТаблицаСоСрезами.ПериодСрезаСведенияОФизлицахУчастникахВОВ = СведенияОФизлицахУчастникахВОВ.Период) КАК ИтоговаяТаблица
		|ГДЕ
		|	(НЕ ИтоговаяТаблица.НеПодлежитСоциальномуМедицинскомуСтрахованию
		|			ИЛИ ИтоговаяТаблица.НеПодлежитСоциальномуМедицинскомуСтрахованию ЕСТЬ NULL )
		|	И (НЕ ИтоговаяТаблица.Пенсионер
		|			ИЛИ ИтоговаяТаблица.Пенсионер ЕСТЬ NULL )
		|	И (НЕ(ИтоговаяТаблица.ОтношениеКИнвалидности = &парамИнвалид)
		|			ИЛИ ИтоговаяТаблица.ОтношениеКИнвалидности ЕСТЬ NULL )
		|	И (НЕ(ИтоговаяТаблица.УчастникВОВ = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.УчастникВОВ)
		|					ИЛИ ИтоговаяТаблица.УчастникВОВ = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ИнвалидВОВ))
		|			ИЛИ ИтоговаяТаблица.УчастникВОВ ЕСТЬ NULL )";
	
	Запрос.Выполнить();					   
	НеИсчисленныйВОСМССТекст = 
		"ВЫБРАТЬ
		|	ТаблицаВОСМС.ФизЛицо,
		|	ТаблицаВОСМС.ПериодРегистрации,
		|	ТаблицаВОСМС.ВидНалога
		|ИЗ
		|	ВТ_НеИсчисленныйВОСМС КАК ТаблицаВОСМС";
							   
							   
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ИтоговаяТаблица.ФизЛицо,
		|	ИтоговаяТаблица.ПериодРегистрации,
		|	ИтоговаяТаблица.ВидНалога
		|ИЗ 
		| (" + НеИсчисленныйИПНТекст + "		
        |
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|" + НеИсчисленныйОПВТекст + ?(мОрганизацияЯвляетсяПлательщикомСН, "		
        | 
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|" + НеИсчисленныйСНТекст, "") + "		
        | 
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|" + НеИсчисленныйООСМСТекст + "		
        | 
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|" + НеИсчисленныйВОСМССТекст + "		
        | 
		|ОБЪЕДИНИТЬ ВСЕ
		|
		//++ЗУП
		|" + НеИсчисленныйОПВРТекст + "
        | 
		|ОБЪЕДИНИТЬ ВСЕ
		|
		//--ЗУП
		|" + НеИсчисленныйСОТекст + ?(мОрганизацияЯвляетсяВкладчикомОППВ, "		
        | 
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|" + НеИсчисленныйОППВТекст, "") + ") КАК ИтоговаяТаблица
	    |  
	    |УПОРЯДОЧИТЬ ПО
  	    |	ВидНалога, 
		|	ПериодРегистрации, 
		|	ФизЛицо";
														 
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();	
		
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
		
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("РасчетНалоговРезультатЗапроса", Результат);
			
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ФизЛицо","Работник");
		СтруктураЗаголовков.Вставить("ПериодРегистрации","Период регистрации");
		СтруктураЗаголовков.Вставить("ВидНалога","Вид налога");
		ИсходящиеДанные.Вставить("РасчетНалоговСтруктураЗаголовков", СтруктураЗаголовков);			
			
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ФизЛицо", "ФизЛицо");
		ИсходящиеДанные.Вставить("РасчетНалоговСтруктураРасшифровки", СтруктураРасшифровки);
		
	КонецЕсли;
		
КонецПроцедуры // ПроверитьПравилоРасчетНалогов()

Процедура ПроверитьПравилоПроверкаЗаполненностиДатыРожденияСотрудников(СтрокаПравила)
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегистрСведений.Период КАК ПериодЗаписи,
	               |	РегистрСведений.Сотрудник КАК Сотрудник,
	               |	РегистрСведений.Сотрудник.Физлицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТРаботающиеСотрудникиФизическихЛиц
	               |ИЗ
	               |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ), &УсловиеОрганизация) КАК РегистрСведений
				   |ГДЕ
				   |	РегистрСведений.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)"; 
	
	УсловиеОрганизация = "Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОрганизация", УсловиеОрганизация);

	Запрос.УстановитьПараметр("ДатаОкончания", КонецДатыКон);
		
	Запрос.Выполнить();
		
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	РаботающиеСотрудникиФизическихЛиц.Сотрудник КАК Сотрудник,
		|	РаботающиеСотрудникиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛица.ДатаРождения КАК ДатаРождения,
		|	ФизическиеЛица.ИдентификационныйКодЛичности КАК ИНН
		|ИЗ
		|	ВТРаботающиеСотрудникиФизическихЛиц КАК РаботающиеСотрудникиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО РаботающиеСотрудникиФизическихЛиц.ФизическоеЛицо = ФизическиеЛица.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Сотрудник";
		
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();	
		
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		ОшибкиНайдены = Ложь;
		
		ТаблицаОшибок = Новый ТаблицаЗначений;
		ТаблицаОшибок.Колонки.Добавить("Сотрудник");
		ТаблицаОшибок.Колонки.Добавить("ДатаРождения");
		
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
						 
			УточнениеПроблемы = "";
			
			Если Не ЗначениеЗаполнено(Выборка.ДатаРождения) Тогда
				
				ОшибкиНайдены = Истина;
				
				УточнениеПроблемы = НСтр("ru='Не задана дата рождения'");  
				
				НовСтрока = ТаблицаОшибок.Добавить();
				НовСтрока.Сотрудник = Выборка.Сотрудник;
				НовСтрока.ДатаРождения = УточнениеПроблемы;

			ИначеЕсли Выборка.ДатаРождения < '18991231000000'
				Или Выборка.ДатаРождения > ДобавитьМесяц(ТекущаяДатаСеанса(), - 120) Тогда
				
				ОшибкиНайдены = Истина;
				
				УточнениеПроблемы = НСтр("ru='Некорректная дата рождения - '") + " " + Формат(Выборка.ДатаРождения, "ДЛФ=DD");
				
				НовСтрока = ТаблицаОшибок.Добавить();
				НовСтрока.Сотрудник = Выборка.Сотрудник;
				НовСтрока.ДатаРождения = УточнениеПроблемы;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаПравила.ОбнаруженыОшибки      = ОшибкиНайдены;
		СтрокаПравила.ПроверкаВыполнена     = Истина;	
		
		Если ТаблицаОшибок.Количество() <> 0 Тогда
					
			ИсходящиеДанные.Вставить("ПроверкаЗаполненностиДатыРожденияСотрудниковТаблицаЗначений", ТаблицаОшибок);
			СтруктураЗаголовков = Новый Структура;
			СтруктураЗаголовков.Вставить("Сотрудник", 			  "Сотрудник");
			СтруктураЗаголовков.Вставить("ДатаРождения", 		  "Дата рождения");	
			ИсходящиеДанные.Вставить("ПроверкаЗаполненностиДатыРожденияСотрудниковСтруктураЗаголовков", СтруктураЗаголовков);
			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("Сотрудник", "Сотрудник");
			СтруктураРасшифровки.Вставить("ДатаРождения", "Сотрудник");	
			ИсходящиеДанные.Вставить("ПроверкаЗаполненностиДатыРожденияСотрудниковСтруктураРасшифровки", СтруктураРасшифровки);
			СтруктураШириныКолонок = Новый Структура;
			СтруктураШириныКолонок.Вставить("Сотрудник", 50);
			СтруктураШириныКолонок.Вставить("ДатаРождения", 50);
			ИсходящиеДанные.Вставить("ПроверкаЗаполненностиДатыРожденияСотрудниковСтруктураШириныКолонок", СтруктураШириныКолонок);
						
		КонецЕсли;
		
	Иначе
		СтрокаПравила.ОбнаруженыОшибки      = Ложь;
		СтрокаПравила.ПроверкаВыполнена     = Истина;		
	КонецЕсли;	
				
КонецПроцедуры

Процедура ПроверитьПравилоУдержаниеИПНиОПВ(СтрокаПравила)
	
	Запрос = Новый Запрос;
	// определим необходимость создания документа УдержаниеИПНиОПВНУ
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетнаяПолитикаНУ.УпрощенныйУчетИПНиОПВ
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ДатаКон, Организация = &Организация) КАК УчетнаяПолитикаНУ
	|";
	
	Запрос.УстановитьПараметр("ДатаКон"					, КонецДатыКон);
	Запрос.УстановитьПараметр("Организация"				, Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		мУпрощенныйУчетИПНиОПВ = Выборка.УпрощенныйУчетИПНиОПВ;
	Иначе
		мУпрощенныйУчетИПНиОПВ = Ложь;
	КонецЕсли;
	
	Если НЕ мУпрощенныйУчетИПНиОПВ Тогда
		
		// проверим за все ли месяцы в периоде проверки есть документы
		// Сначала базовая таблица периодов
		ТекстЗапросаПоМесяцам = "";
		МесяцНачала = Месяц(ДатаНач);
		МесяцКонца  = Месяц(ДатаКон);
		Для Счетчик = МесяцНачала по МесяцКонца Цикл
			Если Не ТекстЗапросаПоМесяцам = "" ТОгда
				ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + "
				| ОБЪЕДИНИТЬ ВСЕ
				| ";
			КонецЕсли;
			ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам +  "
									|	ВЫБРАТЬ
									|	&Дата" + СокрЛП(Счетчик) + " как Период		                        
									| ";
			Запрос.УстановитьПараметр("Дата" + СокрЛП(Счетчик), НачалоМесяца(ДобавитьМесяц(ДатаНач,Счетчик - Месяц(ДатаНач))));	
		КонецЦикла;	
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		               |	ИтоговаяТаблица.Период
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ТаблицаПоМесяцам.Период КАК Период,
		               |		ДокУдержаниеИПНиОПВ.Ссылка КАК ДокументУдержание,
					   |		ДокУдержаниеИПНиОПВ.Организация КАК Организация,
					   |		ДокРасчетИПНиОПВ.Ссылка КАК ДокументНачисление
		               |	ИЗ
		               |		(" + ТекстЗапросаПоМесяцам + ") КАК ТаблицаПоМесяцам
		               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.УдержаниеИПНиОПВНУ КАК ДокУдержаниеИПНиОПВ
		               |			ПО ТаблицаПоМесяцам.Период = ДокУдержаниеИПНиОПВ.ПериодРегистрации
		               |				И (ДокУдержаниеИПНиОПВ.Организация = &Организация)
					   |				И (ДокУдержаниеИПНиОПВ.СтруктурноеПодразделение = &СтруктурноеПодразделение)
					   |				И ДокУдержаниеИПНиОПВ.Проведен = ИСТИНА
		               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетУдержанийРаботниковОрганизаций КАК ДокРасчетИПНиОПВ
		               |			ПО ТаблицаПоМесяцам.Период = ДокРасчетИПНиОПВ.ПериодРегистрации
		               |				И (ДокРасчетИПНиОПВ.Организация = &Организация)
					   |				И (ДокРасчетИПНиОПВ.СтруктурноеПодразделение = &СтруктурноеПодразделение)
					   |				И ДокРасчетИПНиОПВ.Проведен = ИСТИНА) КАК ИтоговаяТаблица
		               |ГДЕ
		               |	ИтоговаяТаблица.ДокументУдержание ЕСТЬ NULL И НЕ ИтоговаяТаблица.ДокументНачисление ЕСТЬ NULL";
					   
		Результат = Запрос.Выполнить();	
		
		СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
		СтрокаПравила.ПроверкаВыполнена = Истина;
		
		Если СтрокаПравила.ОбнаруженыОшибки Тогда
			ТаблицаРезультата = Результат.Выгрузить();
			ТаблицаИсходящихДанных = Новый ТаблицаЗначений;
			ТаблицаИсходящихДанных.Колонки.Добавить("Период");
			Для Каждого Строка Из ТаблицаРезультата Цикл 
				НоваяСтрока = ТаблицаИсходящихДанных.Добавить();
				НоваяСтрока.Период = Формат(Строка.Период, "ДФ='ММММ гггг'");
			КонецЦикла;
			ИсходящиеДанные.Вставить("УдержаниеИПНиОПВТаблицаЗначений", ТаблицаИсходящихДанных);
			
			СтруктураЗаголовков = Новый Структура;
			СтруктураЗаголовков.Вставить("Период", "Период, в котором не обнаружено документов ""Удержание ИПН, ОПВ и ВОСМС по налоговому учету"".");
			ИсходящиеДанные.Вставить("УдержаниеИПНиОПВСтруктураЗаголовков", СтруктураЗаголовков);			
			
			СтруктураШириныКолонок = Новый Структура;
			СтруктураШириныКолонок.Вставить("Период" , 150);
			ИсходящиеДанные.Вставить("УдержаниеИПНиОПВСтруктураШириныКолонок", СтруктураШириныКолонок);
		КонецЕсли; 
				
	Иначе
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = "В учетной политике используется упрощенный учет ИПН, ОПВ и ВОСМС, поэтому необходимости"
											   + " в создании документов ""Удержание ИПН, ОПВ и ВОСМС по налоговому учету"" нет.";
		
	КонецЕсли;	
	
КонецПроцедуры // ПроверитьПравилоУдержаниеИПНиОПВ()


Процедура ПроверитьПравилоОтражениеЗПРегУч(СтрокаПравила)
	
	ПостроительОтчета = Новый ПостроительОтчета;
	
	ТекстЗапроса = ПроведениеРасчетов.СформироватьТекстЗапросаДляПроверкиОтраженияЗарплатыВРеглУчете();
	
	ПостроительОтчета.Текст = ТекстЗапроса;
	
	ПостроительОтчета.ИзмеренияСтроки.Добавить("ПериодРегистрации");
	ПостроительОтчета.ИзмеренияСтроки.Добавить("ФизЛицо");
	ПостроительОтчета.Порядок.Добавить("ФизЛицо.Наименование");
	ПостроительОтчета.Порядок.Добавить("ПериодРегистрации");
	
	ПостроительОтчета.Отбор.Добавить("Организация");
	ПостроительОтчета.Отбор["Организация"].Использование = Истина;
	ПостроительОтчета.Отбор["Организация"].Значение = Организация;
	
	Налоги = Справочники.НалогиСборыОтчисления;
	Типовой = ПланыСчетов.Типовой;

	ПостроительОтчета.Параметры.Вставить("СчетОплатаТруда", Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда);
	ПостроительОтчета.Параметры.Вставить("СчетСО", ?(НЕ ЗначениеЗаполнено(Налоги.ОбязательныеСоциальныеОтчисления.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ОбязательстваПоСоциальномуСтрахованию, Налоги.ОбязательныеСоциальныеОтчисления.СчетУчетаРасчетовСКонтрагентомБУ));
	ПостроительОтчета.Параметры.Вставить("СчетОПВ", ?(НЕ ЗначениеЗаполнено(Налоги.ОбязательныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ОбязательстваПоПенсионнымОтчислениям, Налоги.ОбязательныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ));
	ПостроительОтчета.Параметры.Вставить("СчетИПН", ?(НЕ ЗначениеЗаполнено(Налоги.ИндивидуальныйПодоходныйНалог.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ИндивидуальныйПодоходныйНалог, Налоги.ИндивидуальныйПодоходныйНалог.СчетУчетаРасчетовСКонтрагентомБУ));
	ПостроительОтчета.Параметры.Вставить("СчетСН", ?(НЕ ЗначениеЗаполнено(Налоги.СоциальныйНалог.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.СоциальныйНалог, Налоги.СоциальныйНалог.СчетУчетаРасчетовСКонтрагентомБУ));
	ПостроительОтчета.Параметры.Вставить("СчетОПВР", ?(НЕ ЗначениеЗаполнено(Налоги.ОбязательныеПенсионныеВзносыРаботодателя.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.РасчетыПоНакопительномуПенсионномуФонду, Налоги.ОбязательныеПенсионныеВзносыРаботодателя.СчетУчетаРасчетовСКонтрагентомБУ));
	ПостроительОтчета.Параметры.Вставить("СчетОППВ", ?(НЕ ЗначениеЗаполнено(Налоги.ОбязательныеПрофессиональныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ОбязательстваПоПенсионнымОтчислениям, Налоги.ОбязательныеПрофессиональныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ));
	ПостроительОтчета.Параметры.Вставить("СчетВОСМС", ?(НЕ ЗначениеЗаполнено(Налоги.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ОбязательстваПоВзносамОСМС, Налоги.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ));
	ПостроительОтчета.Параметры.Вставить("СчетООСМС", ?(НЕ ЗначениеЗаполнено(Налоги.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ОбязательстваПоОтчислениямОСМС, Налоги.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ));
	
	ПостроительОтчета.Параметры.Вставить("ДатаНач", ДатаНач);
	ПостроительОтчета.Параметры.Вставить("ДатаКон", КонецДатыКон);
	
	ПостроительОтчета.Выполнить();
	
	ДеревоРез = ПостроительОтчета.Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
	ТаблицаРез = Новый ТаблицаЗначений;
	ЗаполнитьЗначенияСвойств(ТаблицаРез.Колонки,ПостроительОтчета.Результат.Колонки);
	Если ДеревоРез.Строки.Количество() <> 0 Тогда
		СтрокаГруппы = ДеревоРез.Строки[0];
		Для Каждого Колонка Из ПостроительОтчета.Результат.Колонки Цикл
			 ТаблицаРез.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения,Колонка.Имя,Колонка.Ширина);		
		КонецЦикла;
		Для Каждого СтрокиПоПериодуРегистрации Из СтрокаГруппы.Строки Цикл
			Для Каждого Строка Из СтрокиПоПериодуРегистрации.Строки Цикл
				НовСтрока = ТаблицаРез.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока,Строка);			
			КонецЦикла;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТЧЗарПлата ИЗ &ВнешнийИсточник Как Внешний";
		Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаРез);
		Результат = Запрос.Выполнить();
		
		ИтоговыйЗапрос = Новый Запрос;
		ИтоговыйЗапрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
		ТекстЗап = "ВЫБРАТЬ 
		            |       ИтогТаблица.Период,
					|       ИтогТаблица.Работник,
		            |       ИтогТаблица.Показатель,
					|       ИтогТаблица.Разница
					|  ИЗ
					|(ВЫБРАТЬ 
					|  ТЧЗарПлата.ПериодРегистрации КАК Период,
					|  ТЧЗарПлата.ФизЛицо КАК Работник,
					|  ""Начисления"" КАК Показатель,
					|  ТЧЗарПлата.РазностьНачислено КАК Разница
					|
					|ИЗ ТЧЗарПлата
					| ГДЕ ТЧЗарПлата.РазностьНачислено <> 0
					|
					| ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ 
					| ТЧЗарПлата.ПериодРегистрации,
					| ТЧЗарПлата.ФизЛицо,
					| ""ИПН"",
					| ТЧЗарПлата.РазностьИПН
					|
					|ИЗ ТЧЗарПлата
					| ГДЕ ТЧЗарПлата.РазностьИПН <> 0
					|
					| ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ 
					| ТЧЗарПлата.ПериодРегистрации,
					| ТЧЗарПлата.ФизЛицо,
					| ""ОПВ"",
					| ТЧЗарПлата.РазностьОПВ
					|
					|ИЗ ТЧЗарПлата
					| ГДЕ ТЧЗарПлата.РазностьОПВ <> 0				
					|
					| ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ 
					| ТЧЗарПлата.ПериодРегистрации,
					| ТЧЗарПлата.ФизЛицо,
					| ""Прочие удержания"",
					| ТЧЗарПлата.РазностьУдержано
					|
					|ИЗ ТЧЗарПлата
					| ГДЕ ТЧЗарПлата.РазностьУдержано <> 0				
					|
					| ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ 
					| ТЧЗарПлата.ПериодРегистрации,
					| ТЧЗарПлата.ФизЛицо,
					| ""Социальные отчисления"",
					| ТЧЗарПлата.РазностьСоциальныеОтчисления
					|
					|ИЗ ТЧЗарПлата
					| ГДЕ ТЧЗарПлата.РазностьСоциальныеОтчисления <> 0				
					|
					| ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ 
					| ТЧЗарПлата.ПериодРегистрации,
					| ТЧЗарПлата.ФизЛицо,
					| ""Социальный налог"",
					| ТЧЗарПлата.РазностьСоциальныйНалог
					|
					|ИЗ ТЧЗарПлата
					| ГДЕ ТЧЗарПлата.РазностьСоциальныйНалог <> 0				
					|
					| ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ 
					| ТЧЗарПлата.ПериодРегистрации,
					| ТЧЗарПлата.ФизЛицо,
					| ""ОППВ"",
					| ТЧЗарПлата.РазностьОППВ
					|
					|ИЗ ТЧЗарПлата
					| ГДЕ ТЧЗарПлата.РазностьОППВ <> 0	
					|
					| ОБЪЕДИНИТЬ ВСЕ
					|
					//++ЗУП
					|ВЫБРАТЬ 
					| ТЧЗарПлата.ПериодРегистрации,
					| ТЧЗарПлата.ФизЛицо,
					| ""ОПВР"",
					| ТЧЗарПлата.РазностьОПВР
					|
					|ИЗ ТЧЗарПлата
					| ГДЕ ТЧЗарПлата.РазностьОПВР <> 0
					|
					| ОБЪЕДИНИТЬ ВСЕ
					|
					//--ЗУП
					|ВЫБРАТЬ 
					| ТЧЗарПлата.ПериодРегистрации,
					| ТЧЗарПлата.ФизЛицо,
					| ""ВОСМС"",
					| ТЧЗарПлата.РазностьВОСМС
					|
					|ИЗ ТЧЗарПлата
					| ГДЕ ТЧЗарПлата.РазностьВОСМС <> 0	
					|
					| ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ 
					| ТЧЗарПлата.ПериодРегистрации,
					| ТЧЗарПлата.ФизЛицо,
					| ""ООСМС"",
					| ТЧЗарПлата.РазностьООСМС
					|
					|ИЗ ТЧЗарПлата
					| ГДЕ ТЧЗарПлата.РазностьООСМС <> 0	
					|
					| ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ 
					| ТЧЗарПлата.ПериодРегистрации,
					| ТЧЗарПлата.ФизЛицо,
					| ""Пени по ОПВ"",
					| ТЧЗарПлата.РазностьПениОПВ
					|
					|ИЗ ТЧЗарПлата
					| ГДЕ ТЧЗарПлата.РазностьПениОПВ <> 0				
					|
					| ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ 
					| ТЧЗарПлата.ПериодРегистрации,
					| ТЧЗарПлата.ФизЛицо,
					| ""Пени по СО"",
					| ТЧЗарПлата.РазностьПениСО
					|
					|ИЗ ТЧЗарПлата
					| ГДЕ ТЧЗарПлата.РазностьПениСО <> 0 
					| ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ 
					| ТЧЗарПлата.ПериодРегистрации,
					| ТЧЗарПлата.ФизЛицо,
					| ""Пени по ОППВ"",
					| ТЧЗарПлата.РазностьПениОППВ
					|
					|ИЗ ТЧЗарПлата
					| ГДЕ ТЧЗарПлата.РазностьПениОППВ <> 0				
					|
					| ОБЪЕДИНИТЬ ВСЕ
					|
					//++ЗУП
					|ВЫБРАТЬ 
					| ТЧЗарПлата.ПериодРегистрации,
					| ТЧЗарПлата.ФизЛицо,
					| ""Пени по ОПВР"",
					| ТЧЗарПлата.РазностьПениОПВР
					|
					|ИЗ ТЧЗарПлата
					| ГДЕ ТЧЗарПлата.РазностьПениОПВР <> 0
					|
					| ОБЪЕДИНИТЬ ВСЕ
					|
					//--ЗУП
					|ВЫБРАТЬ 
					| ТЧЗарПлата.ПериодРегистрации,
					| ТЧЗарПлата.ФизЛицо,
					| ""Пени по ВОСМС"",
					| ТЧЗарПлата.РазностьПениВОСМС
					|
					|ИЗ ТЧЗарПлата
					| ГДЕ ТЧЗарПлата.РазностьПениВОСМС <> 0 
					|
					| ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ 
					| ТЧЗарПлата.ПериодРегистрации,
					| ТЧЗарПлата.ФизЛицо,
					| ""Пени по ООСМС"",
					| ТЧЗарПлата.РазностьПениООСМС
					|
					|ИЗ ТЧЗарПлата
					| ГДЕ ТЧЗарПлата.РазностьПениООСМС <> 0 
					|)  КАК ИтогТаблица
					| УПОРЯДОЧИТЬ ПО ИтогТаблица.Период, ИтогТаблица.Работник.Наименование, ИтогТаблица.Показатель ";
		
		ИтоговыйЗапрос.Текст = ТекстЗап;
		
		Результат = ИтоговыйЗапрос.Выполнить();	
		
		СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
		СтрокаПравила.ПроверкаВыполнена = Истина;
	Иначе
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
	КонецЕсли;
		
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ОтражениеЗПРегУчРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("Разница", "Начислено(удержано) - отражено");
		ИсходящиеДанные.Вставить("ОтражениеЗПРегУчСтруктураЗаголовков", СтруктураЗаголовков);
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Работник", "Работник");
		ИсходящиеДанные.Вставить("ОтражениеЗПРегУчСтруктураРасшифровки", СтруктураРасшифровки);
		СтруктураФорматаПолей = Новый Структура;			
		СтруктураФорматаПолей.Вставить("Период", "ДФ = дд.ММ.гггг");
		ИсходящиеДанные.Вставить("ОтражениеЗПРегУчСтруктураФорматаПолей", СтруктураФорматаПолей);
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Период",   20);
		СтруктураШириныКолонок.Вставить("Работник", 60);
		ИсходящиеДанные.Вставить("ОтражениеЗПРегУчСтруктураШириныКолонок", СтруктураШириныКолонок);
	КонецЕсли; 	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕРАСЧЕТ ЗАРАБОТНОЙ ПЛАТЫ

Процедура ПроверитьПравилоСоответствиеРасчетовИПлановыхНачислений(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаполнениеПлановыхНачислений.Сотрудник КАК Сотрудник,
		|	ЗаполнениеПлановыхНачислений.ПериодРегистрации КАК ПериодРегистрации,
		|	ЗаполнениеПлановыхНачислений.ОбъектЗаполнения КАК ОбъектЗаполнения
		|ИЗ
		|	РегистрСведений.ЗаполнениеПлановыхНачислений КАК ЗаполнениеПлановыхНачислений
		|ГДЕ
		|	ЗаполнениеПлановыхНачислений.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|	И ЗаполнениеПлановыхНачислений.ОбособленноеПодразделение = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРегистрации,
		|	ОбъектЗаполнения,
		|	Сотрудник";
	
	Результат = Запрос.Выполнить();	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;

	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("СоответствиеРасчетовИПлановыхНачисленийРезультатЗапроса", Результат);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("Сотрудник", "Сотрудник");
		СтруктураЗаголовков.Вставить("ПериодРегистрации", "Период регистрации");
		СтруктураЗаголовков.Вставить("ОбъектЗаполнения", "Документ начисления");
		ИсходящиеДанные.Вставить("СоответствиеРасчетовИПлановыхНачисленийСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Сотрудник" , 40);
		СтруктураШириныКолонок.Вставить("ПериодРегистрации", 20);
		СтруктураШириныКолонок.Вставить("ОбъектЗаполнения", 60);
		ИсходящиеДанные.Вставить("СоответствиеРасчетовИПлановыхНачисленийСтруктураШириныКолонок", СтруктураШириныКолонок);
		
		СтруктураФорматаПолей = Новый Структура;			
		СтруктураФорматаПолей.Вставить("ПериодРегистрации", "ДФ='ММММ гггг'");
		ИсходящиеДанные.Вставить("СоответствиеРасчетовИПлановыхНачисленийСтруктураФорматаПолей", СтруктураФорматаПолей);

		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Сотрудник", "Сотрудник");
		СтруктураРасшифровки.Вставить("ОбъектЗаполнения", "ОбъектЗаполнения");
		ИсходящиеДанные.Вставить("СоответствиеРасчетовИПлановыхНачисленийСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьПравилоСоответствиеНачисленийКадровымДанным(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));	
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизацийСрезПоследних.Период КАК Период,
		|	РаботникиОрганизацийСрезПоследних.Организация КАК Организация,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
		|	РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение
		|ПОМЕСТИТЬ ВТ_ПериодыРаботников
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНач, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизацийСрезПоследних
		|ГДЕ
		|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Период,
		|	РаботникиОрганизаций.Организация,
		|	РаботникиОрганизаций.Сотрудник,
		|	РаботникиОрганизаций.ПодразделениеОрганизации,
		|	РаботникиОрганизаций.ОбособленноеПодразделение
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
		|	И РаботникиОрганизаций.Период > &ДатаНач
		|	И РаботникиОрганизаций.Период <= &ДатаКон		
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДоговорникиОрганизаций.ДатаНачала,
		|	ДоговорникиОрганизаций.Организация,
		|	ДоговорникиОрганизаций.Сотрудник,
		|	ДоговорникиОрганизаций.ПодразделениеОрганизации,
		|	ДоговорникиОрганизаций.ОбособленноеПодразделение
		|ИЗ
		|	РегистрСведений.ДоговорникиОрганизаций КАК ДоговорникиОрганизаций
		|ГДЕ
		|	ДоговорникиОрганизаций.Организация = &ГоловнаяОрганизация		
		|	И (ДоговорникиОрганизаций.ХарактерОплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыПоДоговору.Ежемесячно)
		|				И ДоговорникиОрганизаций.ДатаОкончания >= &ДатаНач
		|				И ДоговорникиОрганизаций.ДатаНачала <= &ДатаКон
		|			ИЛИ ДоговорникиОрганизаций.ХарактерОплаты <> ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыПоДоговору.Ежемесячно)
		|				И ДоговорникиОрганизаций.ДатаОкончания >= &ДатаНач
		|				И ДоговорникиОрганизаций.ДатаОкончания <= &ДатаКон)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Организация,
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации КАК ПериодРегистрации,
		|	ОсновныеНачисленияРаботниковОрганизаций.Организация,
		|	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник КАК Сотрудник,
		|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета КАК ВидРасчета,
		|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор КАК Регистратор,
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало,
		|	ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение,
		|	ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации,
		|	МАКСИМУМ(ВТ_ПериодыРаботников.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_Начисления
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыРаботников КАК ВТ_ПериодыРаботников
		|		ПО ОсновныеНачисленияРаботниковОрганизаций.Организация = ВТ_ПериодыРаботников.Организация
		|			И ОсновныеНачисленияРаботниковОрганизаций.Сотрудник = ВТ_ПериодыРаботников.Сотрудник
		|			И ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало >= ВТ_ПериодыРаботников.Период
		|ГДЕ
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|	И ОсновныеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация
		|	И ОсновныеНачисленияРаботниковОрганизаций.Сотрудник В
		|			(ВЫБРАТЬ
		|				ПериодыРаботников.Сотрудник
		|			ИЗ
		|				ВТ_ПериодыРаботников КАК ПериодыРаботников)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник,
		|	ОсновныеНачисленияРаботниковОрганизаций.Организация,
		|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета,
		|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор,
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации,
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало,
		|	ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение,
		|	ОсновныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации,
		|	ДополнительныеНачисленияРаботниковОрганизаций.Организация,
		|	ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник,
		|	ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета,
		|	ДополнительныеНачисленияРаботниковОрганизаций.Регистратор,
		|	ДополнительныеНачисленияРаботниковОрганизаций.БазовыйПериодНачало,
		|	ДополнительныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение,
		|	ДополнительныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации,
		|	МАКСИМУМ(ВТ_ПериодыРаботников.Период)
		|ИЗ
		|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыРаботников КАК ВТ_ПериодыРаботников
		|		ПО ДополнительныеНачисленияРаботниковОрганизаций.Организация = ВТ_ПериодыРаботников.Организация
		|			И ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник = ВТ_ПериодыРаботников.Сотрудник
		|			И ДополнительныеНачисленияРаботниковОрганизаций.БазовыйПериодНачало >= ВТ_ПериодыРаботников.Период
		|ГДЕ
		|	ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|	И ДополнительныеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация
		|	И ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник В
		|			(ВЫБРАТЬ
		|				ПериодыРаботников.Сотрудник
		|			ИЗ
		|				ВТ_ПериодыРаботников КАК ПериодыРаботников)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник,
		|	ДополнительныеНачисленияРаботниковОрганизаций.Организация,
		|	ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета,
		|	ДополнительныеНачисленияРаботниковОрганизаций.Регистратор,
		|	ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации,
		|	ДополнительныеНачисленияРаботниковОрганизаций.БазовыйПериодНачало,
		|	ДополнительныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение,
		|	ДополнительныеНачисленияРаботниковОрганизаций.ПодразделениеОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Начисления.ПериодРегистрации КАК ПериодРегистрации,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ВидРасчета КАК ВидРасчета,
		|	Начисления.Регистратор КАК Регистратор,
		|	ВЫБОР
		|		КОГДА ВТ_ПериодыРаботников.ОбособленноеПодразделение = Начисления.ОбособленноеПодразделение
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СоответствиеСтруктурнойЕдиницы,
		|	ВЫБОР
		|		КОГДА ВТ_ПериодыРаботников.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СоответствиеПодразделенияОрганизации
		|ИЗ
		|	ВТ_Начисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПериодыРаботников КАК ВТ_ПериодыРаботников
		|		ПО Начисления.Организация = ВТ_ПериодыРаботников.Организация
		|			И Начисления.Сотрудник = ВТ_ПериодыРаботников.Сотрудник
		|			И Начисления.Период = ВТ_ПериодыРаботников.Период
		|ГДЕ
		|	НЕ(ВТ_ПериодыРаботников.ОбособленноеПодразделение = Начисления.ОбособленноеПодразделение
		|				И ВТ_ПериодыРаботников.ПодразделениеОрганизации = Начисления.ПодразделениеОрганизации)
		|				И Начисления.ОбособленноеПодразделение = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРегистрации,
		|	Регистратор,
		|	Сотрудник,
		|	ВидРасчета";
		
		
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
	
		ИсходящиеДанные.Вставить("СоответствиеНачисленийКадровымДаннымРезультатЗапроса", Результат);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ПериодРегистрации", "Период регистрации");
		СтруктураЗаголовков.Вставить("Регистратор", "Документ начисления");
		СтруктураЗаголовков.Вставить("Сотрудник", "Сотрудник");
		СтруктураЗаголовков.Вставить("ВидРасчета", "Начисление");
		СтруктураЗаголовков.Вставить("СоответствиеСтруктурнойЕдиницы", "Организация соответствует кадровым данным");
		СтруктураЗаголовков.Вставить("СоответствиеПодразделенияОрганизации", "Подразделение соответствует кадровым данным");
		ИсходящиеДанные.Вставить("СоответствиеНачисленийКадровымДаннымСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("ПериодРегистрации" , 17);
		СтруктураШириныКолонок.Вставить("Регистратор" , 40);
		СтруктураШириныКолонок.Вставить("Сотрудник" , 20);
		СтруктураШириныКолонок.Вставить("ВидРасчета" , 17);
		СтруктураШириныКолонок.Вставить("СоответствиеСтруктурнойЕдиницы" , 20);
		СтруктураШириныКолонок.Вставить("СоответствиеПодразделенияОрганизации" , 20);
		ИсходящиеДанные.Вставить("СоответствиеНачисленийКадровымДаннымСтруктураШириныКолонок", СтруктураШириныКолонок);
		
		СтруктураФорматаПолей = Новый Структура;			
		СтруктураФорматаПолей.Вставить("ПериодРегистрации", "ДФ='ММММ гггг'");
		ИсходящиеДанные.Вставить("СоответствиеНачисленийКадровымДаннымСтруктураФорматаПолей", СтруктураФорматаПолей);

		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Регистратор", "Регистратор");
		СтруктураРасшифровки.Вставить("Сотрудник", "Сотрудник");
		ИсходящиеДанные.Вставить("СоответствиеНачисленийКадровымДаннымСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли;
	

КонецПроцедуры

Процедура ПроверитьПравилоНаличиеПерерасчетов(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Перерасчеты.ПериодРегистрации КАК ПериодРегистрации,
		|	Перерасчеты.ОбъектПерерасчета КАК ОбъектПерерасчета
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПерерасчетОсновныхНачислений.ОбъектПерерасчета КАК ОбъектПерерасчета,
		|		ПерерасчетОсновныхНачислений.ОбъектПерерасчета.ПериодРегистрации КАК ПериодРегистрации
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК ПерерасчетОсновныхНачислений
		|	ГДЕ
		|		ПерерасчетОсновныхНачислений.ОбъектПерерасчета.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПерерасчетОсновныхНачислений.Организация = &Организация
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПерерасчетДополнительныхНачислений.ОбъектПерерасчета,
		|		ПерерасчетДополнительныхНачислений.ОбъектПерерасчета.ПериодРегистрации
		|	ИЗ
		|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК ПерерасчетДополнительныхНачислений
		|	ГДЕ
		|		ПерерасчетДополнительныхНачислений.ОбъектПерерасчета.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПерерасчетДополнительныхНачислений.Организация = &Организация
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПерерасчетСреднегоЗаработка.ОбъектПерерасчета,
		|		ПерерасчетСреднегоЗаработка.ОбъектПерерасчета.ПериодРегистрации
		|	ИЗ
		|		РегистрРасчета.РасчетСреднегоЗаработка.ПерерасчетСреднегоЗаработка КАК ПерерасчетСреднегоЗаработка
		|	ГДЕ
		|		ПерерасчетСреднегоЗаработка.ОбъектПерерасчета.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПерерасчетСреднегоЗаработка.Организация = &Организация) КАК Перерасчеты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРегистрации,
		|	ОбъектПерерасчета";
		
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НаличиеПерерасчетовРезультатЗапроса", Результат);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОбъектПерерасчета", "Документ начисления");
		СтруктураЗаголовков.Вставить("ПериодРегистрации", "Период регистрации");
		ИсходящиеДанные.Вставить("НаличиеПерерасчетовСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("ОбъектПерерасчета" , 60);
		СтруктураШириныКолонок.Вставить("ПериодРегистрации", 20);
		ИсходящиеДанные.Вставить("НаличиеПерерасчетовСтруктураШириныКолонок", СтруктураШириныКолонок);
		
		СтруктураФорматаПолей = Новый Структура;			
		СтруктураФорматаПолей.Вставить("ПериодРегистрации", "ДФ='ММММ гггг'");
		ИсходящиеДанные.Вставить("НаличиеПерерасчетовСтруктураФорматаПолей", СтруктураФорматаПолей);

		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОбъектПерерасчета", "ОбъектПерерасчета");
		ИсходящиеДанные.Вставить("НаличиеПерерасчетовСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьПравилоНаличиеПерерасчетовКорректировкиДохода(СтрокаПравила)
	
	Если ДатаНач < Дата(2019, 1, 1) Тогда
		СтрокаПравила.КомментарийРезультатаНеВыполнена = "До 2019 года корректировка дохода не применялась";
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("ОграничениеКорректировкиДохода25МРП", 25 * ПроведениеРасчетов.МесячныйРасчетныйПоказатель(НачалоГода(ДатаНач)));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета
		|ПОМЕСТИТЬ ВТ_РасчетыОтОбратного
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.КомпенсируемыеРасчетомОтОбратногоВидыУдержаний КАК ОсновныеНачисленияОрганизацийКомпенсируемыеРасчетомОтОбратногоВидыУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|		ПО ОсновныеНачисленияОрганизацийКомпенсируемыеРасчетомОтОбратногоВидыУдержаний.Ссылка = ОсновныеНачисленияОрганизаций.Ссылка
		|			И (ОсновныеНачисленияОрганизацийКомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчета В (ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог), ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование)))
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.ОтОбратного
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДополнительныеНачисленияОрганизаций.Ссылка
		|ИЗ
		|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсируемыеРасчетомОтОбратногоВидыУдержаний КАК ДополнительныеНачисленияОрганизацийКомпенсируемыеРасчетомОтОбратногоВидыУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
		|		ПО ДополнительныеНачисленияОрганизацийКомпенсируемыеРасчетомОтОбратногоВидыУдержаний.Ссылка = ДополнительныеНачисленияОрганизаций.Ссылка
		|			И (ДополнительныеНачисленияОрганизацийКомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчета В (ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог), ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование)))
		|ГДЕ
		|	ДополнительныеНачисленияОрганизаций.ОтОбратного
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИПНСведенияОДоходах.ФизЛицо,
		|	ИПНСведенияОДоходах.Организация,
		|	ИПНСведенияОДоходах.Регистратор,
		|	ИПНСведенияОДоходах.Регистратор.ПериодРегистрации КАК ПериодРегистрации,
		|	ИПНСведенияОДоходах.СуммаДохода КАК СуммаДохода
		|ПОМЕСТИТЬ ВТ_ПервичныеКорректировкиОтОбратногоМенее25МРП
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РасчетыОтОбратного КАК РасчетыОтОбратного
		|		ПО (РасчетыОтОбратного.ВидРасчета = ИПНСведенияОДоходах.ВидРасчета)
		|ГДЕ
		|	ИПНСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|	И ИПНСведенияОДоходах.Организация = &Организация
		|	И ИПНСведенияОДоходах.СуммаДохода <= &ОграничениеКорректировкиДохода25МРП
		|	И ИПНСведенияОДоходах.ВидДохода = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя)
		|	И ТИПЗНАЧЕНИЯ(ИПНСведенияОДоходах.ФизЛицо) <> ТИП(Справочник.Контрагенты)
		|	И ТИПЗНАЧЕНИЯ(ИПНСведенияОДоходах.Регистратор) <> ТИП(Документ.Сторнирование)
		|	И ТИПЗНАЧЕНИЯ(ИПНСведенияОДоходах.Регистратор) <> ТИП(Документ.КорректировкаЗаписейРегистров)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.Регистратор,
		|	ИПНСведенияОДоходах.Регистратор.ПериодРегистрации,
		|	ИПНСведенияОДоходах.ФизЛицо,
		|	ИПНСведенияОДоходах.Организация,
		|	ИПНСведенияОДоходах.СуммаДохода
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ТИПЗНАЧЕНИЯ(ИПНСведенияОДоходах.Регистратор) <> ТИП(Документ.НачислениеЗарплатыРаботникамОрганизаций)) = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ПервичныеКорректировкиОтОбратногоМенее25МРП.Регистратор,
		|	ВТ_ПервичныеКорректировкиОтОбратногоМенее25МРП.ПериодРегистрации,
		|	ВТ_ПервичныеКорректировкиОтОбратногоМенее25МРП.СуммаДохода КАК СуммаНачисления,
		|	МАКСИМУМ(ЕСТЬNULL(ИПНСведенияОДоходахОбороты.СуммаДоходаОборот, 0)) КАК СуммаДохода
		|ИЗ
		|	ВТ_ПервичныеКорректировкиОтОбратногоМенее25МРП КАК ВТ_ПервичныеКорректировкиОтОбратногоМенее25МРП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИПНСведенияОДоходах.Обороты(&ДатаНач, &ДатаКон, , Организация = &Организация) КАК ИПНСведенияОДоходахОбороты
		|		ПО ВТ_ПервичныеКорректировкиОтОбратногоМенее25МРП.ФизЛицо = ИПНСведенияОДоходахОбороты.ФизЛицо
		|			И ВТ_ПервичныеКорректировкиОтОбратногоМенее25МРП.Организация = ИПНСведенияОДоходахОбороты.Организация
		|			И (ИПНСведенияОДоходахОбороты.ВидДохода = ЗНАЧЕНИЕ(Справочник.ВидыДоходов.ДоходыОтРаботодателя))
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПервичныеКорректировкиОтОбратногоМенее25МРП.Регистратор,
		|	ВТ_ПервичныеКорректировкиОтОбратногоМенее25МРП.ПериодРегистрации,
		|	ВТ_ПервичныеКорректировкиОтОбратногоМенее25МРП.СуммаДохода
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ЕСТЬNULL(ИПНСведенияОДоходахОбороты.СуммаДоходаОборот, 0)) > &ОграничениеКорректировкиДохода25МРП";
		
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НаличиеПерерасчетовКорректировкиДоходаРезультатЗапроса", Результат);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("Регистратор", "Документ начисления");
		СтруктураЗаголовков.Вставить("ПериодРегистрации", "Период регистрации");
		СтруктураЗаголовков.Вставить("СуммаНачисления", "Сумма начисления");
		СтруктураЗаголовков.Вставить("СуммаДохода", "Сумма дохода");
		ИсходящиеДанные.Вставить("НаличиеПерерасчетовКорректировкиДоходаСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Регистратор" , 60);
		СтруктураШириныКолонок.Вставить("ПериодРегистрации", 20);
		СтруктураШириныКолонок.Вставить("СуммаНачисления", 25);
		СтруктураШириныКолонок.Вставить("СуммаДохода", 25);
		ИсходящиеДанные.Вставить("НаличиеПерерасчетовКорректировкиДоходаСтруктураШириныКолонок", СтруктураШириныКолонок);
		
		СтруктураФорматаПолей = Новый Структура;			
		СтруктураФорматаПолей.Вставить("ПериодРегистрации", "ДФ='ММММ гггг'");
		ИсходящиеДанные.Вставить("НаличиеПерерасчетовКорректировкиДоходаСтруктураФорматаПолей", СтруктураФорматаПолей);

		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Регистратор", "Регистратор");
		ИсходящиеДанные.Вставить("НаличиеПерерасчетовКорректировкиДоходаСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАЦИИ ПО ДЕНЕЖНЫМ СРЕДСТВАМ

Процедура ПроверитьПравилоНепроведенныеПлатежиИПриходы(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриходныйКассовыйОрдер.Ссылка КАК Документ,
	|	ПриходныйКассовыйОрдер.Дата КАК Дата,
	|	ПриходныйКассовыйОрдер.Номер,
	|	ПриходныйКассовыйОрдер.ВидОперации,
	|	ПриходныйКассовыйОрдер.СуммаДокумента,
	|	ПриходныйКассовыйОрдер.Ответственный
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Проведен = ЛОЖЬ
	|	И ПриходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПриходныйКассовыйОрдер.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Дата,
	|	РасходныйКассовыйОрдер.Номер,
	|	РасходныйКассовыйОрдер.ВидОперации,
	|	РасходныйКассовыйОрдер.СуммаДокумента,
	|	РасходныйКассовыйОрдер.Ответственный
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Проведен = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПлатежноеПоручениеИсходящее.Ссылка,
	|	ПлатежноеПоручениеИсходящее.Дата,
	|	ПлатежноеПоручениеИсходящее.Номер,
	|	ПлатежноеПоручениеИсходящее.ВидОперации,
	|	ПлатежноеПоручениеИсходящее.СуммаДокумента,
	|	ПлатежноеПоручениеИсходящее.Ответственный
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Проведен = ЛОЖЬ
	|	И ПлатежноеПоручениеИсходящее.ПометкаУдаления = ЛОЖЬ
	|	И ПлатежноеПоручениеИсходящее.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПлатежноеПоручениеИсходящее.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПлатежноеПоручениеВходящее.Ссылка,
	|	ПлатежноеПоручениеВходящее.Дата,
	|	ПлатежноеПоручениеВходящее.Номер,
	|	ПлатежноеПоручениеВходящее.ВидОперации,
	|	ПлатежноеПоручениеВходящее.СуммаДокумента,
	|	ПлатежноеПоручениеВходящее.Ответственный
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
	|ГДЕ
	|	ПлатежноеПоручениеВходящее.Проведен = ЛОЖЬ
	|	И ПлатежноеПоручениеВходящее.ПометкаУдаления = ЛОЖЬ
	|	И ПлатежноеПоручениеВходящее.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПлатежноеПоручениеВходящее.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчет.Ссылка,
	|	АвансовыйОтчет.Дата,
	|	АвансовыйОтчет.Номер,
	|	NULL,
	|	АвансовыйОтчет.СуммаДокумента,
	|	АвансовыйОтчет.Ответственный
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|ГДЕ
	|	АвансовыйОтчет.Проведен = ЛОЖЬ
	|	И АвансовыйОтчет.ПометкаУдаления = ЛОЖЬ
	|	И АвансовыйОтчет.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И АвансовыйОтчет.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач", 				  ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", 				  КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", 			  Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НепроведенныеПлатежиИПриходыРезультатЗапроса", Результат);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ВидОперации", "Вид операции");
		СтруктураЗаголовков.Вставить("СуммаДокумента", "Сумма документа");
		ИсходящиеДанные.Вставить("НепроведенныеПлатежиИПриходыСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Документ" , 40);
		СтруктураШириныКолонок.Вставить("Дата", 20);
		СтруктураШириныКолонок.Вставить("Номер"  , 25);
		СтруктураШириныКолонок.Вставить("ВидОперации" , 25);
		СтруктураШириныКолонок.Вставить("СуммаДокумента"   , 25);
		СтруктураШириныКолонок.Вставить("Ответственный"   , 25);
		ИсходящиеДанные.Вставить("НепроведенныеПлатежиИПриходыСтруктураШириныКолонок", СтруктураШириныКолонок);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Документ", "Документ");
		ИсходящиеДанные.Вставить("НепроведенныеПлатежиИПриходыСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоОтсутствиеЗадолженностиПоУволенным(СтрокаПравила)
	
	Запрос = Новый Запрос;
	ГраницаДаты = Новый Граница(КонецДатыКон,  ВидГраницы.Включая);
	Запрос.УстановитьПараметр("парамДатаКон", ГраницаДаты);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизацийСрезПоследних.Сотрудник,
		|	РаботникиОрганизацийСрезПоследних.Период КАК ДатаУвольнения,
		|	СУММА(ЕСТЬNULL(ОстаткиПоЗарплате.СуммаВзаиморасчетовОстаток, 0)) КАК СуммаЗадолженности,
		|	СУММА(ЕСТЬNULL(ОстаткиПоДепонентам.СуммаВзаиморасчетовОстаток, 0)) КАК СуммаЗадолженностиПоДепонентам,
		|	СУММА(ЕСТЬNULL(ОстаткиПоЗарплате.СуммаВзаиморасчетовОстаток, 0) + ЕСТЬNULL(ОстаткиПоДепонентам.СуммаВзаиморасчетовОстаток, 0)) КАК Итого
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&парамДатаКон,
		|			Организация = &ГоловнаяОрганизация
		|				И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&парамДатаКон, ) КАК ОстаткиПоЗарплате
		|		ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = ОстаткиПоЗарплате.Физлицо
		|			И РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение = ОстаткиПоЗарплате.Организация
		|			И (НАЧАЛОПЕРИОДА(РаботникиОрганизацийСрезПоследних.Период, МЕСЯЦ) >= НАЧАЛОПЕРИОДА(ОстаткиПоЗарплате.ПериодВзаиморасчетов, МЕСЯЦ))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Остатки(&парамДатаКон, ) КАК ОстаткиПоДепонентам
		|		ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = ОстаткиПоДепонентам.Физлицо
		|			И РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение = ОстаткиПоДепонентам.Организация
		|			И (НАЧАЛОПЕРИОДА(РаботникиОрганизацийСрезПоследних.Период, МЕСЯЦ) >= НАЧАЛОПЕРИОДА(ОстаткиПоДепонентам.ПериодВзаиморасчетов, МЕСЯЦ))
		|ГДЕ
		|	РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение = &Организация
		|	И РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|	И (ЕСТЬNULL(ОстаткиПоЗарплате.СуммаВзаиморасчетовОстаток, 0) <> 0
		|			ИЛИ ЕСТЬNULL(ОстаткиПоДепонентам.СуммаВзаиморасчетовОстаток, 0) <> 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	РаботникиОрганизацийСрезПоследних.Сотрудник,
		|	РаботникиОрганизацийСрезПоследних.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	РаботникиОрганизацийСрезПоследних.Сотрудник.Наименование,
		|	ДатаУвольнения";
	
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ОтсутствиеЗадолженностиПоУволеннымРезультатЗапроса", Результат);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("Сотрудник", "Сотрудник");
		СтруктураЗаголовков.Вставить("ДатаУвольнения", "Дата увольнения");
		СтруктураЗаголовков.Вставить("СуммаЗадолженности", "Сумма задолженности по зарплате");
		СтруктураЗаголовков.Вставить("СуммаЗадолженностиПоДепонентам", "Сумма задолженности по депонированной зарплате");
		СтруктураЗаголовков.Вставить("Итого", "Всего задолженности");
		ИсходящиеДанные.Вставить("ОтсутствиеЗадолженностиПоУволеннымСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Сотрудник" , 40);
		СтруктураШириныКолонок.Вставить("ДатаУвольнения", 20);
		СтруктураШириныКолонок.Вставить("СуммаЗадолженности", 20);
		СтруктураШириныКолонок.Вставить("СуммаЗадолженностиПоДепонентам", 20);
		СтруктураШириныКолонок.Вставить("Итого", 20);
		ИсходящиеДанные.Вставить("ОтсутствиеЗадолженностиПоУволеннымСтруктураШириныКолонок", СтруктураШириныКолонок);
		
		СтруктураФорматаПолей = Новый Структура;			
		СтруктураФорматаПолей.Вставить("ДатаУвольнения", "ДФ=дд.ММ.гггг");
		ИсходящиеДанные.Вставить("ОтсутствиеЗадолженностиПоУволеннымСтруктураФорматаПолей", СтруктураФорматаПолей);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Сотрудник", "Сотрудник");
		ИсходящиеДанные.Вставить("ОтсутствиеЗадолженностиПоУволеннымСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли; 

КонецПроцедуры


// Процедура-оболочка, вызывающая другие процедуры на выполнение или выполняющая текст алгоритма
Процедура ПроверитьПравило(СтрокаПравила)
	
	СтрокаПравила.КомментарийРезультата   = "";
	СтрокаПравила.ПричиныОшибокРезультата = "";
	СтрокаПравила.РекомендацииРезультата  = "";
	
	РежимОтладки = СтрокаПравила.РежимОтладки ИЛИ ПустаяСтрока(СтрокаПравила.ТекстАлгоритма);
	
	Если РежимОтладки Тогда
		Попытка
			Выполнить("ПроверитьПравило"+СтрокаПравила.Идентификатор+"(СтрокаПравила)");
		Исключение
			ЗаголовокСообщения = "Ошибка при попытке выполнения процедуры "+"ПроверитьПравило"+СтрокаПравила.Идентификатор;
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), , ЗаголовокСообщения);
			СтрокаПравила.ПроверкаВыполнена = Ложь;
			СтрокаПравила.ОбнаруженыОшибки = Ложь;
		КонецПопытки;
	Иначе
		Попытка
			Выполнить(СтрокаПравила.ТекстАлгоритма);
		Исключение
			ЗаголовокСообщения = "Ошибка при попытке выполнения алгоритма правила "+СтрокаПравила.Идентификатор;
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), , ЗаголовокСообщения);
			СтрокаПравила.ПроверкаВыполнена = Ложь;
			СтрокаПравила.ОбнаруженыОшибки = Ложь;
		КонецПопытки;
	КонецЕсли;

	КомментарийЗаданВАлгоритме = НЕ ПустаяСтрока(СтрокаПравила.КомментарийРезультата);
	Если НЕ КомментарийЗаданВАлгоритме Тогда
		Если СтрокаПравила.ОбнаруженыОшибки Тогда
			СтрокаПравила.КомментарийРезультата = СтрокаПравила.КомментарийРезультатаОшибка;
		ИначеЕсли СтрокаПравила.ПроверкаВыполнена Тогда
			СтрокаПравила.КомментарийРезультата = СтрокаПравила.КомментарийРезультатаНетОшибок;
		Иначе
			СтрокаПравила.КомментарийРезультата = СтрокаПравила.КомментарийРезультатаНеВыполнена;
		КонецЕсли;
	КонецЕсли;
	
	ПричиныОшибокЗаданыВАлгоритме = НЕ ПустаяСтрока(СтрокаПравила.ПричиныОшибокРезультата);
	Если НЕ ПричиныОшибокЗаданыВАлгоритме Тогда
		СтрокаПравила.ПричиныОшибокРезультата = СтрокаПравила.ПричиныОшибок;
	КонецЕсли;
	
	РекомендацииЗаданыВАлгоритме = НЕ ПустаяСтрока(СтрокаПравила.РекомендацииРезультата);
	Если НЕ РекомендацииЗаданыВАлгоритме Тогда
		СтрокаПравила.РекомендацииРезультата = СтрокаПравила.Рекомендации;
	КонецЕсли;
	
КонецПроцедуры
 
///////////////////////////////////////////////////////////////////////////////////////
// Процедуры работы с деревом проверок

Процедура СоздатьКолонкиДереваПроверок() Экспорт

	ДеревоПроверок.Колонки.Добавить("Идентификатор", , , 0);
	ДеревоПроверок.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"), , 0);
	ДеревоПроверок.Колонки.Добавить("Включить", Новый ОписаниеТипов("Число"), , 0); // у флажка 3 состояния
	ДеревоПроверок.Колонки.Добавить("Наименование", , , 0);
	ДеревоПроверок.Колонки.Добавить("ПредметКонтроля", , , 0);
	ДеревоПроверок.Колонки.Добавить("КомментарийРезультатаНетОшибок", , , 0);
	ДеревоПроверок.Колонки.Добавить("КомментарийРезультатаОшибка", , , 0);
	ДеревоПроверок.Колонки.Добавить("КомментарийРезультатаНеВыполнена", , , 0);
	ДеревоПроверок.Колонки.Добавить("ПричиныОшибок", , , 0);
	ДеревоПроверок.Колонки.Добавить("Рекомендации", , , 0);
	ДеревоПроверок.Колонки.Добавить("ТекстАлгоритма", , , 0);
	ДеревоПроверок.Колонки.Добавить("РежимОтладки", Новый ОписаниеТипов("Булево"), , 0);
	// В этих колонках хранятся результаты выполнения проверки
	// Значения колонок КомментарийРезультата, РекомендацииРезультата, ПричиныОшибокРезультата могут быть переопределены в алгоритме проверки
	ДеревоПроверок.Колонки.Добавить("ПроверкаВыполнена", Новый ОписаниеТипов("Булево"), , 0);
	ДеревоПроверок.Колонки.Добавить("ОбнаруженыОшибки", Новый ОписаниеТипов("Булево"), , 0);
	ДеревоПроверок.Колонки.Добавить("КомментарийРезультата", , , 0);
	ДеревоПроверок.Колонки.Добавить("РекомендацииРезультата", , , 0);
	ДеревоПроверок.Колонки.Добавить("ПричиныОшибокРезультата", , , 0);

КонецПроцедуры

// Устанавливает/снимает пометки в строках табличного поля ДеревоОтчетов, подчиненных заданной.
// Процедура вызывается рекурсивно.
// 
// Параметры:
//	Узел - ДеревоЗначений или СтрокаДереваЗначений, начиная с которой следует обрабатывать дерево.
//	Пометка - значение пометки, которое следует установить.
//	СписокВыбранных - СписокЗначений, содержащий вид проверки.
//						Если параметр задан, то пометка меняется только у тех строк, для которых Идентификатор
//						находится в указанном списке.
//
Процедура ИзменитьПометкуПодчиненных(Узел, Пометка = Неопределено, СписокВыбранных = Неопределено, 
									 ОбновлятьПометкуРодительских = Ложь, Дерево = Неопределено,
									 ИмяКолонки = "Включить", ИмяКолонкиПоискаВыбранных = "Идентификатор") Экспорт
	
	Если Пометка = Неопределено Тогда
		Пометка = Узел[ИмяКолонки];
	КонецЕсли;
	
	Если Дерево = Неопределено Тогда
		Дерево = Узел;
	КонецЕсли;
	
	Если СписокВыбранных = Неопределено Тогда
		Для Каждого Стр1 Из Узел.Строки Цикл
			Для Каждого Стр2 Из Стр1.Строки Цикл
				Стр2[ИмяКолонки] = Пометка;
			КонецЦикла;
			Стр1[ИмяКолонки] = Пометка;
		КонецЦикла;
	Иначе
		Для Каждого Стр1 Из Дерево.Строки Цикл
			Для Каждого Стр2 Из Стр1.Строки Цикл
				Стр2[ИмяКолонки] = Число(СписокВыбранных.НайтиПоЗначению(Стр2[ИмяКолонкиПоискаВыбранных]) <> Неопределено);
			КонецЦикла;
			Если Стр1.ЭтоГруппа <> Истина Тогда
				Стр1[ИмяКолонки] = Число(СписокВыбранных.НайтиПоЗначению(Стр1[ИмяКолонкиПоискаВыбранных]) <> Неопределено);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр1 Из Дерево.Строки Цикл
		Если Стр1.ЭтоГруппа <> Истина Тогда
			Продолжить;
		КонецЕсли;
		СуммаПометок = 0;
		Для Каждого Стр2 Из Стр1.Строки Цикл
			 СуммаПометок = СуммаПометок + Число(Стр2[ИмяКолонки]);
		КонецЦикла;
		Если СуммаПометок = Стр1.Строки.Количество() Тогда
			Стр1[ИмяКолонки] = 1;
		ИначеЕсли СуммаПометок = 0 Тогда
			Стр1[ИмяКолонки] = 0;
		Иначе
			Стр1[ИмяКолонки] = 2;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////
// Процедуры работы с макетом MXL

Процедура ЗаполнитьДеревоПроверокИзМакетаMXL() Экспорт
	
	ДеревоПроверок.Строки.Очистить();
	МакетПравил   = ПолучитьМакет("НаборПравилПроверки");
	ОбластьПравил = МакетПравил.Область("Правила");
	
	НомПервойСтрокиПравил    = ОбластьПравил.Верх;
	НомПоследнейСтрокиПравил = ОбластьПравил.Низ;
	
	// На случай, когда строки проверок надо вставлять прямо в корень дерева
	СтрокаРаздела = ДеревоПроверок;
	
	Для НомСтроки = НомПервойСтрокиПравил По НомПоследнейСтрокиПравил Цикл
		ОбластьСтроки    = МакетПравил.Область(НомСтроки, , НомСтроки, );
		ИмяОбластиСтроки = ОбластьСтроки.Имя;
		// Правило идентифицируется по имени области - строки,
		// поэтому строки, для которых не задано имя области, пропускаем 
		ЕстьИмяУСтроки = НЕ (ИмяОбластиСтроки = "R"+Формат(НомСтроки, "ЧГ="));
		Если ЕстьИмяУСтроки Тогда
			// Разбираем строку таблицы
			
			// Правило это или группа правил
			Если МакетПравил.Область(ИмяОбластиСтроки + "|ЭтоГруппа").Текст = "1" Тогда
				ЭтоГруппа = Истина;
			Иначе
				ЭтоГруппа = Ложь;
			КонецЕсли;
			// Правила не-группы могут быть отключены в макете
			// Отключенные правила не выводим в дерево
			Если НЕ ЭтоГруппа Тогда
				Если МакетПравил.Область(ИмяОбластиСтроки + "|Отключено").Текст = "1" Тогда
					Отключено = Истина;
				Иначе
					Отключено = Ложь;
				КонецЕсли;
				Если Отключено Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли;
			
			Наименование = МакетПравил.Область(ИмяОбластиСтроки + "|Наименование").Текст;
			
			ПредметКонтроля = МакетПравил.Область(ИмяОбластиСтроки + "|ПредметКонтроля").Текст;
			
			// Для групп больше ничего не нужно - добавляем новую строку раздела в дерево
			Если ЭтоГруппа Тогда
				СтрокаРаздела = ДеревоПроверок.Строки.Добавить();
				
				СтрокаРаздела.Идентификатор       = ИмяОбластиСтроки;
				СтрокаРаздела.Наименование        = Наименование;
				СтрокаРаздела.ЭтоГруппа           = Истина;
				СтрокаРаздела.ПредметКонтроля     = ПредметКонтроля;
				Продолжить;
			КонецЕсли;
			
			// Для обычных проверок продолжаем разбор строки
			КомментарийРезультатаНетОшибок   = МакетПравил.Область(ИмяОбластиСтроки + "|КомментарийРезультатаНетОшибок").Текст;
			КомментарийРезультатаОшибка      = МакетПравил.Область(ИмяОбластиСтроки + "|КомментарийРезультатаОшибка").Текст;
			КомментарийРезультатаНеВыполнена = МакетПравил.Область(ИмяОбластиСтроки + "|КомментарийРезультатаНеВыполнена").Текст;
			ПричиныОшибок                    = МакетПравил.Область(ИмяОбластиСтроки + "|ПричиныОшибок").Текст;
			Рекомендации                     = МакетПравил.Область(ИмяОбластиСтроки + "|Рекомендации").Текст;
			ТекстАлгоритма                   = МакетПравил.Область(ИмяОбластиСтроки + "|ТекстАлгоритма").Текст;
			Если МакетПравил.Область(ИмяОбластиСтроки + "|РежимОтладки").Текст = "1" Тогда
				РежимОтладки = Истина;
			Иначе
				РежимОтладки = Ложь;
			КонецЕсли;
			
			// Добавляем новую строку проверки
			СтрокаПроверки = СтрокаРаздела.Строки.Добавить();
			
			СтрокаПроверки.Идентификатор                    = ИмяОбластиСтроки;
			СтрокаПроверки.Наименование                     = Наименование;
			СтрокаПроверки.ЭтоГруппа                        = Ложь;
			СтрокаПроверки.ПредметКонтроля                  = ПредметКонтроля;
			СтрокаПроверки.КомментарийРезультатаНетОшибок   = КомментарийРезультатаНетОшибок;
			СтрокаПроверки.КомментарийРезультатаОшибка      = КомментарийРезультатаОшибка;
			СтрокаПроверки.КомментарийРезультатаНеВыполнена = КомментарийРезультатаНеВыполнена;
			СтрокаПроверки.ПричиныОшибок                    = ПричиныОшибок;
			СтрокаПроверки.Рекомендации                     = Рекомендации;
			СтрокаПроверки.ТекстАлгоритма                   = ТекстАлгоритма;
			СтрокаПроверки.РежимОтладки                     = РежимОтладки;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

# Если Клиент Тогда
	
///////////////////////////////////////////////////////////////////////////////////////
// Процедуры формирования детальных отчетов

// Универсальная процедура 
Процедура СформироватьДетальныйОтчет(СтрокаПравила, ТабДокумент)
	
	ИдентификаторПравила = СтрокаПравила.Идентификатор;
	
	СохраненРезультатЗапросаПроверки = ИсходящиеДанные.Свойство(ИдентификаторПравила+"РезультатЗапроса");
	СохраненаТаблицаОшибокПроверки   = ИсходящиеДанные.Свойство(ИдентификаторПравила+"ТаблицаЗначений");
	СохраненИсточникДанныхПроверки	 = ИсходящиеДанные.Свойство(ИдентификаторПравила+"ИсточникДанных");
	
	Если СохраненРезультатЗапросаПроверки Тогда
		ИсточникДанных = ИсходящиеДанные[ИдентификаторПравила+"РезультатЗапроса"];
		Если ТипЗнч(ИсточникДанных) <> Тип("РезультатЗапроса") Тогда
			Сообщить("Неправильный тип значения "+ИдентификаторПравила+"РезультатЗапроса!"); 
			Возврат;
		КонецЕсли;
	ИначеЕсли СохраненаТаблицаОшибокПроверки Тогда
		ИсточникДанных = ИсходящиеДанные[ИдентификаторПравила+"ТаблицаЗначений"];
		Если ТипЗнч(ИсточникДанных) <> Тип("ТаблицаЗначений") Тогда
			Сообщить("Неправильный тип значения "+ИдентификаторПравила+"ТаблицаЗначений!"); 
			Возврат;
		КонецЕсли;		
	ИначеЕсли СохраненИсточникДанныхПроверки Тогда
		ОписаниеИсточникаДанных = ИсходящиеДанные[ИдентификаторПравила+"ИсточникДанных"];
		Если ТипЗнч(ОписаниеИсточникаДанных) <> Тип("ОписаниеИсточникаДанных") Тогда
			Сообщить("Неправильный тип значения "+ИдентификаторПравила+"ОписаниеИсточникаДанных!"); 
			Возврат;
		КонецЕсли;
	Иначе	
		Возврат;
	КонецЕсли;
	
	Если НЕ СохраненИсточникДанныхПроверки Тогда 
		ОписаниеИсточникаДанных = Новый ОписаниеИсточникаДанных(ИсточникДанных);
	КонецЕсли;	
	
	ЕстьСтруктураЗаголовков    = ИсходящиеДанные.Свойство(ИдентификаторПравила+"СтруктураЗаголовков");
	Если ЕстьСтруктураЗаголовков Тогда
		СтруктураЗаголовков = ИсходящиеДанные[ИдентификаторПравила+"СтруктураЗаголовков"];
	Иначе
		СтруктураЗаголовков = Новый Структура;
	КонецЕсли;
	ЕстьСтруктураФорматаПолей = ИсходящиеДанные.Свойство(ИдентификаторПравила+"СтруктураФорматаПолей");
	Если ЕстьСтруктураФорматаПолей Тогда
		СтруктураФорматаПолей = ИсходящиеДанные[ИдентификаторПравила+"СтруктураФорматаПолей"];
	Иначе
		СтруктураФорматаПолей = Новый Структура;
	КонецЕсли;
	ЕстьСтруктураШириныКолонок = ИсходящиеДанные.Свойство(ИдентификаторПравила+"СтруктураШириныКолонок");
	Если ЕстьСтруктураШириныКолонок Тогда
		СтруктураШириныКолонок = ИсходящиеДанные[ИдентификаторПравила+"СтруктураШириныКолонок"];
	Иначе
		СтруктураШириныКолонок = Новый Структура;
	КонецЕсли;
	ЕстьСтруктураРасшифровки  = ИсходящиеДанные.Свойство(ИдентификаторПравила+"СтруктураРасшифровки");
	Если ЕстьСтруктураРасшифровки Тогда
		СтруктураРасшифровки  = ИсходящиеДанные[ИдентификаторПравила+"СтруктураРасшифровки"];
	Иначе
		СтруктураРасшифровки  = Новый Структура;
	КонецЕсли;
		
	ЕстьМакет = ИсходящиеДанные.Свойство(ИдентификаторПравила+"МакетОформления");	
	Если ЕстьМакет Тогда
		МакетОформления = ИсходящиеДанные[ИдентификаторПравила+"МакетОформления"];	
	КонецЕсли;	
	
	Если ТипЗнч(ТабДокумент) <> Тип("ТабличныйДокумент") Тогда
		ТабДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	Построитель = Новый ПостроительОтчета;
	
	Построитель.ИсточникДанных = ОписаниеИсточникаДанных;
	Построитель.ЗаполнитьНастройки();
	Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	
	Построитель.Выполнить();
		
	Построитель.ВыводитьЗаголовокОтчета = Ложь;
	Построитель.ВыводитьПодвалТаблицы   = Ложь;
	Построитель.ВыводитьПодвалОтчета    = Ложь;
	
	Если ЕстьМакет Тогда
		Макет = ПолучитьМакет(МакетОформления);		
	Иначе	
		Построитель.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);
		Построитель.ОформитьМакет();		
		
		Макет = Построитель.Макет;
				
		ШапкаТаблицыМакета = Макет.Область("ШапкаТаблицы");
		Для НомСтроки = ШапкаТаблицыМакета.Верх По ШапкаТаблицыМакета.Низ Цикл
			Для НомКолонки = 2 По Макет.ШиринаТаблицы Цикл
				ТекОбласть = Макет.Область(НомСтроки, НомКолонки, НомСтроки, НомКолонки);
				ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ТекОбласть.Шрифт = Новый Шрифт(ТекОбласть.Шрифт, ,8);
				ТекОбласть.ЦветРамки = WebЦвета.Серый;
				ТекОбласть.ЦветФона  = ЦветФонаОшибок;
				
				ТекЗаголовок = ТекОбласть.Текст;
				
				Если ОбщаяСтруктураШириныКолонок.Свойство(ТекЗаголовок) Тогда
					ТекОбласть.ШиринаКолонки = ОбщаяСтруктураШириныКолонок[ТекЗаголовок];
				КонецЕсли;
				Если СтруктураШириныКолонок.Свойство(ТекЗаголовок) Тогда
					ТекОбласть.ШиринаКолонки = СтруктураШириныКолонок[ТекЗаголовок];
				КонецЕсли;
				
				Если ОбщаяСтруктураЗаголовков.Свойство(ТекЗаголовок) Тогда
					ТекОбласть.Текст = ОбщаяСтруктураЗаголовков[ТекЗаголовок];
				КонецЕсли;
				Если СтруктураЗаголовков.Свойство(ТекЗаголовок) Тогда
					ТекОбласть.Текст = СтруктураЗаголовков[ТекЗаголовок];
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
			
		
		ДеталиМакета = Макет.Область("Детали");
		ШапкаТаблицыМакета = Макет.Область("ШапкаТаблицы");
		Для НомСтроки = ДеталиМакета.Верх По ДеталиМакета.Низ Цикл
			Для НомКолонки = 2 По Макет.ШиринаТаблицы Цикл
				ТекОбласть = Макет.Область(НомСтроки, НомКолонки, НомСтроки, НомКолонки);
				ТекОбласть.ЦветРамки = WebЦвета.Серый;
				ТекИмяПараметра = ТекОбласть.Параметр;
				
				Если ТекИмяПараметра = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				
				Если ОбщаяСтруктураФорматаПолей.Свойство(ТекИмяПараметра) Тогда
					ТекОбласть.Формат = ОбщаяСтруктураФорматаПолей[ТекИмяПараметра];
				КонецЕсли;
				Если СтруктураФорматаПолей.Свойство(ТекИмяПараметра) Тогда
					ТекОбласть.Формат = СтруктураФорматаПолей[ТекИмяПараметра];
				КонецЕсли;
				
				Если ОбщаяСтруктураРасшифровки.Свойство(ТекИмяПараметра) Тогда
					ТекОбласть.ПараметрРасшифровки = ОбщаяСтруктураРасшифровки[ТекИмяПараметра];
				КонецЕсли;
				Если СтруктураРасшифровки.Свойство(ТекИмяПараметра) Тогда
					ТекОбласть.ПараметрРасшифровки = СтруктураРасшифровки[ТекИмяПараметра];
				КонецЕсли;   			
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	
	Построитель.Макет = Макет;	
	Построитель.Вывести(ТабДокумент);
	
КонецПроцедуры
 
///////////////////////////////////////////////////////////////////////////////////////
// Процедуры формирования табличного документа отчета

// Если проверки не выполняются, отчет формируется как бланк
// (например, при открытии формы)
//
Процедура СформироватьОтчет(ДокРезультат, ВыполнятьПроверки = Истина)Экспорт
	
	ВремТабДокумент   = Новый ТабличныйДокумент;
	ВидимостьОбластей = Новый Структура;
	
	КолВыполняемыхПроверок = 0;
	КолВыполненныхПроверок = 0;
	КолПроверокСОшибками   = 0;
	
	// Общее количество выполняемых проверок показываем в заголовке отчета и в строке состояния
	МассивВыполняемыхСтрокДерева = ДеревоПроверок.Строки.НайтиСтроки(Новый Структура("Включить", 1), Истина);
	Для каждого СтрокаДерева Из МассивВыполняемыхСтрокДерева Цикл
		Если НЕ СтрокаДерева.ЭтоГруппа Тогда
			КолВыполняемыхПроверок = КолВыполняемыхПроверок + 1;
		КонецЕсли;
	КонецЦикла;
		
	Если ВыполнятьПроверки Тогда
		
		КонецДатыКон = КонецДня(ДатаКон);
		
		// Очищаем результаты прошлых вычислений, которые делали проверки, чтобы они не влияли на текущий цикл
		ИсходящиеДанные = Новый Структура;
		
		ОбработкаПрерыванияПользователя();
		
	КонецЕсли;
	
	ДокРезультат.Очистить();
	Макет = ПолучитьМакет("МакетОтчета");
	
	// Общая ширина колонок для вывода детальных отчетов
	ОбщаяШиринаКолонокОтчета = 0;
	НомПервойКолонкиДетальногоОтчета = 6;
	Для НомКолонки = НомПервойКолонкиДетальногоОтчета По Макет.ШиринаТаблицы Цикл
		ОбщаяШиринаКолонокОтчета = ОбщаяШиринаКолонокОтчета + Макет.Область( , НомКолонки, , НомКолонки).ШиринаКолонки;
	КонецЦикла;
	
	ОбластьШапкиМакета              = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовкаМакета          = Макет.ПолучитьОбласть("Заголовок");
	ОбластьРазделаУчетаМакета       = Макет.ПолучитьОбласть("РазделУчета");
	ОбластьПроверкиМакета           = Макет.ПолучитьОбласть("Проверка");
	ОбластьПредметаКонтроляМакета   = Макет.ПолучитьОбласть("ПредметКонтроля");
	ОбластьКомментарияМакета        = Макет.ПолучитьОбласть("КомментарийРезультата");
	ОбластьПричинОшибокМакета       = Макет.ПолучитьОбласть("ПричиныОшибок");
	ОбластьРекомендацийМакета       = Макет.ПолучитьОбласть("Рекомендации");
	ОбластьПодвалаПроверкиМакета    = Макет.ПолучитьОбласть("ПодвалПроверки");
	ОбластьРазделителяРазделаМакета = Макет.ПолучитьОбласть("РазделительРазделаУчета");
	
	// Выводим шапку и заголовок отчета
	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация.Наименование;
	КонецЕсли;
	ОбластьШапкиМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ОбластьШапкиМакета.Параметры.ПериодПроверки      = ПериодПроверкиСтрокой;
	ДокРезультат.Вывести(ОбластьШапкиМакета);
	
	// Шапку скрываем
	ОбластьШапки = ДокРезультат.Область(1, , ДокРезультат.ВысотаТаблицы, );
	ОбластьШапки.Видимость = Ложь;
	
	ДокРезультат.Вывести(ОбластьЗаголовкаМакета);
	
	ОбластьНадписиОПроверках 	  = ДокРезультат.Область(ДокРезультат.ВысотаТаблицы - 1, 2, ДокРезультат.ВысотаТаблицы - 1, 2);
	ОбластьНадписиОбОшибках  	  = ДокРезультат.Область(ДокРезультат.ВысотаТаблицы, 2, ДокРезультат.ВысотаТаблицы, 2);
	ОбластьСтрокиНадписиОбОшибках = ДокРезультат.Область(ДокРезультат.ВысотаТаблицы, 2, ДокРезультат.ВысотаТаблицы, ДокРезультат.ШиринаТаблицы);
	
	ОбластьНадписиОПроверках.Текст = "Проведено проверок: 0 из " + КолВыполняемыхПроверок;
	ОбластьСтрокиНадписиОбОшибках.ЦветФона = ЦветФонаБезОшибок;
	ДокРезультат.Показать();
	
	// При открытии формы в отчете показываются только 2 верхние строки с количеством проверок
	Если НЕ ВыполнятьПроверки Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ?(ВыполнятьПроверки, "Выполняется проверка...", "Проверка не выполнялась");
	
	ИзменитьПометкуПодчиненных(ДеревоПроверок, Ложь, , , , "ПроверкаВыполнена");
	ИзменитьПометкуПодчиненных(ДеревоПроверок, Ложь, , , , "ОбнаруженыОшибки");
	
	НомерТекПроверки = 0;
	
	Для каждого СтрокаРаздела Из ДеревоПроверок.Строки Цикл
		
		//Полностью отключенные разделы пропускаем
		Если СтрокаРаздела.Включить = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Отделяем наименование раздела от проверок предыдущих разделов
		ДокРезультат.Вывести(ОбластьРазделителяРазделаМакета, 1);
		
		ЗаполнитьЗначенияСвойств(ОбластьРазделаУчетаМакета.Параметры, СтрокаРаздела);
		ОбластьРазделаУчетаМакета.Параметры.РезультатПроверки = РезультатПроверки;
		ДокРезультат.Вывести(ОбластьРазделаУчетаМакета, 1);
		
		//Задаем области раздела документа-результата имя - идентификатор раздела
		ОбластьРазделаУчета = ДокРезультат.Область(ДокРезультат.ВысотаТаблицы - ВысотаОбластей.РазделУчета + 1, , ДокРезультат.ВысотаТаблицы, );
		ОбластьРазделаУчета.Имя = СтрокаРаздела.Идентификатор;
		Если ВыполнятьПроверки Тогда
			// Выделяем выполняющийся раздел курсивом
			Курсив = Истина;
			ОбластьРазделаУчета.Шрифт = Новый Шрифт(ОбластьРазделаУчета.Шрифт, , , Курсив);
			
			ПроведеныПроверкиВРазделе = Ложь;
			КолОшибокВРазделе         = 0;
			
			ДокРезультат.Показать();
		КонецЕсли;
		
		РаскрыватьПроверкиРаздела = Ложь;
		ДокРезультат.НачатьГруппуСтрок(, РаскрыватьПроверкиРаздела); // Заголовки проверок
		
		// Отделяем наименование раздела от проверок
		ДокРезультат.Вывести(ОбластьРазделителяРазделаМакета, 2);
		
		Для каждого СтрокаПроверки Из СтрокаРаздела.Строки Цикл
			
			Если СтрокаПроверки.Включить = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НомерТекПроверки = НомерТекПроверки + 1;
			НомерПервойСтрокиПроверки = ДокРезультат.ВысотаТаблицы + 1;
			// Выводим область заголовка проверки
			ЗаполнитьЗначенияСвойств(ОбластьПроверкиМакета.Параметры, СтрокаПроверки);
			ОбластьПроверкиМакета.Параметры.РезультатПроверки = РезультатПроверки;
			ДокРезультат.Вывести(ОбластьПроверкиМакета, 2);
			ОбластьСостоянияПроверки = ДокРезультат.Область(НомерПервойСтрокиПроверки, 11, НомерПервойСтрокиПроверки, 13);
			
			РаскрыватьДеталиПроверки = Ложь;
			ДокРезультат.НачатьГруппуСтрок(, РаскрыватьДеталиПроверки); // Детали проверки
			
			НомерПервойСтрокиДеталейПроверки = ДокРезультат.ВысотаТаблицы + 1;
			// Выводим область предмета контроля
			ЗаполнитьЗначенияСвойств(ОбластьПредметаКонтроляМакета.Параметры, СтрокаПроверки);
			ДокРезультат.Вывести(ОбластьПредметаКонтроляМакета, 3);
			
			ОбластьПроверки        = ДокРезультат.Область(НомерПервойСтрокиПроверки, , ДокРезультат.ВысотаТаблицы, );
			ОбластьДеталейПроверки = ДокРезультат.Область(НомерПервойСтрокиДеталейПроверки, , ДокРезультат.ВысотаТаблицы, );
			
			Если ВыполнятьПроверки Тогда
				
				Состояние("Выполняется проверка " + НомерТекПроверки + " из " + КолВыполняемыхПроверок + ": " + СтрокаПроверки.Наименование);
				
				ОбластьЗаголовкаПроверки = ДокРезультат.Область(НомерПервойСтрокиПроверки, , НомерПервойСтрокиПроверки, );
				Курсив = Истина;
				ОбластьЗаголовкаПроверки.Шрифт = Новый Шрифт(ОбластьЗаголовкаПроверки.Шрифт, , , Курсив);
				
				Если РаскрыватьПроверкиРаздела Тогда
					ДокРезультат.ТекущаяОбласть = ДокРезультат.Область(ОбластьПроверки.Низ, 1, ОбластьПроверки.Низ, 1);
					ДокРезультат.Показать();
				КонецЕсли; 
				
				// -КУФИБ - начало
				Если НЕ ПроверкаДоступнаПользователю(СтрокаПроверки.Идентификатор) Тогда
					ОбластьСостоянияПроверки.Текст      = "Недостаточно прав";
					ПроверкаВыполнена = Ложь;
					ОбнаруженыОшибки  = Ложь;
					ОбластьСостоянияПроверки.ЦветФона   = Новый Цвет(200,200,200);
					
					// Добавляем комментарий результата
					ОбластьКомментарияМакета.Параметры.КомментарийРезультата = СтрокаПроверки.КомментарийРезультата;
					ДокРезультат.Вывести(ОбластьКомментарияМакета);
					Перейти ~МеткаПерехода;
				КонецЕсли;
				
				// - КУФИБ - конец
				
				// Выполняем проверку правила
				ПроверитьПравило(СтрокаПроверки); 
				ПроверкаВыполнена = СтрокаПроверки.ПроверкаВыполнена;
				ОбнаруженыОшибки  = СтрокаПроверки.ОбнаруженыОшибки;
				
				Если ОбнаруженыОшибки Тогда
					КолПроверокСОшибками = КолПроверокСОшибками + 1;
					КолОшибокВРазделе    = КолОшибокВРазделе + 1;
				КонецЕсли;
				Если ПроверкаВыполнена Тогда
					КолВыполненныхПроверок = КолВыполненныхПроверок + 1;
					ПроведеныПроверкиВРазделе = Истина;
				КонецЕсли;
				
				Курсив = Ложь;
				ОбластьЗаголовкаПроверки.Шрифт = Новый Шрифт(ОбластьЗаголовкаПроверки.Шрифт, , , Курсив);
				
				Если ПроверкаВыполнена И ОбнаруженыОшибки Тогда
					
					// Выделяем проверку с ошибками цветом фона
					ОбластьОшибки = ДокРезультат.Область(ОбластьЗаголовкаПроверки.Верх, 2, 
									ОбластьЗаголовкаПроверки.Низ, ОбластьСостоянияПроверки.Лево - 1);
					ОбластьОшибки.ЦветФона   = ЦветФонаОшибок;
					ОбластьОшибки.ЦветТекста = ЦветТекстаОшибок;
					ОбластьСостоянияПроверки.Текст      = "Обнаружены ошибки";
					ОбластьСостоянияПроверки.ЦветФона   = ЦветФонаКолОшибок;
					ОбластьСостоянияПроверки.ЦветТекста = ЦветТекстаКолОшибок;
					
					// Добавляем комментарий результата
					ОбластьКомментарияМакета.Параметры.КомментарийРезультата = СтрокаПроверки.КомментарийРезультата;
					ДокРезультат.Вывести(ОбластьКомментарияМакета);
					ОбластьКомментария = ДокРезультат.Область(ДокРезультат.ВысотаТаблицы - ВысотаОбластей.КомментарийРезультата + 1, 2, 
										 ДокРезультат.ВысотаТаблицы, ДокРезультат.ШиринаТаблицы);
					ОбластьКомментария.ЦветФона = ЦветФонаОшибок;
					
					// Добавляем возможные причины ошибок 
					ОбластьПричинОшибокМакета.Параметры.ПричиныОшибок = СтрокаПроверки.ПричиныОшибокРезультата;
					ДокРезультат.Вывести(ОбластьПричинОшибокМакета);
					
					// Добавляем рекомендации по устранению ошибок
					ОбластьРекомендацийМакета.Параметры.Рекомендации = СтрокаПроверки.РекомендацииРезультата;
					ДокРезультат.Вывести(ОбластьРекомендацийМакета);
					
					// Добавляем детальный отчет об ошибках
					ВремТабДокумент = Новый ТабличныйДокумент;
					СформироватьДетальныйОтчет(СтрокаПроверки, ВремТабДокумент);
					
					Если ВремТабДокумент.ВысотаТаблицы > 0 Тогда
						
						ДокРезультат.НачатьГруппуСтрок( , Ложь);
						
						ОбластьДетальногоОтчета      = ВремТабДокумент.Область(1, 1, 
													   ВремТабДокумент.ВысотаТаблицы, ВремТабДокумент.ШиринаТаблицы);
						НомПервойСтрокиНовогоФормата = ДокРезультат.ВысотаТаблицы + 1;
						ОбластьНовогоФорматаСтрок    = ДокРезультат.Область(НомПервойСтрокиНовогоФормата, , 
													   НомПервойСтрокиНовогоФормата + ВремТабДокумент.ВысотаТаблицы, );
						ОбластьНовогоФорматаСтрок.СоздатьФорматСтрок();
						ОбщаяШиринаКолонокДетальногоОтчета = 0;
						Для НомКолонки = 2 По ВремТабДокумент.ШиринаТаблицы Цикл
							ШиринаТекКолонки = ВремТабДокумент.Область(1, НомКолонки).ШиринаКолонки;
							ОбщаяШиринаКолонокДетальногоОтчета = ОбщаяШиринаКолонокДетальногоОтчета + ШиринаТекКолонки;
						КонецЦикла;
						
						КоэффИзмененияШирины = ?(ОбщаяШиринаКолонокДетальногоОтчета = 0, 1, ОбщаяШиринаКолонокОтчета / ОбщаяШиринаКолонокДетальногоОтчета);
						
						ИзменятьШиринуКолонок = КоэффИзмененияШирины <= 1.2;
						НоваяОбщаяШирина = 0;
						Для НомКолонки = 2 По ВремТабДокумент.ШиринаТаблицы - 1 Цикл
							ШиринаТекКолонки = ВремТабДокумент.Область(1, НомКолонки).ШиринаКолонки;
							Если ИзменятьШиринуКолонок Тогда
								НужнаяШирина = Окр(ШиринаТекКолонки * КоэффИзмененияШирины,0);
							Иначе
								НужнаяШирина = ШиринаТекКолонки;
							КонецЕсли;
							ДокРезультат.Область(НомПервойСтрокиНовогоФормата, НомКолонки + 4).ШиринаКолонки = НужнаяШирина;
							
							НоваяОбщаяШирина = НоваяОбщаяШирина + НужнаяШирина;
						КонецЦикла;
						
						ПоследняяЯчейка = ДокРезультат.Область(НомПервойСтрокиНовогоФормата, ВремТабДокумент.ШиринаТаблицы + 4);
						Если ИзменятьШиринуКолонок Тогда
							ПоследняяЯчейка.ШиринаКолонки = ОбщаяШиринаКолонокОтчета - НоваяОбщаяШирина;
						Иначе
							ШиринаПоследнейКолонки = ВремТабДокумент.Область(1, ВремТабДокумент.ШиринаТаблицы).ШиринаКолонки;
							ПоследняяЯчейка.ШиринаКолонки = ШиринаПоследнейКолонки;
						КонецЕсли;
						
						ОбластьЗаголовка = ДокРезультат.Область(НомПервойСтрокиНовогоФормата, 6, НомПервойСтрокиНовогоФормата, 6);
						ОбластьЗаголовка.Текст = "Детальный отчет об ошибках";
						ОбластьЗаголовка.Шрифт = Новый Шрифт(ОбластьЗаголовка.Шрифт, , 8, Истина);
						
						ОбластьПриемник = ДокРезультат.Область(НомПервойСтрокиНовогоФормата + 1, 5);
						
						ДокРезультат.ВставитьОбласть(ОбластьДетальногоОтчета, ОбластьПриемник);
						
						ДокРезультат.ЗакончитьГруппуСтрок();
					КонецЕсли;
					
				ИначеЕсли НЕ ПроверкаВыполнена Тогда
					
					ОбластьСостоянияПроверки.Текст      = "Проверка не выполнена";
					
					// Добавляем комментарий результата
					ОбластьКомментарияМакета.Параметры.КомментарийРезультата = СтрокаПроверки.КомментарийРезультата;
					ДокРезультат.Вывести(ОбластьКомментарияМакета);
					
				Иначе // ПроверкаВыполнена И НЕ ОбнаруженыОшибки
					
					ОбластьСостоянияПроверки.Текст      = "Ошибок не обнаружено";
					
					// Добавляем комментарий результата
					ОбластьКомментарияМакета.Параметры.КомментарийРезультата = СтрокаПроверки.КомментарийРезультата;
					ДокРезультат.Вывести(ОбластьКомментарияМакета);
					
				КонецЕсли;
				
				// - КУФИБ - начало
				~МеткаПерехода:
				// - КУФИБ - конец
				
				// Переопределяем область проверки и область деталей проверки - включаем добавленные строки
				ОбластьПроверки        = ДокРезультат.Область(НомерПервойСтрокиПроверки, , ДокРезультат.ВысотаТаблицы, );
				ОбластьДеталейПроверки = ДокРезультат.Область(НомерПервойСтрокиДеталейПроверки, , ДокРезультат.ВысотаТаблицы, );
				
			КонецЕсли;
			
			// Добавляем область - разделитель
			ДокРезультат.Вывести(ОбластьПодвалаПроверкиМакета);
			
			ДокРезультат.ЗакончитьГруппуСтрок(); // Строки деталей проверки
			
			ОбластьПроверки.Имя = СтрокаПроверки.Идентификатор;
			ОбластьДеталейПроверки.Имя = "Детали"+СтрокаПроверки.Идентификатор;
				
			Если ВыполнятьПроверки Тогда
				Если РаскрыватьПроверкиРаздела Тогда
					ДокРезультат.ТекущаяОбласть = ДокРезультат.Область(ДокРезультат.ВысотаТаблицы, 1, ДокРезультат.ВысотаТаблицы, 1);
				КонецЕсли;
				
				ОбластьНадписиОПроверках.Текст = "Проведено проверок: " + КолВыполненныхПроверок +" из " + КолВыполняемыхПроверок;
				ОбластьНадписиОбОшибках.Текст = "Обнаружено ошибок: " + КолПроверокСОшибками;
				Если КолПроверокСОшибками > 0 Тогда
					ОбластьСтрокиНадписиОбОшибках.ЦветФона = ЦветФонаОшибок;
				Иначе
					ОбластьСтрокиНадписиОбОшибках.ЦветФона = ЦветФонаБезОшибок;
				КонецЕсли;
				
				НомерПоследнейСтрокиПроверки = ДокРезультат.ВысотаТаблицы;
				ДокРезультат.Область(НомерПервойСтрокиПроверки, ,НомерПоследнейСтрокиПроверки, ).Видимость = Ложь;
				
				ДокРезультат.Показать();
				
			КонецЕсли; 
				
		КонецЦикла;
		
		ДокРезультат.ЗакончитьГруппуСтрок(); // Строки проверок раздела
		
		Если ВыполнятьПроверки Тогда
			
			СтрокаРаздела.ОбнаруженыОшибки = КолОшибокВРазделе > 0;
			
			Курсив = Ложь;
			ОбластьРазделаУчета.Шрифт = Новый Шрифт(ОбластьРазделаУчета.Шрифт, , , Курсив);
			
			ОбластьСостоянияРаздела = ДокРезультат.Область(ОбластьРазделаУчета.Верх, 11, ОбластьРазделаУчета.Верх, 13);
			Если СтрокаРаздела.ОбнаруженыОшибки Тогда
				// Выделяем раздел с ошибками цветом
				ОбластьОшибки = ДокРезультат.Область(ОбластьРазделаУчета.Верх, 2, ОбластьРазделаУчета.Низ, ОбластьСостоянияРаздела.Лево - 1);
				ОбластьОшибки.ЦветФона   = ЦветФонаОшибок;
				ОбластьОшибки.ЦветТекста = ЦветТекстаОшибок;
				ОбластьСостоянияРаздела.Текст  = "Обнаружены ошибки (" + КолОшибокВРазделе + ")";
				ОбластьСостоянияРаздела.ЦветФона   = ЦветФонаКолОшибок;
				ОбластьСостоянияРаздела.ЦветТекста = ЦветТекстаКолОшибок;
			ИначеЕсли ПроведеныПроверкиВРазделе Тогда
				ОбластьСостоянияРаздела.Текст = "Ошибок не обнаружено";
			Иначе
				ОбластьСостоянияРаздела.Текст = "Проверка не выполнена";
			КонецЕсли;
			
			ДокРезультат.Показать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДокРезультат.ТолькоПросмотр = Истина;
	ДокРезультат.ФиксацияСверху = ВысотаОбластей.Шапка + ВысотаОбластей.Заголовок;
	//ДокРезультат.ПовторятьПриПечатиСтроки = ДокРезультат.Область(ВысотаОбластей.Шапка + 1, , ВысотаОбластей.Шапка + ВысотаОбластей.Заголовок);
	ДокРезультат.ОбластьПечати = ДокРезультат.Область(1, 2, ДокРезультат.ВысотаТаблицы, ДокРезультат.ШиринаТаблицы);
	ДокРезультат.ИмяПараметровПечати = "ЭкспрессПроверкаВеденияУчета";
	
	ДокРезультат.ТекущаяОбласть = ДокРезультат.Область(1, 1, 1, 1);
	ДокРезультат.Показать();
	
КонецПроцедуры
                              

///////////////////////////////////////////////////////////////////////////////////////
// Процедуры проверки правил
// Имя процедуры составляется стандартно из "ПроверитьПравило" плюс идентификатор правила
// после отладки тексты могут быть перенесены в макет НаборПравилВыгрузки (область Правила|ТекстАлгоритма)

// Шаблон процедуры
//Процедура ПроверитьПравилоИмяПравила(СтрокаПравила)

//	// Алгоритм проверки
//	//...
//	Запрос = Новый Запрос;
//	//...
//	Результат = Запрос.Выполнить();
//	
//	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
//	СтрокаПравила.ПроверкаВыполнена = Истина;
//	
//	// Добавляем в ИсходящиеДанные данные, необходимые для формирования детального отчета по ошибкам
//	// или данные для последующего использования другими проверками
//	Если СтрокаПравила.ОбнаруженыОшибки Тогда
//		ИсходящиеДанные.Вставить("ИмяПравилаРезультатЗапроса", Результат);
//	КонецЕсли; 
//	
//КонецПроцедуры

// Учетная политика

Процедура ПроверитьПравилоНаличиеУчПБухУчет(СтрокаПравила)
	Перем Отказ;
	
	УчетнаяПолитикаБухУчет = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДатаНач, Отказ, Организация, "Бух");
	ИсходящиеДанные.Вставить("УчетнаяПолитикаБухУчет", УчетнаяПолитикаБухУчет);
	НетУчетнойПолитики = УчетнаяПолитикаБухУчет.Количество() = 0;
	
	СтрокаПравила.ОбнаруженыОшибки  = НетУчетнойПолитики;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
КонецПроцедуры
        
Процедура ПроверитьПравилоНаличиеУчП_Перс(СтрокаПравила)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	ЛОЖЬ КАК ВестиУчетПоГоловнойОрганизации,
	|	УчетнаяПолитикаПоПерсоналу.ВариантУчетаКадровыхПерестановок КАК ВариантУчетаКадровыхПерестановок,
	|	УчетнаяПолитикаПоПерсоналу.РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок КАК РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок,
	|	УчетнаяПолитикаПоПерсоналу.ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка КАК ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналу
	|		ПО Организации.Ссылка = УчетнаяПолитикаПоПерсоналу.Организация
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|	И УчетнаяПолитикаПоПерсоналу.ВариантУчетаКадровыхПерестановок ЕСТЬ НЕ NULL ");
	
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация", Организация);
	Результат = Запрос.Выполнить();
	НетУчетнойПолитикиПоПерсоналу = Результат.Пустой();
	
	Если НетУчетнойПолитикиПоПерсоналу Тогда
		ИсходящиеДанные.Вставить("УчетнаяПолитикаПоПерсоналу", Неопределено);
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		УчетнаяПолитикаПоПерсоналу = Новый Структура;
		УчетнаяПолитикаПоПерсоналу.Вставить("РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок", Выборка.РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок);
		УчетнаяПолитикаПоПерсоналу.Вставить("ВариантУчетаКадровыхПерестановок", Выборка.ВариантУчетаКадровыхПерестановок);
		УчетнаяПолитикаПоПерсоналу.Вставить("ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка", Выборка.ПорядокУчетаРабочегоВремениПриРасчетеСреднегоЗаработка);
		
		ИсходящиеДанные.Вставить("УчетнаяПолитикаПоПерсоналу", УчетнаяПолитикаПоПерсоналу);
	КонецЕсли;
	
	СтрокаПравила.ОбнаруженыОшибки  = НетУчетнойПолитикиПоПерсоналу;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
КонецПроцедуры


// - ЗУП - конец

// Касса

Процедура ПроверитьПравилоНепроведенныеПКО_РКО(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриходныйКассовыйОрдер.Ссылка КАК Документ,
	|	ПриходныйКассовыйОрдер.Дата КАК Дата,
	|	ПриходныйКассовыйОрдер.Номер,
	|	ПриходныйКассовыйОрдер.ВидОперации,
	|	ПриходныйКассовыйОрдер.СуммаДокумента,
	|	ПриходныйКассовыйОрдер.Ответственный
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Проведен = ЛОЖЬ
	|	И ПриходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПриходныйКассовыйОрдер.Организация = &Организация
	|	И ПриходныйКассовыйОрдер.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Дата,
	|	РасходныйКассовыйОрдер.Номер,
	|	РасходныйКассовыйОрдер.ВидОперации,
	|	РасходныйКассовыйОрдер.СуммаДокумента,
	|	РасходныйКассовыйОрдер.Ответственный
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Проведен = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|	И РасходныйКассовыйОрдер.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач", 				  ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", 				  КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", 			  Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НепроведенныеПКО_РКОРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ВидОперации", "Вид операции");
		СтруктураЗаголовков.Вставить("СуммаДокумента", "Сумма документа");
		ИсходящиеДанные.Вставить("НепроведенныеПКО_РКОСтруктураЗаголовков", СтруктураЗаголовков);
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Документ" , 40);
		СтруктураШириныКолонок.Вставить("Дата", 20);
		СтруктураШириныКолонок.Вставить("Номер"  , 25);
		СтруктураШириныКолонок.Вставить("ВидОперации" , 25);
		СтруктураШириныКолонок.Вставить("СуммаДокумента"   , 25);
		СтруктураШириныКолонок.Вставить("Ответственный"   , 25);
		ИсходящиеДанные.Вставить("НепроведенныеПКО_РКОСтруктураШириныКолонок", СтруктураШириныКолонок);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоМинусыПоКассе(СтрокаПравила)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТиповойОстаткиИОбороты.Период КАК Период,
	               |	ТиповойОстаткиИОбороты.Субконто1 КАК Касса,
	               |	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт КАК Остаток
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&ДатаНач, &ДатаКон, День, ДвиженияИГраницыПериода, Счет В ИЕРАРХИИ (&СчетКассы), , Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстаткиИОбороты
	               |ГДЕ
	               |	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт < 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период,
	               |	Касса";
	
	Запрос.УстановитьПараметр("ДатаНач", 				  ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", 				  КонецДатыКон);
	Запрос.УстановитьПараметр("СчетКассы", 				  ПланыСчетов.Типовой.ДенежныеСредстваВКассе);
	Запрос.УстановитьПараметр("Организация", 			  Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("МинусыПоКассеРезультатЗапроса", Результат);
	КонецЕсли; 
	
КонецПроцедуры



Процедура ПроверитьПравилоЛимитРасчетовСЮрЛицами(СтрокаПравила)
	
	ДатаНачЛимитаДляИП = НачалоДня(Дата(2018, 01, 01));

	ОрганизацияЯвляетсяФизЛицом = Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	ОрганизацияПлательщикНДС    = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(Организация, КонецДатыКон);
	
	Если ОрганизацияЯвляетсяФизЛицом И КонецДатыКон < ДатаНачЛимитаДляИП Тогда
	
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = "Проверяемая организация является физическим лицом, поэтому лимит расчетов "
											+ " между юридическими лицами на нее не распространяется";
		Возврат;
	
	КонецЕсли;

	Если ОрганизацияЯвляетсяФизЛицом И КонецДатыКон >= ДатаНачЛимитаДляИП И НЕ ОрганизацияПлательщикНДС Тогда
	
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = "Проверяемая организация является физическим лицом и не плательщиком НДС, поэтому лимит расчетов "
											+ " между юридическими лицами и индивидуальными предпринимателями на нее не распространяется";
		Возврат;
	
	КонецЕсли;
	
	ДатаИзмененияЛимитаРасчетов = НачалоДня(Дата(2012, 09, 24));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("ДатаНачЛимитаДляИП", МАКС(ДатаНач, ДатаНачЛимитаДляИП));
	
	РазмерМРП = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	            |	РасчетныеПоказатели.Период,
	            |	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) * 1000 КАК Предел1000,
	            |	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) * 4000 КАК Предел4000
	            |ИЗ
	            |	РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&ДатаНач, ) КАК РасчетныеПоказатели
	            |ГДЕ
	            |	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) <> 0
	            |
	            |ОБЪЕДИНИТЬ
	            |
	            |ВЫБРАТЬ
	            |	РасчетныеПоказатели.Период,
	            |	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) * 1000,
	            |	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) * 4000
	            |ИЗ
	            |	РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	            |ГДЕ
	            |	РасчетныеПоказатели.Период МЕЖДУ &ДатаНач И &ДатаКон
	            |	И ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) <> 0";
			
	Запрос.Текст = РазмерМРП;		
	ТаблицаМРП = Запрос.Выполнить().Выгрузить();
	Если ТаблицаМРП.Количество() <> 0 Тогда
		Запрос.УстановитьПараметр("ДатаИзмененияЛимитаРасчетов", ДатаИзмененияЛимитаРасчетов);
		ТаблицаМРП.Сортировать("Период Убыв");
		Условие = " ГДЕ ВЫБОР ";
		НомерСтроки = 0;
		Для каждого СтрокаМРП Из ТаблицаМРП Цикл
			НомерСтроки = НомерСтроки + 1;
			ДатаМРП   = "ДатаМРП"    + Строка(НомерСтроки);
			Лимит1000 = "Лимит1000_" + Строка(НомерСтроки);
			Лимит4000 = "Лимит4000_" + Строка(НомерСтроки);
			Условие = Условие + " КОГДА ТиповойОбороты.Период >= &" + ДатаМРП + "
			        | ТОГДА ВЫБОР
					| КОГДА ТиповойОбороты.Период < &ДатаИзмененияЛимитаРасчетов
				    | ТОГДА ТиповойОбороты.СуммаОборотДт > &" + Лимит4000 + " 
				    | ИЛИ ТиповойОбороты.СуммаОборотКт > &"   + Лимит4000 + "
			        | КОГДА ТиповойОбороты.Период >= &ДатаИзмененияЛимитаРасчетов
				    | ТОГДА ТиповойОбороты.СуммаОборотДт > &" + Лимит1000 + " 
				    | ИЛИ ТиповойОбороты.СуммаОборотКт > &"   + Лимит1000 + "
		            | КОНЕЦ ";		      
			Запрос.УстановитьПараметр(ДатаМРП, СтрокаМРП.Период);
			Запрос.УстановитьПараметр(Лимит1000, СтрокаМРП.Предел1000);
			Запрос.УстановитьПараметр(Лимит4000, СтрокаМРП.Предел4000);
		КонецЦикла;
		Условие = Условие + " КОНЕЦ ";	
	Иначе
		СтрокаПравила.ОбнаруженыОшибки  = Истина;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = "В регистре сведений ""Регламентированные расчетные показатели"" не задано значение МРП. Проверка не может быть осуществлена.";
        СтрокаПравила.ПричиныОшибокРезультата = "В регистре сведений ""Регламентированные расчетные показатели"" не задано значение " 
				+ " минимального расчетного показателя на дату: " + КонецДатыКон;
		СтрокаПравила.РекомендацииРезультата = "Задать значение минимального расчетного показателя.";
		Возврат;
	КонецЕсли;
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойОбороты.Период КАК Дата,
	|	ТиповойОбороты.Регистратор КАК Документ,
	|	ТиповойОбороты.Субконто1 КАК Контрагент,
	|	ТиповойОбороты.Субконто2 КАК Договор,
	|	ТиповойОбороты.СуммаОборотДт КАК Выдано,
	|	ТиповойОбороты.СуммаОборотКт КАК Получено
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			,
	|			&ВидыСубконтоКонтрагентыДоговоры,
	|			&Организация = Организация
	|				И Субконто1.ЮрФизЛицо = &ЮрЛицо
	|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И СтруктурноеПодразделениеКор = &СтруктурноеПодразделениеКор,
	|			КорСчет В ИЕРАРХИИ (&СчетКассы),
	|			) КАК ТиповойОбороты" + Условие + "
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТекстЗапросаИП =
	"ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТиповойОбороты.Период КАК Дата,
	|	ТиповойОбороты.Регистратор КАК Документ,
	|	ТиповойОбороты.Субконто1 КАК Контрагент,
	|	ТиповойОбороты.Субконто2 КАК Договор,
	|	ТиповойОбороты.СуммаОборотДт КАК Выдано,
	|	ТиповойОбороты.СуммаОборотКт КАК Получено
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(
	|			&ДатаНачЛимитаДляИП,
	|			&ДатаКон,
	|			Регистратор,
	|			,
	|			&ВидыСубконтоКонтрагентыДоговоры,
	|			&Организация = Организация
	|				И Субконто1.ЮрФизЛицо = &ФизЛицо
	|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И СтруктурноеПодразделениеКор = &СтруктурноеПодразделениеКор,
	|			КорСчет В ИЕРАРХИИ (&СчетКассы),
	|			) КАК ТиповойОбороты
	|ГДЕ
	|	ТиповойОбороты.СуммаОборотДт > &" + Лимит1000 + " 
	|	ИЛИ ТиповойОбороты.СуммаОборотКт > &" + Лимит1000 + "
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ДополнениеКомментарияИП = "";
	Если ДатаНач >= ДатаНачЛимитаДляИП И ДатаНачЛимитаДляИП <= КонецДатыКон Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АВТОУПОРЯДОЧИВАНИЕ", ТекстЗапросаИП);
		ДополнениеКомментарияИП = " (инд. предпринимателями, плательщиками НДС)";
	КонецЕсли;
	          	
	Запрос.УстановитьПараметр("СчетКассы", ПланыСчетов.Типовой.ДенежныеСредстваВКассе);
	ВидыСубконтоКонтрагентыДоговоры = Новый Массив;
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконтоКонтрагентыДоговоры", ВидыСубконтоКонтрагентыДоговоры);
	Запрос.УстановитьПараметр("СчетКассы"					   , ПланыСчетов.Типовой.ДенежныеСредстваВКассе);
	Запрос.УстановитьПараметр("Организация"				   	   , Организация);
	Запрос.УстановитьПараметр("ЮрЛицо"					       , Перечисления.ЮрФизЛицо.ЮрЛицо);
	Запрос.УстановитьПараметр("ФизЛицо"					       , Перечисления.ЮрФизЛицо.ФизЛицо);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение"       , СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("СтруктурноеПодразделениеКор"    , СтруктурноеПодразделение);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если ДатаИзмененияЛимитаРасчетов > ДатаНач И ДатаИзмененияЛимитаРасчетов > КонецДатыКон Тогда
		ДополнениеКомментария = "Лимит расчетов между юр.лицами установлен в размере 4000 МРП. ";  
	ИначеЕсли ДатаИзмененияЛимитаРасчетов >= ДатаНач И ДатаИзмененияЛимитаРасчетов < КонецДатыКон Тогда	
		ДополнениеКомментария = "До 24.09.2012 лимит расчетов между юр.лицами установлен в размере 4000 МРП. "  
							  + "С 24.09.2012 лимит расчетов между юр.лицами установлен в размере 1000 МРП. ";  
	ИначеЕсли ДатаИзмененияЛимитаРасчетов < ДатаНач И ДатаИзмененияЛимитаРасчетов < КонецДатыКон Тогда	
		ДополнениеКомментария = "Лимит расчетов между юр.лицами" + ДополнениеКомментарияИП + " установлен в размере 1000 МРП. "; 
	КонецЕсли;						  
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтрокаПравила.КомментарийРезультата = ДополнениеКомментария + СтрокаПравила.КомментарийРезультатаОшибка;
		
		ИсходящиеДанные.Вставить("ЛимитРасчетовСЮрЛицамиРезультатЗапроса", Результат);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Контрагент", "Контрагент");
		СтруктураРасшифровки.Вставить("Договор", "Договор");
		ИсходящиеДанные.Вставить("ЛимитРасчетовСЮрЛицамиСтруктураРасшифровки", СтруктураРасшифровки);
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Дата", 20);
		СтруктураШириныКолонок.Вставить("Документ" , 40);		
		СтруктураШириныКолонок.Вставить("Контрагент"  , 30);
		СтруктураШириныКолонок.Вставить("Договор" , 30);
		СтруктураШириныКолонок.Вставить("Выдано"   , 25);
		СтруктураШириныКолонок.Вставить("Получено"   , 25);
		ИсходящиеДанные.Вставить("ЛимитРасчетовСЮрЛицамиСтруктураШириныКолонок", СтруктураШириныКолонок);
	Иначе
		СтрокаПравила.КомментарийРезультата = ДополнениеКомментария + СтрокаПравила.КомментарийРезультатаНетОшибок;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНумерацияПКО_РКО(СтрокаПравила)
	
	ТаблицаНарушений = Новый ТаблицаЗначений;
	ТаблицаНарушений.Колонки.Добавить("НомерДокумента");
	ТаблицаНарушений.Колонки.Добавить("ДатаДокумента");
	ТаблицаНарушений.Колонки.Добавить("Документ");
	ТаблицаНарушений.Колонки.Добавить("НомерСледующего");
	ТаблицаНарушений.Колонки.Добавить("ДатаСледующего");
	ТаблицаНарушений.Колонки.Добавить("СледДокумент");
	
	// Сначала проверяем последовательность нумерации приходных кассовых ордеров
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриходныйКассовыйОрдер.Ссылка КАК Документ,
	|	ПриходныйКассовыйОрдер.Дата КАК Дата,
	|	ПриходныйКассовыйОрдер.Номер
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПриходныйКассовыйОрдер.Организация = &Организация
	|	И ПриходныйКассовыйОрдер.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение";
	
	Запрос.УстановитьПараметр("ДатаНач"					, ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон"					, КонецДатыКон);
	Запрос.УстановитьПараметр("Организация"				, Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	ТаблицаРезультата.Колонки.Добавить("НомерЧислом");
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультата Цикл
		СтрокаТаблицы.НомерЧислом = ПолучитьНомерЧислом(СтрокаТаблицы.Номер);
	КонецЦикла;
	ТаблицаРезультата.Сортировать("НомерЧислом ВОЗР, Дата ВОЗР");
	
	Для ИндексСтроки = 1 По ТаблицаРезультата.Количество() - 1 Цикл
		
		ДатаТекущейСтроки    = ТаблицаРезультата[ИндексСтроки].Дата;
		ДатаПредыдущейСтроки = ТаблицаРезультата[ИндексСтроки - 1].Дата;
		НарушенаНумерация    = ДатаТекущейСтроки < ДатаПредыдущейСтроки;
		
		Если НарушенаНумерация Тогда
			
			СтрокаНарушения = ТаблицаНарушений.Добавить();
			СтрокаНарушения.НомерДокумента  = ТаблицаРезультата[ИндексСтроки].Номер;
			СтрокаНарушения.ДатаДокумента   = ТаблицаРезультата[ИндексСтроки].Дата;
			СтрокаНарушения.Документ        = ТаблицаРезультата[ИндексСтроки].Документ;
			СтрокаНарушения.НомерСледующего = ТаблицаРезультата[ИндексСтроки - 1].Номер;
			СтрокаНарушения.ДатаСледующего  = ТаблицаРезультата[ИндексСтроки - 1].Дата;
			СтрокаНарушения.СледДокумент    = ТаблицаРезультата[ИндексСтроки - 1].Документ;
		
		КонецЕсли; 
	КонецЦикла;
	
	// Затем проверяем последовательность нумерации расходных кассовых ордеров
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходныйКассовыйОрдер.Ссылка КАК Документ,
	|	РасходныйКассовыйОрдер.Дата КАК Дата,
	|	РасходныйКассовыйОрдер.Номер
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|	И РасходныйКассовыйОрдер.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение";
	
	Запрос.УстановитьПараметр("ДатаНач"					, ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон"					, КонецДатыКон);
	Запрос.УстановитьПараметр("Организация"				, Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	ТаблицаРезультата.Колонки.Добавить("НомерЧислом");
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультата Цикл
		СтрокаТаблицы.НомерЧислом = ПолучитьНомерЧислом(СтрокаТаблицы.Номер);
	КонецЦикла;
	ТаблицаРезультата.Сортировать("НомерЧислом ВОЗР, Дата ВОЗР");
	
	Для ИндексСтроки = 1 По ТаблицаРезультата.Количество() - 1 Цикл
		
		ДатаТекущейСтроки    = ТаблицаРезультата[ИндексСтроки].Дата;
		ДатаПредыдущейСтроки = ТаблицаРезультата[ИндексСтроки - 1].Дата;
		НарушенаНумерация    = ДатаТекущейСтроки < ДатаПредыдущейСтроки;
		
		Если НарушенаНумерация Тогда
			
			СтрокаНарушения = ТаблицаНарушений.Добавить();
			СтрокаНарушения.НомерДокумента  = ТаблицаРезультата[ИндексСтроки].Номер;
			СтрокаНарушения.ДатаДокумента   = ТаблицаРезультата[ИндексСтроки].Дата;
			СтрокаНарушения.Документ        = ТаблицаРезультата[ИндексСтроки].Документ;
			СтрокаНарушения.НомерСледующего = ТаблицаРезультата[ИндексСтроки - 1].Номер;
			СтрокаНарушения.ДатаСледующего  = ТаблицаРезультата[ИндексСтроки - 1].Дата;
			СтрокаНарушения.СледДокумент    = ТаблицаРезультата[ИндексСтроки - 1].Документ;
		
		КонецЕсли; 
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ТаблицаНарушений.Количество() > 0;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НумерацияПКО_РКОТаблицаЗначений", ТаблицаНарушений);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("НомерДокумента" , "Номер документа");
		СтруктураЗаголовков.Вставить("ДатаДокумента"  , "Дата документа");
		СтруктураЗаголовков.Вставить("НомерСледующего", "Номер след. документа");
		СтруктураЗаголовков.Вставить("ДатаСледующего" , "Дата след. документа");
		СтруктураЗаголовков.Вставить("СледДокумент"   , "Следующий документ");
		ИсходящиеДанные.Вставить("НумерацияПКО_РКОСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("НомерДокумента" , 25);
		СтруктураШириныКолонок.Вставить("НомерСледующего", 25);
		СтруктураШириныКолонок.Вставить("ДатаДокумента"  , 20);
		СтруктураШириныКолонок.Вставить("ДатаСледующего" , 20);
		СтруктураШириныКолонок.Вставить("СледДокумент"   , 40);
		ИсходящиеДанные.Вставить("НумерацияПКО_РКОСтруктураШириныКолонок", СтруктураШириныКолонок);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("СледДокумент", "СледДокумент");
		ИсходящиеДанные.Вставить("НумерацияПКО_РКОСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоРазницаКурсовВБанковскихДокументах(СтрокаПравила)
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежныеДокументы.Ссылка,
	|	ПлатежныеДокументы.ВалютаДокумента,
	|	ПлатежныеДокументы.КурсВзаиморасчетов,
	|	ПлатежныеДокументы.Дата КАК Дата,
	|	ПлатежныеДокументы.НомерСтроки
	|ПОМЕСТИТЬ БанковскиеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПлатежныйОрдерПоступлениеДС.Ссылка КАК Ссылка,
	|		ВЫБОР
	|			КОГДА ПлатежныйОрдерПоступлениеДС.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты)
	|					ИЛИ ПлатежныйОрдерПоступлениеДС.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты)
	|				ТОГДА ПлатежныйОрдерПоступлениеДС.Ссылка.КурсНаДатуПриобретенияРеализацииВалюты
	|			ИНАЧЕ ПлатежныйОрдерПоступлениеДС.КурсВзаиморасчетов
	|		КОНЕЦ КАК КурсВзаиморасчетов,
	|		ПлатежныйОрдерПоступлениеДС.Ссылка.Дата КАК Дата,
	|		ПлатежныйОрдерПоступлениеДС.НомерСтроки КАК НомерСтроки,
	|		ПлатежныйОрдерПоступлениеДС.Ссылка.ВалютаДокумента КАК ВалютаДокумента
	|	ИЗ
	|		Документ.ПлатежныйОрдерПоступлениеДенежныхСредств.РасшифровкаПлатежа КАК ПлатежныйОрдерПоступлениеДС
	|	ГДЕ
	|		ПлатежныйОрдерПоступлениеДС.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	|		И ПлатежныйОрдерПоступлениеДС.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств)
	|		И ПлатежныйОрдерПоступлениеДС.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств)
	|		И ПлатежныйОрдерПоступлениеДС.Ссылка.Проведен
	|		И ПлатежныйОрдерПоступлениеДС.Ссылка.Организация = &Организация
	|		И ПлатежныйОрдерПоступлениеДС.Ссылка.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение
	|		И ПлатежныйОрдерПоступлениеДС.Ссылка.ВалютаДокумента <> &ВалютаРегламентированногоУчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПлатОрдерСписаниеДС.Ссылка,
	|		ПлатОрдерСписаниеДС.КурсВзаиморасчетов,
	|		ПлатОрдерСписаниеДС.Ссылка.Дата,
	|		ПлатОрдерСписаниеДС.НомерСтроки,
	|		ПлатОрдерСписаниеДС.Ссылка.ВалютаДокумента
	|	ИЗ
	|		Документ.ПлатежныйОрдерСписаниеДенежныхСредств.РасшифровкаПлатежа КАК ПлатОрдерСписаниеДС
	|	ГДЕ
	|		ПлатОрдерСписаниеДС.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	|		И ПлатОрдерСписаниеДС.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств)
	|		И ПлатОрдерСписаниеДС.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗаработнойПлаты)
	|		И ПлатОрдерСписаниеДС.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет)
	|		И ПлатОрдерСписаниеДС.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога)
	|		И ПлатОрдерСписаниеДС.Ссылка.Проведен
	|		И ПлатОрдерСписаниеДС.Ссылка.Организация = &Организация
	|		И ПлатОрдерСписаниеДС.Ссылка.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение
	|		И ПлатОрдерСписаниеДС.Ссылка.ВалютаДокумента <> &ВалютаРегламентированногоУчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПлатежноеПоручениеВходящее.Ссылка,
	|		ВЫБОР
	|			КОГДА ПлатежноеПоручениеВходящее.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты)
	|					ИЛИ ПлатежноеПоручениеВходящее.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты)
	|				ТОГДА ПлатежноеПоручениеВходящее.Ссылка.КурсНаДатуПриобретенияРеализацииВалюты
	|			ИНАЧЕ ПлатежноеПоручениеВходящее.КурсВзаиморасчетов
	|		КОНЕЦ,
	|		ПлатежноеПоручениеВходящее.Ссылка.Дата,
	|		ПлатежноеПоручениеВходящее.НомерСтроки,
	|		ПлатежноеПоручениеВходящее.Ссылка.ВалютаДокумента
	|	ИЗ
	|		Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящее
	|	ГДЕ
	|		ПлатежноеПоручениеВходящее.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	|		И ПлатежноеПоручениеВходящее.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств)
	|		И ПлатежноеПоручениеВходящее.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты)
	|		И ПлатежноеПоручениеВходящее.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПенсионныхВзносов)
	|		И ПлатежноеПоручениеВходящее.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратСоциальныхОтчислений)
	|		И ПлатежноеПоручениеВходящее.Ссылка.Проведен
	|		И ПлатежноеПоручениеВходящее.Ссылка.ВалютаДокумента <> &ВалютаРегламентированногоУчета
	|		И ПлатежноеПоручениеВходящее.Ссылка.Организация = &Организация
	|		И ПлатежноеПоручениеВходящее.Ссылка.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПлатПорИсхРасшифровкаПлатежа.Ссылка,
	|		ПлатПорИсхРасшифровкаПлатежа.КурсВзаиморасчетов,
	|		ПлатПорИсхРасшифровкаПлатежа.Ссылка.Дата,
	|		ПлатПорИсхРасшифровкаПлатежа.НомерСтроки,
	|		ПлатПорИсхРасшифровкаПлатежа.Ссылка.ВалютаДокумента
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатПорИсхРасшифровкаПлатежа
	|	ГДЕ
	|		ПлатПорИсхРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	|		И (ПлатПорИсхРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПоставщику)
	|		ИЛИ ПлатПорИсхРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю)
	|		ИЛИ ПлатПорИсхРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаСтруктурномуПодразделению)
	|		ИЛИ ПлатПорИсхРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами)
	|		ИЛИ ПлатПорИсхРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами))
	|		И ПлатПорИсхРасшифровкаПлатежа.Ссылка.Проведен
	|		И ПлатПорИсхРасшифровкаПлатежа.Ссылка.Организация = &Организация
	|		И ПлатПорИсхРасшифровкаПлатежа.Ссылка.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение
	|		И ПлатПорИсхРасшифровкаПлатежа.Ссылка.ВалютаДокумента <> &ВалютаРегламентированногоУчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПКОРасшифровкаПлатежа.Ссылка,
	|		ПКОРасшифровкаПлатежа.КурсВзаиморасчетов,
	|		ПКОРасшифровкаПлатежа.Ссылка.Дата,
	|		ПКОРасшифровкаПлатежа.НомерСтроки,
	|		ПКОРасшифровкаПлатежа.Ссылка.ВалютаДокумента
	|	ИЗ
	|		Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПКОРасшифровкаПлатежа
	|	ГДЕ
	|		ПКОРасшифровкаПлатежа.Ссылка.Проведен
	|		И ПКОРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	|		И ПКОРасшифровкаПлатежа.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке)
	|		И ПКОРасшифровкаПлатежа.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПриходДенежныхСредствПрочее)
	|		И ПКОРасшифровкаПлатежа.Ссылка.Организация = &Организация
	|		И ПКОРасшифровкаПлатежа.Ссылка.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение
	|		И ПКОРасшифровкаПлатежа.Ссылка.ВалютаДокумента <> &ВалютаРегламентированногоУчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РКОРасшифровкаПлатежа.Ссылка,
	|		РКОРасшифровкаПлатежа.КурсВзаиморасчетов,
	|		РКОРасшифровкаПлатежа.Ссылка.Дата,
	|		РКОРасшифровкаПлатежа.НомерСтроки,
	|		РКОРасшифровкаПлатежа.Ссылка.ВалютаДокумента
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РКОРасшифровкаПлатежа
	|	ГДЕ
	|		РКОРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	|		И (РКОРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПоставщику)
	|		ИЛИ РКОРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю)
	|		ИЛИ РКОРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаСтруктурномуПодразделению)
	|		ИЛИ РКОРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами)
	|		ИЛИ РКОРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами))
	|		И РКОРасшифровкаПлатежа.Ссылка.Проведен
	|		И РКОРасшифровкаПлатежа.Ссылка.Организация = &Организация
	|		И РКОРасшифровкаПлатежа.Ссылка.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение
	|		И РКОРасшифровкаПлатежа.Ссылка.ВалютаДокумента <> &ВалютаРегламентированногоУчета) КАК ПлатежныеДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежныеДокументы.Ссылка КАК Документ,
	|	ПлатежныеДокументы.НомерСтроки,
	|	ПлатежныеДокументы.ВалютаДокумента,
	|	ПлатежныеДокументы.КурсВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалют.Курс, 1) КАК УстановленныйКурс
	|ИЗ
	|	БанковскиеДокументы КАК ПлатежныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Док.Ссылка КАК Ссылка,
	|			Док.ВалютаДокумента КАК ВалютаДокумента,
	|			МАКСИМУМ(КурсыВалют.Период) КАК Период
	|		ИЗ
	|			БанковскиеДокументы КАК Док
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|				ПО Док.Дата >= КурсыВалют.Период
	|					И Док.ВалютаДокумента = КурсыВалют.Валюта
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Док.Ссылка,
	|			Док.ВалютаДокумента) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|			ПО ВложенныйЗапрос.Период = КурсыВалют.Период
	|				И ВложенныйЗапрос.ВалютаДокумента = КурсыВалют.Валюта
	|		ПО ПлатежныеДокументы.Ссылка = ВложенныйЗапрос.Ссылка
	|ГДЕ
	|	КурсыВалют.Курс <> ПлатежныеДокументы.КурсВзаиморасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежныеДокументы.Дата";
   	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("НачПериода"					  , ДатаНач);
	Запрос.УстановитьПараметр("КонПериода"					  , КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("Организация"					  , Организация); 
    Запрос.УстановитьПараметр("СтруктурноеПодразделение"	  , СтруктурноеПодразделение); 


	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("РазницаКурсовВБанковскихДокументахРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("НомерСтроки", "Номер строки в ТЧ ""Расшифровка платежа""");
		СтруктураЗаголовков.Вставить("КурсВзаиморасчетов", "Курс взаиморасчетов из документа");
		СтруктураЗаголовков.Вставить("УстановленныйКурс",  "Установленный курс из регистра сведений ""Курсы валют""");
		ИсходящиеДанные.Вставить("РазницаКурсовВБанковскихДокументахСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоСоответствиеСтатейДДСПоВидамОпераций(СтрокаПравила)
	
		
	Запрос = Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ТиповойОбороты.Субконто1 КАК СтатьяДДС,
	             |	ТиповойОбороты.Счет КАК СЧЕТ,
	             |	ТиповойОбороты.Регистратор КАК Документ,
	             |	ТиповойОбороты.Субконто1.ВидДвижения КАК ВидДвиженияПоРегистратору,
	             |	ВЫБОР
	             |		КОГДА ТиповойОбороты.Счет.Валютный
	             |					И (НЕ ЕСТЬNULL(ТиповойОбороты.ВалютнаяСуммаОборотДт, 0) = 0)
	             |				ИЛИ (НЕ ТиповойОбороты.Счет.Валютный)
	             |					И (НЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) = 0)
	             |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.Поступление)
	             |		КОГДА ТиповойОбороты.Счет.Валютный
	             |					И (НЕ ЕСТЬNULL(ТиповойОбороты.ВалютнаяСуммаОборотКт, 0) = 0)
	             |				ИЛИ (НЕ ТиповойОбороты.Счет.Валютный)
	             |					И (НЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) = 0)
	             |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.Выбытие)
	             |	КОНЕЦ КАК ВидДвиженияПравильный
	             |ИЗ
	             |	РегистрБухгалтерии.Типовой.Обороты(
	             |			&ДатаНач,
	             |			&ДатаКон,
	             |			Регистратор,
	             |			Счет В ИЕРАРХИИ (&ДенежныеСредства),
	             |			&СтатьяДвиженияДенежныхСредств,
	             |			Организация = &Организация
	             |				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	             |				И СтруктурноеПодразделениеКор = &СтруктурноеПодразделениеКор,
	             |			,
	             |			) КАК ТиповойОбороты
	             |ГДЕ
	             |	ТиповойОбороты.Субконто1.ВидДвижения <> ВЫБОР
	             |			КОГДА ТиповойОбороты.Счет.Валютный
	             |						И (НЕ ЕСТЬNULL(ТиповойОбороты.ВалютнаяСуммаОборотДт, 0) = 0)
	             |					ИЛИ (НЕ ТиповойОбороты.Счет.Валютный)
	             |						И (НЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) = 0)
	             |				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.Поступление)
	             |			КОГДА ТиповойОбороты.Счет.Валютный
	             |						И (НЕ ЕСТЬNULL(ТиповойОбороты.ВалютнаяСуммаОборотКт, 0) = 0)
	             |					ИЛИ (НЕ ТиповойОбороты.Счет.Валютный)
	             |						И (НЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) = 0)
	             |				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.Выбытие)
	             |		КОНЕЦ"; 
				 
    Запрос.УстановитьПараметр("ДенежныеСредства"			 , ПланыСчетов.Типовой.ДенежныеСредства);
	Запрос.УстановитьПараметр("ДатаНач"						 , ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон"						 , КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиДвиженияДенежныхСредств);
	Запрос.УстановитьПараметр("Организация"					 , Организация);
    Запрос.УстановитьПараметр("СтруктурноеПодразделение"	 , СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("СтруктурноеПодразделениеКор"	 , СтруктурноеПодразделение);
    
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("СоответствиеСтатейДДСПоВидамОперацийРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("СтатьяДДС", "Статья ДДС");
		СтруктураЗаголовков.Вставить("ВидДвиженияПоРегистратору", "Вид движения, указанный в статье ДДС");
		СтруктураЗаголовков.Вставить("ВидДвиженияПравильный",  "Вид движения, который необходимо установить в статье ДДС");
		ИсходящиеДанные.Вставить("СоответствиеСтатейДДСПоВидамОперацийСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоЗаполнениеРеквизитаСтатьяДДСВДокументах(СтрокаПравила)
	
	Запрос = Новый Запрос;
		
	Запрос.Текст="ВЫБРАТЬ
	             |	ТиповойОбороты.Регистратор КАК Документ
	             |ИЗ
	             |	РегистрБухгалтерии.Типовой.Обороты(
	             |			&ДатаНач,
	             |			&ДатаКон,
	             |			Регистратор,
	             |			Счет В ИЕРАРХИИ (&ДенежныеСредства),
	             |			&СтатьяДвиженияДенежныхСредств,
	             |			Организация = &Организация
	             |				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	             |				И СтруктурноеПодразделениеКор = &СтруктурноеПодразделениеКор,
	             |			,
	             |			) КАК ТиповойОбороты
	             |ГДЕ
	             |	ТиповойОбороты.Субконто1 = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)";
	             			 
				 
    Запрос.УстановитьПараметр("ДенежныеСредства"			 , ПланыСчетов.Типовой.ДенежныеСредства);
	Запрос.УстановитьПараметр("ДатаНач"						 , ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон"						 , КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиДвиженияДенежныхСредств);
	Запрос.УстановитьПараметр("Организация"					 , Организация);
    Запрос.УстановитьПараметр("СтруктурноеПодразделение"	 , СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("СтруктурноеПодразделениеКор"	 , СтруктурноеПодразделение);
    
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ЗаполнениеРеквизитаСтатьяДДСВДокументахРезультатЗапроса", Результат);		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоЗаполнениеРеквизитовВСправочникеСтатьиДДС(СтрокаПравила)
	
	Запрос = Новый Запрос;
		
	Запрос.Текст= "ВЫБРАТЬ
	              |	СтатьиДвиженияДенежныхСредств.Ссылка КАК Элемент,
	              |	ВЫБОР
	              |		КОГДА СтатьиДвиженияДенежныхСредств.Наименование = """"
	              |			ТОГДА ""-""
	              |		ИНАЧЕ ""+""
	              |	КОНЕЦ КАК Наименование,
	              |	ВЫБОР
	              |		КОГДА СтатьиДвиженияДенежныхСредств.РазрезДеятельности = ЗНАЧЕНИЕ(Перечисление.РазрезыДеятельности.ПустаяСсылка)
	              |			ТОГДА ""-""
	              |		ИНАЧЕ ""+""
	              |	КОНЕЦ КАК РазрезДеятельности,
	              |	ВЫБОР
	              |		КОГДА СтатьиДвиженияДенежныхСредств.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
	              |			ТОГДА ""-""
	              |		ИНАЧЕ ""+""
	              |	КОНЕЦ КАК ВидДвижения,
	              |	ВЫБОР
	              |		КОГДА СтатьиДвиженияДенежныхСредств.ДвижениеДенежныхСредств = ЗНАЧЕНИЕ(Справочник.ДвиженияДенежныхСредств.ПустаяССылка)
	              |			ТОГДА ""-""
	              |		ИНАЧЕ ""+""
	              |	КОНЕЦ КАК ДвижениеДенежныхСредств
	              |ИЗ
	              |	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	              |ГДЕ
	              |	(НЕ СтатьиДвиженияДенежныхСредств.ЭтоГруппа)
	              |	И (НЕ СтатьиДвиженияДенежныхСредств.ПометкаУдаления)
	              |	И (ВЫБОР
	              |				КОГДА СтатьиДвиженияДенежныхСредств.Наименование = """"
	              |					ТОГДА ИСТИНА
	              |				ИНАЧЕ ЛОЖЬ
	              |			КОНЕЦ
	              |			ИЛИ ВЫБОР
	              |				КОГДА СтатьиДвиженияДенежныхСредств.РазрезДеятельности = ЗНАЧЕНИЕ(Перечисление.РазрезыДеятельности.ПустаяСсылка)
	              |					ТОГДА ИСТИНА
	              |				ИНАЧЕ ЛОЖЬ
	              |			КОНЕЦ
	              |			ИЛИ ВЫБОР
	              |				КОГДА СтатьиДвиженияДенежныхСредств.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
	              |					ТОГДА ИСТИНА
	              |				ИНАЧЕ ЛОЖЬ
	              |			КОНЕЦ
	              |			ИЛИ ВЫБОР
	              |				КОГДА СтатьиДвиженияДенежныхСредств.ДвижениеДенежныхСредств = ЗНАЧЕНИЕ(Справочник.ДвиженияДенежныхСредств.ПустаяССылка)
	              |					ТОГДА ИСТИНА
	              |				ИНАЧЕ ЛОЖЬ
	              |			КОНЕЦ)";
	             			 
	Результат = Запрос.Выполнить();
	
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ЗаполнениеРеквизитовВСправочникеСтатьиДДСРезультатЗапроса", Результат);		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("РазрезДеятельности", "Заполнен реквизит ""Разрез деятельности""");
		СтруктураЗаголовков.Вставить("ВидДвижения",       "Заполнен реквизит ""Вид движения""");
		СтруктураЗаголовков.Вставить("ДвижениеДенежныхСредств",  "Заполнен реквизит ""Движение денежных средств""");
		ИсходящиеДанные.Вставить("ЗаполнениеРеквизитовВСправочникеСтатьиДДССтруктураЗаголовков", СтруктураЗаголовков);

	КонецЕсли; 
	
КонецПроцедуры

// НДС

Процедура ПроверитьПравилоСверкаБухИРегистровНДС(СтрокаПравила)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаВся.Счет,
	               |	ТаблицаВся.Регистр КАК Регистр,
	               |	ЕСТЬNULL(ТаблицаВся.Регистратор, ТаблицаВся.Регистратор1) КАК Документ,
	               |	СУММА(ЕСТЬNULL(ТаблицаВся.СуммаОборот, 0)) КАК СуммаПоДаннымБухУчета,
	               |	СУММА(ЕСТЬNULL(ТаблицаВся.СуммаНДСОборот, 0)) КАК СуммаВПодсистемеНДС
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		&Счет1420 КАК Счет,
	               |		""НДС к возмещению"" КАК Регистр,
	               |		ТиповойОбороты.СуммаОборотДт КАК СуммаОборот,
	               |		ТиповойОбороты.Регистратор КАК Регистратор,
	               |		НДСКВозмещениюОбороты.СуммаНДСОборот КАК СуммаНДСОборот,
	               |		НДСКВозмещениюОбороты.Регистратор КАК Регистратор1
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ТиповойОбороты.СуммаОборотДт КАК СуммаОборотДт,
	               |			ТиповойОбороты.Регистратор КАК Регистратор
	               |		ИЗ
	               |			РегистрБухгалтерии.Типовой.Обороты(
	               |					&ДатаНач,
	               |					&ДатаКон,
	               |					Регистратор,
	               |					Счет = &Счет1420,
	               |					&СубконтоПлатежиВБюджет,
	               |					Организация = &Организация
	               |						И Субконто1 В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.Налог), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.НалогСам), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.НалогАкт)),
	               |					КорСчет <> &Счет3130,
	               |					) КАК ТиповойОбороты) КАК ТиповойОбороты
	               |			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				НДСКВозмещениюОбороты.СуммаНДСОборот КАК СуммаНДСОборот,
	               |				НДСКВозмещениюОбороты.Регистратор КАК Регистратор
	               |			ИЗ
	               |				РегистрНакопления.НДСКВозмещению.Обороты(&ДатаНач, &ДатаКон, Регистратор, Организация = &Организация) КАК НДСКВозмещениюОбороты) КАК НДСКВозмещениюОбороты
	               |			ПО ТиповойОбороты.СуммаОборотДт = НДСКВозмещениюОбороты.СуммаНДСОборот
	               |				И ТиповойОбороты.Регистратор = НДСКВозмещениюОбороты.Регистратор
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		&Счет1420,
	               |		""Корректировка НДС к возмещению"",
	               |		ТиповойОбороты.СуммаОборотКт,
	               |		ТиповойОбороты.Регистратор,
	               |		КорректировкаНДСКВозмещениюОбороты.СуммаНДСОборот,
	               |		КорректировкаНДСКВозмещениюОбороты.Регистратор
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ТиповойОбороты.СуммаОборотКт КАК СуммаОборотКт,
	               |			ТиповойОбороты.Регистратор КАК Регистратор
	               |		ИЗ
	               |			РегистрБухгалтерии.Типовой.Обороты(
	               |					&ДатаНач,
	               |					&ДатаКон,
	               |					Регистратор,
	               |					Счет = &Счет1420,
	               |					&СубконтоПлатежиВБюджет,
	               |					Организация = &Организация
	               |						И Субконто1 В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.Налог), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.НалогСам), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.НалогАкт)),
	               |					КорСчет <> &Счет3130,
	               |					) КАК ТиповойОбороты) КАК ТиповойОбороты
	               |			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				КорректировкаНДСКВозмещениюОбороты.СуммаНДСОборот КАК СуммаНДСОборот,
	               |				КорректировкаНДСКВозмещениюОбороты.Регистратор КАК Регистратор
	               |			ИЗ
	               |				РегистрНакопления.КорректировкаНДСКВозмещению.Обороты(&ДатаНач, &ДатаКон, Регистратор, Организация = &Организация) КАК КорректировкаНДСКВозмещениюОбороты) КАК КорректировкаНДСКВозмещениюОбороты
	               |			ПО (ТиповойОбороты.СуммаОборотКт = -КорректировкаНДСКВозмещениюОбороты.СуммаНДСОборот)
	               |				И ТиповойОбороты.Регистратор = КорректировкаНДСКВозмещениюОбороты.Регистратор
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		&Счет3130,
	               |		""НДС"",
	               |		ТиповойОбороты.СуммаОборотКт,
	               |		ТиповойОбороты.Регистратор,
	               |		НДСОбороты.СуммаНДСОборот,
	               |		НДСОбороты.Регистратор
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ТиповойОбороты.СуммаОборотКт КАК СуммаОборотКт,
	               |			ТиповойОбороты.Регистратор КАК Регистратор
	               |		ИЗ
	               |			РегистрБухгалтерии.Типовой.Обороты(
	               |					&ДатаНач,
	               |					&ДатаКон,
	               |					Регистратор,
	               |					Счет = &Счет3130,
	               |					&СубконтоПлатежиВБюджет,
	               |					Организация = &Организация
	               |						И Субконто1 В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.Налог), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.НалогСам), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.НалогАкт)),
	               |					КорСчет <> &Счет1420
	               |						И (НЕ КорСчет В ИЕРАРХИИ (&Счет1000)),
	               |					) КАК ТиповойОбороты) КАК ТиповойОбороты
	               |			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				НДСОбороты.СуммаНДСОборот КАК СуммаНДСОборот,
	               |				НДСОбороты.Регистратор КАК Регистратор
	               |			ИЗ
	               |				РегистрНакопления.НДС.Обороты(&ДатаНач, &ДатаКон, Регистратор, Организация = &Организация) КАК НДСОбороты) КАК НДСОбороты
	               |			ПО ТиповойОбороты.СуммаОборотКт = НДСОбороты.СуммаНДСОборот
	               |				И ТиповойОбороты.Регистратор = НДСОбороты.Регистратор
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		&Счет3130,
	               |		""Корректировка НДС"",
	               |		ТиповойОбороты.СуммаОборотДт,
	               |		ТиповойОбороты.Регистратор,
	               |		КорректировкаНДСОбороты.СуммаНДСОборот,
	               |		КорректировкаНДСОбороты.Регистратор
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ТиповойОбороты.СуммаОборотДт КАК СуммаОборотДт,
	               |			ТиповойОбороты.Регистратор КАК Регистратор
	               |		ИЗ
	               |			РегистрБухгалтерии.Типовой.Обороты(
	               |					&ДатаНач,
	               |					&ДатаКон,
	               |					Регистратор,
	               |					Счет = &Счет3130,
	               |					&СубконтоПлатежиВБюджет,
	               |					Организация = &Организация
	               |						И Субконто1 В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.Налог), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.НалогСам), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.НалогАкт)),
	               |					КорСчет <> &Счет1420
	               |						И (НЕ КорСчет В ИЕРАРХИИ (&Счет1000)),
	               |					) КАК ТиповойОбороты) КАК ТиповойОбороты
	               |			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				КорректировкаНДСОбороты.СуммаНДСОборот КАК СуммаНДСОборот,
	               |				КорректировкаНДСОбороты.Регистратор КАК Регистратор
	               |			ИЗ
	               |				РегистрНакопления.КорректировкаНДС.Обороты(&ДатаНач, &ДатаКон, Регистратор, Организация = &Организация) КАК КорректировкаНДСОбороты) КАК КорректировкаНДСОбороты
	               |			ПО (ТиповойОбороты.СуммаОборотДт = -КорректировкаНДСОбороты.СуммаНДСОборот)
	               |				И ТиповойОбороты.Регистратор = КорректировкаНДСОбороты.Регистратор) КАК ТаблицаВся
	               |ГДЕ
	               |	(ТаблицаВся.Регистратор ЕСТЬ NULL 
	               |			ИЛИ ТаблицаВся.Регистратор1 ЕСТЬ NULL )
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаВся.Регистр,
	               |	ЕСТЬNULL(ТаблицаВся.Регистратор, ТаблицаВся.Регистратор1),
	               |	ТаблицаВся.Счет
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Документ
	               |ИТОГИ
	               |	СУММА(СуммаПоДаннымБухУчета),
	               |	СУММА(СуммаВПодсистемеНДС)
	               |ПО
	               |	Регистр
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Запрос.УстановитьПараметр("ДатаНач", 				ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", 				КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", 			Организация);
	Запрос.УстановитьПараметр("Счет1420",				ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению);
	Запрос.УстановитьПараметр("Счет3130",				ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость);
	Запрос.УстановитьПараметр("Счет1000",				ПланыСчетов.Типовой.ДенежныеСредства);
	Запрос.УстановитьПараметр("СубконтоПлатежиВБюджет", ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПлатежейВБюджетИФонды);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		ВыборкаРезультата = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ОшибкиНайдены = Ложь;
		ТаблицаОшибок = Новый ТаблицаЗначений;
		ТаблицаОшибок.Колонки.Добавить("Счет");
		ТаблицаОшибок.Колонки.Добавить("Регистр");
		ТаблицаОшибок.Колонки.Добавить("Документ");
		ТаблицаОшибок.Колонки.Добавить("СуммаПоДаннымБухУчета");
		ТаблицаОшибок.Колонки.Добавить("СуммаВПодсистемеНДС");
		Пока ВыборкаРезультата.Следующий() Цикл
			// проверим данные по счету и определенному регистру НДС
			Если ВыборкаРезультата.Регистр = "НДС к возмещению" Тогда
				ДО1420 = ВыборкаРезультата.СуммаПоДаннымБухУчета;
				СуммаНДСкВозм = ВыборкаРезультата.СуммаВПодсистемеНДС;
				Если ДО1420 <> СуммаНДСкВозм Тогда // есть разница между бух.учетом Дт 1420 и оборотами рег-ра "НДС к возмещению"
					 ОшибкиНайдены = Истина;
					 ВыборкаДетали = ВыборкаРезультата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					 Пока ВыборкаДетали.Следующий() Цикл
						 НовСтрока = ТаблицаОшибок.Добавить();
						 НовСтрока.Счет = ВыборкаДетали.Счет;
						 НовСтрока.Регистр = ВыборкаДетали.Регистр;
						 НовСтрока.Документ = ВыборкаДетали.Документ;
						 НовСтрока.СуммаПоДаннымБухУчета = ВыборкаДетали.СуммаПоДаннымБухУчета;
						 НовСтрока.СуммаВПодсистемеНДС = ВыборкаДетали.СуммаВПодсистемеНДС;						 
					 КонецЦикла;                                                           					
				КонецЕсли;				
				
			ИначеЕсли  ВыборкаРезультата.Регистр = "Корректировка НДС к возмещению" Тогда
			    КО1420 = ВыборкаРезультата.СуммаПоДаннымБухУчета;
				СуммаКорректировкаНДСкВозм = ВыборкаРезультата.СуммаВПодсистемеНДС;
				Если КО1420 <> - СуммаКорректировкаНДСкВозм Тогда // есть разница между бух.учетом Кт 1420 и оборотами рег-ра "Корректировка НДС к возмещению"
					 ОшибкиНайдены = Истина;
					 ВыборкаДетали = ВыборкаРезультата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					 Пока ВыборкаДетали.Следующий() Цикл
						 НовСтрока = ТаблицаОшибок.Добавить();
						 НовСтрока.Счет = ВыборкаДетали.Счет;
						 НовСтрока.Регистр = ВыборкаДетали.Регистр;
						 НовСтрока.Документ = ВыборкаДетали.Документ;
						 НовСтрока.СуммаПоДаннымБухУчета = ВыборкаДетали.СуммаПоДаннымБухУчета;
						 НовСтрока.СуммаВПодсистемеНДС = ВыборкаДетали.СуммаВПодсистемеНДС;						 
					 КонецЦикла;                                                           					
				КонецЕсли; 
				 
			ИначеЕсли  ВыборкаРезультата.Регистр = "НДС" Тогда
			    КО3130 = ВыборкаРезультата.СуммаПоДаннымБухУчета;
				СуммаНДС = ВыборкаРезультата.СуммаВПодсистемеНДС;
				Если КО3130 <> СуммаНДС Тогда // есть разница между бух.учетом Кт 3130 и оборотами рег-ра "НДС"
					 ОшибкиНайдены = Истина;
					 ВыборкаДетали = ВыборкаРезультата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					 Пока ВыборкаДетали.Следующий() Цикл
						 НовСтрока = ТаблицаОшибок.Добавить();
						 НовСтрока.Счет = ВыборкаДетали.Счет;
						 НовСтрока.Регистр = ВыборкаДетали.Регистр;
						 НовСтрока.Документ = ВыборкаДетали.Документ;
						 НовСтрока.СуммаПоДаннымБухУчета = ВыборкаДетали.СуммаПоДаннымБухУчета;
						 НовСтрока.СуммаВПодсистемеНДС = ВыборкаДетали.СуммаВПодсистемеНДС;						 
					 КонецЦикла;                                                           					
				КонецЕсли;
				
			ИначеЕсли  ВыборкаРезультата.Регистр = "Корректировка НДС" Тогда
			    ДО3130 = ВыборкаРезультата.СуммаПоДаннымБухУчета;
				СуммаКорректировкаНДС = ВыборкаРезультата.СуммаВПодсистемеНДС;
				Если ДО3130 <> - СуммаКорректировкаНДС Тогда // есть разница между бух.учетом Дт 3130 и оборотами рег-ра "Корректировка НДС"
					 ОшибкиНайдены = Истина;
					 ВыборкаДетали = ВыборкаРезультата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					 Пока ВыборкаДетали.Следующий() Цикл
						 НовСтрока = ТаблицаОшибок.Добавить();
						 НовСтрока.Счет = ВыборкаДетали.Счет;
						 НовСтрока.Регистр = ВыборкаДетали.Регистр;
						 НовСтрока.Документ = ВыборкаДетали.Документ;
						 НовСтрока.СуммаПоДаннымБухУчета = ВыборкаДетали.СуммаПоДаннымБухУчета;
						 НовСтрока.СуммаВПодсистемеНДС = ВыборкаДетали.СуммаВПодсистемеНДС;						 
					 КонецЦикла;                                                           					
				КонецЕсли; 			 
				
			КонецЕсли;
			
		КонецЦикла;		
		
		СтрокаПравила.ОбнаруженыОшибки      = ОшибкиНайдены;
		СтрокаПравила.ПроверкаВыполнена     = Истина;		
		Если ТаблицаОшибок.Количество() <> 0 Тогда
			ИсходящиеДанные.Вставить("СверкаБухИРегистровНДСТаблицаЗначений", ТаблицаОшибок);
			СтруктураЗаголовков = Новый Структура;
			СтруктураЗаголовков.Вставить("Документ", 			  "Документ");
			СтруктураЗаголовков.Вставить("Регистр", 			  "Регистр накопления");
			СтруктураЗаголовков.Вставить("СуммаПоДаннымБухУчета", "Сумма по данным бух.учета");
			СтруктураЗаголовков.Вставить("СуммаВПодсистемеНДС",   "Сумма в подсистеме НДС");			
			ИсходящиеДанные.Вставить("СверкаБухИРегистровНДССтруктураЗаголовков", СтруктураЗаголовков);
			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("Документ", "Документ");			
			ИсходящиеДанные.Вставить("СверкаБухИРегистровНДССтруктураРасшифровки", СтруктураРасшифровки);
			СтруктураШириныКолонок = Новый Структура;
			СтруктураШириныКолонок.Вставить("Счет", 30);
			СтруктураШириныКолонок.Вставить("Регистр", 40);
			СтруктураШириныКолонок.Вставить("Документ", 60);
			СтруктураШириныКолонок.Вставить("СуммаПоДаннымБухУчета", 40);
			СтруктураШириныКолонок.Вставить("СуммаВПодсистемеНДС", 40);
			ИсходящиеДанные.Вставить("СверкаБухИРегистровНДССтруктураШириныКолонок", СтруктураШириныКолонок);
			
		КонецЕсли;
		
	Иначе
		СтрокаПравила.ОбнаруженыОшибки      = Ложь;
		СтрокаПравила.ПроверкаВыполнена     = Истина;		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьПравилоСверкаБухИРегистровНДС()


Процедура ПроверитьПравилоПроверкаВыданныхСчетовФактур(СтрокаПравила)

	// Алгоритм проверки	
	
	Результат = УчетНДСИАкциза.ПроверитьСоответствиеСуммСчетовФактурВыданныхИДокументовОтгрузки(ДатаНач, КонецДатыКон, Организация,Неопределено, Истина);
		
	СтрокаПравила.ПроверкаВыполнена = Истина;
			
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Ссылка");
	ТаблицаОшибок.Колонки.Добавить("Регистратор");
	ТаблицаОшибок.Колонки.Добавить("СуммаНДС",          ТипЧисло);
	ТаблицаОшибок.Колонки.Добавить("СуммаНДСОтгрузки",  ТипЧисло);
	ТаблицаОшибок.Колонки.Добавить("СуммаБезНДС",        ТипЧисло);
	ТаблицаОшибок.Колонки.Добавить("СуммаБезНДСОтгрузки",ТипЧисло);    	
	
	Пока Выборка.Следующий() Цикл
		СуммаНДСОтклонение = Выборка.СуммаНДС - Выборка.СуммаНДСОтгрузки;
		СуммаБезНДСОтклонение = Выборка.СуммаБезНДС - Выборка.СуммаБезНДСОтгрузки;
		//проверим если есть отклонения, в случае когда у Счет-фактуры оснований больше одного
		Если СуммаНДСОтклонение = 0 И СуммаБезНДСОтклонение  = 0 Тогда 
			Продолжить
		КонецЕсли;
			
		ВыборкаПоРегистраторам = Выборка.Выбрать();
		Пока ВыборкаПоРегистраторам.Следующий() Цикл
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибки, ВыборкаПоРегистраторам);			
		КонецЦикла;
	КонецЦикла;
	
	Если Не ТаблицаОшибок.Количество() = 0 Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Истина;
		
		ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаОшибок);
		ИсточникДанных.Колонки.Ссылка.Измерение = Истина;	          				   
		ИсточникДанных.Колонки.СуммаНДС.Итог 			= "МАКСИМУМ(СуммаНДС)";
		ИсточникДанных.Колонки.СуммаНДСОтгрузки.Итог 	= "СУММА(СуммаНДСОтгрузки)";
		ИсточникДанных.Колонки.СуммаБезНДС.Итог  		= "МАКСИМУМ(СуммаБезНДС)";
		ИсточникДанных.Колонки.СуммаБезНДСОтгрузки.Итог = "СУММА(СуммаБезНДСОтгрузки)";
	
		ИсходящиеДанные.Вставить("ПроверкаВыданныхСчетовФактурИсточникДанных", ИсточникДанных);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("Ссылка", 			  "Счет-фактура");
		СтруктураЗаголовков.Вставить("Регистратор", 	  "Документ отгрузки");
		СтруктураЗаголовков.Вставить("СуммаНДС", 		  "НДС по счету-фактуре");
		СтруктураЗаголовков.Вставить("СуммаНДСОтгрузки",  "НДС по документам отгрузки");		
		
		СтруктураЗаголовков.Вставить("СуммаБезНДС", 	  		"Без НДС по счету-фактуре");
		СтруктураЗаголовков.Вставить("СуммаБезНДСОтгрузки",  	"Без НДС по документам отгрузки");		
		
		ИсходящиеДанные.Вставить("ПроверкаВыданныхСчетовФактурСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Ссылка", 		  "Ссылка");
		СтруктураРасшифровки.Вставить("СуммаНДС", 		  "Ссылка");
		СтруктураРасшифровки.Вставить("СуммаБезНДС",	  "Ссылка");
		
		СтруктураРасшифровки.Вставить("Регистратор", 	  	"Регистратор");		
		СтруктураРасшифровки.Вставить("СуммаНДСОтгрузки", 	"Регистратор");		
		СтруктураРасшифровки.Вставить("СуммаБезНДСОтгрузки","Регистратор");		
		
		ИсходящиеДанные.Вставить("ПроверкаВыданныхСчетовФактурСтруктураРасшифровки", СтруктураРасшифровки);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Ссылка", 				40);
		СтруктураШириныКолонок.Вставить("Регистратор", 			120);
		СтруктураШириныКолонок.Вставить("СуммаНДС", 		  	40);
		СтруктураШириныКолонок.Вставить("СуммаБезНДС",	  		50);		
		СтруктураШириныКолонок.Вставить("СуммаНДСОтгрузки", 	40);		
		СтруктураШириныКолонок.Вставить("СуммаБезНДСОтгрузки",	50);		
				
		ИсходящиеДанные.Вставить("ПроверкаВыданныхСчетовФактурСтруктураШириныКолонок", СтруктураШириныКолонок);	
		
		ИсходящиеДанные.Вставить("ПроверкаВыданныхСчетовФактурМакетОформления", "ПроверкаВыпискиСчетовФактур");
	Иначе
		
		СтрокаПравила.ОбнаруженыОшибки      = Ложь;	
				
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоПроверкаПолученныхСчетовФактур(СтрокаПравила)

	Результат = УчетНДСИАкциза.ПроверитьСоответствиеСуммСчетовФактурПолученныхИДокументовОтгрузки(ДатаНач, КонецДатыКон, Организация,Неопределено, Истина);
	
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Ссылка");
	ТаблицаОшибок.Колонки.Добавить("Регистратор");
	ТаблицаОшибок.Колонки.Добавить("СуммаНДС",          ТипЧисло);
	ТаблицаОшибок.Колонки.Добавить("СуммаНДСОтгрузки",  ТипЧисло);
	ТаблицаОшибок.Колонки.Добавить("СуммаБезНДС",        ТипЧисло);
	ТаблицаОшибок.Колонки.Добавить("СуммаБезНДСОтгрузки",ТипЧисло);
	
	
	Пока Выборка.Следующий() Цикл
		СуммаНДСОтклонение = Выборка.СуммаНДС - Выборка.СуммаНДСОтгрузки;
		СуммаБезНДСОтклонение = Выборка.СуммаБезНДС - Выборка.СуммаБезНДСОтгрузки;
		//проверим если есть отклонения, в случае когда у Счет-фактуры оснований больше одного
		Если СуммаНДСОтклонение = 0 И СуммаБезНДСОтклонение  = 0 Тогда 
			Продолжить
		КонецЕсли;
		
		ВыборкаПоРегистраторам = Выборка.Выбрать();
		Пока ВыборкаПоРегистраторам.Следующий() Цикл
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибки, ВыборкаПоРегистраторам);			
		КонецЦикла;
	КонецЦикла;
	
	Если Не ТаблицаОшибок.Количество() = 0 Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Истина;
		
		ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаОшибок);
		ИсточникДанных.Колонки.Ссылка.Измерение = Истина;	          				   
		ИсточникДанных.Колонки.СуммаНДС.Итог 			= "МАКСИМУМ(СуммаНДС)";
		ИсточникДанных.Колонки.СуммаНДСОтгрузки.Итог 	= "СУММА(СуммаНДСОтгрузки)";
		ИсточникДанных.Колонки.СуммаБезНДС.Итог  		= "МАКСИМУМ(СуммаБезНДС)";
		ИсточникДанных.Колонки.СуммаБезНДСОтгрузки.Итог = "СУММА(СуммаБезНДСОтгрузки)";

	// Добавляем в ИсходящиеДанные данные, необходимые для формирования детального отчета по ошибкам
	// или данные для последующего использования другими проверками

		ИсходящиеДанные.Вставить("ПроверкаПолученныхСчетовФактурИсточникДанных", ИсточникДанных);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("Ссылка", 			  "Счет-фактура");
		СтруктураЗаголовков.Вставить("Регистратор", 	  "Документ отгрузки");
		СтруктураЗаголовков.Вставить("СуммаНДС", 		  "НДС по счету-фактуре");
		СтруктураЗаголовков.Вставить("СуммаНДСОтгрузки",  "НДС по документам отгрузки");		
		
		СтруктураЗаголовков.Вставить("СуммаБезНДС", 	  		"Без НДС по счету-фактуре");
		СтруктураЗаголовков.Вставить("СуммаБезНДСОтгрузки",  	"Без НДС по документам отгрузки");		
		
		ИсходящиеДанные.Вставить("ПроверкаПолученныхСчетовФактурСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Ссылка", 		  "Ссылка");
		СтруктураРасшифровки.Вставить("СуммаНДС", 		  "Ссылка");
		СтруктураРасшифровки.Вставить("СуммаБезНДС",	  "Ссылка");
		
		СтруктураРасшифровки.Вставить("Регистратор", 	  	"Регистратор");		
		СтруктураРасшифровки.Вставить("СуммаНДСОтгрузки", 	"Регистратор");		
		СтруктураРасшифровки.Вставить("СуммаБезНДСОтгрузки","Регистратор");		
		
		ИсходящиеДанные.Вставить("ПроверкаПолученныхСчетовФактурСтруктураРасшифровки", СтруктураРасшифровки);
		
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Ссылка", 				40);
		СтруктураШириныКолонок.Вставить("Регистратор", 			120);
		СтруктураШириныКолонок.Вставить("СуммаНДС", 		  	40);
		СтруктураШириныКолонок.Вставить("СуммаБезНДС",	  		50);		
		СтруктураШириныКолонок.Вставить("СуммаНДСОтгрузки", 	40);		
		СтруктураШириныКолонок.Вставить("СуммаБезНДСОтгрузки",	50);		
				
		ИсходящиеДанные.Вставить("ПроверкаПолученныхСчетовФактурСтруктураШириныКолонок", СтруктураШириныКолонок);	
		
		ИсходящиеДанные.Вставить("ПроверкаПолученныхСчетовФактурМакетОформления", "ПроверкаВыпискиСчетовФактур");
	Иначе
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
	КонецЕсли;
	
	
КонецПроцедуры

// Для зачета по НДС поставщик должен являться плательщиком НДС
// Проверим его регистрационные данные
Процедура ПроверитьПравилоПроверкаРеквизитовПоставщиковПоНДС(СтрокаПравила)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Поставщики.Контрагент КАК Контрагент,
	               |	Поставщики.Регистратор КАК Регистратор,	               
	               |	Контрагенты.СерияСвидетельстваПоНДС,
	               |	Контрагенты.НомерСвидетельстваПоНДС,
	               |	Контрагенты.ДатаСвидетельстваПоНДС,				   
	               |	Поставщики.СуммаБезНДСОборот КАК СуммаБезНДСОборот,
				   |	Поставщики.УплаченныйНДСОборот КАК УплаченныйНДСОборот,
	               |	Поставщики.СуммаНДСОборот КАК СуммаНДСОборот
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		НДСКВозмещениюОбороты.Контрагент КАК Контрагент,
	               |		НДСКВозмещениюОбороты.Регистратор КАК Регистратор,
	               |		НДСКВозмещениюОбороты.УплаченныйНДСОборот КАК УплаченныйНДСОборот,
	               |		НДСКВозмещениюОбороты.СуммаНДСОборот КАК СуммаНДСОборот,
	               |		НДСКВозмещениюОбороты.СуммаБезНДСОборот КАК СуммаБезНДСОборот
	               |	ИЗ
	               |		РегистрНакопления.НДСКВозмещению.Обороты(&ДатаНач, &ДатаКон, Регистратор, Налогоплательщик = &Организация) КАК НДСКВозмещениюОбороты
	               |	ГДЕ
	               |		(НЕ НДСКВозмещениюОбороты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	               |		И НДСКВозмещениюОбороты.СуммаНДСОборот <> 0
	               |		И (НДСКВозмещениюОбороты.Контрагент.ДатаСвидетельстваПоНДС = ДАТАВРЕМЯ(1, 1, 1)
	               |				ИЛИ НДСКВозмещениюОбороты.Контрагент.НомерСвидетельстваПоНДС = """"
	               |				ИЛИ НДСКВозмещениюОбороты.Контрагент.СерияСвидетельстваПоНДС = """")
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		КорректировкаНДСКВозмещениюОбороты.Контрагент,
	               |		КорректировкаНДСКВозмещениюОбороты.Регистратор,
	               |		КорректировкаНДСКВозмещениюОбороты.УплаченныйНДСОборот,
	               |		КорректировкаНДСКВозмещениюОбороты.СуммаНДСОборот,
	               |		КорректировкаНДСКВозмещениюОбороты.СуммаКорректировкиОборотаОборот
	               |	ИЗ
	               |		РегистрНакопления.КорректировкаНДСКВозмещению.Обороты(&ДатаНач, &ДатаКон, Регистратор, Налогоплательщик = &Организация) КАК КорректировкаНДСКВозмещениюОбороты
	               |	ГДЕ
	               |		(НЕ КорректировкаНДСКВозмещениюОбороты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	               |		И КорректировкаНДСКВозмещениюОбороты.СуммаНДСОборот <> 0
	               |		И (КорректировкаНДСКВозмещениюОбороты.Контрагент.ДатаСвидетельстваПоНДС = ДАТАВРЕМЯ(1, 1, 1)
	               |				ИЛИ КорректировкаНДСКВозмещениюОбороты.Контрагент.НомерСвидетельстваПоНДС = """"
	               |				ИЛИ КорректировкаНДСКВозмещениюОбороты.Контрагент.СерияСвидетельстваПоНДС = """")) КАК Поставщики
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО Поставщики.Контрагент = Контрагенты.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Контрагент,
	               |	Регистратор";   
				   
	Запрос.УстановитьПараметр("ДатаНач",	 ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",	 КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		ТаблицаОшибок = Результат.Выгрузить();
		
		
		// обработаем результаты проверки
		Если ТаблицаОшибок.Количество() = 0 Тогда
			СтрокаПравила.ОбнаруженыОшибки      = Ложь;
			СтрокаПравила.ПроверкаВыполнена     = Истина;
		Иначе
			СтрокаПравила.ОбнаруженыОшибки      = Истина;
			СтрокаПравила.ПроверкаВыполнена     = Истина;
			ИсходящиеДанные.Вставить("ПроверкаРеквизитовПоставщиковПоНДСТаблицаЗначений", ТаблицаОшибок);
			
			СтруктураЗаголовков = Новый Структура;
			СтруктураЗаголовков.Вставить("Регистратор", 			"Документ");
			СтруктураЗаголовков.Вставить("Контрагент", 				"Поставщик");			
			СтруктураЗаголовков.Вставить("СерияСвидетельстваПоНДС", "Серия");
			СтруктураЗаголовков.Вставить("НомерСвидетельстваПоНДС", "Номер");
			СтруктураЗаголовков.Вставить("ДатаСвидетельстваПоНДС", 	"Дата выдачи");
			
			СтруктураЗаголовков.Вставить("УплаченныйНДСОборот", 	"Уплаченный НДС");	   
			СтруктураЗаголовков.Вставить("СуммаНДСОборот", 			"НДС, принятый к зачету");
			СтруктураЗаголовков.Вставить("СуммаБезНДСОборот", 		"Сумма приобретения без НДС");				
			ИсходящиеДанные.Вставить("ПроверкаРеквизитовПоставщиковПоНДССтруктураЗаголовков", СтруктураЗаголовков);
			
			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("Регистратор", 		 		"Регистратор");
			СтруктураРасшифровки.Вставить("Контрагент", 			 	"Контрагент");			
			СтруктураРасшифровки.Вставить("СерияСвидетельстваПоНДС", 	"Контрагент");
			СтруктураРасшифровки.Вставить("НомерСвидетельстваПоНДС", 	"Контрагент");
			СтруктураРасшифровки.Вставить("ДатаСвидетельстваПоНДС", 	"Контрагент");
			
			СтруктураРасшифровки.Вставить("УплаченныйНДСОборот", 		"Регистратор");
			СтруктураРасшифровки.Вставить("СуммаБезНДСОборот", 	 		"Регистратор");
			СтруктураРасшифровки.Вставить("СуммаНДСОборот", 	 		"Регистратор");				
			
			ИсходящиеДанные.Вставить("ПроверкаРеквизитовПоставщиковПоНДССтруктураРасшифровки", СтруктураРасшифровки);
			
			СтруктураШириныКолонок = Новый Структура;
			СтруктураШириныКолонок.Вставить("Регистратор", 40);
			СтруктураШириныКолонок.Вставить("Контрагент",  30);
			
			СтруктураШириныКолонок.Вставить("СерияСвидетельстваПоНДС", 10);
			СтруктураШириныКолонок.Вставить("НомерСвидетельстваПоНДС", 10);
			СтруктураШириныКолонок.Вставить("ДатаСвидетельстваПоНДС",  15);
			
			СтруктураШириныКолонок.Вставить("УплаченныйНДСОборот", 	20);
			СтруктураШириныКолонок.Вставить("СуммаБезНДСОборот", 	20);
			СтруктураШириныКолонок.Вставить("СуммаНДСОборот", 	 	20);							
			
			ИсходящиеДанные.Вставить("ПроверкаРеквизитовПоставщиковПоНДССтруктураШириныКолонок", СтруктураШириныКолонок);
			
			СтруктураФорматаПолей = Новый Структура;			
			СтруктураФорматаПолей.Вставить("ДатаСвидетельстваПоНДС", "ДФ = дд.ММ.гггг");
			ИсходящиеДанные.Вставить("ПроверкаРеквизитовПоставщиковПоНДССтруктураФорматаПолей", СтруктураФорматаПолей);
		
		КонецЕсли;
		
	Иначе
		
		СтрокаПравила.ОбнаруженыОшибки      = Ложь;
		СтрокаПравила.ПроверкаВыполнена     = Истина;
		СтрокаПравила.КомментарийРезультата = "Нарушений не обнаружено.";
		
	КонецЕсли;

КонецПроцедуры

// Регламентные операции

Процедура ПроверитьПравилоРеформацияБаланса(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗакрытиеМесяца.Ссылка КАК Документ,
	               |	КОНЕЦПЕРИОДА(ЗакрытиеМесяца.Дата, МЕСЯЦ) КАК Дата
	               |ИЗ
	               |	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
	               |ГДЕ
	               |	ЗакрытиеМесяца.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ЗакрытиеМесяца.РеформацияБалансаБУ
	               |	И ЗакрытиеМесяца.Проведен
	               |	И (НЕ ЗакрытиеМесяца.ПометкаУдаления)
	               |	И ЗакрытиеМесяца.Организация = &Организация
				   |	И ЗакрытиеМесяца.СтруктурноеПодразделение = &СтруктурноеПодразделение";   
				   
	Запрос.УстановитьПараметр("ДатаНач"					, ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон"					, КонецДатыКон);
	Запрос.УстановитьПараметр("Организация"				, Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		// Проверим были ли введены документы задним числом что
		//образовало остатки на доходных или расходных счетах
		ТаблицаОшибок = Новый ТаблицаЗначений;
		ТаблицаОшибок.Колонки.Добавить("Документ");
		ТаблицаОшибок.Колонки.Добавить("Дата");
		ТаблицаОшибок.Колонки.Добавить("ОстатокНаДоходныхСчетах");
		ТаблицаОшибок.Колонки.Добавить("ОстатокНаРасходныхСчетах");
		
		ЗапросОстатки = Новый Запрос;
		ЗапросОстатки.Текст = "ВЫБРАТЬ
		                      |	ТиповойОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
		                      |	ТиповойОстаткиИОбороты.Период КАК Период,
		                      |	ВЫБОР
		                      |		КОГДА ТиповойОстаткиИОбороты.Счет В ИЕРАРХИИ (&СчетаДоходов)
		                      |			ТОГДА ""6000""
		                      |		ИНАЧЕ ""7000""
		                      |	КОНЕЦ КАК Счет
		                      |ИЗ
		                      |	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
		                      |			&ДатаНач,
		                      |			&ДатаКон,
		                      |			Месяц,
		                      |			,
		                      |			Счет В ИЕРАРХИИ (&СчетаДоходов)
		                      |				ИЛИ Счет В ИЕРАРХИИ (&СчетаРасходов),
		                      |			,
		                      |			Организация = &Организация
		                      |				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстаткиИОбороты
		                      |ИТОГИ
		                      |	СУММА(СуммаКонечныйОстаток)
		                      |ПО
		                      |	Период ПЕРИОДАМИ(МЕСЯЦ, &ДатаНач, &ДатаКон),
		                      |	Счет";
					   
		ЗапросОстатки.УстановитьПараметр("ДатаНач"				   , ДатаНач);
		ЗапросОстатки.УстановитьПараметр("ДатаКон"				   , КонецДатыКон);
		ЗапросОстатки.УстановитьПараметр("Организация"			   , Организация);
		ЗапросОстатки.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
		
		СчетаДоходов = Новый СписокЗначений;
		СчетаДоходов.Добавить(ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_);                 // 6000
		СчетаДоходов.Добавить(ПланыСчетов.Типовой.ДоходыОтФинансирования);                                    // 6100
		СчетаДоходов.Добавить(ПланыСчетов.Типовой.ПрочиеДоходы_);                                             // 6200
		СчетаДоходов.Добавить(ПланыСчетов.Типовой.ДоходыСвязанныеСПрекращаемойДеятельностью_);                // 6300
		СчетаДоходов.Добавить(ПланыСчетов.Типовой.ДоляПрибылиОрганизацийУчитываемыхПоМетодуДолевогоУчастия);  // 6400
		ЗапросОстатки.УстановитьПараметр("СчетаДоходов", СчетаДоходов);
		СчетаРасходов = Новый СписокЗначений;
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг_);       // 7000
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.РасходыПоРеализацииПродукцииИОказаниюУслуг_);               // 7100
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.АдминистративныеРасходы_);                 				   // 7200
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.РасходыНаФинансирование);                 				   // 7300
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.ПрочиеРасходы_);                 						   // 7400
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.РасходыСвязанныеСПрекращаемойДеятельностью_);               // 7500
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.ДоляВУбыткеОрганизацийУчитываемыхМетодомДолевогоУчастия);   // 7600
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу_);                 // 7700
		ЗапросОстатки.УстановитьПараметр("СчетаРасходов", СчетаРасходов);

		РезультатЗапросаОстатки = ЗапросОстатки.Выполнить();
		
		ВыборкаЗапросаОстатки = РезультатЗапросаОстатки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		ВыборкаДокументов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДокументов.Следующий() Цикл
			
			Документ   = ВыборкаДокументов.Документ;
			ДатаКонМес = ВыборкаДокументов.Дата;
			
			ВыборкаЗапросаОстатки.Сбросить();
			Пока ВыборкаЗапросаОстатки.Следующий() Цикл
				
				Если НачалоМесяца(ДатаКонМес) = ВыборкаЗапросаОстатки.Период Тогда
					
					ВыборкаПериода = ВыборкаЗапросаОстатки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					ОстатокРасх = 0;
					ОстатокДох = 0;
					Пока ВыборкаПериода.Следующий() Цикл
						Если ВыборкаПериода.Счет = "7000" И НЕ (ВыборкаПериода.СуммаКонечныйОстаток =0 ИЛИ  ВыборкаПериода.СуммаКонечныйОстаток = NULL) Тогда
							//есть остатки на расходных счетах
							ОстатокРасх = ВыборкаПериода.СуммаКонечныйОстаток;
						ИначеЕсли ВыборкаПериода.Счет = "6000" И НЕ (ВыборкаПериода.СуммаКонечныйОстаток =0 ИЛИ  ВыборкаПериода.СуммаКонечныйОстаток = NULL) Тогда
							ОстатокДох = ВыборкаПериода.СуммаКонечныйОстаток;
						КонецЕсли;					
					КонецЦикла;
					Если ОстатокРасх <> 0 ИЛИ ОстатокДох <> 0 Тогда
						НовСтрока = ТаблицаОшибок.Добавить();
						НовСтрока.Документ                 = Документ; 
						НовСтрока.Дата                     = ДатаКонМес; 
						НовСтрока.ОстатокНаДоходныхСчетах  = ОстатокДох; 
						НовСтрока.ОстатокНаРасходныхСчетах = ОстатокРасх; 
					КонецЕсли;
					
					Прервать;
				КонецЕсли;				
				
			КонецЦикла;      			
			
		КонецЦикла;         		 
		
		// обработаем результаты проверки
		Если ТаблицаОшибок.Количество() = 0 Тогда
			СтрокаПравила.ОбнаруженыОшибки      = Ложь;
			СтрокаПравила.ПроверкаВыполнена     = Истина;
		Иначе
			СтрокаПравила.ОбнаруженыОшибки      = Истина;
			СтрокаПравила.ПроверкаВыполнена     = Истина;
			ИсходящиеДанные.Вставить("РеформацияБалансаТаблицаЗначений", ТаблицаОшибок);
			СтруктураЗаголовков = Новый Структура;
			СтруктураЗаголовков.Вставить("Документ", "Документ закрытия месяца");
			СтруктураЗаголовков.Вставить("Дата", "Дата конца месяца реформации баланса");
			СтруктураЗаголовков.Вставить("ОстатокНаДоходныхСчетах",  "Остаток на доходных счетах");
			СтруктураЗаголовков.Вставить("ОстатокНаРасходныхСчетах", "Остаток на расходных счетах");			
			ИсходящиеДанные.Вставить("РеформацияБалансаСтруктураЗаголовков", СтруктураЗаголовков);
			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("Документ", "Документ");
			ИсходящиеДанные.Вставить("РеформацияБалансаСтруктураРасшифровки", СтруктураРасшифровки);
		КонецЕсли;
		
	Иначе
		
		СтрокаПравила.ОбнаруженыОшибки      = Ложь;
		СтрокаПравила.ПроверкаВыполнена     = Истина;
		СтрокаПравила.КомментарийРезультата = "Реформация баланса не была произведена в период проверки.";
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьПравилоРеформацияБаланса()

Процедура ПроверитьПравилоКорректностьПроводки(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТиповойОбороты.Регистратор,
	               |	ТиповойОбороты.СчетДт,
	               |	ТиповойОбороты.СчетКт,
	               |	ТиповойОбороты.СуммаОборот КАК Сумма,
	               |	ВЫБОР
	               |		КОГДА ТиповойОбороты.СчетДт.ЗапретитьИспользоватьВПроводках
	               |				И ТиповойОбороты.СчетКт.ЗапретитьИспользоватьВПроводках
	               |			ТОГДА ""Проводка""
	               |		КОГДА ТиповойОбороты.СчетДт.ЗапретитьИспользоватьВПроводках
	               |			ТОГДА ТиповойОбороты.СчетДт
	               |		ИНАЧЕ ТиповойОбороты.СчетКт
	               |	КОНЕЦ КАК ЗапретныйСчет
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.ОборотыДтКт(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			Регистратор,
	               |			,
	               |			,
	               |			,
	               |			,
	               |			Организация = &Организация
	               |				И СтруктурноеПодразделениеДт = &СтруктурноеПодразделениеДт
	               |				И СтруктурноеПодразделениеКт = &СтруктурноеПодразделениеКт) КАК ТиповойОбороты
	               |ГДЕ
	               |	(ТиповойОбороты.СчетДт.ЗапретитьИспользоватьВПроводках
	               |			ИЛИ ТиповойОбороты.СчетКт.ЗапретитьИспользоватьВПроводках)";   
				   
	Запрос.УстановитьПараметр("ДатаНач"					  , ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон"					  , КонецДатыКон);
	Запрос.УстановитьПараметр("Организация"				  , Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделениеДт", СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("СтруктурноеПодразделениеКт", СтруктурноеПодразделение);
	
	Результат = Запрос.Выполнить();

	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Регистратор");
	ТаблицаОшибок.Колонки.Добавить("СчетДт");
	ТаблицаОшибок.Колонки.Добавить("СчетКт");
	ТаблицаОшибок.Колонки.Добавить("Сумма");
	ТаблицаОшибок.Колонки.Добавить("ЗапретныйСчет");
	
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибки, Выборка);
			Если Выборка.ЗапретныйСчет = "Проводка" Тогда
				СтрокаОшибки.ЗапретныйСчет = "" + Выборка.СчетДт + ", " + Выборка.СчетКт;
			КонецЕсли;  			
		КонецЦикла;
		
		ИсходящиеДанные.Вставить("КорректностьПроводкиТаблицаЗначений", ТаблицаОшибок);		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("Регистратор", "Документ");
		СтруктураЗаголовков.Вставить("СчетДт",       "Счет Дт");
		СтруктураЗаголовков.Вставить("СчетКт",      "Счет Кт");
		СтруктураЗаголовков.Вставить("Сумма",   "Сумма проводки");
		СтруктураЗаголовков.Вставить("ЗапретныйСчет", "Счет, который запрещено использовать в проводках");
		ИсходящиеДанные.Вставить("КорректностьПроводкиСтруктураЗаголовков", СтруктураЗаголовков);
		
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Регистратор" ,    60);
		СтруктураШириныКолонок.Вставить("СчетДт"      ,    30);
		СтруктураШириныКолонок.Вставить("СчетКт"      ,    30);
		СтруктураШириныКолонок.Вставить("Сумма"       ,    30);
		СтруктураШириныКолонок.Вставить("ЗапретныйСчет"  , 40);
		ИсходящиеДанные.Вставить("КорректностьПроводкиСтруктураШириныКолонок", СтруктураШириныКолонок);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Регистратор", "Регистратор");
		ИсходящиеДанные.Вставить("КорректностьПроводкиСтруктураРасшифровки", СтруктураРасшифровки);

   КонецЕсли;
	
КонецПроцедуры // ПроверитьПравилоКорректностьПроводки()

//ОС и НМА

Процедура ПроверитьПравилоПринятиеКУчетуОС(СтрокаПравила)
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	               |	МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
	               |ПОМЕСТИТЬ ТекДатаСостояния
	               |ИЗ
	               |	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	               |ГДЕ
	               |	СостоянияОСОрганизаций.ДатаСостояния <= &ДатаКон
	               |	И СостоянияОСОрганизаций.Организация = &Организация
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СостоянияОСОрганизаций.ОсновноеСредство
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство,
	               |	ДатаСостояния
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	               |	ТекДатаСостояния.ДатаСостояния КАК ДатаСостояния,
	               |	МАКСИМУМ(СостоянияОСОрганизаций.Регистратор) КАК Регистратор
	               |ПОМЕСТИТЬ ТекРегистратор
	               |ИЗ
	               |	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекДатаСостояния КАК ТекДатаСостояния
	               |		ПО СостоянияОСОрганизаций.ОсновноеСредство = ТекДатаСостояния.ОсновноеСредство
	               |			И СостоянияОСОрганизаций.ДатаСостояния = ТекДатаСостояния.ДатаСостояния
	               |ГДЕ
	               |	СостоянияОСОрганизаций.Организация = &Организация
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СостоянияОСОрганизаций.ОсновноеСредство,
	               |	ТекДатаСостояния.ДатаСостояния
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство,
	               |	ДатаСостояния
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СостояниеОС.ОсновноеСредство КАК ОсновноеСредство,
	               |	СостояниеОС.Состояние КАК Состояние,
	               |	ТекРегистратор.ДатаСостояния КАК ДатаСостояния,
	               |	ТекРегистратор.Регистратор КАК Регистратор
	               |ПОМЕСТИТЬ ТекущееСостояние
	               |ИЗ
	               |	РегистрСведений.СостоянияОСОрганизаций КАК СостояниеОС
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекРегистратор КАК ТекРегистратор
	               |		ПО СостояниеОС.ОсновноеСредство = ТекРегистратор.ОсновноеСредство
	               |			И СостояниеОС.Регистратор = ТекРегистратор.Регистратор
	               |			И СостояниеОС.ДатаСостояния = ТекРегистратор.ДатаСостояния
	               |ГДЕ
	               |	СостояниеОС.Организация = &Организация
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТиповойОстатки.Субконто1 КАК ОС,
	               |	ТиповойОстатки.СуммаОстатокДт КАК СтоимостьБУ,
	               |	ВЫБОР
	               |		КОГДА ТекущееСостояние.Состояние ЕСТЬ NULL 
	               |			ТОГДА ""Не определено""
	               |		ИНАЧЕ ТекущееСостояние.Состояние
	               |	КОНЕЦ КАК Состояние,
	               |	ТекущееСостояние.Регистратор
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(&КонГраница, Счет В (&СчетаУчетаОС), &ВидСубконто, Организация = &Организация) КАК ТиповойОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТекущееСостояние КАК ТекущееСостояние
	               |		ПО ТиповойОстатки.Субконто1 = ТекущееСостояние.ОсновноеСредство
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ТиповойОстатки.СуммаОстатокДт <> 0
	               |					И ЕСТЬNULL(ТекущееСостояние.Состояние, """") <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ОС";

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаКон"	   , КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("КонГраница" , Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	
	
	СчетаУчетаОС = Новый СписокЗначений;
	СчетаУчетаОС.Добавить(ПланыСчетов.Типовой.ОсновныеСредства);
	СчетаУчетаОС.Добавить(ПланыСчетов.Типовой.ИнвестицииВНедвижимость);
	СчетаУчетаОС.Добавить(ПланыСчетов.Типовой.АрендованныеОсновныеСредства);
	
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Запрос.УстановитьПараметр("СчетаУчетаОС", СчетаУчетаОС);
	
	Результат = Запрос.Выполнить();
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;

		
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ПринятиеКУчетуОСРезультатЗапроса", Результат);		
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОС", 			"Основное средство");
		СтруктураЗаголовков.Вставить("СтоимостьБУ", "Стоимость");
		СтруктураЗаголовков.Вставить("Состояние",   "Текущее состояние");
		СтруктураЗаголовков.Вставить("Регистратор", "Регистратор состояния");
		
		ИсходящиеДанные.Вставить("ПринятиеКУчетуОССтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОС", 		 "ОС");
		СтруктураРасшифровки.Вставить("СтоимостьБУ", "ОС");
		СтруктураРасшифровки.Вставить("Состояние", 	 "Регистратор");
		СтруктураРасшифровки.Вставить("Регистратор", "Регистратор");
		
		ИсходящиеДанные.Вставить("ПринятиеКУчетуОССтруктураРасшифровки", СтруктураРасшифровки);

	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоСнятиеСУчетаОС(СтрокаПравила)
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	               |	МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
	               |ПОМЕСТИТЬ ТекДатаСостояния
	               |ИЗ
	               |	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	               |ГДЕ
	               |	СостоянияОСОрганизаций.ДатаСостояния <= &ДатаКон
	               |	И СостоянияОСОрганизаций.Организация = &Организация
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СостоянияОСОрганизаций.ОсновноеСредство
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство,
	               |	ДатаСостояния
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	               |	ТекДатаСостояния.ДатаСостояния КАК ДатаСостояния,
	               |	МАКСИМУМ(СостоянияОСОрганизаций.Регистратор) КАК Регистратор
	               |ПОМЕСТИТЬ ТекРегистратор
	               |ИЗ
	               |	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекДатаСостояния КАК ТекДатаСостояния
	               |		ПО СостоянияОСОрганизаций.ОсновноеСредство = ТекДатаСостояния.ОсновноеСредство
	               |			И СостоянияОСОрганизаций.ДатаСостояния = ТекДатаСостояния.ДатаСостояния
	               |ГДЕ
	               |	СостоянияОСОрганизаций.Организация = &Организация
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СостоянияОСОрганизаций.ОсновноеСредство,
	               |	ТекДатаСостояния.ДатаСостояния
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство,
	               |	ДатаСостояния
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СостояниеОС.ОсновноеСредство КАК ОсновноеСредство,
	               |	СостояниеОС.Состояние КАК Состояние,
	               |	ТекРегистратор.ДатаСостояния КАК ДатаСостояния,
	               |	ТекРегистратор.Регистратор КАК Регистратор
	               |ПОМЕСТИТЬ ТекущееСостояние
	               |ИЗ
	               |	РегистрСведений.СостоянияОСОрганизаций КАК СостояниеОС
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекРегистратор КАК ТекРегистратор
	               |		ПО СостояниеОС.ОсновноеСредство = ТекРегистратор.ОсновноеСредство
	               |			И СостояниеОС.Регистратор = ТекРегистратор.Регистратор
	               |			И СостояниеОС.ДатаСостояния = ТекРегистратор.ДатаСостояния
	               |ГДЕ
	               |	СостояниеОС.Организация = &Организация
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТекущееСостояние.ОсновноеСредство КАК ОС,
	               |	ТекущееСостояние.Состояние,
	               |	ТекущееСостояние.Регистратор
	               |ИЗ
	               |	ТекущееСостояние КАК ТекущееСостояние
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&КонГраница, Счет В (&СчетаУчетаОС), &ВидСубконто, Организация = &Организация) КАК ТиповойОстатки
	               |		ПО ТекущееСостояние.ОсновноеСредство = ТиповойОстатки.Субконто1
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ТекущееСостояние.Состояние <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
	               |					И ТекущееСостояние.Состояние <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.Поступило)
	               |					И ЕСТЬNULL(ТиповойОстатки.СуммаОстатокДт, 0) = 0
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ОС";

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаКон"	   , КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("КонГраница" , Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
		
	СчетаУчетаОС = Новый СписокЗначений;
	СчетаУчетаОС.Добавить(ПланыСчетов.Типовой.ОсновныеСредства);
	СчетаУчетаОС.Добавить(ПланыСчетов.Типовой.ИнвестицииВНедвижимость);
	СчетаУчетаОС.Добавить(ПланыСчетов.Типовой.АрендованныеОсновныеСредства);
	
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Запрос.УстановитьПараметр("СчетаУчетаОС", СчетаУчетаОС);
	
	Результат = Запрос.Выполнить();
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;

	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("СнятиеСУчетаОСРезультатЗапроса", Результат);		
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОС",			"Основное средство");
		СтруктураЗаголовков.Вставить("Состояние",   "Текущее состояние");
		СтруктураЗаголовков.Вставить("Регистратор", "Регистратор состояния");
		
		ИсходящиеДанные.Вставить("СнятиеСУчетаОССтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОС",			"ОС");
		СтруктураРасшифровки.Вставить("Состояние", 	"Регистратор");
		СтруктураРасшифровки.Вставить("Регистратор","Регистратор");
		
		ИсходящиеДанные.Вставить("СнятиеСУчетаОССтруктураРасшифровки", СтруктураРасшифровки);

	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоСоответствиеМестонахожденияНаСчетахИРегистрах(СтрокаПравила)
	
	ВедетсяАналитУчетОсПоПодразделениям = УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоПодразделениям(ДатаКон);
	ВедетсяАналитУчетОсПоМОЛ = УправлениеВнеоборотнымиАктивами.ВедетсяАналитическийУчетОСПоМОЛ(ДатаКон);
	
	Если Не (ВедетсяАналитУчетОсПоМОЛ Или ВедетсяАналитУчетОсПоПодразделениям) Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		Возврат;
	КонецЕсли;	
		
	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	               |ПОМЕСТИТЬ ВТ_ОС_СнятыеСУчета
	               |ИЗ
	               |	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацииСрезПоследних
	               |ГДЕ
	               |	СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &Дата
	               |	И СостоянияОСОрганизацииСрезПоследних.Организация = &Организация
	               |	И СостоянияОСОрганизацииСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОС,
	               |	СчетаУчетаОССрезПоследних.СчетУчетаБУ,
	               |	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ,
	               |	ВЫБОР
	               |		КОГДА ОС_СнятыеСУчета.ОсновноеСредство ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК СнятоСУчета
	               |ПОМЕСТИТЬ СписокОС
	               |ИЗ
	               |	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Дата, Организация = &Организация) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних( , Организация = &Организация) КАК СчетаУчетаОССрезПоследних
	               |		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СчетаУчетаОССрезПоследних.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОС_СнятыеСУчета КАК ОС_СнятыеСУчета
	               |		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокОС.ОС КАК ОС,
	               |	СписокОС.СчетУчетаБУ КАК СчетУчетаБУ,
				   |	ТиповойОстатки.Субконто2 " + ?(ВедетсяАналитУчетОсПоПодразделениям, " КАК ПодразделениеСтоимость ", " КАК МОЛСтоимость ") + 
	               ?(ВедетсяАналитУчетОсПоПодразделениям И ВедетсяАналитУчетОсПоМОЛ, ",
				   |	ТиповойОстатки.Субконто3 КАК МОЛСтоимость ", "") + "
	               |ПОМЕСТИТЬ ОстаткиСтоимостьБУ
	               |ИЗ
	               |	СписокОС КАК СписокОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&КонГраница, , &ВидыСубконто, Организация = &Организация) КАК ТиповойОстатки
	               |		ПО СписокОС.ОС = ТиповойОстатки.Субконто1
	               |			И СписокОС.СчетУчетаБУ = ТиповойОстатки.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокОС.ОС,
	               |	СписокОС.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизацииБУ,
				   |	ТиповойОстатки.Субконто2 " + ?(ВедетсяАналитУчетОсПоПодразделениям, " КАК ПодразделениеАмортизация ", " КАК МОЛАмортизация ") + 
	               ?(ВедетсяАналитУчетОсПоПодразделениям И ВедетсяАналитУчетОсПоМОЛ, ",
				   |	ТиповойОстатки.Субконто3 КАК МОЛАмортизация ", "") + "
				   |ПОМЕСТИТЬ ОстаткиАмортизацияБУ
	               |ИЗ
	               |	СписокОС КАК СписокОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&КонГраница, , &ВидыСубконто, Организация = &Организация) КАК ТиповойОстатки
	               |		ПО СписокОС.ОС = ТиповойОстатки.Субконто1
	               |			И СписокОС.СчетНачисленияАмортизацииБУ = ТиповойОстатки.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокОС.ОС КАК ОС,
	               |	ОстаткиСтоимостьБУ.СчетУчетаБУ КАК СчетУчетаБУ, 
				   |	ОстаткиАмортизацияБУ.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизацииБУ " + 
	               ?(ВедетсяАналитУчетОсПоПодразделениям, ",
				   |	ОстаткиСтоимостьБУ.ПодразделениеСтоимость КАК ПодразделениеСтоимость,
				   |	ОстаткиАмортизацияБУ.ПодразделениеАмортизация КАК ПодразделениеАмортизация,
				   |	МестонахождениеОС.Местонахождение КАК ПодразделениеМестонахождение ", "") + 
				   ?(ВедетсяАналитУчетОсПоМОЛ, ",
	               |	ОстаткиСтоимостьБУ.МОЛСтоимость КАК МОЛСтоимость,
	               |	ОстаткиАмортизацияБУ.МОЛАмортизация КАК МОЛАмортизация,
				   |	МестонахождениеОС.МОЛ КАК МОЛМестонахождение ", "") + "
	               |ИЗ
	               |	СписокОС КАК СписокОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиСтоимостьБУ КАК ОстаткиСтоимостьБУ
	               |		ПО СписокОС.ОС = ОстаткиСтоимостьБУ.ОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиАмортизацияБУ КАК ОстаткиАмортизацияБУ
	               |		ПО СписокОС.ОС = ОстаткиАмортизацияБУ.ОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, Организация = &Организация) КАК МестонахождениеОС
	               |		ПО СписокОС.ОС = МестонахождениеОС.ОсновноеСредство
	               |ГДЕ
	               |	СписокОС.СнятоСУчета = ЛОЖЬ И " + 
				   ?(ВедетсяАналитУчетОсПоПодразделениям, "
				   |	(ОстаткиСтоимостьБУ.ПодразделениеСтоимость <> МестонахождениеОС.Местонахождение
	               |			ИЛИ ОстаткиАмортизацияБУ.ПодразделениеАмортизация <> МестонахождениеОС.Местонахождение", "") +
				   ?(ВедетсяАналитУчетОсПоПодразделениям И Не ВедетсяАналитУчетОсПоМОЛ, " ) ", "") + 
				   ?(ВедетсяАналитУчетОсПоПодразделениям И ВедетсяАналитУчетОсПоМОЛ, " ИЛИ ", "") + 
				   ?(Не ВедетсяАналитУчетОсПоПодразделениям И ВедетсяАналитУчетОсПоМОЛ, " ( ", "") + 
				   ?(ВедетсяАналитУчетОсПоМОЛ, "
	               |	ОстаткиСтоимостьБУ.МОЛСтоимость <> МестонахождениеОС.МОЛ
	               |			ИЛИ ОстаткиАмортизацияБУ.МОЛАмортизация <> МестонахождениеОС.МОЛ)", "");
				   
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата"	   , КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("КонГраница" , Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	
	
	МассивВидыСубконто = Новый Массив;
	МассивВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Если ВедетсяАналитУчетОсПоПодразделениям Тогда
		МассивВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
	КонецЕсли;
	
	Если ВедетсяАналитУчетОсПоМОЛ Тогда
		МассивВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ВидыСубконто", МассивВидыСубконто);
		
	Результат = Запрос.Выполнить();
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;

	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("СоответствиеМестонахожденияНаСчетахИРегистрахРезультатЗапроса", Результат);		
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОС",							 "Основное средство");
		СтруктураЗаголовков.Вставить("СчетУчетаБУ",					 "Счет учета ОС");
		СтруктураЗаголовков.Вставить("ПодразделениеСтоимость",		 "Подразделение (стоим.)");
		СтруктураЗаголовков.Вставить("МОЛСтоимость",				 "МОЛ (стоим.)");
		СтруктураЗаголовков.Вставить("СчетНачисленияАмортизацииБУ",	 "Счет начисл. амортизации");
		СтруктураЗаголовков.Вставить("ПодразделениеАмортизация",	 "Подразделение (амортиз.)");
		СтруктураЗаголовков.Вставить("МОЛАмортизация",				 "МОЛ (амортиз.)");
		СтруктураЗаголовков.Вставить("ПодразделениеМестонахождение", "Подразделение (рег. свед.)");
		СтруктураЗаголовков.Вставить("МОЛМестонахождение",			 "МОЛ (рег. свед.)");
	    
	    
		ИсходящиеДанные.Вставить("СоответствиеМестонахожденияНаСчетахИРегистрахСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОС",							 "ОС");
		СтруктураРасшифровки.Вставить("СчетУчетаБУ",				 "СчетУчетаБУ");
		СтруктураРасшифровки.Вставить("ПодразделениеСтоимость",		 "ПодразделениеСтоимость");
		СтруктураРасшифровки.Вставить("МОЛСтоимость",				 "МОЛСтоимость");
		СтруктураРасшифровки.Вставить("СчетНачисленияАмортизацииБУ", "СчетНачисленияАмортизацииБУ");
		СтруктураРасшифровки.Вставить("ПодразделениеАмортизация",	 "ПодразделениеАмортизация)");
		СтруктураРасшифровки.Вставить("МОЛАмортизация",				 "МОЛАмортизация");
		СтруктураРасшифровки.Вставить("ПодразделениеМестонахождение","ПодразделениеМестонахождение");
		СтруктураРасшифровки.Вставить("МОЛМестонахождение",			 "МОЛМестонахождение");
	    
		ИсходящиеДанные.Вставить("СоответствиеМестонахожденияНаСчетахИРегистрахСтруктураРасшифровки", СтруктураРасшифровки);
		
	КонецЕсли; 
	
КонецПроцедуры

// - КУФИБ - начало

Функция ПроверкаДоступнаПользователю(Идентификатор)
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	Иначе
		СтрокиДоступности = ТаблицаДоступностиПроверок.НайтиСтроки(Новый Структура("Проверка",Идентификатор));
		Если СтрокиДоступности.Количество()=0 Тогда
			Возврат Истина;
		КонецЕсли;
		Для Каждого СтрокаДоступности Из СтрокиДоступности Цикл
			Если РольДоступна(СтрокаДоступности.Роль) Тогда
				Возврат Истина;
			ИначеЕсли СтрокаДоступности.Роль = "Бухгалтер" И РольДоступна("БухгалтерСДоступомКДаннымПоЗаработнойПлате") Тогда
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// - КУФИБ - конец

# КонецЕсли

# Если Клиент Тогда
НП = Новый НастройкаПериода;
НП.РедактироватьКакПериод   = Истина;
НП.РедактироватьКакИнтервал = Ложь;
НП.ВариантНастройки         = ВариантНастройкиПериода.Период;

ЦветФонаОшибок       = Новый Цвет(253, 236, 229); // светло-розовый
ЦветТекстаОшибок     = Новый Цвет(83, 23, 22);    // темно-коричневый
ЦветФонаКолОшибок    = Новый Цвет(240, 54, 0);    // красный
ЦветТекстаКолОшибок  = Новый Цвет(255, 240, 96);  // ярко-желтый
ЦветФонаБезОшибок    = Новый Цвет(249, 255, 236); // светло-зеленый

# КонецЕсли
	
ВысотаОбластей = Новый Структура;
Макет   = ПолучитьМакет("МакетОтчета");
ВысотаОбластей.Вставить("Шапка", 			  	   Макет.ПолучитьОбласть("Шапка").ВысотаТаблицы);
ВысотаОбластей.Вставить("Заголовок", 			   Макет.ПолучитьОбласть("Заголовок").ВысотаТаблицы);
ВысотаОбластей.Вставить("РазделУчета", 			   Макет.ПолучитьОбласть("РазделУчета").ВысотаТаблицы);
ВысотаОбластей.Вставить("Проверка", 			   Макет.ПолучитьОбласть("Проверка").ВысотаТаблицы);
ВысотаОбластей.Вставить("ПредметКонтроля", 		   Макет.ПолучитьОбласть("ПредметКонтроля").ВысотаТаблицы);
ВысотаОбластей.Вставить("КомментарийРезультата",   Макет.ПолучитьОбласть("КомментарийРезультата").ВысотаТаблицы);
ВысотаОбластей.Вставить("ПричиныОшибок", 		   Макет.ПолучитьОбласть("ПричиныОшибок").ВысотаТаблицы);
ВысотаОбластей.Вставить("Рекомендации", 		   Макет.ПолучитьОбласть("Рекомендации").ВысотаТаблицы);
ВысотаОбластей.Вставить("ПодвалПроверки",	 	   Макет.ПолучитьОбласть("ПодвалПроверки").ВысотаТаблицы);
ВысотаОбластей.Вставить("РазделительРазделаУчета", Макет.ПолучитьОбласть("РазделительРазделаУчета").ВысотаТаблицы);

ОбщаяСтруктураФорматаПолей = Новый Структура;
ОбщаяСтруктураФорматаПолей.Вставить("ПериодГод", "ДФ = ""гггг """"г.""""""");
ОбщаяСтруктураФорматаПолей.Вставить("ПериодКвартал", "ДФ = ""к"""" квартал"""" гггг """"г.""""""");
ОбщаяСтруктураФорматаПолей.Вставить("ПериодМесяц", "ДФ = ""ММММ гггг """"г.""""""");
ОбщаяСтруктураФорматаПолей.Вставить("ПериодНеделя","ДФ = """"""Неделя с"""" дд.ММ.гггг """"""");
ОбщаяСтруктураФорматаПолей.Вставить("ПериодДень", "ДФ = дд.ММ.гггг");
ОбщаяСтруктураФорматаПолей.Вставить("ПериодДекада","ДФ = """"""Декада с"""" дд.ММ.гггг """"""");
ОбщаяСтруктураФорматаПолей.Вставить("ПериодПолугодие","ДФ = """"""Полугодие с"""" дд.ММ.гггг """"""");
ОбщаяСтруктураФорматаПолей.Вставить("НачПериода", "ДФ = дд.ММ.гггг");
ОбщаяСтруктураФорматаПолей.Вставить("КонПериода", "ДФ = дд.ММ.гггг");

ОбщаяСтруктураЗаголовков = Новый Структура;
ОбщаяСтруктураЗаголовков.Вставить("ПериодГод", "Год");
ОбщаяСтруктураЗаголовков.Вставить("ПериодКвартал", "Квартал");
ОбщаяСтруктураЗаголовков.Вставить("ПериодМесяц", "Месяц");
ОбщаяСтруктураЗаголовков.Вставить("ПериодНеделя","Неделя");
ОбщаяСтруктураЗаголовков.Вставить("ПериодДень", "День");
ОбщаяСтруктураЗаголовков.Вставить("ПериодДекада","Декада");
ОбщаяСтруктураЗаголовков.Вставить("ПериодПолугодие","Полугодие");
ОбщаяСтруктураЗаголовков.Вставить("НачПериода", "Начало периода");
ОбщаяСтруктураЗаголовков.Вставить("КонПериода", "Конец периода");

ОбщаяСтруктураШириныКолонок = Новый Структура;
ОбщаяСтруктураШириныКолонок.Вставить("Документ", 40);
ОбщаяСтруктураШириныКолонок.Вставить("Дата", 20);

ОбщаяСтруктураРасшифровки = Новый Структура;
ОбщаяСтруктураРасшифровки.Вставить("Документ", "Документ");

мОтображатьСтруктурныеПодразделения = ОбщегоНазначения.ПолучитьПризнакОтображенияСтруктурныхПодразделений();

//-КУФИБ - начало


ТаблицаДоступностиПроверок = Новый ТаблицаЗначений;
ТаблицаДоступностиПроверок.Колонки.Добавить("Проверка",Новый ОписаниеТипов("Строка"));
ТаблицаДоступностиПроверок.Колонки.Добавить("Роль",Новый ОписаниеТипов("Строка"));

