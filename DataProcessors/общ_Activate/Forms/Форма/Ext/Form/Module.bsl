
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ПрефиксПродукта",ПрефиксПродукта);
	Если ПрефиксПродукта = "" Тогда
		ПрефиксПродукта = "общ_";
	КонецЕсли;
	
	ОбщийМодуль = Вычислить(ПрефиксПродукта + "ЗащитаКлиентСервер");
	Объект.НомерОсновногоКлюча = Константы[ПрефиксПродукта + "НомерОсновногоКлюча"].Получить();
	Объект.НомерРегистрационнойАнкеты = Константы[ПрефиксПродукта + "НомерРегистрационнойАнкеты"].Получить();
	ТребуемаяКатегория = ОбщийМодуль.КатегорияПоддержки();
	Если ТипЗнч(ТребуемаяКатегория)=Тип("Массив") Тогда
		КатегорияПлатнойПоддержкиОтраслевогоРешения = "";
		Для Каждого ЗначениеМассива Из ТребуемаяКатегория Цикл
			КатегорияПлатнойПоддержкиОтраслевогоРешения = КатегорияПлатнойПоддержкиОтраслевогоРешения+ ?(КатегорияПлатнойПоддержкиОтраслевогоРешения="",""," или ")+ЗначениеМассива;
		КонецЦикла;
	Иначе
		КатегорияПлатнойПоддержкиОтраслевогоРешения = ОбщийМодуль.КатегорияПоддержки();
	КонецЕсли;
	
	СписокКлючей = ОбщийМодуль.СписокНомеровКлючей();
	
	Для Каждого Ключ Из СписокКлючей Цикл
		Элементы.НомерОсновногоКлюча.СписокВыбора.Добавить(Ключ);	
	КонецЦикла;
	
	ОбновитьИнформациюОПодписке();
	            
	ДомашняяСтраницаНаСервере();
	
	Элементы.ДекорацияКонтакты.Заголовок = "Для удаленной активации необходимо обратиться в компанию 1С-Рейтинг по адресу электронной почты "
		+ ПочтовыйАдресЛК(ПрефиксПродукта);
		
	Элементы.ДекорацияКонтакты1.Заголовок = "Внимание!!! Перед продолжением убедитесь, что продукт зарегистрирован в компании 1С-Рейтинг. Для регистрации необходимо обратиться в компанию 1С-Рейтинг по адресу электронной почты " 
		+ ПочтовыйАдресЛК(ПрефиксПродукта);
	
	Если ПоддерживаетсяСтарыйФорматРегНомера() Тогда
		Элементы.НомерРегистрационнойАнкеты.Маска = "";		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ВладелецФормы <> Неопределено Тогда
		Попытка
			ВладелецФормы.ОбновитьИнформациюОПодпискеКлиент();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// В связи с некорректным поведением платформы данное событие срабатывает при программном изменении кнопок навигации 
	// параллельно с установкой текущей страницы. При этом в качестве текущей страницы устанавливается СтраницаИнструкция. 
	// Ошибка возникает при переходе на страницу с результатом активации. Поэтому для установки текущей страницы 
	// используется следующий код (видимость страниц восстанавливается позже при нажатии на кнопку Назад):
	Если ТекущаяСтраница = Элементы.СтраницаИнструкция И Элементы.Готово.Видимость = Истина Тогда
		Для каждого ТекСтраница Из Элементы.Страницы.ПодчиненныеЭлементы Цикл
			Если ТекСтраница.Имя <> "СтраницаРезультатАктивации" Тогда
				ТекСтраница.Видимость = Ложь;		
			КонецЕсли;	
		КонецЦикла;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРезультатАктивации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособАктивацииПоддержкиПриИзменении(Элемент)
	
	Элементы.СогласиеНаПередачуДанных.Видимость = СпособАктивацииПоддержки = 0;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)

	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	Элементы.Назад.Видимость = Истина;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаИнструкция Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборСпособаАктивации;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборСпособаАктивации Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводДанных;
		Если ((НЕ ЗначениеЗаполнено(Объект.НомерОсновногоКлюча)) И Элементы.НомерОсновногоКлюча.СписокВыбора.Количество()>0) ИЛИ Элементы.НомерОсновногоКлюча.СписокВыбора.НайтиПоЗначению(Объект.НомерОсновногоКлюча)=Неопределено Тогда
			Объект.НомерОсновногоКлюча = Элементы.НомерОсновногоКлюча.СписокВыбора[0].Значение;
		КонецЕсли;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводДанных Тогда
		Если НЕ ПроверитьДанные() Тогда
			Возврат;
		КонецЕсли;
		Если СпособАктивацииПоддержки = 0 Тогда
			Элементы.Далее.Видимость = Ложь;
			Элементы.Готово.Видимость = Истина;
			Элементы.Готово.КнопкаПоУмолчанию = Истина;
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРезультатАктивации;
			Состояние("Производится попытка соединения с центром лицензирования для активации поддержки");
			ПопыткаАктивации();
			Состояние("Готово");
			Если ВладелецФормы<>Неопределено Тогда
				Попытка
					ВладелецФормы.ОбновитьИнформациюОПодпискеКлиент();
				Исключение
				КонецПопытки;
			КонецЕсли;
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРезультатАктивации;
		ИначеЕсли СпособАктивацииПоддержки = 1 Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУдаленнаяАктивация;
			ЗаполнитьСлужебнуюИнформацию();
			Элементы.ГруппаИнформацияДляПередачиВЦентрЛицензирования.Видимость = Истина;
			Элементы.Далее.Видимость = Истина;
			Элементы.Далее.КнопкаПоУмолчанию = Истина;
			Элементы.Готово.Видимость = Ложь;
		Иначе
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУдаленнаяАктивация;
			Элементы.ГруппаИнформацияДляПередачиВЦентрЛицензирования.Видимость = Ложь;
			Элементы.Далее.Видимость = Истина;
			Элементы.Далее.КнопкаПоУмолчанию = Истина;
			Элементы.Готово.Видимость = Ложь;
		КонецЕсли;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУдаленнаяАктивация Тогда
		Если НЕ ПроверитьОтветЦентраЛицензирования() Тогда
			Возврат;
		КонецЕсли;
		СохранитьСведенияОбАктивацииНаСервере();
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРезультатАктивации;
		Элементы.Далее.Видимость = Ложь;
		Элементы.Готово.Видимость = Истина;
		Элементы.Готово.КнопкаПоУмолчанию = Истина;
		Если ВладелецФормы<>Неопределено Тогда
			Попытка
				ВладелецФормы.ОбновитьИнформациюОПодпискеКлиент();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Элементы.Далее.Видимость = Истина;
	Элементы.Далее.КнопкаПоУмолчанию = Истина;
	Элементы.Готово.Видимость = Ложь;
	
	// Восстанавливаем видимость страниц (в случае некорретного поведения платформы при установке текущей страницы)
	Для каждого ТекСтраница Из Элементы.Страницы.ПодчиненныеЭлементы Цикл
		Если НЕ ТекСтраница.Видимость Тогда
			ТекСтраница.Видимость = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборСпособаАктивации Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаИнструкция;
		Элементы.Назад.Видимость = Ложь;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводДанных Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборСпособаАктивации;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУдаленнаяАктивация Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводДанных;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРезультатАктивации Тогда
		Если СпособАктивацииПоддержки = 0 Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводДанных;
		Иначе
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУдаленнаяАктивация;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДомашняяСтраница(Команда)
	
	ДомашняяСтраницаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляАктивацииВДругихИБЛокальнойСети(Команда)
	
	ОткрытьФорму(ИмяФормыОбработки()+".Форма.ДанныеАктивации",Новый Структура("ПрефиксПродукта",ПрефиксПродукта),ЭтаФорма,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПоАктивацииВДругихИБЛокальнойСети(Команда)
	
	ИнструкцияПоАктивацииВДругихИБЛокальнойСетиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПоАктивации(Команда)
	
	ИнструкцияПоАктивацииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДомашняяСтраницаНаСервере()
	
	ПолеHTML = Обработки[ПрефиксПродукта+"СведенияОЛицензииНаПоддержку"].ПолучитьМакет("МакетИнформацияОбАктивации").ПолучитьТекст();
	ПолеHTML = СтрЗаменить(ПолеHTML, "fin@1c-rating.kz", ПочтовыйАдресЛК(ПрефиксПродукта));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОПодписке()
	
	Общиймодуль = Вычислить(ПрефиксПродукта + "ЗащитаКлиентСервер");
	ИнформацияОПодписке = ОбщийМодуль.ПолучитьСведенияОПоддержке();
	
	Внимание = "";
	Ошибки = "";
	Если НЕ ЗначениеЗаполнено(ИнформацияОПодписке) Тогда
		СостояниеПодписки = "Лицензия не активирована";
		Внимание = "ВНИМАНИЕ!!! Необходимо активировать Лицензию";
		Элементы.ДекорацияУспешно.Видимость = Ложь;
		Элементы.ДанныеДляАктивацииВДругихИБЛокальнойСети.Видимость = Ложь;
	Иначе
		СостояниеПодписки = "Лицензия действительна до: " + Формат(ИнформацияОПодписке.СрокОкончанияПоддержки,"ДФ=dd.MM.yyyy") + ", оформлена на ключ защиты с серийным номером: " + ИнформацияОПодписке.НомерКлюча;
		Элементы.ДекорацияУспешно.Видимость = Истина;
		Элементы.ДанныеДляАктивацииВДругихИБЛокальнойСети.Видимость = Истина;
		Если ИнформацияОПодписке.СрокОкончанияПоддержки < ТекущаяДата() Тогда
			Внимание = "ВНИМАНИЕ!!! Срок действующей Лицензии истек! Необходимо активировать Лицензию.";
			Элементы.ДекорацияУспешно.Видимость = Ложь;
			Элементы.ДанныеДляАктивацииВДругихИБЛокальнойСети.Видимость = Ложь;
		ИначеЕсли ИнформацияОПодписке.СрокОкончанияПоддержки < ДобавитьМесяц(ТекущаяДата(),1) Тогда
			Внимание = "До окончания срока действия Лицензии осталось менее месяца! Не забудьте продлить Лицензию!";
		ИначеЕсли ИнформацияОПодписке.Свойство("КатегорияПоддержки") И Найти(КатегорияПлатнойПоддержкиОтраслевогоРешения,Строка(ИнформацияОПодписке.КатегорияПоддержки))=0 Тогда
			Элементы.ДекорацияУспешно.Видимость = Ложь;
			Элементы.ДанныеДляАктивацииВДругихИБЛокальнойСети.Видимость = Ложь;
			Внимание = "Активированная категория поддержки не соответствует категории поддержки данного программного продукта!";
		КонецЕсли;
		Если Элементы.НомерОсновногоКлюча.СписокВыбора.НайтиПоЗначению(ИнформацияОПодписке.НомерКлюча)=Неопределено Тогда
			Элементы.ДекорацияУспешно.Видимость = Ложь;
			Внимание = Внимание + ?(Внимание = "", "", " ") + "Отсутствует ключ защиты, на который оформлена Лицензия!";
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Ошибки.Видимость = Ошибки <> "";
	Элементы.Внимание.Видимость = Внимание <> "";
	
КонецПроцедуры

&НаСервере
Функция ПопыткаАктивации()
	
	ОписаниеОшибки = "";
	
	ОбщийМодуль = Вычислить(ПрефиксПродукта + "ЗащитаКлиентСервер");
	НомерПопытки = 2;
	РезультатПопытки = ОбщийМодуль.АктивироватьПоддержку(Объект, ОписаниеОшибки,НомерПопытки);
	Если НЕ РезультатПопытки Тогда
		НомерПопытки = 1;
		РезультатПопытки = ОбщийМодуль.АктивироватьПоддержку(Объект, ОписаниеОшибки,НомерПопытки);
	КонецЕсли;
	Если РезультатПопытки Тогда
		Элементы.Ошибки.Видимость = Ложь;
		Элементы.ДекорацияУспешно.Видимость = Истина;
		Ошибки = "";
	
		МенеджерКонстанты = Константы[ПрефиксПродукта + "НомерОсновногоКлюча"].СоздатьМенеджерЗначения();
		МенеджерКонстанты.ДополнительныеСвойства.Вставить("ВнешняяОбработка",Истина);
		МенеджерКонстанты.Значение = Объект.НомерОсновногоКлюча;
		МенеджерКонстанты.Записать();
		
		МенеджерКонстанты = Константы[ПрефиксПродукта + "НомерРегистрационнойАнкеты"].СоздатьМенеджерЗначения();
		МенеджерКонстанты.ДополнительныеСвойства.Вставить("ВнешняяОбработка",Истина);
		МенеджерКонстанты.Значение = Объект.НомерРегистрационнойАнкеты;
		МенеджерКонстанты.Записать();
		
		ОбновитьИнформациюОПодписке();
	Иначе
		СостояниеПодписки = "Не удалось обновить данные Лицензии!";
		Элементы.Внимание.Видимость = Ложь;
		Элементы.ДекорацияУспешно.Видимость = Ложь;
		Элементы.ДанныеДляАктивацииВДругихИБЛокальнойСети.Видимость = Ложь;
		Элементы.Ошибки.Видимость = Истина;
		Ошибки = ОписаниеОшибки;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСлужебнуюИнформацию()
	
	Выполнить(ПрефиксПродукта + "ЗащитаКлиентСервер.ПолучитьСлужебноеПредставление(Объект)");
	
КонецФункции

&НаКлиенте
Функция ПроверитьДанные()
	
	НетОшибок = Истина;
	Если НЕ ЗначениеЗаполнено(Объект.НомерОсновногоКлюча) Тогда
		СообщитьПользователю("Не выбран основной ключ защиты, к которому будет привязана активация!");
		НетОшибок = Ложь;
	ИначеЕсли Элементы.НомерОсновногоКлюча.СписокВыбора.НайтиПоЗначению(Объект.НомерОсновногоКлюча) = Неопределено Тогда
		СообщитьПользователю("Не выбран основной ключ защиты, к которому будет привязана активация!");
		НетОшибок = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НомерРегистрационнойАнкеты) Тогда
		СообщитьПользователю("Не указан номер регистрационной анкеты!");
		НетОшибок = Ложь;
	ИначеЕсли НЕ ПоддерживаетсяСтарыйФорматРегНомера() И СтрДлина(СокрЛП(Объект.НомерРегистрационнойАнкеты)) <> 11 Тогда
		СообщитьПользователю("Номер регистрационной анкеты должен состоять из 11 символов!");
		НетОшибок = Ложь;
	КонецЕсли;
	
	Если СпособАктивацииПоддержки = 0 Тогда
		Если НЕ СогласиеНаПередачуДанных Тогда
			СообщитьПользователю("Не подтверждено согласие на передачу данных");	
			НетОшибок = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НетОшибок;
	
КонецФункции

&НаКлиенте
Функция ПроверитьОтветЦентраЛицензирования()
	
	НетОшибок = Истина;
	Если НЕ ЗначениеЗаполнено(Объект.ОтветЦентраЛицензирования) Тогда
		СообщитьПользователю("Введите ответ, полученный из Центра лицензирования!");
		НетОшибок = Ложь;
	КонецЕсли;
	
	Возврат НетОшибок;
	
КонецФункции

&НаКлиенте
// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                - Любая ссылка на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы)
//  Отказ                      - Булево - Выходной параметр
//                               Всегда устанавливается в значение Истина
//
//	Примеры использования:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых
//  3. Установка ссылки без установки поля (и/или пути к данным)
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
	Сообщение.КлючДанных = КлючДанных;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ИнструкцияПоАктивацииВДругихИБЛокальнойСетиНаСервере()
	
	ПолеHTML = Обработки[ПрефиксПродукта + "СведенияОЛицензииНаПоддержку"].ПолучитьМакет("МакетАктивацияВЛокальнойСети").ПолучитьТекст();
	
КонецПроцедуры

&НаСервере
Процедура ИнструкцияПоАктивацииНаСервере()
	
	ПолеHTML = Обработки[ПрефиксПродукта + "СведенияОЛицензииНаПоддержку"].ПолучитьМакет("МакетИнструкцияПоАктивации").ПолучитьТекст();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСведенияОбАктивацииНаСервере()
	
	МенеджерКонстанты = Константы[ПрефиксПродукта + "СведенияОПодпискеНаПоддержку"].СоздатьМенеджерЗначения();
	МенеджерКонстанты.ДополнительныеСвойства.Вставить("ВнешняяОбработка", Истина);
	МенеджерКонстанты.Значение = Новый ХранилищеЗначения(Объект.ОтветЦентраЛицензирования);
	МенеджерКонстанты.Записать();
	
	МенеджерКонстанты = Константы[ПрефиксПродукта + "НомерОсновногоКлюча"].СоздатьМенеджерЗначения();
	МенеджерКонстанты.ДополнительныеСвойства.Вставить("ВнешняяОбработка", Истина);
	МенеджерКонстанты.Значение = Объект.НомерОсновногоКлюча;
	МенеджерКонстанты.Записать();
	
	МенеджерКонстанты = Константы[ПрефиксПродукта + "НомерРегистрационнойАнкеты"].СоздатьМенеджерЗначения();
	МенеджерКонстанты.ДополнительныеСвойства.Вставить("ВнешняяОбработка", Истина);
	МенеджерКонстанты.Значение = Объект.НомерРегистрационнойАнкеты;
	МенеджерКонстанты.Записать();
	
	ОбновитьИнформациюОПодписке();
	
КонецПроцедуры

&НаСервере
Функция ИмяФормыОбработки()
	
	ОбщийМодуль = Вычислить(ПрефиксПродукта + "ЗащитаКлиентСервер");
	
	Возврат ОбщийМодуль.ПолучитьИмяФормыДляОткрытия();
	
КонецФункции

&НаСервере
Функция ПоддерживаетсяСтарыйФорматРегНомера()
	
	ПрефиксыКонфигурацийСоСтарымФорматом = Новый Массив;
	ПрефиксыКонфигурацийСоСтарымФорматом.Добавить("гкп_");
	ПрефиксыКонфигурацийСоСтарымФорматом.Добавить("моп_");
	ПрефиксыКонфигурацийСоСтарымФорматом.Добавить("фин_");
	ПрефиксыКонфигурацийСоСтарымФорматом.Добавить("общ_");
	
	Возврат ПрефиксыКонфигурацийСоСтарымФорматом.Найти(ПрефиксПродукта) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПочтовыйАдресЛК(ПрефиксПродукта)
	
	Возврат Вычислить(ПрефиксПродукта + "ОбщегоНазначения.ПочтовыйАдресЛК()");
	
КонецФункции

#КонецОбласти