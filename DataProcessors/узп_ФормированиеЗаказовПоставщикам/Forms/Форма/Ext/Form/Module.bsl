
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);		 
	КонецЕсли;		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_РаботаСоСтруктурнымиПодразделениями.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИсточникЗаявкиПриИзменении(Элемент)
	Если Объект.ОбластьПланирования=ПредопределенноеЗначение("Перечисление.узп_ОбластиПланированияЗакупок.ПоОрганизации") Тогда
		Объект.Подразделение=ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка");
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	ПриИзмененииСценария();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСводВыбратьПриИзменении(Элемент)
	Идентификатор = Элементы.ТоварыСвод.ТекущаяСтрока;
	Родитель = ТоварыСвод.НайтиПоИдентификатору(Элементы.ТоварыСвод.ТекущаяСтрока).ПолучитьРодителя();
	Для Каждого ЭлементДерева Из Родитель.ПолучитьЭлементы() Цикл
		Если ЭлементДерева.ПолучитьИдентификатор()<>Идентификатор Тогда
			ЭлементДерева.Выбрать = Ложь;
		КонецЕсли;
	КонецЦикла;
	Родитель.Контрагент = Элементы.ТоварыСвод.ТекущиеДанные.Контрагент;
	Родитель.Цена 		= Элементы.ТоварыСвод.ТекущиеДанные.Цена;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСводКонтрагентПриИзменении(Элемент)
	Если  НЕ ЗначениеЗаполнено(Элементы.ТоварыСвод.ТекущиеДанные.Номенклатура) И Элементы.ТоварыСвод.ТекущиеДанные.Выбрать Тогда
		СтрокаРодитель = Элементы.ТоварыСвод.ТекущиеДанные.ПолучитьРодителя();
		СтрокаРодитель.Контрагент = Элементы.ТоварыСвод.ТекущиеДанные.Контрагент;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСводСуммаПриИзменении(Элемент)
	Если  НЕ ЗначениеЗаполнено(Элементы.ТоварыСвод.ТекущиеДанные.Номенклатура) И Элементы.ТоварыСвод.ТекущиеДанные.Выбрать Тогда
		СтрокаРодитель = Элементы.ТоварыСвод.ТекущиеДанные.ПолучитьРодителя();
		СтрокаРодитель.Цена = Элементы.ТоварыСвод.ТекущиеДанные.Цена;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "Товары"

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	НоменклатураПриИзмененииНаСервере(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ЦенаКоличествоПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ЦенаКоличествоПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры
 
&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	РассчетОбщейСуммыТоварногоДоговора();	
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	мКоэффициент = Элементы.Товары.ТекущиеДанные.Коэффициент;
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.Товары.ТекущиеДанные.ПериодПланирования = Объект.ПериодПланирования;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	мКоэффициент = Элементы.Товары.ТекущиеДанные.Коэффициент;
	Элементы.Товары.ТекущиеДанные.Коэффициент = ПолучитьКоэффициентПересчета(Элементы.Товары.ТекущиеДанные.ЕдиницаИзмерения,Элементы.Товары.ТекущиеДанные.Номенклатура);
	Если мКоэффициент<>Элементы.Товары.ТекущиеДанные.Коэффициент И Элементы.Товары.ТекущиеДанные.Цена<>0 Тогда
		Элементы.Товары.ТекущиеДанные.Цена = Элементы.Товары.ТекущиеДанные.Цена / (Элементы.Товары.ТекущиеДанные.Коэффициент/?(мКоэффициент=0,1,мКоэффициент)); 
		ЦенаКоличествоПриИзменении();;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоэффициентПриИзменении(Элемент)
	Если мКоэффициент<>Элементы.Товары.ТекущиеДанные.Коэффициент И Элементы.Товары.ТекущиеДанные.Цена<>0 Тогда
		Элементы.Товары.ТекущиеДанные.Цена = Элементы.Товары.ТекущиеДанные.Цена / (Элементы.Товары.ТекущиеДанные.Коэффициент/?(мКоэффициент=0,1,мКоэффициент)); 
		ЦенаКоличествоПриИзменении();;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДатаПоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокПериодов();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура",ВыбранноеЗначение)).Количество()=0 Тогда
		НС = Объект.Товары.Добавить();
		НС.Номенклатура = ВыбранноеЗначение;
		НоменклатураПриИзмененииНаСервере(НС.ПолучитьИдентификатор());
		Элементы.Товары.ТекущаяСтрока = НС.ПолучитьИдентификатор();
		ТоварыПриНачалеРедактирования(Элемент, Истина, Ложь);
	КонецЕсли;
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "Услуги"


&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	НоменклатураПриИзмененииНаСервере(Элементы.Услуги.ТекущиеДанные.ПолучитьИдентификатор(),"Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	ЦенаКоличествоПриИзменении("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	ЦенаКоличествоПриИзменении("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчетОбщейСуммыТоварногоДоговора();	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	РассчетОбщейСуммыТоварногоДоговора();	
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.Услуги.ТекущиеДанные.ПериодПланирования = Объект.ПериодПланирования;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.Услуги.НайтиСтроки(Новый Структура("Номенклатура",ВыбранноеЗначение)).Количество()=0 Тогда
		НС = Объект.Услуги.Добавить();
		НС.Номенклатура = ВыбранноеЗначение;
		НоменклатураПриИзмененииНаСервере(НС.ПолучитьИдентификатор(),"Услуги");
		Элементы.Услуги.ТекущаяСтрока = НС.ПолучитьИдентификатор();
		УслугиПриНачалеРедактирования(Элемент, Истина, Ложь);
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПериодНазад(Команда)
	ДобавитьПериод(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПериодВперед(Команда)
	ДобавитьПериод(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПериодВыбрать(Команда)
	ВыбратьПериодПланирования(Объект.ПериодПланирования);
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	НачатьПодбор(Элементы.Товары,Ложь,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПодборТоварыПлановая(Команда)
	НачатьПодбор(Элементы.Товары,Истина,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)
	НачатьПодбор(Элементы.Услуги,Ложь,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслугиПлановая(Команда)
	НачатьПодбор(Элементы.Услуги,Истина,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпецификациюПоЗаявкам(Команда)
	Если Объект.ВалютаДокумента.Пустая() Тогда
		Предупреждение("Для продолжения необходимо выбрать валюту документа!");
		Возврат;
	КонецЕсли;
	ОбновитьСпецификацию();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПланЗакупок(Команда)
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	Если Объект.Товары.Количество()=0 И Объект.Услуги.Количество()=0 Тогда
		ПоказатьПредупреждение(,"Не введено ни одной номенклатурной позиции");
		Возврат;
	КонецЕсли;
	СписокКонтрагентов = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если СтрокаТЧ.Включать И (НЕ СтрокаТЧ.Контрагент.Пустая()) И СписокКонтрагентов.Найти(СтрокаТЧ.Контрагент)=Неопределено Тогда
			СписокКонтрагентов.Добавить(СтрокаТЧ.Контрагент);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТЧ Из Объект.Услуги Цикл
		Если СтрокаТЧ.Включать И (НЕ СтрокаТЧ.Контрагент.Пустая()) И СписокКонтрагентов.Найти(СтрокаТЧ.Контрагент)=Неопределено Тогда
			СписокКонтрагентов.Добавить(СтрокаТЧ.Контрагент);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Поставщик Из СписокКонтрагентов Цикл
		ФормаПлан = ПолучитьФорму("Документ.узп_ЗаказПоставщику.ФормаОбъекта",,ЭтаФорма,Поставщик);
		План = ФормаПлан.Объект;
		СоздатьПланЗакупок(План,Поставщик);
		КопироватьДанныеФормы(План, ФормаПлан.Объект);
		ФормаПлан.Открыть();
	КонецЦикла;
//	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСводныеДанные(Команда)
	ВывестиСвод();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыбранныхПоставщиков(Команда)
	РасставитьПоставщиков();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	фин_ПроцедрыРаботыСОбъектамиПереопределяемый.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
		
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		//
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	УправлениеФормой(ЭтаФорма);
			
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
		
	Объект.ВалютаДокумента = ?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ПланированиеЗакупокВВалютеРеглУчета"),фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета"),фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета"));
	
	Объект.Дата = ТекущаяДата();
	Объект.Сценарий = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ОсновнойСценарийПланированияЗакупок");
	Объект.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекущаяДата(),Объект.Сценарий);
	Объект.ОбластьПланирования=Перечисления.узп_ОбластиПланированияЗакупок.ПоОрганизации;
	Объект.УчитыватьНДС = фин_ЗаполнениеДокументов.ПолучитьПризнакПлательщикаНДС(Объект.Организация,Объект.Дата);
	Объект.ТипЦен = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("глТекущийПользователь"), "ОсновнойТипЦенЗаказовПоставщикам");
	Объект.СуммаВключаетНДС = Объект.УчитыватьНДС И Объект.ТипЦен.ЦенаВключаетНДС;	
	мПериод = Объект.ПериодПланирования;
	ЗаполнитьШапку(Объект);
	УстановитьТекстПериода();
	НастроитьУсловноеОформление();
	
	
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	УстановитьЗаголовки();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ТипНоменклатуры = дог_УправлениеДоговорами.ПолучитьТипВводаНоменклатуры();
	Элементы.ТоварыНоменклатура.ОграничениеТипа = ТипНоменклатуры;
	Элементы.УслугиНоменклатура.ОграничениеТипа = ТипНоменклатуры;
	Если НЕ ТипНоменклатуры.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
		Элементы.УслугиПодборУслуги.Видимость = Ложь;
		Элементы.ТоварыПодборТовары.Видимость = Ложь;
	КонецЕсли;
	Если НЕ ТипНоменклатуры.СодержитТип(Тип("СправочникСсылка.фин_ПлановаяНоменклатура")) Тогда
		Элементы.УслугиПодборУслугиПлановая.Видимость = Ложь;
		Элементы.ТоварыПодборТоварыПлановая.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Подразделение.Видимость = (Объект.ОбластьПланирования = ПредопределенноеЗначение("Перечисление.узп_ОбластиПланированияЗакупок.ПоПодразделению"));
	Элементы.ТоварыПодразделение.Видимость = НЕ (Объект.ОбластьПланирования=ПредопределенноеЗначение("Перечисление.узп_ОбластиПланированияЗакупок.ПоПодразделению"));
	Элементы.УслугиПодразделение.Видимость = НЕ (Объект.ОбластьПланирования=ПредопределенноеЗначение("Перечисление.узп_ОбластиПланированияЗакупок.ПоПодразделению"));
	ПродолжительностьЦикла = ПолучитьПродолжительностьЦикла(Объект.Сценарий);
	Элементы.ТоварыДатаПоставки.Видимость = (ПродолжительностьЦикла>1);
	Элементы.УслугиДатаПоставки.Видимость = (ПродолжительностьЦикла>1);
    мФормат = ПолучитьФормат(Объект.Сценарий);
	Элементы.ТоварыДатаПоставки.Формат = мФормат;
	Элементы.ТоварыДатаПоставки.ФорматРедактирования = мФормат;
	Элементы.УслугиДатаПоставки.Формат = мФормат;
	Элементы.УслугиДатаПоставки.ФорматРедактирования = мФормат;
	 
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;
	
	АктивизироватьТабличнуюЧасть = фин_ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюВидимуюТабличнуюЧасть(ЭтаФорма, СписокТабличныхЧастей);
	фин_ОбщегоНазначенияСервер.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаСервере
Процедура УстановитьЗаголовки()
	НадписьИсточникЗаявки = "Область планирования";
	НадписьПараметрыПланирования = "Параметры планирования";
	НадписьСуммаДокумента = "Валюта документа, цены и НДС";	
КонецПроцедуры

&НаСервере
Процедура НастроитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();
	СписокДоступныхПериодов = СписокПериодов();
	Для Каждого ДоступныйПериод Из СписокДоступныхПериодов Цикл
		// товары
		НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование=Истина;
		ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение = ДоступныйПериод.Значение;
		ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ПериодПланирования");
		ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование=Истина;
		ПолеОформления.Поле=Новый ПолеКомпоновкиДанных("ТоварыДатаПоставки");
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",ДоступныйПериод.Представление);
		// услуги
		НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
		НовыйЭлементОформления.Использование=Истина;
		ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемент.ПравоеЗначение = ДоступныйПериод.Значение;
		ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Услуги.ПериодПланирования");
		ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Использование=Истина;
		ПолеОформления.Поле=Новый ПолеКомпоновкиДанных("УслугиДатаПоставки");
		НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",ДоступныйПериод.Представление);
	КонецЦикла;
	НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементОформления.Использование=Истина;
	ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемент.ПравоеЗначение = Ложь;
	ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТоварыСвод.КартинкаКонтрагент");
	ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование=Истина;
	ПолеОформления.Поле=Новый ПолеКомпоновкиДанных("ТоварыСводВыбрать");
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость",Ложь);
	
	НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементОформления.Использование=Истина;
	ОтборЭлемент = НовыйЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемент.ПравоеЗначение = Истина;
	ОтборЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТоварыСвод.Минимальная");
	ПолеОформления = НовыйЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование=Истина;
	ПолеОформления.Поле=Новый ПолеКомпоновкиДанных("ТоварыСвод");
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",Новый Цвет(197,255,197));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПродолжительностьЦикла(Сценарий)
	Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПродолжительностьЦикла(Сценарий);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФормат(Сценарий)
	Возврат фин_ПроцедурыМеханизмовБюджетирования.ПолучитьФормат(Сценарий)
КонецФункции

&НаСервере
Процедура УстановитьТекстПериода()
	ГоризонтПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(Объект.ПериодПланирования,Объект.Сценарий);
	НадписьПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(Объект.ПериодПланирования,Объект.Сценарий);
	ТекстГоризонт = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(ГоризонтПланирования,Объект.Сценарий);
	Если ТекстГоризонт<>НадписьПериодПланирования Тогда
		НадписьПериодПланирования = НадписьПериодПланирования+" - "+ТекстГоризонт;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РассчетОбщейСуммыТоварногоДоговора()
	СуммаДокумента = 0;
	СтрокиТовары = Объект.Товары.НайтиСтроки(Новый Структура("Включать",Истина));
	ТоварыВключеноПозиций = СтрокиТовары.Количество();
	ТоварыКоличество = 0;
	ТоварыСумма = 0;
	Для Каждого СтрокаТовар Из СтрокиТовары Цикл
		СуммаДокумента = СуммаДокумента + СтрокаТовар.Сумма;
		ТоварыКоличество = ТоварыКоличество+ СтрокаТовар.Количество;
		ТоварыСумма = ТоварыСумма+ СтрокаТовар.Сумма;
	КонецЦикла;
	СтрокиТовары = Объект.Услуги.НайтиСтроки(Новый Структура("Включать",Истина));
	УслугиВключеноПозиций = СтрокиТовары.Количество();
	УслугиКоличество = 0;
	УслугиСумма = 0;
	Для Каждого СтрокаТовар Из СтрокиТовары Цикл
		СуммаДокумента = СуммаДокумента + СтрокаТовар.Сумма;
		УслугиКоличество = УслугиКоличество + СтрокаТовар.Количество;
		УслугиСумма = УслугиСумма + СтрокаТовар.Сумма;
	КонецЦикла;
	Объект.СуммаДокумента = СуммаДокумента;
КонецПроцедуры
 
&НаСервереБезКонтекста
Функция ПолучитьКоэффициентПересчета(ЕдиницаИзмерения,Номенклатура)
   	Возврат дог_УправлениеДоговорами.КоэффициентПересчетаВБазовую(ЕдиницаИзмерения,Номенклатура);
КонецФункции	

&НаСервере
Функция СписокПериодов()
	Список = Новый СписокЗначений;
	Список.Добавить(Объект.ПериодПланирования,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(Объект.ПериодПланирования,Объект.Сценарий));
	СледующийПериод = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(Объект.ПериодПланирования,Объект.Сценарий,1);
	Пока СледующийПериод<=ГоризонтПланирования Цикл
		Список.Добавить(СледующийПериод,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодСтрокой(СледующийПериод,Объект.Сценарий));
		СледующийПериод = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДобавитьИнтервал(СледующийПериод,Объект.Сценарий,1);
	КонецЦикла;
	Возврат Список;
КонецФункции

&НаСервере
Процедура ПриИзмененииСценария()
   	Объект.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Объект.ПериодПланирования,Объект.Сценарий);
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить("Товары");
	МассивТЧ.Добавить("Услуги");
	Для Каждого ТЧ ИЗ МассивТЧ Цикл
		Для Каждого СтрокаТЧ Из Объект[ТЧ] Цикл
			СтрокаТЧ.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаТЧ.ПериодПланирования,Объект.Сценарий);
		КонецЦикла;
	КонецЦикла;
	УстановитьТекстПериода();
	Для Каждого ТЧ ИЗ МассивТЧ Цикл
		Для Каждого СтрокаТЧ Из Объект[ТЧ] Цикл
			СтрокаТЧ.ПериодПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(СтрокаТЧ.ПериодПланирования,Объект.Сценарий);
			Если СтрокаТЧ.ПериодПланирования<Объект.ПериодПланирования Тогда
				СтрокаТЧ.ПериодПланирования = Объект.ПериодПланирования;
			ИначеЕсли СтрокаТЧ.ПериодПланирования>ГоризонтПланирования Тогда
				СтрокаТЧ.ПериодПланирования = ГоризонтПланирования;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ДобавитьПериод(Добавить)
	Объект.ПериодПланирования=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СледующийПериодПланирования(Объект.ПериодПланирования,Объект.Сценарий,Добавить);
	УстановитьТекстПериода();
	ПриИзмененииПериода();
КонецПроцедуры


&НаКлиенте
Процедура ВыбратьПериодПланирования(Период)
	СписокПериодов = ПолучитьСписокПериодов(Период,Объект.Сценарий);
	Если СписокПериодов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	Оп = Новый ОписаниеОповещения("ОбработатьВыборПериодаПланирования", ЭтотОбъект, );
	ПоказатьВыборИзСписка(Оп, СписокПериодов, Элементы.ПериодВыбрать);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПериодаПланирования(Результат, Параметры) Экспорт
	
	Если Результат<>Неопределено Тогда
		Если ТипЗнч(Результат.Значение) = Тип("Число") Тогда
			ВыбратьПериодПланирования(Дата(Результат.Значение,1,1));
		Иначе
			Объект.ПериодПланирования = Результат.Значение;
			УстановитьТекстПериода();
			ПриИзмененииПериода();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокПериодов(ПериодПланирования,Сценарий)
	Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодыДляВыбора(ПериодПланирования,Сценарий);	
КонецФункции

&НаСервере
Процедура ПриИзмененииПериода()
	Если мПериод<>Объект.ПериодПланирования Тогда
		ПериодПланирования = Объект.ПериодПланирования;
		МассивТЧ = Новый Массив;
		МассивТЧ.Добавить("Товары");
		МассивТЧ.Добавить("Услуги");
		Для Каждого ТЧ Из МассивТЧ Цикл
			фин_ПроцедурыМеханизмовБюджетирования.ПереносПериодовПланированияВТабличнойЧасти(Объект[ТЧ],Объект.Сценарий,ПериодПланирования,мПериод,ГоризонтПланирования);
		КонецЦикла;
		мПериод = Объект.ПериодПланирования;
		НастроитьУсловноеОформление();
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура  РасставитьПоставщиков()
	Дерево = ДанныеФормыВЗначение(ТоварыСвод,Тип("ДеревоЗначений"));
	Док = РеквизитФормыВЗначение("Объект");
	ДанныеОбъекта = Новый Структура("");
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		ТипПозиции = СтрокаДерева.ТипПозиции;
		Для Каждого СтрокаНоменклатура Из СтрокаДерева.Строки Цикл
			Если ЗначениеЗаполнено(СтрокаНоменклатура.Контрагент) И СтрокаНоменклатура.Цена <> 0 Тогда
				Строки = Док[?(ТипПозиции=Перечисления.узп_ТипыПозицийПлановойНоменклатурыВПланеЗакупок.Услуга,"Услуги","Товары")].НайтиСтроки(Новый Структура("Номенклатура",СтрокаНоменклатура.Номенклатура));
				Для Каждого СтрокаТЧ Из Строки Цикл
					ДанныеСтрокиТаблицы	= Новый Структура("Номенклатура, Контрагент, Цена");
					ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТЧ);
    
					СтрокаТЧ.Цена = СтрокаНоменклатура.Цена;
					//СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
					СтрокаТЧ.Контрагент = СтрокаНоменклатура.Контрагент;
					дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТЧ);
					//дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, Объект);
					//дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТЧ, Объект.СуммаВключаетНДС);
					//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, Док);

					//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, Док);
					//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, Док);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ЗначениеВРеквизитФормы(Док,"Объект");
	РассчетОбщейСуммыТоварногоДоговора();
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодбор(Элемент,ПлановаяНоменклатура,Услуги)
	Если Не ПлановаяНоменклатура Тогда
		узп_УправлениеЗакупкамиКлиент.ПодборНоменклатуры(ЭтаФорма,УникальныйИдентификатор,?(Услуги,"Услуги","Товары"));
	Иначе
		узп_УправлениеЗакупкамиКлиент.НачалоПодбораНоменклатуры(Элемент,ПлановаяНоменклатура,Услуги,УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбновлениеСпискаЗаявок()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаМТС.Ссылка КАК Заявка,
		|	ИСТИНА КАК Включать
		|ИЗ
		|	Документ.узп_ЗаявкаМТС КАК ЗаявкаМТС
		|ГДЕ
		|	ЗаявкаМТС.Организация = &Организация
		|	И ЗаявкаМТС.СтруктурноеПодразделение = &СтруктурноеПодразделение
		|	И ЗаявкаМТС.Сценарий = &Сценарий
		|	И ЗаявкаМТС.ПериодПланирования = &ПериодПланирования"+?(Объект.ОбластьПланирования=Перечисления.узп_ОбластиПланированияЗакупок.ПоОрганизации,"","
		|	И ЗаявкаМТС.Подразделение = &Подразделение");

	Запрос.УстановитьПараметр("Организация", 				Объект.Организация);
	Запрос.УстановитьПараметр("ПериодПланирования", 		Объект.ПериодПланирования);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", 	Объект.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("Сценарий", 					Объект.Сценарий);
 	Запрос.УстановитьПараметр("Подразделение", 				Объект.Подразделение);

	Результат = Запрос.Выполнить();

    Объект.Заявки.Очистить();
	Объект.Заявки.Загрузить(Результат.Выгрузить());

КонецПроцедуры

&НаСервере
Процедура ОбновитьСпецификацию()
	ПризнакПроекта = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("узп_ВестиУчетЗакупокПоПроектам");
	
	Если ПризнакПроекта тогда
		Проект = "Проект";
		МодификаторПроекта = Новый Массив;
		МодификаторПроекта.Добавить(",	ЗаказыПоставщикамОбороты.");
		МодификаторПроекта.Добавить(",	ВТ_ПланЗаказы.");
		МодификаторПроекта.Добавить(",	ПланыЗакупокОбороты.");
		МодификаторПроекта.Добавить(",	ВТ_Запланировано.");
		МодификаторПроекта.Добавить(",	ВТ_Расчет.");
		МодификаторПроекта.Добавить(",	ВТ_Итоги.");
		МодификаторПроекта.Добавить(",	ВТ_Принимаемые.");
	Иначе
		Проект = "";
		МодификаторПроекта = Новый Массив;
		Для к=0 По 6 Цикл
			МодификаторПроекта.Добавить("");
		КонецЦикла;
	КонецЕсли;

    СУчетомЗаявок = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("УказыватьДляПозицийПланаЗакупокЗаявкиОснования");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВалютаУпр",фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаУправленческогоУчета"));
	Запрос.УстановитьПараметр("ВалютаДокумента",Объект.ВалютаДокумента);
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение",Объект.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("Сценарий",Объект.Сценарий);
	Запрос.УстановитьПараметр("НачалоПериода",Объект.ПериодПланирования);
	Запрос.УстановитьПараметр("КонецПериода",фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(Объект.ПериодПланирования,Объект.Сценарий));
	Запрос.УстановитьПараметр("Подразделение",Объект.Подразделение);
	Запрос.УстановитьПараметр("Контрагент",Объект.Контрагент);
	Периодичность = Строка(Объект.Сценарий.Периодичность);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказыПоставщикамОбороты.Подразделение,
		|	ВЫБОР
		|		КОГДА ЗаказыПоставщикамОбороты.НоменклатураПлановая = ЗНАЧЕНИЕ(Справочник.фин_ПлановаяНоменклатура.ПустаяСсылка)
		|			ТОГДА ЗаказыПоставщикамОбороты.Номенклатура
		|		ИНАЧЕ ЗаказыПоставщикамОбороты.НоменклатураПлановая
		|	КОНЕЦ КАК Номенклатура,
		|	ЗаказыПоставщикамОбороты.Характеристика,
		|	ЗаказыПоставщикамОбороты.КоличествоОборот КАК Количество,
		|	ЗаказыПоставщикамОбороты.СуммаУпрОборот КАК Сумма,
		|	НАЧАЛОПЕРИОДА(ЗаказыПоставщикамОбороты.СрокПоставки, МЕСЯЦ) КАК ПериодПланирования,
		|	ЗаказыПоставщикамОбороты.Заявка,
		|	ЕСТЬNULL(ЗаказыПоставщикамОбороты.Заявка.ОбъектРемонта, ЗНАЧЕНИЕ(Справочник.Основныесредства.ПустаяСсылка)) КАК ОбъектРемонта,
		|	ЗаказыПоставщикамОбороты.Номенклатура КАК НоменклатураРегл,
		|	ЗаказыПоставщикамОбороты.НоменклатураПлановая"+МодификаторПроекта[0]+Проект+"
		|ПОМЕСТИТЬ ВТ_ПланЗаказы
		|ИЗ
		|	РегистрНакопления.узп_ЗаказыПоставщикам.Обороты(
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
		|				И ПриходРасход = ЗНАЧЕНИЕ(Перечисление.узп_ВидыОборотовПоЗаказам.Заказано)
		|				И СрокПоставки >= &НачалоПериода
		|				И СрокПоставки <= &КонецПериода"+?(Объект.ОбластьПланирования=Перечисления.узп_ОбластиПланированияЗакупок.ПоОрганизации,"","
		|	И Подразделение = &Подразделение")+?(ЗначениеЗаполнено(Объект.Контрагент)," И Контрагент=&Контрагент","")+") КАК ЗаказыПоставщикамОбороты
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыПоставщикамОбороты.Подразделение,
		|	ВЫБОР
		|		КОГДА ЗаказыПоставщикамОбороты.НоменклатураПлановая = ЗНАЧЕНИЕ(Справочник.фин_ПлановаяНоменклатура.ПустаяСсылка)
		|			ТОГДА ЗаказыПоставщикамОбороты.Номенклатура
		|		ИНАЧЕ ЗаказыПоставщикамОбороты.НоменклатураПлановая
		|	КОНЕЦ КАК Номенклатура,
		|	ЗаказыПоставщикамОбороты.Характеристика,
		|	ЗаказыПоставщикамОбороты.КоличествоОборот КАК Количество,
		|	ЗаказыПоставщикамОбороты.СуммаУпрОборот КАК Сумма,
		|	НАЧАЛОПЕРИОДА(ЗаказыПоставщикамОбороты.СрокПоставки, МЕСЯЦ) КАК ПериодПланирования,
		|	ЗаказыПоставщикамОбороты.Заявка,
		|	ЕСТЬNULL(ЗаказыПоставщикамОбороты.Заявка.ОбъектРемонта, ЗНАЧЕНИЕ(Справочник.Основныесредства.ПустаяСсылка)) КАК ОбъектРемонта,
		|	ЗаказыПоставщикамОбороты.Номенклатура КАК НоменклатураРегл,
		|	ЗаказыПоставщикамОбороты.НоменклатураПлановая"+МодификаторПроекта[0]+Проект+"
		|ПОМЕСТИТЬ ВТ_ИсполнениеЗаказы
		|ИЗ
		|	РегистрНакопления.узп_ЗаказыПоставщикам.Обороты(
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
		|				И ПриходРасход = ЗНАЧЕНИЕ(Перечисление.узп_ВидыОборотовПоЗаказам.Исполнено)"+?(Объект.ОбластьПланирования=Перечисления.узп_ОбластиПланированияЗакупок.ПоОрганизации,"","
		|	И Подразделение = &Подразделение")+?(ЗначениеЗаполнено(Объект.Контрагент)," И Контрагент=&Контрагент","")+") КАК ЗаказыПоставщикамОбороты
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПланЗаказы.Подразделение,
		|	ВТ_ПланЗаказы.Номенклатура,
		|	ВТ_ПланЗаказы.Характеристика,
		|	ВТ_ПланЗаказы.Количество - ЕСТЬNULL(ВТ_ИсполнениеЗаказы.Количество, 0) КАК Количество,
		|	ВТ_ПланЗаказы.Сумма - ЕСТЬNULL(ВТ_ИсполнениеЗаказы.Сумма, 0) КАК Сумма,
		|	ВТ_ПланЗаказы.ПериодПланирования,
		|	ВТ_ПланЗаказы.Заявка,
		|	ВТ_ПланЗаказы.ОбъектРемонта"+МодификаторПроекта[1]+Проект+"
		|ПОМЕСТИТЬ ВТ_НеисполненныеЗаказы
		|ИЗ
		|	ВТ_ПланЗаказы КАК ВТ_ПланЗаказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсполнениеЗаказы КАК ВТ_ИсполнениеЗаказы
		|		ПО ВТ_ПланЗаказы.Подразделение = ВТ_ИсполнениеЗаказы.Подразделение
		|			И ВТ_ПланЗаказы.Заявка = ВТ_ИсполнениеЗаказы.Заявка
		|			И ВТ_ПланЗаказы.ОбъектРемонта = ВТ_ИсполнениеЗаказы.ОбъектРемонта
		|			И (ВЫБОР
		|				КОГДА ВТ_ПланЗаказы.НоменклатураПлановая = ЗНАЧЕНИЕ(Справочник.фин_ПлановаяНоменклатура.ПустаяСсылка)
		|					ТОГДА ВТ_ПланЗаказы.НоменклатураРегл = ВТ_ИсполнениеЗаказы.НоменклатураРегл
		|				ИНАЧЕ ВТ_ПланЗаказы.НоменклатураПлановая = ВТ_ИсполнениеЗаказы.НоменклатураПлановая
		|						И ВТ_ПланЗаказы.Характеристика = ВТ_ИсполнениеЗаказы.Характеристика
		|			КОНЕЦ)
		|ГДЕ
		|	ВТ_ПланЗаказы.Количество - ЕСТЬNULL(ВТ_ИсполнениеЗаказы.Количество, 0) > 0
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланыЗакупокОбороты.Подразделение,
		|	ПланыЗакупокОбороты.Приоритет,
		|	ПланыЗакупокОбороты.Номенклатура КАК НоменклатураРегл,
		|	ПланыЗакупокОбороты.НоменклатураПлановая,
		|	ВЫБОР
		|		КОГДА ПланыЗакупокОбороты.НоменклатураПлановая = ЗНАЧЕНИЕ(Справочник.фин_ПлановаяНоменклатура.ПустаяСсылка)
		|			ТОГДА ПланыЗакупокОбороты.Номенклатура
		|		ИНАЧЕ ПланыЗакупокОбороты.НоменклатураПлановая
		|	КОНЕЦ КАК Номенклатура,
		|	ПланыЗакупокОбороты.ОбъектРемонта,
		|	ПланыЗакупокОбороты.Характеристика,
		|	ПланыЗакупокОбороты.КоличествоБазовоеОборот КАК Количество,
		|	ПланыЗакупокОбороты.СуммаУпрОборот КАК Сумма,
		|	ПланыЗакупокОбороты.ПериодПланирования,
		|	ПланыЗакупокОбороты.Заявка"+МодификаторПроекта[2]+Проект+"
		|ПОМЕСТИТЬ ВТ_Запланировано
		|ИЗ
		|	РегистрНакопления.узп_ПланыЗакупок.Обороты(
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
		|				И Сценарий = &Сценарий
		|				И ПериодПланирования >= &НачалоПериода
		|				И ПериодПланирования <= &КонецПериода"+?(Объект.ОбластьПланирования=Перечисления.узп_ОбластиПланированияЗакупок.ПоОрганизации,"","
		|	И Подразделение = &Подразделение")+?(ЗначениеЗаполнено(Объект.Контрагент)," И Контрагент=&Контрагент","")+") КАК ПланыЗакупокОбороты
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланыЗакупокОбороты.Подразделение,
		|	ПланыЗакупокОбороты.Номенклатура КАК НоменклатураРегл,
		|	ПланыЗакупокОбороты.НоменклатураПлановая,
		|	ПланыЗакупокОбороты.ОбъектРемонта,
		|	ПланыЗакупокОбороты.Характеристика,
		|	ПланыЗакупокОбороты.КоличествоБазовоеОборот КАК Количество,
		|	ПланыЗакупокОбороты.СуммаУпрОборот КАК Сумма,
		|	НАЧАЛОПЕРИОДА(ПланыЗакупокОбороты.ПериодПланирования, МЕСЯЦ) КАК ПериодПланирования,
		|	ПланыЗакупокОбороты.Заявка"+МодификаторПроекта[2]+Проект+"
		|ПОМЕСТИТЬ ВТ_Закуплено
		|ИЗ
		|	РегистрНакопления.узп_ПланыЗакупок.Обороты(
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
		|				И Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка)
		|				И ПериодПланирования >= &НачалоПериода
		|				И ПериодПланирования <= &КонецПериода"+?(Объект.ОбластьПланирования=Перечисления.узп_ОбластиПланированияЗакупок.ПоОрганизации,"","
		|	И Подразделение = &Подразделение")+?(ЗначениеЗаполнено(Объект.Контрагент)," И Контрагент=&Контрагент","")+") КАК ПланыЗакупокОбороты
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Запланировано.Подразделение,
		|	ВТ_Запланировано.Приоритет,
		|	ВТ_Запланировано.Номенклатура,
		|	ВТ_Запланировано.ОбъектРемонта,
		|	ВЫБОР
		|		КОГДА ВТ_Запланировано.НоменклатураПлановая = ЗНАЧЕНИЕ(Справочник.фин_ПлановаяНоменклатура.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.узп_ПлановыеХарактеристикиНоменклатуры.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Запланировано.Характеристика
		|	КОНЕЦ КАК Характеристика,
		|	ВТ_Запланировано.Количество - ЕСТЬNULL(ВТ_Закуплено.Количество, 0) - ЕСТЬNULL(ВТ_НеисполненныеЗаказы.Количество, 0) КАК Количество,
		|	ВТ_Запланировано.Сумма - ЕСТЬNULL(ВТ_Закуплено.Сумма, 0) - ЕСТЬNULL(ВТ_НеисполненныеЗаказы.Сумма, 0) КАК Сумма,
		|	ВТ_Запланировано.ПериодПланирования,
		|	ВТ_Запланировано.Заявка"+МодификаторПроекта[3]+Проект+"
		|ПОМЕСТИТЬ ВТ_Расчет
		|ИЗ
		|	ВТ_Запланировано КАК ВТ_Запланировано
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Закуплено КАК ВТ_Закуплено
		|		ПО ВТ_Запланировано.Подразделение = ВТ_Закуплено.Подразделение
		|			И ВТ_Запланировано.ОбъектРемонта = ВТ_Закуплено.ОбъектРемонта
		|			И ВТ_Запланировано.ПериодПланирования = ВТ_Закуплено.ПериодПланирования
		|			И ВТ_Запланировано.Заявка = ВТ_Закуплено.Заявка
		|			И (ВЫБОР
		|				КОГДА ВТ_Запланировано.НоменклатураПлановая = ЗНАЧЕНИЕ(Справочник.фин_ПлановаяНоменклатура.ПустаяСсылка)
		|					ТОГДА ВТ_Запланировано.НоменклатураРегл = ВТ_Закуплено.НоменклатураРегл
		|				ИНАЧЕ ВТ_Запланировано.НоменклатураПлановая = ВТ_Закуплено.НоменклатураПлановая
		|						И ВТ_Запланировано.Характеристика = ВТ_Закуплено.Характеристика
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НеисполненныеЗаказы КАК ВТ_НеисполненныеЗаказы
		|		ПО ВТ_Запланировано.Подразделение = ВТ_НеисполненныеЗаказы.Подразделение
		|			И ВТ_Запланировано.ОбъектРемонта = ВТ_НеисполненныеЗаказы.ОбъектРемонта
		|			И ВТ_Запланировано.Заявка = ВТ_НеисполненныеЗаказы.Заявка
		|			И ВТ_Запланировано.ПериодПланирования = ВТ_НеисполненныеЗаказы.ПериодПланирования
		|			И ВТ_Запланировано.Номенклатура = ВТ_НеисполненныеЗаказы.Номенклатура
		|			И ВТ_Запланировано.Характеристика = ВТ_НеисполненныеЗаказы.Характеристика
		|;

		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Расчет.Подразделение,
		|	ВТ_Расчет.Приоритет,
		|	ВТ_Расчет.Номенклатура,
		|	ВТ_Расчет.ОбъектРемонта,
		|	ВТ_Расчет.Характеристика,
		|	СУММА(ВТ_Расчет.Количество) КАК Количество,
		|	СУММА(ВТ_Расчет.Сумма) КАК Сумма,
		|	ВТ_Расчет.ПериодПланирования,
		|	ВТ_Расчет.Заявка"+МодификаторПроекта[4]+Проект+"
		|ПОМЕСТИТЬ ВТ_Итоги
		|ИЗ
		|	ВТ_Расчет КАК ВТ_Расчет

		|СГРУППИРОВАТЬ ПО
		|	ВТ_Расчет.ОбъектРемонта,
		|	ВТ_Расчет.Номенклатура,
		|	ВТ_Расчет.ПериодПланирования,
		|	ВТ_Расчет.Характеристика,
		|	ВТ_Расчет.Заявка,
		|	ВТ_Расчет.Приоритет,
		|	ВТ_Расчет.Подразделение"+МодификаторПроекта[4]+Проект+"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Итоги.Подразделение,
		|	ВТ_Итоги.Приоритет,
		|	ВТ_Итоги.Номенклатура,
		|	ВТ_Итоги.ОбъектРемонта,
		|	ВТ_Итоги.Характеристика,
		|	ВТ_Итоги.Количество,
		|	ВЫБОР
		|		КОГДА &ВалютаУпр = &ВалютаДокумента
		|			ТОГДА ВТ_Итоги.Сумма
		|		КОГДА КурсыВалютДок.Курс ЕСТЬ NULL 
		|				ИЛИ КурсыВалютСрезПоследних.Курс ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА КурсыВалютДок.Курс = 0
		|				ИЛИ КурсыВалютДок.Кратность = 0
		|				ИЛИ КурсыВалютСрезПоследних.Курс = 0
		|				ИЛИ КурсыВалютСрезПоследних.Кратность = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВТ_Итоги.Сумма * КурсыВалютСрезПоследних.Курс * КурсыВалютДок.Кратность / (КурсыВалютДок.Курс * КурсыВалютСрезПоследних.Кратность)
		|	КОНЕЦ КАК Сумма,
		|	ВТ_Итоги.ПериодПланирования,
		|	ВТ_Итоги.Заявка"+МодификаторПроекта[5]+Проект+",
		|	ВЫБОР 
		|		КОГДА ВТ_Итоги.Количество > 0
		|			ТОГДА ВТ_Итоги.Сумма / ВТ_Итоги.Количество
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ КАК Цена 
		|ПОМЕСТИТЬ ВТ_Принимаемые
		|ИЗ
		|	ВТ_Итоги КАК ВТ_Итоги
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаУпр) КАК КурсыВалютСрезПоследних
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаДокумента) КАК КурсыВалютДок
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВТ_Итоги.Количество > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Принимаемые.Подразделение,
		|	ВТ_Принимаемые.Приоритет,
		|	ВТ_Принимаемые.Номенклатура,
		|	ВТ_Принимаемые.ОбъектРемонта,
		|	ВТ_Принимаемые.Характеристика,
		|	ВТ_Принимаемые.Количество,
		|	ВТ_Принимаемые.Сумма,
		|	ВТ_Принимаемые.Цена,
		|	ВТ_Принимаемые.ПериодПланирования,
		|	ВТ_Принимаемые.Заявка,
		|	ИСТИНА КАК Включать,
		|	&Контрагент КАК Контрагент"+МодификаторПроекта[6]+Проект+"
		|ИЗ
		|	ВТ_Принимаемые КАК ВТ_Принимаемые
		|ГДЕ
		|	ВТ_Принимаемые.Номенклатура.Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Принимаемые.Подразделение,
		|	ВТ_Принимаемые.Приоритет,
		|	ВТ_Принимаемые.Номенклатура,
		|	ВТ_Принимаемые.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	1 КАК Коэффициент,
		|	ВТ_Принимаемые.Номенклатура,
		|	ВТ_Принимаемые.ОбъектРемонта,
		|	ВТ_Принимаемые.Характеристика,
		|	ВТ_Принимаемые.Количество,
		|	ВТ_Принимаемые.Сумма,
		|	ВТ_Принимаемые.Цена,
		|	ВТ_Принимаемые.ПериодПланирования,
		|	ВТ_Принимаемые.Заявка,
		|	ИСТИНА КАК Включать,
		|	&Контрагент КАК Контрагент"+МодификаторПроекта[6]+Проект+"
		|ИЗ
		|	ВТ_Принимаемые КАК ВТ_Принимаемые
		|ГДЕ
		|	ВТ_Принимаемые.Номенклатура.Услуга = ЛОЖЬ";


	Результат = Запрос.ВыполнитьПакет();
    Объект.Товары.Загрузить(Результат[9].Выгрузить());
    Объект.Услуги.Загрузить(Результат[8].Выгрузить());
 	РассчетОбщейСуммыТоварногоДоговора();	

КонецПроцедуры

&НаСервере
Процедура СоздатьПланЗакупок(План,Контрагент)
	ДокументОбъект = ДанныеФормыВЗначение(План,Тип("ДокументОбъект.узп_ЗаказПоставщику"));
	ДокументОбъект.Дата = ТекущаяДата();
	ДокументОбъект.СрокПоставки = '00010101';
	Для Каждого Реквизит Из Метаданные.Обработки.узп_ФормированиеЗаказовПоставщикам.Реквизиты Цикл
		Если ДокументОбъект.Метаданные().Реквизиты.Найти(Реквизит.Имя)<>Неопределено Тогда
			ДокументОбъект[Реквизит.Имя] = Объект[Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	ДокументОбъект.Контрагент = Контрагент;
	СтрокиТовар = Объект.Товары.НайтиСтроки(Новый Структура("Включать,Контрагент",Истина,Контрагент));
	Для Каждого СтрокаТовар Из СтрокиТовар Цикл
		СтрокаТовар.Включать = Ложь;
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТовар);
		НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
		НоваяСтрока.СрокПоставки = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(СтрокаТовар.ПериодПланирования,Объект.Сценарий);
		
		ДанныеОбъекта = фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(ДокументОбъект.Ссылка);
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокументОбъект);
		ТекущиеДанные = НоваяСтрока;
		ДанныеСтрокиТаблицы = фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(ДокументОбъект.Ссылка,"Товары");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
		
		дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта);
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
		ДокументОбъект.СрокПоставки = Макс(ДокументОбъект.СрокПоставки,НоваяСтрока.СрокПоставки);
		НоваяСтрока.ЗаявкаМТС = СтрокаТовар.Заявка;
	КонецЦикла;
	СтрокиТовар = Объект.Услуги.НайтиСтроки(Новый Структура("Включать,Контрагент",Истина,Контрагент));
	Для Каждого СтрокаТовар Из СтрокиТовар Цикл
		СтрокаТовар.Включать = Ложь;
		НоваяСтрока = ДокументОбъект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТовар);
		НоваяСтрока.СрокПоставки = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(СтрокаТовар.ПериодПланирования,Объект.Сценарий);
		НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
		
		ДанныеОбъекта = фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(ДокументОбъект.Ссылка);
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокументОбъект);
		ТекущиеДанные = НоваяСтрока;
		ДанныеСтрокиТаблицы = фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(ДокументОбъект.Ссылка,"Услуги");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
		
		дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта);
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
		ДокументОбъект.СрокПоставки = Макс(ДокументОбъект.СрокПоставки,НоваяСтрока.СрокПоставки);
		НоваяСтрока.ЗаявкаМТС = СтрокаТовар.Заявка;
	КонецЦикла;
	ДокументОбъект.СуммаДокумента = ДокументОбъект.Товары.Итог("Сумма") + ДокументОбъект.Услуги.Итог("Сумма")++?(ДокументОбъект.УчитыватьНДС И НЕ ДокументОбъект.СуммаВключаетНДС,ДокументОбъект.Товары.Итог("СуммаНДС")+ДокументОбъект.Услуги.Итог("СуммаНДС"),0);;
	ЗначениеВДанныеФормы(ДокументОбъект,План);
КонецПроцедуры

&НаСервере
Процедура ВывестиСвод()
	ДеревоНоменклатура = ДанныеФормыВЗначение(ТоварыСвод,Тип("ДеревоЗначений"));
	ДеревоНоменклатура.Строки.Очистить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары",Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Услуги",Объект.Услуги.Выгрузить());
	Запрос.УстановитьПараметр("ТипЦен",Объект.ТипЦен);
	Запрос.УстановитьПараметр("ВалютаДокумента",Объект.ВалютаДокумента);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Товары КАК Товары
		|ГДЕ
		|	Товары.Включать = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Услуги.Номенклатура
		|ПОМЕСТИТЬ ВТ_Услуги
		|ИЗ
		|	&Услуги КАК Услуги
		|ГДЕ
		|	Услуги.Включать = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.Номенклатура
		|ПОМЕСТИТЬ ВТ_База
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Услуги.Номенклатура
		|ИЗ
		|	ВТ_Услуги КАК ВТ_Услуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_База.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ВТ_База.Номенклатура ССЫЛКА Справочник.фин_ПлановаяНоменклатура
		|			ТОГДА ВТ_База.Номенклатура.ТипПозицииВПланеЗакупок
		|		КОГДА ВТ_База.Номенклатура.Услуга
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.узп_ТипыПозицийПлановойНоменклатурыВПланеЗакупок.Услуга)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.узп_ТипыПозицийПлановойНоменклатурыВПланеЗакупок.Товар)
		|	КОНЕЦ КАК ТипПозиции,
		|	ПереченьЦен.Контрагент КАК Контрагент,
		|	ВЫБОР
		|		КОГДА ПереченьЦен.Валюта = &ВалютаДокумента
		|			ТОГДА ПереченьЦен.Цена
		|		КОГДА КурсыВалютДок.Курс ЕСТЬ NULL 
		|				ИЛИ КурсыВалютСрезПоследних.Курс ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА КурсыВалютДок.Курс = 0
		|				ИЛИ КурсыВалютДок.Кратность = 0
		|				ИЛИ КурсыВалютСрезПоследних.Курс = 0
		|				ИЛИ КурсыВалютСрезПоследних.Кратность = 0
		|			ТОГДА 0
		|		ИНАЧЕ ПереченьЦен.Цена * КурсыВалютСрезПоследних.Курс * КурсыВалютДок.Кратность / (КурсыВалютДок.Курс * КурсыВалютСрезПоследних.Кратность)
		|	КОНЕЦ КАК Цена
		|ИЗ
		|	ВТ_База КАК ВТ_База
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.узп_ПереченьЦенПоставщиков.СрезПоследних(, ТипЦен = &ТипЦен) КАК ПереченьЦен
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
		|			ПО ПереченьЦен.Валюта = КурсыВалютСрезПоследних.Валюта
		|		ПО ВТ_База.Номенклатура = ПереченьЦен.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаДокумента) КАК КурсыВалютДок
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_База.Номенклатура.Наименование,
		|	Цена
		|ИТОГИ ПО
		|	ТипПозиции,
		|	Номенклатура";

	Результат = Запрос.Выполнить();

	ВыборкаТипПозиции = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаТипПозиции.Следующий() Цикл
		СтрокаТип = ДеревоНоменклатура.Строки.Добавить();
		СтрокаТип.ТипПозиции 	= ВыборкаТипПозиции.ТипПозиции;

		ВыборкаНоменклатура = ВыборкаТипПозиции.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаНоменклатура.Следующий() Цикл
			СтрокаНоменклатура = СтрокаТип.Строки.Добавить();
			СтрокаНоменклатура.Номенклатура 	= ВыборкаНоменклатура.Номенклатура;
            СтрокаНоменклатура.КартинкаНоменклатура = Истина;
			
			ВыборкаПериодПланирования = ВыборкаНоменклатура.Выбрать();
            Первый = Истина;
			Пока ВыборкаПериодПланирования.Следующий() Цикл
				СтрокаПериод = СтрокаНоменклатура.Строки.Добавить();
				СтрокаПериод.Контрагент 	= ВыборкаПериодПланирования.Контрагент;
				СтрокаПериод.Цена 			= ВыборкаПериодПланирования.Цена;
             	СтрокаПериод.КартинкаКонтрагент = Истина;
                СтрокаПериод.Минимальная 	= Первый;
                СтрокаПериод.Выбрать 		= Первый;
				Если Первый Тогда
					СтрокаНоменклатура.Контрагент 	= ВыборкаПериодПланирования.Контрагент;
					СтрокаНоменклатура.Цена 		= ВыборкаПериодПланирования.Цена;
				КонецЕсли;
				Первый = Ложь;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
    ЗначениеВДанныеФормы(ДеревоНоменклатура,ТоварыСвод);

	
КонецПроцедуры

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ПриОткрытии" в модулех форм всех документов.
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа,
//  ТекПользователь                - ссылка на справочник, определяет текущего пользователя  
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ТипОперации                    - необязаетельный, строка вида операции ("Покупка" или "Продажа"),
//                                   если не передан, то реквизиты, зависящие от вида операции, не заполняются
//
&НаСервереБезКонтекста
Процедура ЗаполнитьШапку(Объект)
	ТекПользователь = Пользователи.ТекущийПользователь();
	  //Объект.ПериодПланирования = НачалоДня(ТекущаяДата());
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.СтруктурноеПодразделение) Тогда
		СтруктурноеПодразделение = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеСтруктурноеПодразделениеОрганизации");
		Если СтруктурноеПодразделение = Неопределено Тогда
			Объект.СтруктурноеПодразделение = Объект.Организация;
		ИначеЕсли ТипЗнч(СтруктурноеПодразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			Объект.СтруктурноеПодразделение = СтруктурноеПодразделение;
		Иначе
			Объект.СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ЗаполнитьШапкуДокумента()

&НаСервере 
Процедура НоменклатураПриИзмененииНаСервере(Идентификатор,ТЧ = "Товары")
	//ДанныеОбъекта 							= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка);
	ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Подразделение, Сценарий, ПериодПланирования, Дата, ТипЦен, Контрагент, ВалютаДокумента, СуммаВключаетНДС, УчитыватьНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ТекущиеДанные 							= Объект[ТЧ].НайтиПоИдентификатору(Идентификатор);
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	//ДанныеСтрокиТаблицы 					= фин_ОбщегоНазначенияСервер.СформироватьСтруктуруРеквизитовОбъекта(Объект.Ссылка,ТЧ);
	ДанныеСтрокиТаблицы						= Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма, СтавкаНДС, Подразделение");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
    
	СведенияОНоменклатуре 					= дог_УправлениеДоговорами.ПолучитьСведенияОНоменклатуре(ДанныеСтрокиТаблицы.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТЧ = "Товары" Тогда
		ДанныеСтрокиТаблицы.ЕдиницаИзмерения  	= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
		ДанныеСтрокиТаблицы.Коэффициент	   		= СведенияОНоменклатуре.Коэффициент;
		ДанныеСтрокиТаблицы.Цена			   	= СведенияОНоменклатуре.Цена;
	КонецЕсли;
	ДанныеСтрокиТаблицы.СтавкаНДС         	= СведенияОНоменклатуре.СтавкаНДС;
	
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта, ТЧ);
	
	// Рассчитываем реквизиты табличной части.
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокиТаблицы);
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуВсегоТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта.СуммаВключаетНДС);
	Если ТЧ = "Товары" Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеСтрокиТаблицы.ЕдиницаИзмерения) Тогда
			ДанныеСтрокиТаблицы.ЕдиницаИзмерения  = ДанныеСтрокиТаблицы.Номенклатура.БазоваяЕдиницаИзмерения;
			ДанныеСтрокиТаблицы.Коэффициент = 1;
		КонецЕсли;
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаКоличествоПриИзменении(ТЧ = "Товары")
	ТекущиеДанные 							= Элементы[ТЧ].ТекущиеДанные;
	
	ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Подразделение, Сценарий, ПериодПланирования, Дата, ТипЦен, Контрагент, ВалютаДокумента, СуммаВключаетНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ДанныеСтрокиТаблицы						= Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма, СтавкаНДС, Подразделение");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
    
	// Рассчитываем реквизиты табличной части.
	дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтрокиТаблицы);
	//дог_УправлениеДоговорамиКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяТабличнойЧасти) Экспорт

	ВалютаРегламентированногоУчета = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ВалютаРегламентированногоУчета");

	ВалютаДокумента = ДокументОбъект.ВалютаДокумента;  
	КурсДок         = 1;
	КратностьДок    = 1;
	
	// Из регистра сведений ЦеныНоменклатуры по Номенклатура, ТипЦен получить ресурсы, 
	// установить коэффициент.
	// Если не заданы значения измерений, то устанавливаем по справочнику
	ТипЦен = ДокументОбъект.ТипЦен;
	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда 
		// берем из самого реквизита Номенклатура
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = 1;
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе
		// из регистра
		Цена = дог_УправлениеЦенообразованием.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
										ДокументОбъект.ТипЦен, ДокументОбъект.Дата,
										ВалютаДокумента, КурсДок, КратностьДок, ДокументОбъект.Организация);
		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = дог_УправлениеДоговорами.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
																					Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
																					ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
																					ДокументОбъект.УчитыватьНДС, 
																					ДокументОбъект.СуммаВключаетНДС, 
																					0);
		КонецЕсли;
		// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = фин_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Номенклатура, "БазоваяЕдиницаИзмерения");
			СтрокаТабличнойЧасти.Коэффициент      = 1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Товары" и ИмяТаблицы <> "Услуги"Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СведенияОСпискеНоменклатуры = дог_УправлениеДоговорами.ПолучитьСведенияОСпискеНоменклатуры(
		фин_ОбщегоНазначенияКлиентСервер.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект);
		
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		Если ИмяТаблицы = "Товары" Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
			СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
		КонецЕсли;

		СтрокаТабличнойЧасти = фин_ОбщегоНазначенияКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
						
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			Если ИмяТаблицы = "Товары" Тогда
				СтрокаТабличнойЧасти.Коэффициент = СведенияОНоменклатуре.Коэффициент;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

