////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = общ_РаботаСоСтруктурнымиПодразделениями.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <АктуализируемыеДанные>

&НаКлиенте
Процедура АктуализируемыеДанныеКонтролироватьСрокиПоставкиПриИзменении(Элемент)
	Элементы.АктуализируемыеДанные.ТекущиеДанные.ПризнакИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура АктуализируемыеДанныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.АктуализируемыеДанные.ТекущиеДанные.ПризнакИзменен = Истина;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАктуализацию(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Организация""!'"), , "СтруктурноеПодразделениеОрганизация", "");
		Возврат;
	КонецЕсли;
	
	ВыполнитьАктуализациюСервер(Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ДатаНачала, Объект.ДатаОкончания);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметку(Команда)
	Для Каждого СтрокаТЗ Из Объект.АктуализируемыеДанные Цикл
		Если НЕ СтрокаТЗ.КонтролироватьСрокиПоставки Тогда
			СтрокаТЗ.КонтролироватьСрокиПоставки = Истина;
			СтрокаТЗ.ПризнакИзменен = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметку(Команда)
	Для Каждого СтрокаТЗ Из Объект.АктуализируемыеДанные Цикл
		Если СтрокаТЗ.КонтролироватьСрокиПоставки Тогда
			СтрокаТЗ.КонтролироватьСрокиПоставки = Ложь;
			СтрокаТЗ.ПризнакИзменен = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры)

	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		общ_РаботаСоСтруктурнымиПодразделениями.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	общ_РаботаСоСтруктурнымиПодразделениями.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
			
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Объект.Организация = фин_ОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяОрганизация");
	
	Для Каждого Реквизит Из Метаданные.Обработки.дог_АктуализацияДанныхПоИсполнениюДоговоров.Реквизиты Цикл
		Если Параметры.Свойство(Реквизит.Имя) Тогда
			Объект[Реквизит.Имя] = Параметры[Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	Объект.ДатаНачала = фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("дог_ДатаНачалаКонтроляСроковПоставокПоДоговорам");
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПризнакОтображенияСтруктурныхПодразделений();
	
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	общ_РаботаСоСтруктурнымиПодразделениями.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		
КонецПроцедуры 

&НаСервере
Процедура ВыполнитьАктуализациюСервер(Организация, СтруктурноеПодразделение, ДатаНачала, ДатаОкончания)
	УстановитьПривилегированныйРежим(Истина);
	
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("дог_УчитыватьИсполнениеТоварныхДоговоров") Тогда
		// обработка документов регистрации договоров

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНачалаВеденияУчета", 	фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("дог_ДатаНачалаКонтроляСроковПоставокПоДоговорам")-1);
		Запрос.УстановитьПараметр("СписокАктуализации", 		Объект.АктуализируемыеДанные.Выгрузить());
		Запрос.УстановитьПараметр("Организация", 				Организация);
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", 	СтруктурноеПодразделение);
		Запрос.УстановитьПараметр("НачалоПериода", 				ДатаНачала);
		Запрос.УстановитьПараметр("КонецПериода", 				ДатаОкончания);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СписокАктуализации.Контрагент,
			|	СписокАктуализации.ДоговорКонтрагента,
			|	СписокАктуализации.ПризнакИзменен,
			|	СписокАктуализации.КонтролироватьСрокиПоставки
			|ПОМЕСТИТЬ ВТ_Фильтр
			|ИЗ
			|	&СписокАктуализации КАК СписокАктуализации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.Договор
			|ПОМЕСТИТЬ ВТ_БолееРанние
			|ИЗ
			|	РегистрСведений.дог_ДоговорыИДополнительныеСоглашения.СрезПоследних(
			|			&ДатаНачалаВеденияУчета,
			|			Организация = &Организация
			|				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК дог_ДоговорыИДополнительныеСоглашенияСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	дог_РегистрацияДоговоров.Регистратор КАК Ссылка,
			|	ВТ_Фильтр.Контрагент КАК Контрагент,
			|	ВТ_Фильтр.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	ВТ_Фильтр.КонтролироватьСрокиПоставки КАК КонтролироватьСрокиПоставки,
			|	дог_РегистрацияДоговоров.Период КАК Дата,
			|	ВТ_БолееРанние.Договор КАК ДоговорДоДатыНачалаВедения
			|ИЗ
			|	РегистрНакопления.дог_ИсполнениеДоговоров.Обороты(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			Регистратор,
			|			ДоговорКонтрагента В
			|				(ВЫБРАТЬ
			|					ВТ_Фильтр.ДоговорКонтрагента
			|				ИЗ
			|					ВТ_Фильтр КАК ВТ_Фильтр
			|				ГДЕ
			|					ВТ_Фильтр.ПризнакИзменен = ИСТИНА)) КАК дог_РегистрацияДоговоров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Фильтр КАК ВТ_Фильтр
			|		ПО дог_РегистрацияДоговоров.ДоговорКонтрагента = ВТ_Фильтр.ДоговорКонтрагента
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_БолееРанние КАК ВТ_БолееРанние
			|		ПО дог_РегистрацияДоговоров.ДоговорКонтрагента = ВТ_БолееРанние.Договор
			|ГДЕ
			|	ВТ_Фильтр.ПризнакИзменен = ИСТИНА
			|
			|УПОРЯДОЧИТЬ ПО
			|	дог_РегистрацияДоговоров.Период
			|ИТОГИ
			|	МАКСИМУМ(КонтролироватьСрокиПоставки),
			|	МАКСИМУМ(ДоговорДоДатыНачалаВедения)
			|ПО
			|	Контрагент,
			|	ДоговорКонтрагента";
			Результат = Запрос.Выполнить();

			ВыборкаКонтрагент = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаКонтрагент.Следующий() Цикл
				ВыборкаДоговорКонтрагента = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

				Пока ВыборкаДоговорКонтрагента.Следующий() Цикл
					
					ПринадлежностьДоговора = "/ " + Строка(ВыборкаКонтрагент.Контрагент) + "/ " + Строка(ВыборкаДоговорКонтрагента.ДоговорКонтрагента);
 					Если ВыборкаДоговорКонтрагента.ДоговорДоДатыНачалаВедения<>Null Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не подлежат обновлению данные договора, т.к. он зарегистрирован до даты начала контроля сроков поставки: '") + ПринадлежностьДоговора);
						Продолжить;
		            КонецЕсли;

					ВыборкаДетальныеЗаписи = ВыборкаДоговорКонтрагента.Выбрать();

					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Если ТипЗнч(ВыборкаДетальныеЗаписи.Ссылка)=Тип("ДокументСсылка.дог_РегистрацияДоговоров") Тогда
							// корректировка документа регистрации
							ДокументРегистрации = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
							ДокументРегистрации.КонтролироватьСрокиПоставки = ВыборкаДетальныеЗаписи.КонтролироватьСрокиПоставки;
							Попытка
								ДокументРегистрации.ДополнительныеСвойства.Вставить("ВнешняяОбработка");
								ДокументРегистрации.Записать(РежимЗаписиДокумента.Запись);
							Исключение
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось обновить данные документа: '") + Строка(ВыборкаДетальныеЗаписи.Ссылка) + ПринадлежностьДоговора);
								Продолжить;
							КонецПопытки;
							// обработка движений по регистру графиков поставок
							Если НЕ ВыборкаДетальныеЗаписи.КонтролироватьСрокиПоставки Тогда
								НаборЗаписей = РегистрыНакопления.дог_ГрафикиПоставокПоДоговорам.СоздатьНаборЗаписей();
								НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Ссылка);
								Попытка
									НаборЗаписей.Записать();
								Исключение
									ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось обновить данные регистра накопления """"Графики поставок по договорам"""" по документу: '") + Строка(ВыборкаДетальныеЗаписи.Ссылка)+ПринадлежностьДоговора);
									Продолжить;
								КонецПопытки;
							Иначе
								Если НЕ ВыполнитьАктуализациюГрафикаПоДокументу(ВыборкаДетальныеЗаписи.Ссылка) Тогда
									ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось обновить данные регистра накопления """"Графики поставок по договорам"""" по документу: '") + Строка(ВыборкаДетальныеЗаписи.Ссылка)+ПринадлежностьДоговора);
									Продолжить;
								КонецЕсли;
							КонецЕсли;
							// корректировка регистра договоров
							НаборЗаписей = РегистрыСведений.дог_ДоговорыИДополнительныеСоглашения.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Ссылка);
							НаборЗаписей.Прочитать();
							Для Каждого Запись Из НаборЗаписей Цикл
								Запись.КонтролироватьСрокиПоставки = ВыборкаДетальныеЗаписи.КонтролироватьСрокиПоставки;
							КонецЦикла;
							Попытка
								НаборЗаписей.Записать();
							Исключение
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось обновить данные регистра сведений """"Договоры и дополнительные соглашения"""" по документу: '") + Строка(ВыборкаДетальныеЗаписи.Ссылка)+ПринадлежностьДоговора);
								Продолжить;
							КонецПопытки;
						Иначе
							Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("дог_РежимКонтроляСроковПоставокПоДоговорам")=Перечисления.дог_РежимУчетаИсполненияСроковПоставкиПоДоговорам.ПриПроведенииПервичныхДокументов Тогда
								ПризнакОтказ = Ложь;
								дог_УправлениеДоговорами.ПриПроведенииДокументовПоДоговоруОбработкаПроведения(ВыборкаДетальныеЗаписи.Ссылка,ПризнакОтказ,РежимПроведенияДокумента.Оперативный);
								Если ПризнакОтказ Тогда
									ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'При отражении исполнения договоров не удалось обновить данные по документу: '") + Строка(ВыборкаДетальныеЗаписи.Ссылка));
								КонецЕсли;
							Иначе
								НаборЗаписей = РегистрыНакопления.дог_ГрафикиПоставокПоДоговорам.СоздатьНаборЗаписей();
								НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Ссылка);
								Попытка
									НаборЗаписей.Записать();
								Исключение
									ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось обновить данные регистра накопления """"Графики поставок по договорам"""" по документу: '") + Строка(ВыборкаДетальныеЗаписи.Ссылка));
									Продолжить;
								КонецПопытки;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		
	Иначе
	
		// обработка документов регистрации договоров

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНачалаВеденияУчета", 	фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("дог_ДатаНачалаКонтроляСроковПоставокПоДоговорам")-1);
		Запрос.УстановитьПараметр("СписокАктуализации", 		Объект.АктуализируемыеДанные.Выгрузить());
		Запрос.УстановитьПараметр("Организация", 				Организация);
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", 	СтруктурноеПодразделение);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СписокАктуализации.Контрагент,
			|	СписокАктуализации.ДоговорКонтрагента,
			|	СписокАктуализации.ПризнакИзменен,
			|	СписокАктуализации.КонтролироватьСрокиПоставки
			|ПОМЕСТИТЬ ВТ_Фильтр
			|ИЗ
			|	&СписокАктуализации КАК СписокАктуализации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.Договор
			|ПОМЕСТИТЬ ВТ_БолееРанние
			|ИЗ
			|	РегистрСведений.дог_ДоговорыИДополнительныеСоглашения.СрезПоследних(
			|			&ДатаНачалаВеденияУчета,
			|			Организация = &Организация
			|				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК дог_ДоговорыИДополнительныеСоглашенияСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	дог_РегистрацияДоговоров.Ссылка,
			|	ВТ_Фильтр.Контрагент КАК Контрагент,
			|	ВТ_Фильтр.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	ВТ_Фильтр.КонтролироватьСрокиПоставки КАК КонтролироватьСрокиПоставки,
			|	дог_РегистрацияДоговоров.Дата,
			|	ВТ_БолееРанние.Договор КАК ДоговорДоДатыНачалаВедения
			|ИЗ
			|	Документ.дог_РегистрацияДоговоров КАК дог_РегистрацияДоговоров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Фильтр КАК ВТ_Фильтр
			|		ПО дог_РегистрацияДоговоров.Контрагент = ВТ_Фильтр.Контрагент
			|			И (ВЫБОР
			|				КОГДА дог_РегистрацияДоговоров.ВидОперации = ЗНАЧЕНИЕ(Перечисление.дог_ВидыОперацийДоговор.Договор)
			|						ИЛИ дог_РегистрацияДоговоров.ВариантРегистрацииДополнительногоСоглашения <> ЗНАЧЕНИЕ(Перечисление.дог_ВариантыРегистрацииДополнительныхСоглашений.ПереносДоговорныхОбязательствНаНовыйДоговорКонтрагента)
			|					ТОГДА дог_РегистрацияДоговоров.ДоговорКонтрагента = ВТ_Фильтр.ДоговорКонтрагента
			|				КОГДА дог_РегистрацияДоговоров.ВариантРегистрацииДополнительногоСоглашения = ЗНАЧЕНИЕ(Перечисление.дог_ВариантыРегистрацииДополнительныхСоглашений.ПереносДоговорныхОбязательствНаНовыйДоговорКонтрагента)
			|					ТОГДА дог_РегистрацияДоговоров.ПервоначальныйДоговор = ВТ_Фильтр.ДоговорКонтрагента
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_БолееРанние КАК ВТ_БолееРанние
			|		ПО (ВЫБОР
			|				КОГДА дог_РегистрацияДоговоров.ВидОперации = ЗНАЧЕНИЕ(Перечисление.дог_ВидыОперацийДоговор.Договор)
			|						ИЛИ дог_РегистрацияДоговоров.ВариантРегистрацииДополнительногоСоглашения <> ЗНАЧЕНИЕ(Перечисление.дог_ВариантыРегистрацииДополнительныхСоглашений.ПереносДоговорныхОбязательствНаНовыйДоговорКонтрагента)
			|					ТОГДА дог_РегистрацияДоговоров.ДоговорКонтрагента = ВТ_БолееРанние.Договор
			|				КОГДА дог_РегистрацияДоговоров.ВариантРегистрацииДополнительногоСоглашения = ЗНАЧЕНИЕ(Перечисление.дог_ВариантыРегистрацииДополнительныхСоглашений.ПереносДоговорныхОбязательствНаНовыйДоговорКонтрагента)
			|					ТОГДА дог_РегистрацияДоговоров.ПервоначальныйДоговор = ВТ_БолееРанние.Договор
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)
			|ГДЕ
			|	ВТ_Фильтр.ПризнакИзменен = ИСТИНА
			|	И дог_РегистрацияДоговоров.Проведен
			|	И дог_РегистрацияДоговоров.ВидОперацииПоДоговору = ЗНАЧЕНИЕ(Перечисление.дог_ВидыОперацийПоДоговору.ТоварныеОперации)
			|
			|УПОРЯДОЧИТЬ ПО
			|	дог_РегистрацияДоговоров.Дата
			|ИТОГИ
			|	МАКСИМУМ(КонтролироватьСрокиПоставки)
			|ПО
			|	Контрагент,
			|	ДоговорКонтрагента";

		Результат = Запрос.Выполнить();

		ВыборкаКонтрагент = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаКонтрагент.Следующий() Цикл
			ВыборкаДоговорКонтрагента = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаДоговорКонтрагента.Следующий() Цикл
				
				ПринадлежностьДоговора = "/ " + Строка(ВыборкаКонтрагент.Контрагент) + "/ " + Строка(ВыборкаДоговорКонтрагента.ДоговорКонтрагента);

				ВыборкаДетальныеЗаписи = ВыборкаДоговорКонтрагента.Выбрать();

				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.ДоговорДоДатыНачалаВедения<>Null Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не подлежат обновлению данные договора, т.к. он зарегистрирован до даты начала контроля сроков поставки: '") + ПринадлежностьДоговора);
						Продолжить;
	                КонецЕсли;
					// корректировка документа регистрации
					ДокументРегистрации = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					ДокументРегистрации.КонтролироватьСрокиПоставки = ВыборкаДетальныеЗаписи.КонтролироватьСрокиПоставки;
					Попытка
						ДокументРегистрации.ДополнительныеСвойства.Вставить("ВнешняяОбработка");
						ДокументРегистрации.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось обновить данные документа: '") + Строка(ВыборкаДетальныеЗаписи.Ссылка)+ПринадлежностьДоговора);
						Продолжить;
					КонецПопытки;
					// обработка движений по регистру графиков поставок
					Если НЕ ВыборкаДетальныеЗаписи.КонтролироватьСрокиПоставки Тогда
						НаборЗаписей = РегистрыНакопления.дог_ГрафикиПоставокПоДоговорам.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Ссылка);
						Попытка
							НаборЗаписей.Записать();
						Исключение
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось обновить данные регистра накопления ""Графики поставок по договорам"" по документу: '") + Строка(ВыборкаДетальныеЗаписи.Ссылка) + ПринадлежностьДоговора);
							Продолжить;
						КонецПопытки;
					Иначе
						Если НЕ ВыполнитьАктуализациюГрафикаПоДокументу(ВыборкаДетальныеЗаписи.Ссылка) Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось обновить данные регистра накопления ""Графики поставок по договорам"" по документу: '") + Строка(ВыборкаДетальныеЗаписи.Ссылка) + ПринадлежностьДоговора);
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					// корректировка регистра договоров
					НаборЗаписей = РегистрыСведений.дог_ДоговорыИДополнительныеСоглашения.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Ссылка);
					НаборЗаписей.Прочитать();
					Для Каждого Запись Из НаборЗаписей Цикл
						Запись.КонтролироватьСрокиПоставки = ВыборкаДетальныеЗаписи.КонтролироватьСрокиПоставки;
					КонецЦикла;
					Попытка
						НаборЗаписей.Записать();
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось обновить данные регистра сведений ""Договоры и дополнительные соглашения"" по документу: '") + Строка(ВыборкаДетальныеЗаписи.Ссылка) + ПринадлежностьДоговора);
						Продолжить;
					КонецПопытки;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьАктуализациюГрафикаПоДокументу(Документ)
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыНакопления.дог_ГрафикиПоставокПоДоговорам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Документ);
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось обновить данные регистра накопления """"Графики поставок по договорам"""" по документу: '") + Строка(Документ));
		Возврат Ложь;
	КонецПопытки;
	Запрос = Новый Запрос;
	Если Документ.ВидОперации=Перечисления.дог_ВидыОперацийДоговор.ДополнительноеСоглашение И Документ.ВариантРегистрацииДополнительногоСоглашения=Перечисления.дог_ВариантыРегистрацииДополнительныхСоглашений.КорректировкаСуществующегоДоговораКонтрагента И Документ.СпособКорректировкиТоварнойСпецификацииДоговора = Перечисления.дог_СпособыКорректировкиТоварнойСпецификацииДоговора.УказаниеИзменяемыхНоменклатурныхПозиций Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СпецификацияДоговоров.НоменклатураОС КАК Номенклатура,
			|	СпецификацияДоговоров.ДатаПоставки КАК ДатаПоставки,
			|	СУММА(СпецификацияДоговоров.Количество * ВЫБОР
			|			КОГДА СпецификацияДоговоров.Коэффициент = 0
			|				ТОГДА 1
			|			ИНАЧЕ СпецификацияДоговоров.Коэффициент
			|		КОНЕЦ) КАК Количество
			|ПОМЕСТИТЬ Док
			|ИЗ
			|	РегистрСведений.дог_СпецификацияДоговоров.СрезПоследних(
			|			&Момент,
			|			Договор = &ДоговорКонтрагента
			|				И Организация = &Организация) КАК СпецификацияДоговоров
			|ГДЕ
			|	СпецификацияДоговоров.Количество <> 0
			|
			|СГРУППИРОВАТЬ ПО
			|	СпецификацияДоговоров.НоменклатураОС,
			|	СпецификацияДоговоров.ДатаПоставки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	Док.ДатаПоставки КАК ДатаПоставки,
			|	Док.Номенклатура,
			|	Док.Количество,
			|	ИсполнениеДоговоровОбороты.НоменклатураОС,
			|	ИсполнениеДоговоровОбороты.КоличествоПриход
			|ИЗ
			|	Док КАК Док
			|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.дог_ГрафикиПоставокПоДоговорам.Обороты(
			|				,
			|				&Момент,
			|				,
			|				ДоговорКонтрагента = &ДоговорКонтрагента
			|					И Организация = &Организация) КАК ИсполнениеДоговоровОбороты
			|		ПО Док.Номенклатура = ИсполнениеДоговоровОбороты.НоменклатураОС
			|			И Док.ДатаПоставки = ИсполнениеДоговоровОбороты.ДатаПоставки
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаПоставки";
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Таб.Номенклатура КАК Номенклатура,
			|	Таб.ДатаПоставки КАК ДатаПоставки,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(Таб.Коэффициент, 0) <> 0
			|			ТОГДА Таб.Количество * Таб.Коэффициент
			|		ИНАЧЕ Таб.Коэффициент
			|	КОНЕЦ КАК Количество
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	Документ.дог_РегистрацияДоговоров.Товары КАК Таб
			|ГДЕ Таб.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Таб.Номенклатура КАК Номенклатура,
			|	Таб.ДатаПоставки КАК ДатаПоставки,
			|	Таб.Количество
			|ПОМЕСТИТЬ Услуги
			|ИЗ
			|	Документ.дог_РегистрацияДоговоров.Услуги КАК Таб
			|ГДЕ Таб.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Таб.Номенклатура КАК Номенклатура,
			|	Таб.ДатаПоставки КАК ДатаПоставки,
			|	Таб.Количество КАК Количество
			|ПОМЕСТИТЬ ОС
			|ИЗ
			|	Документ.дог_РегистрацияДоговоров.ОС КАК Таб
			|ГДЕ Таб.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Номенклатура,
			|	ВложенныйЗапрос.ДатаПоставки КАК ДатаПоставки,
			|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
			|ПОМЕСТИТЬ Док
			|ИЗ
			|	(ВЫБРАТЬ
			|		ОС.Номенклатура КАК Номенклатура,
			|		ОС.ДатаПоставки КАК ДатаПоставки,
			|		ОС.Количество КАК Количество
			|	ИЗ
			|		ОС КАК ОС
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Товары.Номенклатура,
			|		Товары.ДатаПоставки КАК ДатаПоставки,
			|		Товары.Количество
			|	ИЗ
			|		Товары КАК Товары
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Услуги.Номенклатура,
			|		Услуги.ДатаПоставки КАК ДатаПоставки,
			|		Услуги.Количество
			|	ИЗ
			|		Услуги КАК Услуги) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.Номенклатура,
			|	ВложенныйЗапрос.ДатаПоставки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&ДоговорКонтрагента КАК ДоговорКонтрагента, 
			|	Док.Номенклатура,
			|	Док.ДатаПоставки КАК ДатаПоставки,
			|	Док.Количество,
			|	ИсполнениеДоговоровОбороты.НоменклатураОС,
			|	ИсполнениеДоговоровОбороты.КоличествоПриход
			|ИЗ
			|	Док КАК Док
			|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.дог_ГрафикиПоставокПоДоговорам.Обороты(
			|				,
			|				&Момент,
			|				,
			|				ДоговорКонтрагента = &ДоговорКонтрагента
			|					И Организация = &Организация) КАК ИсполнениеДоговоровОбороты
			|		ПО Док.Номенклатура = ИсполнениеДоговоровОбороты.НоменклатураОС
			|			И Док.ДатаПоставки = ИсполнениеДоговоровОбороты.ДатаПоставки";
			
		Если Документ.ВариантРегистрацииДополнительногоСоглашения=Перечисления.дог_ВариантыРегистрацииДополнительныхСоглашений.ПереносДоговорныхОбязательствНаНовыйДоговорКонтрагента Тогда
			Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	&ПервоначальныйДоговор, 
			|	NULL,
			|	ИсполнениеДоговоровОбороты.ДатаПоставки,
			|	NULL,
			|	ИсполнениеДоговоровОбороты.НоменклатураОС,
			|	ИсполнениеДоговоровОбороты.КоличествоПриход - ИсполнениеДоговоровОбороты.КоличествоРасход
			|ИЗ
			|	РегистрНакопления.дог_ГрафикиПоставокПоДоговорам.Обороты(
			|				,
			|				&Момент,
			|				,
			|				ДоговорКонтрагента = &ПервоначальныйДоговор
			|					И Организация = &Организация) КАК ИсполнениеДоговоровОбороты
			|	ГДЕ ИсполнениеДоговоровОбороты.КоличествоПриход - ИсполнениеДоговоровОбороты.КоличествоРасход >0
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаПоставки";
			
			Запрос.УстановитьПараметр("ПервоначальныйДоговор",Документ.ПервоначальныйДоговор);
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	ДатаПоставки";
		КонецЕсли;
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка",				Документ.Ссылка);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",	Документ.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Организация",		Документ.Организация);
	Запрос.УстановитьПараметр("Момент",				Новый МоментВремени(Документ.Дата,Документ.Ссылка));	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Номенклатура = Null Тогда
			Номенклатура = Выборка.НоменклатураОС;
			Количество = -Выборка.КоличествоПриход;
		ИначеЕсли Выборка.НоменклатураОС = Null Тогда
			Номенклатура = Выборка.Номенклатура;
			Количество = Выборка.Количество;
		Иначе
			Номенклатура = Выборка.Номенклатура;
			Количество = Выборка.Количество - Выборка.КоличествоПриход;
		КонецЕсли;
		Если Количество <> 0 Тогда
			Движение = НаборЗаписей.ДобавитьПриход();
			Движение.Период 						= Документ.Дата;
			Движение.Организация 					= Документ.Организация;
			Движение.СтруктурноеПодразделение 		= Документ.СтруктурноеПодразделение;
			Движение.ДоговорКонтрагента 			= Выборка.ДоговорКонтрагента;
			Движение.НоменклатураОС 				= Номенклатура;
			Движение.Контрагент 					= Документ.Контрагент;
			Движение.ВидДоговораПоТоварнымОперациям = Документ.ВидДоговораПоТоварнымОперациям;
			Движение.ДатаПоставки 					= Выборка.ДатаПоставки;
			Движение.Количество 					= Количество;
		КонецЕсли;
	КонецЦикла;
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось обновить данные регистра накопления ""Графики поставок по договорам"" по документу :'") + Строка(Документ));
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ЗаполнитьНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	дог_ДоговорыИДополнительныеСоглашенияСрезПоследних.Договор
		|ПОМЕСТИТЬ ВТ_БолееРанние
		|ИЗ
		|	РегистрСведений.дог_ДоговорыИДополнительныеСоглашения.СрезПоследних(
		|			&ДатаНачалаВеденияУчета,
		|			Организация = &Организация
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК дог_ДоговорыИДополнительныеСоглашенияСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыИДополнительныеСоглашения.Договор КАК ДоговорКонтрагента,
		|	ДоговорыИДополнительныеСоглашения.Договор.Владелец КАК Контрагент,
		|	ДоговорыИДополнительныеСоглашения.КонтролироватьСрокиПоставки
		|ИЗ
		|	РегистрСведений.дог_ДоговорыИДополнительныеСоглашения.СрезПоследних(
		|			,
		|			Организация = &Организация
		|				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ДоговорыИДополнительныеСоглашения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_БолееРанние КАК ВТ_БолееРанние
		|		ПО ДоговорыИДополнительныеСоглашения.Договор = ВТ_БолееРанние.Договор
		|ГДЕ
		|	ВТ_БолееРанние.Договор ЕСТЬ NULL 
		|	И ДоговорыИДополнительныеСоглашения.ВидОперацииПоДоговору = ЗНАЧЕНИЕ(Перечисление.дог_ВидыОперацийПоДоговору.ТоварныеОперации)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент,
		|	ДоговорКонтрагента";

	Запрос.УстановитьПараметр("ДатаНачалаВеденияУчета", 	фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("дог_ДатаНачалаКонтроляСроковПоставокПоДоговорам")-1);
	Запрос.УстановитьПараметр("Организация", 				Объект.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", 	Объект.СтруктурноеПодразделение);

	Результат = Запрос.Выполнить();

	Объект.АктуализируемыеДанные.Загрузить(Результат.Выгрузить());

КонецПроцедуры
