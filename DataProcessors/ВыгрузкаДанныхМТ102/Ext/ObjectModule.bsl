#Если Клиент Тогда

Перем мВидОперации;
Перем мКоличествоРаботниковВФайле;
Перем мФормироватьОтдельныеФайлы;
Перем мВключатьПолеFT;
Перем мНомерФайла;
Перем мВключатьПолеPSO;
Перем мВключатьПолеPRT;
Перем мПолеPERIODвЗаголовке;

Перем мТекстВыгрузки;

Перем мНомерППИ;

// текстовые строки с описание используемых форматов выгрузки

// форматы выгрузки данных о перечислении пенсионных взносов и социальных отчислений
Перем мМТ102СПереносом Экспорт;
Перем мМТ102БезПереноса Экспорт;

// форматы выгрузки данных о перечислении заработной платы
Перем мПеречислениеЗарплатыВНародныйБанк Экспорт;
Перем мПеречислениеЗарплатыВКазкоммерцбанк Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ФОРМИРОВАНИЯ ФАЙЛОВ

// Возвращает Истина, если вид операции связан с перечислением на карт-счета физлиц.
//
Функция ЭтоПеречислениеНаКартСчета() Экспорт

	Если Документ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов
			Или Документ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // ЭтоПеречислениеНаКартСчета()

// Формирует запрос по платежному поручению для перечисления ОПВ и СО
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоПлатежномуПоручению()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДокументСсылка", Документ);
	Запрос.УстановитьПараметр("парамДата", Документ.Дата);
	Запрос.УстановитьПараметр("парамРуководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("парамГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтерДляПодписиБанковскихДокументов);
	
	ИмяРеквизитаБИК = УправлениеДенежнымиСредствами.ПолучитьИмяРеквизитаБИКБанка(Документ.Дата);
	ИмяКодБанкаВПлатежнойСистеме = УправлениеДенежнымиСредствами.ПолучитьИмяРеквизитаКодБанкаВПлатежнойСистеме(Документ.Дата);
	
	УчетСтруктурныхПодразделений = Документ.Метаданные().Реквизиты.Найти("СтруктурноеПодразделениеОтправитель") <> Неопределено;
	Если УчетСтруктурныхПодразделений Тогда
		Если ЗначениеЗаполнено(Документ["СтруктурноеПодразделениеОтправитель"]) Тогда
			Если Документ["СтруктурноеПодразделениеОтправитель"].УказыватьРеквизитыГоловнойОрганизации Тогда
				СтруктурнаяЕдиница = "Организация";
			Иначе
				СтруктурнаяЕдиница = "СтруктурноеПодразделениеОтправитель";
			КонецЕсли;
		Иначе
			СтруктурнаяЕдиница = "Организация";
		КонецЕсли;		
	Иначе
		СтруктурнаяЕдиница = "Организация";
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручениеИсходящее.Организация КАК Организация,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее." + СтруктурнаяЕдиница + ".НаименованиеПолное КАК СТРОКА(1000)) КАК ОрганизацияНаименованиеПолное,  
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации КАК ОрганизацияБанковскийСчетСсылка,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета КАК ОрганизацияБанковскийСчет,
	|	ПлатежноеПоручениеИсходящее." + СтруктурнаяЕдиница + ".ИдентификационныйНомер КАК ОрганизацияИдентификационныйНомер,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк КАК БанкОрганизацииСсылка,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк." + ИмяРеквизитаБИК + " КАК ОрганизацияБИК,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк." + ИмяКодБанкаВПлатежнойСистеме + " КАК ОрганизацияКодБанкаВПлатежнойСистеме,
	|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Организация.КБЕ, 1, 1) КАК ОрганизацияПризнакРезидентства,
	|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Организация.КБЕ, 2, 1) КАК ОрганизацияСекторЭкономики,
	|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследнихРуководитель.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследнихРуководитель.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОРуководителя,
	|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследнихГлБухгалтер.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследнихГлБухгалтер.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБухгалтер.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБухгалтер.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБухгалтер.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБухгалтер.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОГлБухгалтера,
	|	ПлатежноеПоручениеИсходящее.Дата КАК ДатаПлатежногоПоручения,
	|	ПлатежноеПоручениеИсходящее.Номер КАК НомерПлатежногоПоручения,
	|	ПлатежноеПоручениеИсходящее.КодНазначенияПлатежа КАК КодНазначенияПлатежа,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.НазначениеПлатежа КАК СТРОКА(1000)) КАК НазначениеПлатежа,
	|	ПеречислениеВФонды.ПериодПлатежа КАК ПериодПлатежа,";
	
	Если мВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда
		Запрос.Текст = Запрос.Текст + 
		"	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета КАК ГЦВПБанковскийСчет,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента КАК ГЦВПБанковскийСчетСсылка,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк." + ИмяРеквизитаБИК + " КАК ГЦВПБИК,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк КАК ГЦВПБанкСсылка,
		|	ПлатежноеПоручениеИсходящее.Контрагент КАК ГЦВПСсылка,
		|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.Контрагент.НаименованиеПолное КАК СТРОКА(1000)) КАК ГЦВПНаименованиеПолное,
		|	ПлатежноеПоручениеИсходящее.Контрагент.ИдентификационныйКодЛичности КАК ГЦВПИдентификационныйНомер,
		|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Контрагент.КБЕ, 1, 1) КАК ГЦВППризнакРезидентства,
		|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Контрагент.КБЕ, 2, 1) КАК ГЦВПСекторЭкономики";
		
	ИначеЕсли мВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
		
		Запрос.Текст = Запрос.Текст + 
		"	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.Контрагент.НаименованиеПолное КАК СТРОКА(1000)) КАК ГЦВПНаименованиеПолное,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета КАК ГЦВПБанковскийСчет,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента КАК ГЦВПБанковскийСчетСсылка,
		|	ПлатежноеПоручениеИсходящее.Контрагент КАК ГЦВПСсылка,
		|	ПлатежноеПоручениеИсходящее.Контрагент.ИдентификационныйКодЛичности КАК ГЦВПИдентификационныйНомер,
		|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Контрагент.КБЕ, 1, 1) КАК ГЦВППризнакРезидентства,
		|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Контрагент.КБЕ, 2, 1) КАК ГЦВПСекторЭкономики,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк." + ИмяРеквизитаБИК + " КАК ГЦВПБИК,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк КАК ГЦВПБанкСсылка";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + 
	"
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&парамДата, ОтветственноеЛицо = &парамРуководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛицСрезПоследнихРуководитель
	|			ПО ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФизическоеЛицо = ФИОФизЛицСрезПоследнихРуководитель.ФизЛицо
	|		ПО ПлатежноеПоручениеИсходящее." + СтруктурнаяЕдиница + " = ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&парамДата, ОтветственноеЛицо = &парамГлавныйБухгалтер) КАК ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛицСрезПоследнихГлБухгалтер
	|			ПО ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер.ФизическоеЛицо = ФИОФизЛицСрезПоследнихГлБухгалтер.ФизЛицо
	|		ПО ПлатежноеПоручениеИсходящее." + СтруктурнаяЕдиница + " = ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ(ВЫБРАТЬ
	|					МИНИМУМ(ПеречислениеВФонды.ПериодРегистрации) КАК ПериодПлатежа
	|				ИЗ
	|					Документ.ОПВПеречислениеВФонды КАК ПеречислениеВФонды
	|	
	|	    		ГДЕ
	|					ПеречислениеВФонды.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ПлатежноеПоручениеИсходящееПеречисление.Документ.Ссылка
	|						ИЗ
	|							Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречисление
	|			
	|						ГДЕ
	|							ПлатежноеПоручениеИсходящееПеречисление.Ссылка = &парамДокументСсылка)) КАК ПеречислениеВФонды
	|		ПО ИСТИНА
	|
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Ссылка = &парамДокументСсылка";
	
	Если мВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
		Запрос.Текст = СтрЗаменить(СтрЗаменить(Запрос.Текст, "ОПВПеречислениеВФонды", "СОПеречислениеВФонды"), "ПеречислениеПенсионныхВзносов", "ПеречислениеСоциальныхОтчислений");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции //СформироватьЗапросПоПлатежномуПоручению()

// Формирует запрос по платежному поручению для перечисления на карт-счета.
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоПлатежномуПоручениюКартСчета()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДокументСсылка", Документ);
	Запрос.УстановитьПараметр("парамДата", Документ.Дата);
	Запрос.УстановитьПараметр("парамРуководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("парамГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтерДляПодписиБанковскихДокументов);
	
	ИмяРеквизитаБИК = УправлениеДенежнымиСредствами.ПолучитьИмяРеквизитаБИКБанка(Документ.Дата);
	ИмяКодБанкаВПлатежнойСистеме = УправлениеДенежнымиСредствами.ПолучитьИмяРеквизитаКодБанкаВПлатежнойСистеме(Документ.Дата);
	
	// список способов заполнения только зарплаты из текущих взаиморасчетов
	Если мВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
		СписокСпособовЗарплата = Новый СписокЗначений;
		СписокСпособовЗарплата.Добавить(Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц);
		СписокСпособовЗарплата.Добавить(Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоЗарплатеНаКонецМесяца);
		СписокСпособовЗарплата.Добавить(Перечисления.СпособыРасчетаСуммКВыплате.ПоВидуРасчета);
		Если Метаданные.Перечисления.СпособыРасчетаСуммКВыплате.ЗначенияПеречисления.Найти("АвансЗаМесяц") <> Неопределено Тогда
			СписокСпособовЗарплата.Добавить(Перечисления.СпособыРасчетаСуммКВыплате["АвансЗаМесяц"]);
			СписокСпособовЗарплата.Добавить(Перечисления.СпособыРасчетаСуммКВыплате["АвансЗаПервуюПоловинуМесяца"]);
		КонецЕсли;
				
		Запрос.УстановитьПараметр("парамСписокСпособовЗарплата", СписокСпособовЗарплата);
				
		// список способов заполнения только зарплаты из депонированных сумм
		СписокСпособовДепонированныеСуммы = Новый СписокЗначений;
		СписокСпособовДепонированныеСуммы.Добавить(Перечисления.СпособыРасчетаСуммКВыплате.ДепонированнаяЗарплатаЗаМесяц);
		СписокСпособовДепонированныеСуммы.Добавить(Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоДепонированнойЗарплатеНаКонецМесяца);
				
		Запрос.УстановитьПараметр("парамСписокСпособовДепонированныеСуммы", СписокСпособовДепонированныеСуммы);
	КонецЕсли;
	
	УчетСтруктурныхПодразделений = Документ.Метаданные().Реквизиты.Найти("СтруктурноеПодразделениеОтправитель") <> Неопределено;
	Если УчетСтруктурныхПодразделений Тогда
		Если ЗначениеЗаполнено(Документ["СтруктурноеПодразделениеОтправитель"]) Тогда 
			Если Документ["СтруктурноеПодразделениеОтправитель"].УказыватьРеквизитыГоловнойОрганизации Тогда
				СтруктурноеПодразделение = "Организация";
			Иначе 
				СтруктурноеПодразделение = "СтруктурноеПодразделениеОтправитель";
			КонецЕсли;
		Иначе 
			СтруктурноеПодразделение = "Организация";		
		КонецЕсли;
	Иначе
		СтруктурноеПодразделение = "Организация";
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// реквизиты организации
	|	ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделение + " КАК Организация,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделение + ".НаименованиеПолное КАК СТРОКА(1000)) КАК ОрганизацияНаименованиеПолное,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации КАК ОрганизацияБанковскийСчетСсылка,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета КАК ОрганизацияБанковскийСчет,
	|	ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделение + ".ИдентификационныйНомер КАК ОрганизацияИдентификационныйНомер,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.ВалютаДенежныхСредств.БуквенныйКод КАК БуквенныйКодВалюты,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.ВалютаДенежныхСредств КАК Валюта,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк КАК БанкОрганизацииСсылка,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк." + ИмяРеквизитаБИК + " КАК ОрганизацияБИК,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк." + ИмяКодБанкаВПлатежнойСистеме + " КАК ОрганизацияКодБанкаВПлатежнойСистеме,
	|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Организация.КБЕ, 1, 1) КАК ОрганизацияПризнакРезидентства,
	|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Организация.КБЕ, 2, 1) КАК ОрганизацияСекторЭкономики,
	|	ПлатежноеПоручениеИсходящее.ВключатьКомиссиюБанка КАК ВключатьКомиссиюБанка,
	|	ПлатежноеПоручениеИсходящее.СуммаДокумента КАК СуммаДокумента,
	|	ПлатежноеПоручениеИсходящее.СуммаКомиссии КАК СуммаКомиссии,	
	|   ВЫБОР
	|       КОГДА ПлатежноеПоручениеИсходящее.СуммаДокумента <> 0
	|           ТОГДА ПлатежноеПоручениеИсходящее.СуммаКомиссии / ПлатежноеПоручениеИсходящее.СуммаДокумента * 100
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПолучательПроцентКомиссииБанка,
	|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследнихРуководитель.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследнихРуководитель.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОРуководителя,
	|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследнихГлБухгалтер.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследнихГлБухгалтер.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБухгалтер.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБухгалтер.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБухгалтер.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБухгалтер.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОГлБухгалтера,
	|	ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.Должность КАК ДолжностьРуководителя,
	|   ВЫБОР КОГДА ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер.Должность  ЕСТЬ NULL ТОГДА ""Не предусмотрен"" ИНАЧЕ ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер.Должность КОНЕЦ КАК ДолжностьГлБухгалтера,
	|	КодыОрганизацийВБанковскойСистеме.КодОрганизации КАК КодОрганизацииВБанковскойСистеме,
	// реквизиты платежного поручения
	|	ПлатежноеПоручениеИсходящее.Дата КАК ДатаПлатежногоПоручения,
	|	ПлатежноеПоручениеИсходящее.Номер КАК НомерПлатежногоПоручения,
	|	ПлатежноеПоручениеИсходящее.КодНазначенияПлатежа КАК КодНазначенияПлатежа,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.НазначениеПлатежа КАК СТРОКА(1000)) КАК НазначениеПлатежа,
	// реквизиты получателя
	|	ПлатежноеПоручениеИсходящее.Контрагент КАК ПолучательСсылка,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.Контрагент.НаименованиеПолное КАК СТРОКА(1000)) КАК ПолучательНаименованиеПолное,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента КАК ПолучательБанковскийСчетСсылка,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета КАК ПолучательБанковскийСчет,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк КАК ПолучательБанк,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк." + ИмяРеквизитаБИК + " КАК ПолучательБИК,
	|	ПлатежноеПоручениеИсходящее.Контрагент.ИдентификационныйКодЛичности КАК ПолучательИдентификационныйНомер,
	|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Контрагент.КБЕ, 1, 1) КАК ПолучательПризнакРезидентства,
	|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Контрагент.КБЕ, 2, 1) КАК ПолучательСекторЭкономики";
	
	Если мВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
	Запрос.Текст = Запрос.Текст + ",
	// периоды выплаты
	|	ПериодыВыплаты.ПериодС,
	|	ПериодыВыплаты.ПериодПо";
	Иначе
	Запрос.Текст = Запрос.Текст + ",
	// периоды выплаты
	|	ПлатежноеПоручениеИсходящее.Дата КАК ПериодС,
	|	ПлатежноеПоручениеИсходящее.Дата КАК ПериодПо";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&парамДата, ОтветственноеЛицо = &парамРуководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛицСрезПоследнихРуководитель
	|			ПО ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФизическоеЛицо = ФИОФизЛицСрезПоследнихРуководитель.ФизЛицо
	|		ПО ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделение + " = ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&парамДата, ОтветственноеЛицо = &парамГлавныйБухгалтер) КАК ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛицСрезПоследнихГлБухгалтер
	|			ПО ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер.ФизическоеЛицо = ФИОФизЛицСрезПоследнихГлБухгалтер.ФизЛицо
	|		ПО ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделение + " = ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизацийВБанковскойСистеме КАК КодыОрганизацийВБанковскойСистеме
	|		ПО КодыОрганизацийВБанковскойСистеме.Организация = ПлатежноеПоручениеИсходящее.Организация И КодыОрганизацийВБанковскойСистеме.Банк = ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк";
	
	Если мВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
	Запрос.Текст = Запрос.Текст + "
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							МИНИМУМ(ВЫБОР
	|										КОГДА ПеречислениеЗарплаты.ТекущиеВзаиморасчеты > 0 И ПеречислениеЗарплаты.ДепонированныеСуммы = 0
	|											ТОГДА ПеречислениеЗарплаты.МинПериодНачисленияЗарплаты
	|										КОГДА ПеречислениеЗарплаты.ДепонированныеСуммы > 0 И ПеречислениеЗарплаты.ТекущиеВзаиморасчеты = 0
	|											ТОГДА ПеречислениеЗарплаты.МинПериодНачисленияДепонированнойЗарплаты
	|										ИНАЧЕ ВЫБОР 
	|												КОГДА ПеречислениеЗарплаты.МинПериодНачисленияЗарплаты < ПеречислениеЗарплаты.МинПериодНачисленияДепонированнойЗарплаты
	|													ТОГДА ПеречислениеЗарплаты.МинПериодНачисленияЗарплаты
	|												ИНАЧЕ ПеречислениеЗарплаты.МинПериодНачисленияДепонированнойЗарплаты
	|					  						  КОНЕЦ
	|									КОНЕЦ) КАК ПериодС,
	|							МАКСИМУМ(ВЫБОР
	|										КОГДА ПеречислениеЗарплаты.ТекущиеВзаиморасчеты > 0 И ПеречислениеЗарплаты.ДепонированныеСуммы = 0
	|											ТОГДА ПеречислениеЗарплаты.МаксПериодНачисленияЗарплаты
	|										КОГДА ПеречислениеЗарплаты.ДепонированныеСуммы > 0 И ПеречислениеЗарплаты.ТекущиеВзаиморасчеты = 0
	|											ТОГДА ПеречислениеЗарплаты.МаксПериодНачисленияДепонированнойЗарплаты
	|										ИНАЧЕ ВЫБОР 
	|												КОГДА ПеречислениеЗарплаты.МаксПериодНачисленияЗарплаты > ПеречислениеЗарплаты.МаксПериодНачисленияДепонированнойЗарплаты
	|													ТОГДА ПеречислениеЗарплаты.МаксПериодНачисленияЗарплаты
	|												ИНАЧЕ ПеречислениеЗарплаты.МаксПериодНачисленияДепонированнойЗарплаты
	|					  						  КОНЕЦ
	|									КОНЕЦ) КАК ПериодПо
	|							ИЗ
	|								(ВЫБРАТЬ
	|										СУММА(ВЫБОР 
	|												КОГДА ПеречислениеЗарплаты.Ведомость.СпособРасчетаСуммКВыплате В (&парамСписокСпособовЗарплата)
	|													ТОГДА 1 
	|												ИНАЧЕ 0
	|								  		КОНЕЦ) КАК ТекущиеВзаиморасчеты,
	|										СУММА(ВЫБОР 
	|												КОГДА ПеречислениеЗарплаты.Ведомость.СпособРасчетаСуммКВыплате В (&парамСписокСпособовДепонированныеСуммы)
	|													ТОГДА 1 
	|												ИНАЧЕ 0
	|								  		КОНЕЦ) КАК ДепонированныеСуммы,
	|										МИНИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияЗарплаты) КАК МинПериодНачисленияЗарплаты,
	|										МАКСИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияЗарплаты) КАК МаксПериодНачисленияЗарплаты,	
	|										ВЫБОР КОГДА ПеречислениеЗарплаты.Ведомость.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1,1,1) ТОГДА
	|				                        	МИНИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияЗарплаты)
	|                                       ИНАЧЕ 
	|											МИНИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияДепонированнойЗарплаты) КОНЕЦ КАК МинПериодНачисленияДепонированнойЗарплаты,
	|										ВЫБОР КОГДА ПеречислениеЗарплаты.Ведомость.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1,1,1) ТОГДА
	|											МАКСИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияЗарплаты)		
	|										ИНАЧЕ МАКСИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияДепонированнойЗарплаты) КОНЕЦ КАК МаксПериодНачисленияДепонированнойЗарплаты
	|									
	|									ИЗ
	|										Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПеречислениеЗарплаты
	|									ГДЕ
	|										ПеречислениеЗарплаты.Ссылка = &парамДокументСсылка
	|									СГРУППИРОВАТЬ ПО
	|										ПеречислениеЗарплаты.Ведомость
	|								) КАК ПеречислениеЗарплаты
	|						) КАК ПериодыВыплаты
	|		ПО ИСТИНА";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "        
	|
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Ссылка = &парамДокументСсылка";
	
	
	Возврат Запрос.Выполнить();
	
КонецФункции //СформироватьЗапросПоПлатежномуПоручениюКартСчета()

// Формирует запрос по спискам на перечисление из табличной части платежного поручения
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоСпискамНаПеречисление()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДокументСсылка", Документ);
	Запрос.УстановитьПараметр("парамДата", Документ.Дата);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОПВПеречислениеВФонды.ФизЛицо КАК ФизЛицо,
	|	ОПВПеречислениеВФонды.ФизЛицо.Наименование КАК НаименованиеФизЛица,
	|	ОПВПеречислениеВФонды.ФизЛицо.ИдентификационныйКодЛичности КАК ИдентификационныйНомер,
	|	ОПВПеречислениеВФонды.ФизЛицо.ДатаРождения КАК ДатаРождения,
	|	ВЫБОР КОГДА ОПВПеречислениеВФонды.Сумма  ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОПВПеречислениеВФонды.Сумма КОНЕЦ КАК СуммаКПеречислению,
	|	ФИОФизЛиц.Фамилия КАК Фамилия,
	|	ФИОФизЛиц.Имя КАК Имя,
	|	ФИОФизЛиц.Отчество КАК Отчество,
	|	ОПВПеречислениеВФонды.ПериодПлатежа
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|				ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ФизЛицо
	|			ИНАЧЕ ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо
	|		КОНЕЦ КАК ФизЛицо,
	|		ОПВПеречислениеВФондыПенсионныеВзносы.ПериодПлатежа КАК ПериодПлатежа,
	|		СУММА(ОПВПеречислениеВФондыПенсионныеВзносы.Сумма) КАК Сумма
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|					ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо
	|				ИНАЧЕ ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ФизЛицо
	|			КОНЕЦ КАК ФизЛицо,
	|			НАЧАЛОПЕРИОДА(ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК ПериодПлатежа,
	|			ОПВПеречислениеВФондыПенсионныеВзносы.Сумма КАК Сумма
	|		ИЗ
	|			Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК ОПВПеречислениеВФондыПенсионныеВзносы
	|	
	|	   ГДЕ
	|			ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ.Ссылка
	|				ИЗ
	|					Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
	|			
	|				ГДЕ
	|					ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка = &парамДокументСсылка)) КАК ОПВПеречислениеВФондыПенсионныеВзносы
	|
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР
	|			КОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|				ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ФизЛицо
	|			ИНАЧЕ ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо
	|		КОНЕЦ,
	|		ОПВПеречислениеВФондыПенсионныеВзносы.ПериодПлатежа) КАК ОПВПеречислениеВФонды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛиц
	|		ПО ФИОФизЛиц.ФизЛицо = ОПВПеречислениеВФонды.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФИОФизЛиц.Фамилия,
	|	ФИОФизЛиц.Имя,
	|	ФИОФизЛиц.Отчество
	|";
	
	Если мВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
		Запрос.Текст = СтрЗаменить(СтрЗаменить(СтрЗаменить(Запрос.Текст, "ОПВПеречислениеВФонды", "СОПеречислениеВФонды"), "ПенсионныеВзносы", "СоциальныеОтчисления"), "ПеречислениеПенсионныхВзносов", "ПеречислениеСоциальныхОтчислений");
	КонецЕсли;
		
	Возврат Запрос.Выполнить();
	
КонецФункции //СформироватьЗапросПоСпискамНаПеречисление()

// Формирует запрос по платежным ведомостям из табличной части платежного поручения
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоКартСчетам()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДокументСсылка", Документ);
	Запрос.УстановитьПараметр("парамДата", Документ.Дата);

	Если мВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда

		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗарплатаКВыплатеОрганизаций.ФизЛицо,
		|	ЗарплатаКВыплатеОрганизаций.ФизЛицо.Наименование КАК НаименованиеФизЛица,
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.ИдентификационныйКодЛичности
		|		ИНАЧЕ ЗарплатаКВыплатеОрганизаций.ФизЛицо.ИдентификационныйКодЛичности
		|	КОНЕЦ КАК ИдентификационныйНомер,
		|	ЗарплатаКВыплатеОрганизаций.НомерКартСчета.НомерСчета КАК НомерКартСчета,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента КАК СчетКонтрагентаСсылка,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк КАК БанкКонтрагентаСсылка,
		|	ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Наименование, """") КАК БанкКонтрагента,
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.Фамилия
		|		ИНАЧЕ ФИОФизЛиц.Фамилия
		|	КОНЕЦ КАК Фамилия,
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.Имя
		|		ИНАЧЕ ФИОФизЛиц.Имя
		|	КОНЕЦ КАК Имя,
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.НеЯвляетсяВладельцемСчета
		|			ТОГДА ЗарплатаКВыплатеОрганизаций.НомерКартСчета.Отчество
		|		ИНАЧЕ ФИОФизЛиц.Отчество
		|	КОНЕЦ КАК Отчество,
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплатеОрганизаций.Сумма ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ ЗарплатаКВыплатеОрганизаций.Сумма
		|	КОНЕЦ КАК СуммаКПеречислению
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗарплатаКВыплатеОрганизацийЗарплата.ФизЛицо КАК ФизЛицо,
		|		ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета КАК НомерКартСчета,
		|		СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК Сумма
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК ФизЛицо,
		|			ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета КАК НомерКартСчета,
		|			ЗарплатаКВыплатеОрганизацийЗарплата.СуммаКВыплате КАК Сумма
		|		ИЗ
		|			Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|		ГДЕ
		|			ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость.Ссылка
		|					ИЗ
		|						Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		|					ГДЕ
		|						ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка = &парамДокументСсылка)) КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗарплатаКВыплатеОрганизацийЗарплата.ФизЛицо,
		|		ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета) КАК ЗарплатаКВыплатеОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛиц
		|		ПО (ФИОФизЛиц.ФизЛицо = ЗарплатаКВыплатеОрганизаций.ФизЛицо)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
		|		ПО (ПлатежноеПоручениеИсходящее.Ссылка = &парамДокументСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Фамилия,
		|	Имя,
		|	Отчество";
	
	Иначе
        
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПеречислениеВПодотчет.ФизЛицо,
		|	ПеречислениеВПодотчет.ФизЛицо.Наименование КАК НаименованиеФизЛица,
		|	ВЫБОР КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета ТОГДА ПеречислениеВПодотчет.НомерКартСчета.ИдентификационныйКодЛичности ИНАЧЕ ПеречислениеВПодотчет.ФизЛицо.ИдентификационныйКодЛичности КОНЕЦ КАК ИдентификационныйНомер,
		|	ПеречислениеВПодотчет.НомерКартСчета.НомерСчета КАК НомерКартСчета,
		|	ПеречислениеВПодотчет.Ссылка.СчетКонтрагента КАК СчетКонтрагентаСсылка,
		|	ПеречислениеВПодотчет.Ссылка.СчетКонтрагента.Банк КАК БанкКонтрагентаСсылка,
		|	ЕСТЬNULL(ПеречислениеВПодотчет.Ссылка.СчетКонтрагента.Банк.Наименование, """") КАК БанкКонтрагента,
		|	ВЫБОР КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Фамилия ИНАЧЕ ФИОФизЛиц.Фамилия КОНЕЦ КАК Фамилия,
		|	ВЫБОР КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Имя ИНАЧЕ ФИОФизЛиц.Имя КОНЕЦ КАК Имя,
		|	ВЫБОР КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Отчество ИНАЧЕ ФИОФизЛиц.Отчество КОНЕЦ КАК Отчество,
		|	СУММА(ВЫБОР КОГДА ПеречислениеВПодотчет.СуммаПлатежа  ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ПеречислениеВПодотчет.СуммаПлатежа КОНЕЦ) КАК СуммаКПеречислению
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеВПодотчет КАК ПеречислениеВПодотчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛиц
		|			ПО ФИОФизЛиц.ФизЛицо = ПеречислениеВПодотчет.ФизЛицо
		|
		|ГДЕ
		|	ПеречислениеВПодотчет.Ссылка = &парамДокументСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПеречислениеВПодотчет.ФизЛицо,
		|	ПеречислениеВПодотчет.ФизЛицо.Наименование,
		|	ВЫБОР КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета ТОГДА ПеречислениеВПодотчет.НомерКартСчета.ИдентификационныйКодЛичности ИНАЧЕ ПеречислениеВПодотчет.ФизЛицо.ИдентификационныйКодЛичности КОНЕЦ,
		|	ПеречислениеВПодотчет.НомерКартСчета,
		|	ПеречислениеВПодотчет.Ссылка.СчетКонтрагента,
		|	ПеречислениеВПодотчет.Ссылка.СчетКонтрагента.Банк,
		|	ЕСТЬNULL(ПеречислениеВПодотчет.Ссылка.СчетКонтрагента.Банк.Наименование, """"),
		|	ВЫБОР КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Фамилия ИНАЧЕ ФИОФизЛиц.Фамилия КОНЕЦ,
		|	ВЫБОР КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Имя ИНАЧЕ ФИОФизЛиц.Имя КОНЕЦ,
		|	ВЫБОР КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Отчество ИНАЧЕ ФИОФизЛиц.Отчество КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫБОР КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Фамилия ИНАЧЕ ФИОФизЛиц.Фамилия КОНЕЦ,
		|	ВЫБОР КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Имя ИНАЧЕ ФИОФизЛиц.Имя КОНЕЦ,
		|	ВЫБОР КОГДА ПеречислениеВПодотчет.НомерКартСчета.НеЯвляетсяВладельцемСчета ТОГДА ПеречислениеВПодотчет.НомерКартСчета.Отчество ИНАЧЕ ФИОФизЛиц.Отчество КОНЕЦ
		|";
	
	КонецЕсли;
		
	Возврат Запрос.Выполнить();
	
КонецФункции //СформироватьЗапросПоКартСчетам()

Функция СформироватьЗапросПоПериодамПеречислениеСО() Экспорт
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДокументСсылка", Документ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СОПеречислениеВФондыСоциальныеОтчисления.ПериодПлатежа КАК ПериодПлатежа,
	|	СУММА(СОПеречислениеВФондыСоциальныеОтчисления.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(СОПеречислениеВФондыСоциальныеОтчисления.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК ПериодПлатежа,
	|		СОПеречислениеВФондыСоциальныеОтчисления.Сумма КАК Сумма
	|	ИЗ
	|		Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК СОПеречислениеВФондыСоциальныеОтчисления
	|	ГДЕ
	|		СОПеречислениеВФондыСоциальныеОтчисления.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ.Ссылка
	|				ИЗ
	|					Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений
	|				ГДЕ
	|					ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка = &парамДокументСсылка)) КАК СОПеречислениеВФондыСоциальныеОтчисления
	|
	|СГРУППИРОВАТЬ ПО
	|	СОПеречислениеВФондыСоциальныеОтчисления.ПериодПлатежа
	|
	|ИМЕЮЩИЕ
	|	СУММА(СОПеречислениеВФондыСоциальныеОтчисления.Сумма) <> 0
	|";

	Возврат Запрос.Выполнить();
	
КонецФункции

// Проверяет правильность заполнения реквизитов платежного поручения
// Параметры: 
//  ВыборкаПоПлатежномуПоручению - выборка из результата запроса по платежному поручению,
//  Отказ 						 - флаг отказа в формировании файла
//
Процедура ПроверитьЗаполнениеРеквизитовПлатежногоПоручения(ВыборкаПоПлатежномуПоручению, Отказ)

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ОрганизацияНаименованиеПолное) Тогда
		РаботаССообщениями.ОшибкаРасчета("Не указано %% организации, по которой формируется swift-файл", "полное наименование", ВыборкаПоПлатежномуПоручению.Организация);
		Отказ = Истина;
	КонецЕсли;
	
	//  ИдентификационныйНомер организации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ОрганизацияИдентификационныйНомер) Тогда
		РаботаССообщениями.ОшибкаРасчета("Не указано %% организации", "БИН/ИИН", ВыборкаПоПлатежномуПоручению.Организация);
		Отказ = Истина;
	ИначеЕсли СтрДлина(СокрЛП(ВыборкаПоПлатежномуПоручению.ОрганизацияИдентификационныйНомер)) < 12 Тогда
		РаботаССообщениями.ОшибкаРасчета("%% организации не равна 12", "Длина БИН/ИИН", ВыборкаПоПлатежномуПоручению.Организация);
		Отказ = Истина;
	КонецЕсли;
	
	//  Признак резидентства и код сектора экономики организации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ОрганизацияПризнакРезидентства) ИЛИ
		НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ОрганизацияСекторЭкономики) Тогда
		РаботаССообщениями.ОшибкаРасчета("Не заполнен %% организации (должен быть из 2 знаков)", "КБе", ВыборкаПоПлатежномуПоручению.Организация);
		Отказ = Истина;
	КонецЕсли;
	
	//  Счет организации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ОрганизацияБанковскийСчетСсылка) Тогда
	    РаботаССообщениями.ОшибкаРасчета("Не указан %% организации в платежном поручении", "банковский счет", Документ);
	Иначе
		// номер счета
		Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ОрганизацияБанковскийСчет) Тогда
			РаботаССообщениями.ОшибкаРасчета("Не указан %% организации", "номер расчетного счета", ВыборкаПоПлатежномуПоручению.ОрганизацияБанковскийСчетСсылка);
			Отказ = Истина;
		КонецЕсли;

		// банк, в котором открыт расчетный счет
		Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.БанкОрганизацииСсылка) Тогда
			РаботаССообщениями.ОшибкаРасчета("Не указан %%, в котором открыт расчетный счет организации", "банк", ВыборкаПоПлатежномуПоручению.ОрганизацияБанковскийСчетСсылка);
			Отказ = Истина;
		Иначе

			//  БИК банка организации
			Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ОрганизацияБИК) Тогда
				РаботаССообщениями.ОшибкаРасчета("Не указан %%, в котором открыт расчетный счет организации", "БИК банка", ВыборкаПоПлатежномуПоручению.БанкОрганизацииСсылка);
				Отказ = Истина;
			КонецЕсли;	

			//  Код банка организации в платежной системе
			Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ОрганизацияКодБанкаВПлатежнойСистеме) Тогда
				РаботаССообщениями.ОшибкаРасчета("Не указан %% банка, в котором открыт расчетный счет организации", "код в платежной системе", ВыборкаПоПлатежномуПоручению.БанкОрганизацииСсылка);
				Отказ = Истина;
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	//  Руководитель организации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ФИОРуководителя) Тогда
		РасшифровкаОтветЛица = РаботаССообщениями.СформироватьРасшифровкуДействия("РегистрыСведений.ОтветственныеЛицаОрганизаций.ПолучитьФормуСписка().Открыть();");		
		РаботаССообщениями.ОшибкаРасчета("Не указано %% организации", "ФИО руководителя", РасшифровкаОтветЛица);
		Отказ = Истина;
	КонецЕсли;
	
	Если мВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов ИЛИ
		мВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда

		//  ГЦВП
		Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ГЦВПСсылка) Тогда
			РаботаССообщениями.ОшибкаРасчета("Не указан %% в платежном поручении", "Государственный центр по выплате пенсий (ГЦВП)", Документ);
			Отказ = Истина;
		Иначе
			// Полное наименование ГЦВП
			Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ГЦВПНаименованиеПолное) Тогда
				РаботаССообщениями.ОшибкаРасчета("Не указано %% ГЦВП", "полное наименование", ВыборкаПоПлатежномуПоручению.ГЦВПСсылка);
				Отказ = Истина;
			КонецЕсли;
			
			//  ИдентификационныйНомер ГЦВП
			Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ГЦВПИдентификационныйНомер) Тогда
				РаботаССообщениями.ОшибкаРасчета("Не указано %% ГЦВП", "БИН/ИИН", ВыборкаПоПлатежномуПоручению.ГЦВПСсылка);
				Отказ = Истина;
			ИначеЕсли СтрДлина(СокрЛП(ВыборкаПоПлатежномуПоручению.ГЦВПИдентификационныйНомер)) < 12 Тогда
				РаботаССообщениями.ОшибкаРасчета("%% не равна 12", "Длина БИН/ИИН", ВыборкаПоПлатежномуПоручению.ГЦВПСсылка);
				Отказ = Истина;
			КонецЕсли;
			
			//  Признак резидентства и код сектора экономики ГЦВП
			Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ГЦВППризнакРезидентства) ИЛИ
				НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ГЦВПСекторЭкономики) Тогда
				РаботаССообщениями.ОшибкаРасчета("Не заполнен %% (должен быть из 2 знаков)", "КБе ГЦВП", ВыборкаПоПлатежномуПоручению.ГЦВПСсылка);
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;

		// Счет ГЦВП
		Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ГЦВПБанковскийСчетСсылка) Тогда
			РаботаССообщениями.ОшибкаРасчета("Не указан %% в платежном поручении", "расчетный счет ГЦВП", Документ);
			Отказ = Истина;
		Иначе
			// Номер счета ГЦВП
			Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ГЦВПБанковскийСчет) Тогда
				РаботаССообщениями.ОшибкаРасчета("Не указан %% ГЦВП", "номер расчетного счета", ВыборкаПоПлатежномуПоручению.ГЦВПБанковскийСчетСсылка);
				Отказ = Истина;
			КонецЕсли;

			//  БИК ГЦВП
			Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ГЦВПБИК) Тогда
				РаботаССообщениями.ОшибкаРасчета("Не указан %% ГЦВП", "БИК банка", ВыборкаПоПлатежномуПоручению.ГЦВПБанкСсылка);
				Отказ = Истина;
			КонецЕсли;
		
		КонецЕсли;

	Иначе
	
		//  Получатель
		Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательСсылка) Тогда
			РаботаССообщениями.ОшибкаРасчета("Не указан %% в платежном поручении", "получатель", Документ);
			Отказ = Истина;
		Иначе
			// Наименование получателя
			Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательНаименованиеПолное) Тогда
				РаботаССообщениями.ОшибкаРасчета("Не указано %% получателя", "полное наименование", ВыборкаПоПлатежномуПоручению.ПолучательСсылка);
				Отказ = Истина;
			КонецЕсли;

			//  ИдентификационныйНомер получателя
			Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательИдентификационныйНомер) Тогда
				РаботаССообщениями.ОшибкаРасчета("Не указано %% получателя", "БИН/ИИН", ВыборкаПоПлатежномуПоручению.ПолучательСсылка);
				Отказ = Истина;
			ИначеЕсли СтрДлина(СокрЛП(ВыборкаПоПлатежномуПоручению.ПолучательИдентификационныйНомер)) < 12 Тогда
				РаботаССообщениями.ОшибкаРасчета("%% получателя не равна 12", "Длина БИН/ИИН", ВыборкаПоПлатежномуПоручению.ПолучательСсылка);
				Отказ = Истина;
			КонецЕсли;
			
			//  Признак резидентства и код сектора экономики получателя
			Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательПризнакРезидентства) ИЛИ
				НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательСекторЭкономики) Тогда
				РаботаССообщениями.ОшибкаРасчета("Не заполнен %% (должен быть из 2 знаков)", "КБе получателя", ВыборкаПоПлатежномуПоручению.ПолучательСсылка);
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;	
	
		// расчетный счет получателя
		Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательБанковскийСчетСсылка) Тогда
			РаботаССообщениями.ОшибкаРасчета("Не указан %% в платежном поручении", "счет получателя", Документ);
			Отказ = Истина;
		Иначе

			//  номер счета получателя
			Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательБанковскийСчет) Тогда
				РаботаССообщениями.ОшибкаРасчета("Не указан %% получателя", "номер счета", ВыборкаПоПлатежномуПоручению.ПолучательБанковскийСчетСсылка);
				Отказ = Истина;
			КонецЕсли;

			//  Банк получателя
			Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательБанк) Тогда
				РаботаССообщениями.ОшибкаРасчета("Не указан %%, в котором открыт счет получателя", "банк", ВыборкаПоПлатежномуПоручению.ПолучательБанковскийСчетСсылка);
				Отказ = Истина;
			Иначе

				//  БИК получателя
				Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательБИК) Тогда
					РаботаССообщениями.ОшибкаРасчета("Не указан %%, в котором открыт счет получателя", "БИК банка", ВыборкаПоПлатежномуПоручению.ПолучательБанк);
					Отказ = Истина;
				КонецЕсли;
			
				//  Код организации в банковской системе
				Если НЕ ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.КодОрганизацииВБанковскойСистеме) Тогда
					МассивПараметров = Новый Массив;
					МассивПараметров.Добавить(ВыборкаПоПлатежномуПоручению.Организация);
					МассивПараметров.Добавить(ВыборкаПоПлатежномуПоручению.ПолучательБанк);
					
					РасшифровкаКодОрганизацииВБанковскойСистеме = РаботаССообщениями.СформироватьРасшифровкуДействия("РаботаССообщениями.ОткрытьКодыОрганизацийВБанковскойСистеме", МассивПараметров);		
					РаботаССообщениями.ОшибкаРасчета("Не указан %% в банковской системе", "код организации", РасшифровкаКодОрганизацииВБанковскойСистеме);
					Отказ = Истина;
				КонецЕсли;
			
			КонецЕсли;
		
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеРеквизитовПлатежногоПоручения()

// Проверяет правильность заполнения реквизитов работников
// Параметры: 
//  ВыборкаПоСпискуРаботников - выборка из результата запроса по спискам работников,
//  Отказ 					  - флаг отказа в формировании файла
//
Процедура ПроверитьЗаполнениеРеквизитовСтрокиСпискаРаботников(ВыборкаПоСпискуРаботников, Отказ)
	
	ФИОРаботника = "" + ВыборкаПоСпискуРаботников.Фамилия + " " + ВыборкаПоСпискуРаботников.Имя + " " + ВыборкаПоСпискуРаботников.Отчество;
	Если ПустаяСтрока(ФИОРаботника) Тогда
		ФИОРаботника = ВыборкаПоСпискуРаботников.НаименованиеФизЛица;
		
		РаботаССообщениями.ОшибкаРасчета("Не указаны поля ФИО для %% ", ВыборкаПоСпискуРаботников.НаименованиеФизЛица, ВыборкаПоСпискуРаботников.ФизЛицо);
		Отказ = Истина;
	КонецЕсли;
	
	//  ИдентификационныйНомер
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСпискуРаботников.ИдентификационныйНомер) Тогда
		РаботаССообщениями.ОшибкаРасчета("Не указано %% ", "ИИН " +  ВыборкаПоСпискуРаботников.НаименованиеФизЛица, ВыборкаПоСпискуРаботников.ФизЛицо);
		Отказ = Истина;
	ИначеЕсли СтрДлина(СокрЛП(ВыборкаПоСпискуРаботников.ИдентификационныйНомер)) < 12 Тогда
		РаботаССообщениями.ОшибкаРасчета("%% " +  ВыборкаПоСпискуРаботников.НаименованиеФизЛица + " не равна 12", "Длина ИИН ", ВыборкаПоСпискуРаботников.ФизЛицо);
		Отказ = Истина;
	КонецЕсли;
		

	Если мВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов
			Или мВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда

		//  Дата рождения
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСпискуРаботников.ДатаРождения) Тогда
			РаботаССообщениями.ОшибкаРасчета("Не указана %% " + ВыборкаПоСпискуРаботников.НаименованиеФизЛица, "дата рождения", ВыборкаПоСпискуРаботников.ФизЛицо);
			Отказ = Истина;
		КонецЕсли;
		
	Иначе
	
		//  Номер карт-счета
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСпискуРаботников.БанкКонтрагента) Тогда
		
			МассивРасшифровки = Новый Массив;
			МассивРасшифровки.Добавить(Новый Структура("Представление,Расшифровка", "банк в счете получателя", ВыборкаПоСпискуРаботников.СчетКонтрагентаСсылка));
			МассивРасшифровки.Добавить(Новый Структура("Представление,Расшифровка", ВыборкаПоСпискуРаботников.НаименованиеФизЛица, ВыборкаПоСпискуРаботников.ФизЛицо));
		
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");

			ОбработкаКомментариев.ДобавитьСообщение("Не указан %%, в котором открыт карт-счет %%", Перечисления.ВидыСообщений.Ошибка, МассивРасшифровки);
			Отказ = Истина;

		ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоСпискуРаботников.НомерКартСчета) Тогда
			МассивРасшифровки = Новый Массив;
			МассивРасшифровки.Добавить(Новый Структура("Представление,Расшифровка", ВыборкаПоСпискуРаботников.НаименованиеФизЛица, ВыборкаПоСпискуРаботников.ФизЛицо));
			МассивРасшифровки.Добавить(Новый Структура("Представление,Расшифровка", ВыборкаПоСпискуРаботников.БанкКонтрагента, ВыборкаПоСпискуРаботников.БанкКонтрагентаСсылка));
		
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
			
			ОбработкаКомментариев.ДобавитьСообщение("У %% не указан карт-счет, открытый в %%", Перечисления.ВидыСообщений.Ошибка, МассивРасшифровки);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеРеквизитовСтрокиСпискаРаботников()

// Записывает данные из текстового документа в файл в выбранной пользователем кодировке
//
Процедура ЗаписатьДанныеВФайл(СохраняемыйТекстовыйДокумент, ПолноеИмяФайла)

	ВыбраннаяКодировка = КодировкаТекста.ANSI;
	Если Кодировка = "Windows" Тогда
		ЗаписатьФайлЧерезКомпоненту(СохраняемыйТекстовыйДокумент.ПолучитьТекст(), ПолноеИмяФайла);
	ИначеЕсли Кодировка = "DOS" Тогда
		ВыбраннаяКодировка = КодировкаТекста.OEM;
		СохраняемыйТекстовыйДокумент.Записать(ПолноеИмяФайла, ВыбраннаяКодировка);
	ИначеЕсли Кодировка = "UTF8" Тогда
		ВыбраннаяКодировка = КодировкаТекста.UTF8;
		СохраняемыйТекстовыйДокумент.Записать(ПолноеИмяФайла, ВыбраннаяКодировка);
	КонецЕсли;

КонецПроцедуры // ЗаписатьДанныеВФайл()

// Записывает данные из текстового документа в файл через компонету
//
Процедура ЗаписатьФайлЧерезКомпоненту(СохраняемыйТекст, ПолноеИмяФайла)
	
	// Обеспечить возможность подключения TextWriter1048KZ из внешних обработок, заменив:
	// - "ВнешняяОбработкаОбъект.<Имя>" на "ВнешняяОбработка.<Имя>"
	// - "ОбработкаОбъект.<Имя>" на "Обработка.<Имя>"
	ИмяОбъекта = Строка(ЭтотОбъект);		
	ИмяОбъекта = СтрЗаменить(ИмяОбъекта, "ОбработкаОбъект.", "Обработка.");
	ИмяМакета = ИмяОбъекта + ".Макет.TextWriter1048KZ_dll";
	
	УдалосьЗаписатьФайл = Ложь;
	ТекстОшибки = "";
	
	Попытка
		Если ПодключитьВнешнююКомпоненту(ИмяМакета, "TextWriter1048KZ", ТипВнешнейКомпоненты.Native) Тогда
			
			TextWriter1048KZ = Новый("AddIn.TextWriter1048KZ.TextWriter1048KZ");
			ТекстДляКонвертирования = СохраняемыйТекст;
			ДвоичныеДанныеТекст1048KZ = TextWriter1048KZ.Конвертировать(ТекстДляКонвертирования);
			ДвоичныеДанныеТекст1048KZ.Записать(ПолноеИмяФайла);
			
			УдалосьЗаписатьФайл = Истина;
			
		Иначе
			
			УдалосьЗаписатьФайл = Ложь;
			ТекстОшибки = НСтр("ru = 'Не удалось подключить внешнюю компоненту TextWriter1048KZ.'");
			
		КонецЕсли;
	Исключение
		
		УдалосьЗаписатьФайл = Ложь;
		ТекстОшибки = ОписаниеОшибки();
		
	КонецПопытки;
	
	Если НЕ УдалосьЗаписатьФайл Тогда
		
		ТекстСообщения = НСтр(
		"ru = 'Не удалось сохранить файл в кодировке Windows по причине:
		|[ТекстОшибки]
		|Попробуйте сохранить файл в другой кодировке.'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ТекстОшибки]", СокрЛП(ТекстОшибки));
		
		Сообщить(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКодВидаОперации()
	
	Если мВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
		Запрос = Новый Запрос;
		
		// Установим параметры запроса
		Запрос.УстановитьПараметр("парамДокументСсылка", Документ);
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка КАК Ссылка,
		|	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ.ВидОперации КАК ВидОперацииПВ
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка = &парамДокументСсылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			Если Выборка.ВидОперацииПВ = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений Тогда
				Возврат "S";
			ИначеЕсли Выборка.ВидОперацииПВ = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда
				Возврат "M";
			Иначе
				Возврат "R";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли мВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда
		Запрос = Новый Запрос;
		
		// Установим параметры запроса
		Запрос.УстановитьПараметр("парамДокументСсылка", Документ);
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка КАК Ссылка,
		|	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ.ВидОперации КАК ВидОперацииПВ
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка = &парамДокументСсылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			Если Выборка.ВидОперацииПВ = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов Тогда
				Возврат "C";
			ИначеЕсли Выборка.ВидОперацииПВ = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
				Возврат "E";
			Иначе
				Возврат "P";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	
КонецФункции //ПолучитьКодВидаОперации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ SWIFT ФАЙЛА

Процедура СформироватьЗаголовокФайла(ФайлМТ102, ВыборкаПоПлатежномуПоручению)
	
	// паспорт банка
	ПаспортБанка = ?(СокрЛП(ВыборкаПоПлатежномуПоручению.ОрганизацияКодБанкаВПлатежнойСистеме) = "", "F01K059560000000001000001", "F01" + СокрЛП(ВыборкаПоПлатежномуПоручению.ОрганизацияКодБанкаВПлатежнойСистеме) + "00000001000001");
	
	// номер платежного поручения без префикса и ведущих нулей
	ПрефиксОрганизации		 = ?(ТипЗнч(ВыборкаПоПлатежномуПоручению.Организация) = Тип("СправочникСсылка.Организации"), ВыборкаПоПлатежномуПоручению.Организация.Префикс, ВыборкаПоПлатежномуПоручению.Организация.Владелец.Префикс);
	НомерПлатежногоПоручения = ОбщегоНазначения.ПолучитьНомерНаПечать(Документ, глСписокПрефиксовУзлов, ПредставлениеНомераДокумента);
		
	// строки файла
	ЗаголовокФайла = 
	"{1:"	   + ПаспортБанка + "}
	|{2:I102SGROSS000000"+?(ПриоритетСообщения, "U", "")+"3003}
	|{4:
	|:20:REFERENCE
	|:50:/D/"  + СокрЛП(ВыборкаПоПлатежномуПоручению.ОрганизацияБанковскийСчет) + "
	|/NAME/"   + СокрЛП(ВРег(ВыборкаПоПлатежномуПоручению.ОрганизацияНаименованиеПолное)) + "
	|/IDN/"	   + ВыборкаПоПлатежномуПоручению.ОрганизацияИдентификационныйНомер + "
	|/CHIEF/"  + СокрЛП(ВРег(ВыборкаПоПлатежномуПоручению.ФИОРуководителя)) + "
	|/MAINBK/" + СокрЛП(ВРег(?(ВыборкаПоПлатежномуПоручению.ФИОГлБухгалтера = Null, "Не предусмотрен", ВыборкаПоПлатежномуПоручению.ФИОГлБухгалтера))) + "
	|/IRS/"	   + ВыборкаПоПлатежномуПоручению.ОрганизацияПризнакРезидентства + "
	|/SECO/"   + ВыборкаПоПлатежномуПоручению.ОрганизацияСекторЭкономики + "
	|:52B:"    + СокрЛП(ВыборкаПоПлатежномуПоручению.ОрганизацияБИК) + "
	|:57B:"  + СокрЛП(ВыборкаПоПлатежномуПоручению.ГЦВПБИК) + "
	|:59:"   + СокрЛП(ВыборкаПоПлатежномуПоручению.ГЦВПБанковскийСчет) + "
	|/NAME/" + СокрЛП(ВыборкаПоПлатежномуПоручению.ГЦВПНаименованиеПолное) + "
	|/IDN/"  + ВыборкаПоПлатежномуПоручению.ГЦВПИдентификационныйНомер + "
	|/IRS/"  + ВыборкаПоПлатежномуПоручению.ГЦВППризнакРезидентства + "
	|/SECO/" + ВыборкаПоПлатежномуПоручению.ГЦВПСекторЭкономики + "
	|:70:";
	
	Если ФорматФайлов = мМТ102БезПереноса Тогда
		ЗаголовокФайла = ЗаголовокФайла + "/NUM/" 	+ НомерПлатежногоПоручения;
	Иначе
		ЗаголовокФайла = ЗаголовокФайла + "
		|/NUM/" 	+ НомерПлатежногоПоручения;
	КонецЕсли;
	
	ЗаголовокФайла = ЗаголовокФайла + "
	|/DATE/" 	+ Формат(ВыборкаПоПлатежномуПоручению.ДатаПлатежногоПоручения, "ДФ=""ггММдд""") + "
	|/VO/01
	|/SEND/07
	|/KNP/"		+ ВыборкаПоПлатежномуПоручению.КодНазначенияПлатежа;
		
	Если мВключатьПолеPSO Тогда
		ЗаголовокФайла = ЗаголовокФайла + "
		|/PSO/01";
	КонецЕсли;
	
	Если мВключатьПолеPRT Тогда
		ЗаголовокФайла = ЗаголовокФайла + "
		|/PRT/05";
	КонецЕсли;

	Если мВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений И мПолеPERIODвЗаголовке Тогда
		ЗаголовокФайла = ЗаголовокФайла + "
		|/PERIOD/" + Формат(ВыборкаПоПлатежномуПоручению.ПериодПлатежа, "ДФ=""ММгггг""");
	КонецЕсли;
	
	ФайлМТ102.ДобавитьСтроку(ЗаголовокФайла);
	
	ТекстНазначенияПлатежа = "/ASSIGN/" + СокрЛП(ВыборкаПоПлатежномуПоручению.НазначениеПлатежа);
	Пока СтрДлина(ТекстНазначенияПлатежа) > 0 Цикл
		ФайлМТ102.ДобавитьСтроку(Сред(ТекстНазначенияПлатежа, 1, 60));
		ТекстНазначенияПлатежа = СокрЛП(Сред(ТекстНазначенияПлатежа, 61));
	КонецЦикла;
	
КонецПроцедуры //СформироватьЗаголовокФайла()

Процедура СформироватьСтрокуРаботникаФайла(ФайлМТ102, ВыборкаПоСпискуРаботников, НомерСтроки)
	
	ПрефиксПоля = ПолучитьКодВидаОперации();

	СтрокаФайла = 
	":21:" 		+ Формат(НомерСтроки, "ЧГ=") + "
	|:32B:KZT"  + Формат(ВыборкаПоСпискуРаботников.СуммаКПеречислению, "ЧЦ=10; ЧДЦ=2; ЧРД=,; ЧРГ=; ЧГ=0,0") + "
	|:70:";
	
	Если ФорматФайлов = мМТ102БезПереноса Тогда
		СтрокаФайла = СтрокаФайла + "/OPV/" + ПрефиксПоля;
	Иначе
		СтрокаФайла = СтрокаФайла + "
		|/OPV/" + ПрефиксПоля;
	КонецЕсли;
	
	СтрокаФайла = СтрокаФайла + "
	|/FM/"		+ СокрЛП(ВРег(ВыборкаПоСпискуРаботников.Фамилия)) + "
	|/NM/"		+ СокрЛП(ВРег(ВыборкаПоСпискуРаботников.Имя));
	
	Если (ЗначениеЗаполнено(ВыборкаПоСпискуРаботников.Отчество)) Тогда
		СтрокаФайла = СтрокаФайла + "
		|/FT/" + СокрЛП(ВРег(ВыборкаПоСпискуРаботников.Отчество));
	Иначе
		Если мВключатьПолеFT Тогда
			СтрокаФайла = СтрокаФайла + "
			|/FT/";
		КонецЕсли;
	КонецЕсли;
		
	СтрокаФайла = СтрокаФайла + "
	|/DT/"  + Формат(ВыборкаПоСпискуРаботников.ДатаРождения, "ДФ=""ггггММдд""") + "
	|/IDN/" + ВыборкаПоСпискуРаботников.ИдентификационныйНомер;
	
	Если мВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов 
		ИЛИ мВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений И НЕ мПолеPERIODвЗаголовке Тогда
		СтрокаФайла = СтрокаФайла + "
		|/PERIOD/" + Формат(ВыборкаПоСпискуРаботников.ПериодПлатежа, "ДФ=""ММгггг""");
	КонецЕсли;
	
	ФайлМТ102.ДобавитьСтроку(СтрокаФайла);
	
КонецПроцедуры //СформироватьСтрокуРаботникаФайла()

Процедура СформироватьКонецФайла(ФайлМТ102, ВыборкаПоПлатежномуПоручению, ОбщаяСумма)
	
	СтрокаКонцаФайла = 
	":32A:" + Формат(ВыборкаПоПлатежномуПоручению.ДатаПлатежногоПоручения, "ДФ=""ггММдд""") + "KZT" + Формат(ОбщаяСумма, "ЧЦ=10; ЧДЦ=2; ЧРД=,; ЧРГ=; ЧГ=0,0") + "
	|-}"; 
	
	ФайлМТ102.ДобавитьСтроку(СтрокаКонцаФайла);
	
КонецПроцедуры //СформироватьКонецФайла()

Процедура ВыполнитьВыгрузкуДанных(ФайлМТ102)
	
	Если НЕ ЗначениеЗаполнено(КаталогВыгрузки) Тогда
		Сообщить("Swift файл не сформирован!");
		Возврат;
	КонецЕсли;
	
	ПолныйКаталогВыгрузки = КаталогВыгрузки + Формат(РабочаяДата, "ДФ=""дд-ММ-гг""") + "." + мНомерФайла + "\";
	
	КаталогНаДиске = Новый Файл(ПолныйКаталогВыгрузки);
	Если НЕ КаталогНаДиске.Существует() Тогда
		СоздатьКаталог(ПолныйКаталогВыгрузки);
	КонецЕсли;
	
	НазваниеФайла = "Swift " + мНомерППИ + ".txt";	
	ЗаписатьДанныеВФайл(ФайлМТ102, ПолныйКаталогВыгрузки + НазваниеФайла);
	
	//ЗаписатьДанныеВФайл(ФайлМТ102, ПолныйКаталогВыгрузки + "Swift.txt");
	Сообщить("Файл " + ПолныйКаталогВыгрузки + НазваниеФайла +" сформирован!");
	
	ФайлМТ102.Очистить();
	
КонецПроцедуры //ВыполнитьВыгрузкуДанных()

Процедура СформироватьФайлОтчислений()
	
	Отказ = Ложь;
	
	мКоличествоРаботниковВФайле = 500;
	
	РезультатЗапросаПоПлатежномуПоручению = СформироватьЗапросПоПлатежномуПоручению();
	ВыборкаПоПлатежномуПоручению = РезультатЗапросаПоПлатежномуПоручению.Выбрать();
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если ВыборкаПоПлатежномуПоручению.Следующий() Тогда
		ПроверитьЗаполнениеРеквизитовПлатежногоПоручения(ВыборкаПоПлатежномуПоручению, Отказ);
	
		ЗапросПоСпискуРаботников = СформироватьЗапросПоСпискамНаПеречисление();
		ВыборкаПоСпискуРаботников = ЗапросПоСпискуРаботников.Выбрать();
		 
		Пока ВыборкаПоСпискуРаботников.Следующий() Цикл
			ПроверитьЗаполнениеРеквизитовСтрокиСпискаРаботников(ВыборкаПоСпискуРаботников, Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ФайлМТ102 = Новый ТекстовыйДокумент;
	
	мНомерППИ = ВыборкаПоПлатежномуПоручению.НомерПлатежногоПоручения;

	// формируем заголовок файла
	СформироватьЗаголовокФайла(ФайлМТ102, ВыборкаПоПлатежномуПоручению);
	
	// добавляем строки данных по сотрудникам
	НомерСтроки = 1; ОбщаяСумма = 0; 
	ВыборкаПоСпискуРаботников = ЗапросПоСпискуРаботников.Выбрать();
	
	Пока ВыборкаПоСпискуРаботников.Следующий() Цикл
		
		Если ВыборкаПоСпискуРаботников.СуммаКПеречислению <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если (НомерСтроки > мКоличествоРаботниковВФайле) И (мФормироватьОтдельныеФайлы) Тогда
			// формируем конец файла
			СформироватьКонецФайла(ФайлМТ102, ВыборкаПоПлатежномуПоручению, ОбщаяСумма);
			
			// запись файла
			ВыполнитьВыгрузкуДанных(ФайлМТ102);
			
			// формируем заголовок нового файла
			СформироватьЗаголовокФайла(ФайлМТ102, ВыборкаПоПлатежномуПоручению);
			
			// инициализируем переменные
			НомерСтроки = 1; ОбщаяСумма = 0;
			мНомерФайла = мНомерФайла + 1;
		КонецЕсли;
		
		СформироватьСтрокуРаботникаФайла(ФайлМТ102, ВыборкаПоСпискуРаботников, НомерСтроки);
		ОбщаяСумма  = ОбщаяСумма + ВыборкаПоСпискуРаботников.СуммаКПеречислению;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	// формируем конец файла
	СформироватьКонецФайла(ФайлМТ102, ВыборкаПоПлатежномуПоручению, ОбщаяСумма);
	
	Если мТекстВыгрузки <> Неопределено Тогда
		
		// если программный вызов
		мТекстВыгрузки = ФайлМТ102;
		
	Иначе
	
		// если интерактивное формирование
		
		// запись файла	
		ВыполнитьВыгрузкуДанных(ФайлМТ102);
		
	КонецЕсли;
	
КонецПроцедуры //СформироватьФайлОтчислений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ТРАНСПОРТНОГО ФАЙЛА И ФАЙЛА СПИСКА НАРОДНОГО БАНКА

Процедура СформироватьЗаголовокТранспортногоФайлаНБ(ФайлМТ102, ВыборкаПоПлатежномуПоручению)
	
	// паспорт банка
	ПаспортБанка = ?(СокрЛП(ВыборкаПоПлатежномуПоручению.ОрганизацияКодБанкаВПлатежнойСистеме) = "", "F01K059560000000001000001", "F01" + СокрЛП(ВыборкаПоПлатежномуПоручению.ОрганизацияКодБанкаВПлатежнойСистеме) + "00000001000001");
	
	// номер платежного поручения без префикса и ведущих нулей
	ПрефиксОрганизации		 = ?(ТипЗнч(ВыборкаПоПлатежномуПоручению.Организация) = Тип("СправочникСсылка.Организации"), ВыборкаПоПлатежномуПоручению.Организация.Префикс, ВыборкаПоПлатежномуПоручению.Организация.Владелец.Префикс);
	НомерПлатежногоПоручения = ОбщегоНазначения.ПолучитьНомерНаПечать(Документ, глСписокПрефиксовУзлов, ПредставлениеНомераДокумента);
		
	// референс
	Референс = Лев(СокрЛП(ВыборкаПоПлатежномуПоручению.КодОрганизацииВБанковскойСистеме), 2) 	+
				Прав(СокрЛП(ВыборкаПоПлатежномуПоручению.КодОрганизацииВБанковскойСистеме), 4) 	+
				Формат(ВыборкаПоПлатежномуПоручению.ДатаПлатежногоПоручения, "ДФ=""ггММдд""") 	+ 
				ОбщегоНазначения.ДополнитьСтроку(Прав(НомерПлатежногоПоручения, 4), 4, "0", 0);
	
	// строки файла
	ЗаголовокФайла = 
	"{1:"	   + ПаспортБанка + "}
	|{2:I102SGROSS000000"+?(ПриоритетСообщения, "U", "")+"3003}
	|{4:
	|:20:"	   + Референс + "
	|:50:/D/"  + СокрЛП(ВыборкаПоПлатежномуПоручению.ОрганизацияБанковскийСчет) + "
	|/NAME/"   + СокрЛП(ВРег(ВыборкаПоПлатежномуПоручению.ОрганизацияНаименованиеПолное)) + "
	|/IDN/"	   + ВыборкаПоПлатежномуПоручению.ОрганизацияИдентификационныйНомер + "
	|/CHIEF/"  + СокрЛП(ВРег(ВыборкаПоПлатежномуПоручению.ФИОРуководителя)) + "
	|/MAINBK/" + СокрЛП(ВРег(?(ВыборкаПоПлатежномуПоручению.ФИОГлБухгалтера = Null, "Не предусмотрен", ВыборкаПоПлатежномуПоручению.ФИОГлБухгалтера))) + "
	|/IRS/"	   + ВыборкаПоПлатежномуПоручению.ОрганизацияПризнакРезидентства + "
	|/SECO/"   + ВыборкаПоПлатежномуПоручению.ОрганизацияСекторЭкономики + "
	|:52B:"    + СокрЛП(ВыборкаПоПлатежномуПоручению.ОрганизацияБИК) + "
	|:57B:"	   + СокрЛП(ВыборкаПоПлатежномуПоручению.ПолучательБИК) + "
	|:59:"     + СокрЛП(ВыборкаПоПлатежномуПоручению.ПолучательБанковскийСчет) + "
	|/NAME/"   + СокрЛП(ВыборкаПоПлатежномуПоручению.ПолучательНаименованиеПолное) + "
	|/IDN/"    + ВыборкаПоПлатежномуПоручению.ПолучательИдентификационныйНомер + "
	|/IRS/"    + ВыборкаПоПлатежномуПоручению.ПолучательПризнакРезидентства + "
	|/SECO/"   + ВыборкаПоПлатежномуПоручению.ПолучательСекторЭкономики + "
	|:70:
	|/NUM/" + СокрЛП(НомерПлатежногоПоручения) + "
	|/DATE/" 	+ Формат(ВыборкаПоПлатежномуПоручению.ДатаПлатежногоПоручения, "ДФ=""ггММдд""") + "
	|/VO/01
	|/SEND/07
	|/KNP/"		+ ВыборкаПоПлатежномуПоручению.КодНазначенияПлатежа;	
	
	ФайлМТ102.ДобавитьСтроку(ЗаголовокФайла);
	
	ТекстНазначенияПлатежа = "/ASSIGN/" + СокрЛП(ВыборкаПоПлатежномуПоручению.НазначениеПлатежа);
	Пока СтрДлина(ТекстНазначенияПлатежа) > 0 Цикл
		ФайлМТ102.ДобавитьСтроку(Сред(ТекстНазначенияПлатежа, 1, 60));
		ТекстНазначенияПлатежа = СокрЛП(Сред(ТекстНазначенияПлатежа, 61));
	КонецЦикла;
	
КонецПроцедуры //СформироватьЗаголовокТранспортногоФайлаНБ()

Процедура СформироватьСтрокуРаботникаТранспортногоФайлаНБ(ФайлМТ102, ВыборкаПоПлатежномуПоручению, ВыборкаПоСпискуРаботников, НомерСтроки, ОбщаяСумма, ОбщаяСуммаКомиссии, ОбщаяСуммаРаспределеннойКомиссии, ЭтоПоследнийРаботник)
	
	СуммаКПеречислению = ВыборкаПоСпискуРаботников.СуммаКПеречислению;
	Если РассчитыватьКомиссиюБанкаПоКаждомуРаботнику И ВыборкаПоПлатежномуПоручению.ВключатьКомиссиюБанка Тогда
		СуммаКомиссии = Окр(СуммаКПеречислению * ВыборкаПоПлатежномуПоручению.ПолучательПроцентКомиссииБанка / 100, 2);
		СуммаКПеречислению = СуммаКПеречислению + СуммаКомиссии;
		ОбщаяСуммаКомиссии = ОбщаяСуммаКомиссии + СуммаКомиссии;
		ОбщаяСуммаРаспределеннойКомиссии = ОбщаяСуммаРаспределеннойКомиссии + СуммаКомиссии;
		
		Если ЭтоПоследнийРаботник Тогда
			// на последнего работника скидываем разность в сумме комиссии банка
			СуммаКомиссииСПолнойСуммыПеречисления = ВыборкаПоПлатежномуПоручению.СуммаКомиссии;
			РазностьКомиссии = СуммаКомиссииСПолнойСуммыПеречисления - ОбщаяСуммаРаспределеннойКомиссии;			
			СуммаКомиссии = СуммаКомиссии + РазностьКомиссии;
			СуммаКПеречислению = СуммаКПеречислению + РазностьКомиссии;
			ОбщаяСуммаКомиссии = ОбщаяСуммаКомиссии + РазностьКомиссии;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаФайла = 
	":21:" 		+ Формат(НомерСтроки, "ЧГ=") + "
	|:32B:"  	+ СокрЛП(ВыборкаПоПлатежномуПоручению.БуквенныйКодВалюты) +  Формат(СуммаКПеречислению, "ЧЦ=10; ЧДЦ=2; ЧРД=,; ЧРГ=; ЧГ=0,0") + "
	|:70:
	|/FM/"		+ СокрЛП(ВРег(ВыборкаПоСпискуРаботников.Фамилия)) + "
	|/NM/"		+ СокрЛП(ВРег(ВыборкаПоСпискуРаботников.Имя));
	
	Если (ЗначениеЗаполнено(ВыборкаПоСпискуРаботников.Отчество)) Тогда
		СтрокаФайла = СтрокаФайла + "
		|/FT/" + СокрЛП(ВРег(ВыборкаПоСпискуРаботников.Отчество));
	Иначе
		Если мВключатьПолеFT Тогда
			СтрокаФайла = СтрокаФайла + "
			|/FT/";
		КонецЕсли;
	КонецЕсли;
	
	СтрокаФайла = СтрокаФайла + "
	|/IDN/" + ВыборкаПоСпискуРаботников.ИдентификационныйНомер + "
	|/LA/"	+ СокрЛП(ВыборкаПоСпискуРаботников.НомерКартСчета);
	
	ФайлМТ102.ДобавитьСтроку(СтрокаФайла);
	
КонецПроцедуры //СформироватьСтрокуРаботникаТранспортногоФайлаНБ()

Процедура СформироватьКонецТранспортногоФайлаНБ(ФайлМТ102, ВыборкаПоПлатежномуПоручению, НомерСтроки, ОбщаяСумма, ОбщаяСуммаКомиссии, ЭтоПоследнийФайл = Истина)
	
	Если РассчитыватьКомиссиюБанкаПоКаждомуРаботнику И ВыборкаПоПлатежномуПоручению.ВключатьКомиссиюБанка Тогда
		СуммаКомиссии = ОбщаяСуммаКомиссии; 
	Иначе
		Если ЭтоПоследнийФайл Тогда
			СуммаКомиссии = ВыборкаПоПлатежномуПоручению.СуммаКомиссии;	
		Иначе
			СуммаКомиссии = 0;
		КонецЕсли;
	КонецЕсли;	
	ОбщаяСумма	  = ОбщаяСумма + СуммаКомиссии;
	
	Если СуммаКомиссии <> 0 И НЕ РассчитыватьКомиссиюБанкаПоКаждомуРаботнику И ЭтоПоследнийФайл Тогда
		СтрокаФайла = 
		":21:" 		+ НомерСтроки + "
		|:32B:"  	+ СокрЛП(ВыборкаПоПлатежномуПоручению.БуквенныйКодВалюты) + Формат(СуммаКомиссии, "ЧЦ=10; ЧДЦ=2; ЧРД=,; ЧРГ=; ЧГ=0,0") + "
		|:70:
		|/FM/КОМИССИОННЫЕ
		|/NM/БАНКА
		|/IDN/" + ВыборкаПоПлатежномуПоручению.ПолучательИдентификационныйНомер + "
		|/LA/"	+ ВыборкаПоПлатежномуПоручению.ПолучательБанковскийСчет;
	
		ФайлМТ102.ДобавитьСтроку(СтрокаФайла);
	КонецЕсли;		
	
	СтрокаКонцаФайла = 
	":32A:" + Формат(ВыборкаПоПлатежномуПоручению.ДатаПлатежногоПоручения, "ДФ=""ггММдд""") + СокрЛП(ВыборкаПоПлатежномуПоручению.БуквенныйКодВалюты) + Формат(ОбщаяСумма, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=; ЧГ=0,0") + "
	|-}"; 
	
	ФайлМТ102.ДобавитьСтроку(СтрокаКонцаФайла);
	
КонецПроцедуры //СформироватьКонецТранспортногоФайлаНБ()

Процедура ВыполнитьВыгрузкуДанныхНБ(ФайлМТ102, ВыборкаПоПлатежномуПоручению)
	
	Если НЕ ЗначениеЗаполнено(КаталогВыгрузки) Тогда
		Сообщить("Транспортный файл не сформирован!");
		Возврат;
	КонецЕсли;
	
	ПолныйКаталогВыгрузки = КаталогВыгрузки + Формат(РабочаяДата, "ДФ=""дд-ММ-гг""") + "." + мНомерФайла + "\";
	
	КаталогНаДиске = Новый Файл(ПолныйКаталогВыгрузки);
	Если НЕ КаталогНаДиске.Существует() Тогда
		СоздатьКаталог(ПолныйКаталогВыгрузки);
	КонецЕсли;
	
	// номер платежного поручения без префикса и ведущих нулей
	ПрефиксОрганизации		 =  ?(ТипЗнч(ВыборкаПоПлатежномуПоручению.Организация) = Тип("СправочникСсылка.Организации"), ВыборкаПоПлатежномуПоручению.Организация.Префикс, ВыборкаПоПлатежномуПоручению.Организация.Владелец.Префикс);
	НомерПлатежногоПоручения = ОбщегоНазначения.ПолучитьНомерНаПечать(Документ, глСписокПрефиксовУзлов, ПредставлениеНомераДокумента);
	
	ИмяТранспортногоФайла = "MT" + Прав(СокрЛП(ВыборкаПоПлатежномуПоручению.КодОрганизацииВБанковскойСистеме), 4) + "-" + НомерПлатежногоПоручения + "." + СокрЛП(ДеньГода(ТекущаяДата()));
	
	ЗаписатьДанныеВФайл(ФайлМТ102, ПолныйКаталогВыгрузки + ИмяТранспортногоФайла);
	Сообщить("Транспортный файл " + ПолныйКаталогВыгрузки + ИмяТранспортногоФайла + " сформирован!");
	
	ФайлМТ102.Очистить();
	
КонецПроцедуры //ВыполнитьВыгрузкуДанныхНБ()

Процедура СформироватьФайлСпискаЗачисленияЗарплатыНБ(ВыборкаПоПлатежномуПоручению, ВыборкаПоСпискуРаботников)
	
	Если НЕ ЗначениеЗаполнено(КаталогВыгрузки) Тогда
		Сообщить("Список не сформирован!");
		Возврат;
	КонецЕсли;
	
	ПолныйКаталогВыгрузки = КаталогВыгрузки + Формат(РабочаяДата, "ДФ=""дд-ММ-гг""") + ".1\";
	
	КаталогНаДиске = Новый Файл(ПолныйКаталогВыгрузки);
	Если НЕ КаталогНаДиске.Существует() Тогда
		СоздатьКаталог(ПолныйКаталогВыгрузки);
	КонецЕсли;
	
	// список в текстовом формате
	ФайлСписка = Новый ТекстовыйДокумент;
	
	Макет = ПолучитьМакет("СписокДляЗачисленияНБ");
	ОбластьЗаголовка = Макет.ПолучитьОбласть("Заголовок");
	ОбластьСтроки    = Макет.ПолучитьОбласть("Строка");
	ОбластьКомиссияБанка   = Макет.ПолучитьОбласть("КомиссияБанка");
	ОбластьПодвала   = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьЗаголовка.Параметры.Заполнить(ВыборкаПоПлатежномуПоручению);
	
	// номер платежного поручения без префикса и ведущих нулей
	ПрефиксОрганизации		 = ?(ТипЗнч(ВыборкаПоПлатежномуПоручению.Организация) = Тип("СправочникСсылка.Организации"), ВыборкаПоПлатежномуПоручению.Организация.Префикс, ВыборкаПоПлатежномуПоручению.Организация.Владелец.Префикс);
	НомерПлатежногоПоручения = ОбщегоНазначения.ПолучитьНомерНаПечать(Документ, глСписокПрефиксовУзлов, ПредставлениеНомераДокумента);
		
	ОбластьЗаголовка.Параметры.НомерПлатежногоПоручения = НомерПлатежногоПоручения;
	ФайлСписка.Вывести(ОбластьЗаголовка);
	
	ОбщаяСумма = 0; 
	НомерСтроки = 0;
	ОбщаяСуммаКомиссии = 0;
	Пока ВыборкаПоСпискуРаботников.Следующий() Цикл

	 	Если ВыборкаПоСпискуРаботников.СуммаКПеречислению <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьСтроки.Параметры.Заполнить(ВыборкаПоСпискуРаботников);
		ОбластьСтроки.Параметры.РеквизитыСотрудника = СокрЛП(ВыборкаПоСпискуРаботников.Фамилия) + " " + 
													  СокрЛП(ВыборкаПоСпискуРаботников.Имя) + " " + 
													  СокрЛП(ВыборкаПоСпискуРаботников.Отчество) + " " + 
													  СокрЛП(ВыборкаПоСпискуРаботников.ИдентификационныйНомер);
													  
		ЭтоПоследнийРаботник = Ложь;
		Если НомерСтроки + 1 = ВыборкаПоСпискуРаботников.Количество() Тогда
			ЭтоПоследнийРаботник = Истина;
		КонецЕсли;
		
		СуммаКПеречислению = ВыборкаПоСпискуРаботников.СуммаКПеречислению;
		Если РассчитыватьКомиссиюБанкаПоКаждомуРаботнику И ВыборкаПоПлатежномуПоручению.ВключатьКомиссиюБанка Тогда
			СуммаКомиссии = Окр(СуммаКПеречислению * ВыборкаПоПлатежномуПоручению.ПолучательПроцентКомиссииБанка / 100, 2);
			СуммаКПеречислению = СуммаКПеречислению + СуммаКомиссии;
			ОбщаяСуммаКомиссии = ОбщаяСуммаКомиссии + СуммаКомиссии;
			
			Если ЭтоПоследнийРаботник Тогда
				// на последнего работника скидываем разность в сумме комиссии банка
				СуммаКомиссииСПолнойСуммыПеречисления = ВыборкаПоПлатежномуПоручению.СуммаКомиссии;
				
				РазностьКомиссии = СуммаКомиссииСПолнойСуммыПеречисления - ОбщаяСуммаКомиссии;
				СуммаКомиссии = СуммаКомиссии + РазностьКомиссии;
				СуммаКПеречислению = СуммаКПеречислению + РазностьКомиссии;
				ОбщаяСуммаКомиссии = ОбщаяСуммаКомиссии + РазностьКомиссии;
			КонецЕсли;
			ОбластьСтроки.Параметры.СуммаКПеречислению = СуммаКПеречислению;
		КонецЕсли;

		
		ФайлСписка.Вывести(ОбластьСтроки);
		
		ОбщаяСумма  = ОбщаяСумма + СуммаКПеречислению;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;   	

	Если ВыборкаПоПлатежномуПоручению.СуммаКомиссии <> 0 И НЕ РассчитыватьКомиссиюБанкаПоКаждомуРаботнику Тогда
		СуммаКомиссии   = ВыборкаПоПлатежномуПоручению.СуммаКомиссии;
		ОбщаяСумма	    = ОбщаяСумма + СуммаКомиссии;
		НомерСтроки		= НомерСтроки + 1;
		
		ОбластьКомиссияБанка.Параметры.Заполнить(ВыборкаПоПлатежномуПоручению);
		ОбластьКомиссияБанка.Параметры.НомерОрганизацииВБанковскойСистеме = Прав(ВыборкаПоПлатежномуПоручению.КодОрганизацииВБанковскойСистеме, 4);
		ОбластьКомиссияБанка.Параметры.СуммаКомиссии = СуммаКомиссии;
		ФайлСписка.Вывести(ОбластьКомиссияБанка);
	КонецЕсли;
	
	ОбластьПодвала.Параметры.Заполнить(ВыборкаПоПлатежномуПоручению);
	ОбластьПодвала.Параметры.КоличествоСтрок = НомерСтроки;
	ОбластьПодвала.Параметры.ОбщаяСумма = ОбщаяСумма;
	ФайлСписка.Вывести(ОбластьПодвала);
	
	ИмяФайлаСписка = "P" + Сред(СокрЛП(ВыборкаПоПлатежномуПоручению.КодОрганизацииВБанковскойСистеме),9 , 2) + Прав(СокрЛП(ВыборкаПоПлатежномуПоручению.КодОрганизацииВБанковскойСистеме), 4) + "1." + СокрЛП(ДеньГода(ТекущаяДата()));
	
	ЗаписатьДанныеВФайл(ФайлСписка, ПолныйКаталогВыгрузки + ИмяФайлаСписка);
	Сообщить("Список " + ПолныйКаталогВыгрузки + ИмяФайлаСписка + " сформирован!");

КонецПроцедуры //СформироватьФайлСпискаЗачисленияЗарплатыНБ()

Процедура СформироватьФайлыЗачисленияЗарплатыНБ()
	
	Отказ = Ложь;
	
	мКоличествоРаботниковВФайле = 500;
	
	РезультатЗапросаПоПлатежномуПоручению = СформироватьЗапросПоПлатежномуПоручениюКартСчета();
	ВыборкаПоПлатежномуПоручению = РезультатЗапросаПоПлатежномуПоручению.Выбрать();
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если ВыборкаПоПлатежномуПоручению.Следующий() Тогда
		ПроверитьЗаполнениеРеквизитовПлатежногоПоручения(ВыборкаПоПлатежномуПоручению, Отказ);
	
		ЗапросПоСпискуРаботников = СформироватьЗапросПоКартСчетам();
		ВыборкаПоСпискуРаботников = ЗапросПоСпискуРаботников.Выбрать();
		 
		Пока ВыборкаПоСпискуРаботников.Следующий() Цикл
			ПроверитьЗаполнениеРеквизитовСтрокиСпискаРаботников(ВыборкаПоСпискуРаботников, Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	Если Отказ Тогда
		Сообщить("Файлы не сформированы!");
		Возврат;
	КонецЕсли;
	
	// транспортный файл в формате МТ-102
	ФайлМТ102 = Новый ТекстовыйДокумент;
	
	// формируем заголовок файла
	СформироватьЗаголовокТранспортногоФайлаНБ(ФайлМТ102, ВыборкаПоПлатежномуПоручению);
	
	// добавляем строки данных по сотрудникам
	НомерСтроки = 1; 
	ОбщаяСумма = 0; 
	НомерППСНачала = 1;
	ОбщаяСуммаКомиссии = 0;
	ОбщаяСуммаРаспределеннойКомиссии = 0;
	ВыборкаПоСпискуРаботников = ЗапросПоСпискуРаботников.Выбрать();
	КоличествоРаботниковВСписке = ВыборкаПоСпискуРаботников.Количество();
	
	Пока ВыборкаПоСпискуРаботников.Следующий() Цикл
		
		Если ВыборкаПоСпискуРаботников.СуммаКПеречислению <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если (НомерСтроки > мКоличествоРаботниковВФайле) И (мФормироватьОтдельныеФайлы) Тогда
			// формируем конец файла
			СформироватьКонецТранспортногоФайлаНБ(ФайлМТ102, ВыборкаПоПлатежномуПоручению, НомерСтроки, ОбщаяСумма, ОбщаяСуммаКомиссии, Ложь);
			
			// запрос на сохранение файла	
			ВыполнитьВыгрузкуДанныхНБ(ФайлМТ102, ВыборкаПоПлатежномуПоручению);
			
			// формируем заголовок нового файла
			СформироватьЗаголовокТранспортногоФайлаНБ(ФайлМТ102, ВыборкаПоПлатежномуПоручению);
			
			// инициализируем переменные
			НомерСтроки = 1; ОбщаяСумма  = 0;
			ОбщаяСуммаКомиссии = 0;
			// здесь не обнуляем ОбщаяСуммаРаспределеннойКомиссии, т.к. она содержит общую сумму комиссии по всему документу 
			// и необходима для формирования остатка по комиссии на последнем работнике
			мНомерФайла = мНомерФайла + 1;
			
		КонецЕсли;
		
		// определим, является ли данный работник последним в списке, чтобы на него скинуть разницу в комиссии банка
		ЭтоПоследнийРаботник = Ложь;
		Если НомерППСНачала = КоличествоРаботниковВСписке Тогда
			ЭтоПоследнийРаботник = Истина;
		КонецЕсли;
		
		ОбщаяСумма  = ОбщаяСумма + ВыборкаПоСпискуРаботников.СуммаКПеречислению;
		СформироватьСтрокуРаботникаТранспортногоФайлаНБ(ФайлМТ102, ВыборкаПоПлатежномуПоручению, ВыборкаПоСпискуРаботников, НомерСтроки, ОбщаяСумма, ОбщаяСуммаКомиссии, ОбщаяСуммаРаспределеннойКомиссии, ЭтоПоследнийРаботник);
		
		НомерСтроки = НомерСтроки + 1;
		НомерППСНачала = НомерППСНачала + 1;
		
	КонецЦикла;
	
	// формируем конец файла
	СформироватьКонецТранспортногоФайлаНБ(ФайлМТ102, ВыборкаПоПлатежномуПоручению, НомерСтроки, ОбщаяСумма, ОбщаяСуммаКомиссии, Истина);
	
	
	Если мТекстВыгрузки <> Неопределено Тогда
	
		// если программный вызов
	
		мТекстВыгрузки = ФайлМТ102;
	
	Иначе
		// если интерактивное формирование
	
		// запись файла	
		ВыполнитьВыгрузкуДанныхНБ(ФайлМТ102, ВыборкаПоПлатежномуПоручению);
		
		// файл списка
		ВыборкаПоСпискуРаботников = ЗапросПоСпискуРаботников.Выбрать();
		СформироватьФайлСпискаЗачисленияЗарплатыНБ(ВыборкаПоПлатежномуПоручению, ВыборкаПоСпискуРаботников);
	
	КонецЕсли;
	
КонецПроцедуры //СформироватьФайлыЗачисленияЗарплатыНБ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ТРАНСПОРТНОГО ФАЙЛА СПИСКА КАЗКОММЕРЦБАНКА

Процедура СформироватьФайлСпискаЗачисленияЗарплатыККБ(ВыборкаПоПлатежномуПоручению, ВыборкаПоСпискуРаботников)
	
	// список в текстовом формате
	ФайлСписка = Новый ТекстовыйДокумент;
	
	Макет = ПолучитьМакет("СписокДляЗачисленияККБ");
	ОбластьЗаголовка = Макет.ПолучитьОбласть("Заголовок");
	ОбластьСтроки    = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвала   = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьЗаголовка.Параметры.Заполнить(ВыборкаПоПлатежномуПоручению);
	
	// номер платежного поручения без префикса и ведущих нулей
	ПрефиксОрганизации		 = ?(ТипЗнч(ВыборкаПоПлатежномуПоручению.Организация) = Тип("СправочникСсылка.Организации"), ВыборкаПоПлатежномуПоручению.Организация.Префикс, ВыборкаПоПлатежномуПоручению.Организация.Владелец.Префикс);
	НомерПлатежногоПоручения = ОбщегоНазначения.ПолучитьНомерНаПечать(Документ, глСписокПрефиксовУзлов, ПредставлениеНомераДокумента);
		
	ОбластьЗаголовка.Параметры.НомерПлатежногоПоручения = НомерПлатежногоПоручения;
	ОбластьЗаголовка.Параметры.ОписаниеПериода = УправлениеОтчетами.ПолноеОписаниеПериода(НачалоМесяца(ВыборкаПоПлатежномуПоручению.ПериодС), КонецМесяца(ВыборкаПоПлатежномуПоручению.ПериодПо), Ложь);
	ФайлСписка.Вывести(ОбластьЗаголовка);
	
	ОбщаяСумма = 0;
	ОбщаяСуммаКомСбора = 0;
	НомерСтроки = 0;
	КоличествоСтрок = ВыборкаПоСпискуРаботников.Количество();
	ВключатьКомиссиюБанка = ВыборкаПоПлатежномуПоручению.ВключатьКомиссиюБанка;
	ПроцентКомиссииБанка = ВыборкаПоПлатежномуПоручению.ПолучательПроцентКомиссииБанка;
	Пока ВыборкаПоСпискуРаботников.Следующий() Цикл

		НомерСтроки = НомерСтроки + 1;
		ОбластьСтроки.Параметры.Заполнить(ВыборкаПоСпискуРаботников);
		ОбластьСтроки.Параметры.РеквизитыСотрудника = СокрЛП(ВыборкаПоСпискуРаботников.Фамилия) + " " + 
													  СокрЛП(ВыборкаПоСпискуРаботников.Имя) + " " + 
													  СокрЛП(ВыборкаПоСпискуРаботников.Отчество);
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
		ОбщаяСумма = ОбщаяСумма + ВыборкаПоСпискуРаботников.СуммаКПеречислению;
		
		// учтем комсбор
		Если ВключатьКомиссиюБанка Тогда
			Если НомерСтроки = КоличествоСтрок Тогда
				КомСбор = ВыборкаПоПлатежномуПоручению.СуммаКомиссии - ОбщаяСуммаКомСбора;
			Иначе
				КомСбор = Окр(ВыборкаПоСпискуРаботников.СуммаКПеречислению * ПроцентКомиссииБанка / 100, 2);
			КонецЕсли;
			ОбластьСтроки.Параметры.СуммаКПеречислению = ОбластьСтроки.Параметры.СуммаКПеречислению + КомСбор;
			ОбщаяСумма = ОбщаяСумма + КомСбор;
			ОбщаяСуммаКомСбора = ОбщаяСуммаКомСбора + КомСбор;
		КонецЕсли;
		
		ФайлСписка.Вывести(ОбластьСтроки);
		
	КонецЦикла;

	ОбластьПодвала.Параметры.Заполнить(ВыборкаПоПлатежномуПоручению);
	ОбластьПодвала.Параметры.ОбщаяСумма = ОбщаяСумма;
	ОбластьПодвала.Параметры.ОбщаяСуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ОбщаяСумма, ВыборкаПоПлатежномуПоручению.Валюта);
	ФайлСписка.Вывести(ОбластьПодвала);

	Если мТекстВыгрузки <> Неопределено Тогда
	
		// если программный вызов
		мТекстВыгрузки = ФайлСписка;
		
	Иначе
	
		// если интерактивное формирование
		Если НЕ ЗначениеЗаполнено(КаталогВыгрузки) Тогда
			Сообщить("Список не сформирован!");
			Возврат;
		КонецЕсли;
		
		ПолныйКаталогВыгрузки = КаталогВыгрузки;
		
		КаталогНаДиске = Новый Файл(ПолныйКаталогВыгрузки);
		Если НЕ КаталогНаДиске.Существует() Тогда
			СоздатьКаталог(ПолныйКаталогВыгрузки);
		КонецЕсли;
		
		ИмяФайлаСписка = "Список.txt";
		ЗаписатьДанныеВФайл(ФайлСписка, ПолныйКаталогВыгрузки + ИмяФайлаСписка);
		Сообщить("Список " + ПолныйКаталогВыгрузки + ИмяФайлаСписка + " сформирован!");
	
	КонецЕсли;

КонецПроцедуры //СформироватьФайлСпискаЗачисленияЗарплатыККБ()

Процедура СформироватьФайлыЗачисленияЗарплатыККБ()
	
	Отказ = Ложь;
	
	РезультатЗапросаПоПлатежномуПоручению = СформироватьЗапросПоПлатежномуПоручениюКартСчета();
	ВыборкаПоПлатежномуПоручению = РезультатЗапросаПоПлатежномуПоручению.Выбрать();
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если ВыборкаПоПлатежномуПоручению.Следующий() Тогда
		ПроверитьЗаполнениеРеквизитовПлатежногоПоручения(ВыборкаПоПлатежномуПоручению, Отказ);
	
		ЗапросПоСпискуРаботников = СформироватьЗапросПоКартСчетам();
		ВыборкаПоСпискуРаботников = ЗапросПоСпискуРаботников.Выбрать();
		 
		Пока ВыборкаПоСпискуРаботников.Следующий() Цикл
			ПроверитьЗаполнениеРеквизитовСтрокиСпискаРаботников(ВыборкаПоСпискуРаботников, Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// файл списка
	ВыборкаПоСпискуРаботников = ЗапросПоСпискуРаботников.Выбрать();
	СформироватьФайлСпискаЗачисленияЗарплатыККБ(ВыборкаПоПлатежномуПоручению, ВыборкаПоСпискуРаботников);
	
КонецПроцедуры //СформироватьФайлыЗачисленияЗарплатыККБ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ФАЙЛОВ

Процедура СоздатьФайлВФорматеМТ(ФормироватьОтдельныеФайлы=Ложь, ВключатьПолеFT=Ложь, ВключатьПолеPSO = Ложь, ВключатьПолеPRT = Ложь, ПолеPERIODвЗаголовке = Истина) Экспорт
	
	мВидОперации = Документ.ВидОперации;
	мФормироватьОтдельныеФайлы = ФормироватьОтдельныеФайлы;
	мВключатьПолеFT 	= ВключатьПолеFT;
	мВключатьПолеPSO 	= ВключатьПолеPSO;
	мВключатьПолеPRT 	= ВключатьПолеPRT;
	мПолеPERIODвЗаголовке = ПолеPERIODвЗаголовке;
	мНомерФайла = 1;
	
	Если ЭтоПеречислениеНаКартСчета() Тогда
		
		Если НЕ ЗначениеЗаполнено(ФорматФайлов) Тогда
			Сообщить("Не выбран формат файлов зачисления зарплаты. Выгрузка не выполнена!");
			Возврат;
		КонецЕсли;
		
		// формирование файлов в формате Народного банка
		Если СокрЛП(ФорматФайлов) = мПеречислениеЗарплатыВНародныйБанк Тогда
			СформироватьФайлыЗачисленияЗарплатыНБ();

		ИначеЕсли СокрЛП(ФорматФайлов) = мПеречислениеЗарплатыВКазкоммерцбанк Тогда
		    СформироватьФайлыЗачисленияЗарплатыККБ();
		    
		КонецЕсли;
		
	Иначе
		
		СформироватьФайлОтчислений();
		
	КонецЕсли;
	
КонецПроцедуры

// Функция создает текстовый документ в памяти, содержащий данные в формате МТ
// 
// Параметры:
//	ДокументВыгрузки- ссылка на платежное поручение исходящее, данные которого надо выгрузить
//	ФорматВыгрузки - строка с описанием одного из поддерживаемых форматов выгрузки (см. экспортные переменные модуля)
//
// Возвращаемое значение:
//	Текстовый документ, содержащий весь текст выгрузки
//
Функция СоздатьТекстовыйДокументВФорматеМТ(ДокументВыгрузки, ФорматВыгрузки) Экспорт

	мТекстВыгрузки = Новый ТекстовыйДокумент;
	
	Если ТипЗнч(ДокументВыгрузки) <> Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		Возврат мТекстВыгрузки;
	КонецЕсли;
	
	// сохраняем переданные параметры в реквизиты обработки
	Документ = ДокументВыгрузки;
	ФорматФайлов = ФорматВыгрузки;
	
	// вызываем стандартный механизм формирования
	СоздатьФайлВФорматеМТ(Ложь); 
	
	Возврат мТекстВыгрузки;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

мМТ102СПереносом 	= "МТ-102 (с переносом ключевых слов)";
мМТ102БезПереноса 	= "МТ-102 (без переноса ключевых слов)";

мПеречислениеЗарплатыВНародныйБанк 		= "МТ-102";
мПеречислениеЗарплатыВКазкоммерцбанк 	= "АО Казкоммерцбанк";

мТекстВыгрузки = Неопределено;

#КонецЕсли
