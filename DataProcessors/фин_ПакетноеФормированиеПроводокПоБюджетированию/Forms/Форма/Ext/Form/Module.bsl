
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.НачалоПериода	= НачалоМесяца(ТекущаяДата());
	Объект.ОкончаниеПериода	= КонецМесяца(ТекущаяДата());
	Объект.Организация=фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	// заполнение списка документов
	Для Каждого ВидДокументов Из Метаданные.Документы Цикл
		//Если ВидДокументов.Имя="Сторнирование" Тогда
		//	Продолжить;
		//КонецЕсли;
		Если НЕ ВидДокументов.Движения.Содержит(Метаданные.РегистрыНакопления[фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрФактическихДанныхДляДокумента(ВидДокументов.Имя).ИмяРегистра]) Тогда
			Продолжить;
		КонецЕсли;
		НС 					= Объект.ВидыДокументов.Добавить();
		НС.ИмяДокумента 	= ВидДокументов.Имя;
		НС.СинонимДокумента	= ВидДокументов.Синоним;
	КонецЦикла;
	Объект.ВидыДокументов.Сортировать("СинонимДокумента");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	Для Каждого СтрокаТЧ Из Объект.ВидыДокументов Цикл
		СтрокаТЧ.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура СнятьПометки(Команда)
	Для Каждого СтрокаТЧ Из Объект.ВидыДокументов Цикл
		СтрокаТЧ.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура СформироватьПроводки(Команда)
	ВыполнитьФормированиеПроводок();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьФормированиеПроводок()
  	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("ОтложенныйРежимФормированияПроводокПоБюджетированию") Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_ВидыДокументов.ПрограммныйИдентификатор,
		|	фин_ВидыДокументов.РегистрироватьПервичныеДанныеПоБюджетированию КАК УчитыватьФакт,
		|	фин_ВидыДокументов.ИспользоватьДополнительныеРеквизиты,
		|	фин_ПрименениеСхемОтраженияФактическихДанных.Схема КАК НаборШаблонов,
		|	фин_ПрименениеСхемОтраженияФактическихДанных.Период КАК Период,
		|	фин_ВидыДокументов.Ссылка КАК ВидДокументов,
		|	фин_ПрименениеСхемОтраженияФактическихДанных.ИспользоватьСовместноСШаблонамиРегистров
		|ИЗ
		|	Справочник.фин_ВидыДокументов КАК фин_ВидыДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_ПрименениеСхемОтраженияФактическихДанных КАК фин_ПрименениеСхемОтраженияФактическихДанных
		|		ПО фин_ВидыДокументов.Ссылка = фин_ПрименениеСхемОтраженияФактическихДанных.ОбъектИнформационнойБазы
		|			И (фин_ВидыДокументов.РегистрироватьПервичныеДанныеПоБюджетированию)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидДокументов,
		|	Период";

	Результат = Запрос.Выполнить();

	ТаблицаПравилПоДокументам = Результат.Выгрузить();
	ТаблицаПравилПоДокументам.Колонки.Добавить("ПериодОкончания",Новый ОписаниеТипов("Дата"));
	
	СписокВД = ТаблицаПравилПоДокументам.Скопировать(,"ВидДокументов");
	СписокВД.Свернуть("ВидДокументов");
	Для Каждого ВидДокументов Из СписокВД Цикл
		СтрокиВД = ТаблицаПравилПоДокументам.НайтиСтроки(Новый Структура("ВидДокументов",ВидДокументов.ВидДокументов));
		Для Каждого СтрокаВД Из СтрокиВД Цикл
			Если СтрокаВД.Период = NULL Тогда
				Продолжить;
			ИначеЕсли СтрокаВД.Период > Объект.ОкончаниеПериода Тогда
				СтрокаВД.ПериодОкончания = СтрокаВД.Период;
			Иначе
				ДатаЗавершения = КонецДня(Объект.ОкончаниеПериода);
				Для Каждого СтрокаВД_Сравнение Из СтрокиВД Цикл
					Если СтрокаВД_Сравнение.Период = NULL Тогда
						Продолжить;
					ИначеЕсли СтрокаВД_Сравнение.Период > СтрокаВД.Период Тогда
						ДатаЗавершения = Мин(ДатаЗавершения,СтрокаВД_Сравнение.Период-1);
					КонецЕсли;
				КонецЦикла;
				СтрокаВД.ПериодОкончания = ДатаЗавершения;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
 	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_КлассификаторРегистров.ПрограммныйИдентификатор,
		|	фин_КлассификаторРегистров.РегистрироватьПервичныеДанныеПоБюджетированию КАК УчитыватьФакт,
		|	фин_ПрименениеСхемОтраженияФактическихДанных.Схема КАК НаборШаблонов,
		|	фин_ПрименениеСхемОтраженияФактическихДанных.Период КАК Период,
		|	фин_КлассификаторРегистров.Ссылка КАК ВидРегистров,
		|	фин_КлассификаторРегистров.ВидРегистра
		|ИЗ
		|	Справочник.фин_КлассификаторРегистров КАК фин_КлассификаторРегистров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_ПрименениеСхемОтраженияФактическихДанных КАК фин_ПрименениеСхемОтраженияФактическихДанных
		|		ПО фин_КлассификаторРегистров.Ссылка = фин_ПрименениеСхемОтраженияФактическихДанных.ОбъектИнформационнойБазы
		|			И (фин_КлассификаторРегистров.РегистрироватьПервичныеДанныеПоБюджетированию)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидРегистров,
		|	Период";

	Результат = Запрос.Выполнить();

	ТаблицаПравилПоРегистрам = Результат.Выгрузить();
	ТаблицаПравилПоРегистрам.Колонки.Добавить("ПериодОкончания",Новый ОписаниеТипов("Дата"));
	
	СписокВД = ТаблицаПравилПоРегистрам.Скопировать(,"ВидРегистров");
	СписокВД.Свернуть("ВидРегистров");
	Для Каждого ВидРегистров Из СписокВД Цикл
		СтрокиВД = ТаблицаПравилПоРегистрам.НайтиСтроки(Новый Структура("ВидРегистров",ВидРегистров.ВидРегистров));
		Для Каждого СтрокаВД Из СтрокиВД Цикл
			Если СтрокаВД.Период = NULL Тогда
				Продолжить;
			ИначеЕсли СтрокаВД.Период > Объект.ОкончаниеПериода Тогда
				СтрокаВД.ПериодОкончания = СтрокаВД.Период;
			Иначе
				ДатаЗавершения = КонецДня(Объект.ОкончаниеПериода);
				Для Каждого СтрокаВД_Сравнение Из СтрокиВД Цикл
					Если СтрокаВД_Сравнение.Период = NULL Тогда
						Продолжить;
					ИначеЕсли СтрокаВД_Сравнение.Период > СтрокаВД.Период Тогда
						ДатаЗавершения = Мин(ДатаЗавершения,СтрокаВД_Сравнение.Период);
					КонецЕсли;
				КонецЦикла;
				СтрокаВД.ПериодОкончания = ДатаЗавершения;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	
	Для Каждого СтрокаТЧ Из Объект.ВидыДокументов Цикл
		Если НЕ СтрокаТЧ.Пометка Тогда
			Продолжить;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("----- Обработка документов: "+СтрокаТЧ.СинонимДокумента);
		ИмяДокумента = СтрокаТЧ.ИмяДокумента;
		СтрокиПравилПоДокументу = ТаблицаПравилПоДокументам.НайтиСтроки(Новый Структура("ПрограммныйИдентификатор",ИмяДокумента));
			

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ 
			|	Документ.Ссылка,
			|	Документ.Дата,
			|	Документ.Проведен
			|ИЗ
			|	Документ."+ИмяДокумента+" КАК Документ
			|ГДЕ 
			|	НЕ Документ.ПометкаУдаления "+?(Метаданные.Документы.Найти(ИмяДокумента).Реквизиты.Найти("Организация")<>Неопределено,"
			|	И Документ.Организация = &Организация","")+"
			|	И Документ.Дата >= &НачалоПериода
			|	И Документ.Дата <= &КонецПериода"+?(Строка(Метаданные.Документы.Найти(ИмяДокумента).Проведение)="Разрешить","
			|	И Документ.Проведен","");

		Запрос.УстановитьПараметр("НачалоПериода", 	Объект.НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(Объект.ОкончаниеПериода));
		Запрос.УстановитьПараметр("Организация", 	Объект.Организация);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ИмяДокумента = "Сторнирование" Тогда
				Документ = ВыборкаДетальныеЗаписи.Ссылка;
				ПеренестиДвиженияСторнирования(Документ.ДокументОснование,Документ);
				Продолжить;
			КонецЕсли;
			ДокументМетаданные = Метаданные.Документы.Найти(ИмяДокумента);
			ПоРегистрам = Ложь;
			Если СтрокиПравилПоДокументу.Количество()=0 Тогда
				ПоРегистрам = Истина;
			ИначеЕсли СтрокиПравилПоДокументу[0].УчитыватьФакт = Ложь Тогда
				ПоРегистрам = Истина;
			Иначе
				Для Каждого СтрокаПравил Из СтрокиПравилПоДокументу Цикл
					Если СтрокаПравил.Период<=ВыборкаДетальныеЗаписи.Дата И СтрокаПравил.ПериодОкончания>=ВыборкаДетальныеЗаписи.Дата Тогда
						Если СтрокаПравил.НаборШаблонов = Перечисления.фин_АльтернативныеСпособыОтраженияФактическихДанных.ПоНастройкамДляРегистров Тогда
							ПоРегистрам = Истина;
						Иначе
							НаборШаблонов = СтрокаПравил.НаборШаблонов;
							// выполним непосредственно регистрацию фактических данных по шаблону для документа
							СтруктураТаблиц = Новый Структура;
							ЗаполнитьПередаваемыеДвижения(ВыборкаДетальныеЗаписи.Ссылка,СтруктураТаблиц,СтрокаПравил.ВидДокументов,ИмяДокумента,НаборШаблонов);
							Отказ = Ложь;
							РегистрацияПрогнозныхДанных = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмеютсяПравилаРегистрацииПрогнозныхДанных() И ДокументМетаданные.Движения.Содержит(Метаданные.РегистрыНакопления.фин_ПрогнозИсполненияБюджетов);
							РегистрацияЛимитов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмеютсяЛимитыНаИсполнение() И ДокументМетаданные.Движения.Содержит(Метаданные.РегистрыНакопления.фин_КонтролируемыеФинансовыеПоказатели);
							ПараметрыХраненияФакта = фин_ОбщегоНазначенияВызовСервераПовтИсп.РегистрФактическихДанныхДляДокумента(ИмяДокумента);
							НаборДвиженийОбороты = РегистрыНакопления[ПараметрыХраненияФакта.ИмяРегистра].СоздатьНаборЗаписей();
							НаборДвиженийОбороты.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Ссылка);
							НаборДвиженийОбороты.Записать();
							фин_РегистрацияФактическихДанныхПоБюджетированию.ФормироватьПроводкиПоБюджетированию(ВыборкаДетальныеЗаписи.Ссылка, Отказ, РежимПроведенияДокумента.Неоперативный,СтруктураТаблиц,,СтрокаПравил.ВидДокументов,ИмяДокумента,РегистрацияПрогнозныхДанных,РегистрацияЛимитов);
							Если Отказ Тогда
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось сформировать проводки для документа "+ВыборкаДетальныеЗаписи.Ссылка);
							КонецЕсли;
							Если СтрокаПравил.ИспользоватьСовместноСШаблонамиРегистров Тогда
								ПоРегистрам = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			// проверяем необходимость регистрации факта из движений
			Если ПоРегистрам Тогда
				Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("УчитыватьФактическиеДанныеПоДвижениямРегистров") Тогда
					Продолжить;
				КонецЕсли;
				Документ = Метаданные.Документы.Найти(ИмяДокумента);
				Для Каждого Движение Из Документ.Движения Цикл
					ПолноеИмя = Движение.ПолноеИмя();
					Если Найти(ПолноеИмя,"РегистрСведений.")<>0 Тогда
						ВидРегистра = Перечисления.фин_ВидыРегистровСистемы.РегистрыСведений;
						ТекстВидРегистра = "РегистрыСведений";
					ИначеЕсли Найти(ПолноеИмя,"РегистрНакопления.")<>0 Тогда
						ВидРегистра = Перечисления.фин_ВидыРегистровСистемы.РегистрыНакопления;
						ТекстВидРегистра = "РегистрыНакопления";
					ИначеЕсли Найти(ПолноеИмя,"РегистрБухгалтерии.")<>0 Тогда
						ВидРегистра = Перечисления.фин_ВидыРегистровСистемы.РегистрыБухгалтерии;
						ТекстВидРегистра = "РегистрыБухгалтерии";
					Иначе
						ВидРегистра = Перечисления.фин_ВидыРегистровСистемы.РегистрыРасчета;
						ТекстВидРегистра = "РегистрыРасчета";
					КонецЕсли;
					СтрокиПравилПоРегистру = ТаблицаПравилПоРегистрам.НайтиСтроки(Новый Структура("ВидРегистра,ПрограммныйИдентификатор",ВидРегистра,Движение.Имя));
					Если СтрокиПравилПоРегистру.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					Если СтрокиПравилПоРегистру[0].УчитыватьФакт = Ложь Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого СтрокаПравил Из СтрокиПравилПоРегистру Цикл
						Если СтрокаПравил.Период<=ВыборкаДетальныеЗаписи.Дата И СтрокаПравил.ПериодОкончания>=ВыборкаДетальныеЗаписи.Дата Тогда
							НаборШаблонов = СтрокаПравил.НаборШаблонов;
							// выполним непосредственно регистрацию фактических данных по шаблону для документа
							ДанныеИсточника = ПолучитьВыгруженныеДвиженияИзВыбранногоРегистра(ВыборкаДетальныеЗаписи.Ссылка,СтрЗаменить(ТекстВидРегистра,"Регистры","Регистр")+"."+Движение.Имя+?(ТекстВидРегистра="РегистрыБухгалтерии",".ДвиженияССубконто(, , Регистратор = &Ссылка, , )",""));
							Отказ = Ложь;
							РегистрацияПрогнозныхДанных = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмеютсяПравилаРегистрацииПрогнозныхДанных() И Документ.Движения.Содержит(Метаданные.РегистрыНакопления.фин_ПрогнозИсполненияБюджетов);
							РегистрацияЛимитов = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИмеютсяЛимитыНаИсполнение() И Документ.Движения.Содержит(Метаданные.РегистрыНакопления.фин_КонтролируемыеФинансовыеПоказатели);
							фин_РегистрацияФактическихДанныхПоБюджетированию.ФормироватьПроводкиПоБюджетированиюПоРегистрам(ВыборкаДетальныеЗаписи.Ссылка,ДанныеИсточника,ТекстВидРегистра,Движение.Имя,Отказ,Истина,НаборШаблонов,РегистрацияПрогнозныхДанных,РегистрацияЛимитов);
							Если Отказ Тогда
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось сформировать проводки для документа "+ВыборкаДетальныеЗаписи.Ссылка+"
								|	по правилу для регистра "+НаборШаблонов.Владелец);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("----- ГОТОВО. ");
КонецПроцедуры

Процедура ПеренестиДвиженияСторнирования(ИсходныйДокумент,ДокументСторно)

	// скопируем все движения
	ДвиженияДокументаОснования 	= ИсходныйДокумент.Метаданные().Движения;
	ДвиженияСторно 				= ДокументСторно.Метаданные().Движения;
	ДокументОбъект				= ДокументСторно.ПолучитьОбъект();
	
	Для Каждого МетаданныеРегистр Из ДвиженияДокументаОснования Цикл
		
		Если Найти(МетаданныеРегистр.Имя,"фин_")=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПравоДоступа("Изменение",МетаданныеРегистр) Тогда
			Продолжить; 
		КонецЕсли;
		
		Если Не ДвиженияСторно.Содержит(МетаданныеРегистр) Тогда
			// регистр не сторнируется
			Продолжить;
		КонецЕсли;
		
		Попытка
			Если Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистр) Тогда
				НаборЗаписей = РегистрыНакопления[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
			ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеРегистр) Тогда
				НаборЗаписей = РегистрыБухгалтерии[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
			Иначе
				Продолжить;
			КонецЕсли;	
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСторно);
			ДокументОбъект.ЗаполнитьНаборЗаписей(НаборЗаписей, МетаданныеРегистр);
			НаборЗаписей.Записать();
		Исключение
			Сообщить("Ошибка при чтении/записи данных регистра " + МетаданныеРегистр.Имя + ": " + ОписаниеОшибки());
		КонецПопытки;
	
	КонецЦикла;
КонецПроцедуры


// передает в структуру наборы движений, которые могут понадобиться при расчете движений
//
&НаСервере
Процедура ЗаполнитьПередаваемыеДвижения(Источник,СтруктураТаблиц,ВидДокументов,ИмяДокумента,НаборШаблонов) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрограммныйИдентификатор",	ИмяДокумента);
	Запрос.УстановитьПараметр("НаборШаблонов",				НаборШаблонов);
	Запрос.УстановитьПараметр("ВидДокументов",				ВидДокументов);
	Запрос.УстановитьПараметр("ДатаДокумента",				Источник.Дата);
	Запрос.УстановитьПараметр("ВидДанных",					Перечисления.фин_ВидыОтраженийПервичныхДокументовВБюджетировании.ПоДвижениямВРегистрах);
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	ВложенныйЗапрос.ИмяИсточника
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		НаборыШаблонов.Ссылка КАК НаборШаблонов,
	             |		ШаблоныОтражения.ИмяИсточника КАК ИмяИсточника
	             |	ИЗ
	             |		Справочник.фин_НаборыШаблоновОтраженияПервичныхДанныхВБюджетах.НаборШаблонов КАК НаборыШаблонов
	             |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.фин_ПравилаОтраженияФактическихДанных КАК ШаблоныОтражения
	             |			ПО НаборыШаблонов.Схема = ШаблоныОтражения.Владелец ИЛИ НаборыШаблонов.Схема = ШаблоныОтражения.Владелец.Владелец

	             |	ГДЕ
	             |		ШаблоныОтражения.ВидДанных = &ВидДанных
	             |		И НаборыШаблонов.Ссылка = &НаборШаблонов
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		&НаборШаблонов,
	             |		ВЫБОР
	             |			КОГДА &ПрограммныйИдентификатор = ""ПлатежноеПоручениеИсходящее""
	             |					ИЛИ &ПрограммныйИдентификатор = ""ПлатежныйОрдерСписаниеДенежныхСредств""
	             |					ИЛИ &ПрограммныйИдентификатор = ""РасходныйКассовыйОрдер""
	             |				ТОГДА ""ден_РезервыПоБюджетамПодВыполнениеЗаявок""
	             |			ИНАЧЕ ""ден_ПредполагаемыеПоступленияПоБюджетам""
	             |		КОНЕЦ
	             |	ГДЕ
	             |		&НаборШаблонов = ЗНАЧЕНИЕ(Перечисление.фин_АльтернативныеСпособыОтраженияФактическихДанных.ПоДокументамПланированияДвиженийДенежныхСредств)) КАК ВложенныйЗапрос";
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			Имя = Сред(Выборка.ИмяИсточника,Найти(Выборка.ИмяИсточника,".")+1);
			ПолучаемыеИзЗаписанныхНаборов = Новый СписокЗначений;
			ПолучаемыеИзЗаписанныхНаборов.Добавить("ден_ПредполагаемыеПоступленияПоБюджетам","РегистрыНакопления.ден_ПредполагаемыеПоступленияПоБюджетам");
			ПолучаемыеИзЗаписанныхНаборов.Добавить("ден_РезервыПоБюджетамПодВыполнениеЗаявок","РегистрыНакопления.ден_РезервыПоБюджетамПодВыполнениеЗаявок");
			Если ПолучаемыеИзЗаписанныхНаборов.НайтиПоЗначению(Имя)=Неопределено Тогда
				ТаблицаДвижений = ПолучитьВыгруженныеДвижения(Источник,Имя);
			ИначеЕсли Имя = "ден_ПредполагаемыеПоступленияПоБюджетам" Тогда
				НЗ = РегистрыНакопления[Имя].СоздатьНаборЗаписей();
				ТаблицаДвижений = НЗ.ВыгрузитьКолонки();
				фин_ПроцедурыМеханизмовБюджетирования.ЗаполнитьПредполагаемыеПоступления(ПолучитьВыгруженныеДвижения(Источник,"ден_ПланируемыеПоступленияДенежныхСредств"),ТаблицаДвижений);
			ИначеЕсли Имя = "ден_РезервыПоБюджетамПодВыполнениеЗаявок" Тогда
				НЗ = РегистрыНакопления[Имя].СоздатьНаборЗаписей();
				ТаблицаДвижений = НЗ.ВыгрузитьКолонки();
				ИмяРегистра = ?(Метаданные.РегистрыНакопления.Найти("ден_ЗаявкиНаРасходованиеСредств")<>Неопределено,"ден_ЗаявкиНаРасходованиеСредств","ЗаявкиНаРасходованиеСредств");
				фин_ПроцедурыМеханизмовБюджетирования.ЗаполнитьПланируемыеРасходы(ПолучитьВыгруженныеДвижения(Источник,ИмяРегистра),ТаблицаДвижений);
			КонецЕсли;
			СтруктураТаблиц.Вставить(Имя,ТаблицаДвижений);
		Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Проведение документа "+Источник.Ссылка+":
				|	не обнаружен набор движений """+Выборка.ИмяИсточника+""", используемый в отражении фактических данных по бюджетам!");
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры //ЗаполнитьПередаваемыеДвижения

&НаСервере
Функция ПолучитьВыгруженныеДвижения(Источник,ИмяНабора)
	Документ = Метаданные.Документы.Найти(Источник.Метаданные().Имя);
	Для Каждого Движение Из Документ.Движения Цикл
		Если Движение.Имя = ИмяНабора Тогда
			ПолноеИмя = Движение.ПолноеИмя();
			Если Найти(ПолноеИмя,"РегистрСведений.")<>0 Тогда
				ВидРегистра = "РегистрСведений";
			ИначеЕсли Найти(ПолноеИмя,"РегистрНакопления.")<>0 Тогда
				ВидРегистра = "РегистрНакопления";
			ИначеЕсли Найти(ПолноеИмя,"РегистрБухгалтерии.")<>0 Тогда
				ВидРегистра = "РегистрБухгалтерии";
			Иначе
				ВидРегистра = "РегистрРасчета";
			КонецЕсли;
			Если ВидРегистра = "РегистрБухгалтерии" Тогда
				Набор = Источник.ПолучитьОбъект().Движения[ИмяНабора];
				Набор.Прочитать();
				Возврат Набор.Выгрузить();
			КонецЕсли;
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ * ИЗ "+ВидРегистра+"."+ИмяНабора+" КАК Движения ГДЕ Движения.Регистратор = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка",Источник);
			Возврат Запрос.Выполнить().Выгрузить();
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Проведение документа "+Источник+":
	|	не обнаружен набор движений """+ИмяНабора+""", используемый в отражении фактических данных по бюджетам!");
	Возврат Новый ТаблицаЗначений;
КонецФункции


&НаСервере
Функция ПолучитьВыгруженныеДвиженияИзВыбранногоРегистра(Источник,ИмяНабора)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ "+ИмяНабора+" КАК Движения ГДЕ Движения.Регистратор = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",Источник);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

