&НаКлиенте
Процедура ПериодНазад(Команда)
	ДобавитьПериод(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПериод(Добавить)
	НачалоПериодаПланирования=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СледующийПериодПланирования(НачалоПериодаПланирования,Периодичность,Добавить);
	Если ИспользоватьТочкиПланирования Тогда
		НачалоПериодаПланирования=фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СинхронизироватьПериодПланированияСоСценарием(НачалоПериодаПланирования,Периодичность);
	КонецЕсли;
	фин_УправлениеОтчетамиКлиентСервер.УстановитьТекстПериодаПоВыбраннойПериодичности(НадписьПериодПланирования,Периодичность,НачалоПериодаПланирования,КонецПериодаПланирования);
	Календарь.ДатаНачала	= НачалоПериодаПланирования;
	Календарь.ДатаОкончания	= КонецПериодаПланирования;
КонецПроцедуры

&НаКлиенте
Процедура ПериодВперед(Команда)
	ДобавитьПериод(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПериодВыбрать(Команда)
	ВыбратьПериодПланирования(НачалоПериодаПланирования,Элементы.ПериодВыбрать);
КонецПроцедуры

#Область ПроцедурыРаботыСПериодом

&НаКлиенте
Процедура ВыбратьПериодПланирования(Период,Элемент)
	СписокПериодов = ПолучитьСписокПериодов(Период,Периодичность);
	Если СписокПериодов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	ОписаниеОповещенияВыбораПериода = Новый ОписаниеОповещения("ОбработкаВыбораПериода",ЭтотОбъект,Элемент);
	ПоказатьВыборИзСписка(ОписаниеОповещенияВыбораПериода,СписокПериодов,Элемент,СписокПериодов[0]);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПериода(мРезультат,Элемент) Экспорт
	Если мРезультат<>Неопределено Тогда
		Если ТипЗнч(мРезультат.Значение) = Тип("Число") Тогда
			ВыбратьПериодПланирования(Дата(мРезультат.Значение,1,1),Элемент);
		Иначе
			НачалоПериодаПланирования = мРезультат.Значение;
			фин_УправлениеОтчетамиКлиентСервер.УстановитьТекстПериодаПоВыбраннойПериодичности(НадписьПериодПланирования,Периодичность,НачалоПериодаПланирования,КонецПериодаПланирования);
			Календарь.ДатаНачала	= НачалоПериодаПланирования;
			Календарь.ДатаОкончания	= КонецПериодаПланирования;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокПериодов(ПериодПланирования,Сценарий)
	Возврат фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьПериодыДляВыбора(ПериодПланирования,Сценарий);	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеПериода(ОтчетОбъект = Неопределено, НачалоПериода = Неопределено, КонецПериода = Неопределено, ТолькоДаты  = Ложь) Экспорт
	
	Возврат НадписьПериодПланирования;
	
КонецФункции

#КонецОбласти


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.Свойство("НачалоПериодаПланирования",		НачалоПериодаПланирования);
	Параметры.Свойство("КонецПериодаПланирования",		КонецПериодаПланирования);
	Параметры.Свойство("Периодичность",					Периодичность);
	Параметры.Свойство("Бюджет",						Бюджет);
	Параметры.Свойство("РазрешитьПроизвольныйПериод",	РазрешитьПроизвольныйПериод);
	ПериодичностьДляОпределения = ?(ТипЗнч(Периодичность)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования(),фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Периодичность),Периодичность);
	Если НЕ ЗначениеЗаполнено(НачалоПериодаПланирования) И ТипЗнч(Периодичность)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() Тогда
		НачалоПериодаПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СинхронизироватьПериодПланированияСоСценарием(ТекущаяДата(),Периодичность);
	ИначеЕсли НЕ ЗначениеЗаполнено(НачалоПериодаПланирования) Тогда
		НачалоПериодаПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекущаяДата(),ПериодичностьДляОпределения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КонецПериодаПланирования) Тогда
		КонецПериодаПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(НачалоПериодаПланирования,ПериодичностьДляОпределения);
	КонецЕсли;
	Если ТипЗнч(Периодичность)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() Тогда
		ИспользоватьТочкиПланирования = фин_ОбщегоНазначенияВызовСервераПовтИсп.ИспользоватьТочкиПланированияСценария(Периодичность);
	КонецЕсли;
	Если ЗначениеЗаполнено(НачалоПериодаПланирования) И ЗначениеЗаполнено(КонецПериодаПланирования) Тогда
		Календарь.ДатаНачала	= НачалоПериодаПланирования;
		Календарь.ДатаОкончания	= КонецПериодаПланирования;
	КонецЕсли;
	//Элементы.Календарь.Видимость = РазрешитьПроизвольныйПериод;
	Если НЕ РазрешитьПроизвольныйПериод И фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_ОграничитьВыборПериодовБюджетированияИнтерваламиБюджетныхКампаний") Тогда
		Элементы.ФормаВыборПериодовБюджетныхКампаний.Пометка = Истина;
		Элементы.ФормаВыборПериодовБюджетныхКампаний.Видимость = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаВыборПериодаБюджетнойКампании;
		ОбновитьСписокБюджетныхПериодов();
	КонецЕсли;
	фин_УправлениеОтчетамиКлиентСервер.УстановитьТекстПериодаПоВыбраннойПериодичности(НадписьПериодПланирования,Периодичность,НачалоПериодаПланирования,КонецПериодаПланирования,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриИзменении(Элемент)
	Если ИспользоватьТочкиПланирования Тогда
		Календарь.ДатаНачала		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СинхронизироватьПериодПланированияСоСценарием(Календарь.ДатаНачала,Периодичность);
		Календарь.ДатаОкончания		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(Календарь.ДатаНачала,ПериодичностьДляОпределения);
	Иначе
		Календарь.ДатаНачала		= фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Календарь.ДатаНачала,ПериодичностьДляОпределения);
		Календарь.ДатаОкончания		= ?(РазрешитьПроизвольныйПериод,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Календарь.ДатаОкончания,ПериодичностьДляОпределения),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьГоризонтПланирования(Календарь.ДатаНачала,Периодичность));
	КонецЕсли;
	НачалоПериодаПланирования 	= Календарь.ДатаНачала;
	КонецПериодаПланирования 	= Календарь.ДатаОкончания;
	фин_УправлениеОтчетамиКлиентСервер.УстановитьТекстПериодаПоВыбраннойПериодичности(НадписьПериодПланирования,Периодичность,НачалоПериодаПланирования,КонецПериодаПланирования,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодовБюджетныхКампаний(Команда)
	Элементы.ФормаВыборПериодовБюджетныхКампаний.Пометка = НЕ Элементы.ФормаВыборПериодовБюджетныхКампаний.Пометка;
	Элементы.Страницы.ТекущаяСтраница = ?(Элементы.ФормаВыборПериодовБюджетныхКампаний.Пометка,Элементы.Страницы.ПодчиненныеЭлементы.ГруппаВыборПериодаБюджетнойКампании,Элементы.Страницы.ПодчиненныеЭлементы.ГруппаРучнойВыборПериода);
	Если Элементы.ФормаВыборПериодовБюджетныхКампаний.Пометка И НЕ ПериодыПолучены Тогда
		ОбновитьСписокБюджетныхПериодов();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокБюджетныхПериодов()
	СписокБюджетныхПериодов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(фин_ПрименяемыеРегламентыФормированияБюджетов.Период) КАК ПериодРегламента,
		|	фин_ОткрытыеБюджетныеКампании.ПериодПланирования
		|ПОМЕСТИТЬ ВТ_МаксимальныеПериоды
		|ИЗ
		|	РегистрСведений.фин_ОткрытыеБюджетныеКампании КАК фин_ОткрытыеБюджетныеКампании
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_ПрименяемыеРегламентыФормированияБюджетов КАК фин_ПрименяемыеРегламентыФормированияБюджетов
		|		ПО фин_ОткрытыеБюджетныеКампании.ПериодПланирования >= фин_ПрименяемыеРегламентыФормированияБюджетов.Период
		|ГДЕ
		|	НЕ фин_ОткрытыеБюджетныеКампании.ПериодПланирования ЕСТЬ NULL 
		|	"+?(ЗначениеЗаполнено(Периодичность) И ТипЗнч(Периодичность)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования(),"И фин_ОткрытыеБюджетныеКампании.Сценарий = &Сценарий","")+"
		|СГРУППИРОВАТЬ ПО фин_ОткрытыеБюджетныеКампании.ПериодПланирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_МаксимальныеПериоды.ПериодПланирования,
		|	фин_РегламентФормированияБюджетов.Бюджет
		|ПОМЕСТИТЬ ВТ_ПериодыОткрытыхКампанийПоБюджетам
		|ИЗ
		|	ВТ_МаксимальныеПериоды КАК ВТ_МаксимальныеПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_ПрименяемыеРегламентыФормированияБюджетов КАК фин_ПрименяемыеРегламентыФормированияБюджетов
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.фин_РегламентФормированияБюджетов КАК фин_РегламентФормированияБюджетов
		|			ПО (фин_ПрименяемыеРегламентыФормированияБюджетов.Регламент = фин_РегламентФормированияБюджетов.Регламент)
		|		ПО ВТ_МаксимальныеПериоды.ПериодРегламента = фин_ПрименяемыеРегламентыФормированияБюджетов.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	фин_СформированныеБюджеты.ПериодПланирования
		|ПОМЕСТИТЬ ВсеПериоды
		|ИЗ
		|	Документ.фин_Бюджет КАК фин_СформированныеБюджеты
		|ГДЕ 
		|	"+?(ЗначениеЗаполнено(Бюджет),"фин_СформированныеБюджеты.ФормируемыйБюджет = &Бюджет","ИСТИНА")+"
		|	И "+?(ЗначениеЗаполнено(Периодичность) И ТипЗнч(Периодичность)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования(),"фин_СформированныеБюджеты.Сценарий = &Сценарий","ИСТИНА")+"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ПериодыОткрытыхКампанийПоБюджетам.ПериодПланирования
		|ИЗ
		|	ВТ_ПериодыОткрытыхКампанийПоБюджетам КАК ВТ_ПериодыОткрытыхКампанийПоБюджетам";
		Если ЗначениеЗаполнено(Бюджет) Тогда
			Запрос.Текст = Запрос.Текст+"
			|ГДЕ
			|	ВТ_ПериодыОткрытыхКампанийПоБюджетам.Бюджет = &Бюджет";
		КонецЕсли;
		Запрос.Текст=Запрос.Текст+"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	фин_КалендарныеПланыБюджетныхКампаний.КалендарныйПлан.ПериодПланирования
		|ИЗ
		|	РегистрСведений.фин_КалендарныеПланыБюджетныхКампаний КАК фин_КалендарныеПланыБюджетныхКампаний
		|ГДЕ фин_КалендарныеПланыБюджетныхКампаний.КалендарныйПлан ССЫЛКА Документ.фин_КалендарныйПланБюджетнойКампании";
		Если ЗначениеЗаполнено(Бюджет) Тогда
			Запрос.Текст = Запрос.Текст+"
			|	И	фин_КалендарныеПланыБюджетныхКампаний.Бюджет = &Бюджет";
		КонецЕсли;
		Запрос.Текст=Запрос.Текст+"
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|	ВТ.ПериодПланирования
		|ИЗ ВсеПериоды КАК ВТ
		|УПОРЯДОЧИТЬ ПО
		|	ВТ.ПериодПланирования";
	
	Запрос.УстановитьПараметр("Бюджет", Бюджет);
	Запрос.УстановитьПараметр("Сценарий", Периодичность);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокБюджетныхПериодов.Добавить(ВыборкаДетальныеЗаписи.ПериодПланирования,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПредставлениеИнтервалаСтрокой(ВыборкаДетальныеЗаписи.ПериодПланирования,Периодичность));
	КонецЦикла;

	ПериодыПолучены = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокБюджетныхПериодовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	НачалоПериодаПланирования = СписокБюджетныхПериодов.НайтиПоИдентификатору(ВыбраннаяСтрока).Значение;
	фин_УправлениеОтчетамиКлиентСервер.УстановитьТекстПериодаПоВыбраннойПериодичности(НадписьПериодПланирования,Периодичность,НачалоПериодаПланирования,КонецПериодаПланирования);
	Календарь.ДатаНачала	= НачалоПериодаПланирования;
	Календарь.ДатаОкончания	= КонецПериодаПланирования;
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	Закрыть(Новый Структура("НачалоПериода,КонецПериода",НачалоПериодаПланирования,КонецПериодаПланирования));
КонецПроцедуры
