
&НаКлиенте
Процедура НажатиеНаНавигационнуСсылкуОсновнойПанели(Элемент)
	Префикс = ?(Найти(Элемент.Имя,"Декорация")<>0,"Декорация","Надпись");
	ИмяСтраницы = Сред(Элемент.Имя,СтрДлина(Префикс)+1);
	Элементы.РазделыУчета.ТекущаяСтраница = Элементы.РазделыУчета.ПодчиненныеЭлементы[ИмяСтраницы];
	Подпункты = Неопределено;
	Для Каждого ПодчиненныйЭлемент Из Элементы.РазделыУчета.ТекущаяСтраница.ПодчиненныеЭлементы Цикл
		Если Найти(ПодчиненныйЭлемент.Имя,"ГруппаПодпункты")<>0 Тогда
			Подпункты = ПодчиненныйЭлемент;
		КонецЕсли;
	КонецЦикла;
	Если Подпункты<>Неопределено Тогда
		ПервыйРаздел = Сред(Подпункты.ПодчиненныеЭлементы[0].Имя,СтрДлина("Декорация")+1);
		Элементы["Страницы"+ИмяСтраницы].ТекущаяСтраница = Элементы["Страницы"+ИмяСтраницы].ПодчиненныеЭлементы[ПервыйРаздел];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НажатиеНаНавигационнуюСсылкуПодраздела(Элемент)
	Раздел = Сред(Элемент.Имя,СтрДлина("Декорация")+1);
	ИмяСтраницы = Элемент.Родитель.Родитель.Имя;
	Элементы["Страницы"+ИмяСтраницы].ТекущаяСтраница = Элементы["Страницы"+ИмяСтраницы].ПодчиненныеЭлементы[Раздел];
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


// Управляет доступностью элементов формы
//
Процедура УстановитьДоступность()

	Элементы.фин_НастройкиХраненияФактическихДанных.Видимость = КонстантыНабор.фин_РежимХраненияФактическихДанных = Перечисления.фин_РежимыХраненияФактическихДанных.НастраиваемыйРежим;
	
КонецПроцедуры // УстановитьВидимость()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НажатиеНаНавигационнуСсылкуОсновнойПанели(Элементы.ДекорацияБюджетирование);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
  	СписокВыбораРазделителей.Добавить(" ",	"Пробел");
	СписокВыбораРазделителей.Добавить(". ",	"Точка");
	СписокВыбораРазделителей.Добавить(" - ","Тире");

	мПравоНаРедактированиеНастроекПараметровУчета = (РольДоступна("ПолныеПрава") Или РольДоступна("ГлавныйБухгалтер")); 

	УстановитьДоступность();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаДополнительныхРазрезовБюджетирования.Измерение
		|ИЗ
		|	РегистрСведений.фин_НастройкаДополнительныхРазрезовБюджетирования КАК НастройкаДополнительныхРазрезовБюджетирования";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() И КонстантыНабор.фин_ИспользоватьУниверсальнуюАналитику Тогда
		Элементы.фин_ИспользоватьУниверсальнуюАналитику.Доступность=Ложь;
	КонецЕсли;

	Если КонстантыНабор.фин_РазделительКодаСтатьиВОтчетах <>"" Тогда
		РезультатВыбора = СписокВыбораРазделителей.НайтиПоЗначению(КонстантыНабор.фин_РазделительКодаСтатьиВОтчетах);
		Если РезультатВыбора <>Неопределено Тогда
			мРазделительКодаСтатьиВОтчетах = РезультатВыбора.Представление;
		КонецЕсли;
	КонецЕсли;
	

	ОписаниеТиповПериодичность = Новый ОписаниеТипов("ПеречислениеСсылка.фин_Периодичность");
	Элементы.фин_ПериодичностьФормированияБюджетногоРегламента.ОграничениеТипа = ОписаниеТиповПериодичность;
	

	Если КонстантыНабор.фин_РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана
//		ИЛИ КонстантыНабор.фин_РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0
//		ИЛИ КонстантыНабор.фин_РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.УправлениеТорговлейДляКазахстана_3
		ИЛИ КонстантыНабор.фин_РежимИнтеграцииСУчетнойСистемой = Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.ПустаяСсылка() Тогда
		Элементы.усд_ГрафикУчетаРаботПоСогласованию.Видимость = Ложь;
	Иначе
		Попытка
			ОписаниеТиповГрафик = ?(фин_ОбщегоНазначенияВызовСервераПовтИсп.ПоддержкаГрафиковРаботыЗУП(),Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботы"),Новый ОписаниеТипов("СправочникСсылка.ПроизводственныеКалендари"));
			Элементы.усд_ГрафикУчетаРаботПоСогласованию.ОграничениеТипа = ОписаниеТиповГрафик;
		Исключение
			
		КонецПопытки;
	КонецЕсли;
	Элементы.РабочиеИнтервалыВремени.Видимость=НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ПоддержкаГрафиковРаботыЗУП();
	Элементы.фин_ИспользоватьРеквизитПлановаяЕдиницаИзмеренияПриПланировании.Видимость = Метаданные.Справочники.Номенклатура.Реквизиты.Найти("ПлановаяЕдиницаИзмерения")<>Неопределено;
	Элементы.фин_РасчетПлановыхЗатратТрудаВРазрезеДолжностей.Видимость = Метаданные.ОпределяемыеТипы.фин_ДолжностиДляРасчетаПлановыхЗатратТруда.Тип.ПривестиЗначение(Неопределено)<>"";
	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ПоддержкаГрафиковРаботыЗУП() Тогда
		ДанныеХранилища = Константы.усд_НастройкаРабочегоВремени.Получить().Получить();
		Если ДанныеХранилища<>Неопределено И ТипЗнч(ДанныеХранилища)=Тип("Структура") Тогда
			Если ДанныеХранилища.Свойство("РабочиеИнтервалыВремени") Тогда
				Для Каждого СтрокаТЧ Из ДанныеХранилища.РабочиеИнтервалыВремени Цикл
					НС = РабочиеИнтервалыВремени.Добавить();
					ЗаполнитьЗначенияСвойств(НС,СтрокаТЧ);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.фин_ИспользуютсяСвойстваИКатегории = ТекущийОбъект.фин_РежимИнтеграцииСУчетнойСистемой=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.БухгалтерияДляКазахстана_3_0 ИЛИ ТекущийОбъект.фин_РежимИнтеграцииСУчетнойСистемой=Перечисления.фин_РежимыИнтеграцииСУчетнойСистемой.КомплексноеУправлениеФинансамиИБюджетированиеДляКазахстана;
	Если НЕ фин_ОбщегоНазначенияВызовСервераПовтИсп.ПоддержкаГрафиковРаботыЗУП() Тогда
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("РабочиеИнтервалыВремени",РабочиеИнтервалыВремени.Выгрузить());
		ПродолжительностьВЧасах = 0;
		Для Каждого СтрокаТЧ Из РабочиеИнтервалыВремени Цикл
			ПродолжительностьВЧасах = ПродолжительностьВЧасах + (СтрокаТЧ.ВремяОкончания - СтрокаТЧ.ВремяНачала)/(60*60);
		КонецЦикла;
		ПродолжительностьВЧасах = Окр(ПродолжительностьВЧасах,2);
		СтруктураДанных.Вставить("ПродолжительностьРабочегоДня",ПродолжительностьВЧасах);
		Константы.усд_НастройкаРабочегоВремени.Установить(Новый ХранилищеЗначения(СтруктураДанных));
	КонецЕсли;
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

&НаКлиенте
Процедура фин_ОтложенныйРежимФормированияПроводокПоБюджетированиюПриИзменении(Элемент)
	Если КонстантыНабор.фин_ОтложенныйРежимФормированияПроводокПоБюджетированию = Ложь Тогда
		КонстантыНабор.фин_ИспользоватьОтложенныйРежимУчетаФактическихДанных = Истина;
	КонецЕсли;
	УстановитьДоступность();
КонецПроцедуры


&НаКлиенте
Процедура фин_ИспользоватьРасчетныеМоделиБюджетированияПриИзменении(Элемент)
	Если НЕ КонстантыНабор.фин_ИспользоватьРасчетныеМоделиБюджетирования Тогда
		КонстантыНабор.фин_ПоддержкаЦиклическихМоделей = Ложь;
		КонстантыНабор.фин_РасширенныйРежимФормированияПроводокПриРасчетеПоМоделям = Ложь;
	КонецЕсли;
	УстановитьДоступность();
КонецПроцедуры


&НаКлиенте
Процедура фин_ВестиУчетПоПлануСчетовБюджетированияПриИзменении(Элемент)
	Если НЕ КонстантыНабор.фин_ВестиУчетПоПлануСчетовБюджетирования Тогда
		КонстантыНабор.фин_РасширенныйРежимФормированияПроводокПриРасчетеПоМоделям = Ложь;
	КонецЕсли;
	УстановитьДоступность();
КонецПроцедуры


&НаКлиенте
Процедура фин_РазделительКодаСтатьиВОтчетахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокВыбораРазделителей;
КонецПроцедуры


&НаКлиенте
Процедура фин_РазделительКодаСтатьиВОтчетахОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	КонстантыНабор.фин_РазделительКодаСтатьиВОтчетах = ВыбранноеЗначение;
	мРазделительКодаСтатьиВОтчетах = СписокВыбораРазделителей.НайтиПоЗначению(ВыбранноеЗначение).Представление;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура усд_УчетнаяЗаписьРассылкиЗадачСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаВыбора",,Элемент);
КонецПроцедуры


&НаКлиенте
Процедура Записатьчч(Команда)
	Записать();
КонецПроцедуры


&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Записать();
	Закрыть();
КонецПроцедуры


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	глОбщиеЗначения = Новый Структура;
	глХранилищеЗначений = Новый Структура;
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура фин_НастройкиХраненияФактическихДанныхНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.фин_НастройкиХраненияФактическихДанных.ФормаСписка",,ЭтотОбъект,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно));
КонецПроцедуры

&НаКлиенте
Процедура фин_РежимХраненияФактическихДанныхПриИзменении(Элемент)
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура РабочиеИнтервалыВремениПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.РабочиеИнтервалыВремени.ТекущиеДанные;
	Если НЕ (ЗначениеЗаполнено(ТекущиеДанные.ВремяНачала) И ЗначениеЗаполнено(ТекущиеДанные.ВремяОкончания)) Тогда
		ОтменаРедактирования = Истина;
		ПоказатьПредупреждение(,"Должно быть заполнено время начала и время окончания!");
	ИначеЕсли ТекущиеДанные.ВремяНачала >= ТекущиеДанные.ВремяОкончания Тогда
		ОтменаРедактирования = Истина;
		ПоказатьПредупреждение(,"Время начала должно быть больше, чем время окончания!");
	КонецЕсли;
КонецПроцедуры


