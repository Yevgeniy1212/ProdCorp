//&НаКлиенте
//Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Прверяет выбранные  значения реквизитов,
// формирует структуру возвращаемых значений и закрывает форму
//
// Параметры:
//  Отказ - булево, флаг отказа в закрытии формы.
//
&НаКлиенте
Процедура СохранитьИзменения(Отказ = Неопределено)
	// Проверка заполненности реквизитов
	Если ПерезаполнитьЦеныПоТипу 
	   И НЕ ЗначениеЗаполнено(НовыйТипЦен) Тогда
		Предупреждение("Не выбран тип цен для заполнения!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если Элементы.НовыйВалютаДокумента.Доступность 
	   И НЕ ЗначениеЗаполнено(НовыйВалютаДокумента) Тогда
		Предупреждение("Не выбрана новая валюта документа!");

		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если Элементы.НовыйКурсДокумента.Доступность 
	   И НЕ ЗначениеЗаполнено(НовыйКурсДокумента) Тогда
		Предупреждение("Установлен нулевой новый курс документа!");

		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если Элементы.НовыйКурсВзаиморасчетов.Доступность 
	   И НЕ ЗначениеЗаполнено(НовыйКурсВзаиморасчетов) Тогда
		Предупреждение("Установлен нулевой новый курс взаиморасчетов!");

		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// Заполним структуру возвращаемых параметров
	СтруктураВозвращаемыхЗначений = Новый Структура();
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийТипЦен"						, ТекущийТипЦен);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийВалютаДокумента"				, ТекущийВалютаДокумента);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийВалютаВзаиморасчетов"		, ТекущийВалютаВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийКурсДокумента"				, ТекущийКурсДокумента);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийКурсВзаиморасчетов"			, ТекущийКурсВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийУчитыватьНДС"				, ТекущийУчитыватьНДС);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийСуммаВключаетНДС"			, ТекущийСуммаВключаетНДС);
    СтруктураВозвращаемыхЗначений.Вставить("ТекущийУчитыватьАкциз"				, ТекущийУчитыватьАкциз);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийСуммаВключаетАкциз"			, ТекущийСуммаВключаетАкциз);

	СтруктураВозвращаемыхЗначений.Вставить("ПерезаполнитьЦеныПоТипу"			, ПерезаполнитьЦеныПоТипу);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйТипЦен"						, НовыйТипЦен);
	СтруктураВозвращаемыхЗначений.Вставить("ПересчитатьЦеныПоВалюте"			, ПересчитатьЦеныПоВалюте);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйВалютаДокумента"				, НовыйВалютаДокумента);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКурсДокумента"					, НовыйКурсДокумента);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКурсВзаиморасчетов"			, НовыйКурсВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйУчитыватьНДС"					, НовыйУчитыватьНДС);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйСуммаВключаетНДС"				, НовыйСуммаВключаетНДС);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйУчитыватьАкциз"				, НовыйУчитыватьАкциз);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйСуммаВключаетАкциз"			, НовыйСуммаВключаетАкциз);

	СтруктураВозвращаемыхЗначений.Вставить("ТекущийКратностьДокумента"			, ТекущийКратностьДокумента);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКратностьДокумента"			, НовыйКратностьДокумента);

	СтруктураВозвращаемыхЗначений.Вставить("ТекущийКратностьВзаиморасчетов"		, ТекущийКратностьВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКратностьВзаиморасчетов"		, НовыйКратностьВзаиморасчетов);

	СтруктураВозвращаемыхЗначений.Вставить("ТекущийНДСВключенВСтоимость"		, ТекущийНДСВключенВСтоимость);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйНДСВключенВСтоимость"			, НовыйНДСВключенВСтоимость);

	// Все сделали, можно закрывать форму
	Модифицированность = Ложь;
	Закрыть(СтруктураВозвращаемыхЗначений);

КонецПроцедуры // СохранитьИзменения()

// Процедура определяет необходимость и взводит флаг пересчета цен по валюте.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьФлагПересчетаЦенПоВалюте()
	// Взведем флаг пресчета ТЧ в документе
	Если Элементы.ПересчитатьЦеныПоВалюте.Доступность 
	   И (Не ПересчитатьЦеныПоВалюте) Тогда
		ПересчитатьЦеныПоВалюте	= НовыйВалютаДокумента	<> ТекущийВалютаДокумента;
	КонецЕсли;
КонецПроцедуры // УстановитьФлагПересчетаЦенПоВалюте()

// Процедура определяет необходимость и взводит флаг пересчета цен по типу цен.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьФлагПерезаполнитьЦеныПоТипу()
	// Взведем флаг пресчета ТЧ в документе
	Если Элементы.ПерезаполнитьЦеныПоТипу.Доступность 
	   И (Не ПерезаполнитьЦеныПоТипу) Тогда
		ПерезаполнитьЦеныПоТипу = НовыйТипЦен <> ТекущийТипЦен;
	КонецЕсли;
КонецПроцедуры // УстановитьФлагПерезаполнитьЦеныПоТипу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает доступность реквизитов формы.
&НаСервере
Процедура УстановитьДоступность()
	// Флаг фключения налога в сумму доступны только тогда,
	// когда досутупен и взведен флаг учета налога.
	Если Не НовыйУчитыватьНДС Тогда
		Элементы.НовыйСуммаВключаетНДС.Доступность = Ложь;
	Иначе
		Элементы.НовыйСуммаВключаетНДС.Доступность = Элементы.НовыйУчитыватьНДС.Доступность;
	КонецЕсли;

	Если Не НовыйУчитыватьАкциз Тогда
		Элементы.НовыйСуммаВключаетАкциз.Доступность = Ложь;
	Иначе
		Элементы.НовыйСуммаВключаетАкциз.Доступность = Элементы.НовыйУчитыватьАкциз.Доступность;
		//закрываем достпность на изменениедля НовыйСуммаВключаетАкциз, в случае если учет акциза есть и установлен  НовыйСуммаВключаетНДС
		Если Элементы.НовыйСуммаВключаетАкциз.Доступность Тогда
			Элементы.НовыйСуммаВключаетАкциз.Доступность = НЕ НовыйСуммаВключаетНДС;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры // УстановитьДоступность()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Если форма открывается с пустой валютой взаиморасчетов, а в открывающем ее документе 
	// существует реквизит ДоговорКонтрагента, не дадим открыть форму, пока не будет установлен договор
	// взаиморасчетов
	// определим наличие этого реквизита по доступности НовогоКурсаВзаиморасчетов

	Если Элементы.НовыйКурсВзаиморасчетов.Доступность и НЕ ЗначениеЗаполнено(ТекущийВалютаВзаиморасчетов) Тогда

		Предупреждение("Не выбран договор контрагента (или в договоре не указана валюта)!");
		Отказ = Истина;

	КонецЕсли;

	// Определим доступность и взведем флаги пересчета
	// Флаги доступны, если ТЧ документа не пуста и если разрешено менять (доступны) 
	// соответствующие реквизиты.
	Если Не ТабличнаяЧастьПуста Тогда

		Элементы.ПерезаполнитьЦеныПоТипу.Доступность = Элементы.НовыйТипЦен.Доступность;
		Элементы.ПересчитатьЦеныПоВалюте.Доступность = Элементы.НовыйВалютаДокумента.Доступность 
																	И (Элементы.НовыйКурсДокумента.Доступность Или Элементы.НовыйКурсВзаиморасчетов.Доступность);

	Иначе // Пересчитывать не будем, нечего
		Элементы.ПерезаполнитьЦеныПоТипу.Доступность = Ложь;
		Элементы.ПересчитатьЦеныПоВалюте.Доступность = Ложь; 
	КонецЕсли;

	УстановитьДоступность();

	// Взведем при необходимости флаги пересчета.
	// Флаг взведен, если новое и текущее значения отличаются
	// Текущие и новые значения реквизитов могут отличаться, 
	// например разные значения устанавливаются в УправлениеВзаиморасчетами.ПриИзмененииЗначенияДоговора().
	УстановитьФлагПересчетаЦенПоВалюте();
	УстановитьФлагПерезаполнитьЦеныПоТипу();
	
	// возможно ситуация, когда валюта документа передается, а курс - не передается
	// чтобы при этом не было нулевого курса, будет заполнять его руками
	// в случае наличия курса взаиморасчетов и совпадения валюты взаиморасчетов с валютой
	// документа - будем брать курс взаиморасчетов, иначе - текущий курс
	Если Элементы.НовыйВалютаДокумента.Доступность и НовыйКурсДокумента = 0 Тогда
		Если Элементы.НовыйКурсВзаиморасчетов.Доступность и НовыйВалютаДокумента = ТекущийВалютаВзаиморасчетов Тогда
			НовыйКурсДокумента        = НовыйКурсВзаиморасчетов;
			НовыйКратностьДокумента   = НовыйКратностьВзаиморасчетов;
			ТекущийКурсДокумента      = ТекущийКурсВзаиморасчетов;
			ТекущийКратностьДокумента = ТекущийКратностьВзаиморасчетов;
		Иначе
			СтруктураНовыйВалюта      = ОбщегоНазначения.ПолучитьКурсВалюты(НовыйВалютаДокумента, ДатаКурса);
			НовыйКурсДокумента        = СтруктураНовыйВалюта.Курс;
			НовыйКратностьДокумента   = СтруктураНовыйВалюта.Кратность;
			ТекущийКурсДокумента      = НовыйКурсДокумента;
			ТекущийКратностьДокумента = НовыйКратностьДокумента;
		КонецЕсли;
	КонецЕсли;
	ОбновлениеОтображения();
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбновлениеОтображения()
	Элементы.НадписьИнфНовогоКурса.Заголовок   = куфиб_РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(НовыйВалютаДокумента, 
	                                                                                         НовыйКурсДокумента,
	                                                                                         НовыйКратностьДокумента,
	                                                                                         мВалютаРегламентированногоУчета);
	Элементы.НадписьИнфТекущегоКурса.Заголовок = куфиб_РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ТекущийВалютаДокумента, 
	                                                                                         ТекущийКурсДокумента,
	                                                                                         ТекущийКратностьДокумента,
	                                                                                         мВалютаРегламентированногоУчета);
	Элементы.НадписьИнфНовогоКурсаВзаиморасчетов.Заголовок   = куфиб_РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ТекущийВалютаВзаиморасчетов, 
	                                                                                                       НовыйКурсВзаиморасчетов,
	                                                                                                       НовыйКратностьВзаиморасчетов,
	                                                                                                       мВалютаРегламентированногоУчета);
	Элементы.НадписьИнфТекущегоКурсаВзаиморасчетов.Заголовок = куфиб_РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ТекущийВалютаВзаиморасчетов, 
	                                                                                                       ТекущийКурсВзаиморасчетов,
	                                                                                                       ТекущийКратностьВзаиморасчетов,
	                                                                                                       мВалютаРегламентированногоУчета);
КонецПроцедуры // ОбновлениеОтображения()

&НаКлиенте
// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Модифицированность Тогда
		Ответ = Вопрос("Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена, , 
						КодВозвратаДиалога.Да, Заголовок);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьИзменения(Отказ);
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена
			  Или Ответ = КодВозвратаДиалога.Таймаут Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПередЗакрытием()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "При Изменении" поля "Тип цен".
//
&НаКлиенте
Процедура НовыйТипЦенПриИзменении(Элемент)  
	НовыйТипЦенПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура НовыйТипЦенПриИзмененииСервер()  
	УстановитьФлагПерезаполнитьЦеныПоТипу();
	// установим флаг СуммаВключаемНДС из типа цены
	Если ЗначениеЗаполнено(НовыйТипЦен) и НовыйУчитыватьНДС Тогда
		НовыйСуммаВключаетНДС   = НовыйТипЦен.ЦенаВключаетНДС;
		НовыйСуммаВключаетАкциз = НовыйТипЦен.ЦенаВключаетАкциз;
	КонецЕсли;
	// Взводим флаг модифицированности, чтобы при закрытии спросить о сохранении значений
	Модифицированность = Истина;
    
КонецПроцедуры

// Процедура - обработчик события "Начало выбра" поля "Тип цен".
//
&НаКлиенте
Процедура НовыйТипЦенНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(НовыйТипЦен) Тогда
		НовыйТипЦен = ПредопределенноеЗначение("Справочник.ТипыЦенНоменклатуры.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры // НовыйТипЦенНачалоВыбора()

// Процедура - обработчик события "Обработка выбора" поля "Валюта Документа".
//
&НаКлиенте
Процедура НовыйВалютаДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	НовыйВалютаДокументаОбработкаВыбораНаСервере(ВыбранноеЗначение);
	ОбновлениеОтображения();
КонецПроцедуры

&НаСервере
Процедура НовыйВалютаДокументаОбработкаВыбораНаСервере(ВыбранноеЗначение)
	НовыйВалютаДокумента    = ВыбранноеЗначение;
	//Сменим курс
	Если Элементы.НовыйКурсВзаиморасчетов.Доступность 
	   И НовыйВалютаДокумента = ТекущийВалютаВзаиморасчетов Тогда
		// если крус взаиморасчетов присутствует в вызвавшем форму документе, тогда
		// в случае совпадения валюты документа с валютой взаиморасчетов возьмем курс и кратность из нее
		НовыйКурсДокумента      = НовыйКурсВзаиморасчетов;
		НовыйКратностьДокумента = НовыйКратностьВзаиморасчетов;
	Иначе
		// вычислим курс
		СтруктураНовыйВалюта    = куфиб_ОбщегоНазначения.ПолучитьКурсВалюты(НовыйВалютаДокумента, ДатаКурса);
		НовыйКурсДокумента      = СтруктураНовыйВалюта.Курс;
		НовыйКратностьДокумента = СтруктураНовыйВалюта.Кратность;
	КонецЕсли;
	//Взведем при необходимости флаг пересчета.
	УстановитьФлагПересчетаЦенПоВалюте();
	// Взводим флаг модифицированности, чтобы при закрытии спросить о сохранении значений
	Модифицированность = Истина;
КонецПроцедуры // НовыйВалютаДокументаОбработкаВыбора()

// Процедура - обработчик события "Начало выбора" поля "Курс Документа".
//
&НаКлиенте
Процедура НовыйКурсДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НовыйКурсДокументаНачалоВыбораНаСервере();
КонецПроцедуры

&НаСервере
Процедура НовыйКурсДокументаНачалоВыбораНаСервере()
 	// Отменим стандартную обработку
	СтандартнаяОбработка = Ложь;
	СтарыйКурсДокумента = НовыйКурсДокумента; // Сохраним значение.
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("общ_ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = НовыйВалютаДокумента;
	ФормаВводаКурсаИКратности.КратностьВалюты = НовыйКратностьДокумента;
	ФормаВводаКурсаИКратности.КурсВалюты      = НовыйКурсДокумента;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ДатаКурса;
	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
	Если СтруктураКурсаИКратности <> неопределено Тогда
		НовыйКратностьДокумента = СтруктураКурсаИКратности.КратностьВалюты;
		НовыйКурсДокумента      = СтруктураКурсаИКратности.КурсВалюты;
	КонецЕсли;
	// Взводим флаг модифицированности, если поменяли курс, чтобы при закрытии спросить о сохранении значений
	Модифицированность = Модифицированность Или (СтарыйКурсДокумента <> НовыйКурсДокумента);
КонецПроцедуры // НовыйКурсДокументаНачалоВыбора()

// Процедура - обработчик события "Начало выбора" поля "Курс взаиморасчетов".
//
&НаКлиенте
Процедура НовыйКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НовыйКурсВзаиморасчетовНачалоВыбораНаСервере();
КонецПроцедуры
&НаСервере
Процедура НовыйКурсВзаиморасчетовНачалоВыбораНаСервере()
	// Отменим стандартную обработку
	СтандартнаяОбработка = Ложь;
	СтарыйКурсВзаиморасчетов = НовыйКурсВзаиморасчетов; // Сохраним значение.
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("общ_ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ТекущийВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = НовыйКратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = НовыйКурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ДатаКурса;
	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
	Если СтруктураКурсаИКратности <> неопределено Тогда
		НовыйКратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
		НовыйКурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
	КонецЕсли;
	// Взводим флаг модифицированности, если поменяли курс, чтобы при закрытии спросить о сохранении значений
	Модифицированность = Модифицированность Или (СтарыйКурсВзаиморасчетов <> НовыйКурсВзаиморасчетов);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флага "Учитывать НДС".
//
&НаКлиенте
Процедура НовыйУчитыватьНДСПриИзменении(Элемент)
	НовыйУчитыватьНДСПриИзмененииНаСервере();
КонецПроцедуры
&НаСервере
Процедура НовыйУчитыватьНДСПриИзмененииНаСервере()
	// Взводим флаг модифицированности, чтобы при закрытии спросить о сохранении значений
	Модифицированность = Истина;
	// Если налог не учитываем. то надо снять флаг включения в сумму.
	Если Не НовыйУчитыватьНДС Тогда
		НовыйСуммаВключаетНДС = Ложь;
	КонецЕсли;
	УстановитьДоступность();
КонецПроцедуры // НовыйУчитыватьНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага "Сумма Включает НДС".
//
&НаСервере
Процедура НовыйСуммаВключаетНДСПриИзменении(Элемент)
	// Взводим флаг модифицированности, чтобы при закрытии спросить о сохранении значений
	Модифицированность = Истина;
	Если  НовыйСуммаВключаетНДС и НовыйУчитыватьАкциз Тогда
		//если сумма Включает НДС и мы ведем учет Акциза, то принудительно взводим флаг НовыйСуммаВключаетАкциз
		НовыйСуммаВключаетАкциз = Истина;
	КонецЕсли;
	УстановитьДоступность();
КонецПроцедуры // НовыйСуммаВключаетНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага "Учитывать Акциз".
//
&НаСервере
Процедура НовыйУчитыватьАкцизПриИзменении(Элемент)
	// Взводим флаг модифицированности, чтобы при закрытии спросить о сохранении значений
	Модифицированность = Истина;
	// Если налог не учитываем. то надо снять флаг включения в сумму.
	Если Не НовыйУчитыватьАкциз Тогда
		НовыйСуммаВключаетАкциз = Ложь;
	Иначе
		Если НовыйСуммаВключаетНДС Тогда
			НовыйСуммаВключаетАкциз = Истина;	
		КонецЕсли;	
	КонецЕсли;
	УстановитьДоступность();
КонецПроцедуры // НовыйУчитыватьАкцизПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага "Сумма Включает Акциз".
//
&НаСервере
Процедура НовыйСуммаВключаетАкцизПриИзменении(Элемент)
	// Взводим флаг модифицированности, чтобы при закрытии спросить о сохранении значений
	Модифицированность = Истина;
КонецПроцедуры // НовыйСуммаВключаетАкцизПриИзменении()


Процедура НовыйКурсВзаиморасчетовПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если Элементы.НовыйКурсВзаиморасчетов.Доступность 
	   И НовыйВалютаДокумента = ТекущийВалютаВзаиморасчетов Тогда
		// если крус взаиморасчетов присутствует в вызвавшем форму документе, тогда
		// в случае совпадения валюты документа с валютой взаиморасчетов возьмем курс и кратность из нее
		НовыйКурсДокумента      = НовыйКурсВзаиморасчетов;
		НовыйКратностьДокумента = НовыйКратностьВзаиморасчетов;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки ОК в форме.
&НаКлиенте
Процедура ОК(Команда)
	СохранитьИзменения();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	оф_НовыеЗначенияЗаголовок = "Новые значения";
	оф_ТекущиеЗначенияЗаголовок = "Текущие значения";
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флага "НДС включен в стоимость".
//
&НаСервере
Процедура НовыйНДСВключенВСтоимостьПриИзменении(Элемент)
	// Взводим флаг модифицированности, чтобы при закрытии спросить о сохранении значений
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НовыйВалютаВзаиморасчетовПриИзменении(Элемент)
	ОбновлениеОтображения();
КонецПроцедуры




