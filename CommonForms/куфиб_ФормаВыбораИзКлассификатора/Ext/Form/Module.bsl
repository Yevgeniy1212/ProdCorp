&НаКлиенте
Перем КоличествоГрупп;
&НаСервере
Перем МакетТНВЭД;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если параметры.Свойство("РежимВыбора") тогда 
		Элементы.Таблица.РежимВыбора = Параметры.РежимВыбора;
	КонецЕсли;
	Если параметры.Свойство("ИмяМакета") тогда 
		ИмяМакета = Параметры.ИмяМакета;
	КонецЕсли;
	Если параметры.Свойство("ИмяСекции") тогда 
		ИмяСекции = Параметры.ИмяСекции;
	КонецЕсли;
	Если параметры.Свойство("ПолучатьПолныеДанные") тогда 
		ПолучатьПолныеДанные = Параметры.ПолучатьПолныеДанные;
	КонецЕсли;
	Если параметры.Свойство("ТекущийКодСтроки") тогда 
		ТекущийКодСтроки = Параметры.ТекущийКодСтроки;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИмяМакета) или НЕ ЗначениеЗаполнено(ИмяСекции) Тогда
		Закрыть("");
	КонецЕсли;	
	
	ЗагрузкаИзМакета();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаИзМакета()
	Таблица.ПолучитьЭлементы().Очистить();
	
	Макет = Неопределено;
	ТекстШапки = Неопределено;
	
	Если ЗначениеЗаполнено(СсылкаНаКлассификатор) Тогда 
		Попытка
			ИмяФайла = ПолучитьИмяВременногоФайла();
			ДвоичныеДанные = СсылкаНаКлассификатор.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);          
			Макет = Новый ТабличныйДокумент;
			Макет.Прочитать(ИмяФайла); 
			УдалитьФайлы(ИмяФайла);
		Исключение
			СсылкаНаКлассификатор = ПредопределенноеЗначение("Справочник.ВнешниеОбработки.ПустаяСсылка");
			Макет = ПолучитьОбщийМакет(СокрЛП(ИмяМакета));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Классификатор не найден");
		КонецПопытки;
	Иначе 
		Если ИмяМакета = "ПереченьИзъятий" Тогда
			Макет = РегистрыСведений.ТоварыСПониженнойСтавкойПошлин.ПолучитьМакетПереченьИзъятий();
			Элементы.НадписьЗаголовка.Заголовок = "Перечень изъятий";
		Иначе
			Макет = ПолучитьОбщийМакет(СокрЛП(ИмяМакета));
		КонецЕсли; 		
	КонецЕсли;
	Если ИмяМакета = "КодыТНВЭД" Тогда
		МакетТНВЭД = Макет;
		СписокТНВЭДПереченьИзъятий = РегистрыСведений.ТоварыСПониженнойСтавкойПошлин.ЗаполнитьСписокПереченьИзъятий();
		ЗаполнениеТаблицыТНВЭД(ИмяСекции, МакетТНВЭД);
		УстановитьВидимость();
		Возврат
	КонецЕсли;
	ТаблицаФормы = РеквизитФормыВЗначение("Таблица");
	Если ТипЗнч(Макет) = Тип("ТабличныйДокумент") Тогда    		
		ТекстШапки = Макет.ПолучитьОбласть("Шапка|Наименование").ТекущаяОбласть.Текст;
		Элементы.НадписьЗаголовка.Заголовок = СокрЛП(ТекстШапки);
		
		Область = Макет.Области[ИмяСекции];
		
		Для Ном = Область.Верх По Область.Низ Цикл
			Если НЕ СокрЛП(Макет.Область(Ном, 5).Текст) = "" Тогда 
				Если НЕ СокрЛП(Макет.Область(Ном, 1).Текст) = "" Тогда
					НоваяСтрока = ТаблицаФормы.Строки.Добавить();
					НоваяСтрока.КодСтроки    = СокрЛП(Макет.Область(Ном, 1).Текст);
					НоваяСтрока.Наименование = СокрЛП(Макет.Область(Ном, 5).Текст);
					НоваяСтрока.Группа = 0;
					НоваяСтрока.ЕстьРодитель = Ложь;
				ИначеЕсли НЕ СокрЛП(Макет.Область(Ном, 2).Текст) = "" Тогда 
					Подстрока = НоваяСтрока.Строки.Добавить();
					Подстрока.КодСтроки    = СокрЛП(Макет.Область(Ном, 2).Текст);
					Подстрока.Наименование = СокрЛП(Макет.Область(Ном, 5).Текст);
					Подстрока.Группа = 1;
					Подстрока.ЕстьРодитель = Истина;
				ИначеЕсли НЕ СокрЛП(Макет.Область(Ном, 3).Текст) = "" Тогда 
					ПодстрокаПодстроки = Подстрока.Строки.Добавить();
					ПодстрокаПодстроки.КодСтроки    = СокрЛП(Макет.Область(Ном, 3).Текст);
					ПодстрокаПодстроки.Наименование = СокрЛП(Макет.Область(Ном, 5).Текст);
					ПодстрокаПодстроки.Группа = 2;
					ПодстрокаПодстроки.ЕстьРодитель = Истина;
				ИначеЕсли НЕ СокрЛП(Макет.Область(Ном, 4).Текст) = "" Тогда 
					ПодстрокаПодстрокиСтроки = ПодстрокаПодстроки.Строки.Добавить();
					ПодстрокаПодстрокиСтроки.КодСтроки    = СокрЛП(Макет.Область(Ном, 4).Текст);
					ПодстрокаПодстрокиСтроки.Наименование = СокрЛП(Макет.Область(Ном, 5).Текст);
					ПодстрокаПодстрокиСтроки.Группа = 3;					
					ПодстрокаПодстрокиСтроки.ЕстьРодитель = Истина;
					Параметры.лГруппировка = Истина; 
				КонецЕсли;
				Параметры.КоличествоГрупп = 3;
			ИначеЕсли НЕ СокрЛП(Макет.Область(Ном, 4).Текст) = "" Тогда 
				Если НЕ СокрЛП(Макет.Область(Ном, 1).Текст) = "" Тогда
					НоваяСтрока = ТаблицаФормы.Строки.Добавить();
					НоваяСтрока.КодСтроки    = СокрЛП(Макет.Область(Ном, 1).Текст);
					НоваяСтрока.Наименование = СокрЛП(Макет.Область(Ном, 4).Текст);
					НоваяСтрока.Группа = 0;
					НоваяСтрока.ЕстьРодитель = Ложь;
				ИначеЕсли НЕ СокрЛП(Макет.Область(Ном, 2).Текст) = "" Тогда 
					Подстрока = НоваяСтрока.Строки.Добавить();
					Подстрока.КодСтроки    = СокрЛП(Макет.Область(Ном, 2).Текст);
					Подстрока.Наименование = СокрЛП(Макет.Область(Ном, 4).Текст);
					Подстрока.Группа = 1;
					Подстрока.ЕстьРодитель = Истина;
				ИначеЕсли НЕ СокрЛП(Макет.Область(Ном, 3).Текст) = "" Тогда 
					ПодстрокаПодстроки = Подстрока.Строки.Добавить();
					ПодстрокаПодстроки.КодСтроки    = СокрЛП(Макет.Область(Ном, 3).Текст);
					ПодстрокаПодстроки.Наименование = СокрЛП(Макет.Область(Ном, 4).Текст);
					ПодстрокаПодстроки.Группа = 2;
					ПодстрокаПодстроки.ЕстьРодитель = Истина;
					Параметры.лГруппировка = Истина; 
				КонецЕсли;			
				Параметры.КоличествоГрупп = 2;
			Иначе 
				Строка = ТаблицаФормы.Строки.Добавить();
				Строка.КодСтроки    = СокрЛП(Макет.Область(Ном, 1).Текст);
				Строка.Наименование = СокрЛП(Макет.Область(Ном, 2).Текст);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Макет) = Тип("ТекстовыйДокумент")  Тогда
		
		КлассификаторXML = Макет.ПолучитьТекст();
		ТаблицаПоказателей = ОбщегоНазначения.ЗначениеИзСтрокиXML(КлассификаторXML);
		
		Если НЕ Тип(ТаблицаПоказателей) =  Тип("ТаблицаЗначений") Тогда 
			Возврат;
		КонецЕсли;
		
		Если ТаблицаПоказателей.Колонки.Найти("КодТНВЭД") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
			НоваяСтрока = ТаблицаФормы.Строки.Добавить();
			НоваяСтрока.КодСтроки    = СокрЛП(СтрокаПоказателя.КодТНВЭД);
			НоваяСтрока.Наименование = СокрЛП(СтрокаПоказателя.НаименованиеСтроки);
		КонецЦикла;			
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТаблицаФормы,"Таблица");
			
	//инициализируемся на строке, если было уже выбрано значение из классификатора
	Если ТекущийКодСтроки <> Неопределено И ТекущийКодСтроки <> "" Тогда
		ТекущийКодСтроки = ?(Прав(СокрЛП(ТекущийКодСтроки),1) = ".", Лев(ТекущийКодСтроки, СтрДлина(СокрЛП(ТекущийКодСтроки)) -1), СокрЛП(ТекущийКодСтроки));
		АктивизироватьТекущуюСтрокуВПодчиненных(Таблица);	
	КонецЕсли;    
КонецПроцедуры

&НаСервере
Функция АктивизироватьТекущуюСтрокуВПодчиненных(УровеньДерева)
	Для Каждого СтрокаДерева Из УровеньДерева.ПолучитьЭлементы() Цикл
		Если СтрокаДерева.КодСтроки = СокрЛП(ТекущийКодСтроки) Тогда
			Элементы.Таблица.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
			Возврат Истина;
		Иначе
			Если АктивизироватьТекущуюСтрокуВПодчиненных(СтрокаДерева) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаСервере
Процедура УстановитьВидимость()
	
	Если Не ИмяМакета = "КодыТНВЭД" Тогда 
		Возврат;
	КонецЕсли;
	Если Элементы.Таблица.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Таблица.НайтиПоИдентификатору(Элементы.Таблица.ТекущаяСтрока);
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.КодСтроки)Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ВходитВПереченьИзъятия) Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаНаименованиеПеречень;
		Иначе   
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаНаименование;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеТаблицыТНВЭД(ИмяСекции, Макет)
	
	ТаблицаФормы = РеквизитФормыВЗначение("Таблица");
	
	ТекстШапки = Макет.ПолучитьОбласть("Шапка|Наименование").ТекущаяОбласть.Текст;
	Элементы.НадписьЗаголовка.Заголовок = СокрЛП(ТекстШапки);
	
	Область = Макет.Области["Область00"];
	
	АктуальнаяВетка = Неопределено;
	Для Ном = Область.Верх По Область.Низ Цикл
		Если НЕ СокрЛП(Макет.Область(Ном, 5).Текст) = "" Тогда 
			Если НЕ СокрЛП(Макет.Область(Ном, 1).Текст) = "" Тогда
				НоваяСтрока = ТаблицаФормы.Строки.Добавить();
				НоваяСтрока.КодСтроки    = СокрЛП(Макет.Область(Ном, 1).Текст);
				НоваяСтрока.Наименование = СокрЛП(Макет.Область(Ном, 5).Текст);
				НоваяСтрока.Группа = 0;
				
				АктуальнаяВетка = НоваяСтрока;
				
				ТекСтрока = НоваяСтрока; 
				
				// Обнуляем последующие
				Подстрока = Неопределено;
				ПодстрокаПодстроки = Неопределено;
			ИначеЕсли НЕ СокрЛП(Макет.Область(Ном, 2).Текст) = "" И НЕ СокрЛП(Макет.Область(Ном, 2).Текст) = "#" Тогда 
				Если НоваяСтрока <> Неопределено Тогда
					// в пределах стандартной иерархии
					РодительскаяВетка = НоваяСтрока;
				Иначе
					//родитель не определен. Включаем в последнюю актуальную группу
					РодительскаяВетка = АктуальнаяВетка;
				КонецЕсли;		
				Подстрока = РодительскаяВетка.Строки.Добавить();
				Подстрока.КодСтроки    = СокрЛП(Макет.Область(Ном, 2).Текст);
				Подстрока.Наименование = СокрЛП(Макет.Область(Ном, 5).Текст);
				Подстрока.Группа = 1;
				
				ТекСтрока = Подстрока; 
				АктуальнаяВетка = Подстрока;
				// Обнуляем последующие				
				ПодстрокаПодстроки = Неопределено;				
			ИначеЕсли НЕ СокрЛП(Макет.Область(Ном, 3).Текст) = "" И НЕ СокрЛП(Макет.Область(Ном, 3).Текст) = "#" Тогда 
				Если Подстрока <> Неопределено Тогда
					// в пределах стандартной иерархии
					РодительскаяВетка = Подстрока;
				Иначе
					//родитель не определен. Включаем в последнюю актуальную группу
					РодительскаяВетка = АктуальнаяВетка;
				КонецЕсли;		                 				
				ПодстрокаПодстроки = РодительскаяВетка.Строки.Добавить();
				ПодстрокаПодстроки.КодСтроки    = СокрЛП(Макет.Область(Ном, 3).Текст);
				ПодстрокаПодстроки.Наименование = СокрЛП(Макет.Область(Ном, 5).Текст);
				ПодстрокаПодстроки.Группа = 2;
				
				ТекСтрока = ПодстрокаПодстроки;
				
				АктуальнаяВетка = ПодстрокаПодстроки;
			ИначеЕсли НЕ СокрЛП(Макет.Область(Ном, 4).Текст) = "" Тогда 
				Если ПодстрокаПодстроки <> Неопределено Тогда
					// в пределах стандартной иерархии
					Если СокрЛП(Макет.Область(Ном, 2).Текст) = "#" Тогда
						РодительскаяВетка = НоваяСтрока;
					ИначеЕсли СокрЛП(Макет.Область(Ном, 3).Текст) = "#" Тогда
						РодительскаяВетка = Подстрока;
					Иначе
						РодительскаяВетка = ПодстрокаПодстроки;
					КонецЕсли;
				Иначе
					//родитель не определен. Включаем в последнюю актуальную группу
					Если СокрЛП(Макет.Область(Ном, 2).Текст) = "#" Тогда
						РодительскаяВетка = НоваяСтрока;
					ИначеЕсли СокрЛП(Макет.Область(Ном, 3).Текст) = "#" Тогда
						РодительскаяВетка = Подстрока;
					Иначе
						РодительскаяВетка = АктуальнаяВетка;
					КонецЕсли;
				КонецЕсли;		                 		
				ПодстрокаПодстрокиСтроки = РодительскаяВетка.Строки.Добавить();
				ПодстрокаПодстрокиСтроки.КодСтроки    = СокрЛП(Макет.Область(Ном, 4).Текст);
				ПодстрокаПодстрокиСтроки.Наименование = СокрЛП(Макет.Область(Ном, 5).Текст);
				ПодстрокаПодстрокиСтроки.Группа = 3;	
				ТекСтрока = ПодстрокаПодстрокиСтроки;
				мГруппировка = Истина; 							
			КонецЕсли;
			КоличествоГрупп = 3;
		
		Иначе 
			Строка = ТаблицаФормы.Строки.Добавить();
			Строка.КодСтроки    = СокрЛП(Макет.Область(Ном, 1).Текст);
			Строка.Наименование = СокрЛП(Макет.Область(Ном, 2).Текст);
			ТекСтрока = Строка;
		КонецЕсли;
		
		Если ТекСтрока <>Неопределено И СписокТНВЭДПереченьИзъятий.НайтиПоЗначению(ТекСтрока.КодСтроки) <>Неопределено Тогда
			ТекСтрока.ВходитВПереченьИзъятия = НСтр("ru ='Товар входит в перечень изъятий'");
		Иначе
			ТекСтрока.ВходитВПереченьИзъятия = "";
		КонецЕсли; 	
		
	КонецЦикла;
	
	
	мГруппировка = Истина;
	//инициализируемся на строке, если было уже выбрано значение из классификатора
	Если ТекущийКодСтроки <> Неопределено И ТекущийКодСтроки <> "" Тогда
		ТекущийКодСтроки = ?(Прав(СокрЛП(ТекущийКодСтроки),1) = ".", Лев(ТекущийКодСтроки, СтрДлина(СокрЛП(ТекущийКодСтроки)) -1), СокрЛП(ТекущийКодСтроки));
		ИмяСекции = "Область"+Лев(ТекущийКодСтроки,2);
		ДоЗаписьТаблицыТНВЭД(ИмяСекции);
	КонецЕсли;       
		
	
	ЗначениеВРеквизитФормы(ТаблицаФормы,"Таблица");
	
	//инициализируемся на строке, если было уже выбрано значение из классификатора
	Если ТекущийКодСтроки <> Неопределено И ТекущийКодСтроки <> "" Тогда
		Если АктивизироватьТекущуюСтрокуВПодчиненныхТНВЭД(Таблица,ТекущийКодСтроки) = Ложь Тогда
			// ищем ближайшего родителя по составляющим кода
			Если АктивизироватьТекущуюСтрокуВПодчиненныхТНВЭД(СокрЛП(Лев(ТекущийКодСтроки,6)),ТекущийКодСтроки) = Ложь Тогда 
				Если АктивизироватьТекущуюСтрокуВПодчиненныхТНВЭД(Таблица,СокрЛП(Лев(ТекущийКодСтроки,4))) Тогда
				     АктивизироватьТекущуюСтрокуВПодчиненныхТНВЭД(Таблица,СокрЛП(Лев(ТекущийКодСтроки,2)));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		               	
	КонецЕсли;       
	
	
КонецПроцедуры


&НаСервере
Функция АктивизироватьТекущуюСтрокуВПодчиненныхТНВЭД(УровеньДерева,ТекстПоиска)
	Для Каждого СтрокаДерева Из УровеньДерева.ПолучитьЭлементы() Цикл
		Если СтрокаДерева.КодСтроки = ТекстПоиска Тогда
			Элементы.Таблица.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
			Возврат Истина;
		Иначе
			Если АктивизироватьТекущуюСтрокуВПодчиненныхТНВЭД(СтрокаДерева,ТекстПоиска) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции


&НаСервере
Процедура ДоЗаписьТаблицыТНВЭД(ИмяСекции)
	
	Макет = МакетТНВЭД;
	ТекстШапки = Макет.ПолучитьОбласть("Шапка|Наименование").ТекущаяОбласть.Текст;
	Элементы.НадписьЗаголовка.Заголовок = СокрЛП(ТекстШапки);
	Если Макет.Области.Найти(ИмяСекции) = Неопределено Тогда
	    Возврат;
	Иначе		
		Область = Макет.Области[ИмяСекции];
	КонецЕсли;	
	
	АктуальнаяВетка = Неопределено;
	ТекСтрока = Неопределено;
	Для Ном = Область.Верх По Область.Низ Цикл
		Если НЕ СокрЛП(Макет.Область(Ном, 5).Текст) = "" Тогда 
			Если НЕ СокрЛП(Макет.Область(Ном, 1).Текст) = "" Тогда
				НоваяСтрока = Таблица.Строки.Найти(СокрЛП(Макет.Область(Ном, 1).Текст),"КодСтроки");
				Если НоваяСтрока = Неопределено Тогда
					// в макете нет такой родительской области
					Возврат
				КонецЕсли;	

				Если НоваяСтрока.Загружен Тогда 
					АктуальнаяВетка = НоваяСтрока;
					Возврат
				КонецЕсли;
				
				НоваяСтрока.Загружен = Истина;  				
				АктуальнаяВетка = НоваяСтрока;
				// Обнуляем последующие
				Подстрока = Неопределено;
				ПодстрокаПодстроки = Неопределено;
				ТекСтрока = НоваяСтрока;
			ИначеЕсли НЕ СокрЛП(Макет.Область(Ном, 2).Текст) = "" И НЕ СокрЛП(Макет.Область(Ном, 2).Текст) = "#" Тогда 
				Если НоваяСтрока <> Неопределено Тогда
					// в пределах стандартной иерархии
					РодительскаяВетка = НоваяСтрока;
				Иначе
					//родитель не определен. Включаем в последнюю актуальную группу
					РодительскаяВетка = АктуальнаяВетка;
				КонецЕсли;		
				Подстрока = РодительскаяВетка.Строки.Добавить();
				Подстрока.КодСтроки    = СокрЛП(Макет.Область(Ном, 2).Текст);
				Подстрока.Наименование = СокрЛП(Макет.Область(Ном, 5).Текст);
				Подстрока.Группа = 1;
				
				АктуальнаяВетка = Подстрока;
				// Обнуляем последующие				
				ПодстрокаПодстроки = Неопределено;	
				ТекСтрока = Подстрока;
			ИначеЕсли НЕ СокрЛП(Макет.Область(Ном, 3).Текст) = "" И НЕ СокрЛП(Макет.Область(Ном, 3).Текст) = "#" Тогда 
				Если Подстрока <> Неопределено Тогда
					// в пределах стандартной иерархии
					РодительскаяВетка = Подстрока;
				Иначе
					//родитель не определен. Включаем в последнюю актуальную группу
					РодительскаяВетка = АктуальнаяВетка;
				КонецЕсли;		                 				
				ПодстрокаПодстроки = РодительскаяВетка.Строки.Добавить();
				ПодстрокаПодстроки.КодСтроки    = СокрЛП(Макет.Область(Ном, 3).Текст);
				ПодстрокаПодстроки.Наименование = СокрЛП(Макет.Область(Ном, 5).Текст);
				ПодстрокаПодстроки.Группа = 2;
				
				АктуальнаяВетка = ПодстрокаПодстроки;
				
				ТекСтрока = ПодстрокаПодстроки;

			ИначеЕсли НЕ СокрЛП(Макет.Область(Ном, 4).Текст) = "" Тогда 
				Если ПодстрокаПодстроки <> Неопределено Тогда
					// в пределах стандартной иерархии
					Если СокрЛП(Макет.Область(Ном, 2).Текст) = "#" Тогда
						РодительскаяВетка = НоваяСтрока;
					ИначеЕсли СокрЛП(Макет.Область(Ном, 3).Текст) = "#" Тогда
						РодительскаяВетка = Подстрока;
					Иначе
						РодительскаяВетка = ПодстрокаПодстроки;
					КонецЕсли;
				Иначе
					//родитель не определен. Включаем в последнюю актуальную группу
					Если СокрЛП(Макет.Область(Ном, 2).Текст) = "#" Тогда
						РодительскаяВетка = НоваяСтрока;
					ИначеЕсли СокрЛП(Макет.Область(Ном, 3).Текст) = "#" Тогда
						РодительскаяВетка = Подстрока;
					Иначе
						РодительскаяВетка = АктуальнаяВетка;
					КонецЕсли;
				КонецЕсли;		                 		
				ПодстрокаПодстрокиСтроки = РодительскаяВетка.Строки.Добавить();
				ПодстрокаПодстрокиСтроки.КодСтроки    = СокрЛП(Макет.Область(Ном, 4).Текст);
				ПодстрокаПодстрокиСтроки.Наименование = СокрЛП(Макет.Область(Ном, 5).Текст);
				ПодстрокаПодстрокиСтроки.Группа = 3;	
				мГруппировка = Истина; 
				ТекСтрока = ПодстрокаПодстрокиСтроки;

			КонецЕсли;
			КоличествоГрупп = 3;
			
		Иначе 
			Строка = Таблица.Строки.Добавить();
			Строка.КодСтроки    = СокрЛП(Макет.Область(Ном, 1).Текст);
			Строка.Наименование = СокрЛП(Макет.Область(Ном, 2).Текст);
			
			ТекСтрока = Строка;

		КонецЕсли;
		
		Если ТекСтрока <>Неопределено И СписокТНВЭДПереченьИзъятий.НайтиПоЗначению(ТекСтрока.КодСтроки) <>Неопределено Тогда
			ТекСтрока.ВходитВПереченьИзъятия = НСтр("ru ='Товар входит в перечень изъятий'");
		Иначе
			ТекСтрока.ВходитВПереченьИзъятия = "";
		КонецЕсли; 	
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Если Параметры.лГруппировка = Истина Тогда
		Если Элемент.ТекущиеДанные.ЕстьРодитель И Элемент.ТекущиеДанные.Группа = Параметры.КоличествоГрупп Тогда
			Если ПолучатьПолныеДанные Тогда
				ЗначениеВозврата = Новый Структура("КодСтроки, Наименование", Элемент.ТекущиеДанные.КодСтроки, Элемент.ТекущиеДанные.Наименование);
			Иначе
				ЗначениеВозврата = ВыбраннаяСтрока.КодСтроки;
			КонецЕсли;
		Иначе
			Элементы.Таблица.Развернуть(Элементы.Таблица.ТекущиеДанные.ПолучитьИдентификатор());
			Возврат;
		КонецЕсли;
	Иначе
		Элементы.Таблица.Развернуть(Элементы.Таблица.ТекущиеДанные.ПолучитьИдентификатор());
		ТекДанные = Элемент.ТекущиеДанные;
		Если Не ПоискКода(ТекДанные.КодСтроки,истина,таблица) Тогда
			Возврат;
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
        Если ПолучатьПолныеДанные Тогда
			ЗначениеВозврата = Новый Структура("КодСтроки, Наименование",ТекДанные.КодСтроки, ТекДанные.Наименование);
		Иначе
			ЗначениеВозврата = ТекДанные.КодСтроки;
		КонецЕсли;
	КонецЕсли;
	Если ВозвращатьСтруктуруДополнительныхПараметров Тогда
		ЗначениеВозврата = Новый Структура("ЗначениеВыбора, Команда, СтруктураДопПараметров",ЗначениеВозврата, "ПодборИзКлассификатора", СтруктураДополнительныхПараметров);
	КонецЕсли;
	ОповеститьОВыборе(ЗначениеВозврата);
КонецПроцедуры

&НаСервере
Функция ПоискКода(Знач КодСтроки,Знач Клиент, Знач СписокСтрок)
	Результат = Неопределено;
	НайденнаяСтрока = Неопределено; 
	Если Клиент тогда 
		СписокСтрок = СписокСтрок.ПолучитьЭлементы();
	Иначе
		СписокСтрок = СписокСтрок.Строки;
	КонецЕсли;
	
	ПоискКодаВРекурсии(КодСтроки,СписокСтрок,Результат,НайденнаяСтрока,Клиент);
	Если Клиент Тогда
		Возврат Результат;
	Иначе
		Если НайденнаяСтрока <> Неопределено Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ПоискКодаВРекурсии(КодСтроки,СписокСтрок,Результат,НайденнаяСтрока,знач клиент)
Если Результат=Неопределено Тогда
	Для каждого ПодСтрока из СписокСтрок Цикл
		Если Клиент Тогда
			Если подСтрока.КодСтроки = КодСтроки ТОгда
				Если подСтрока.ПолучитьЭлементы().Количество() = 0 Тогда
					Результат = Истина;
					НайденнаяСтрока = подСтрока;
				Иначе
					Результат = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ПодСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				ПоискКодаВРекурсии(КодСтроки,ПодСтрока.ПолучитьЭлементы(),Результат,НайденнаяСтрока, клиент);
			КонецЕсли;
		Иначе
			Если подСтрока.КодСтроки = КодСтроки ТОгда
				Если подСтрока.Строки.Количество() = 0 Тогда
					Результат = Истина;
					НайденнаяСтрока = подСтрока;
				Иначе
					Результат = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ПодСтрока.Строки.Количество() > 0 Тогда
				ПоискКодаВРекурсии(КодСтроки,ПодСтрока.Строки,Результат,НайденнаяСтрока, клиент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПередНачаломИзменения(Элемент, Отказ)
	отказ = истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Параметры.НайденнаяСтрока <> Неопределено Тогда
		Строки = Таблица.ПолучитьЭлементы();
		Номер = 0;
		Пока номер < Параметры.НайденнаяСтрока.Массив.Количество() Цикл
			ИндексСтроки = Строки.Получить(Параметры.НайденнаяСтрока.массив[номер]).ПолучитьИдентификатор();
			Строки = Строки.Получить(Параметры.НайденнаяСтрока.массив[номер]).ПолучитьЭлементы();
			Номер= Номер+1;
		КонецЦикла;
		Элементы.Таблица.Развернуть(ИндексСтроки,истина);
		Элементы.Таблица.ТекущаяСтрока = ИндексСтроки;
	КонецЕсли;
КонецПроцедуры