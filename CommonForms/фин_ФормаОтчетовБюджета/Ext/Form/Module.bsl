
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ общ_ЗащитаКлиентСервер.ПроверитьЛицензию() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отчет не может быть открыт, т.к. система защиты не функционирует!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	

	ОбъектОтчета = РеквизитФормыВЗначение("Отчет");
	МетаданныеОтчета 	= ОбъектОтчета.Метаданные();
	ИмяОтчета 			= ОбъектОтчета.Метаданные().Имя;
	
	ВидОтчетаБюджетирования			= фин_ОбщегоНазначенияВызовСервераПовтИсп.ВидОтчетаБюджетирования(ИмяОтчета);	
	
	фин_УправлениеОтчетамиБюджетирование.ПодготовкаФормыОтчета(ЭтотОбъект,ВидОтчетаБюджетирования);
	
	мОрганизацияПользователя 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Если Параметры.Свойство("Организация") Тогда
		мОрганизацияПользователя = Параметры.Организация;
	КонецЕсли;	
	
	фин_УправлениеОтчетамиБюджетирование.УправлениеФормойОтчета(ЭтотОбъект,ВидОтчетаБюджетирования,Параметры,ИмяОтчета);
	
	Если НЕ (Параметры.Свойство("НеВосстанавливатьНастройки") И Параметры.НеВосстанавливатьНастройки = Истина) Тогда
		ЗаполнитьНастройкиПриОткрытииОтчета();
		Если ИмяОтчета = "фин_ПечатьБюджета" Тогда
			Если Параметры.Свойство("Документ") Тогда
				ЭтотОбъект["Документ"] = Параметры["Документ"];
			КонецЕсли;
			Если Параметры.Свойство("ВидФормы") Тогда
				ЭтотОбъект["ВидФормы"] = Параметры["ВидФормы"];
			КонецЕсли;
		КонецЕсли;
		Если НЕ СохраненнаяНастройка.Пустая() Тогда
			СтандартнаяОбработка=Ложь;
		ИначеЕсли ИмяОтчета = "фин_ПечатьБюджета" Тогда
			Для Каждого ДоступнаяГруппировка Из ДоступныеГруппировки Цикл
				Если ДоступнаяГруппировка.Значение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Валюта 
					ИЛИ ДоступнаяГруппировка.Значение = Перечисления.фин_ФактическиеПоказателиБюджетирования.Организация Тогда
					Продолжить;
				КонецЕсли;
				НС = Группировки.Добавить();
				НС.Измерение = ДоступнаяГруппировка.Значение;
				Если НС.Измерение = Перечисления.фин_ДополнительныеРазрезыОтчетов.СтатьяБюджета Тогда
					НС.ВидГруппировки 	= Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрокСИерархией;
				ИначеЕсли НС.Измерение 		= Перечисления.фин_ФактическиеПоказателиБюджетирования.ПериодПланирования Тогда
					НС.ВидГруппировки 	= Перечисления.фин_ВидыГруппировокОтчета.Колонка;
				Иначе
					НС.ВидГруппировки = Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаСтрок;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ДоступныйПоказатель Из ДоступныеПоказатели Цикл
				Если ДоступныйПоказатель.Значение <> Перечисления.фин_РесурсыДанныхБюджетирования.СуммаУпр 
					ИЛИ ДоступныйПоказатель.Значение = Перечисления.фин_РесурсыДанныхБюджетирования.ЦенаУпр 
					ИЛИ ДоступныйПоказатель.Значение = Перечисления.фин_РесурсыДанныхБюджетирования.Количество Тогда
					Продолжить;
				КонецЕсли;
				НС = Показатели.Добавить();
				НС.Показатель = ДоступныйПоказатель.Значение;
			КонецЦикла;
			ЭтотОбъект["ВыводитьКодыСтрокБюджета"] = ЭтотОбъект["Документ"].ФормируемыйБюджет.ИспользоватьКодыСтрокБюджета;
			Если ЭтотОбъект["ВыводитьКодыСтрокБюджета"] = Истина Тогда
				ЭтотОбъект["УпорядочиваниеСтатей"] = "КодСтрокиБюджета";
			Иначе
				ЭтотОбъект["УпорядочиваниеСтатей"] = "Наименование";
			КонецЕсли;
			Параметры.СформироватьПриОткрытии=Истина;
		КонецЕсли;
	ИначеЕсли Параметры.Свойство("ШаблонОтчета") Тогда
		ЗагрузитьШаблонОтчетаНаСервере(Параметры.ШаблонОтчета,Неопределено);
	КонецЕсли;
	Если Параметры.СформироватьПриОткрытии=Истина Тогда
		ФормироватьОтчет();
	КонецЕсли;
	ЗаполнитьСпискиПоказателейИГруппировок();
	Если Элементы.ВидДанных.Видимость И ИмяОтчета<>"фин_ИсполнениеБюджета"  Тогда
		Факт = ВидДанных <> Перечисления.фин_ВидыДанныхОтчета.Плановые И ВидДанных <> Перечисления.фин_ВидыДанныхОтчета.ПустаяСсылка();
		Если Факт Тогда
			Элементы.Сценарий.Видимость = Ложь;
			Элементы.Периодичность.Видимость = Истина;
		Иначе
			Элементы.Сценарий.Видимость = Истина;
			Элементы.Периодичность.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.НастройкиОтбора.Видимость=ДоступныеГруппировки.Количество()>0 И ИмяОтчета<>"фин_ПользовательскийОтчет";
	фин_ОбщегоНазначенияСервер.НастроитьКнопкиОтправки(ЭтотОбъект,Элементы.ОсновнаяКоманднаяПанель);
	Элементы.СохранитьШаблонОтчета.Видимость = НЕ фин_УправлениеОтчетамиБюджетирование.ОграничиватьВидимостьНастроекОтчетов();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	КлючУникальности = ИмяОтчета;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если ЗначениеЗаполнено(СохраненнаяНастройка) И Сохранять(СохраненнаяНастройка) Тогда
		СохранитьНастройкуСервер();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	Если СохраненнаяНастройка.Пустая() Тогда
		ОбновитьЗначенияПараметров();
		УстановитьОтборИПараметры();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	Если СохраненнаяНастройка.Пустая() И НЕ Параметры.НеВосстанавливатьНастройки И Параметры.СформироватьПриОткрытии<>Истина Тогда
		ОбновитьЗначенияПараметров();
		УстановитьОтборИПараметры();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	Если СохраненнаяНастройка.Пустая() Тогда
		ОбновитьЗначенияПараметров();
		УстановитьОтборИПараметры();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	ОбновитьЗначенияПараметров();
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойВариантаНаСервере(Настройки)
	Если Параметры.НеВосстанавливатьНастройки Тогда
		Настройки = Отчет.КомпоновщикНастроек.ФиксированныеНастройки;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовФормы

&НаКлиенте
Процедура УпорядочиваниеСтатейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Список = Новый СписокЗначений;
	Список.Добавить("Код");
	Список.Добавить("Наименование");
	Список.Добавить("КодСтрокиБюджета");
	ДанныеВыбора = Список;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметра(Элемент)
	УстановитьЗначениеПараметра(?(Элемент.Имя="Сценарий1","Сценарий",Элемент.Имя),ЭтотОбъект[?(Элемент.Имя="Сценарий1","Сценарий",Элемент.Имя)]);
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	ПриИзмененииСценария();
КонецПроцедуры

&НаКлиенте
Процедура БюджетПриИзменении(Элемент)
	ЗаполнитьСпискиПоказателейИГруппировок();
КонецПроцедуры

&НаКлиенте
Процедура ВидДанныхПриИзменении(Элемент)
	Если ИмяОтчета<>"фин_ИсполнениеБюджета" Тогда
		Факт = ВидДанных <> ПредопределенноеЗначение("Перечисление.фин_ВидыДанныхОтчета.Плановые") И ВидДанных <> ПредопределенноеЗначение("Перечисление.фин_ВидыДанныхОтчета.ПустаяСсылка");
		Если Факт Тогда
			Элементы.Сценарий.Видимость = Ложь;
			Элементы.Периодичность.Видимость = Истина;
		Иначе
			Элементы.Сценарий.Видимость = Истина;
			Элементы.Периодичность.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	ПриИзмененииПериодичности();
	ПриИзмененииПараметра(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	ПриИзмененииПериодичности();
КонецПроцедуры

&НаКлиенте
Процедура НадписьПериодПланированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораПериодаПланирования",ЭтотОбъект);
	ОбъектПериодичность = ?(ИмяОтчета<>"фин_ИсполнениеБюджета" И ВидДанных<>ПредопределенноеЗначение("Перечисление.фин_ВидыДанныхОтчета.Плановые") И Элементы.ВидДанных.Видимость,Периодичность,Сценарий);
	ОткрытьФорму("ОбщаяФорма.фин_ВыборБюджетногоПериода",Новый Структура("Бюджет,НачалоПериодаПланирования,КонецПериодаПланирования,Периодичность,РазрешитьПроизвольныйПериод",Бюджет,НачалоПериодаПланирования,КонецПериодаПланирования,ОбъектПериодичность,Истина),ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура НастройкаОтчета(Команда)
	мПараметры = Новый Структура("Ключ,Отчет",Отчет,Отчет);
	мПараметры.Вставить("Вариант",Отчет.КомпоновщикНастроек.Настройки);
	мПараметры.Вставить("КлючВарианта",КлючТекущегоВарианта);
	мПараметры.Вставить("КлючНазначенияИспользования",КлючНазначенияИспользования);
	//	Параметры.Вставить("Отбор",Отчет.КомпоновщикНастроек.Настройки.Отбор);
	мПараметры.Вставить("ПользовательскиеНастройки",Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	//	Параметры.Вставить("ПредставлениеВарианта",);
	//	Параметры.Вставить("",);
	ФормаНастройки = Получитьформу("Отчет."+ИмяОтчета+".ФормаНастроек",мПараметры,ЭтотОбъект,УникальныйИдентификатор);
	ФормаНастройки.ОткрытьМодально();
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ФормаНастройки.Отчет.КомпоновщикНастроек.Настройки);
	Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ФормаНастройки.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ОбновитьЗначенияПараметров();
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда) Экспорт
	Если ИспользоватьНастройкуПериода И НастройкаПериода.ДатаНачала>НастройкаПериода.ДатаОкончания Тогда
		ПоказатьПредупреждение(,"Дата начала отчетного периода не может быть больше даты его окончания!");
	Иначе
		ПерезаполнитьВнутренниеГруппировки();
		ФормироватьОтчет();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыДополнительныеВосстановитьЗначения(Кнопка)
	
	Если ЗначениеЗаполнено(ВидОтчетаБюджетирования) Тогда
		ОписаниеОповещенияВыбораШаблонаДляОткрытия = Новый ОписаниеОповещения("ЗагрузитьШаблонОтчетаНаСервере",ЭтотОбъект);
		ОткрытьФорму("Справочник.фин_НастройкиОтчетовПоБюджетам.ФормаВыбора",Новый Структура("Отбор",Новый Структура("Владелец,ВидНастройки",ВидОтчетаБюджетирования,ПредопределенноеЗначение("Перечисление.фин_ВидыНастроекОтчета.ПерсональнаяНастройка"))),ЭтотОбъект,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещенияВыбораШаблонаДляОткрытия,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыДополнительныеСохранитьЗначения(Кнопка)
	
	Если ЗначениеЗаполнено(ВидОтчетаБюджетирования) Тогда
		ОписаниеОповещенияВыбораШаблонаДляСохранения = Новый ОписаниеОповещения("СохранитьШаблонОтчетаНаСервере",ЭтотОбъект,Истина);
		ОткрытьФорму("Справочник.фин_НастройкиОтчетовПоБюджетам.ФормаВыбора",Новый Структура("Отбор,ТекущаяСтрока",Новый Структура("Владелец,ВидНастройки,РежимСохранения",ВидОтчетаБюджетирования,ПредопределенноеЗначение("Перечисление.фин_ВидыНастроекОтчета.ПерсональнаяНастройка"),Истина),СохраненнаяНастройка),ЭтотОбъект,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещенияВыбораШаблонаДляСохранения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблонОтчета(Команда)
	Если ЗначениеЗаполнено(ВидОтчетаБюджетирования) Тогда
		ОписаниеОповещенияВыбораШаблонаДляСохранения = Новый ОписаниеОповещения("СохранитьШаблонОтчетаНаСервере",ЭтотОбъект,Ложь);
		ОткрытьФорму("Справочник.фин_НастройкиОтчетовПоБюджетам.ФормаВыбора",Новый Структура("Отбор",Новый Структура("Владелец,ВидНастройки",ВидОтчетаБюджетирования,ПредопределенноеЗначение("Перечисление.фин_ВидыНастроекОтчета.ШаблонДляОбщегоИспользования"))),ЭтотОбъект,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещенияВыбораШаблонаДляСохранения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШаблонОтчета(Команда)
	Если ЗначениеЗаполнено(ВидОтчетаБюджетирования) Тогда
		ОписаниеОповещенияВыбораШаблонаДляОткрытия = Новый ОписаниеОповещения("ЗагрузитьШаблонОтчетаНаСервере",ЭтотОбъект);
		ОткрытьФорму("Справочник.фин_НастройкиОтчетовПоБюджетам.ФормаВыбора",Новый Структура("Отбор",Новый Структура("Владелец,ВидНастройки",ВидОтчетаБюджетирования,ПредопределенноеЗначение("Перечисление.фин_ВидыНастроекОтчета.ШаблонДляОбщегоИспользования"))),ЭтотОбъект,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещенияВыбораШаблонаДляОткрытия,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПериодСтроки(Команда)
	Если Элементы.ДанныеДляАнализа.ТекущиеДанные<>Неопределено Тогда
		ВыбратьПериодПланированияСтроки(Элементы.ДанныеДляАнализа.ТекущиеДанные.НачалоПериода,Элементы.ПериодСтроки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчета(Команда)
	ВыбратьПериодПланированияОтчета(ТекущаяДата(),Элементы.ДанныеДляАнализаПериодОтчета);
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	Результат.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаПочту(Кнопка)
	
	УстановитьЗаголовок();
	общ_ОбщегоНазначенияКлиент.ОтправкаПечатнойФормыПоЭлПочте(ЭтотОбъект, Результат);
	
КонецПроцедуры


#КонецОбласти

#Область ПроцедурыРаботыСПериодом

&НаСервере
Функция ПолучитьПредставлениеПериода(ОтчетОбъект = Неопределено, НачалоПериода = Неопределено, КонецПериода = Неопределено, ТолькоДаты  = Ложь) Экспорт
	
	Возврат НадписьПериодПланирования;
	
КонецФункции

&НаКлиенте
Процедура НастройкаПериодаДатаНачалаПриИзменении(Элемент)
	НачалоПериода	= НастройкаПериода.ДатаНачала;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаДатаОкончанияПриИзменении(Элемент)
	КонецПериода	= НастройкаПериода.ДатаОкончания;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаВариантПриИзменении(Элемент)
	НачалоПериода	= НастройкаПериода.ДатаНачала;
	КонецПериода	= НастройкаПериода.ДатаОкончания;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыПоказатели

&НаКлиенте
Процедура ПоказателиПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ДоступныеПоказатели;
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Таблица = ТекущаяТаблица;	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыГруппировки

&НаКлиенте
Процедура ГруппировкиПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИнициироватьРедактированиеГруппировки(Элементы.Группировки.ТекущиеДанные,Элементы.Группировки.ТекущиеДанные.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если НЕ Копирование Тогда
		ВидГруппировки = Неопределено;
		ТекущиеДанные = Элементы.Группировки.ТекущиеДанные;
		Если ТекущиеДанные<>Неопределено Тогда
			ВидГруппировки = фин_УправлениеОтчетамиКлиентСервер.ОпределитьВидГруппировок(ТекущиеДанные.ВидГруппировки);
		КонецЕсли;
		ИнициироватьРедактированиеГруппировки(Новый Структура("ВидГруппировки,Расположение,Цвет",?(ВидГруппировки=Неопределено,ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.ГруппировкаСтрок"),ВидГруппировки),ПредопределенноеЗначение("Перечисление.фин_РасположениеПолейГруппировокОтчета.Вместе"),Новый Цвет(255,255,255)));
	Иначе
		ИнициироватьРедактированиеГруппировки(Элементы.Группировки.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.Группировки.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоГруппа Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.Группировки.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоГруппа Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ГруппировкиДерево.НайтиПоИдентификатору(Строка).ПолучитьЭлементы().Количество()>0 И ГруппировкиДерево.НайтиПоИдентификатору(Строка).ВидГруппировки<>ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.Поле") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	ВидГруппировкиПриемника = фин_УправлениеОтчетамиКлиентСервер.ОпределитьВидГруппировок(ГруппировкиДерево.НайтиПоИдентификатору(Строка).ВидГруппировки);
	ВидГруппировкиИсточника = Элемент.ТекущиеДанные.ВидГруппировки;
	Если ВидГруппировкиПриемника = фин_УправлениеОтчетамиКлиентСервер.ОпределитьВидГруппировок(ВидГруппировкиИсточника) Тогда
		СтандартнаяОбработка = Ложь;
		Приемник 		= ГруппировкиДерево.НайтиПоИдентификатору(Строка);
		Источник		= Элемент.ТекущиеДанные;
		НовыйРодитель 	= Источник.ПолучитьРодителя();
		фин_УправлениеОтчетамиКлиентСервер.ПеренестиПодчиненныеСтрокиНаРодителя(Источник,Приемник);
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Источник);
		фин_УправлениеОтчетамиКлиентСервер.ПеренестиПодчиненныеСтрокиНаУказанную(Приемник,НоваяСтрока,Источник);
		Если ГруппировкиДерево.НайтиПоИдентификатору(Источник.ПолучитьИдентификатор())<>Неопределено Тогда
			Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
		КонецЕсли;
		Элементы.Группировки.ТекущаяСтрока =  НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Группировки.Развернуть(НоваяСтрока.ПолучитьИдентификатор(),Истина);
	Иначе
		Элемент.ТекущиеДанные.ВидГруппировки =  фин_УправлениеОтчетамиКлиентСервер.ОпределитьВидГруппировкиПриемникаПриПеретаскивании(ВидГруппировкиИсточника,ВидГруппировкиПриемника);
		ПодчиненнаяСтрока = Элемент.ТекущиеДанные;
		Пока ПодчиненнаяСтрока.ПолучитьЭлементы().Количество()>0 Цикл 
			ПодчиненнаяСтрока = ПодчиненнаяСтрока.ПолучитьЭлементы()[0];
			ПодчиненнаяСтрока.ВидГруппировки =  фин_УправлениеОтчетамиКлиентСервер.ОпределитьВидГруппировкиПриемникаПриПеретаскивании(ПодчиненнаяСтрока.ВидГруппировки,ВидГруппировкиПриемника);
		КонецЦикла;
		Элементы.Группировки.Развернуть(Строка,Истина);
	КонецЕсли;
	ПерезаполнитьВнутренниеГруппировки();
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиПослеУдаления(Элемент)
	ПерезаполнитьВнутренниеГруппировки();
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиОтключитьПриИзменении(Элемент)
	ПерезаполнитьВнутренниеГруппировки();
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.Группировки.ТекущиеДанные.ВидГруппировки = ПредопределенноеЗначение("Перечисление.фин_ВидыГруппировокОтчета.ГруппировкаСтрок");
		Элементы.Группировки.ТекущиеДанные.Расположение = ПредопределенноеЗначение("Перечисление.фин_РасположениеПолейГруппировокОтчета.Вместе");
		Элементы.Группировки.ТекущиеДанные.Цвет = Новый Цвет(255,255,255);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыОтбор

&НаКлиенте
Процедура ОтборПолеОтбораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Список = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из ДоступныеГруппировки Цикл
		Если ЭлементСписка.Значение = ПредопределенноеЗначение("Перечисление.фин_ФактическиеПоказателиБюджетирования.ПериодПланирования") Тогда
			Продолжить;
		КонецЕсли;
		Список.Добавить(ЭлементСписка.Значение,ЭлементСписка.Представление);
	КонецЦикла;
	ДанныеВыбора = Список;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПолеОтбораПриИзменении(Элемент)
	СтрокаОтбора = Элемент.Родитель.ТекущиеДанные;
	ОбработатьИзменениеПоляОтбора(СтрокаОтбора.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.Равно"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.НеРавно"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.ВСписке"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.ВИерархии"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.НеВСписке"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.НеВИерархии"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.НеВСпискеПоИерархии"));
	Если Элемент.Родитель = Элементы.ОтборТаблиц И ЗначениеЗаполнено(ТекущаяТаблица) Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.Заполнено"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.усд_ВидыСравненияДляУсловий.НеЗаполнено"));
	КонецЕсли;
	ДанныеВыбора = СписокВыбора;
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидСравненияПриИзменении(Элемент)
	СтрокаОтбора = Элемент.Родитель.ТекущиеДанные;
	ОбработатьИзменениеПоляОтбора(СтрокаОтбора.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТипПоля = Неопределено;
	
	СтрокаОтбора = Элемент.Родитель.ТекущиеДанные;
	
	ОписаниеТипов = ПолучитьТипПоляОтбора(ТипПоля,СтрокаОтбора.ПолучитьИдентификатор());
	
	ПолеЗначенияОтбора 							= Элементы[Элемент.Имя];
	ПолеЗначенияОтбора.ОграничениеТипа 			= ОписаниеТипов;
	ПолеЗначенияОтбора.СписокВыбора.ТипЗначения = ТипПоля;
	
	Если ПолеЗначенияОтбора.ОграничениеТипа.СодержитТип(Тип("СписокЗначений")) Тогда
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещенияВыбораСписка = Новый ОписаниеОповещения("ОбработатьВыборСпискаОтбора",ЭтотОбъект,СтрокаОтбора.ПолучитьИдентификатор());
		ОткрытьФорму("ОбщаяФорма.фин_ЗаполнениеСпискаЗначений",Новый Структура("ТипСписка,СписокЗначений",ТипПоля,СтрокаОтбора.Значение),Элемент,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещенияВыбораСписка,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ПолеЗначенияОтбора.ОграничениеТипа.СодержитТип(Тип("СправочникСсылка.фин_СтатьиБюджета")) Тогда
		//Попытка
			ОткрытьФорму("Справочник.фин_СтатьиБюджета.ФормаВыбора",Новый Структура("Отбор,ТекущаяСтрока",Новый Структура("Владелец",ЭтотОбъект.Бюджет),СтрокаОтбора.Значение),Элемент,УникальныйИдентификатор);
			СтандартнаяОбработка = Ложь;
		//Исключение
		//КонецПопытки;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыДанныеДляАнализа

&НаКлиенте
Процедура ДанныеДляАнализаДанныеДляСравненияПриИзменении(Элемент)
	Для Каждого ТекущиеДанные Из ДанныеДляАнализа Цикл
		СценарийПериода = ?(ЗначениеЗаполнено(ТекущиеДанные.ДанныеДляСравнения) И ТипЗнч(ТекущиеДанные.ДанныеДляСравнения)=фин_ОбщегоНазначенияКлиентПовтИсп.ТипСправочникСценариевПланирования(),ТекущиеДанные.ДанныеДляСравнения,ПолучитьСценарийОтчета());
		ТекущиеДанные.НачалоПериода = ?(ЗначениеЗаполнено(СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СинхронизироватьПериодПланированияСоСценарием(ТекущиеДанные.НачалоПериода,СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекущиеДанные.НачалоПериода,ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц")));
		ТекущиеДанные.ОкончаниеПериода = ?(ЗначениеЗаполнено(СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СинхронизироватьКонецПериодаПланированияСоСценарием(ТекущиеДанные.ОкончаниеПериода,СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ТекущиеДанные.ОкончаниеПериода,ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц")));
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляАнализаНачалоПериодаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДанныеДляАнализа.ТекущиеДанные;
	СценарийПериода = ?(ЗначениеЗаполнено(ТекущиеДанные.ДанныеДляСравнения) И ТипЗнч(ТекущиеДанные.ДанныеДляСравнения)=фин_ОбщегоНазначенияКлиентПовтИсп.ТипСправочникСценариевПланирования(),ТекущиеДанные.ДанныеДляСравнения,ПолучитьСценарийОтчета());
	ТекущиеДанные.НачалоПериода = ?(ЗначениеЗаполнено(СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СинхронизироватьПериодПланированияСоСценарием(ТекущиеДанные.НачалоПериода,СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(ТекущиеДанные.НачалоПериода,ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц")));
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляАнализаОкончаниеПериодаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДанныеДляАнализа.ТекущиеДанные;
	СценарийПериода = ?(ЗначениеЗаполнено(ТекущиеДанные.ДанныеДляСравнения) И ТипЗнч(ТекущиеДанные.ДанныеДляСравнения)=фин_ОбщегоНазначенияКлиентПовтИсп.ТипСправочникСценариевПланирования(),ТекущиеДанные.ДанныеДляСравнения,ПолучитьСценарийОтчета());
	ТекущиеДанные.ОкончаниеПериода = ?(ЗначениеЗаполнено(СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СинхронизироватьКонецПериодаПланированияСоСценарием(ТекущиеДанные.ОкончаниеПериода,СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ТекущиеДанные.ОкончаниеПериода,ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц")));
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляАнализаНачалоПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ДанныеДляАнализа.ТекущиеДанные;
	Если ТекущиеДанные.НачалоПериода = '00010101' Тогда
		ТекущиеДанные.НачалоПериода = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	Если ТекущиеДанные.ОкончаниеПериода = '00010101' Тогда
		ТекущиеДанные.ОкончаниеПериода = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	СценарийПериода = ?(ЗначениеЗаполнено(ТекущиеДанные.ДанныеДляСравнения) И ТипЗнч(ТекущиеДанные.ДанныеДляСравнения)=фин_ОбщегоНазначенияКлиентПовтИсп.ТипСправочникСценариевПланирования(),ТекущиеДанные.ДанныеДляСравнения,ПолучитьСценарийОтчета());
	ТекущиеДанные.НачалоПериода = ?(ЗначениеЗаполнено(СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СледующийПериодПланирования(ТекущиеДанные.НачалоПериода,СценарийПериода,?(Направление>0,Истина,Ложь)),НачалоМесяца(ДобавитьМесяц(НачалоМесяца(ТекущиеДанные.НачалоПериода),Направление)));
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляАнализаОкончаниеПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ДанныеДляАнализа.ТекущиеДанные;
	Если ТекущиеДанные.НачалоПериода = '00010101' Тогда
		ТекущиеДанные.НачалоПериода = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	Если ТекущиеДанные.ОкончаниеПериода = '00010101' Тогда
		ТекущиеДанные.ОкончаниеПериода = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	СценарийПериода = ?(ЗначениеЗаполнено(ТекущиеДанные.ДанныеДляСравнения) И ТипЗнч(ТекущиеДанные.ДанныеДляСравнения)=фин_ОбщегоНазначенияКлиентПовтИсп.ТипСправочникСценариевПланирования(),ТекущиеДанные.ДанныеДляСравнения,ПолучитьСценарийОтчета());
	ТекущиеДанные.ОкончаниеПериода = ?(ЗначениеЗаполнено(СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СледующийПериодПланирования(ТекущиеДанные.ОкончаниеПериода,СценарийПериода,?(Направление>0,Истина,Ложь)),СценарийПериода),КонецМесяца(ДобавитьМесяц(КонецМесяца(ТекущиеДанные.ОкончаниеПериода),Направление)));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыДанныеОтчета

&НаКлиенте
Процедура ДанныеОтчетаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.ДанныеОтчета.ТекущиеДанные.Ресурс = ПредопределенноеЗначение("Перечисление.фин_РесурсыДанныхБюджетирования.СуммаУпр");
		Элементы.ДанныеОтчета.ТекущиеДанные.Использование = Истина;
	КонецЕсли;
	Если НоваяСтрока Тогда
		Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля = ПолучитьИдентификаторПоля();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОтчетаПоФормулеПриИзменении(Элемент)
	Если Элементы.ДанныеОтчета.ТекущиеДанные.ПоФормуле Тогда
		Элементы.ДанныеОтчета.ТекущиеДанные.Ресурс = ПредопределенноеЗначение("Перечисление.фин_РесурсыДанныхБюджетирования.ПустаяСсылка");
		Элементы.ДанныеОтчета.ТекущиеДанные.Данные = фин_ОбщегоНазначенияКлиентПовтИсп.ПустаяСсылкаСценарий();
		Элементы.ДанныеОтчета.ТекущиеДанные.НачалоПериода = '00010101';
		Элементы.ДанныеОтчета.ТекущиеДанные.ОкончаниеПериода = '00010101';
	Иначе
		Элементы.ДанныеОтчета.ТекущиеДанные.Формула = "";
		Элементы.ДанныеОтчета.ТекущиеДанные.Ресурс = ПредопределенноеЗначение("Перечисление.фин_РесурсыДанныхБюджетирования.СуммаУпр");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОтчетаФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	АдресХранилища = ПоместитьПоказателиВХранилище();
	ПараметрыФормулы = Новый Структура("Формула,ВходящиеПоказатели",Элементы.ДанныеОтчета.ТекущиеДанные.Формула,АдресХранилища);
	ОписаниеОбработкаВыбораФормулы = Новый ОписаниеОповещения("ОбработкаВыбораФормулы",ЭтотОбъект,Элементы.ДанныеОтчета.ТекущиеДанные);
	ОткрытьФорму("Отчет."+ИмяОтчета+".Форма.ФормаВводаФормулы",ПараметрыФормулы,Элемент,,,,ОписаниеОбработкаВыбораФормулы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораФормулы(РезультатВвода,ТекущиеДанные) Экспорт
	Если РезультатВвода<>Неопределено Тогда
		ТекущиеДанные.Формула = РезультатВвода;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОтчетаИдентификаторПоляПриИзменении(Элемент)
	ИдентификаторПоля = Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля;
	Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.УдалитьНедопустимыеСимволыНомера(ИдентификаторПоля);
	Если Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля="" Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля<>"" И ДанныеОтчета.НайтиСтроки(Новый Структура("ИдентификаторПоля",Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля)).Количество()>1  Тогда
		Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля = ПолучитьИдентификаторПоля();
		ПоказатьПредупреждение(,"Нельзя создавать показатели с одинаковыми идентификаторами!");
	КонецЕсли;
	Если фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ПолучитьСлужебныеСловаЗапроса().Найти(ВРег(Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля))<>Неопределено  Тогда
		Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля = ПолучитьИдентификаторПоля();
		ПоказатьПредупреждение(,"Нельзя присвоить показателю идентификатор, совпадающий с одним из ключевых слов!");
	КонецЕсли;
	Если фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ЧисловоеВыражение(Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля)  Тогда
		Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля = ПолучитьИдентификаторПоля();
		ПоказатьПредупреждение(,"Нельзя присвоить показателю числовой идентификатор!");
	КонецЕсли;
	Если фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ЧисловоеВыражение(Лев(Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля,1))  Тогда
		Элементы.ДанныеОтчета.ТекущиеДанные.ИдентификаторПоля = ПолучитьИдентификаторПоля();
		ПоказатьПредупреждение(,"Идентификатор показателя не может начинаться с цифры!");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыПараметрыДанныхОтчета

&НаКлиенте
Процедура ПараметрыДанныхОтчетаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элементы.ПараметрыДанныхОтчета.ТекущиеДанные.Список Тогда
		СтандартнаяОбработка = Ложь;
		ОписаниеОбработкаВыбораСпискаДанных = Новый ОписаниеОповещения("ОбработкаВыбораСпискаДанных",ЭтотОбъект,Элементы.ПараметрыДанныхОтчета.ТекущиеДанные);
		ОткрытьФорму("ОбщаяФорма.фин_ЗаполнениеСпискаЗначений",Новый Структура("ТипСписка,СписокЗначений",Элементы.ПараметрыДанныхОтчета.ТекущиеДанные.Тип,Элементы.ПараметрыДанныхОтчета.ТекущиеДанные.Значение),Элемент,,,,ОписаниеОбработкаВыбораСпискаДанных,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Элементы.ПараметрыДанныхОтчетаЗначение.ОграничениеТипа = Элементы.ПараметрыДанныхОтчета.ТекущиеДанные.Тип;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСпискаДанных(РезультатВыбора,ТекущиеДанные) Экспорт
	Если РезультатВыбора <>Неопределено Тогда
		ТекущиеДанные.Значение = РезультатВыбора;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДанныхОтчетаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Элементы.ПараметрыДанныхОтчета.ТекущиеДанные.Список Тогда
		Элементы.ПараметрыДанныхОтчетаЗначение.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
	Иначе
		Элементы.ПараметрыДанныхОтчетаЗначение.ОграничениеТипа = Элементы.ПараметрыДанныхОтчета.ТекущиеДанные.Тип;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыДанныеДляАнализа

&НаКлиенте
Процедура ДанныеДляАнализаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.ДанныеДляАнализа.ТекущиеДанные.ДанныеДляСравнения = фин_ОбщегоНазначенияКлиентПовтИсп.ПустаяСсылкаСценарий();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляАнализаДанныеДляСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.Форма.ФормаВыбораДляОтчетов",Новый Структура("ТекущаяСтрока",Элементы.ДанныеДляАнализа.ТекущиеДанные.ДанныеДляСравнения),Элемент,УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляАнализаДанныеДляСравненияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элементы.ДанныеДляАнализаДанныеДляСравнения.СписокВыбора.Очистить();
	Элементы.ДанныеДляАнализаДанныеДляСравнения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыДанныхОтчета.Фактические"));
	Элементы.ДанныеДляАнализаДанныеДляСравнения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыДанныхОтчета.Прогнозные"));
	Элементы.ДанныеДляАнализаДанныеДляСравнения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыДанныхОтчета.ФактическиеСУчетомПрогнозных"));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыДанныеОтчета

&НаКлиенте
Процедура ДанныеОтчетаДанныеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник."+фин_ОбщегоНазначенияВызовСервераПовтИсп.ПрефиксОбщихОбъектов()+"СценарииПланирования.Форма.ФормаВыбораДляОтчетов",Новый Структура("ТекущаяСтрока",Элементы.ДанныеОтчета.ТекущиеДанные.Данные),Элемент,УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОтчетаДанныеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элементы.ДанныеОтчетаДанные.СписокВыбора.Очистить();
	Элементы.ДанныеОтчетаДанные.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыДанныхОтчета.Фактические"));
	Элементы.ДанныеОтчетаДанные.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыДанныхОтчета.Прогнозные"));
	Элементы.ДанныеОтчетаДанные.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.фин_ВидыДанныхОтчета.ФактическиеСУчетомПрогнозных"));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыВидыАналитическихДанных

&НаКлиенте
Процедура ВидыАналитическихДанныхВидДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ИмяОтчета <> "фин_ИсполнениеБюджета" ИЛИ ПолучитьФункциональнуюОпциюИнтерфейса("фин_ИспользоватьАнализОтклоненийФактическихДанных")=Ложь Тогда
		СтандартнаяОбработка = Ложь;
		Список = Новый СписокЗначений;
		Список.Добавить(ПредопределенноеЗначение("Перечисление.фин_ПоказателиОтчетаПоИсполнениюБюджета.Эталон"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеАбсолютное"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.фин_ПоказателиОтчетаПоИсполнениюБюджета.ИсполнениеОтносительное"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеАбсолютное"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.фин_ПоказателиОтчетаПоИсполнениюБюджета.ОтклонениеОтносительное"));
		ДанныеВыбора = Список;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыТаблицыОтчета

&НаКлиенте
Процедура ТаблицыОтчетаПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ТаблицыОтчета.ТекущиеДанные;
	ТекущаяТаблица = ?(ТекущиеДанные=Неопределено,ПредопределенноеЗначение("Справочник.фин_ТаблицыОтчетовПоБюджетам.ПустаяСсылка"),ТекущиеДанные.Таблица);
	УстановитьОтборПоТаблицеОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицыОтчетаТаблицаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицыОтчета.ТекущиеДанные;
	Если ТаблицыОтчета.НайтиСтроки(Новый Структура("Таблица",ТекущиеДанные.Таблица)).Количество()>1 Тогда
		ТекущиеДанные.Таблица = ТекущаяТаблица;
		ПоказатьПредупреждение(,"Нельзя добавлять две одинаковые таблицы в настройки!");
	Иначе
		НоваяТаблица = ТекущиеДанные.Таблица;
		ПеренестиНастройкиТаблицы(ТекущаяТаблица,НоваяТаблица);
		ТекущаяТаблица = ?(ТекущиеДанные=Неопределено,ПредопределенноеЗначение("Справочник.фин_ТаблицыОтчетовПоБюджетам.ПустаяСсылка"),ТекущиеДанные.Таблица);
		УстановитьОтборПоТаблицеОтчета();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТаблицыОтчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование ИЛИ ТаблицыОтчета.НайтиСтроки(Новый Структура("Таблица",ПредопределенноеЗначение("Справочник.фин_ТаблицыОтчетовПоБюджетам.ПустаяСсылка"))).Количество()>0 Тогда
		Отказ = Истина;
		ОписаниеОповещенияВыбораТаблицы = Новый ОписаниеОповещения("ОбработчикВыбораТаблицыОтчета",ЭтотОбъект,Копирование);
		ВладелецТаблиц = ВладельцыТаблиц(ВидОтчетаБюджетирования);
		ОткрытьФорму("Справочник.фин_ТаблицыОтчетовПоБюджетам.ФормаВыбора",Новый Структура("Отбор",Новый Структура("Владелец",ВладелецТаблиц)),Элемент,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно),,ОписаниеОповещенияВыбораТаблицы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицыОтчетаТаблицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВладелецТаблиц = ВладельцыТаблиц(ВидОтчетаБюджетирования);
	ОткрытьФорму("Справочник.фин_ТаблицыОтчетовПоБюджетам.ФормаВыбора",Новый Структура("Отбор",Новый Структура("Владелец",ВладелецТаблиц)),Элемент,УникальныйИдентификатор,?(фин_ОбщегоНазначенияКлиентПовтИсп.РежимОтдельногоОткрытияОкон(),ВариантОткрытияОкна.ОтдельноеОкно,Окно));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыОтборТаблиц

&НаКлиенте
Процедура ОтборТаблицПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.ОтборТаблиц.ТекущиеДанные.Таблица = ТекущаяТаблица;	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПоляРезультата

&НаКлиенте
Процедура РезультатПриИзмененииСодержимогоОбласти(Элемент, Область)
	Если ИмяОтчета = "фин_ПрогнозныйОтчетОДвиженииДенег" ИЛИ ИмяОтчета = "фин_ПрогнозныйОтчетОДоходахИРасходах" Тогда
		РезультатПриИзмененииСодержимогоОбластиНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РезультатПриИзмененииСодержимогоОбластиНаСервере()
	Отчеты[ИмяОтчета].Расчет(Результат);
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		РезультатОбработки = ОбработатьРасшифровку(Расшифровка);
		Если РезультатОбработки = Неопределено Тогда
			Возврат;
		ИначеЕсли РезультатОбработки.Действие = "ОткрытьЗначение" Тогда
			ПоказатьЗначение(,РезультатОбработки.Параметр);
		ИначеЕсли РезультатОбработки.Действие = "ВыбратьРасшифровку" Тогда
			ОписаниеОповещенияВыбораРасшифровки = Новый ОписаниеОповещения("ОбработкаВыбораВариантаРасшифровкиИзСписка",ЭтотОбъект,Расшифровка);
			ПоказатьВыборИзСписка(ОписаниеОповещенияВыбораРасшифровки,РезультатОбработки.Параметр);
			//РезультатВыбора = ВыбратьИзСписка(РезультатОбработки.Параметр);
			//Если РезультатВыбора<>Неопределено Тогда
			//	РезультатОбработки = ОбработатьРасшифровку(Расшифровка,РезультатВыбора.Значение);
			//	Если РезультатОбработки<>Неопределено Тогда
			//		ОткрытьФорму(РезультатОбработки.Действие,РезультатОбработки.Параметр,ЭтотОбъект,УникальныйИдентификатор);
			//	КонецЕсли;
			//КонецЕсли;
		Иначе
			ОткрытьФорму(РезультатОбработки.Действие,РезультатОбработки.Параметр,ЭтотОбъект,УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		Попытка
			Если ТипЗнч(Расшифровка)=Тип("СписокЗначений") Тогда
				ОписаниеВыбораЭлементаСписка = Новый ОписаниеОповещения("ОбработкаВыбораЭлементаСписка",ЭтотОбъект);
				ПоказатьВыборИзСписка(ОписаниеВыбораЭлементаСписка,Расшифровка,Элемент);
			Иначе
				ПоказатьЗначение(,Расшифровка);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//

#Область ПроцедурыРаботыСРасшифровкой

&НаКлиенте
Процедура ОбработкаВыбораВариантаРасшифровкиИзСписка(РезультатВыбора,Расшифровка) Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		РезультатОбработки = ОбработатьРасшифровку(Расшифровка,РезультатВыбора.Значение);
		Если РезультатОбработки<>Неопределено Тогда
			ОткрытьФорму(РезультатОбработки.Действие,РезультатОбработки.Параметр,ЭтотОбъект,УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура  ОбработкаВыбораЭлементаСписка(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		ПоказатьЗначение(,РезультатВыбора.Значение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОбработатьРасшифровку(Расшифровка,ВариантРасшифровки = Неопределено)
	ДанныеДляОбработки = ПолучитьИзВременногоХранилища(Адрес);
	ИнформацияДляРасшифровки = ДанныеДляОбработки.Элементы.Получить(Расшифровка);
	Если ИнформацияДляРасшифровки <> Неопределено Тогда
		ДействиеРасшифровки = СокрЛП(Строка(ИнформацияДляРасшифровки.ОсновноеДействие));
		Данные = ИнформацияДляРасшифровки.ПолучитьПоля();
		Если ДействиеРасшифровки= "Нет" И НЕ (ИмяОтчета = "фин_АнализСчета") Тогда
			Возврат Неопределено;
		ИначеЕсли ДействиеРасшифровки = "Открыть значение" Тогда
			Возврат Новый Структура("Действие,Параметр","ОткрытьЗначение",Данные[0].Значение);
		ИначеЕсли ИмяОтчета = "фин_ОборотноСальдоваяВедомость" Тогда
			Если ВариантРасшифровки = Неопределено Тогда
				мСчет = Неопределено;
				ТаблицаОтбора = Новый ТаблицаЗначений;
				ТаблицаОтбора.Колонки.Добавить("Поле");
				ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
				ТаблицаОтбора.Колонки.Добавить("Значение");
				ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
				ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ИнформацияДляРасшифровки,ДанныеДляОбработки);
				Для Каждого СтрокаПараметра Из ТаблицаОтбора Цикл
					Если СтрокаПараметра.Поле="Счет" И мСчет=Неопределено Тогда
						мСчет = СтрокаПараметра.Значение;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				СписокВариантовРасшифровки = Новый СписокЗначений;
				СписокВариантовРасшифровки.Добавить("ОСВ","ОСВ по счету "+Строка(мСчет));
				СписокВариантовРасшифровки.Добавить("Карточка","Карточка счета "+Строка(мСчет));
				СписокВариантовРасшифровки.Добавить("Анализ","Анализ счета "+Строка(мСчет));
				СписокВариантовРасшифровки.Добавить("ОборотыПоМесяцам","Обороты счета "+Строка(мСчет)+" по месяцам");
				СписокВариантовРасшифровки.Добавить("ОборотыПоДням","Обороты счета "+Строка(мСчет)+" по дням");
				Возврат Новый Структура("Действие,Параметр","ВыбратьРасшифровку",СписокВариантовРасшифровки);
			Иначе
				ТаблицаОтбора = Новый ТаблицаЗначений;
				ТаблицаОтбора.Колонки.Добавить("Поле");
				ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
				ТаблицаОтбора.Колонки.Добавить("Значение");
				ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
				ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ИнформацияДляРасшифровки,ДанныеДляОбработки);
				Если ТаблицаОтбора.Количество()=0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				мНачалоПериода = НачалоПериода;
				мКонецПериода = КонецПериода;
				мСчет = Неопределено;
				КопияОтбор = Отбор.Выгрузить();
				Для Каждого СтрокаПараметра Из ТаблицаОтбора Цикл
					Если Найти(СтрокаПараметра.Поле,"Субконто")<>0 Тогда
						НомерСубконто = Число(Сред(СтрокаПараметра.Поле,СтрДлина("Субконто")+1));
						НС = КопияОтбор.Добавить();
						НС.Использование = Истина;
						НС.ПолеОтбора = Перечисления.фин_ДополнительныеРазрезыОтчетов["Субконто"+Строка(НомерСубконто)];
						НС.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.Равно;
						НС.Значение = СтрокаПараметра.Значение;
					ИначеЕсли СтрокаПараметра.Поле = "Организация" ИЛИ СтрокаПараметра.Поле = "Валюта" Тогда
						НомерСубконто = Число(Сред(СтрокаПараметра.Поле,СтрДлина("Субконто")));
						НС = КопияОтбор.Добавить();
						НС.Использование = Истина;
						НС.ПолеОтбора = Перечисления.фин_ФактическиеПоказателиБюджетирования[СтрокаПараметра.Поле];
						НС.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.Равно;
						НС.Значение = СтрокаПараметра.Значение;
					ИначеЕсли СтрокаПараметра.Поле="Период" Тогда
						мНачалоПериода = СтрокаПараметра.Значение;
						мКонецПериода = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(СтрокаПараметра.Значение,ЭтотОбъект["ПериодичностьОтчета"]);
					ИначеЕсли СтрокаПараметра.Поле="Счет" И мСчет=Неопределено Тогда
						мСчет = СтрокаПараметра.Значение;
					КонецЕсли;
				КонецЦикла;
				СтруктураПараметровФормы = Новый Структура("Счет,Сценарий,НачалоПериода,КонецПериода,ПериодичностьОтчета,ЯзыкОтчета",мСчет,Сценарий,мНачалоПериода,мКонецПериода,ЭтотОбъект["ПериодичностьОтчета"],ЭтотОбъект["ЯзыкОтчета"]);
				СтруктураПараметровФормы.Вставить("ОтборДляРасшифровки",ЗначениеВСтрокуВнутр(КопияОтбор));
				СтруктураПараметровФормы.Вставить("Показатели",Показатели.Выгрузить().ВыгрузитьКолонку("Показатель"));
				СтруктураПараметровФормы.Вставить("СформироватьПриОткрытии",Истина);
				СтруктураПараметровФормы.Вставить("НеВосстанавливатьНастройки",Истина);
				Если ВариантРасшифровки = "Карточка" Тогда
					Возврат Новый Структура("Действие,Параметр","Отчет.фин_КарточкаСчета.Форма",СтруктураПараметровФормы);
				ИначеЕсли ВариантРасшифровки = "ОСВ" Тогда
					Возврат Новый Структура("Действие,Параметр","Отчет.фин_ОборотноСальдоваяВедомостьПоСчету.Форма",СтруктураПараметровФормы);
				ИначеЕсли ВариантРасшифровки = "Анализ" Тогда
					Возврат Новый Структура("Действие,Параметр","Отчет.фин_АнализСчета.Форма",СтруктураПараметровФормы);
				ИначеЕсли ВариантРасшифровки = "ОборотыПоМесяцам" Тогда
					СтруктураПараметровФормы.Вставить("ПериодичностьОтчета",ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц"));
					СтруктураПараметровФормы.Вставить("НачальноеСальдоДт",Истина);
					СтруктураПараметровФормы.Вставить("НачальноеСальдоКт",Истина);
					СтруктураПараметровФормы.Вставить("ОборотыДт",Истина);
					СтруктураПараметровФормы.Вставить("ОборотыКт",Истина);
					СтруктураПараметровФормы.Вставить("КонечноеСальдоДт",Истина);
					СтруктураПараметровФормы.Вставить("КонечноеСальдоКт",Истина);
					Возврат Новый Структура("Действие,Параметр","Отчет.фин_ОборотыСчета.Форма",СтруктураПараметровФормы);
				ИначеЕсли ВариантРасшифровки = "ОборотыПоДням" Тогда
					СтруктураПараметровФормы.Вставить("ПериодичностьОтчета",Перечисления.фин_Периодичность.День);
					СтруктураПараметровФормы.Вставить("НачальноеСальдоДт",Истина);
					СтруктураПараметровФормы.Вставить("НачальноеСальдоКт",Истина);
					СтруктураПараметровФормы.Вставить("ОборотыДт",Истина);
					СтруктураПараметровФормы.Вставить("ОборотыКт",Истина);
					СтруктураПараметровФормы.Вставить("КонечноеСальдоДт",Истина);
					СтруктураПараметровФормы.Вставить("КонечноеСальдоКт",Истина);
					Возврат Новый Структура("Действие,Параметр","Отчет.фин_ОборотыСчета.Форма",СтруктураПараметровФормы);
                КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяОтчета = "фин_ОборотыПоПлануСчетовБюджетирования" Тогда
			ТаблицаОтбора = Новый ТаблицаЗначений;
			ТаблицаОтбора.Колонки.Добавить("Поле");
			ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
			ТаблицаОтбора.Колонки.Добавить("Значение");
			ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
			ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ИнформацияДляРасшифровки,ДанныеДляОбработки);
			Если ТаблицаОтбора.Количество()=0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			мНачалоПериода = НачалоПериодаПланирования;
			мКонецПериода = КонецПериодаПланирования;
			мСчет = ЭтотОбъект["СтатьяБаланса"];
			КопияОтбор = Отбор.Выгрузить();
			Для Каждого СтрокаПараметра Из ТаблицаОтбора Цикл
				Если (СтрокаПараметра.Поле = "Организация" ИЛИ СтрокаПараметра.Поле = "Валюта") И СтрокаПараметра.Значение<>Null Тогда
					НС = КопияОтбор.Добавить();
					НС.Использование = Истина;
					НС.ПолеОтбора = Перечисления.фин_ФактическиеПоказателиБюджетирования[СтрокаПараметра.Поле];
					НС.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.Равно;
					НС.Значение = СтрокаПараметра.Значение;
				ИначеЕсли СтрокаПараметра.Поле="ПериодПланирования" Тогда
					мНачалоПериода = СтрокаПараметра.Значение;
					мКонецПериода = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(СтрокаПараметра.Значение,ЭтотОбъект["Периодичность"]);
				ИначеЕсли СтрокаПараметра.Поле="Счет" И мСчет=Неопределено Тогда
					мСчет = СтрокаПараметра.Значение;
				КонецЕсли;
			КонецЦикла;
			СтруктураПараметровФормы = Новый Структура("Счет,Сценарий,НачалоПериода,КонецПериода,ЯзыкОтчета",мСчет,Сценарий,мНачалоПериода,мКонецПериода,ЭтотОбъект["ЯзыкОтчета"]);
			СтруктураПараметровФормы.Вставить("ОтборДляРасшифровки",ЗначениеВСтрокуВнутр(КопияОтбор));
			СтруктураПараметровФормы.Вставить("Показатели",Показатели.Выгрузить().ВыгрузитьКолонку("Показатель"));
			СтруктураПараметровФормы.Вставить("СформироватьПриОткрытии",Истина);
			СтруктураПараметровФормы.Вставить("НеВосстанавливатьНастройки",Истина);
			//	СтруктураПараметровФормы.Вставить("ПериодичностьОтчета",ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц"));
			СтруктураПараметровФормы.Вставить("НачальноеСальдоДт",Истина);
			СтруктураПараметровФормы.Вставить("НачальноеСальдоКт",Истина);
			СтруктураПараметровФормы.Вставить("ОборотыДт",Истина);
			СтруктураПараметровФормы.Вставить("ОборотыКт",Истина);
			СтруктураПараметровФормы.Вставить("КонечноеСальдоДт",Истина);
			СтруктураПараметровФормы.Вставить("КонечноеСальдоКт",Истина);
			Возврат Новый Структура("Действие,Параметр","Отчет.фин_ОборотыСчета.Форма",СтруктураПараметровФормы);
		ИначеЕсли ИмяОтчета = "фин_ОборотыСчета" Тогда
			ТаблицаОтбора = Новый ТаблицаЗначений;
			ТаблицаОтбора.Колонки.Добавить("Поле");
			ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
			ТаблицаОтбора.Колонки.Добавить("Значение");
			ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
			ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ИнформацияДляРасшифровки,ДанныеДляОбработки);
			Если ТаблицаОтбора.Количество()=0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			мНачалоПериода = НачалоПериода;
			мКонецПериода = КонецПериода;
			мСчет = Неопределено;
			КопияОтбор = Отбор.Выгрузить();
			Для Каждого СтрокаПараметра Из ТаблицаОтбора Цикл
				Если Найти(СтрокаПараметра.Поле,"КорСубконто")<>0 Тогда
					НС = КопияОтбор.Добавить();
					НС.Использование = Истина;
					НС.ПолеОтбора = Перечисления.фин_ДополнительныеРазрезыОтчетов[СтрокаПараметра.Поле];
					НС.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.Равно;
					НС.Значение = СтрокаПараметра.Значение;
				ИначеЕсли Найти(СтрокаПараметра.Поле,"Субконто")<>0 Тогда
					НомерСубконто = Число(Сред(СтрокаПараметра.Поле,СтрДлина("Субконто")+1));
					НС = КопияОтбор.Добавить();
					НС.Использование = Истина;
					НС.ПолеОтбора = Группировки[НомерСубконто-1].Измерение;
					НС.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.Равно;
					НС.Значение = СтрокаПараметра.Значение;
				ИначеЕсли СтрокаПараметра.Поле="КорСчет" Тогда
					НС = КопияОтбор.Добавить();
					НС.Использование = Истина;
					НС.ПолеОтбора = Перечисления.фин_ДополнительныеРазрезыОтчетов.КорСчет;
					НС.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.Равно;
					НС.Значение = СтрокаПараметра.Значение;
				ИначеЕсли СтрокаПараметра.Поле="Колонка" И ТипЗнч(СтрокаПараметра.Значение)=Тип("ПланСчетовСсылка.фин_Бюджетирование") Тогда
					НС = КопияОтбор.Добавить();
					НС.Использование = Истина;
					НС.ПолеОтбора = Перечисления.фин_ДополнительныеРазрезыОтчетов.КорСчет;
					НС.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.Равно;
					НС.Значение = СтрокаПараметра.Значение;
				ИначеЕсли СтрокаПараметра.Поле = "Организация" ИЛИ СтрокаПараметра.Поле = "Валюта" Тогда
					НомерСубконто = Число(Сред(СтрокаПараметра.Поле,СтрДлина("Субконто")));
					НС = КопияОтбор.Добавить();
					НС.Использование = Истина;
					НС.ПолеОтбора = Перечисления.фин_ФактическиеПоказателиБюджетирования[СтрокаПараметра.Поле];
					НС.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.Равно;
					НС.Значение = СтрокаПараметра.Значение;
				ИначеЕсли СтрокаПараметра.Поле="Период" Тогда
					мНачалоПериода = СтрокаПараметра.Значение;
					мКонецПериода = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(СтрокаПараметра.Значение,ЭтотОбъект["ПериодичностьОтчета"]);
				ИначеЕсли СтрокаПараметра.Поле="Счет" И мСчет=Неопределено Тогда
					мСчет = СтрокаПараметра.Значение;
				КонецЕсли;
			КонецЦикла;
			СЗ = Новый СписокЗначений;
			СЗ.Добавить(мСчет);
			НС = КопияОтбор.Добавить();
			НС.Использование = Истина;
			НС.ПолеОтбора = Перечисления.фин_ДополнительныеРазрезыОтчетов.Счет;
			НС.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии;
			НС.Значение = СЗ;
			СтруктураПараметровФормы = Новый Структура("Счет,Сценарий,НачалоПериода,КонецПериода,ПериодичностьОтчета,ЯзыкОтчета",мСчет,Сценарий,мНачалоПериода,мКонецПериода,ЭтотОбъект["ПериодичностьОтчета"],ЭтотОбъект["ЯзыкОтчета"]);
			СтруктураПараметровФормы.Вставить("ОтборДляРасшифровки",ЗначениеВСтрокуВнутр(КопияОтбор));
			СтруктураПараметровФормы.Вставить("Показатели",Показатели.Выгрузить().ВыгрузитьКолонку("Показатель"));
			СтруктураПараметровФормы.Вставить("СформироватьПриОткрытии",Истина);
			СтруктураПараметровФормы.Вставить("НеВосстанавливатьНастройки",Истина);
			Возврат Новый Структура("Действие,Параметр","Отчет.фин_ОтчетПоПроводкам.Форма",СтруктураПараметровФормы);
		ИначеЕсли ИмяОтчета = "фин_ОборотноСальдоваяВедомостьПоСчету" Тогда
			ТаблицаОтбора = Новый ТаблицаЗначений;
			ТаблицаОтбора.Колонки.Добавить("Поле");
			ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
			ТаблицаОтбора.Колонки.Добавить("Значение");
			ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
			ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ИнформацияДляРасшифровки,ДанныеДляОбработки);
			Если ТаблицаОтбора.Количество()=0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			мНачалоПериода = НачалоПериода;
			мКонецПериода = КонецПериода;
			мСчет = Неопределено;
			КопияОтбор = Отбор.Выгрузить();
			Для Каждого СтрокаПараметра Из ТаблицаОтбора Цикл
				Если Найти(СтрокаПараметра.Поле,"Субконто")<>0 Тогда
					НомерСубконто = Число(Сред(СтрокаПараметра.Поле,СтрДлина("Субконто")+1));
					НС = КопияОтбор.Добавить();
					НС.Использование = Истина;
					НС.ПолеОтбора = Группировки[НомерСубконто-1].Измерение;
					НС.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.Равно;
					НС.Значение = СтрокаПараметра.Значение;
				ИначеЕсли СтрокаПараметра.Поле = "Организация" ИЛИ СтрокаПараметра.Поле = "Валюта" Тогда
					НомерСубконто = Число(Сред(СтрокаПараметра.Поле,СтрДлина("Субконто")));
					НС = КопияОтбор.Добавить();
					НС.Использование = Истина;
					НС.ПолеОтбора = Перечисления.фин_ФактическиеПоказателиБюджетирования[СтрокаПараметра.Поле];
					НС.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.Равно;
					НС.Значение = СтрокаПараметра.Значение;
				ИначеЕсли СтрокаПараметра.Поле="Период" Тогда
					мНачалоПериода = СтрокаПараметра.Значение;
					мКонецПериода = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(СтрокаПараметра.Значение,ЭтотОбъект["ПериодичностьОтчета"]);
				ИначеЕсли СтрокаПараметра.Поле="Счет" И мСчет=Неопределено Тогда
					мСчет = СтрокаПараметра.Значение;
				КонецЕсли;
			КонецЦикла;
			СтруктураПараметровФормы = Новый Структура("Счет,Сценарий,НачалоПериода,КонецПериода,ПериодичностьОтчета,ЯзыкОтчета",мСчет,Сценарий,мНачалоПериода,мКонецПериода,ЭтотОбъект["ПериодичностьОтчета"],ЭтотОбъект["ЯзыкОтчета"]);
			СтруктураПараметровФормы.Вставить("ОтборДляРасшифровки",ЗначениеВСтрокуВнутр(КопияОтбор));
			СтруктураПараметровФормы.Вставить("Показатели",Показатели.Выгрузить().ВыгрузитьКолонку("Показатель"));
			СтруктураПараметровФормы.Вставить("СформироватьПриОткрытии",Истина);
			СтруктураПараметровФормы.Вставить("НеВосстанавливатьНастройки",Истина);
			Возврат Новый Структура("Действие,Параметр","Отчет.фин_КарточкаСчета.Форма",СтруктураПараметровФормы);
		ИначеЕсли ДействиеРасшифровки = "Расшифровать" Тогда
			Ресурс = Данные[0].Поле;
			ТаблицаОтбора = Новый ТаблицаЗначений;
			ТаблицаОтбора.Колонки.Добавить("Поле");
			ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
			ТаблицаОтбора.Колонки.Добавить("Значение");
			ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
			Если ИмяОтчета = "фин_ОборотыПоПлануСчетовБюджетирования"
				ИЛИ ИмяОтчета = "фин_СравнительныйАнализОборотовПоПлануСчетовБюджетирования"
				ИЛИ ИмяОтчета = "фин_СравнительныйАнализОстатковПоПлануСчетовБюджетирования" Тогда
				Возврат Неопределено;
			КонецЕсли;
			Если ИмяОтчета = "фин_СводКорректировокИОтклоненийПоБюджетам" И Найти(Ресурс,"ИсходноеЗначение")<>0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			Если ИмяОтчета = "фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам" И Ресурс = "Остаток" Тогда
				Возврат Неопределено;
			КонецЕсли;
			Если ОбъектОтчет.Метаданные().Реквизиты.Найти("Сценарий")<>Неопределено И НЕ ИмяОтчета = "фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам" И НЕ ИмяОтчета = "фин_ИсполнениеБюджета" Тогда
				НС = ТаблицаОтбора.Добавить();
				НС.Поле = "Сценарий";
				Если ОбъектОтчет.Метаданные().Реквизиты.Найти("ВидДанных")<>Неопределено Тогда
					НС.Значение = ?(ВидДанных=Перечисления.фин_ВидыДанныхОтчета.Плановые,Сценарий,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий());
				Иначе
					НС.Значение = Сценарий;
				КонецЕсли;
				НС.ВидСравнения = "Равно";
			ИначеЕсли ИмяОтчета = "фин_ИсполнениеБюджета" ИЛИ ИмяОтчета = "фин_СравнительныйАнализ" ИЛИ ИмяОтчета = "фин_АнализРассогласованияСтатей" Тогда
				ЭтоБазовыйРесурс = Ложь;
				Для Каждого ЭлементПеречисления Из Метаданные.Перечисления.фин_РесурсыДанныхБюджетирования.ЗначенияПеречисления Цикл
					Если Найти(Ресурс,ЭлементПеречисления.Имя)<>0 Тогда
						НомерДанных = Число(Сред(Ресурс,СтрДлина(ЭлементПеречисления.Имя)+1));
						Если ДанныеДляАнализа.Количество()<НомерДанных Тогда
							Продолжить;
						КонецЕсли;
						ДанныеРесурса = ДанныеДляАнализа[НомерДанных-1];
						НС = ТаблицаОтбора.Добавить();
						НС.Поле = "Сценарий";
						НС.Значение = ?(ТипЗнч(ДанныеРесурса.ДанныеДляСравнения)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования(),ДанныеРесурса.ДанныеДляСравнения,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий());
						НС.ВидСравнения = "Равно";
						НС = ТаблицаОтбора.Добавить();
						НС.Поле = "ПериодПланирования";
						НС.Значение = ДанныеРесурса.НачалоПериода;
						НС.ВидСравнения = "БольшеИлиРавно";
						НС = ТаблицаОтбора.Добавить();
						НС.Поле = "ПериодПланирования";
						НС.Значение = КонецДня(ДанныеРесурса.ОкончаниеПериода);
						НС.ВидСравнения = "МеньшеИлиРавно";
						ЭтоБазовыйРесурс = Истина;
					КонецЕсли;
				КонецЦикла;
				Если (НЕ ЭтоБазовыйРесурс) И ИмяОтчета = "фин_ИсполнениеБюджета" Тогда
					Если  ВариантРасшифровки=Неопределено И ПолучитьФункциональнуюОпцию("фин_ИспользоватьАнализОтклоненийФактическихДанных")=Ложь Тогда
						СписокВариантовРасшифровки = Новый СписокЗначений;
						СписокВариантовРасшифровки.Добавить("РегистрацияИсполнения","Ручная регистрация исполнения");
						СписокВариантовРасшифровки.Добавить("РегистрацияПрогноза","Регистрация прогнозного исполнения");
						Возврат Новый Структура("Действие,Параметр","ВыбратьРасшифровку",СписокВариантовРасшифровки);
					ИначеЕсли ВариантРасшифровки=Неопределено Тогда
						СписокВариантовРасшифровки = Новый СписокЗначений;
						СписокВариантовРасшифровки.Добавить("РегистрацияОтклонения","Регистрация отклонения");
						СписокВариантовРасшифровки.Добавить("РегистрацияИсполнения","Ручная регистрация исполнения");
						СписокВариантовРасшифровки.Добавить("РегистрацияПрогноза","Регистрация прогнозного исполнения");
						СписокВариантовРасшифровки.Добавить("РасшифровкаОтклонений","Расшифровка зарегистрированных отклонений");
						Возврат Новый Структура("Действие,Параметр","ВыбратьРасшифровку",СписокВариантовРасшифровки);
					КонецЕсли;
					//Возврат Неопределено;
				КонецЕсли;
			ИначеЕсли ОбъектОтчет.Метаданные().Имя = "фин_ВременнойАнализБюджетныхДанных" Тогда
				ЭтоБазовыйРесурс = Ложь;
				ДанныеРесурса = ДанныеОтчета.НайтиСтроки(Новый Структура("ИдентификаторПоля",Ресурс));
				Если ДанныеРесурса.Количество()>0 Тогда
					ДанныеРесурса = ДанныеРесурса[0];
					НС = ТаблицаОтбора.Добавить();
					НС.Поле = "Сценарий";
					НС.Значение = ?(ТипЗнч(ДанныеРесурса.Данные)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования(),ДанныеРесурса.Данные,фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий());
					НС.ВидСравнения = "Равно";
					НС = ТаблицаОтбора.Добавить();
					НС.Поле = "ПериодПланирования";
					НС.Значение = ДанныеРесурса.НачалоПериода;
					НС.ВидСравнения = "БольшеИлиРавно";
					НС = ТаблицаОтбора.Добавить();
					НС.Поле = "ПериодПланирования";
					НС.Значение = КонецДня(ДанныеРесурса.ОкончаниеПериода);
					НС.ВидСравнения = "МеньшеИлиРавно";
					ЭтоБазовыйРесурс = Истина;
				КонецЕсли;
				Если НЕ ЭтоБазовыйРесурс Тогда
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
			Если ОбъектОтчет.Метаданные().Реквизиты.Найти("ГраницаАктуальности")<>Неопределено И ЭтотОбъект["ГраницаАктуальности"]<>'00010101' Тогда
				НС = ТаблицаОтбора.Добавить();
				НС.Поле = "Период";
				НС.Значение = КонецДня(ЭтотОбъект["ГраницаАктуальности"]);
				НС.ВидСравнения = "МеньшеИлиРавно";
			КонецЕсли;
			Если ОбъектОтчет.Метаданные().Реквизиты.Найти("НачалоПериодаПланирования")<>Неопределено Тогда
				НС = ТаблицаОтбора.Добавить();
				НС.Поле = "ПериодПланирования";
				НС.Значение = ЭтотОбъект["НачалоПериодаПланирования"];
				НС.ВидСравнения = "БольшеИлиРавно";
			КонецЕсли;
			Если ОбъектОтчет.Метаданные().Реквизиты.Найти("КонецПериодаПланирования")<>Неопределено Тогда
				НС = ТаблицаОтбора.Добавить();
				НС.Поле = "ПериодПланирования";
				НС.Значение = КонецДня(ЭтотОбъект["КонецПериодаПланирования"]);
				НС.ВидСравнения = "МеньшеИлиРавно";
			КонецЕсли;
			ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ИнформацияДляРасшифровки,ДанныеДляОбработки);
			ОтборыРасшифровки = ОбъектОтчет.ОтборыРасшифровки;
			Для Каждого ОтборРасшифровки Из ОтборыРасшифровки Цикл
				НС = ТаблицаОтбора.Добавить();
				НС.Поле = ОтборРасшифровки;
				НС.Значение = ЭтотОбъект[ОтборРасшифровки];
				НС.ВидСравнения = "Равно";
			КонецЦикла;
			Для Каждого ОтборРасшифровки Из ОбъектОтчет.ТаблицаОтбора Цикл
				НС = ТаблицаОтбора.Добавить();
				ЗаполнитьЗначенияСвойств(НС,ОтборРасшифровки);
			КонецЦикла;
			СтруктураПараметровФормы = Новый Структура();
			СтруктураПараметровФормы.Вставить("ИмяРегистра","фин_ОборотыБюджетов");
			Если ИмяОтчета = "фин_Бюджет" И (ВидДанных<>Перечисления.фин_ВидыДанныхОтчета.Плановые) Тогда
				СтруктураПараметровФормы.Вставить("ИмяРегистра","фин_Бюджет");
				СтруктураПараметровФормы.Вставить("ВидДанных",ВидДанных);
				СтруктураПараметровФормы.Вставить("ГраницаФактическихИПрогнозныхДанных",ЭтотОбъект["ГраницаФактическихИПрогнозныхДанных"]);
				СтрокиПериодПланирования = ТаблицаОтбора.НайтиСтроки(Новый Структура("Поле,ВидСравнения","ПериодПланирования","Равно"));
				СтрокиУдалить = Новый Массив;
				Для Каждого СтрокаПериода Из СтрокиПериодПланирования Цикл
					СтрокаПериода.ВидСравнения = "БольшеИлиРавно";
					НоваяСтрока = ТаблицаОтбора.Добавить();
					НоваяСтрока.Поле = "ПериодПланирования";
					НоваяСтрока.ВидСравнения = "МеньшеИлиРавно";
					НоваяСтрока.Значение = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(СтрокаПериода.Значение,Периодичность);
				КонецЦикла;
			КонецЕсли;
			Если ИмяОтчета = "фин_ИсполнениеБюджета" ИЛИ ИмяОтчета = "фин_СравнительныйАнализ" Тогда
				Для Каждого ЭлементПеречисления Из Метаданные.Перечисления.фин_РесурсыДанныхБюджетирования.ЗначенияПеречисления Цикл
					Если Найти(Ресурс,ЭлементПеречисления.Имя)<>0 Тогда
						СтрокиПериодПланирования = ТаблицаОтбора.НайтиСтроки(Новый Структура("Поле,ВидСравнения","ПериодПланирования","Равно"));
						СтрокиУдалить = Новый Массив;
						Для Каждого СтрокаПериода Из СтрокиПериодПланирования Цикл
							СтрокаПериода.ВидСравнения = "БольшеИлиРавно";
							НоваяСтрока = ТаблицаОтбора.Добавить();
							НоваяСтрока.Поле = "ПериодПланирования";
							НоваяСтрока.ВидСравнения = "МеньшеИлиРавно";
							НоваяСтрока.Значение = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(СтрокаПериода.Значение,ПолучитьСценарийОтчетаНаСервере());
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				Попытка
					Если ДанныеРесурса<>Неопределено И ТипЗнч(ДанныеРесурса.ДанныеДляСравнения)<>фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() И ЗначениеЗаполнено(ДанныеРесурса.ДанныеДляСравнения) Тогда
						СтруктураПараметровФормы.Вставить("ИмяРегистра","фин_Бюджет");
						СтруктураПараметровФормы.Вставить("ВидДанных",ДанныеРесурса.ДанныеДляСравнения);
						СтруктураПараметровФормы.Вставить("ГраницаФактическихИПрогнозныхДанных",ЭтотОбъект["ГраницаФактическихИПрогнозныхДанных"]);
						СтруктураПараметровФормы.Вставить("ГраницаАктуальности",ЭтотОбъект["ГраницаАктуальности"]);
					ИначеЕсли ДанныеРесурса<>Неопределено И НЕ ЗначениеЗаполнено(ДанныеРесурса.ДанныеДляСравнения) Тогда
						СтруктураПараметровФормы.Вставить("ИмяРегистра","фин_Бюджет");
						СтруктураПараметровФормы.Вставить("ВидДанных",Перечисления.фин_ВидыДанныхОтчета.Фактические);
						СтруктураПараметровФормы.Вставить("ГраницаФактическихИПрогнозныхДанных",ЭтотОбъект["ГраницаФактическихИПрогнозныхДанных"]);
						СтруктураПараметровФормы.Вставить("ГраницаАктуальности",ЭтотОбъект["ГраницаАктуальности"]);
					КонецЕсли;
				Исключение
				КонецПопытки;
				Если ВариантРасшифровки = "РасшифровкаОтклонений" Тогда
					СтруктураПараметровФормы.Вставить("ИмяРегистра","фин_АнализОтклоненийФактическихДанных");
				КонецЕсли;
			КонецЕсли;
			Если ИмяОтчета = "фин_АнализРассогласованияСтатей" Тогда
				Для Каждого ЭлементПеречисления Из Метаданные.Перечисления.фин_РесурсыДанныхБюджетирования.ЗначенияПеречисления Цикл
					Если Найти(Ресурс,ЭлементПеречисления.Имя)<>0 Тогда
						СтрокиПериодПланирования = ТаблицаОтбора.НайтиСтроки(Новый Структура("Поле,ВидСравнения","ПериодПланирования","Равно"));
						СтрокиУдалить = Новый Массив;
						Для Каждого СтрокаПериода Из СтрокиПериодПланирования Цикл
							СтрокаПериода.ВидСравнения = "БольшеИлиРавно";
							НоваяСтрока = ТаблицаОтбора.Добавить();
							НоваяСтрока.Поле = "ПериодПланирования";
							НоваяСтрока.ВидСравнения = "МеньшеИлиРавно";
							НоваяСтрока.Значение = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(СтрокаПериода.Значение,ПолучитьСценарийОтчетаНаСервере());
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				Попытка
					Если ДанныеРесурса<>Неопределено И ТипЗнч(ДанныеРесурса.ДанныеДляСравнения)<>фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() И ЗначениеЗаполнено(ДанныеРесурса.ДанныеДляСравнения) Тогда
						СтруктураПараметровФормы.Вставить("ИмяРегистра","фин_Бюджет");
						СтруктураПараметровФормы.Вставить("ВидДанных",ДанныеРесурса.ДанныеДляСравнения);
						СтруктураПараметровФормы.Вставить("ГраницаФактическихИПрогнозныхДанных",ЭтотОбъект["ГраницаФактическихИПрогнозныхДанных"]);
						СтруктураПараметровФормы.Вставить("ГраницаАктуальности",ЭтотОбъект["ГраницаАктуальности"]);
					ИначеЕсли ДанныеРесурса<>Неопределено И НЕ ЗначениеЗаполнено(ДанныеРесурса.ДанныеДляСравнения) Тогда
						СтруктураПараметровФормы.Вставить("ИмяРегистра","фин_Бюджет");
						СтруктураПараметровФормы.Вставить("ВидДанных",Перечисления.фин_ВидыДанныхОтчета.Фактические);
						СтруктураПараметровФормы.Вставить("ГраницаФактическихИПрогнозныхДанных",ЭтотОбъект["ГраницаФактическихИПрогнозныхДанных"]);
						СтруктураПараметровФормы.Вставить("ГраницаАктуальности",ЭтотОбъект["ГраницаАктуальности"]);
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
			Если ИмяОтчета = "фин_ВременнойАнализБюджетныхДанных" Тогда
				Попытка
					Если ДанныеРесурса<>Неопределено И ТипЗнч(ДанныеРесурса.Данные)<>фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() И ЗначениеЗаполнено(ДанныеРесурса.Данные) Тогда
						СтруктураПараметровФормы.Вставить("ИмяРегистра","фин_Бюджет");
						СтруктураПараметровФормы.Вставить("ВидДанных",ДанныеРесурса.Данные);
						СтруктураПараметровФормы.Вставить("ГраницаФактическихИПрогнозныхДанных",ЭтотОбъект["ГраницаФактическихИПрогнозныхДанных"]);
						СтруктураПараметровФормы.Вставить("ГраницаАктуальности",ЭтотОбъект["ГраницаАктуальности"]);
					ИначеЕсли ДанныеРесурса<>Неопределено И НЕ ЗначениеЗаполнено(ДанныеРесурса.Данные) Тогда
						СтруктураПараметровФормы.Вставить("ИмяРегистра","фин_Бюджет");
						СтруктураПараметровФормы.Вставить("ВидДанных",Перечисления.фин_ВидыДанныхОтчета.Фактические);
						СтруктураПараметровФормы.Вставить("ГраницаФактическихИПрогнозныхДанных",ЭтотОбъект["ГраницаФактическихИПрогнозныхДанных"]);
						СтруктураПараметровФормы.Вставить("ГраницаАктуальности",ЭтотОбъект["ГраницаАктуальности"]);
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
			Если ИмяОтчета = "фин_АнализПричинКорректировок" Тогда
				СтруктураПараметровФормы.Вставить("ИмяРегистра","фин_МониторингКорректировок");
			КонецЕсли;
			Если ИмяОтчета = "фин_АнализПричинОтклоненийФактическихДанныхБюджетов" Тогда
				СтруктураПараметровФормы.Вставить("ИмяРегистра","фин_АнализОтклоненийФактическихДанных");
			КонецЕсли;
			Если ИмяОтчета = "фин_СводКорректировокИОтклоненийПоБюджетам" Тогда
				Если Найти(Ресурс,"ВеличинаКорректировки")<>0 Тогда
					СтруктураПараметровФормы.Вставить("ИмяРегистра","фин_МониторингКорректировок");
					СтрокиКС = ТаблицаОтбора.НайтиСтроки(Новый Структура("Поле","ПричинаОтклонения"));
					Если СтрокиКС.Количество()>0 Тогда
						ТаблицаОтбора.Удалить(СтрокиКС[0]);
					КонецЕсли;
				ИначеЕсли Найти(Ресурс,"ОтклоненнаяВеличина")<>0 Тогда
					СтруктураПараметровФормы.Вставить("ИмяРегистра","фин_МониторингНепринятияСтрокБюджетов");
					СтрокиКС = ТаблицаОтбора.НайтиСтроки(Новый Структура("Поле","ПричинаКорректировки"));
					Если СтрокиКС.Количество()>0 Тогда
						ТаблицаОтбора.Удалить(СтрокиКС[0]);
					КонецЕсли;
				Иначе
					СтрокиКС = ТаблицаОтбора.НайтиСтроки(Новый Структура("Поле","ПричинаКорректировки"));
					Если СтрокиКС.Количество()>0 Тогда
						ТаблицаОтбора.Удалить(СтрокиКС[0]);
					КонецЕсли;
					СтрокиКС = ТаблицаОтбора.НайтиСтроки(Новый Структура("Поле","ПричинаОтклонения"));
					Если СтрокиКС.Количество()>0 Тогда
						ТаблицаОтбора.Удалить(СтрокиКС[0]);
					КонецЕсли;
					СтрокиКС = ТаблицаОтбора.НайтиСтроки(Новый Структура("Поле","СпособКорректировки"));
					Если СтрокиКС.Количество()>0 Тогда
						ТаблицаОтбора.Удалить(СтрокиКС[0]);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ИмяОтчета = "фин_АнализПричинОтклоненийПоБюджетам" Тогда
				СтруктураПараметровФормы.Вставить("ИмяРегистра","фин_МониторингНепринятияСтрокБюджетов");
			КонецЕсли;
			Если ИмяОтчета = "фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам" Тогда
				НС = ТаблицаОтбора.Добавить();
				НС.Поле = "ПериодПланирования";
				НС.Значение = ЭтотОбъект["НачалоПериодаКонтроля"];
				НС.ВидСравнения = "БольшеИлиРавно";
				НС = ТаблицаОтбора.Добавить();
				НС.Поле = "ПериодПланирования";
				НС.Значение = КонецДня(ЭтотОбъект["ОкончаниеПериодаКонтроля"]);
				НС.ВидСравнения = "МеньшеИлиРавно";
				Если ЭтотОбъект["ВидКонтроля"]=Перечисления.фин_ВидыКонтролируемогоЗначенияБюджета.Ограничивающее Тогда
					СтруктураПараметровФормы.Вставить("ИмяРегистра","фин_КонтролируемыеФинансовыеПоказатели");
					НС = ТаблицаОтбора.Добавить();
					НС.Поле = "ИспользованиеКонтролируемогоЗначения";
					НС.Значение = ЭтотОбъект["ИспользованиеКонтроля"];
					НС.ВидСравнения = "Равно";
					Если Ресурс = "ЦелевоеЗначение" Тогда
						НС = ТаблицаОтбора.Добавить();
						НС.Поле = "СуммаСценарияКонтроль";
						НС.Значение = 0;
						НС.ВидСравнения = "Заполнено";
					Иначе
						НС = ТаблицаОтбора.Добавить();
						НС.Поле = "СуммаСценарияИсполнение";
						НС.Значение = 0;
						НС.ВидСравнения = "Заполнено";
					КонецЕсли;
				Иначе
					Если Ресурс = "ЦелевоеЗначение" Тогда
						СтруктураПараметровФормы.Вставить("ИмяРегистра","фин_ЦелевыеЗначенияПоБюджетам");
						НС = ТаблицаОтбора.Добавить();
						НС.Поле = "ИспользованиеКонтролируемогоЗначения";
						НС.Значение = ЭтотОбъект["ИспользованиеКонтроля"];
						НС.ВидСравнения = "Равно";
					ИначеЕсли ЭтотОбъект["ИспользованиеКонтроля"]=Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении Тогда
						НС = ТаблицаОтбора.Добавить();
						НС.Поле = "Сценарий";
						НС.Значение = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий();
						НС.ВидСравнения = "Равно";
						Если Ресурс = "Исполнение" Тогда
							СтрокиКС = ТаблицаОтбора.НайтиСтроки(Новый Структура("Поле","КонтролирующийСценарий"));
							Если СтрокиКС.Количество()>0 Тогда
								ТаблицаОтбора.Удалить(СтрокиКС[0]);
							КонецЕсли;
							СтрокиПериодПланирования = ТаблицаОтбора.НайтиСтроки(Новый Структура("Поле,ВидСравнения","ПериодПланирования","Равно"));
							Для Каждого СтрокаПериода Из СтрокиПериодПланирования Цикл
								СтрокаПериода.ВидСравнения = "БольшеИлиРавно";
								ИскомоеПоле = ?(ЭтотОбъект["ИспользованиеКонтроля"]=Перечисления.фин_ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении,"КонтролирующийСценарий","Сценарий");
								СтрокиПоля = ТаблицаОтбора.НайтиСтроки(Новый Структура("Поле",ИскомоеПоле));
								Если СтрокиПоля.Количество()>0 И СтрокиПоля[0].ВидСравнения = "Равно" Тогда
									НоваяСтрока = ТаблицаОтбора.Добавить();
									НоваяСтрока.Поле = "ПериодПланирования";
									НоваяСтрока.ВидСравнения = "МеньшеИлиРавно";
									НоваяСтрока.Значение = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(СтрокаПериода.Значение,СтрокиПоля[0].Значение);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Для Каждого СтрокаОтбор Из Отбор Цикл
				Если НЕ СтрокаОтбор.Использование Тогда
					Продолжить;
				КонецЕсли;
				НС = ТаблицаОтбора.Добавить();
				НС.Поле = ?(ТипЗнч(СтрокаОтбор.ПолеОтбора)=Тип("СправочникСсылка.фин_ДополнительныеРазрезыОтчетовПоБюджетам"),СтрокаОтбор.ПолеОтбора.Путь,фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаОтбор.ПолеОтбора));
				Если НС.Поле = "ФинансовыйПоказатель" И ИмяОтчета<>"фин_МониторингЛимитовИЦелевыхЗначенийПоБюджетам" Тогда
					НС.Поле = "СтатьяБюджета";
				КонецЕсли;
				НС.ВидСравнения = фин_ОбщегоНазначенияСервер.ПолучитьИмяЭлементаПеречисленияПоЗначению(СтрокаОтбор.ВидСравнения);
				НС.Значение = СтрокаОтбор.Значение;
			КонецЦикла;
			СтруктураПараметровФормы.Вставить("ОтборДляРасшифровки",ЗначениеВСтрокуВнутр(ТаблицаОтбора));
			СтруктураПараметровФормы.Вставить("СформироватьПриОткрытии",Истина);
			Если ИмяОтчета = "фин_ИсполнениеБюджета" И ВариантРасшифровки = "РегистрацияОтклонения" Тогда
				СценарийДляРегистрации = Неопределено;
				Для Каждого СтрокаДанных Из ДанныеДляАнализа Цикл
					Если ЗначениеЗаполнено(СтрокаДанных.ДанныеДляСравнения) И ТипЗнч(СтрокаДанных.ДанныеДляСравнения)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() Тогда
						 СценарийДляРегистрации = СтрокаДанных.ДанныеДляСравнения;
					КонецЕсли;
				КонецЦикла;
				СтруктураПараметровФормы.Вставить("Сценарий",СценарийДляРегистрации);
				СтруктураПараметровФормы.Вставить("Организация",ЭтотОбъект["Организация"]);
				Возврат Новый Структура("Действие,Параметр","Документ.фин_РассмотрениеОтклоненийФактическихДанных.ФормаОбъекта",Новый Структура("ЗначенияЗаполнения",СтруктураПараметровФормы));
			ИначеЕсли ИмяОтчета = "фин_ИсполнениеБюджета" И ВариантРасшифровки = "РегистрацияИсполнения" Тогда
				СценарийДляРегистрации = Неопределено;
				Для Каждого СтрокаДанных Из ДанныеДляАнализа Цикл
					Если ЗначениеЗаполнено(СтрокаДанных.ДанныеДляСравнения) И ТипЗнч(СтрокаДанных.ДанныеДляСравнения)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() Тогда
						 СценарийДляРегистрации = СтрокаДанных.ДанныеДляСравнения;
					КонецЕсли;
				КонецЦикла;
				СтруктураПараметровФормы.Вставить("Сценарий",СценарийДляРегистрации);
				СтруктураПараметровФормы.Вставить("Организация",ЭтотОбъект["Организация"]);
				Возврат Новый Структура("Действие,Параметр","Документ.фин_УчетФактическихДанныхПоБюджетам.ФормаОбъекта",Новый Структура("ЗначенияЗаполнения",СтруктураПараметровФормы));
			ИначеЕсли ИмяОтчета = "фин_ИсполнениеБюджета" И ВариантРасшифровки = "РегистрацияПрогноза" Тогда
				СценарийДляРегистрации = Неопределено;
				Для Каждого СтрокаДанных Из ДанныеДляАнализа Цикл
					Если ЗначениеЗаполнено(СтрокаДанных.ДанныеДляСравнения) И ТипЗнч(СтрокаДанных.ДанныеДляСравнения)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() Тогда
						 СценарийДляРегистрации = СтрокаДанных.ДанныеДляСравнения;
					КонецЕсли;
				КонецЦикла;
				СтруктураПараметровФормы.Вставить("Сценарий",СценарийДляРегистрации);
				СтруктураПараметровФормы.Вставить("Организация",ЭтотОбъект["Организация"]);
				Возврат Новый Структура("Действие,Параметр","Документ.фин_РегистрацияПрогнозныхДанныхПоИсполнениюБюджетов.ФормаОбъекта",Новый Структура("ЗначенияЗаполнения",СтруктураПараметровФормы));
			Иначе
				Возврат Новый Структура("Действие,Параметр","Отчет.фин_РасшифровкаОборотовПоБюджету.Форма.ФормаОтчета",СтруктураПараметровФормы);
			КонецЕсли;
		ИначеЕсли ИмяОтчета = "фин_АнализСчета" Тогда
			ОткрытьОтчетПоПроводкам = Ложь;
			ТаблицаОтбора = Новый ТаблицаЗначений;
			ТаблицаОтбора.Колонки.Добавить("Поле");
			ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
			ТаблицаОтбора.Колонки.Добавить("Значение");
			ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
			ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ИнформацияДляРасшифровки,ДанныеДляОбработки);
			Если ТаблицаОтбора.Количество()=0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			Если ТаблицаОтбора[0].Поле = "Счет" Тогда
				СтруктураПараметровФормы = Новый Структура("Счет,Сценарий,НачалоПериода,КонецПериода,ПериодичностьОтчета,ЯзыкОтчета",ТаблицаОтбора[0].Значение,Сценарий,НачалоПериода,КонецПериода,ЭтотОбъект["ПериодичностьОтчета"],ЭтотОбъект["ЯзыкОтчета"]);
				СтруктураПараметровФормы.Вставить("ОтборДляРасшифровки",ЗначениеВСтрокуВнутр(Отбор.Выгрузить()));
				СтруктураПараметровФормы.Вставить("Показатели",Показатели.Выгрузить().ВыгрузитьКолонку("Показатель"));
				СтруктураПараметровФормы.Вставить("СформироватьПриОткрытии",Истина);
				СтруктураПараметровФормы.Вставить("НеВосстанавливатьНастройки",Истина);
				Возврат Новый Структура("Действие,Параметр","Отчет.фин_КарточкаСчета.Форма",СтруктураПараметровФормы);
			ИначеЕсли ТаблицаОтбора[0].Поле = "Период" Тогда
				СтруктураПараметровФормы = Новый Структура("Счет,Сценарий,НачалоПериода,КонецПериода,ПериодичностьОтчета,ЯзыкОтчета",ТаблицаОтбора[1].Значение,Сценарий,ТаблицаОтбора[0].Значение,фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ТаблицаОтбора[0].Значение,ЭтотОбъект["ПериодичностьОтчета"]),ЭтотОбъект["ПериодичностьОтчета"],ЭтотОбъект["ЯзыкОтчета"]);
				СтруктураПараметровФормы.Вставить("ОтборДляРасшифровки",ЗначениеВСтрокуВнутр(Отбор.Выгрузить()));
				СтруктураПараметровФормы.Вставить("Показатели",Показатели.Выгрузить().ВыгрузитьКолонку("Показатель"));
				СтруктураПараметровФормы.Вставить("СформироватьПриОткрытии",Истина);
				СтруктураПараметровФормы.Вставить("НеВосстанавливатьНастройки",Истина);
				Возврат Новый Структура("Действие,Параметр","Отчет.фин_КарточкаСчета.Форма",СтруктураПараметровФормы);
			ИначеЕсли ТаблицаОтбора[0].Поле = "КорСчет" ИЛИ Найти(ТаблицаОтбора[0].Поле,"Субконто")<>0 ИЛИ ТаблицаОтбора[0].Поле = "Организация" ИЛИ ТаблицаОтбора[0].Поле = "Валюта" Тогда
				мНачалоПериода = НачалоПериода;
				мКонецПериода = КонецПериода;
				мСчет = Неопределено;
				КопияОтбор = Отбор.Выгрузить();
				Для Каждого СтрокаПараметра Из ТаблицаОтбора Цикл
					Если Найти(СтрокаПараметра.Поле,"КорСубконто")<>0 Тогда
						НС = КопияОтбор.Добавить();
						НС.Использование = Истина;
						НС.ПолеОтбора = Перечисления.фин_ДополнительныеРазрезыОтчетов[СтрокаПараметра.Поле];
						НС.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.Равно;
						НС.Значение = СтрокаПараметра.Значение;
						ОткрытьОтчетПоПроводкам = Истина;
					ИначеЕсли Найти(СтрокаПараметра.Поле,"Субконто")<>0 Тогда
						НомерСубконто = Число(Сред(СтрокаПараметра.Поле,СтрДлина("Субконто")+1));
						НС = КопияОтбор.Добавить();
						НС.Использование = Истина;
						НС.ПолеОтбора = Группировки[НомерСубконто-1].Измерение;
						НС.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.Равно;
						НС.Значение = СтрокаПараметра.Значение;
					ИначеЕсли СтрокаПараметра.Поле="КорСчет" Тогда
						НС = КопияОтбор.Добавить();
						НС.Использование = Истина;
						НС.ПолеОтбора = Перечисления.фин_ДополнительныеРазрезыОтчетов.КорСчет;
						НС.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.Равно;
						НС.Значение = СтрокаПараметра.Значение;
						ОткрытьОтчетПоПроводкам = Истина;
					ИначеЕсли СтрокаПараметра.Поле = "Организация" ИЛИ СтрокаПараметра.Поле = "Валюта" Тогда
						НомерСубконто = Число(Сред(СтрокаПараметра.Поле,СтрДлина("Субконто")));
						НС = КопияОтбор.Добавить();
						НС.Использование = Истина;
						НС.ПолеОтбора = Перечисления.фин_ФактическиеПоказателиБюджетирования[СтрокаПараметра.Поле];
						НС.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.Равно;
						НС.Значение = СтрокаПараметра.Значение;
					ИначеЕсли СтрокаПараметра.Поле="Период" Тогда
						мНачалоПериода = СтрокаПараметра.Значение;
						мКонецПериода = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(СтрокаПараметра.Значение,ЭтотОбъект["ПериодичностьОтчета"]);
					ИначеЕсли СтрокаПараметра.Поле="Счет" Тогда
						мСчет = СтрокаПараметра.Значение;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ОткрытьОтчетПоПроводкам Тогда
					СЗ = Новый СписокЗначений;
					СЗ.Добавить(мСчет);
					НС = КопияОтбор.Добавить();
					НС.Использование = Истина;
					НС.ПолеОтбора = Перечисления.фин_ДополнительныеРазрезыОтчетов.Счет;
					НС.ВидСравнения = Перечисления.усд_ВидыСравненияДляУсловий.ВСпискеПоИерархии;
					НС.Значение = СЗ;
				КонецЕсли;
				СтруктураПараметровФормы = Новый Структура("Счет,Сценарий,НачалоПериода,КонецПериода,ПериодичностьОтчета,ЯзыкОтчета",мСчет,Сценарий,мНачалоПериода,мКонецПериода,ЭтотОбъект["ПериодичностьОтчета"],ЭтотОбъект["ЯзыкОтчета"]);
				СтруктураПараметровФормы.Вставить("ОтборДляРасшифровки",ЗначениеВСтрокуВнутр(КопияОтбор));
				СтруктураПараметровФормы.Вставить("Показатели",Показатели.Выгрузить().ВыгрузитьКолонку("Показатель"));
				СтруктураПараметровФормы.Вставить("СформироватьПриОткрытии",Истина);
				СтруктураПараметровФормы.Вставить("НеВосстанавливатьНастройки",Истина);
				Возврат Новый Структура("Действие,Параметр","Отчет."+?(ОткрытьОтчетПоПроводкам,"фин_ОтчетПоПроводкам","фин_КарточкаСчета")+".Форма",СтруктураПараметровФормы);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ИнформацияДляРасшифровки,ДанныеРасшифровки)
	РодительскиеПоля = ИнформацияДляРасшифровки.ПолучитьРодителей();
	Для Каждого ПолеРодитель Из РодительскиеПоля Цикл
		ДанныеРодителя = ДанныеРасшифровки.Элементы.Получить(ПолеРодитель.Идентификатор);
		Если НЕ ТипЗнч(ДанныеРодителя)=Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
			Для Каждого ПолеРодителя Из ДанныеРодителя.ПолучитьПоля() Цикл
				Если ПолеРодителя.Поле = "ЕдиницаИзмерения" Тогда
					Продолжить;
				КонецЕсли;
				НС = ТаблицаОтбора.Добавить();
				НС.Поле = ПолеРодителя.Поле;
				НС.Значение = ПолеРодителя.Значение;
				НС.ВидСравнения = ?(ЗначениеЗаполнено(ПолеРодителя.Значение),?(ПолеРодителя.Иерархия,"ВИерархии","Равно"),"Незаполнено");
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ДанныеРодителя,ДанныеРасшифровки);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти



#Область ВспомогательныеПроцедурыИФункции


&НаКлиенте
Процедура ПеренестиНастройкиТаблицы(ИсходнаяТаблица,Результирующая,Копирование = Ложь)
	ОбрабатываемыеТаблицыФормы = Новый Массив;
	ОбрабатываемыеТаблицыФормы.Добавить(Показатели);
	ОбрабатываемыеТаблицыФормы.Добавить(Группировки);
	ОбрабатываемыеТаблицыФормы.Добавить(ВидыАналитическихДанных);
	ОбрабатываемыеТаблицыФормы.Добавить(АналитическиеПоляСводаКорректировок);
	фин_УправлениеОтчетамиКлиентСервер.ПеренестиНастройкиТаблицыОтчета(ОбрабатываемыеТаблицыФормы,ИсходнаяТаблица,Результирующая,Копирование);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоТаблицеОтчета()
	Если ПоддержкаНесколькихТаблиц Тогда
		Элементы.Показатели.ОтборСтрок = Новый ФиксированнаяСтруктура("Таблица",ТекущаяТаблица);	
		Элементы.ВидыАналитическихДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("Таблица",ТекущаяТаблица);	
		Элементы.Отбор.ОтборСтрок = Новый ФиксированнаяСтруктура("Таблица",ПредопределенноеЗначение("Справочник.фин_ТаблицыОтчетовПоБюджетам.ПустаяСсылка"));	
		Элементы.ОтборТаблиц.ОтборСтрок = Новый ФиксированнаяСтруктура("Таблица",ТекущаяТаблица);	
		Элементы.АналитическиеПоляСводаКорректировок.ОтборСтрок = Новый ФиксированнаяСтруктура("Таблица",ТекущаяТаблица);
		фин_УправлениеОтчетамиКлиентСервер.ЗаполнитьИерархиюГруппировокИзТаблицы(ГруппировкиДерево,Группировки,ТекущаяТаблица,ПоддержкаНесколькихТаблиц);
		Для Каждого ЭлементДерева Из ГруппировкиДерево.ПолучитьЭлементы() Цикл
			Элементы.Группировки.Развернуть(ЭлементДерева.ПолучитьИдентификатор(),Истина);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьВнутренниеГруппировки()
	Если ПоддержкаНесколькихТаблиц Тогда
		СтрокиГруппировок = Группировки.НайтиСтроки(Новый Структура("Таблица",ТекущаяТаблица));
		Для Каждого СтрокаУдалить Из СтрокиГруппировок Цикл
			Группировки.Удалить(СтрокаУдалить);
		КонецЦикла;
	Иначе
		Группировки.Очистить();
	КонецЕсли;
	ДобавитьГруппировкиИзДерева(ГруппировкиДерево.ПолучитьЭлементы());	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппировкиИзДерева(ЭлементыДерева)
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.ЭтоГруппа = Ложь Тогда
			НС = Группировки.Добавить();
			ЗаполнитьЗначенияСвойств(НС,ЭлементДерева);
			Если ПоддержкаНесколькихТаблиц Тогда
				НС.Таблица = ТекущаяТаблица;
			КонецЕсли;
		КонецЕсли;
		ДобавитьГруппировкиИзДерева(ЭлементДерева.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораТаблицыОтчета(РезультатВыбора,Копирование)  Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		Если ТаблицыОтчета.НайтиСтроки(Новый Структура("Таблица",РезультатВыбора)).Количество()>0 Тогда
			ПоказатьПредупреждение(,"Нельзя выбрать одну и ту же таблицу более одного раза");	
		Иначе
			НоваяСтрока = ТаблицыОтчета.Добавить();
			НоваяСтрока.Таблица = РезультатВыбора;
			Если Копирование = Истина Тогда
				ПеренестиНастройкиТаблицы(ТекущаяТаблица,РезультатВыбора,Истина);
			КонецЕсли;
			Элементы.ТаблицыОтчета.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			ТекущаяТаблица = РезультатВыбора;
			УстановитьОтборПоТаблицеОтчета();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция ВладельцыТаблиц(ВидОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	фин_НастройкиОтчетовПоБюджетам.Ссылка
		|ИЗ
		|	Справочник.фин_НастройкиОтчетовПоБюджетам КАК фин_НастройкиОтчетовПоБюджетам
		|ГДЕ
		|	фин_НастройкиОтчетовПоБюджетам.Владелец = &ВидОтчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	фин_ВидыОтчетовПоБюджетам.Ссылка
		|ИЗ
		|	Справочник.фин_ВидыОтчетовПоБюджетам КАК фин_ВидыОтчетовПоБюджетам
		|ГДЕ
		|	фин_ВидыОтчетовПоБюджетам.Ссылка = &ВидОтчета";
	
	Запрос.УстановитьПараметр("ВидОтчета", ВидОтчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Процедура СохранитьШаблонОтчетаНаСервере(РезультатВыбора,Персональная)
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ОбъектНастройки = РезультатВыбора.ПолучитьОбъект();
		Если Персональная = Истина Тогда
			ОбъектНастройки.ВидНастройки = Перечисления.фин_ВидыНастроекОтчета.ПерсональнаяНастройка;
		Иначе
			ОбъектНастройки.ВидНастройки = Перечисления.фин_ВидыНастроекОтчета.ШаблонДляОбщегоИспользования;
		КонецЕсли;
		ОбъектНастройки.ДополнительныеПараметрыОтчета.Очистить();
		ОбъектНастройки.Отбор.Очистить();
		ЗаполнитьЗначенияСвойств(ОбъектНастройки,ЭтотОбъект);
		МетаданныеОтчета = Справочники.фин_ВидыОтчетовПоБюджетам.МетаданныеОтчета(ВидОтчетаБюджетирования);
		МетаданныеНастроек = Метаданные.Справочники.фин_НастройкиОтчетовПоБюджетам;
		Если ПоддержкаНесколькихТаблиц Тогда
			Для Каждого СтрокаТаблиц Из ТаблицыОтчета Цикл
				Если ЗначениеЗаполнено(СтрокаТаблиц.Таблица) Тогда
					Если СтрокаТаблиц.Таблица.Владелец<>РезультатВыбора Тогда
						НоваяТаблица = Справочники.фин_ТаблицыОтчетовПоБюджетам.СоздатьЭлемент();
						ЗаполнитьЗначенияСвойств(НоваяТаблица,СтрокаТаблиц.Таблица,,"Код,Родитель");
						НоваяТаблица.Владелец = РезультатВыбора;
						НоваяТаблица.УстановитьНовыйКод();
						Попытка
							НоваяТаблица.Записать();
							ОбрабатываемыеТаблицыФормы = Новый Массив;
							ОбрабатываемыеТаблицыФормы.Добавить(Показатели);
							ОбрабатываемыеТаблицыФормы.Добавить(Группировки);
							ОбрабатываемыеТаблицыФормы.Добавить(ВидыАналитическихДанных);
							ОбрабатываемыеТаблицыФормы.Добавить(АналитическиеПоляСводаКорректировок);
							фин_УправлениеОтчетамиКлиентСервер.ПеренестиНастройкиТаблицыОтчета(ОбрабатываемыеТаблицыФормы,СтрокаТаблиц.Таблица,НоваяТаблица.Ссылка,Ложь);
							СтрокаТаблиц.Таблица = НоваяТаблица.Ссылка;
						Исключение
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось создать таблицу настроек: "+ОписаниеОшибки());
							Возврат;
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ИмяОтчета = "фин_ПечатьБюджета" Тогда
			ОбъектНастройки.Бюджет = ЭтотОбъект["ДокументПечатиБюджета_Бюджет"];
		КонецЕсли;
		Для Каждого Реквизит Из МетаданныеОтчета.Реквизиты Цикл
			Если МетаданныеНастроек.Реквизиты.Найти(Реквизит.Имя)<>Неопределено Тогда
				ОбъектНастройки[Реквизит.Имя] = ЭтотОбъект[Реквизит.Имя];
			Иначе
				НоваяСтрока = ОбъектНастройки.ДополнительныеПараметрыОтчета.Добавить();
				НоваяСтрока.Параметр = Реквизит.Имя;
				НоваяСтрока.Значение = ЭтотОбъект[Реквизит.Имя];
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТЧ Из МетаданныеОтчета.ТабличныеЧасти Цикл
			Если МетаданныеНастроек.ТабличныеЧасти.Найти(ТЧ.Имя)=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧ.Имя = "Группировки" Тогда
				АктивныеГруппировки = ЭтотОбъект[ТЧ.Имя].Выгрузить(Новый Структура("Отключить",Ложь));
				ОбъектНастройки[ТЧ.Имя].Очистить();
				Для Каждого АктивнаяГруппировка Из АктивныеГруппировки Цикл
					НС = ОбъектНастройки[ТЧ.Имя].Добавить();
					ЗаполнитьЗначенияСвойств(НС,АктивнаяГруппировка);
					Если ТЧ.Реквизиты.Найти("Цвет")<>Неопределено Тогда
						НС.Цвет = ЗначениеВСтрокуВнутр(АктивнаяГруппировка.Цвет);
					КонецЕсли;
					Если ТЧ.Реквизиты.Найти("Шрифт")<>Неопределено Тогда
						НС.Шрифт = ЗначениеВСтрокуВнутр(АктивнаяГруппировка.Шрифт);
					КонецЕсли;
					Если ТЧ.Реквизиты.Найти("Состав")<>Неопределено Тогда
						НС.Состав = ЗначениеВСтрокуВнутр(АктивнаяГруппировка.Состав);
					КонецЕсли;
					Если ТЧ.Реквизиты.Найти("Сортировка")<>Неопределено Тогда
						НС.Сортировка = ЗначениеВСтрокуВнутр(АктивнаяГруппировка.Сортировка);
					КонецЕсли;
				КонецЦикла;
			Иначе
				ОтключаемыеТаблицы = Новый Массив;
				ОтключаемыеТаблицы.Добавить("ТаблицыОтчета");
				ОбъектНастройки[ТЧ.Имя].Загрузить(?(ОтключаемыеТаблицы.Найти(ТЧ.Имя)<>Неопределено,ЭтотОбъект[ТЧ.Имя].Выгрузить(Новый Структура("Отключить",Ложь)),ЭтотОбъект[ТЧ.Имя].Выгрузить()));
			КонецЕсли;
		КонецЦикла;
		ОбъектНастройки.Отбор.Очистить();
		Для Каждого СтрокаОтбор Из Отбор Цикл
			НоваяСтрока = ОбъектНастройки.Отбор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаОтбор);
			Если ТипЗнч(СтрокаОтбор.Значение)=Тип("СписокЗначений") Тогда
				НоваяСтрока.ЗначениеСписок = ЗначениеВСтрокуВнутр(СтрокаОтбор.Значение);
			КонецЕсли;
		КонецЦикла;
		
		СохраняемыеНастройки = Новый Структура;
		
		Если Справочники.фин_ВидыОтчетовПоБюджетам.ДоступноИзменениеНастроекКомпоновщика(ВидОтчетаБюджетирования) Тогда
			СохраняемыеНастройки.Вставить("ПользовательскиеНастройки",	Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
			СохраняемыеНастройки.Вставить("ФиксированныеНастройки",		Отчет.КомпоновщикНастроек.ФиксированныеНастройки);
			СохраняемыеНастройки.Вставить("НастройкиКомпоновщика", 		Отчет.КомпоновщикНастроек.ПолучитьНастройки());
		КонецЕсли;
		Для Каждого ТЧ Из МетаданныеОтчета.ТабличныеЧасти Цикл
			Если Найти(ТЧ.Имя,"Удалить")=0 И МетаданныеНастроек.ТабличныеЧасти.Найти(ТЧ.Имя)=Неопределено Тогда
				Попытка
					СохраняемыеНастройки.Вставить(ТЧ.Имя,ЭтотОбъект[ТЧ.Имя].Выгрузить());
				Исключение
					
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		ОбъектНастройки.ХранилищеДополнительныхНастроек = Новый ХранилищеЗначения(?(СохраняемыеНастройки.Количество()=0,Неопределено,СохраняемыеНастройки));
		
		Попытка
			ОбъектНастройки.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось сохранить настройки:
			|	"+ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьШаблонОтчетаНаСервере(РезультатВыбора,ДополнительныеПараметры)
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		фин_УправлениеОтчетамиБюджетирование.ЗаполнитьОтчетНастройкойШаблона(РезультатВыбора,ЭтотОбъект,Отбор);
		ЗаполнитьСпискиПоказателейИГруппировок();
		фин_УправлениеОтчетамиКлиентСервер.УстановитьТекстПериода(НадписьПериодПланирования,ИмяОтчета,ВидДанных,Элементы,Периодичность,Сценарий,НачалоПериодаПланирования,КонецПериодаПланирования,Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиПоказателейИГруппировок()
	фин_УправлениеОтчетамиБюджетирование.ЗаполнитьСпискиПоказателейИГруппировокВФормеОтчета(ЭтотОбъект,ВидОтчетаБюджетирования,ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок()
	ЗаголовокТекст = Метаданные.Отчеты[ИмяОтчета].Синоним;
	АвтоЗаголовок = Ложь;
	Заголовок = ЗаголовокТекст;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьНастройкиПриОткрытииОтчета() Экспорт
	
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(ВидОтчетаБюджетирования) Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	фин_НастройкиОтчетовПоБюджетам.Ссылка,
			|	фин_НастройкиОтчетовПоБюджетам.Наименование,
			|	ВЫБОР КОГДА фин_НастройкиОтчетовПоБюджетам.Ссылка В(&РазрешенныеНастройкиДляЗаписи) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК Редактируемая,
			|	фин_НастройкиОтчетовПоБюджетам.ВидНастройки
			|ИЗ
			|	Справочник.фин_НастройкиОтчетовПоБюджетам КАК фин_НастройкиОтчетовПоБюджетам
			|ГДЕ
			|	фин_НастройкиОтчетовПоБюджетам.Владелец = &ВидОтчета
			|	И НЕ фин_НастройкиОтчетовПоБюджетам.ПометкаУдаления
			|	И фин_НастройкиОтчетовПоБюджетам.ОткрыватьПриЗапуске
			|	И фин_НастройкиОтчетовПоБюджетам.ВидНастройки = ЗНАЧЕНИЕ(Перечисление.фин_ВидыНастроекОтчета.ПерсональнаяНастройка)
			|	И фин_НастройкиОтчетовПоБюджетам.Ссылка В(&РазрешенныеНастройки)
			|	"+?(ИмяОтчета = "фин_ПечатьБюджета","И фин_НастройкиОтчетовПоБюджетам.Бюджет = &Бюджет","")+"
			//|УПОРЯДОЧИТЬ ПО фин_НастройкиОтчетовПоБюджетам.Наименование
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	фин_НастройкиОтчетовПоБюджетам.Ссылка,
			|	фин_НастройкиОтчетовПоБюджетам.Наименование,
			|	ВЫБОР КОГДА фин_НастройкиОтчетовПоБюджетам.Ссылка В(&РазрешенныеНастройкиДляЗаписи) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК Редактируемая,
			|	фин_НастройкиОтчетовПоБюджетам.ВидНастройки
			|ИЗ
			|	Справочник.фин_НастройкиОтчетовПоБюджетам КАК фин_НастройкиОтчетовПоБюджетам
			|ГДЕ
			|	фин_НастройкиОтчетовПоБюджетам.Владелец = &ВидОтчета
			|	И НЕ фин_НастройкиОтчетовПоБюджетам.ПометкаУдаления
			|	И фин_НастройкиОтчетовПоБюджетам.ОткрыватьПриЗапуске
			|	И фин_НастройкиОтчетовПоБюджетам.ВидНастройки = ЗНАЧЕНИЕ(Перечисление.фин_ВидыНастроекОтчета.ШаблонДляОбщегоИспользования)
			|	И фин_НастройкиОтчетовПоБюджетам.Ссылка В(&РазрешенныеНастройки)
			|	"+?(ИмяОтчета = "фин_ПечатьБюджета","И фин_НастройкиОтчетовПоБюджетам.Бюджет = &Бюджет","")+"
			|УПОРЯДОЧИТЬ ПО фин_НастройкиОтчетовПоБюджетам.Наименование";
		
		Запрос.УстановитьПараметр("Бюджет", ДокументПечатиБюджета_Бюджет);
		Запрос.УстановитьПараметр("ВидОтчета", ВидОтчетаБюджетирования);
		Запрос.УстановитьПараметр("РазрешенныеНастройки", фин_УправлениеОтчетамиБюджетирование.ДоступныеПользователюНастройки());
		Запрос.УстановитьПараметр("РазрешенныеНастройкиДляЗаписи", фин_УправлениеОтчетамиБюджетирование.ДоступныеПользователюНастройки(Истина));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Если ВыборкаДетальныеЗаписи.ВидНастройки = Перечисления.фин_ВидыНастроекОтчета.ПерсональнаяНастройка И ВыборкаДетальныеЗаписи.Редактируемая Тогда
				СохраненнаяНастройка = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;
			Параметры.СформироватьПриОткрытии = Истина;
			ЗагрузитьШаблонОтчетаНаСервере(ВыборкаДетальныеЗаписи.Ссылка,Неопределено);
		КонецЕсли;
	КонецЕсли;
	фин_УправлениеОтчетамиКлиентСервер.УстановитьТекстПериода(НадписьПериодПланирования,ИмяОтчета,ВидДанных,Элементы,Периодичность,Сценарий,НачалоПериодаПланирования,КонецПериодаПланирования,Ложь);
КонецФункции

&НаСервере
Процедура УстановитьОтборИПараметры(ОбъектОтчета=Неопределено) Экспорт
	Сохранять = Ложь;
	Если ОбъектОтчета=Неопределено Тогда
		Сохранять = Истина; 
		ОбъектОтчета = РеквизитФормыВЗначение("Отчет");
	КонецЕсли;
	МетаданныеОтчета = ОбъектОтчета.Метаданные();
	ПараметрОрганизация = МетаданныеОтчета.Реквизиты.Найти("Организация");
	Если фин_ОбщегоНазначенияВызовСервераПовтИсп.ЗначениеПеременной("фин_БюджетированиеПоОрганизациям") И ПараметрОрганизация<>Неопределено И НЕ ЗначениеЗаполнено(ОбъектОтчета["Организация"])  Тогда
		ЭтотОбъект["Организация"] 		= мОрганизацияПользователя;
	КонецЕсли;
	Попытка
		СтруктураПараметров = ОбъектОтчета.ЗаполнениеПараметров;
		Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
			мПараметр = МетаданныеОтчета.Реквизиты.Найти(ЭлементСтруктуры.Ключ);
			Если мПараметр<>Неопределено И НЕ ЗначениеЗаполнено(ЭтотОбъект[ЭлементСтруктуры.Ключ]) Тогда
				ЭтотОбъект[ЭлементСтруктуры.Ключ] 		= ЭлементСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	ОбновитьЗначенияПараметров();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияПараметров() Экспорт
	ОбъектОтчета = РеквизитФормыВЗначение("Отчет");
	МетаданныеОтчета = ОбъектОтчета.Метаданные();
	Для Каждого ПараметрОтчета Из МетаданныеОтчета.Реквизиты Цикл
		Имя 			= ПараметрОтчета.Имя;
		Если ИспользоватьНастройкуПериода И Имя="НачалоПериода" Тогда
			НастройкаПериода.ДатаНачала = ЭтотОбъект[Имя];
			Продолжить;
		КонецЕсли;
		Если ИспользоватьНастройкуПериода И Имя="КонецПериода" Тогда
			НастройкаПериода.ДатаОкончания = ЭтотОбъект[Имя];
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьСпискиПоказателейИГруппировок();
	Если Элементы.Сценарий.Видимость=Истина И ИмяОтчета<>"фин_ИсполнениеБюджета" Тогда
		Факт = (ВидДанных <> Перечисления.фин_ВидыДанныхОтчета.Плановые И ВидДанных<>Перечисления.фин_ВидыДанныхОтчета.ПустаяСсылка()) И Элементы.Сценарий.Видимость=Истина;
		Если Факт Тогда
			Элементы.Сценарий.Видимость = Ложь;
			Элементы.Периодичность.Видимость = Истина;
		Иначе
			Элементы.Сценарий.Видимость = Истина;
			Элементы.Периодичность.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	фин_УправлениеОтчетамиКлиентСервер.УстановитьТекстПериода(НадписьПериодПланирования,ИмяОтчета,ВидДанных,Элементы,Периодичность,Сценарий,НачалоПериодаПланирования,КонецПериодаПланирования,Ложь);
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПараметра(Имя,Значение)
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ПереченьОсновныхРеквизитов = ОтчетОбъект.ПереченьОсновныхРеквизитов;
	Если ПереченьОсновныхРеквизитов.Найти(Имя)<>Неопределено Тогда
		ЗаполнитьСпискиПоказателейИГруппировок();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ФормироватьОтчет()
	//Если ИспользованиеОрганизации И НЕ ЗначениеЗаполнено(ЭтотОбъект["Организация"]) Тогда
	//	Сообщить("Не указана организация!");
	//	Возврат;
	//КонецЕсли;
	мЭтотОбъект = РеквизитФормыВЗначение("Отчет");
	Результат.Очистить();
		РеквизитыФормы = Новый Массив;
		Для Каждого Реквизит Из ПолучитьРеквизиты() Цикл
			РеквизитыФормы.Добавить(Реквизит.Имя);
		КонецЦикла;
	Для Каждого Реквизит Из мЭтотОбъект.Метаданные().Реквизиты Цикл
		мЭтотОбъект[Реквизит.Имя]=ЭтотОбъект[Реквизит.Имя];
	КонецЦикла;
	Для Каждого ТЧ Из мЭтотОбъект.Метаданные().ТабличныеЧасти Цикл
		Если РеквизитыФормы.Найти(ТЧ.Имя)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТЧ.Имя = "Группировки" Тогда
			
			АктивныеГруппировки = ЭтотОбъект[ТЧ.Имя].Выгрузить(Новый Структура("Отключить",Ложь));
			мЭтотОбъект[ТЧ.Имя].Очистить();
			Для Каждого АктивнаяГруппировка Из АктивныеГруппировки Цикл
				НС = мЭтотОбъект[ТЧ.Имя].Добавить();
				ЗаполнитьЗначенияСвойств(НС,АктивнаяГруппировка);
				Если ТЧ.Реквизиты.Найти("Цвет")<>Неопределено Тогда
					НС.Цвет = ЗначениеВСтрокуВнутр(АктивнаяГруппировка.Цвет);
				КонецЕсли;
				Если ТЧ.Реквизиты.Найти("Шрифт")<>Неопределено Тогда
					НС.Шрифт = ЗначениеВСтрокуВнутр(АктивнаяГруппировка.Шрифт);
				КонецЕсли;
				Если ТЧ.Реквизиты.Найти("Состав")<>Неопределено Тогда
					НС.Состав = ЗначениеВСтрокуВнутр(АктивнаяГруппировка.Состав);
				КонецЕсли;
				Если ТЧ.Реквизиты.Найти("Сортировка")<>Неопределено Тогда
					НС.Сортировка = ЗначениеВСтрокуВнутр(АктивнаяГруппировка.Сортировка);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ОтключаемыеТаблицы = Новый Массив;
			ОтключаемыеТаблицы.Добавить("ТаблицыОтчета");
			мЭтотОбъект[ТЧ.Имя].Загрузить(?(ОтключаемыеТаблицы.Найти(ТЧ.Имя)<>Неопределено,ЭтотОбъект[ТЧ.Имя].Выгрузить(Новый Структура("Отключить",Ложь)),ЭтотОбъект[ТЧ.Имя].Выгрузить()));
		КонецЕсли;
		Если ТЧ.Имя = "Группировки" Тогда
			ГруппировкиТолькоИерархия = Группировки.Выгрузить(Новый Структура("ВидГруппировки",Перечисления.фин_ВидыГруппировокОтчета.ГруппировкаТолькоИерархия));
			ГруппировкиТолькоИерархия.Колонки.Добавить("КоличествоГрупп",Новый ОписаниеТипов("Число"));
			ГруппировкиТолькоИерархия.ЗаполнитьЗначения(1,"КоличествоГрупп");
			ГруппировкиТолькоИерархия.Свернуть("Таблица","КоличествоГрупп");
			Если ГруппировкиТолькоИерархия.Количество()<>ГруппировкиТолькоИерархия.НайтиСтроки(Новый Структура("КоличествоГрупп",1)).Количество() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отчет не сформирован! Нельзя выбрать больше одной группировки с видом ""Только иерархия""");
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если мЭтотОбъект.Метаданные().ТабличныеЧасти.Найти("ПараметрыДанныхОтчета")<>Неопределено Тогда
		мЭтотОбъект.ЗначенияПараметровОтчета = ПараметрыДанныхОтчета.Выгрузить();
	КонецЕсли;
	Если ИмяОтчета="фин_ИсполнениеБюджета" Тогда
		ДанныеДляАнализа.Очистить();
		НоваяСтрока = ДанныеДляАнализа.Добавить();
		НоваяСтрока.ДанныеДляСравнения 	= ЭтотОбъект["Сценарий"];
		НоваяСтрока.НачалоПериода 		= ЭтотОбъект["НачалоПериодаПланирования"];
		НоваяСтрока.ОкончаниеПериода 	= ЭтотОбъект["КонецПериодаПланирования"];
		
		НоваяСтрока = ДанныеДляАнализа.Добавить();
		НоваяСтрока.ДанныеДляСравнения 	= ЭтотОбъект["ВидДанных"];
		НоваяСтрока.НачалоПериода 		= ЭтотОбъект["НачалоПериодаПланирования"];
		НоваяСтрока.ОкончаниеПериода 	= ЭтотОбъект["КонецПериодаПланирования"];
		
	КонецЕсли;
	Попытка
		мЭтотОбъект.Скомпоновать(Результат,Отбор.Выгрузить(Новый Структура("Использование",Истина)));
		Адрес = ПоместитьВоВременноеХранилище(мЭтотОбъект.ДанныеРасшифровки,УникальныйИдентификатор);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отчет не сформирован:
		|	"+ОписаниеОшибки());
	КонецПопытки;
	УстановитьЗаголовок();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыгрузитьСписокВСтроку(Список, МаксЧислоСимволовНаЭлемент = 50, РазделительЭлементов = "; ", ВыгружатьПолныеНаименованияОрганизаций=Ложь, ПредставлениеПустойСсылки = "") Экспорт
	
	Результат = "";
	Для Каждого ЭлементСписка Из Список Цикл
		Если НЕ ВыгружатьПолныеНаименованияОрганизаций Тогда
			Если Не ПустаяСтрока(ЭлементСписка.Представление) Тогда
				ПредставлениеЭлемента = ЭлементСписка.Представление;
			Иначе
				ПредставлениеЭлемента = Строка(ЭлементСписка.Значение);
			КонецЕсли;
			ПредставлениеЭлемента = СокрЛП(ПредставлениеЭлемента);
			Если Не ПустаяСтрока(ПредставлениеЭлемента) Тогда
				
				Если МаксЧислоСимволовНаЭлемент > 0 И Список.Количество() > 1 Тогда
					Если СтрДлина(ПредставлениеЭлемента) > МаксЧислоСимволовНаЭлемент Тогда
						ПредставлениеЭлемента = Лев(ПредставлениеЭлемента, МаксЧислоСимволовНаЭлемент) + "...";
					КонецЕсли;
				КонецЕсли;
				
				Если Не ПустаяСтрока(Результат) Тогда
					Результат = Результат + РазделительЭлементов;
				КонецЕсли;
				
				Результат = Результат + ПредставлениеЭлемента;
				
			КонецЕсли;
		Иначе
			Попытка 
				ПредставлениеЭлемента = ЭлементСписка.Значение.НаименованиеПолное;
			Исключение
				ПредставлениеЭлемента = "";
			КонецПопытки;
			Если Не ПустаяСтрока(Результат) Тогда
				Результат = Результат + РазделительЭлементов;
			КонецЕсли;
			
			Результат = Результат + ПредставлениеЭлемента;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ВыгрузитьСписокВСтроку()

&НаСервере
Функция ПолучитьПредставлениеНастройкиДляИстории() Экспорт 
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	Представление = "";
	
		ОсновнаяЧастьПредставления = "";
		
		ИдентификаторОбъекта = "отчетОбъект."+ИмяОтчета;
		
		Префикс = "";
		
		ОсновнаяЧастьПредставления = Префикс + ПолучитьПредставлениеПериода(ОтчетОбъект) ;
		
		
		ПредставлениеГруппировка = "";
		ПредставлениеОтбора = Строка(ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор);
		ДополнительнаяЧастьПредставления = "";
		ДополнительнаяЧастьПредставления = ДополнительнаяЧастьПредставления + ?(Не ПустаяСтрока(ПредставлениеГруппировка), "; " + ПредставлениеГруппировка, ПредставлениеГруппировка);
		ДополнительнаяЧастьПредставления = ДополнительнаяЧастьПредставления + ?(Не ПустаяСтрока(ПредставлениеОтбора), "; " + ПредставлениеОтбора, ПредставлениеОтбора);
		
		Представление = СокрЛП(ОсновнаяЧастьПредставления + ДополнительнаяЧастьПредставления);
		
		
		Возврат Представление;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНастройку() Экспорт
	
	СохранитьНастройкуСервер();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкуСервер() Экспорт
	
	Если ЗначениеЗаполнено(ВидОтчетаБюджетирования) Тогда
		СохранитьШаблонОтчетаНаСервере(СохраненнаяНастройка,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Сохранять(СохраненнаяНастройка)
	Возврат ?(ЗначениеЗаполнено(СохраненнаяНастройка),СохраненнаяНастройка.СохранятьАвтоматически,Ложь);	
КонецФункции


&НаКлиенте
Процедура ПриИзмененииСценария()
	Периодичность = фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьПериодичностьСценария(Сценарий);
	НачалоПериодаПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(НачалоПериодаПланирования,Периодичность);
	фин_УправлениеОтчетамиКлиентСервер.УстановитьТекстПериода(НадписьПериодПланирования,ИмяОтчета,ВидДанных,Элементы,Периодичность,Сценарий,НачалоПериодаПланирования,КонецПериодаПланирования);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериодичности()
	НачалоПериодаПланирования = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(НачалоПериодаПланирования,Периодичность);
	фин_УправлениеОтчетамиКлиентСервер.УстановитьТекстПериода(НадписьПериодПланирования,ИмяОтчета,ВидДанных,Элементы,Периодичность,Сценарий,НачалоПериодаПланирования,КонецПериодаПланирования);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПоляОтбора(ИдентификаторСтроки)
	ОписаниеТипов 	= ПолучитьТипПоляОтбора(,ИдентификаторСтроки);
	ТекущаяСтрока 	= Отбор.НайтиПоИдентификатору(ИдентификаторСтроки);
	ТекущаяСтрока.Значение 	= ОписаниеТипов.ПривестиЗначение(ТекущаяСтрока.Значение);
КонецПроцедуры

&НаСервере
Функция ПолучитьТипПоляОтбора(ТипПоля = Неопределено,ИдентификаторСтроки)
	ТекущаяСтрока 	= Отбор.НайтиПоИдентификатору(ИдентификаторСтроки);
	ТипПоля 		= фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипЗначенияГруппировки(ТекущаяСтрока.ПолеОтбора);
	ОписаниеТипов 	= фин_УправлениеОтчетамиБюджетирование.ОписаниеТипаДляОтбора(ТипПоля,ТекущаяСтрока.ВидСравнения);
	Возврат ОписаниеТипов;
КонецФункции

&НаСервере
Функция ПолучитьТипПоляГруппы(Измерение)
	ТипПоля = фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипЗначенияГруппировки(Измерение);
	ОписаниеТипов = фин_УправлениеОтчетамиБюджетирование.ОписаниеТипаДляОтбора(ТипПоля);
	Возврат ОписаниеТипов;
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборСпискаОтбора(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора <>Неопределено Тогда
		СтрокаОтбора = Отбор.НайтиПоИдентификатору(ДополнительныеПараметры);
		СтрокаОтбора.Значение = РезультатВыбора;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция ПолучитьСценарийОтчетаНаСервере()
	Для Каждого СтрокаДанных Из ДанныеДляАнализа Цикл
		Если ЗначениеЗаполнено(СтрокаДанных.ДанныеДляСравнения) И ТипЗнч(СтрокаДанных.ДанныеДляСравнения)=фин_ОбщегоНазначенияВызовСервераПовтИсп.ТипСправочникСценариевПланирования() Тогда
			Возврат СтрокаДанных.ДанныеДляСравнения;
		КонецЕсли;
	КонецЦикла;
	Возврат фин_ОбщегоНазначенияВызовСервераПовтИсп.ПустаяСсылкаСценарий();
КонецФункции

&НаКлиенте
Функция ПолучитьСценарийОтчета()
	Для Каждого СтрокаДанных Из ДанныеДляАнализа Цикл
		Если ЗначениеЗаполнено(СтрокаДанных.ДанныеДляСравнения) И ТипЗнч(СтрокаДанных.ДанныеДляСравнения)=фин_ОбщегоНазначенияКлиентПовтИсп.ТипСправочникСценариевПланирования() Тогда
			Возврат СтрокаДанных.ДанныеДляСравнения;
		КонецЕсли;
	КонецЦикла;
	Возврат фин_ОбщегоНазначенияКлиентПовтИсп.ПустаяСсылкаСценарий();
КонецФункции

&НаКлиенте
Процедура ВыбратьПериодПланированияСтроки(Период,Элемент)
	Если Элементы.ДанныеДляАнализа.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбъектПериодичность = ?(ЗначениеЗаполнено(Элементы.ДанныеДляАнализа.ТекущиеДанные.ДанныеДляСравнения) И ТипЗнч(Элементы.ДанныеДляАнализа.ТекущиеДанные.ДанныеДляСравнения)=фин_ОбщегоНазначенияКлиентПовтИсп.ТипСправочникСценариевПланирования(),Элементы.ДанныеДляАнализа.ТекущиеДанные.ДанныеДляСравнения,ПолучитьСценарийОтчета());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияВыбораПериодаСтроки",ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.фин_ВыборБюджетногоПериода",Новый Структура("Бюджет,НачалоПериодаПланирования,КонецПериодаПланирования,Периодичность,РазрешитьПроизвольныйПериод",Бюджет,Элементы.ДанныеДляАнализа.ТекущиеДанные.НачалоПериода,Элементы.ДанныеДляАнализа.ТекущиеДанные.ОкончаниеПериода,ОбъектПериодичность,Истина),ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияВыбораПериодаСтроки(мРезультат,Элемент) Экспорт
	Если мРезультат<>Неопределено Тогда
		Элементы.ДанныеДляАнализа.ТекущиеДанные.НачалоПериода 		= мРезультат.НачалоПериода;
		Элементы.ДанныеДляАнализа.ТекущиеДанные.ОкончаниеПериода 	= мРезультат.КонецПериода;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодПланированияОтчета(Период,Элемент)
	Если ДанныеДляАнализа.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	ОбъектПериодичность	= ПолучитьСценарийОтчета();
	ОписаниеОповещения 	= Новый ОписаниеОповещения("ОбработчикОповещенияВыбораПериодаОтчета",ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.фин_ВыборБюджетногоПериода",Новый Структура("Бюджет,НачалоПериодаПланирования,КонецПериодаПланирования,Периодичность,РазрешитьПроизвольныйПериод",Бюджет,ДанныеДляАнализа[0].НачалоПериода,ДанныеДляАнализа[0].ОкончаниеПериода,ОбъектПериодичность,Истина),ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияВыбораПериодаОтчета(мРезультат,Элемент) Экспорт
	Если мРезультат<>Неопределено Тогда
		НастроитьПериодыВСтроках(мРезультат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПериодыВСтроках(Период)
	Для Каждого ТекущиеДанные Из ДанныеДляАнализа Цикл
		СценарийПериода = ?(ЗначениеЗаполнено(ТекущиеДанные.ДанныеДляСравнения) И ТипЗнч(ТекущиеДанные.ДанныеДляСравнения)=фин_ОбщегоНазначенияКлиентПовтИсп.ТипСправочникСценариевПланирования(),ТекущиеДанные.ДанныеДляСравнения,ПолучитьСценарийОтчета());
		ТекущиеДанные.НачалоПериода = ?(ЗначениеЗаполнено(СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СинхронизироватьПериодПланированияСоСценарием(Период.НачалоПериода,СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаНачалаПериода(Период.НачалоПериода,ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц")));
		ТекущиеДанные.ОкончаниеПериода = ?(ЗначениеЗаполнено(СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.СинхронизироватьКонецПериодаПланированияСоСценарием(Период.КонецПериода,СценарийПериода),фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(Период.КонецПериода,ПредопределенноеЗначение("Перечисление.фин_Периодичность.Месяц")));
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПоместитьПоказателиВХранилище()
	ДанныеОтчетаТаблица = ДанныеФормыВЗначение(ДанныеОтчета,Тип("ТаблицаЗначений"));
	ВходящиеПоказатели = ДанныеОтчетаТаблица.Скопировать(Новый Структура("Использование,ПоФормуле",Истина,Ложь),"Заголовок,ИдентификаторПоля");
	ВходящиеПоказатели.Колонки.ИдентификаторПоля.Имя = "Поле";
	ВходящиеПоказатели.Колонки.Заголовок.Имя = "Показатель";
	Возврат ПоместитьВоВременноеХранилище(ВходящиеПоказатели,УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Функция ПолучитьИдентификаторПоля()
	НомерПоля = ДанныеОтчета.Количество();
	Пока ДанныеОтчета.НайтиСтроки(Новый Структура("ИдентификаторПоля","ИД"+Строка(НомерПоля))).Количество()>0 Цикл
		НомерПоля = НомерПоля + 1;
	КонецЦикла;
	Возврат "ИД"+Строка(НомерПоля);
КонецФункции

&НаСервере
Функция СоответствиеТиповГруппировкам()
	Соответствие = Новый Соответствие;
	Для Каждого ПолеГруппа Из ДоступныеГруппировки Цикл
		Соответствие.Вставить(ПолеГруппа.Значение,ПолучитьТипПоляГруппы(ПолеГруппа.Значение));
	КонецЦикла;
	Возврат Соответствие;
КонецФункции

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = общ_ОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	общ_ОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициироватьРедактированиеГруппировки(ДанныеСтроки,ИдентификаторСтроки=Неопределено)
	СтруктураЗаполнения = Новый Структура("ДополнительныеПредставления,ВидГруппировки,Измерение,ОтборПоУровнюЗначимости,ПрименятьОформление,Расположение,РасположениеРеквизитов,Состав,СоставноеПоле,Сортировка,УровеньЗначимости,Цвет,Шрифт,ДоступныеГруппировки,ИмяОтчета,ИспользоватьВидГруппировки,ИспользоватьСоставноеПоле,ИспользоватьРасположение,ИспользоватьСортировку,ПоказателиДляСортировки");
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения,ДанныеСтроки);
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения,ЭтотОбъект);
	СтруктураЗаполнения.Вставить("СоответствиеТиповГруппировкам",Новый ФиксированноеСоответствие(СоответствиеТиповГруппировкам()));
	ОписаниеОповещенияРедактированияГруппировки = Новый ОписаниеОповещения("ОбработатьНастройкуГруппировки",ЭтотОбъект,ИдентификаторСтроки);
	ОткрытьФорму("ОбщаяФорма.фин_ФормаНастройкиГруппировкиОтчета",СтруктураЗаполнения,ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещенияРедактированияГруппировки);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНастройкуГруппировки(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия<>Неопределено Тогда
		СтрокаГруппировок = ?(ДополнительныеПараметры=Неопределено,фин_УправлениеОтчетамиКлиентСервер.ОпределитьСтрокуИерархииДляДобавленияГруппировки(ГруппировкиДерево,РезультатЗакрытия).ПолучитьЭлементы().Добавить(),ГруппировкиДерево.НайтиПоИдентификатору(ДополнительныеПараметры));
		ЗаполнитьЗначенияСвойств(СтрокаГруппировок,РезультатЗакрытия);
		СтрокаГруппировок.Представление = фин_УправлениеОтчетамиКлиентСервер.ПредставлениеГруппировкиОтчета(СтрокаГруппировок,ДополнительныеПредставления);
		//СтрокаГруппировок.Таблица = ТекущаяТаблица;
		Элементы.Группировки.Развернуть(СтрокаГруппировок.ПолучитьРодителя().ПолучитьИдентификатор(),Истина);
		ПерезаполнитьВнутренниеГруппировки();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаВыбораПериодаПланирования(РезультатВыбора,ДополнительныеПараметры) Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		НачалоПериодаПланирования = РезультатВыбора.НачалоПериода;
		КонецПериодаПланирования = РезультатВыбора.КонецПериода;
		фин_УправлениеОтчетамиКлиентСервер.УстановитьТекстПериода(НадписьПериодПланирования,ИмяОтчета,ВидДанных,Элементы,Периодичность,Сценарий,НачалоПериодаПланирования,КонецПериодаПланирования,Ложь);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти