
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ общ_ЗащитаКлиентСервер.ПроверитьЛицензию() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отчет не может быть открыт, т.к. система защиты не функционирует!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОбъектОтчета		= РеквизитФормыВЗначение("Отчет");
	МетаданныеОтчета 	= ОбъектОтчета.Метаданные();
	ИмяОтчета 			= МетаданныеОтчета.Имя;
	Попытка
		ИзменятьСтруктуруОтчета = ОбъектОтчета.ИзменятьСтруктуруОтчета;
	Исключение
		ИзменятьСтруктуруОтчета = Ложь;
	КонецПопытки;
	
	ИспользоватьСтандартныеНастройкиСтруктуры = Истина;
	Элементы.РазделыНастроек.Доступность = НЕ ИспользоватьСтандартныеНастройкиСтруктуры;
	
	Если ИзменятьСтруктуруОтчета Тогда
	
		ЗаполняемыеНастройки = Новый Структура("Показатели, Группировка, ДополнительныеПоля",
			Истина, Истина, Ложь);
		ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки);
		
	КонецЕсли;
	
	общ_ОтчетыВызовСервера.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Элементы.ПоказатьНастройки.Видимость 			= ИзменятьСтруктуруОтчета;
	Элементы.ПоказатьНастройкиВсеДействия.Видимость	= ИзменятьСтруктуруОтчета;
	
	ИспользованиеОрганизации = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы.Найти("Организация")<>Неопределено И ИмяОтчета<>"дог_ИсполнениеДоговоров";
	Элементы.ПредставлениеСпискаОрганизаций.Видимость = ИспользованиеОрганизации;
	МассивЭлементов = Новый Массив;
	П_НачалоПериода = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы.Найти("НачалоПериода");
	П_КонецПериода = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы.Найти("КонецПериода");
	Если П_НачалоПериода<>Неопределено И П_НачалоПериода.Видимость
			И П_КонецПериода<>Неопределено И П_КонецПериода.Видимость
			И Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода")<>Неопределено
			И Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода")<>Неопределено Тогда
		ИспользоватьНастройкуПериода=Истина;	
	КонецЕсли;
	Элементы.ПериодОтчета.Видимость=ИспользоватьНастройкуПериода;
	МассивПризнаковОтбора = Новый Массив;
	МассивПолейОтбора = Новый Массив;
	МассивГруппЭлементовОтбора = Новый Массив;
	Для Каждого ПараметрОтчета Из Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		ПараметрОтчета.Использование=Истина;
		Имя 		= ПараметрОтчета.Параметр;
		Параметр 	= Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы.Найти(ПараметрОтчета.Параметр);
		Если Строка(Имя) = "Период" Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ Параметр.Видимость Тогда
			Продолжить;
		КонецЕсли;
		Если ИспользоватьНастройкуПериода И (Строка(Имя)="НачалоПериода" ИЛИ Строка(Имя)="КонецПериода") Тогда
			Продолжить;
		КонецЕсли;
		Если Строка(Имя)="Сценарий" Тогда
			Продолжить;
		КонецЕсли;
		мЗаголовок 	= Параметр.Заголовок;
		Тип 		= ?(Параметр.ДоступенСписокЗначений,Новый ОписаниеТипов("СписокЗначений"),Параметр.ТипЗначения);
		НовыйРеквизит = Новый РеквизитФормы(Строка(Имя),Тип,,мЗаголовок);
		МассивЭлементов.Добавить(НовыйРеквизит);
		
		
		Если Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Отбор"+Строка(Имя))<>Неопределено Тогда
			МассивПолейОтбора.Добавить(Строка(Имя));
			МассивПризнаковОтбора.Добавить("Отбор"+Строка(Имя));
		КонецЕсли;
	КонецЦикла;
	мОрганизацияПользователя 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	мСтруктурноеПодразделение 	= фин_ОбщегоНазначенияВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию("ОсновноеСтруктурноеПодразделениеОрганизации");
	Если Параметры.Свойство("Организация") Тогда
		мОрганизацияПользователя = Параметры.Организация;
	КонецЕсли;
	Если Параметры.Свойство("СтруктурноеПодразделение") Тогда
		мСтруктурноеПодразделение = Параметры.СтруктурноеПодразделение;
	КонецЕсли;
	ИзменитьРеквизиты(МассивЭлементов);
	
	УстановитьОтборИПараметры();
	Для Каждого Параметр Из Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Если Параметры.Свойство(Строка(Параметр.Параметр)) Тогда
			Параметр.Значение = Параметры[Строка(Параметр.Параметр)];
			Параметр.Использование=Истина;
		КонецЕсли;
	КонецЦикла;
	ОбновитьЗначенияПараметров();
	Для Каждого ЭлементОтбора Из МассивПолейОтбора Цикл
		ПолеГруппыОтбора = Элементы.Добавить("ГруппаОтбор"+ЭлементОтбора,Тип("ГруппаФормы"),Элементы.ПараметрыОтчета);
		ПолеГруппыОтбора.Вид=ВидГруппыФормы.ОбычнаяГруппа;
		ПолеГруппыОтбора.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ПолеГруппыОтбора.ОтображатьЗаголовок = Ложь;
		ПолеГруппыОтбора.Отображение 	= ОтображениеОбычнойГруппы.Нет;
		МассивГруппЭлементовОтбора.Добавить(ПолеГруппыОтбора);
    КонецЦикла;
	Для Каждого ПараметрОтчета Из Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Имя 		= Строка(ПараметрОтчета.Параметр);
		Параметр 	= Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы.Найти(ПараметрОтчета.Параметр);
		Если НЕ Параметр.Видимость Тогда
			Продолжить;
		КонецЕсли;
		Если Имя = "Период" Тогда
			Элементы.Период.Видимость = Истина;
			СписокПараметровОтчетаДляФормирования.Добавить(Имя);
			Продолжить;	
		КонецЕсли;
		Если ИспользоватьНастройкуПериода И (Имя="НачалоПериода" ИЛИ Имя="КонецПериода") Тогда
			Продолжить;
		КонецЕсли;
		Если Строка(Имя)="Сценарий" Тогда
			Элементы.Сценарий.Видимость = Истина;
			СписокПараметровОтчетаДляФормирования.Добавить(Имя); 
			Продолжить;
		КонецЕсли;
		Если МассивПолейОтбора.Найти(Имя)<>Неопределено Тогда
			ЭлементПараметра = Элементы.Добавить(Имя,Тип("ПолеФормы"),МассивГруппЭлементовОтбора.Получить(МассивПолейОтбора.Найти(Имя)));
			ЭлементПараметра.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементПараметра.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Нет;
		ИначеЕсли МассивПризнаковОтбора.Найти(Имя)<>Неопределено Тогда
			ГруппаФормы = МассивГруппЭлементовОтбора.Получить(МассивПризнаковОтбора.Найти(Имя));
			Если ГруппаФормы.ПодчиненныеЭлементы.Количество()>0 Тогда
				ЭлементПараметра = Элементы.Вставить(Имя,Тип("ПолеФормы"),ГруппаФормы,ГруппаФормы.ПодчиненныеЭлементы[0]);
			Иначе
				ЭлементПараметра = Элементы.Добавить(Имя,Тип("ПолеФормы"),ГруппаФормы);
			КонецЕсли;
			ЭлементПараметра.Вид = ВидПоляФормы.ПолеФлажка;
			ЭлементПараметра.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Право;
		Иначе
			ЭлементПараметра = Элементы.Добавить(Имя,Тип("ПолеФормы"),Элементы.ПараметрыОтчета);
			ЭлементПараметра.Вид = ВидПоляФормы.ПолеВвода;
		КонецЕсли;
		Если Параметр.ДоступенСписокЗначений Тогда
			ЭлементПараметра.ОграничениеТипа = Параметр.ТипЗначения;
		КонецЕсли;
		
		ЭлементПараметра.ПутьКДанным = Имя;
		ЭлементПараметра.ТолькоПросмотр = ?((Имя="Пользователь" ИЛИ Имя="ОтборПользователь") И НЕ (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("усд_УправлениеСогласованиемИУтверждениемДокументов")),Истина,Ложь);
		ЭлементПараметра.УстановитьДействие("ПриИзменении","ПриИзмененииПараметра");
		СписокПараметровОтчетаДляФормирования.Добавить(Имя);
		Если Имя = "ДоговорКонтрагента" Тогда
			ЭлементПараметра.УстановитьДействие("НачалоВыбора","НачалоВыбораДоговорКонтрагента");
			ЕстьКонтрагентВОтчете = Ложь;
			Для Каждого РеквизитОтчета Из ПолучитьРеквизиты() Цикл
				Если РеквизитОтчета.Имя="Контрагент" Тогда
					ЕстьКонтрагентВОтчете = Истина;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Имя = "ПериодичностьОтчета" И ИмяОтчета = "дог_АнализЗадолженностиБУПоДоговоруВРазрезеПериодов" Тогда
			ЭлементПараметра.УстановитьДействие("НачалоВыбора","НачалоВыбораПериодичность");
			ЭлементПараметра.КнопкаВыбора = Истина;
			ЭлементПараметра.РедактированиеТекста = Ложь;
			Если ЭтотОбъект["ПериодичностьОтчета"]="" Тогда
				ЭтотОбъект["ПериодичностьОтчета"]="Месяц";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	НадписьПараметры 	= "Параметры";
	НадписьОтбор 		= "Отбор";
	НадписьРезультат 	= "Результат";
	НадписьСортировка	= "Сортировка";
	//Заполним представление структурных единиц
	Объект = РеквизитФормыВЗначение("Отчет");
	РаботаСОрганизациямиИСтруктурнымиПодразделениями = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы.Найти("Организация")<>Неопределено И Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы.Найти("СтруктурноеПодразделение")<>Неопределено;
	Если РаботаСОрганизациямиИСтруктурнымиПодразделениями Тогда
	//	СписокСтруктурныхЕдиниц = Объект.СписокСтруктурныхЕдиниц;
	//	СписокПодразделений = Объект.СписокПодразделений;
		Если Параметры.Свойство("НеВосстанавливатьНастройки") И Параметры.НеВосстанавливатьНастройки = Истина Тогда
			Если Параметры.Свойство("Организация") Тогда
				СписокСтруктурныхЕдиниц.Добавить(Параметры.Организация);
			КонецЕсли;
		ИначеЕсли СписокСтруктурныхЕдиниц.Количество()=0 И ЗначениеЗаполнено(мОрганизацияПользователя) Тогда
			СписокСтруктурныхЕдиниц.Добавить(мОрганизацияПользователя);
		КонецЕсли;
		Для Каждого ЗначениеСЗ Из СписокПодразделений Цикл
			Если ЗначениеСЗ.Значение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка() Тогда 
				ЗначениеСЗ.Представление = "Головное подразделение";
			КонецЕсли;				
		КонецЦикла;
		ПредставлениеСпискаОрганизаций = ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
		
		Для Каждого ЭлементСписка Из СписокПодразделений Цикл
			Если ЭлементСписка.Значение = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка") Тогда 
				ЭлементСписка.Представление = "Головное подразделение";
			КонецЕсли;				
		КонецЦикла;
		
		ПредставлениеСпискаПодразделений = ВыгрузитьСписокВСтроку(СписокПодразделений);
	ИначеЕсли ИспользованиеОрганизации Тогда	
		Если Параметры.Свойство("НеВосстанавливатьНастройки") И Параметры.НеВосстанавливатьНастройки = Истина Тогда
			Если Параметры.Свойство("Организация") Тогда
				СписокСтруктурныхЕдиниц.Добавить(Параметры.Организация);
			КонецЕсли;
		ИначеЕсли СписокСтруктурныхЕдиниц.Количество()=0 И ЗначениеЗаполнено(мОрганизацияПользователя) Тогда
			СписокСтруктурныхЕдиниц.Добавить(мОрганизацияПользователя);
		КонецЕсли;
		ПредставлениеСпискаОрганизаций = ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	КонецЕсли;
	Если Параметры.Свойство("Отбор") Тогда
		Отбор = Параметры.Отбор;
		Если ТипЗнч(Отбор) = Тип("Структура") Тогда
			Для Каждого ЭлементОтбор Из Отбор  Цикл
				НайденОтбор = Ложь;
				Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
					Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
						Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЭлементОтбор.Ключ) Тогда
							НайденОтбор = Истина;
							ЭлементОтбора.ПравоеЗначение = ЭлементОтбор.Значение;			
							ЭлементОтбора.Использование = Истина;
							ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если НайденОтбор = Ложь Тогда
					НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЭлементОтбор.Ключ);
					НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					НовыйОтбор.ПравоеЗначение = ЭлементОтбор.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если Параметры.СформироватьПриОткрытии=Истина Тогда
		СформироватьОтчетНаСервере();
	КонецЕсли;
	//Если СписокСтруктурныхЕдиниц.Количество()>0 Тогда
	//	ВыборПоВладельцу = СписокСтруктурныхЕдиниц[0].Значение;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	КлючУникальности = ИмяОтчета;
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	ПодключитьОбработчикОжидания = Не ИБФайловая И ЗначениеЗаполнено(ИдентификаторЗадания);
	Если ПодключитьОбработчикОжидания Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		фин_УправлениеОтчетамиКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	общ_ОтчетыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
	ПредставлениеСпискаОрганизаций = ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	
	Для Каждого ЭлементСписка Из СписокПодразделений Цикл
		Если ЭлементСписка.Значение = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка") Тогда 
			ЭлементСписка.Представление = "Головное подразделение";
		КонецЕсли;				
	КонецЦикла;
	
	ПредставлениеСпискаПодразделений = ВыгрузитьСписокВСтроку(СписокПодразделений);
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	общ_ОтчетыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтменитьВыполнениеЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	ОбновитьЗначенияПараметров();
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		ОбновитьЗначенияПараметров();
		УстановитьОтборИПараметры();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойВариантаНаСервере(Настройки)
	Если Параметры.НеВосстанавливатьНастройки Тогда
		Настройки = Отчет.КомпоновщикНастроек.ФиксированныеНастройки;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	НаименованиеТекущегоВарианта = ПредставлениеТекущегоВарианта;
	Если не ЗначениеЗаполнено(Настройки) И НЕ Параметры.НеВосстанавливатьНастройки Тогда
		ОбновитьЗначенияПараметров();
		УстановитьОтборИПараметры();
	КонецЕсли;
	Если Параметры.НеВосстанавливатьНастройки Тогда
		Для Каждого ПараметрОтчета Из Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
			Имя 			= Строка(ПараметрОтчета.Параметр);
			Параметр 	= Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы.Найти(ПараметрОтчета.Параметр);
			Если НЕ Параметр.Видимость Тогда
				Продолжить;
			КонецЕсли;
			Если ИспользоватьНастройкуПериода И (Имя="НачалоПериода" ИЛИ Имя="КонецПериода") Тогда
				Если Имя="НачалоПериода" Тогда
					ПараметрОтчета.Значение = НастройкаПериода.ДатаНачала;
				Иначе
					ПараметрОтчета.Значение = НастройкаПериода.ДатаОкончания;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ПараметрОтчета.Значение = ЭтотОбъект[Имя];
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	СохраняемыеРеквизитыФормы = СписокПараметровОтчетаДляФормирования.ВыгрузитьЗначения();
	СохраняемыеРеквизитыФормы.Добавить("ОтображатьОтборИСортировку");
	СохраняемыеРеквизитыФормы.Добавить("ИспользоватьСтандартныеНастройкиСтруктуры");
	СохраняемыеРеквизитыФормы.Добавить("ИспользоватьНастройкуПериода");
	
	СохраняемыеТаблицыФормы = Новый Массив;
	СохраняемыеТаблицыФормы.Добавить("ГруппировкиОтчета");
	СохраняемыеТаблицыФормы.Добавить("Показатели");
	
	общ_ОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки,?(ИзменятьСтруктуруОтчета,СохраняемыеТаблицыФормы,Неопределено),СохраняемыеРеквизитыФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	СохраняемыеРеквизитыФормы = СписокПараметровОтчетаДляФормирования.ВыгрузитьЗначения();
	СохраняемыеРеквизитыФормы.Добавить("ОтображатьОтборИСортировку");
	СохраняемыеРеквизитыФормы.Добавить("ИспользоватьСтандартныеНастройкиСтруктуры");
	СохраняемыеРеквизитыФормы.Добавить("ИспользоватьНастройкуПериода");
	
	СохраняемыеТаблицыФормы = Новый Массив;
	СохраняемыеТаблицыФормы.Добавить("ГруппировкиОтчета");
	СохраняемыеТаблицыФормы.Добавить("Показатели");
	
	ЗагруженыИндивидуальныеНастройки = Ложь;
	
	общ_ОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки,СохраняемыеТаблицыФормы,СохраняемыеРеквизитыФормы,ЗагруженыИндивидуальныеНастройки);
	Если ИзменятьСтруктуруОтчета Тогда
		
		общ_ОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки,СохраняемыеТаблицыФормы,СохраняемыеРеквизитыФормы,ЗагруженыИндивидуальныеНастройки);
		
		//ИспользоватьСтандартныеНастройкиСтруктуры = НЕ ЗагруженыИндивидуальныеНастройки;
		Элементы.РазделыНастроек.Доступность = НЕ ИспользоватьСтандартныеНастройкиСтруктуры;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		фин_УправлениеОтчетамиКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Настройки) Тогда
		ОбновитьЗначенияПараметров();
		УстановитьОтборИПараметры();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НастройкаПериодаДатаНачалаПриИзменении(Элемент)
	ПараметрДата = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода");
	Если ПараметрДата<>Неопределено  Тогда
		ПараметрДата.Значение 		= НастройкаПериода.ДатаНачала;
		ПараметрДата.Использование 	= Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		фин_УправлениеОтчетамиКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаДатаОкончанияПриИзменении(Элемент)
	ПараметрДата = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода");
	Если ПараметрДата<>Неопределено  Тогда
		ПараметрДата.Значение 		= НастройкаПериода.ДатаОкончания;
		ПараметрДата.Использование 	= Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		фин_УправлениеОтчетамиКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаВариантПриИзменении(Элемент)
	ПараметрДата = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода");
	Если ПараметрДата<>Неопределено  Тогда
		ПараметрДата.Значение 		= НастройкаПериода.ДатаНачала;
		ПараметрДата.Использование 	= Истина;
	КонецЕсли;
	ПараметрДата = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода");
	Если ПараметрДата<>Неопределено  Тогда
		ПараметрДата.Значение 		= НастройкаПериода.ДатаОкончания;
		ПараметрДата.Использование 	= Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	Период = КонецДня(Период);
	ПриИзмененииПараметра(Элементы.Период);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСпискаОрганизацийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СписокСтруктурныхЕдиниц"              , СписокСтруктурныхЕдиниц);
	ДополнительныеПараметры.Вставить("СписокПодразделений"                  , СписокПодразделений);
	ДополнительныеПараметры.Вставить("СписокВладельцевГоловныхПодразделений", СписокВладельцевГоловныхПодразделений);
	ДополнительныеПараметры.Вставить("ВыборСтруктурныхПодразделений"        , ПоддержкаРаботыСоСтруктурнымиПодразделениями); 
	
	общ_ОтчетыКлиент.ПредставлениеСпискаОрганизацийНачалоВыбора(ЭтотОбъект, СтандартнаяОбработка, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСпискаОрганизацийОчистка(Элемент, СтандартнаяОбработка)
	
	Если Не УчетПоВсемОрганизациям Тогда
		СтандартнаяОбработка = Ложь;
	Иначе 
		СписокПодразделений.Очистить();
		СписокСтруктурныхЕдиниц.Очистить();
		СписокВладельцевГоловныхПодразделений.Очистить();
		
		//Отчет.ПредставлениеСпискаОрганизаций   = "";
		//Отчет.ПредставлениеСпискаПодразделений = "";
		
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ ТАБЛИЧНОГО ДОКУМЕНТА

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РезультатОбработки = ОбработатьРасшифровку(Расшифровка);
	Если РезультатОбработки = Неопределено Тогда
		Возврат;
	ИначеЕсли РезультатОбработки.Действие = "ОткрытьЗначение" Тогда
		ПоказатьЗначение(,РезультатОбработки.Параметр);
	ИначеЕсли РезультатОбработки.Действие = "ВыбратьРасшифровку" Тогда
		ОбратчикВыборРасшифровки = Новый ОписаниеОповещения("ОбрататьВыборРасшифровки",ЭтотОбъект,Расшифровка);
		ПоказатьВыборИзСписка(ОбратчикВыборРасшифровки,РезультатОбработки.Параметр);
	Иначе
		ОткрытьФорму(РезультатОбработки.Действие,РезультатОбработки.Параметр,ЭтотОбъект,УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ГРУППИРОВКА

&НаКлиенте
Процедура ГруппировкаПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		фин_УправлениеОтчетамиКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	общ_ОтчетыКлиент.ГруппировкаПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);  
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломИзменения(Элемент, Отказ)
	
	общ_ОтчетыКлиент.ГруппировкаПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	Если ИспользоватьНастройкуПериода И НастройкаПериода.ДатаНачала>НастройкаПериода.ДатаОкончания Тогда
		ПоказатьПредупреждение(,"Дата начала отчетного периода не может быть больше даты его окончания!");
	Иначе
	
		ОчиститьСообщения();
		
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
		
		Попытка
			РезультатВыполнения = СформироватьОтчетНаСервере();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ПоказатьПредупреждение(,"Отчет не сформирован из-за возникшей ошибки!");
			Возврат;
		КонецПопытки;
		Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			фин_УправлениеОтчетамиКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из ГруппировкиОтчета Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		фин_УправлениеОтчетамиКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из ГруппировкиОтчета Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		фин_УправлениеОтчетамиКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Показатели Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		фин_УправлениеОтчетамиКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Показатели Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		фин_УправлениеОтчетамиКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбрататьВыборРасшифровки(РезультатВыбора,Расшифровка) Экспорт
	Если РезультатВыбора<>Неопределено Тогда
		РезультатОбработки = ОбработатьРасшифровку(Расшифровка,РезультатВыбора.Значение);
		Если РезультатОбработки<>Неопределено Тогда
			ОткрытьФорму(РезультатОбработки.Действие,РезультатОбработки.Параметр,ЭтотОбъект,УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("Показатели");
	СписокПолей.Добавить("Период");
	
	Если Режим = "Выбор" ИЛИ Режим = "Группировка" ИЛИ Режим = "Отбор" Тогда
		Для Каждого ИмяПоказателя Из НаборПоказателей Цикл
			СписокПолей.Добавить(ИмяПоказателя);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаСервере
Функция ОбработатьРасшифровку(Расшифровка, ВариантРасшифровки = Неопределено)
	
	Если ИмяОтчета = "усд_ЛистСогласования" Тогда
		Возврат Новый Структура("Действие, Параметр", "ОткрытьЗначение", Расшифровка);
	КонецЕсли;
	
	ДанныеДляОбработки = ПолучитьИзВременногоХранилища(ДанныеРасшифровки).ДанныеРасшифровки;
	ИнформацияДляРасшифровки = ДанныеДляОбработки.Элементы.Получить(Расшифровка);
	Если ИнформацияДляРасшифровки <> Неопределено Тогда
		ДействиеРасшифровки = СокрЛП(Строка(ИнформацияДляРасшифровки.ОсновноеДействие));
		Данные = ИнформацияДляРасшифровки.ПолучитьПоля();
		Если ДействиеРасшифровки= "Нет" Тогда
			Возврат Неопределено;
		ИначеЕсли ДействиеРасшифровки = "Открыть значение" Тогда
			Возврат Новый Структура("Действие,Параметр","ОткрытьЗначение",Данные[0].Значение);
		ИначеЕсли ДействиеРасшифровки = "Расшифровать" Тогда
			Если ИмяОтчета = "дог_АнализЗадолженностиБУПоДоговору" 
				ИЛИ ИмяОтчета = "дог_АнализЗадолженностиБУПоДоговоруВРазрезеПериодов"
				ИЛИ ИмяОтчета = "дог_ОстаткиЗадолженностиБУПоДоговору" Тогда
				ТаблицаОтбора = Новый ТаблицаЗначений;
				ТаблицаОтбора.Колонки.Добавить("Поле");
				ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
				ТаблицаОтбора.Колонки.Добавить("Значение");
				ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
				ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ИнформацияДляРасшифровки,ДанныеДляОбработки);
				Если ТаблицаОтбора.Количество()=0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				ИмяПоляРасшифровки = ИнформацияДляРасшифровки.ПолучитьПоля()[0].Поле;
				ВидОбязательства = Неопределено;
				ГруппаОбязательств = Неопределено;
				СрокЗадолженности = Неопределено;
				Счет = Неопределено;
				СтрокиПеременной = ТаблицаОтбора.НайтиСтроки(Новый Структура("Поле","ВидОбязательства"));
				Если СтрокиПеременной.Количество()>0 Тогда
					ВидОбязательства = СтрокиПеременной[0].Значение;
				КонецЕсли;
				СтрокиПеременной = ТаблицаОтбора.НайтиСтроки(Новый Структура("Поле","ГруппаОбязательств"));
				Если СтрокиПеременной.Количество()>0 Тогда
					ГруппаОбязательств = СтрокиПеременной[0].Значение;
				КонецЕсли;
				СтрокиПеременной = ТаблицаОтбора.НайтиСтроки(Новый Структура("Поле","СрокЗадолженности"));
				Если СтрокиПеременной.Количество()>0 Тогда
					СрокЗадолженности = СтрокиПеременной[0].Значение;
				КонецЕсли;
				СтрокиПеременной = ТаблицаОтбора.НайтиСтроки(Новый Структура("Поле","Счет"));
				Если СтрокиПеременной.Количество()>0 Тогда
					Счет = СтрокиПеременной[0].Значение;
				КонецЕсли;
				ПериодРасшифровкиНачало = НастройкаПериода.ДатаНачала;
				ПериодРасшифровкиКонец = НастройкаПериода.ДатаОкончания;
				Если ИмяОтчета = "дог_АнализЗадолженностиБУПоДоговоруВРазрезеПериодов" Тогда
					СтрокиПеременной = ТаблицаОтбора.НайтиСтроки(Новый Структура("Поле","ПериодичностьОтчета"));
					Если СтрокиПеременной.Количество()>0 Тогда
						ПериодРасшифровкиНачало = СтрокиПеременной[0].Значение;
						//ПериодРасшифровкиКонец = фин_ПроцедурыМеханизмовБюджетированияКлиентСервер.ДатаКонцаПериода(ПериодРасшифровкиНачало,Перечисления.фин_Периодичность[ЭтотОбъект["Период"]]);
					КонецЕсли;
				ИначеЕсли ИмяОтчета = "дог_ОстаткиЗадолженностиБУПоДоговору" Тогда
					ПериодРасшифровкиКонец = ЭтотОбъект["ДатаОтчета"];
				КонецЕсли;
				//ТекстРасшифровки = дог_УправлениеДоговорами.ПолучитьРасшифровкуДляОтчетаПоЗадолженности(ИмяОтчета,ЭтотОбъект["Организация"],ЭтотОбъект["Контрагент"],ЭтотОбъект["ДоговорКонтрагента"],ИмяПоляРасшифровки,ВидОбязательства,ГруппаОбязательств,СрокЗадолженности,ПериодРасшифровкиНачало,ПериодРасшифровкиКонец,Счет);
				//Если ТекстРасшифровки<>"" Тогда
				//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстРасшифровки,ЭтотОбъект);
				//КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Форма.Элементы.ПредставлениеСпискаПодразделений.Видимость = Форма.СписокПодразделений.Количество() > 0;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ОтменитьВыполнениеЗадания()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = общ_ОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки) Экспорт
	
	// Управление показателями
	Если ЗаполняемыеНастройки.Свойство("Показатели") И ЗаполняемыеНастройки.Показатели Тогда
		
		СписокПоказателей = общ_ОтчетыВызовСервера.ПолучитьСписокПоказателейОтчета(ИмяОтчета);
		
		Показатели.Очистить();
		Для Каждого Показатель Из СписокПоказателей Цикл
			НоваяСтрока 				= Показатели.Добавить();
			НоваяСтрока.Использование 	= Истина;
			НоваяСтрока.Поле 			= Показатель.Значение;
			НоваяСтрока.Представление 	= Показатель.Представление;
		КонецЦикла;
		
	КонецЕсли;
	
	// Группировки
	Если ЗаполняемыеНастройки.Свойство("Группировка") И ЗаполняемыеНастройки.Группировка Тогда
		
		ГруппировкиОтчета.Очистить();
		
		Если УчетПоВсемОрганизациям Тогда
			Если ИспользованиеОрганизации Тогда
				НоваяСтрока = ГруппировкиОтчета.Добавить();
				НоваяСтрока.Поле           = "Организация";
				НоваяСтрока.Использование  = Истина;
				НоваяСтрока.Представление  = НСтр("ru = 'Организация'");
				НоваяСтрока.ТипГруппировки = Перечисления.общ_ТипДетализацииСтандартныхОтчетов.Элементы;
				
				Если РаботаСОрганизациямиИСтруктурнымиПодразделениями Тогда
					НоваяСтрока = ГруппировкиОтчета.Добавить();
					НоваяСтрока.Поле           = "СтруктурноеПодразделение";
					НоваяСтрока.Использование  = Истина;
					НоваяСтрока.Представление  = НСтр("ru = 'Структурное подразделение'");
					НоваяСтрока.ТипГруппировки = Перечисления.общ_ТипДетализацииСтандартныхОтчетов.Элементы;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		СписокГруппировок = общ_ОтчетыВызовСервера.ПолучитьСписокГруппировокОтчета(ИмяОтчета);
		
		Для Каждого ГруппировкаДанных Из СписокГруппировок Цикл
			НоваяСтрока 				= ГруппировкиОтчета.Добавить();
			НоваяСтрока.Использование 	= Истина;
			НоваяСтрока.Поле 			= ГруппировкаДанных.Значение;
			НоваяСтрока.Представление 	= ГруппировкаДанных.Представление;
			НоваяСтрока.ТипГруппировки	= Перечисления.общ_ТипДетализацииСтандартныхОтчетов.Элементы;
		КонецЦикла;
		
		
	КонецЕсли;
	
	// Обработка дополнительных полей
	//БухгалтерскиеОтчетыКлиентСервер.ЗаполнитьДополнительныеПоляПоУмолчанию(Отчет);
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнениеНастроек() Тогда
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = фин_ОбщегоНазначенияСервер.ИнформационнаяБазаФайловая();
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	фин_УправлениеОтчетамиКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		общ_ОтчетыВызовСервера.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"общ_ОтчетыВызовСервера.СформироватьОтчет",
			ПараметрыОтчета,
			общ_ОтчетыВызовСервера.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	Если ИспользоватьНастройкуПериода Тогда
		ПараметрыОтчета.Вставить("НачалоПериода"                         , НастройкаПериода.ДатаНачала);
		ПараметрыОтчета.Вставить("КонецПериода"                          , НастройкаПериода.ДатаОкончания);
	КонецЕсли;
	Если СписокПараметровОтчетаДляФормирования.НайтиПоЗначению("Период") <> Неопределено Тогда
		ПараметрыОтчета.Вставить("Период"                          		 , Период);
	КонецЕсли;
	Если СписокПараметровОтчетаДляФормирования.НайтиПоЗначению("Сценарий") <> Неопределено Тогда
		ПараметрыОтчета.Вставить("Сценарий"                        		 , Сценарий);
	КонецЕсли;
//	ПараметрыОтчета.Вставить("РазмещениеДополнительныхПолей"         , Отчет.РазмещениеДополнительныхПолей);
	Если ИзменятьСтруктуруОтчета И НЕ ИспользоватьСтандартныеНастройкиСтруктуры Тогда
		ПараметрыОтчета.Вставить("Группировка"                       , ГруппировкиОтчета.Выгрузить());
		ПараметрыОтчета.Вставить("Показатели"                    	 , Показатели.Выгрузить());
	КонецЕсли;
	ПараметрыОтчета.Вставить("РежимРасшифровки"                      , Ложь);
	ПараметрыОтчета.Вставить("СписокСтруктурныхЕдиниц"               , СписокСтруктурныхЕдиниц);
	ПараметрыОтчета.Вставить("СписокПодразделений"                   , СписокПодразделений);
	ПараметрыОтчета.Вставить("СписокВладельцевГоловныхПодразделений" , СписокВладельцевГоловныхПодразделений);
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок"                     , ВыводитьЗаголовок);
	ПараметрыОтчета.Вставить("ВыводитьПодписи"                       , ВыводитьПодписи);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"                     , ДанныеРасшифровки);
	ПараметрыОтчета.Вставить("МакетОформления"                       , МакетОформления);	
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных"                 , ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных));
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"                   , ИмяОтчета);
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных"             , Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	СтруктураПараметровОтчетаДляФормирования = Новый Структура;
	Для Каждого ЭлементПараметров Из СписокПараметровОтчетаДляФормирования Цикл
		СтруктураПараметровОтчетаДляФормирования.Вставить(ЭлементПараметров.Значение,?(общ_ОтчетыВызовСервера.ЕстьРеквизитФормы(ЭтотОбъект,ЭлементПараметров.Значение),ЭтотОбъект[ЭлементПараметров.Значение],Отчет[ЭлементПараметров.Значение]));
	КонецЦикла;
	ПараметрыОтчета.Вставить("СтруктураПараметровОтчетаДляФормирования"          , СтруктураПараметровОтчетаДляФормирования);	
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат           = РезультатВыполнения.Результат;
	ДанныеРасшифровки   = РезультатВыполнения.ДанныеРасшифровки;
	
	ИдентификаторЗадания = Неопределено;
	
	фин_УправлениеОтчетамиКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(РезультатВыбора, ДопПараметры) Экспорт
	
	ПослеВыбораСтруктурногоПодразделенияКлиент(ЭтотОбъект, РезультатВыбора);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		фин_УправлениеОтчетамиКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделенияКлиент(Форма, РезультатВыбора) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		Форма.СписокСтруктурныхЕдиниц = РезультатВыбора.СписокСтруктурныхЕдиниц;
		Форма.ПредставлениеСпискаОрганизаций = ВыгрузитьСписокВСтроку(Форма.СписокСтруктурныхЕдиниц);
		общ_ОтчетыКлиент.ОрганизацияПриИзменении(Форма, Форма.ПредставлениеСпискаОрганизаций);
		
		Если РаботаСОрганизациямиИСтруктурнымиПодразделениями Тогда
			Форма.СписокПодразделений = РезультатВыбора.СписокПодразделений;
			Форма.СписокВладельцевГоловныхПодразделений = РезультатВыбора.СписокВладельцевГоловныхПодразделений;
			
			Форма.ПредставлениеСпискаПодразделений = ВыгрузитьСписокВСтроку(Форма.СписокПодразделений);
			общ_ОтчетыКлиент.ПодразделениеПриИзменении(Форма, Форма.ПредставлениеСпискаПодразделений);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	общ_ОтчетыКлиент.ГруппировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	общ_ОтчетыКлиент.ГруппировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеНастроек()
	Отказ = Ложь;
	Если ИспользоватьНастройкуПериода И ЗначениеЗаполнено(НастройкаПериода.ДатаНачала) И НастройкаПериода.ДатаНачала > НастройкаПериода.ДатаОкончания Тогда
		ТекстСообщения = НСтр("ru = 'Дата начала периода не может быть больше даты конца периода'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НастройкаПериода.ДатаНачала",, Отказ);
	КонецЕсли;
	Если ИспользованиеОрганизации Тогда
		
		Если НЕ ЗначениеЗаполнено(ПредставлениеСпискаОрганизаций) Тогда
			ТекстСообщения = НСтр("ru = 'Не указана организация.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ПредставлениеСпискаОрганизаций",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	Возврат НЕ Отказ;	
КонецФункции


&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	общ_ОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 

			ЗагрузитьПодготовленныеДанные();
			фин_УправлениеОтчетамиКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		фин_УправлениеОтчетамиКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры


&НаСервере
Процедура УстановитьОтборИПараметры()
	Попытка
		СтруктураПараметров = РеквизитФормыВЗначение("Отчет").ЗаполнениеПараметров;
		Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
			мПараметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ЭлементСтруктуры.Ключ);
			Если мПараметр<>Неопределено И НЕ ЗначениеЗаполнено(мПараметр.Значение) Тогда
				мПараметр.Значение 		= ЭлементСтруктуры.Значение;
				мПараметр.Использование	= Истина;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	ОбновитьЗначенияПараметров();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияПараметров()
	Для Каждого ПараметрОтчета Из Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Имя 			= Строка(ПараметрОтчета.Параметр);
		Параметр 	= Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы.Найти(ПараметрОтчета.Параметр);
		Если НЕ Параметр.Видимость Тогда
			Продолжить;
		КонецЕсли;
		Если ИспользоватьНастройкуПериода И Имя="НачалоПериода" Тогда
			НастройкаПериода.ДатаНачала = ?(ТипЗнч(ПараметрОтчета.Значение)=Тип("СтандартнаяДатаНачала"),ПараметрОтчета.Значение.Дата,ПараметрОтчета.Значение);
			Продолжить;
		КонецЕсли;
		Если ИспользоватьНастройкуПериода И Имя="КонецПериода" Тогда
			НастройкаПериода.ДатаОкончания = ?(ТипЗнч(ПараметрОтчета.Значение)=Тип("СтандартнаяДатаНачала"),ПараметрОтчета.Значение.Дата,ПараметрОтчета.Значение);
			Продолжить;
		КонецЕсли;
		ЭтотОбъект[Имя] 	= ПараметрОтчета.Значение;
		Если ЭтотОбъект[Имя]<>ПараметрОтчета.Значение И ТипЗнч(ПараметрОтчета.Значение)=Тип("СтандартнаяДатаНачала") Тогда
			ЭтотОбъект[Имя] = ПараметрОтчета.Значение.Дата;
		КонецЕсли;
	КонецЦикла;
	//УстановитьТекстПериода();
КонецПроцедуры
                                                                                       
&НаКлиенте
Процедура ПриИзмененииПараметра(Элемент)
	УстановитьЗначениеПараметра(Элемент.Имя,ЭтотОбъект[Элемент.Имя]);
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		фин_УправлениеОтчетамиКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораПериодичность(Элемент,ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Список = Новый СписокЗначений;
	Список.Добавить("День");
	Список.Добавить("Неделя");
	Список.Добавить("Декада");
	Список.Добавить("Месяц");
	Список.Добавить("Квартал");
	Список.Добавить("Полугодие");
	Список.Добавить("Год");
	ДанныеВыбора = Список;
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПараметра(Имя,Значение)
	Параметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(Имя);
	Параметр.Значение = Значение;
	Параметр.Использование=Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыгрузитьСписокВСтроку(Список, МаксЧислоСимволовНаЭлемент = 50, РазделительЭлементов = "; ", ВыгружатьПолныеНаименованияОрганизаций=Ложь, ПредставлениеПустойСсылки = "") Экспорт

	Результат = "";
	Для Каждого ЭлементСписка Из Список Цикл
		Если НЕ ВыгружатьПолныеНаименованияОрганизаций Тогда
			Если Не ПустаяСтрока(ЭлементСписка.Представление) Тогда
				ПредставлениеЭлемента = ЭлементСписка.Представление;
			Иначе
				ПредставлениеЭлемента = Строка(ЭлементСписка.Значение);
			КонецЕсли;
			ПредставлениеЭлемента = СокрЛП(ПредставлениеЭлемента);
			Если Не ПустаяСтрока(ПредставлениеЭлемента) Тогда
				
				Если МаксЧислоСимволовНаЭлемент > 0 И Список.Количество() > 1 Тогда
					Если СтрДлина(ПредставлениеЭлемента) > МаксЧислоСимволовНаЭлемент Тогда
						ПредставлениеЭлемента = Лев(ПредставлениеЭлемента, МаксЧислоСимволовНаЭлемент) + "...";
					КонецЕсли;
				КонецЕсли;
			
				Если Не ПустаяСтрока(Результат) Тогда
					Результат = Результат + РазделительЭлементов;
				КонецЕсли;
			
				Результат = Результат + ПредставлениеЭлемента;
				
			КонецЕсли;
		Иначе
			Попытка 
				ПредставлениеЭлемента = ЭлементСписка.Значение.НаименованиеПолное;
			Исключение
				ПредставлениеЭлемента = "";
			КонецПопытки;
			Если Не ПустаяСтрока(Результат) Тогда
				Результат = Результат + РазделительЭлементов;
			КонецЕсли;
		
			Результат = Результат + ПредставлениеЭлемента;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // ВыгрузитьСписокВСтроку()


&НаСервере
Функция ПолучитьПредставлениеПериода(мОтчетОбъект = Неопределено, НачалоПериода = Неопределено, КонецПериода = Неопределено, ТолькоДаты  = Ложь) Экспорт
	
	ТекстПериод = "";
	
	Если мОтчетОбъект <> Неопределено Тогда 
		ПараметрНачало = мОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода");
		ПараметрКонец = мОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода");
		ПараметрПериод = мОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
		Если ПараметрНачало = Неопределено И  ПараметрКонец = Неопределено И ПараметрПериод = Неопределено Тогда
			Возврат "";
		КонецЕсли;
		НачалоПериода = ?(ПараметрНачало=Неопределено,ПараметрПериод.Значение,ПараметрНачало.Значение);
		КонецПериода  = ?(ПараметрКонец=Неопределено,ПараметрПериод.Значение,ПараметрКонец.Значение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда 
		Если КонецПериода >= НачалоПериода Тогда
			ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП");
		ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, Найти(ТекстПериод, " - ")), " - ...");
	КонецЕсли;
	
	Возврат ТекстПериод;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ИнформацияДляРасшифровки,ДанныеРасшифровки)
	РодительскиеПоля = ИнформацияДляРасшифровки.ПолучитьРодителей();
	Для Каждого ПолеРодитель Из РодительскиеПоля Цикл
		ДанныеРодителя = ДанныеРасшифровки.Элементы.Получить(ПолеРодитель.Идентификатор);
		Если НЕ ТипЗнч(ДанныеРодителя)=Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
			Для Каждого ПолеРодителя Из ДанныеРодителя.ПолучитьПоля() Цикл
				Если ПолеРодителя.Поле = "ЕдиницаИзмерения" Тогда
					Продолжить;
				КонецЕсли;
				НС = ТаблицаОтбора.Добавить();
				НС.Поле = ПолеРодителя.Поле;
				НС.Значение = ПолеРодителя.Значение;
				НС.ВидСравнения = ?(ЗначениеЗаполнено(ПолеРодителя.Значение),?(ПолеРодителя.Иерархия,"ВИерархии","Равно"),"Незаполнено");
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьОтборИзГруппировок(ТаблицаОтбора,ДанныеРодителя,ДанныеРасшифровки);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПоказатьОтборИСортировкуНаСервере()
	ОтображатьОтборИСортировку 					= НЕ ОтображатьОтборИСортировку;
	Элементы.ПоказатьОтборИСортировку.Пометка 	= ОтображатьОтборИСортировку;
	Элементы.ГруппаНастройки.Видимость 			= ОтображатьОтборИСортировку;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтборИСортировку(Команда)
	ПоказатьОтборИСортировкуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСтандартныеНастройкиСтруктурыПриИзменении(Элемент)
	Элементы.РазделыНастроек.Доступность = НЕ ИспользоватьСтандартныеНастройкиСтруктуры;
	фин_УправлениеОтчетамиКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
КонецПроцедуры


&НаКлиенте
Процедура НачалоВыбораДоговорКонтрагента(Элемент,ДанныеВыбора, СтандартнаяОбработка)
	Если ИмяОтчета = "дог_ИсполнениеДоговоров" ИЛИ ИмяОтчета = "дог_АктуальнаяСпецификацияДоговора" Тогда
		СтандартнаяОбработка = Ложь;
		СтруктураОтбора = Новый Структура;
		Если ЗначениеЗаполнено(ЭтотОбъект["Организация"]) Тогда
			СтруктураОтбора.Вставить("Организация",ЭтотОбъект.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭтотОбъект["Контрагент"]) Тогда
			СтруктураОтбора.Вставить("Владелец",ЭтотОбъект.Контрагент);
		КонецЕсли;
		СтруктураОтбора.Вставить("Ссылка",СформироватьСписокДоговоров(ЭтотОбъект.Дата));
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора",Новый Структура("Отбор",СтруктураОтбора),Элемент);
	ИначеЕсли ЕстьКонтрагентВОтчете Тогда
		СтандартнаяОбработка = Ложь;
		ОтчетыСЕ = Новый Массив;
		ОтчетыСЕ.Добавить("дог_СверкаДанныхПоДоговорам");
		ОтчетыСЕ.Добавить("дог_ГрафикОтгрузкиПокупателям");
		ОтчетыСЕ.Добавить("дог_ГрафикПоступленияТоваровИУслугОтПоставщиков");
		ОтчетыСЕ.Добавить("дог_АнализИсполненияСроковПоставокПоДоговору");
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора",Новый Структура("Отбор",Новый Структура("Владелец,Организация",ЭтотОбъект.Контрагент,?(ОтчетыСЕ.Найти(ИмяОтчета)<>Неопределено,ЭтотОбъект.СписокСтруктурныхЕдиниц,ЭтотОбъект.Организация))),Элемент);
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция СформироватьСписокДоговоров(ДатаОтчета)
	СписокД = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ДоговорыИДополнительныеСоглашенияСрезПоследних.Договор
		|ИЗ
		|	РегистрСведений.дог_ДоговорыИДополнительныеСоглашения.СрезПоследних КАК ДоговорыИДополнительныеСоглашенияСрезПоследних";

	Запрос.УстановитьПараметр("ДатаОтчета", КонецДня(ДатаОтчета));

	Результат = Запрос.Выполнить();

	СписокД.Очистить();
	СписокД.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Договор"));
	Возврат СписокД;
КонецФункции



